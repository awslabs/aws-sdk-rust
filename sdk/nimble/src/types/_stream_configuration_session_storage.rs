// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a streaming sessionâ€™s upload storage.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StreamConfigurationSessionStorage {
    /// <p>The configuration for the upload storage root of the streaming session.</p>
    pub root: ::std::option::Option<crate::types::StreamingSessionStorageRoot>,
    /// <p>Allows artists to upload files to their workstations. The only valid option is <code>UPLOAD</code>.</p>
    pub mode: ::std::vec::Vec<crate::types::StreamingSessionStorageMode>,
}
impl StreamConfigurationSessionStorage {
    /// <p>The configuration for the upload storage root of the streaming session.</p>
    pub fn root(&self) -> ::std::option::Option<&crate::types::StreamingSessionStorageRoot> {
        self.root.as_ref()
    }
    /// <p>Allows artists to upload files to their workstations. The only valid option is <code>UPLOAD</code>.</p>
    pub fn mode(&self) -> &[crate::types::StreamingSessionStorageMode] {
        use std::ops::Deref;
        self.mode.deref()
    }
}
impl StreamConfigurationSessionStorage {
    /// Creates a new builder-style object to manufacture [`StreamConfigurationSessionStorage`](crate::types::StreamConfigurationSessionStorage).
    pub fn builder() -> crate::types::builders::StreamConfigurationSessionStorageBuilder {
        crate::types::builders::StreamConfigurationSessionStorageBuilder::default()
    }
}

/// A builder for [`StreamConfigurationSessionStorage`](crate::types::StreamConfigurationSessionStorage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StreamConfigurationSessionStorageBuilder {
    pub(crate) root: ::std::option::Option<crate::types::StreamingSessionStorageRoot>,
    pub(crate) mode: ::std::option::Option<::std::vec::Vec<crate::types::StreamingSessionStorageMode>>,
}
impl StreamConfigurationSessionStorageBuilder {
    /// <p>The configuration for the upload storage root of the streaming session.</p>
    pub fn root(mut self, input: crate::types::StreamingSessionStorageRoot) -> Self {
        self.root = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the upload storage root of the streaming session.</p>
    pub fn set_root(mut self, input: ::std::option::Option<crate::types::StreamingSessionStorageRoot>) -> Self {
        self.root = input;
        self
    }
    /// <p>The configuration for the upload storage root of the streaming session.</p>
    pub fn get_root(&self) -> &::std::option::Option<crate::types::StreamingSessionStorageRoot> {
        &self.root
    }
    /// Appends an item to `mode`.
    ///
    /// To override the contents of this collection use [`set_mode`](Self::set_mode).
    ///
    /// <p>Allows artists to upload files to their workstations. The only valid option is <code>UPLOAD</code>.</p>
    pub fn mode(mut self, input: crate::types::StreamingSessionStorageMode) -> Self {
        let mut v = self.mode.unwrap_or_default();
        v.push(input);
        self.mode = ::std::option::Option::Some(v);
        self
    }
    /// <p>Allows artists to upload files to their workstations. The only valid option is <code>UPLOAD</code>.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StreamingSessionStorageMode>>) -> Self {
        self.mode = input;
        self
    }
    /// <p>Allows artists to upload files to their workstations. The only valid option is <code>UPLOAD</code>.</p>
    pub fn get_mode(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StreamingSessionStorageMode>> {
        &self.mode
    }
    /// Consumes the builder and constructs a [`StreamConfigurationSessionStorage`](crate::types::StreamConfigurationSessionStorage).
    /// This method will fail if any of the following fields are not set:
    /// - [`mode`](crate::types::builders::StreamConfigurationSessionStorageBuilder::mode)
    pub fn build(self) -> ::std::result::Result<crate::types::StreamConfigurationSessionStorage, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StreamConfigurationSessionStorage {
            root: self.root,
            mode: self.mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mode",
                    "mode was not specified but it is required when building StreamConfigurationSessionStorage",
                )
            })?,
        })
    }
}
