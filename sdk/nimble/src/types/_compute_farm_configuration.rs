// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for a render farm that is associated with a studio resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ComputeFarmConfiguration {
    /// <p>The name of an Active Directory user that is used on ComputeFarm worker instances.</p>
    #[doc(hidden)]
    pub active_directory_user: std::option::Option<std::string::String>,
    /// <p>The endpoint of the ComputeFarm that is accessed by the studio component resource.</p>
    #[doc(hidden)]
    pub endpoint: std::option::Option<std::string::String>,
}
impl ComputeFarmConfiguration {
    /// <p>The name of an Active Directory user that is used on ComputeFarm worker instances.</p>
    pub fn active_directory_user(&self) -> std::option::Option<&str> {
        self.active_directory_user.as_deref()
    }
    /// <p>The endpoint of the ComputeFarm that is accessed by the studio component resource.</p>
    pub fn endpoint(&self) -> std::option::Option<&str> {
        self.endpoint.as_deref()
    }
}
impl std::fmt::Debug for ComputeFarmConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ComputeFarmConfiguration");
        formatter.field("active_directory_user", &self.active_directory_user);
        formatter.field("endpoint", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ComputeFarmConfiguration {
    /// Creates a new builder-style object to manufacture [`ComputeFarmConfiguration`](crate::types::ComputeFarmConfiguration).
    pub fn builder() -> crate::types::builders::ComputeFarmConfigurationBuilder {
        crate::types::builders::ComputeFarmConfigurationBuilder::default()
    }
}

/// A builder for [`ComputeFarmConfiguration`](crate::types::ComputeFarmConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ComputeFarmConfigurationBuilder {
    pub(crate) active_directory_user: std::option::Option<std::string::String>,
    pub(crate) endpoint: std::option::Option<std::string::String>,
}
impl ComputeFarmConfigurationBuilder {
    /// <p>The name of an Active Directory user that is used on ComputeFarm worker instances.</p>
    pub fn active_directory_user(mut self, input: impl Into<std::string::String>) -> Self {
        self.active_directory_user = Some(input.into());
        self
    }
    /// <p>The name of an Active Directory user that is used on ComputeFarm worker instances.</p>
    pub fn set_active_directory_user(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.active_directory_user = input;
        self
    }
    /// <p>The endpoint of the ComputeFarm that is accessed by the studio component resource.</p>
    pub fn endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint = Some(input.into());
        self
    }
    /// <p>The endpoint of the ComputeFarm that is accessed by the studio component resource.</p>
    pub fn set_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// Consumes the builder and constructs a [`ComputeFarmConfiguration`](crate::types::ComputeFarmConfiguration).
    pub fn build(self) -> crate::types::ComputeFarmConfiguration {
        crate::types::ComputeFarmConfiguration {
            active_directory_user: self.active_directory_user,
            endpoint: self.endpoint,
        }
    }
}
impl std::fmt::Debug for ComputeFarmConfigurationBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ComputeFarmConfigurationBuilder");
        formatter.field("active_directory_user", &self.active_directory_user);
        formatter.field("endpoint", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
