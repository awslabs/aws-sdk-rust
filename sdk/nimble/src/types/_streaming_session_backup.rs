// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the streaming session backup.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StreamingSessionBackup {
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The ISO timestamp in for when the resource was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ID of the launch profile which allowed the backups for the streaming session.</p>
    #[doc(hidden)]
    pub launch_profile_id: std::option::Option<std::string::String>,
    /// <p>The user ID of the user that owns the streaming session.</p>
    #[doc(hidden)]
    pub owned_by: std::option::Option<std::string::String>,
    /// <p>The streaming session ID for the <code>StreamingSessionBackup</code>.</p>
    #[doc(hidden)]
    pub session_id: std::option::Option<std::string::String>,
    /// <p>The streaming session state.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::StreamingSessionState>,
    /// <p>The status code.</p>
    #[doc(hidden)]
    pub status_code: std::option::Option<crate::types::StreamingSessionStatusCode>,
    /// <p>The status message for the streaming session backup.</p>
    #[doc(hidden)]
    pub status_message: std::option::Option<std::string::String>,
    /// <p>The ID of the backup.</p>
    #[doc(hidden)]
    pub backup_id: std::option::Option<std::string::String>,
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl StreamingSessionBackup {
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The ISO timestamp in for when the resource was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The ID of the launch profile which allowed the backups for the streaming session.</p>
    pub fn launch_profile_id(&self) -> std::option::Option<&str> {
        self.launch_profile_id.as_deref()
    }
    /// <p>The user ID of the user that owns the streaming session.</p>
    pub fn owned_by(&self) -> std::option::Option<&str> {
        self.owned_by.as_deref()
    }
    /// <p>The streaming session ID for the <code>StreamingSessionBackup</code>.</p>
    pub fn session_id(&self) -> std::option::Option<&str> {
        self.session_id.as_deref()
    }
    /// <p>The streaming session state.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::StreamingSessionState> {
        self.state.as_ref()
    }
    /// <p>The status code.</p>
    pub fn status_code(&self) -> std::option::Option<&crate::types::StreamingSessionStatusCode> {
        self.status_code.as_ref()
    }
    /// <p>The status message for the streaming session backup.</p>
    pub fn status_message(&self) -> std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The ID of the backup.</p>
    pub fn backup_id(&self) -> std::option::Option<&str> {
        self.backup_id.as_deref()
    }
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl StreamingSessionBackup {
    /// Creates a new builder-style object to manufacture [`StreamingSessionBackup`](crate::types::StreamingSessionBackup).
    pub fn builder() -> crate::types::builders::StreamingSessionBackupBuilder {
        crate::types::builders::StreamingSessionBackupBuilder::default()
    }
}

/// A builder for [`StreamingSessionBackup`](crate::types::StreamingSessionBackup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StreamingSessionBackupBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) launch_profile_id: std::option::Option<std::string::String>,
    pub(crate) owned_by: std::option::Option<std::string::String>,
    pub(crate) session_id: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::StreamingSessionState>,
    pub(crate) status_code: std::option::Option<crate::types::StreamingSessionStatusCode>,
    pub(crate) status_message: std::option::Option<std::string::String>,
    pub(crate) backup_id: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl StreamingSessionBackupBuilder {
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that is assigned to a studio resource and uniquely identifies it. ARNs are unique across all Regions.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ISO timestamp in for when the resource was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The ISO timestamp in for when the resource was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The ID of the launch profile which allowed the backups for the streaming session.</p>
    pub fn launch_profile_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.launch_profile_id = Some(input.into());
        self
    }
    /// <p>The ID of the launch profile which allowed the backups for the streaming session.</p>
    pub fn set_launch_profile_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.launch_profile_id = input;
        self
    }
    /// <p>The user ID of the user that owns the streaming session.</p>
    pub fn owned_by(mut self, input: impl Into<std::string::String>) -> Self {
        self.owned_by = Some(input.into());
        self
    }
    /// <p>The user ID of the user that owns the streaming session.</p>
    pub fn set_owned_by(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owned_by = input;
        self
    }
    /// <p>The streaming session ID for the <code>StreamingSessionBackup</code>.</p>
    pub fn session_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.session_id = Some(input.into());
        self
    }
    /// <p>The streaming session ID for the <code>StreamingSessionBackup</code>.</p>
    pub fn set_session_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.session_id = input;
        self
    }
    /// <p>The streaming session state.</p>
    pub fn state(mut self, input: crate::types::StreamingSessionState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The streaming session state.</p>
    pub fn set_state(
        mut self,
        input: std::option::Option<crate::types::StreamingSessionState>,
    ) -> Self {
        self.state = input;
        self
    }
    /// <p>The status code.</p>
    pub fn status_code(mut self, input: crate::types::StreamingSessionStatusCode) -> Self {
        self.status_code = Some(input);
        self
    }
    /// <p>The status code.</p>
    pub fn set_status_code(
        mut self,
        input: std::option::Option<crate::types::StreamingSessionStatusCode>,
    ) -> Self {
        self.status_code = input;
        self
    }
    /// <p>The status message for the streaming session backup.</p>
    pub fn status_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_message = Some(input.into());
        self
    }
    /// <p>The status message for the streaming session backup.</p>
    pub fn set_status_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The ID of the backup.</p>
    pub fn backup_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.backup_id = Some(input.into());
        self
    }
    /// <p>The ID of the backup.</p>
    pub fn set_backup_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.backup_id = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`StreamingSessionBackup`](crate::types::StreamingSessionBackup).
    pub fn build(self) -> crate::types::StreamingSessionBackup {
        crate::types::StreamingSessionBackup {
            arn: self.arn,
            created_at: self.created_at,
            launch_profile_id: self.launch_profile_id,
            owned_by: self.owned_by,
            session_id: self.session_id,
            state: self.state,
            status_code: self.status_code,
            status_message: self.status_message,
            backup_id: self.backup_id,
            tags: self.tags,
        }
    }
}
