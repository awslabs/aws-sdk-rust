// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartStudioSsoConfigurationRepairOutput {
    /// <p>Information about a studio.</p>
    #[doc(hidden)]
    pub studio: std::option::Option<crate::model::Studio>,
    _request_id: Option<String>,
}
impl StartStudioSsoConfigurationRepairOutput {
    /// <p>Information about a studio.</p>
    pub fn studio(&self) -> std::option::Option<&crate::model::Studio> {
        self.studio.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartStudioSsoConfigurationRepairOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartStudioSsoConfigurationRepairOutput {
    /// Creates a new builder-style object to manufacture [`StartStudioSsoConfigurationRepairOutput`](crate::output::StartStudioSsoConfigurationRepairOutput).
    pub fn builder() -> crate::output::start_studio_sso_configuration_repair_output::Builder {
        crate::output::start_studio_sso_configuration_repair_output::Builder::default()
    }
}

/// See [`StartStudioSsoConfigurationRepairOutput`](crate::output::StartStudioSsoConfigurationRepairOutput).
pub mod start_studio_sso_configuration_repair_output {

    /// A builder for [`StartStudioSsoConfigurationRepairOutput`](crate::output::StartStudioSsoConfigurationRepairOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) studio: std::option::Option<crate::model::Studio>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about a studio.</p>
        pub fn studio(mut self, input: crate::model::Studio) -> Self {
            self.studio = Some(input);
            self
        }
        /// <p>Information about a studio.</p>
        pub fn set_studio(mut self, input: std::option::Option<crate::model::Studio>) -> Self {
            self.studio = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartStudioSsoConfigurationRepairOutput`](crate::output::StartStudioSsoConfigurationRepairOutput).
        pub fn build(self) -> crate::output::StartStudioSsoConfigurationRepairOutput {
            crate::output::StartStudioSsoConfigurationRepairOutput {
                studio: self.studio,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutStudioMembersOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutStudioMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutStudioMembersOutput {
    /// Creates a new builder-style object to manufacture [`PutStudioMembersOutput`](crate::output::PutStudioMembersOutput).
    pub fn builder() -> crate::output::put_studio_members_output::Builder {
        crate::output::put_studio_members_output::Builder::default()
    }
}

/// See [`PutStudioMembersOutput`](crate::output::PutStudioMembersOutput).
pub mod put_studio_members_output {

    /// A builder for [`PutStudioMembersOutput`](crate::output::PutStudioMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutStudioMembersOutput`](crate::output::PutStudioMembersOutput).
        pub fn build(self) -> crate::output::PutStudioMembersOutput {
            crate::output::PutStudioMembersOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListStudioMembersOutput {
    /// <p>A list of admin members.</p>
    #[doc(hidden)]
    pub members: std::option::Option<std::vec::Vec<crate::model::StudioMembership>>,
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListStudioMembersOutput {
    /// <p>A list of admin members.</p>
    pub fn members(&self) -> std::option::Option<&[crate::model::StudioMembership]> {
        self.members.as_deref()
    }
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListStudioMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListStudioMembersOutput {
    /// Creates a new builder-style object to manufacture [`ListStudioMembersOutput`](crate::output::ListStudioMembersOutput).
    pub fn builder() -> crate::output::list_studio_members_output::Builder {
        crate::output::list_studio_members_output::Builder::default()
    }
}

/// See [`ListStudioMembersOutput`](crate::output::ListStudioMembersOutput).
pub mod list_studio_members_output {

    /// A builder for [`ListStudioMembersOutput`](crate::output::ListStudioMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) members: std::option::Option<std::vec::Vec<crate::model::StudioMembership>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `members`.
        ///
        /// To override the contents of this collection use [`set_members`](Self::set_members).
        ///
        /// <p>A list of admin members.</p>
        pub fn members(mut self, input: crate::model::StudioMembership) -> Self {
            let mut v = self.members.unwrap_or_default();
            v.push(input);
            self.members = Some(v);
            self
        }
        /// <p>A list of admin members.</p>
        pub fn set_members(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StudioMembership>>,
        ) -> Self {
            self.members = input;
            self
        }
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListStudioMembersOutput`](crate::output::ListStudioMembersOutput).
        pub fn build(self) -> crate::output::ListStudioMembersOutput {
            crate::output::ListStudioMembersOutput {
                members: self.members,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetStudioMemberOutput {
    /// <p>The member.</p>
    #[doc(hidden)]
    pub member: std::option::Option<crate::model::StudioMembership>,
    _request_id: Option<String>,
}
impl GetStudioMemberOutput {
    /// <p>The member.</p>
    pub fn member(&self) -> std::option::Option<&crate::model::StudioMembership> {
        self.member.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetStudioMemberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetStudioMemberOutput {
    /// Creates a new builder-style object to manufacture [`GetStudioMemberOutput`](crate::output::GetStudioMemberOutput).
    pub fn builder() -> crate::output::get_studio_member_output::Builder {
        crate::output::get_studio_member_output::Builder::default()
    }
}

/// See [`GetStudioMemberOutput`](crate::output::GetStudioMemberOutput).
pub mod get_studio_member_output {

    /// A builder for [`GetStudioMemberOutput`](crate::output::GetStudioMemberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) member: std::option::Option<crate::model::StudioMembership>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The member.</p>
        pub fn member(mut self, input: crate::model::StudioMembership) -> Self {
            self.member = Some(input);
            self
        }
        /// <p>The member.</p>
        pub fn set_member(
            mut self,
            input: std::option::Option<crate::model::StudioMembership>,
        ) -> Self {
            self.member = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetStudioMemberOutput`](crate::output::GetStudioMemberOutput).
        pub fn build(self) -> crate::output::GetStudioMemberOutput {
            crate::output::GetStudioMemberOutput {
                member: self.member,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteStudioMemberOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteStudioMemberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteStudioMemberOutput {
    /// Creates a new builder-style object to manufacture [`DeleteStudioMemberOutput`](crate::output::DeleteStudioMemberOutput).
    pub fn builder() -> crate::output::delete_studio_member_output::Builder {
        crate::output::delete_studio_member_output::Builder::default()
    }
}

/// See [`DeleteStudioMemberOutput`](crate::output::DeleteStudioMemberOutput).
pub mod delete_studio_member_output {

    /// A builder for [`DeleteStudioMemberOutput`](crate::output::DeleteStudioMemberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteStudioMemberOutput`](crate::output::DeleteStudioMemberOutput).
        pub fn build(self) -> crate::output::DeleteStudioMemberOutput {
            crate::output::DeleteStudioMemberOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListStudiosOutput {
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A collection of studios.</p>
    #[doc(hidden)]
    pub studios: std::option::Option<std::vec::Vec<crate::model::Studio>>,
    _request_id: Option<String>,
}
impl ListStudiosOutput {
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A collection of studios.</p>
    pub fn studios(&self) -> std::option::Option<&[crate::model::Studio]> {
        self.studios.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListStudiosOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListStudiosOutput {
    /// Creates a new builder-style object to manufacture [`ListStudiosOutput`](crate::output::ListStudiosOutput).
    pub fn builder() -> crate::output::list_studios_output::Builder {
        crate::output::list_studios_output::Builder::default()
    }
}

/// See [`ListStudiosOutput`](crate::output::ListStudiosOutput).
pub mod list_studios_output {

    /// A builder for [`ListStudiosOutput`](crate::output::ListStudiosOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) studios: std::option::Option<std::vec::Vec<crate::model::Studio>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `studios`.
        ///
        /// To override the contents of this collection use [`set_studios`](Self::set_studios).
        ///
        /// <p>A collection of studios.</p>
        pub fn studios(mut self, input: crate::model::Studio) -> Self {
            let mut v = self.studios.unwrap_or_default();
            v.push(input);
            self.studios = Some(v);
            self
        }
        /// <p>A collection of studios.</p>
        pub fn set_studios(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Studio>>,
        ) -> Self {
            self.studios = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListStudiosOutput`](crate::output::ListStudiosOutput).
        pub fn build(self) -> crate::output::ListStudiosOutput {
            crate::output::ListStudiosOutput {
                next_token: self.next_token,
                studios: self.studios,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateStudioOutput {
    /// <p>Information about a studio.</p>
    #[doc(hidden)]
    pub studio: std::option::Option<crate::model::Studio>,
    _request_id: Option<String>,
}
impl CreateStudioOutput {
    /// <p>Information about a studio.</p>
    pub fn studio(&self) -> std::option::Option<&crate::model::Studio> {
        self.studio.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateStudioOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateStudioOutput {
    /// Creates a new builder-style object to manufacture [`CreateStudioOutput`](crate::output::CreateStudioOutput).
    pub fn builder() -> crate::output::create_studio_output::Builder {
        crate::output::create_studio_output::Builder::default()
    }
}

/// See [`CreateStudioOutput`](crate::output::CreateStudioOutput).
pub mod create_studio_output {

    /// A builder for [`CreateStudioOutput`](crate::output::CreateStudioOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) studio: std::option::Option<crate::model::Studio>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about a studio.</p>
        pub fn studio(mut self, input: crate::model::Studio) -> Self {
            self.studio = Some(input);
            self
        }
        /// <p>Information about a studio.</p>
        pub fn set_studio(mut self, input: std::option::Option<crate::model::Studio>) -> Self {
            self.studio = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateStudioOutput`](crate::output::CreateStudioOutput).
        pub fn build(self) -> crate::output::CreateStudioOutput {
            crate::output::CreateStudioOutput {
                studio: self.studio,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteStudioOutput {
    /// <p>Information about a studio.</p>
    #[doc(hidden)]
    pub studio: std::option::Option<crate::model::Studio>,
    _request_id: Option<String>,
}
impl DeleteStudioOutput {
    /// <p>Information about a studio.</p>
    pub fn studio(&self) -> std::option::Option<&crate::model::Studio> {
        self.studio.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteStudioOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteStudioOutput {
    /// Creates a new builder-style object to manufacture [`DeleteStudioOutput`](crate::output::DeleteStudioOutput).
    pub fn builder() -> crate::output::delete_studio_output::Builder {
        crate::output::delete_studio_output::Builder::default()
    }
}

/// See [`DeleteStudioOutput`](crate::output::DeleteStudioOutput).
pub mod delete_studio_output {

    /// A builder for [`DeleteStudioOutput`](crate::output::DeleteStudioOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) studio: std::option::Option<crate::model::Studio>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about a studio.</p>
        pub fn studio(mut self, input: crate::model::Studio) -> Self {
            self.studio = Some(input);
            self
        }
        /// <p>Information about a studio.</p>
        pub fn set_studio(mut self, input: std::option::Option<crate::model::Studio>) -> Self {
            self.studio = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteStudioOutput`](crate::output::DeleteStudioOutput).
        pub fn build(self) -> crate::output::DeleteStudioOutput {
            crate::output::DeleteStudioOutput {
                studio: self.studio,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateStudioOutput {
    /// <p>Information about a studio.</p>
    #[doc(hidden)]
    pub studio: std::option::Option<crate::model::Studio>,
    _request_id: Option<String>,
}
impl UpdateStudioOutput {
    /// <p>Information about a studio.</p>
    pub fn studio(&self) -> std::option::Option<&crate::model::Studio> {
        self.studio.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateStudioOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateStudioOutput {
    /// Creates a new builder-style object to manufacture [`UpdateStudioOutput`](crate::output::UpdateStudioOutput).
    pub fn builder() -> crate::output::update_studio_output::Builder {
        crate::output::update_studio_output::Builder::default()
    }
}

/// See [`UpdateStudioOutput`](crate::output::UpdateStudioOutput).
pub mod update_studio_output {

    /// A builder for [`UpdateStudioOutput`](crate::output::UpdateStudioOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) studio: std::option::Option<crate::model::Studio>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about a studio.</p>
        pub fn studio(mut self, input: crate::model::Studio) -> Self {
            self.studio = Some(input);
            self
        }
        /// <p>Information about a studio.</p>
        pub fn set_studio(mut self, input: std::option::Option<crate::model::Studio>) -> Self {
            self.studio = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateStudioOutput`](crate::output::UpdateStudioOutput).
        pub fn build(self) -> crate::output::UpdateStudioOutput {
            crate::output::UpdateStudioOutput {
                studio: self.studio,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetStudioOutput {
    /// <p>Information about a studio.</p>
    #[doc(hidden)]
    pub studio: std::option::Option<crate::model::Studio>,
    _request_id: Option<String>,
}
impl GetStudioOutput {
    /// <p>Information about a studio.</p>
    pub fn studio(&self) -> std::option::Option<&crate::model::Studio> {
        self.studio.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetStudioOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetStudioOutput {
    /// Creates a new builder-style object to manufacture [`GetStudioOutput`](crate::output::GetStudioOutput).
    pub fn builder() -> crate::output::get_studio_output::Builder {
        crate::output::get_studio_output::Builder::default()
    }
}

/// See [`GetStudioOutput`](crate::output::GetStudioOutput).
pub mod get_studio_output {

    /// A builder for [`GetStudioOutput`](crate::output::GetStudioOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) studio: std::option::Option<crate::model::Studio>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about a studio.</p>
        pub fn studio(mut self, input: crate::model::Studio) -> Self {
            self.studio = Some(input);
            self
        }
        /// <p>Information about a studio.</p>
        pub fn set_studio(mut self, input: std::option::Option<crate::model::Studio>) -> Self {
            self.studio = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetStudioOutput`](crate::output::GetStudioOutput).
        pub fn build(self) -> crate::output::GetStudioOutput {
            crate::output::GetStudioOutput {
                studio: self.studio,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListStudioComponentsOutput {
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A collection of studio components.</p>
    #[doc(hidden)]
    pub studio_components: std::option::Option<std::vec::Vec<crate::model::StudioComponent>>,
    _request_id: Option<String>,
}
impl ListStudioComponentsOutput {
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A collection of studio components.</p>
    pub fn studio_components(&self) -> std::option::Option<&[crate::model::StudioComponent]> {
        self.studio_components.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListStudioComponentsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListStudioComponentsOutput {
    /// Creates a new builder-style object to manufacture [`ListStudioComponentsOutput`](crate::output::ListStudioComponentsOutput).
    pub fn builder() -> crate::output::list_studio_components_output::Builder {
        crate::output::list_studio_components_output::Builder::default()
    }
}

/// See [`ListStudioComponentsOutput`](crate::output::ListStudioComponentsOutput).
pub mod list_studio_components_output {

    /// A builder for [`ListStudioComponentsOutput`](crate::output::ListStudioComponentsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) studio_components:
            std::option::Option<std::vec::Vec<crate::model::StudioComponent>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `studio_components`.
        ///
        /// To override the contents of this collection use [`set_studio_components`](Self::set_studio_components).
        ///
        /// <p>A collection of studio components.</p>
        pub fn studio_components(mut self, input: crate::model::StudioComponent) -> Self {
            let mut v = self.studio_components.unwrap_or_default();
            v.push(input);
            self.studio_components = Some(v);
            self
        }
        /// <p>A collection of studio components.</p>
        pub fn set_studio_components(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StudioComponent>>,
        ) -> Self {
            self.studio_components = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListStudioComponentsOutput`](crate::output::ListStudioComponentsOutput).
        pub fn build(self) -> crate::output::ListStudioComponentsOutput {
            crate::output::ListStudioComponentsOutput {
                next_token: self.next_token,
                studio_components: self.studio_components,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateStudioComponentOutput {
    /// <p>Information about the studio component.</p>
    #[doc(hidden)]
    pub studio_component: std::option::Option<crate::model::StudioComponent>,
    _request_id: Option<String>,
}
impl CreateStudioComponentOutput {
    /// <p>Information about the studio component.</p>
    pub fn studio_component(&self) -> std::option::Option<&crate::model::StudioComponent> {
        self.studio_component.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateStudioComponentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateStudioComponentOutput {
    /// Creates a new builder-style object to manufacture [`CreateStudioComponentOutput`](crate::output::CreateStudioComponentOutput).
    pub fn builder() -> crate::output::create_studio_component_output::Builder {
        crate::output::create_studio_component_output::Builder::default()
    }
}

/// See [`CreateStudioComponentOutput`](crate::output::CreateStudioComponentOutput).
pub mod create_studio_component_output {

    /// A builder for [`CreateStudioComponentOutput`](crate::output::CreateStudioComponentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) studio_component: std::option::Option<crate::model::StudioComponent>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the studio component.</p>
        pub fn studio_component(mut self, input: crate::model::StudioComponent) -> Self {
            self.studio_component = Some(input);
            self
        }
        /// <p>Information about the studio component.</p>
        pub fn set_studio_component(
            mut self,
            input: std::option::Option<crate::model::StudioComponent>,
        ) -> Self {
            self.studio_component = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateStudioComponentOutput`](crate::output::CreateStudioComponentOutput).
        pub fn build(self) -> crate::output::CreateStudioComponentOutput {
            crate::output::CreateStudioComponentOutput {
                studio_component: self.studio_component,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteStudioComponentOutput {
    /// <p>Information about the studio component.</p>
    #[doc(hidden)]
    pub studio_component: std::option::Option<crate::model::StudioComponent>,
    _request_id: Option<String>,
}
impl DeleteStudioComponentOutput {
    /// <p>Information about the studio component.</p>
    pub fn studio_component(&self) -> std::option::Option<&crate::model::StudioComponent> {
        self.studio_component.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteStudioComponentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteStudioComponentOutput {
    /// Creates a new builder-style object to manufacture [`DeleteStudioComponentOutput`](crate::output::DeleteStudioComponentOutput).
    pub fn builder() -> crate::output::delete_studio_component_output::Builder {
        crate::output::delete_studio_component_output::Builder::default()
    }
}

/// See [`DeleteStudioComponentOutput`](crate::output::DeleteStudioComponentOutput).
pub mod delete_studio_component_output {

    /// A builder for [`DeleteStudioComponentOutput`](crate::output::DeleteStudioComponentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) studio_component: std::option::Option<crate::model::StudioComponent>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the studio component.</p>
        pub fn studio_component(mut self, input: crate::model::StudioComponent) -> Self {
            self.studio_component = Some(input);
            self
        }
        /// <p>Information about the studio component.</p>
        pub fn set_studio_component(
            mut self,
            input: std::option::Option<crate::model::StudioComponent>,
        ) -> Self {
            self.studio_component = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteStudioComponentOutput`](crate::output::DeleteStudioComponentOutput).
        pub fn build(self) -> crate::output::DeleteStudioComponentOutput {
            crate::output::DeleteStudioComponentOutput {
                studio_component: self.studio_component,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateStudioComponentOutput {
    /// <p>Information about the studio component.</p>
    #[doc(hidden)]
    pub studio_component: std::option::Option<crate::model::StudioComponent>,
    _request_id: Option<String>,
}
impl UpdateStudioComponentOutput {
    /// <p>Information about the studio component.</p>
    pub fn studio_component(&self) -> std::option::Option<&crate::model::StudioComponent> {
        self.studio_component.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateStudioComponentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateStudioComponentOutput {
    /// Creates a new builder-style object to manufacture [`UpdateStudioComponentOutput`](crate::output::UpdateStudioComponentOutput).
    pub fn builder() -> crate::output::update_studio_component_output::Builder {
        crate::output::update_studio_component_output::Builder::default()
    }
}

/// See [`UpdateStudioComponentOutput`](crate::output::UpdateStudioComponentOutput).
pub mod update_studio_component_output {

    /// A builder for [`UpdateStudioComponentOutput`](crate::output::UpdateStudioComponentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) studio_component: std::option::Option<crate::model::StudioComponent>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the studio component.</p>
        pub fn studio_component(mut self, input: crate::model::StudioComponent) -> Self {
            self.studio_component = Some(input);
            self
        }
        /// <p>Information about the studio component.</p>
        pub fn set_studio_component(
            mut self,
            input: std::option::Option<crate::model::StudioComponent>,
        ) -> Self {
            self.studio_component = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateStudioComponentOutput`](crate::output::UpdateStudioComponentOutput).
        pub fn build(self) -> crate::output::UpdateStudioComponentOutput {
            crate::output::UpdateStudioComponentOutput {
                studio_component: self.studio_component,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetStudioComponentOutput {
    /// <p>Information about the studio component.</p>
    #[doc(hidden)]
    pub studio_component: std::option::Option<crate::model::StudioComponent>,
    _request_id: Option<String>,
}
impl GetStudioComponentOutput {
    /// <p>Information about the studio component.</p>
    pub fn studio_component(&self) -> std::option::Option<&crate::model::StudioComponent> {
        self.studio_component.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetStudioComponentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetStudioComponentOutput {
    /// Creates a new builder-style object to manufacture [`GetStudioComponentOutput`](crate::output::GetStudioComponentOutput).
    pub fn builder() -> crate::output::get_studio_component_output::Builder {
        crate::output::get_studio_component_output::Builder::default()
    }
}

/// See [`GetStudioComponentOutput`](crate::output::GetStudioComponentOutput).
pub mod get_studio_component_output {

    /// A builder for [`GetStudioComponentOutput`](crate::output::GetStudioComponentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) studio_component: std::option::Option<crate::model::StudioComponent>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the studio component.</p>
        pub fn studio_component(mut self, input: crate::model::StudioComponent) -> Self {
            self.studio_component = Some(input);
            self
        }
        /// <p>Information about the studio component.</p>
        pub fn set_studio_component(
            mut self,
            input: std::option::Option<crate::model::StudioComponent>,
        ) -> Self {
            self.studio_component = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetStudioComponentOutput`](crate::output::GetStudioComponentOutput).
        pub fn build(self) -> crate::output::GetStudioComponentOutput {
            crate::output::GetStudioComponentOutput {
                studio_component: self.studio_component,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopStreamingSessionOutput {
    /// <p>A streaming session is a virtual workstation created using a particular launch profile.</p>
    #[doc(hidden)]
    pub session: std::option::Option<crate::model::StreamingSession>,
    _request_id: Option<String>,
}
impl StopStreamingSessionOutput {
    /// <p>A streaming session is a virtual workstation created using a particular launch profile.</p>
    pub fn session(&self) -> std::option::Option<&crate::model::StreamingSession> {
        self.session.as_ref()
    }
}
impl aws_http::request_id::RequestId for StopStreamingSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StopStreamingSessionOutput {
    /// Creates a new builder-style object to manufacture [`StopStreamingSessionOutput`](crate::output::StopStreamingSessionOutput).
    pub fn builder() -> crate::output::stop_streaming_session_output::Builder {
        crate::output::stop_streaming_session_output::Builder::default()
    }
}

/// See [`StopStreamingSessionOutput`](crate::output::StopStreamingSessionOutput).
pub mod stop_streaming_session_output {

    /// A builder for [`StopStreamingSessionOutput`](crate::output::StopStreamingSessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) session: std::option::Option<crate::model::StreamingSession>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A streaming session is a virtual workstation created using a particular launch profile.</p>
        pub fn session(mut self, input: crate::model::StreamingSession) -> Self {
            self.session = Some(input);
            self
        }
        /// <p>A streaming session is a virtual workstation created using a particular launch profile.</p>
        pub fn set_session(
            mut self,
            input: std::option::Option<crate::model::StreamingSession>,
        ) -> Self {
            self.session = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StopStreamingSessionOutput`](crate::output::StopStreamingSessionOutput).
        pub fn build(self) -> crate::output::StopStreamingSessionOutput {
            crate::output::StopStreamingSessionOutput {
                session: self.session,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartStreamingSessionOutput {
    /// <p>A streaming session is a virtual workstation created using a particular launch profile.</p>
    #[doc(hidden)]
    pub session: std::option::Option<crate::model::StreamingSession>,
    _request_id: Option<String>,
}
impl StartStreamingSessionOutput {
    /// <p>A streaming session is a virtual workstation created using a particular launch profile.</p>
    pub fn session(&self) -> std::option::Option<&crate::model::StreamingSession> {
        self.session.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartStreamingSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartStreamingSessionOutput {
    /// Creates a new builder-style object to manufacture [`StartStreamingSessionOutput`](crate::output::StartStreamingSessionOutput).
    pub fn builder() -> crate::output::start_streaming_session_output::Builder {
        crate::output::start_streaming_session_output::Builder::default()
    }
}

/// See [`StartStreamingSessionOutput`](crate::output::StartStreamingSessionOutput).
pub mod start_streaming_session_output {

    /// A builder for [`StartStreamingSessionOutput`](crate::output::StartStreamingSessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) session: std::option::Option<crate::model::StreamingSession>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A streaming session is a virtual workstation created using a particular launch profile.</p>
        pub fn session(mut self, input: crate::model::StreamingSession) -> Self {
            self.session = Some(input);
            self
        }
        /// <p>A streaming session is a virtual workstation created using a particular launch profile.</p>
        pub fn set_session(
            mut self,
            input: std::option::Option<crate::model::StreamingSession>,
        ) -> Self {
            self.session = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartStreamingSessionOutput`](crate::output::StartStreamingSessionOutput).
        pub fn build(self) -> crate::output::StartStreamingSessionOutput {
            crate::output::StartStreamingSessionOutput {
                session: self.session,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetStreamingSessionStreamOutput {
    /// <p>The stream.</p>
    #[doc(hidden)]
    pub stream: std::option::Option<crate::model::StreamingSessionStream>,
    _request_id: Option<String>,
}
impl GetStreamingSessionStreamOutput {
    /// <p>The stream.</p>
    pub fn stream(&self) -> std::option::Option<&crate::model::StreamingSessionStream> {
        self.stream.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetStreamingSessionStreamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetStreamingSessionStreamOutput {
    /// Creates a new builder-style object to manufacture [`GetStreamingSessionStreamOutput`](crate::output::GetStreamingSessionStreamOutput).
    pub fn builder() -> crate::output::get_streaming_session_stream_output::Builder {
        crate::output::get_streaming_session_stream_output::Builder::default()
    }
}

/// See [`GetStreamingSessionStreamOutput`](crate::output::GetStreamingSessionStreamOutput).
pub mod get_streaming_session_stream_output {

    /// A builder for [`GetStreamingSessionStreamOutput`](crate::output::GetStreamingSessionStreamOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) stream: std::option::Option<crate::model::StreamingSessionStream>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The stream.</p>
        pub fn stream(mut self, input: crate::model::StreamingSessionStream) -> Self {
            self.stream = Some(input);
            self
        }
        /// <p>The stream.</p>
        pub fn set_stream(
            mut self,
            input: std::option::Option<crate::model::StreamingSessionStream>,
        ) -> Self {
            self.stream = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetStreamingSessionStreamOutput`](crate::output::GetStreamingSessionStreamOutput).
        pub fn build(self) -> crate::output::GetStreamingSessionStreamOutput {
            crate::output::GetStreamingSessionStreamOutput {
                stream: self.stream,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateStreamingSessionStreamOutput {
    /// <p>The stream.</p>
    #[doc(hidden)]
    pub stream: std::option::Option<crate::model::StreamingSessionStream>,
    _request_id: Option<String>,
}
impl CreateStreamingSessionStreamOutput {
    /// <p>The stream.</p>
    pub fn stream(&self) -> std::option::Option<&crate::model::StreamingSessionStream> {
        self.stream.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateStreamingSessionStreamOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateStreamingSessionStreamOutput {
    /// Creates a new builder-style object to manufacture [`CreateStreamingSessionStreamOutput`](crate::output::CreateStreamingSessionStreamOutput).
    pub fn builder() -> crate::output::create_streaming_session_stream_output::Builder {
        crate::output::create_streaming_session_stream_output::Builder::default()
    }
}

/// See [`CreateStreamingSessionStreamOutput`](crate::output::CreateStreamingSessionStreamOutput).
pub mod create_streaming_session_stream_output {

    /// A builder for [`CreateStreamingSessionStreamOutput`](crate::output::CreateStreamingSessionStreamOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) stream: std::option::Option<crate::model::StreamingSessionStream>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The stream.</p>
        pub fn stream(mut self, input: crate::model::StreamingSessionStream) -> Self {
            self.stream = Some(input);
            self
        }
        /// <p>The stream.</p>
        pub fn set_stream(
            mut self,
            input: std::option::Option<crate::model::StreamingSessionStream>,
        ) -> Self {
            self.stream = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateStreamingSessionStreamOutput`](crate::output::CreateStreamingSessionStreamOutput).
        pub fn build(self) -> crate::output::CreateStreamingSessionStreamOutput {
            crate::output::CreateStreamingSessionStreamOutput {
                stream: self.stream,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListStreamingSessionsOutput {
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A collection of streaming sessions.</p>
    #[doc(hidden)]
    pub sessions: std::option::Option<std::vec::Vec<crate::model::StreamingSession>>,
    _request_id: Option<String>,
}
impl ListStreamingSessionsOutput {
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A collection of streaming sessions.</p>
    pub fn sessions(&self) -> std::option::Option<&[crate::model::StreamingSession]> {
        self.sessions.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListStreamingSessionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListStreamingSessionsOutput {
    /// Creates a new builder-style object to manufacture [`ListStreamingSessionsOutput`](crate::output::ListStreamingSessionsOutput).
    pub fn builder() -> crate::output::list_streaming_sessions_output::Builder {
        crate::output::list_streaming_sessions_output::Builder::default()
    }
}

/// See [`ListStreamingSessionsOutput`](crate::output::ListStreamingSessionsOutput).
pub mod list_streaming_sessions_output {

    /// A builder for [`ListStreamingSessionsOutput`](crate::output::ListStreamingSessionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) sessions: std::option::Option<std::vec::Vec<crate::model::StreamingSession>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `sessions`.
        ///
        /// To override the contents of this collection use [`set_sessions`](Self::set_sessions).
        ///
        /// <p>A collection of streaming sessions.</p>
        pub fn sessions(mut self, input: crate::model::StreamingSession) -> Self {
            let mut v = self.sessions.unwrap_or_default();
            v.push(input);
            self.sessions = Some(v);
            self
        }
        /// <p>A collection of streaming sessions.</p>
        pub fn set_sessions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StreamingSession>>,
        ) -> Self {
            self.sessions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListStreamingSessionsOutput`](crate::output::ListStreamingSessionsOutput).
        pub fn build(self) -> crate::output::ListStreamingSessionsOutput {
            crate::output::ListStreamingSessionsOutput {
                next_token: self.next_token,
                sessions: self.sessions,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateStreamingSessionOutput {
    /// <p>The session.</p>
    #[doc(hidden)]
    pub session: std::option::Option<crate::model::StreamingSession>,
    _request_id: Option<String>,
}
impl CreateStreamingSessionOutput {
    /// <p>The session.</p>
    pub fn session(&self) -> std::option::Option<&crate::model::StreamingSession> {
        self.session.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateStreamingSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateStreamingSessionOutput {
    /// Creates a new builder-style object to manufacture [`CreateStreamingSessionOutput`](crate::output::CreateStreamingSessionOutput).
    pub fn builder() -> crate::output::create_streaming_session_output::Builder {
        crate::output::create_streaming_session_output::Builder::default()
    }
}

/// See [`CreateStreamingSessionOutput`](crate::output::CreateStreamingSessionOutput).
pub mod create_streaming_session_output {

    /// A builder for [`CreateStreamingSessionOutput`](crate::output::CreateStreamingSessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) session: std::option::Option<crate::model::StreamingSession>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The session.</p>
        pub fn session(mut self, input: crate::model::StreamingSession) -> Self {
            self.session = Some(input);
            self
        }
        /// <p>The session.</p>
        pub fn set_session(
            mut self,
            input: std::option::Option<crate::model::StreamingSession>,
        ) -> Self {
            self.session = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateStreamingSessionOutput`](crate::output::CreateStreamingSessionOutput).
        pub fn build(self) -> crate::output::CreateStreamingSessionOutput {
            crate::output::CreateStreamingSessionOutput {
                session: self.session,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteStreamingSessionOutput {
    /// <p>The session.</p>
    #[doc(hidden)]
    pub session: std::option::Option<crate::model::StreamingSession>,
    _request_id: Option<String>,
}
impl DeleteStreamingSessionOutput {
    /// <p>The session.</p>
    pub fn session(&self) -> std::option::Option<&crate::model::StreamingSession> {
        self.session.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteStreamingSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteStreamingSessionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteStreamingSessionOutput`](crate::output::DeleteStreamingSessionOutput).
    pub fn builder() -> crate::output::delete_streaming_session_output::Builder {
        crate::output::delete_streaming_session_output::Builder::default()
    }
}

/// See [`DeleteStreamingSessionOutput`](crate::output::DeleteStreamingSessionOutput).
pub mod delete_streaming_session_output {

    /// A builder for [`DeleteStreamingSessionOutput`](crate::output::DeleteStreamingSessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) session: std::option::Option<crate::model::StreamingSession>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The session.</p>
        pub fn session(mut self, input: crate::model::StreamingSession) -> Self {
            self.session = Some(input);
            self
        }
        /// <p>The session.</p>
        pub fn set_session(
            mut self,
            input: std::option::Option<crate::model::StreamingSession>,
        ) -> Self {
            self.session = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteStreamingSessionOutput`](crate::output::DeleteStreamingSessionOutput).
        pub fn build(self) -> crate::output::DeleteStreamingSessionOutput {
            crate::output::DeleteStreamingSessionOutput {
                session: self.session,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetStreamingSessionOutput {
    /// <p>The session.</p>
    #[doc(hidden)]
    pub session: std::option::Option<crate::model::StreamingSession>,
    _request_id: Option<String>,
}
impl GetStreamingSessionOutput {
    /// <p>The session.</p>
    pub fn session(&self) -> std::option::Option<&crate::model::StreamingSession> {
        self.session.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetStreamingSessionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetStreamingSessionOutput {
    /// Creates a new builder-style object to manufacture [`GetStreamingSessionOutput`](crate::output::GetStreamingSessionOutput).
    pub fn builder() -> crate::output::get_streaming_session_output::Builder {
        crate::output::get_streaming_session_output::Builder::default()
    }
}

/// See [`GetStreamingSessionOutput`](crate::output::GetStreamingSessionOutput).
pub mod get_streaming_session_output {

    /// A builder for [`GetStreamingSessionOutput`](crate::output::GetStreamingSessionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) session: std::option::Option<crate::model::StreamingSession>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The session.</p>
        pub fn session(mut self, input: crate::model::StreamingSession) -> Self {
            self.session = Some(input);
            self
        }
        /// <p>The session.</p>
        pub fn set_session(
            mut self,
            input: std::option::Option<crate::model::StreamingSession>,
        ) -> Self {
            self.session = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetStreamingSessionOutput`](crate::output::GetStreamingSessionOutput).
        pub fn build(self) -> crate::output::GetStreamingSessionOutput {
            crate::output::GetStreamingSessionOutput {
                session: self.session,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListStreamingSessionBackupsOutput {
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Information about the streaming session backups.</p>
    #[doc(hidden)]
    pub streaming_session_backups:
        std::option::Option<std::vec::Vec<crate::model::StreamingSessionBackup>>,
    _request_id: Option<String>,
}
impl ListStreamingSessionBackupsOutput {
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Information about the streaming session backups.</p>
    pub fn streaming_session_backups(
        &self,
    ) -> std::option::Option<&[crate::model::StreamingSessionBackup]> {
        self.streaming_session_backups.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListStreamingSessionBackupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListStreamingSessionBackupsOutput {
    /// Creates a new builder-style object to manufacture [`ListStreamingSessionBackupsOutput`](crate::output::ListStreamingSessionBackupsOutput).
    pub fn builder() -> crate::output::list_streaming_session_backups_output::Builder {
        crate::output::list_streaming_session_backups_output::Builder::default()
    }
}

/// See [`ListStreamingSessionBackupsOutput`](crate::output::ListStreamingSessionBackupsOutput).
pub mod list_streaming_session_backups_output {

    /// A builder for [`ListStreamingSessionBackupsOutput`](crate::output::ListStreamingSessionBackupsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) streaming_session_backups:
            std::option::Option<std::vec::Vec<crate::model::StreamingSessionBackup>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `streaming_session_backups`.
        ///
        /// To override the contents of this collection use [`set_streaming_session_backups`](Self::set_streaming_session_backups).
        ///
        /// <p>Information about the streaming session backups.</p>
        pub fn streaming_session_backups(
            mut self,
            input: crate::model::StreamingSessionBackup,
        ) -> Self {
            let mut v = self.streaming_session_backups.unwrap_or_default();
            v.push(input);
            self.streaming_session_backups = Some(v);
            self
        }
        /// <p>Information about the streaming session backups.</p>
        pub fn set_streaming_session_backups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StreamingSessionBackup>>,
        ) -> Self {
            self.streaming_session_backups = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListStreamingSessionBackupsOutput`](crate::output::ListStreamingSessionBackupsOutput).
        pub fn build(self) -> crate::output::ListStreamingSessionBackupsOutput {
            crate::output::ListStreamingSessionBackupsOutput {
                next_token: self.next_token,
                streaming_session_backups: self.streaming_session_backups,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetStreamingSessionBackupOutput {
    /// <p>Information about the streaming session backup.</p>
    #[doc(hidden)]
    pub streaming_session_backup: std::option::Option<crate::model::StreamingSessionBackup>,
    _request_id: Option<String>,
}
impl GetStreamingSessionBackupOutput {
    /// <p>Information about the streaming session backup.</p>
    pub fn streaming_session_backup(
        &self,
    ) -> std::option::Option<&crate::model::StreamingSessionBackup> {
        self.streaming_session_backup.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetStreamingSessionBackupOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetStreamingSessionBackupOutput {
    /// Creates a new builder-style object to manufacture [`GetStreamingSessionBackupOutput`](crate::output::GetStreamingSessionBackupOutput).
    pub fn builder() -> crate::output::get_streaming_session_backup_output::Builder {
        crate::output::get_streaming_session_backup_output::Builder::default()
    }
}

/// See [`GetStreamingSessionBackupOutput`](crate::output::GetStreamingSessionBackupOutput).
pub mod get_streaming_session_backup_output {

    /// A builder for [`GetStreamingSessionBackupOutput`](crate::output::GetStreamingSessionBackupOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) streaming_session_backup:
            std::option::Option<crate::model::StreamingSessionBackup>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Information about the streaming session backup.</p>
        pub fn streaming_session_backup(
            mut self,
            input: crate::model::StreamingSessionBackup,
        ) -> Self {
            self.streaming_session_backup = Some(input);
            self
        }
        /// <p>Information about the streaming session backup.</p>
        pub fn set_streaming_session_backup(
            mut self,
            input: std::option::Option<crate::model::StreamingSessionBackup>,
        ) -> Self {
            self.streaming_session_backup = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetStreamingSessionBackupOutput`](crate::output::GetStreamingSessionBackupOutput).
        pub fn build(self) -> crate::output::GetStreamingSessionBackupOutput {
            crate::output::GetStreamingSessionBackupOutput {
                streaming_session_backup: self.streaming_session_backup,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListStreamingImagesOutput {
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>A collection of streaming images.</p>
    #[doc(hidden)]
    pub streaming_images: std::option::Option<std::vec::Vec<crate::model::StreamingImage>>,
    _request_id: Option<String>,
}
impl ListStreamingImagesOutput {
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>A collection of streaming images.</p>
    pub fn streaming_images(&self) -> std::option::Option<&[crate::model::StreamingImage]> {
        self.streaming_images.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListStreamingImagesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListStreamingImagesOutput {
    /// Creates a new builder-style object to manufacture [`ListStreamingImagesOutput`](crate::output::ListStreamingImagesOutput).
    pub fn builder() -> crate::output::list_streaming_images_output::Builder {
        crate::output::list_streaming_images_output::Builder::default()
    }
}

/// See [`ListStreamingImagesOutput`](crate::output::ListStreamingImagesOutput).
pub mod list_streaming_images_output {

    /// A builder for [`ListStreamingImagesOutput`](crate::output::ListStreamingImagesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) streaming_images:
            std::option::Option<std::vec::Vec<crate::model::StreamingImage>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Appends an item to `streaming_images`.
        ///
        /// To override the contents of this collection use [`set_streaming_images`](Self::set_streaming_images).
        ///
        /// <p>A collection of streaming images.</p>
        pub fn streaming_images(mut self, input: crate::model::StreamingImage) -> Self {
            let mut v = self.streaming_images.unwrap_or_default();
            v.push(input);
            self.streaming_images = Some(v);
            self
        }
        /// <p>A collection of streaming images.</p>
        pub fn set_streaming_images(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StreamingImage>>,
        ) -> Self {
            self.streaming_images = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListStreamingImagesOutput`](crate::output::ListStreamingImagesOutput).
        pub fn build(self) -> crate::output::ListStreamingImagesOutput {
            crate::output::ListStreamingImagesOutput {
                next_token: self.next_token,
                streaming_images: self.streaming_images,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateStreamingImageOutput {
    /// <p>The streaming image.</p>
    #[doc(hidden)]
    pub streaming_image: std::option::Option<crate::model::StreamingImage>,
    _request_id: Option<String>,
}
impl CreateStreamingImageOutput {
    /// <p>The streaming image.</p>
    pub fn streaming_image(&self) -> std::option::Option<&crate::model::StreamingImage> {
        self.streaming_image.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateStreamingImageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateStreamingImageOutput {
    /// Creates a new builder-style object to manufacture [`CreateStreamingImageOutput`](crate::output::CreateStreamingImageOutput).
    pub fn builder() -> crate::output::create_streaming_image_output::Builder {
        crate::output::create_streaming_image_output::Builder::default()
    }
}

/// See [`CreateStreamingImageOutput`](crate::output::CreateStreamingImageOutput).
pub mod create_streaming_image_output {

    /// A builder for [`CreateStreamingImageOutput`](crate::output::CreateStreamingImageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) streaming_image: std::option::Option<crate::model::StreamingImage>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The streaming image.</p>
        pub fn streaming_image(mut self, input: crate::model::StreamingImage) -> Self {
            self.streaming_image = Some(input);
            self
        }
        /// <p>The streaming image.</p>
        pub fn set_streaming_image(
            mut self,
            input: std::option::Option<crate::model::StreamingImage>,
        ) -> Self {
            self.streaming_image = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateStreamingImageOutput`](crate::output::CreateStreamingImageOutput).
        pub fn build(self) -> crate::output::CreateStreamingImageOutput {
            crate::output::CreateStreamingImageOutput {
                streaming_image: self.streaming_image,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteStreamingImageOutput {
    /// <p>The streaming image.</p>
    #[doc(hidden)]
    pub streaming_image: std::option::Option<crate::model::StreamingImage>,
    _request_id: Option<String>,
}
impl DeleteStreamingImageOutput {
    /// <p>The streaming image.</p>
    pub fn streaming_image(&self) -> std::option::Option<&crate::model::StreamingImage> {
        self.streaming_image.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteStreamingImageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteStreamingImageOutput {
    /// Creates a new builder-style object to manufacture [`DeleteStreamingImageOutput`](crate::output::DeleteStreamingImageOutput).
    pub fn builder() -> crate::output::delete_streaming_image_output::Builder {
        crate::output::delete_streaming_image_output::Builder::default()
    }
}

/// See [`DeleteStreamingImageOutput`](crate::output::DeleteStreamingImageOutput).
pub mod delete_streaming_image_output {

    /// A builder for [`DeleteStreamingImageOutput`](crate::output::DeleteStreamingImageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) streaming_image: std::option::Option<crate::model::StreamingImage>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The streaming image.</p>
        pub fn streaming_image(mut self, input: crate::model::StreamingImage) -> Self {
            self.streaming_image = Some(input);
            self
        }
        /// <p>The streaming image.</p>
        pub fn set_streaming_image(
            mut self,
            input: std::option::Option<crate::model::StreamingImage>,
        ) -> Self {
            self.streaming_image = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteStreamingImageOutput`](crate::output::DeleteStreamingImageOutput).
        pub fn build(self) -> crate::output::DeleteStreamingImageOutput {
            crate::output::DeleteStreamingImageOutput {
                streaming_image: self.streaming_image,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateStreamingImageOutput {
    /// <p>Represents a streaming image resource.</p>
    /// <p>Streaming images are used by studio users to select which operating system and software they want to use in a Nimble Studio streaming session.</p>
    /// <p>Amazon provides a number of streaming images that include popular 3rd-party software.</p>
    /// <p>You can create your own streaming images using an Amazon EC2 machine image that you create for this purpose. You can also include software that your users require.</p>
    #[doc(hidden)]
    pub streaming_image: std::option::Option<crate::model::StreamingImage>,
    _request_id: Option<String>,
}
impl UpdateStreamingImageOutput {
    /// <p>Represents a streaming image resource.</p>
    /// <p>Streaming images are used by studio users to select which operating system and software they want to use in a Nimble Studio streaming session.</p>
    /// <p>Amazon provides a number of streaming images that include popular 3rd-party software.</p>
    /// <p>You can create your own streaming images using an Amazon EC2 machine image that you create for this purpose. You can also include software that your users require.</p>
    pub fn streaming_image(&self) -> std::option::Option<&crate::model::StreamingImage> {
        self.streaming_image.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateStreamingImageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateStreamingImageOutput {
    /// Creates a new builder-style object to manufacture [`UpdateStreamingImageOutput`](crate::output::UpdateStreamingImageOutput).
    pub fn builder() -> crate::output::update_streaming_image_output::Builder {
        crate::output::update_streaming_image_output::Builder::default()
    }
}

/// See [`UpdateStreamingImageOutput`](crate::output::UpdateStreamingImageOutput).
pub mod update_streaming_image_output {

    /// A builder for [`UpdateStreamingImageOutput`](crate::output::UpdateStreamingImageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) streaming_image: std::option::Option<crate::model::StreamingImage>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Represents a streaming image resource.</p>
        /// <p>Streaming images are used by studio users to select which operating system and software they want to use in a Nimble Studio streaming session.</p>
        /// <p>Amazon provides a number of streaming images that include popular 3rd-party software.</p>
        /// <p>You can create your own streaming images using an Amazon EC2 machine image that you create for this purpose. You can also include software that your users require.</p>
        pub fn streaming_image(mut self, input: crate::model::StreamingImage) -> Self {
            self.streaming_image = Some(input);
            self
        }
        /// <p>Represents a streaming image resource.</p>
        /// <p>Streaming images are used by studio users to select which operating system and software they want to use in a Nimble Studio streaming session.</p>
        /// <p>Amazon provides a number of streaming images that include popular 3rd-party software.</p>
        /// <p>You can create your own streaming images using an Amazon EC2 machine image that you create for this purpose. You can also include software that your users require.</p>
        pub fn set_streaming_image(
            mut self,
            input: std::option::Option<crate::model::StreamingImage>,
        ) -> Self {
            self.streaming_image = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateStreamingImageOutput`](crate::output::UpdateStreamingImageOutput).
        pub fn build(self) -> crate::output::UpdateStreamingImageOutput {
            crate::output::UpdateStreamingImageOutput {
                streaming_image: self.streaming_image,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetStreamingImageOutput {
    /// <p>The streaming image.</p>
    #[doc(hidden)]
    pub streaming_image: std::option::Option<crate::model::StreamingImage>,
    _request_id: Option<String>,
}
impl GetStreamingImageOutput {
    /// <p>The streaming image.</p>
    pub fn streaming_image(&self) -> std::option::Option<&crate::model::StreamingImage> {
        self.streaming_image.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetStreamingImageOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetStreamingImageOutput {
    /// Creates a new builder-style object to manufacture [`GetStreamingImageOutput`](crate::output::GetStreamingImageOutput).
    pub fn builder() -> crate::output::get_streaming_image_output::Builder {
        crate::output::get_streaming_image_output::Builder::default()
    }
}

/// See [`GetStreamingImageOutput`](crate::output::GetStreamingImageOutput).
pub mod get_streaming_image_output {

    /// A builder for [`GetStreamingImageOutput`](crate::output::GetStreamingImageOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) streaming_image: std::option::Option<crate::model::StreamingImage>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The streaming image.</p>
        pub fn streaming_image(mut self, input: crate::model::StreamingImage) -> Self {
            self.streaming_image = Some(input);
            self
        }
        /// <p>The streaming image.</p>
        pub fn set_streaming_image(
            mut self,
            input: std::option::Option<crate::model::StreamingImage>,
        ) -> Self {
            self.streaming_image = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetStreamingImageOutput`](crate::output::GetStreamingImageOutput).
        pub fn build(self) -> crate::output::GetStreamingImageOutput {
            crate::output::GetStreamingImageOutput {
                streaming_image: self.streaming_image,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateLaunchProfileMemberOutput {
    /// <p>The updated member. </p>
    #[doc(hidden)]
    pub member: std::option::Option<crate::model::LaunchProfileMembership>,
    _request_id: Option<String>,
}
impl UpdateLaunchProfileMemberOutput {
    /// <p>The updated member. </p>
    pub fn member(&self) -> std::option::Option<&crate::model::LaunchProfileMembership> {
        self.member.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateLaunchProfileMemberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateLaunchProfileMemberOutput {
    /// Creates a new builder-style object to manufacture [`UpdateLaunchProfileMemberOutput`](crate::output::UpdateLaunchProfileMemberOutput).
    pub fn builder() -> crate::output::update_launch_profile_member_output::Builder {
        crate::output::update_launch_profile_member_output::Builder::default()
    }
}

/// See [`UpdateLaunchProfileMemberOutput`](crate::output::UpdateLaunchProfileMemberOutput).
pub mod update_launch_profile_member_output {

    /// A builder for [`UpdateLaunchProfileMemberOutput`](crate::output::UpdateLaunchProfileMemberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) member: std::option::Option<crate::model::LaunchProfileMembership>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The updated member. </p>
        pub fn member(mut self, input: crate::model::LaunchProfileMembership) -> Self {
            self.member = Some(input);
            self
        }
        /// <p>The updated member. </p>
        pub fn set_member(
            mut self,
            input: std::option::Option<crate::model::LaunchProfileMembership>,
        ) -> Self {
            self.member = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateLaunchProfileMemberOutput`](crate::output::UpdateLaunchProfileMemberOutput).
        pub fn build(self) -> crate::output::UpdateLaunchProfileMemberOutput {
            crate::output::UpdateLaunchProfileMemberOutput {
                member: self.member,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutLaunchProfileMembersOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for PutLaunchProfileMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutLaunchProfileMembersOutput {
    /// Creates a new builder-style object to manufacture [`PutLaunchProfileMembersOutput`](crate::output::PutLaunchProfileMembersOutput).
    pub fn builder() -> crate::output::put_launch_profile_members_output::Builder {
        crate::output::put_launch_profile_members_output::Builder::default()
    }
}

/// See [`PutLaunchProfileMembersOutput`](crate::output::PutLaunchProfileMembersOutput).
pub mod put_launch_profile_members_output {

    /// A builder for [`PutLaunchProfileMembersOutput`](crate::output::PutLaunchProfileMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PutLaunchProfileMembersOutput`](crate::output::PutLaunchProfileMembersOutput).
        pub fn build(self) -> crate::output::PutLaunchProfileMembersOutput {
            crate::output::PutLaunchProfileMembersOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListLaunchProfileMembersOutput {
    /// <p>A list of members.</p>
    #[doc(hidden)]
    pub members: std::option::Option<std::vec::Vec<crate::model::LaunchProfileMembership>>,
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListLaunchProfileMembersOutput {
    /// <p>A list of members.</p>
    pub fn members(&self) -> std::option::Option<&[crate::model::LaunchProfileMembership]> {
        self.members.as_deref()
    }
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListLaunchProfileMembersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListLaunchProfileMembersOutput {
    /// Creates a new builder-style object to manufacture [`ListLaunchProfileMembersOutput`](crate::output::ListLaunchProfileMembersOutput).
    pub fn builder() -> crate::output::list_launch_profile_members_output::Builder {
        crate::output::list_launch_profile_members_output::Builder::default()
    }
}

/// See [`ListLaunchProfileMembersOutput`](crate::output::ListLaunchProfileMembersOutput).
pub mod list_launch_profile_members_output {

    /// A builder for [`ListLaunchProfileMembersOutput`](crate::output::ListLaunchProfileMembersOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) members:
            std::option::Option<std::vec::Vec<crate::model::LaunchProfileMembership>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `members`.
        ///
        /// To override the contents of this collection use [`set_members`](Self::set_members).
        ///
        /// <p>A list of members.</p>
        pub fn members(mut self, input: crate::model::LaunchProfileMembership) -> Self {
            let mut v = self.members.unwrap_or_default();
            v.push(input);
            self.members = Some(v);
            self
        }
        /// <p>A list of members.</p>
        pub fn set_members(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LaunchProfileMembership>>,
        ) -> Self {
            self.members = input;
            self
        }
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListLaunchProfileMembersOutput`](crate::output::ListLaunchProfileMembersOutput).
        pub fn build(self) -> crate::output::ListLaunchProfileMembersOutput {
            crate::output::ListLaunchProfileMembersOutput {
                members: self.members,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetLaunchProfileMemberOutput {
    /// <p>The member.</p>
    #[doc(hidden)]
    pub member: std::option::Option<crate::model::LaunchProfileMembership>,
    _request_id: Option<String>,
}
impl GetLaunchProfileMemberOutput {
    /// <p>The member.</p>
    pub fn member(&self) -> std::option::Option<&crate::model::LaunchProfileMembership> {
        self.member.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetLaunchProfileMemberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetLaunchProfileMemberOutput {
    /// Creates a new builder-style object to manufacture [`GetLaunchProfileMemberOutput`](crate::output::GetLaunchProfileMemberOutput).
    pub fn builder() -> crate::output::get_launch_profile_member_output::Builder {
        crate::output::get_launch_profile_member_output::Builder::default()
    }
}

/// See [`GetLaunchProfileMemberOutput`](crate::output::GetLaunchProfileMemberOutput).
pub mod get_launch_profile_member_output {

    /// A builder for [`GetLaunchProfileMemberOutput`](crate::output::GetLaunchProfileMemberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) member: std::option::Option<crate::model::LaunchProfileMembership>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The member.</p>
        pub fn member(mut self, input: crate::model::LaunchProfileMembership) -> Self {
            self.member = Some(input);
            self
        }
        /// <p>The member.</p>
        pub fn set_member(
            mut self,
            input: std::option::Option<crate::model::LaunchProfileMembership>,
        ) -> Self {
            self.member = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetLaunchProfileMemberOutput`](crate::output::GetLaunchProfileMemberOutput).
        pub fn build(self) -> crate::output::GetLaunchProfileMemberOutput {
            crate::output::GetLaunchProfileMemberOutput {
                member: self.member,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetLaunchProfileInitializationOutput {
    /// <p>The launch profile initialization.</p>
    #[doc(hidden)]
    pub launch_profile_initialization:
        std::option::Option<crate::model::LaunchProfileInitialization>,
    _request_id: Option<String>,
}
impl GetLaunchProfileInitializationOutput {
    /// <p>The launch profile initialization.</p>
    pub fn launch_profile_initialization(
        &self,
    ) -> std::option::Option<&crate::model::LaunchProfileInitialization> {
        self.launch_profile_initialization.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetLaunchProfileInitializationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetLaunchProfileInitializationOutput {
    /// Creates a new builder-style object to manufacture [`GetLaunchProfileInitializationOutput`](crate::output::GetLaunchProfileInitializationOutput).
    pub fn builder() -> crate::output::get_launch_profile_initialization_output::Builder {
        crate::output::get_launch_profile_initialization_output::Builder::default()
    }
}

/// See [`GetLaunchProfileInitializationOutput`](crate::output::GetLaunchProfileInitializationOutput).
pub mod get_launch_profile_initialization_output {

    /// A builder for [`GetLaunchProfileInitializationOutput`](crate::output::GetLaunchProfileInitializationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_profile_initialization:
            std::option::Option<crate::model::LaunchProfileInitialization>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The launch profile initialization.</p>
        pub fn launch_profile_initialization(
            mut self,
            input: crate::model::LaunchProfileInitialization,
        ) -> Self {
            self.launch_profile_initialization = Some(input);
            self
        }
        /// <p>The launch profile initialization.</p>
        pub fn set_launch_profile_initialization(
            mut self,
            input: std::option::Option<crate::model::LaunchProfileInitialization>,
        ) -> Self {
            self.launch_profile_initialization = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetLaunchProfileInitializationOutput`](crate::output::GetLaunchProfileInitializationOutput).
        pub fn build(self) -> crate::output::GetLaunchProfileInitializationOutput {
            crate::output::GetLaunchProfileInitializationOutput {
                launch_profile_initialization: self.launch_profile_initialization,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetLaunchProfileDetailsOutput {
    /// <p>The launch profile.</p>
    #[doc(hidden)]
    pub launch_profile: std::option::Option<crate::model::LaunchProfile>,
    /// <p>A collection of streaming images.</p>
    #[doc(hidden)]
    pub streaming_images: std::option::Option<std::vec::Vec<crate::model::StreamingImage>>,
    /// <p>A collection of studio component summaries.</p>
    #[doc(hidden)]
    pub studio_component_summaries:
        std::option::Option<std::vec::Vec<crate::model::StudioComponentSummary>>,
    _request_id: Option<String>,
}
impl GetLaunchProfileDetailsOutput {
    /// <p>The launch profile.</p>
    pub fn launch_profile(&self) -> std::option::Option<&crate::model::LaunchProfile> {
        self.launch_profile.as_ref()
    }
    /// <p>A collection of streaming images.</p>
    pub fn streaming_images(&self) -> std::option::Option<&[crate::model::StreamingImage]> {
        self.streaming_images.as_deref()
    }
    /// <p>A collection of studio component summaries.</p>
    pub fn studio_component_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::StudioComponentSummary]> {
        self.studio_component_summaries.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetLaunchProfileDetailsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetLaunchProfileDetailsOutput {
    /// Creates a new builder-style object to manufacture [`GetLaunchProfileDetailsOutput`](crate::output::GetLaunchProfileDetailsOutput).
    pub fn builder() -> crate::output::get_launch_profile_details_output::Builder {
        crate::output::get_launch_profile_details_output::Builder::default()
    }
}

/// See [`GetLaunchProfileDetailsOutput`](crate::output::GetLaunchProfileDetailsOutput).
pub mod get_launch_profile_details_output {

    /// A builder for [`GetLaunchProfileDetailsOutput`](crate::output::GetLaunchProfileDetailsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_profile: std::option::Option<crate::model::LaunchProfile>,
        pub(crate) streaming_images:
            std::option::Option<std::vec::Vec<crate::model::StreamingImage>>,
        pub(crate) studio_component_summaries:
            std::option::Option<std::vec::Vec<crate::model::StudioComponentSummary>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The launch profile.</p>
        pub fn launch_profile(mut self, input: crate::model::LaunchProfile) -> Self {
            self.launch_profile = Some(input);
            self
        }
        /// <p>The launch profile.</p>
        pub fn set_launch_profile(
            mut self,
            input: std::option::Option<crate::model::LaunchProfile>,
        ) -> Self {
            self.launch_profile = input;
            self
        }
        /// Appends an item to `streaming_images`.
        ///
        /// To override the contents of this collection use [`set_streaming_images`](Self::set_streaming_images).
        ///
        /// <p>A collection of streaming images.</p>
        pub fn streaming_images(mut self, input: crate::model::StreamingImage) -> Self {
            let mut v = self.streaming_images.unwrap_or_default();
            v.push(input);
            self.streaming_images = Some(v);
            self
        }
        /// <p>A collection of streaming images.</p>
        pub fn set_streaming_images(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StreamingImage>>,
        ) -> Self {
            self.streaming_images = input;
            self
        }
        /// Appends an item to `studio_component_summaries`.
        ///
        /// To override the contents of this collection use [`set_studio_component_summaries`](Self::set_studio_component_summaries).
        ///
        /// <p>A collection of studio component summaries.</p>
        pub fn studio_component_summaries(
            mut self,
            input: crate::model::StudioComponentSummary,
        ) -> Self {
            let mut v = self.studio_component_summaries.unwrap_or_default();
            v.push(input);
            self.studio_component_summaries = Some(v);
            self
        }
        /// <p>A collection of studio component summaries.</p>
        pub fn set_studio_component_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::StudioComponentSummary>>,
        ) -> Self {
            self.studio_component_summaries = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetLaunchProfileDetailsOutput`](crate::output::GetLaunchProfileDetailsOutput).
        pub fn build(self) -> crate::output::GetLaunchProfileDetailsOutput {
            crate::output::GetLaunchProfileDetailsOutput {
                launch_profile: self.launch_profile,
                streaming_images: self.streaming_images,
                studio_component_summaries: self.studio_component_summaries,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLaunchProfileMemberOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteLaunchProfileMemberOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteLaunchProfileMemberOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLaunchProfileMemberOutput`](crate::output::DeleteLaunchProfileMemberOutput).
    pub fn builder() -> crate::output::delete_launch_profile_member_output::Builder {
        crate::output::delete_launch_profile_member_output::Builder::default()
    }
}

/// See [`DeleteLaunchProfileMemberOutput`](crate::output::DeleteLaunchProfileMemberOutput).
pub mod delete_launch_profile_member_output {

    /// A builder for [`DeleteLaunchProfileMemberOutput`](crate::output::DeleteLaunchProfileMemberOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLaunchProfileMemberOutput`](crate::output::DeleteLaunchProfileMemberOutput).
        pub fn build(self) -> crate::output::DeleteLaunchProfileMemberOutput {
            crate::output::DeleteLaunchProfileMemberOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListLaunchProfilesOutput {
    /// <p>A collection of launch profiles.</p>
    #[doc(hidden)]
    pub launch_profiles: std::option::Option<std::vec::Vec<crate::model::LaunchProfile>>,
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListLaunchProfilesOutput {
    /// <p>A collection of launch profiles.</p>
    pub fn launch_profiles(&self) -> std::option::Option<&[crate::model::LaunchProfile]> {
        self.launch_profiles.as_deref()
    }
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListLaunchProfilesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListLaunchProfilesOutput {
    /// Creates a new builder-style object to manufacture [`ListLaunchProfilesOutput`](crate::output::ListLaunchProfilesOutput).
    pub fn builder() -> crate::output::list_launch_profiles_output::Builder {
        crate::output::list_launch_profiles_output::Builder::default()
    }
}

/// See [`ListLaunchProfilesOutput`](crate::output::ListLaunchProfilesOutput).
pub mod list_launch_profiles_output {

    /// A builder for [`ListLaunchProfilesOutput`](crate::output::ListLaunchProfilesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_profiles: std::option::Option<std::vec::Vec<crate::model::LaunchProfile>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `launch_profiles`.
        ///
        /// To override the contents of this collection use [`set_launch_profiles`](Self::set_launch_profiles).
        ///
        /// <p>A collection of launch profiles.</p>
        pub fn launch_profiles(mut self, input: crate::model::LaunchProfile) -> Self {
            let mut v = self.launch_profiles.unwrap_or_default();
            v.push(input);
            self.launch_profiles = Some(v);
            self
        }
        /// <p>A collection of launch profiles.</p>
        pub fn set_launch_profiles(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LaunchProfile>>,
        ) -> Self {
            self.launch_profiles = input;
            self
        }
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListLaunchProfilesOutput`](crate::output::ListLaunchProfilesOutput).
        pub fn build(self) -> crate::output::ListLaunchProfilesOutput {
            crate::output::ListLaunchProfilesOutput {
                launch_profiles: self.launch_profiles,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLaunchProfileOutput {
    /// <p>The launch profile.</p>
    #[doc(hidden)]
    pub launch_profile: std::option::Option<crate::model::LaunchProfile>,
    _request_id: Option<String>,
}
impl CreateLaunchProfileOutput {
    /// <p>The launch profile.</p>
    pub fn launch_profile(&self) -> std::option::Option<&crate::model::LaunchProfile> {
        self.launch_profile.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateLaunchProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateLaunchProfileOutput {
    /// Creates a new builder-style object to manufacture [`CreateLaunchProfileOutput`](crate::output::CreateLaunchProfileOutput).
    pub fn builder() -> crate::output::create_launch_profile_output::Builder {
        crate::output::create_launch_profile_output::Builder::default()
    }
}

/// See [`CreateLaunchProfileOutput`](crate::output::CreateLaunchProfileOutput).
pub mod create_launch_profile_output {

    /// A builder for [`CreateLaunchProfileOutput`](crate::output::CreateLaunchProfileOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_profile: std::option::Option<crate::model::LaunchProfile>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The launch profile.</p>
        pub fn launch_profile(mut self, input: crate::model::LaunchProfile) -> Self {
            self.launch_profile = Some(input);
            self
        }
        /// <p>The launch profile.</p>
        pub fn set_launch_profile(
            mut self,
            input: std::option::Option<crate::model::LaunchProfile>,
        ) -> Self {
            self.launch_profile = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateLaunchProfileOutput`](crate::output::CreateLaunchProfileOutput).
        pub fn build(self) -> crate::output::CreateLaunchProfileOutput {
            crate::output::CreateLaunchProfileOutput {
                launch_profile: self.launch_profile,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLaunchProfileOutput {
    /// <p>The launch profile.</p>
    #[doc(hidden)]
    pub launch_profile: std::option::Option<crate::model::LaunchProfile>,
    _request_id: Option<String>,
}
impl DeleteLaunchProfileOutput {
    /// <p>The launch profile.</p>
    pub fn launch_profile(&self) -> std::option::Option<&crate::model::LaunchProfile> {
        self.launch_profile.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteLaunchProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteLaunchProfileOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLaunchProfileOutput`](crate::output::DeleteLaunchProfileOutput).
    pub fn builder() -> crate::output::delete_launch_profile_output::Builder {
        crate::output::delete_launch_profile_output::Builder::default()
    }
}

/// See [`DeleteLaunchProfileOutput`](crate::output::DeleteLaunchProfileOutput).
pub mod delete_launch_profile_output {

    /// A builder for [`DeleteLaunchProfileOutput`](crate::output::DeleteLaunchProfileOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_profile: std::option::Option<crate::model::LaunchProfile>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The launch profile.</p>
        pub fn launch_profile(mut self, input: crate::model::LaunchProfile) -> Self {
            self.launch_profile = Some(input);
            self
        }
        /// <p>The launch profile.</p>
        pub fn set_launch_profile(
            mut self,
            input: std::option::Option<crate::model::LaunchProfile>,
        ) -> Self {
            self.launch_profile = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLaunchProfileOutput`](crate::output::DeleteLaunchProfileOutput).
        pub fn build(self) -> crate::output::DeleteLaunchProfileOutput {
            crate::output::DeleteLaunchProfileOutput {
                launch_profile: self.launch_profile,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateLaunchProfileOutput {
    /// <p>The launch profile.</p>
    #[doc(hidden)]
    pub launch_profile: std::option::Option<crate::model::LaunchProfile>,
    _request_id: Option<String>,
}
impl UpdateLaunchProfileOutput {
    /// <p>The launch profile.</p>
    pub fn launch_profile(&self) -> std::option::Option<&crate::model::LaunchProfile> {
        self.launch_profile.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateLaunchProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateLaunchProfileOutput {
    /// Creates a new builder-style object to manufacture [`UpdateLaunchProfileOutput`](crate::output::UpdateLaunchProfileOutput).
    pub fn builder() -> crate::output::update_launch_profile_output::Builder {
        crate::output::update_launch_profile_output::Builder::default()
    }
}

/// See [`UpdateLaunchProfileOutput`](crate::output::UpdateLaunchProfileOutput).
pub mod update_launch_profile_output {

    /// A builder for [`UpdateLaunchProfileOutput`](crate::output::UpdateLaunchProfileOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_profile: std::option::Option<crate::model::LaunchProfile>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The launch profile.</p>
        pub fn launch_profile(mut self, input: crate::model::LaunchProfile) -> Self {
            self.launch_profile = Some(input);
            self
        }
        /// <p>The launch profile.</p>
        pub fn set_launch_profile(
            mut self,
            input: std::option::Option<crate::model::LaunchProfile>,
        ) -> Self {
            self.launch_profile = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateLaunchProfileOutput`](crate::output::UpdateLaunchProfileOutput).
        pub fn build(self) -> crate::output::UpdateLaunchProfileOutput {
            crate::output::UpdateLaunchProfileOutput {
                launch_profile: self.launch_profile,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetLaunchProfileOutput {
    /// <p>The launch profile.</p>
    #[doc(hidden)]
    pub launch_profile: std::option::Option<crate::model::LaunchProfile>,
    _request_id: Option<String>,
}
impl GetLaunchProfileOutput {
    /// <p>The launch profile.</p>
    pub fn launch_profile(&self) -> std::option::Option<&crate::model::LaunchProfile> {
        self.launch_profile.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetLaunchProfileOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetLaunchProfileOutput {
    /// Creates a new builder-style object to manufacture [`GetLaunchProfileOutput`](crate::output::GetLaunchProfileOutput).
    pub fn builder() -> crate::output::get_launch_profile_output::Builder {
        crate::output::get_launch_profile_output::Builder::default()
    }
}

/// See [`GetLaunchProfileOutput`](crate::output::GetLaunchProfileOutput).
pub mod get_launch_profile_output {

    /// A builder for [`GetLaunchProfileOutput`](crate::output::GetLaunchProfileOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) launch_profile: std::option::Option<crate::model::LaunchProfile>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The launch profile.</p>
        pub fn launch_profile(mut self, input: crate::model::LaunchProfile) -> Self {
            self.launch_profile = Some(input);
            self
        }
        /// <p>The launch profile.</p>
        pub fn set_launch_profile(
            mut self,
            input: std::option::Option<crate::model::LaunchProfile>,
        ) -> Self {
            self.launch_profile = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetLaunchProfileOutput`](crate::output::GetLaunchProfileOutput).
        pub fn build(self) -> crate::output::GetLaunchProfileOutput {
            crate::output::GetLaunchProfileOutput {
                launch_profile: self.launch_profile,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListEulasOutput {
    /// <p>A collection of EULA resources.</p>
    #[doc(hidden)]
    pub eulas: std::option::Option<std::vec::Vec<crate::model::Eula>>,
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListEulasOutput {
    /// <p>A collection of EULA resources.</p>
    pub fn eulas(&self) -> std::option::Option<&[crate::model::Eula]> {
        self.eulas.as_deref()
    }
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListEulasOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListEulasOutput {
    /// Creates a new builder-style object to manufacture [`ListEulasOutput`](crate::output::ListEulasOutput).
    pub fn builder() -> crate::output::list_eulas_output::Builder {
        crate::output::list_eulas_output::Builder::default()
    }
}

/// See [`ListEulasOutput`](crate::output::ListEulasOutput).
pub mod list_eulas_output {

    /// A builder for [`ListEulasOutput`](crate::output::ListEulasOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) eulas: std::option::Option<std::vec::Vec<crate::model::Eula>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `eulas`.
        ///
        /// To override the contents of this collection use [`set_eulas`](Self::set_eulas).
        ///
        /// <p>A collection of EULA resources.</p>
        pub fn eulas(mut self, input: crate::model::Eula) -> Self {
            let mut v = self.eulas.unwrap_or_default();
            v.push(input);
            self.eulas = Some(v);
            self
        }
        /// <p>A collection of EULA resources.</p>
        pub fn set_eulas(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Eula>>,
        ) -> Self {
            self.eulas = input;
            self
        }
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListEulasOutput`](crate::output::ListEulasOutput).
        pub fn build(self) -> crate::output::ListEulasOutput {
            crate::output::ListEulasOutput {
                eulas: self.eulas,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEulaOutput {
    /// <p>The EULA.</p>
    #[doc(hidden)]
    pub eula: std::option::Option<crate::model::Eula>,
    _request_id: Option<String>,
}
impl GetEulaOutput {
    /// <p>The EULA.</p>
    pub fn eula(&self) -> std::option::Option<&crate::model::Eula> {
        self.eula.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetEulaOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEulaOutput {
    /// Creates a new builder-style object to manufacture [`GetEulaOutput`](crate::output::GetEulaOutput).
    pub fn builder() -> crate::output::get_eula_output::Builder {
        crate::output::get_eula_output::Builder::default()
    }
}

/// See [`GetEulaOutput`](crate::output::GetEulaOutput).
pub mod get_eula_output {

    /// A builder for [`GetEulaOutput`](crate::output::GetEulaOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) eula: std::option::Option<crate::model::Eula>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The EULA.</p>
        pub fn eula(mut self, input: crate::model::Eula) -> Self {
            self.eula = Some(input);
            self
        }
        /// <p>The EULA.</p>
        pub fn set_eula(mut self, input: std::option::Option<crate::model::Eula>) -> Self {
            self.eula = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetEulaOutput`](crate::output::GetEulaOutput).
        pub fn build(self) -> crate::output::GetEulaOutput {
            crate::output::GetEulaOutput {
                eula: self.eula,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListEulaAcceptancesOutput {
    /// <p>A collection of EULA acceptances.</p>
    #[doc(hidden)]
    pub eula_acceptances: std::option::Option<std::vec::Vec<crate::model::EulaAcceptance>>,
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListEulaAcceptancesOutput {
    /// <p>A collection of EULA acceptances.</p>
    pub fn eula_acceptances(&self) -> std::option::Option<&[crate::model::EulaAcceptance]> {
        self.eula_acceptances.as_deref()
    }
    /// <p>The token for the next set of results, or null if there are no more results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListEulaAcceptancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListEulaAcceptancesOutput {
    /// Creates a new builder-style object to manufacture [`ListEulaAcceptancesOutput`](crate::output::ListEulaAcceptancesOutput).
    pub fn builder() -> crate::output::list_eula_acceptances_output::Builder {
        crate::output::list_eula_acceptances_output::Builder::default()
    }
}

/// See [`ListEulaAcceptancesOutput`](crate::output::ListEulaAcceptancesOutput).
pub mod list_eula_acceptances_output {

    /// A builder for [`ListEulaAcceptancesOutput`](crate::output::ListEulaAcceptancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) eula_acceptances:
            std::option::Option<std::vec::Vec<crate::model::EulaAcceptance>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `eula_acceptances`.
        ///
        /// To override the contents of this collection use [`set_eula_acceptances`](Self::set_eula_acceptances).
        ///
        /// <p>A collection of EULA acceptances.</p>
        pub fn eula_acceptances(mut self, input: crate::model::EulaAcceptance) -> Self {
            let mut v = self.eula_acceptances.unwrap_or_default();
            v.push(input);
            self.eula_acceptances = Some(v);
            self
        }
        /// <p>A collection of EULA acceptances.</p>
        pub fn set_eula_acceptances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EulaAcceptance>>,
        ) -> Self {
            self.eula_acceptances = input;
            self
        }
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results, or null if there are no more results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListEulaAcceptancesOutput`](crate::output::ListEulaAcceptancesOutput).
        pub fn build(self) -> crate::output::ListEulaAcceptancesOutput {
            crate::output::ListEulaAcceptancesOutput {
                eula_acceptances: self.eula_acceptances,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcceptEulasOutput {
    /// <p>A collection of EULA acceptances.</p>
    #[doc(hidden)]
    pub eula_acceptances: std::option::Option<std::vec::Vec<crate::model::EulaAcceptance>>,
    _request_id: Option<String>,
}
impl AcceptEulasOutput {
    /// <p>A collection of EULA acceptances.</p>
    pub fn eula_acceptances(&self) -> std::option::Option<&[crate::model::EulaAcceptance]> {
        self.eula_acceptances.as_deref()
    }
}
impl aws_http::request_id::RequestId for AcceptEulasOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AcceptEulasOutput {
    /// Creates a new builder-style object to manufacture [`AcceptEulasOutput`](crate::output::AcceptEulasOutput).
    pub fn builder() -> crate::output::accept_eulas_output::Builder {
        crate::output::accept_eulas_output::Builder::default()
    }
}

/// See [`AcceptEulasOutput`](crate::output::AcceptEulasOutput).
pub mod accept_eulas_output {

    /// A builder for [`AcceptEulasOutput`](crate::output::AcceptEulasOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) eula_acceptances:
            std::option::Option<std::vec::Vec<crate::model::EulaAcceptance>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `eula_acceptances`.
        ///
        /// To override the contents of this collection use [`set_eula_acceptances`](Self::set_eula_acceptances).
        ///
        /// <p>A collection of EULA acceptances.</p>
        pub fn eula_acceptances(mut self, input: crate::model::EulaAcceptance) -> Self {
            let mut v = self.eula_acceptances.unwrap_or_default();
            v.push(input);
            self.eula_acceptances = Some(v);
            self
        }
        /// <p>A collection of EULA acceptances.</p>
        pub fn set_eula_acceptances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EulaAcceptance>>,
        ) -> Self {
            self.eula_acceptances = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AcceptEulasOutput`](crate::output::AcceptEulasOutput).
        pub fn build(self) -> crate::output::AcceptEulasOutput {
            crate::output::AcceptEulasOutput {
                eula_acceptances: self.eula_acceptances,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Adds a key-value pair to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.tags.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.tags = Some(hash_map);
            self
        }
        /// <p>A collection of labels, in the form of key-value pairs, that apply to this resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}
