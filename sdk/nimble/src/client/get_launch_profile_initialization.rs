// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetLaunchProfileInitialization`](crate::operation::get_launch_profile_initialization::builders::GetLaunchProfileInitializationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`launch_profile_id(impl Into<String>)`](crate::operation::get_launch_profile_initialization::builders::GetLaunchProfileInitializationFluentBuilder::launch_profile_id) / [`set_launch_profile_id(Option<String>)`](crate::operation::get_launch_profile_initialization::builders::GetLaunchProfileInitializationFluentBuilder::set_launch_profile_id):<br>required: **true**<br><p>The ID of the launch profile used to control access from the streaming session.</p><br>
    ///   - [`launch_profile_protocol_versions(impl Into<String>)`](crate::operation::get_launch_profile_initialization::builders::GetLaunchProfileInitializationFluentBuilder::launch_profile_protocol_versions) / [`set_launch_profile_protocol_versions(Option<Vec::<String>>)`](crate::operation::get_launch_profile_initialization::builders::GetLaunchProfileInitializationFluentBuilder::set_launch_profile_protocol_versions):<br>required: **true**<br><p>The launch profile protocol versions supported by the client.</p><br>
    ///   - [`launch_purpose(impl Into<String>)`](crate::operation::get_launch_profile_initialization::builders::GetLaunchProfileInitializationFluentBuilder::launch_purpose) / [`set_launch_purpose(Option<String>)`](crate::operation::get_launch_profile_initialization::builders::GetLaunchProfileInitializationFluentBuilder::set_launch_purpose):<br>required: **true**<br><p>The launch purpose.</p><br>
    ///   - [`platform(impl Into<String>)`](crate::operation::get_launch_profile_initialization::builders::GetLaunchProfileInitializationFluentBuilder::platform) / [`set_platform(Option<String>)`](crate::operation::get_launch_profile_initialization::builders::GetLaunchProfileInitializationFluentBuilder::set_platform):<br>required: **true**<br><p>The platform where this Launch Profile will be used, either Windows or Linux.</p><br>
    ///   - [`studio_id(impl Into<String>)`](crate::operation::get_launch_profile_initialization::builders::GetLaunchProfileInitializationFluentBuilder::studio_id) / [`set_studio_id(Option<String>)`](crate::operation::get_launch_profile_initialization::builders::GetLaunchProfileInitializationFluentBuilder::set_studio_id):<br>required: **true**<br><p>The studio ID. </p><br>
    /// - On success, responds with [`GetLaunchProfileInitializationOutput`](crate::operation::get_launch_profile_initialization::GetLaunchProfileInitializationOutput) with field(s):
    ///   - [`launch_profile_initialization(Option<LaunchProfileInitialization>)`](crate::operation::get_launch_profile_initialization::GetLaunchProfileInitializationOutput::launch_profile_initialization): <p>The launch profile initialization.</p>
    /// - On failure, responds with [`SdkError<GetLaunchProfileInitializationError>`](crate::operation::get_launch_profile_initialization::GetLaunchProfileInitializationError)
    pub fn get_launch_profile_initialization(
        &self,
    ) -> crate::operation::get_launch_profile_initialization::builders::GetLaunchProfileInitializationFluentBuilder {
        crate::operation::get_launch_profile_initialization::builders::GetLaunchProfileInitializationFluentBuilder::new(self.handle.clone())
    }
}
