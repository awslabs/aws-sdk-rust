// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_stream_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::StreamConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::StreamConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "clipboardMode" => {
                            builder = builder.set_clipboard_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::StreamingClipboardMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ec2InstanceTypes" => {
                            builder = builder.set_ec2_instance_types(
                                crate::protocol_serde::shape_streaming_instance_type_list::de_streaming_instance_type_list(tokens)?,
                            );
                        }
                        "maxSessionLengthInMinutes" => {
                            builder = builder.set_max_session_length_in_minutes(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "streamingImageIds" => {
                            builder = builder
                                .set_streaming_image_ids(crate::protocol_serde::shape_streaming_image_id_list::de_streaming_image_id_list(tokens)?);
                        }
                        "maxStoppedSessionLengthInMinutes" => {
                            builder = builder.set_max_stopped_session_length_in_minutes(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "sessionStorage" => {
                            builder = builder.set_session_storage(
                                crate::protocol_serde::shape_stream_configuration_session_storage::de_stream_configuration_session_storage(tokens)?,
                            );
                        }
                        "sessionBackup" => {
                            builder = builder.set_session_backup(
                                crate::protocol_serde::shape_stream_configuration_session_backup::de_stream_configuration_session_backup(tokens)?,
                            );
                        }
                        "sessionPersistenceMode" => {
                            builder = builder.set_session_persistence_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::SessionPersistenceMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "volumeConfiguration" => {
                            builder =
                                builder.set_volume_configuration(crate::protocol_serde::shape_volume_configuration::de_volume_configuration(tokens)?);
                        }
                        "automaticTerminationMode" => {
                            builder = builder.set_automatic_termination_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::AutomaticTerminationMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::stream_configuration_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
