// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_stream_configuration_create(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::StreamConfigurationCreate,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("clipboardMode").string(input.clipboard_mode.as_str());
    }
    {
        let mut array_1 = object.key("ec2InstanceTypes").start_array();
        for item_2 in &input.ec2_instance_types {
            {
                array_1.value().string(item_2.as_str());
            }
        }
        array_1.finish();
    }
    if input.max_session_length_in_minutes != 0 {
        object.key("maxSessionLengthInMinutes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.max_session_length_in_minutes).into()),
        );
    }
    {
        let mut array_3 = object.key("streamingImageIds").start_array();
        for item_4 in &input.streaming_image_ids {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if input.max_stopped_session_length_in_minutes != 0 {
        object.key("maxStoppedSessionLengthInMinutes").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.max_stopped_session_length_in_minutes).into()),
        );
    }
    if let Some(var_5) = &input.session_storage {
        #[allow(unused_mut)]
        let mut object_6 = object.key("sessionStorage").start_object();
        crate::protocol_serde::shape_stream_configuration_session_storage::ser_stream_configuration_session_storage(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.session_backup {
        #[allow(unused_mut)]
        let mut object_8 = object.key("sessionBackup").start_object();
        crate::protocol_serde::shape_stream_configuration_session_backup::ser_stream_configuration_session_backup(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.session_persistence_mode {
        object.key("sessionPersistenceMode").string(var_9.as_str());
    }
    if let Some(var_10) = &input.volume_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("volumeConfiguration").start_object();
        crate::protocol_serde::shape_volume_configuration::ser_volume_configuration(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.automatic_termination_mode {
        object.key("automaticTerminationMode").string(var_12.as_str());
    }
    Ok(())
}
