// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_eula_acceptances_output_next_token(
    input: &crate::operation::list_eula_acceptances::ListEulaAcceptancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_eulas_output_next_token(
    input: &crate::operation::list_eulas::ListEulasOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_launch_profile_members_output_next_token(
    input: &crate::operation::list_launch_profile_members::ListLaunchProfileMembersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_launch_profiles_output_next_token(
    input: &crate::operation::list_launch_profiles::ListLaunchProfilesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_streaming_images_output_next_token(
    input: &crate::operation::list_streaming_images::ListStreamingImagesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_streaming_session_backups_output_next_token(
    input: &crate::operation::list_streaming_session_backups::ListStreamingSessionBackupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_streaming_sessions_output_next_token(
    input: &crate::operation::list_streaming_sessions::ListStreamingSessionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_studio_components_output_next_token(
    input: &crate::operation::list_studio_components::ListStudioComponentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_studio_members_output_next_token(
    input: &crate::operation::list_studio_members::ListStudioMembersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_studios_output_next_token(
    input: &crate::operation::list_studios::ListStudiosOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_eula_acceptances_output_eula_acceptances(
    input: crate::operation::list_eula_acceptances::ListEulaAcceptancesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::EulaAcceptance>> {
    let input = match input.eula_acceptances {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_eulas_output_eulas(
    input: crate::operation::list_eulas::ListEulasOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Eula>> {
    let input = match input.eulas {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_launch_profile_members_output_members(
    input: crate::operation::list_launch_profile_members::ListLaunchProfileMembersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::LaunchProfileMembership>> {
    let input = match input.members {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_launch_profiles_output_launch_profiles(
    input: crate::operation::list_launch_profiles::ListLaunchProfilesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::LaunchProfile>> {
    let input = match input.launch_profiles {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_streaming_images_output_streaming_images(
    input: crate::operation::list_streaming_images::ListStreamingImagesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StreamingImage>> {
    let input = match input.streaming_images {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_streaming_session_backups_output_streaming_session_backups(
    input: crate::operation::list_streaming_session_backups::ListStreamingSessionBackupsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StreamingSessionBackup>> {
    let input = match input.streaming_session_backups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_streaming_sessions_output_sessions(
    input: crate::operation::list_streaming_sessions::ListStreamingSessionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StreamingSession>> {
    let input = match input.sessions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_studio_components_output_studio_components(
    input: crate::operation::list_studio_components::ListStudioComponentsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StudioComponent>> {
    let input = match input.studio_components {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_studio_members_output_members(
    input: crate::operation::list_studio_members::ListStudioMembersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::StudioMembership>> {
    let input = match input.members {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_studios_output_studios(
    input: crate::operation::list_studios::ListStudiosOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Studio>> {
    let input = match input.studios {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
