// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn delete_studio_output_correct_errors(
    mut builder: crate::operation::delete_studio::builders::DeleteStudioOutputBuilder,
) -> crate::operation::delete_studio::builders::DeleteStudioOutputBuilder {
    if builder.studio.is_none() {
        builder.studio = {
            let builder = crate::types::builders::StudioBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_studio_output_correct_errors(
    mut builder: crate::operation::get_studio::builders::GetStudioOutputBuilder,
) -> crate::operation::get_studio::builders::GetStudioOutputBuilder {
    if builder.studio.is_none() {
        builder.studio = {
            let builder = crate::types::builders::StudioBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn list_studios_output_correct_errors(
    mut builder: crate::operation::list_studios::builders::ListStudiosOutputBuilder,
) -> crate::operation::list_studios::builders::ListStudiosOutputBuilder {
    if builder.studios.is_none() {
        builder.studios = Some(Default::default())
    }
    builder
}

pub(crate) fn start_studio_sso_configuration_repair_output_correct_errors(
    mut builder: crate::operation::start_studio_sso_configuration_repair::builders::StartStudioSsoConfigurationRepairOutputBuilder,
) -> crate::operation::start_studio_sso_configuration_repair::builders::StartStudioSsoConfigurationRepairOutputBuilder {
    if builder.studio.is_none() {
        builder.studio = {
            let builder = crate::types::builders::StudioBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_studio_output_correct_errors(
    mut builder: crate::operation::update_studio::builders::UpdateStudioOutputBuilder,
) -> crate::operation::update_studio::builders::UpdateStudioOutputBuilder {
    if builder.studio.is_none() {
        builder.studio = {
            let builder = crate::types::builders::StudioBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn stream_configuration_correct_errors(
    mut builder: crate::types::builders::StreamConfigurationBuilder,
) -> crate::types::builders::StreamConfigurationBuilder {
    if builder.clipboard_mode.is_none() {
        builder.clipboard_mode = "no value was set".parse::<crate::types::StreamingClipboardMode>().ok()
    }
    if builder.ec2_instance_types.is_none() {
        builder.ec2_instance_types = Some(Default::default())
    }
    if builder.streaming_image_ids.is_none() {
        builder.streaming_image_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn streaming_image_encryption_configuration_correct_errors(
    mut builder: crate::types::builders::StreamingImageEncryptionConfigurationBuilder,
) -> crate::types::builders::StreamingImageEncryptionConfigurationBuilder {
    if builder.key_type.is_none() {
        builder.key_type = "no value was set"
            .parse::<crate::types::StreamingImageEncryptionConfigurationKeyType>()
            .ok()
    }
    builder
}

pub(crate) fn studio_encryption_configuration_correct_errors(
    mut builder: crate::types::builders::StudioEncryptionConfigurationBuilder,
) -> crate::types::builders::StudioEncryptionConfigurationBuilder {
    if builder.key_type.is_none() {
        builder.key_type = "no value was set".parse::<crate::types::StudioEncryptionConfigurationKeyType>().ok()
    }
    builder
}

pub(crate) fn stream_configuration_session_storage_correct_errors(
    mut builder: crate::types::builders::StreamConfigurationSessionStorageBuilder,
) -> crate::types::builders::StreamConfigurationSessionStorageBuilder {
    if builder.mode.is_none() {
        builder.mode = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_result_correct_errors(
    mut builder: crate::types::builders::ValidationResultBuilder,
) -> crate::types::builders::ValidationResultBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::LaunchProfileValidationType>().ok()
    }
    if builder.state.is_none() {
        builder.state = "no value was set".parse::<crate::types::LaunchProfileValidationState>().ok()
    }
    if builder.status_code.is_none() {
        builder.status_code = "no value was set".parse::<crate::types::LaunchProfileValidationStatusCode>().ok()
    }
    if builder.status_message.is_none() {
        builder.status_message = Some(Default::default())
    }
    builder
}
