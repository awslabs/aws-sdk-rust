// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an update to a static policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateStaticPolicyDefinition {
    /// <p>Specifies the description to be added to or replaced on the static policy.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the Cedar policy language text to be added to or replaced on the static policy.</p> <important>
    /// <p>You can change only the following elements from the original content:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>Changing from <code>StaticPolicy</code> to <code>TemplateLinkedPolicy</code>.</p> </li>
    /// <li> <p>The effect (<code>permit</code> or <code>forbid</code>) of the policy.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy.</p> </li>
    /// </ul>
    /// </important>
    pub statement: ::std::string::String,
}
impl UpdateStaticPolicyDefinition {
    /// <p>Specifies the description to be added to or replaced on the static policy.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies the Cedar policy language text to be added to or replaced on the static policy.</p> <important>
    /// <p>You can change only the following elements from the original content:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>Changing from <code>StaticPolicy</code> to <code>TemplateLinkedPolicy</code>.</p> </li>
    /// <li> <p>The effect (<code>permit</code> or <code>forbid</code>) of the policy.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy.</p> </li>
    /// </ul>
    /// </important>
    pub fn statement(&self) -> &str {
        use std::ops::Deref;
        self.statement.deref()
    }
}
impl ::std::fmt::Debug for UpdateStaticPolicyDefinition {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateStaticPolicyDefinition");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("statement", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateStaticPolicyDefinition {
    /// Creates a new builder-style object to manufacture [`UpdateStaticPolicyDefinition`](crate::types::UpdateStaticPolicyDefinition).
    pub fn builder() -> crate::types::builders::UpdateStaticPolicyDefinitionBuilder {
        crate::types::builders::UpdateStaticPolicyDefinitionBuilder::default()
    }
}

/// A builder for [`UpdateStaticPolicyDefinition`](crate::types::UpdateStaticPolicyDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateStaticPolicyDefinitionBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) statement: ::std::option::Option<::std::string::String>,
}
impl UpdateStaticPolicyDefinitionBuilder {
    /// <p>Specifies the description to be added to or replaced on the static policy.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the description to be added to or replaced on the static policy.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Specifies the description to be added to or replaced on the static policy.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Specifies the Cedar policy language text to be added to or replaced on the static policy.</p> <important>
    /// <p>You can change only the following elements from the original content:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>Changing from <code>StaticPolicy</code> to <code>TemplateLinkedPolicy</code>.</p> </li>
    /// <li> <p>The effect (<code>permit</code> or <code>forbid</code>) of the policy.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy.</p> </li>
    /// </ul>
    /// </important>
    /// This field is required.
    pub fn statement(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statement = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the Cedar policy language text to be added to or replaced on the static policy.</p> <important>
    /// <p>You can change only the following elements from the original content:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>Changing from <code>StaticPolicy</code> to <code>TemplateLinkedPolicy</code>.</p> </li>
    /// <li> <p>The effect (<code>permit</code> or <code>forbid</code>) of the policy.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy.</p> </li>
    /// </ul>
    /// </important>
    pub fn set_statement(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statement = input;
        self
    }
    /// <p>Specifies the Cedar policy language text to be added to or replaced on the static policy.</p> <important>
    /// <p>You can change only the following elements from the original content:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>Changing from <code>StaticPolicy</code> to <code>TemplateLinkedPolicy</code>.</p> </li>
    /// <li> <p>The effect (<code>permit</code> or <code>forbid</code>) of the policy.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy.</p> </li>
    /// </ul>
    /// </important>
    pub fn get_statement(&self) -> &::std::option::Option<::std::string::String> {
        &self.statement
    }
    /// Consumes the builder and constructs a [`UpdateStaticPolicyDefinition`](crate::types::UpdateStaticPolicyDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`statement`](crate::types::builders::UpdateStaticPolicyDefinitionBuilder::statement)
    pub fn build(self) -> ::std::result::Result<crate::types::UpdateStaticPolicyDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UpdateStaticPolicyDefinition {
            description: self.description,
            statement: self.statement.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "statement",
                    "statement was not specified but it is required when building UpdateStaticPolicyDefinition",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for UpdateStaticPolicyDefinitionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateStaticPolicyDefinitionBuilder");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("statement", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
