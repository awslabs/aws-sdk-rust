// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains Cedar policy validation settings for the policy store. The validation mode determines which validation failures that Cedar considers serious enough to block acceptance of a new or edited static policy or policy template. </p>
/// <p>This data type is used as a request parameter in the <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_CreatePolicyStore.html">CreatePolicyStore</a> and <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyStore.html">UpdatePolicyStore</a> operations.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ValidationSettings {
    /// <p>The validation mode currently configured for this policy store. The valid values are:</p>
    /// <ul>
    /// <li> <p> <b>OFF</b> – Neither Verified Permissions nor Cedar perform any validation on policies. No validation errors are reported by either service.</p> </li>
    /// <li> <p> <b>STRICT</b> – Requires a schema to be present in the policy store. Cedar performs validation on all submitted new or updated static policies and policy templates. Any that fail validation are rejected and Cedar doesn't store them in the policy store.</p> </li>
    /// </ul> <important>
    /// <p>If <code>Mode=STRICT</code> and the policy store doesn't contain a schema, Verified Permissions rejects all static policies and policy templates because there is no schema to validate against. </p>
    /// <p>To submit a static policy or policy template without a schema, you must turn off validation.</p>
    /// </important>
    pub mode: crate::types::ValidationMode,
}
impl ValidationSettings {
    /// <p>The validation mode currently configured for this policy store. The valid values are:</p>
    /// <ul>
    /// <li> <p> <b>OFF</b> – Neither Verified Permissions nor Cedar perform any validation on policies. No validation errors are reported by either service.</p> </li>
    /// <li> <p> <b>STRICT</b> – Requires a schema to be present in the policy store. Cedar performs validation on all submitted new or updated static policies and policy templates. Any that fail validation are rejected and Cedar doesn't store them in the policy store.</p> </li>
    /// </ul> <important>
    /// <p>If <code>Mode=STRICT</code> and the policy store doesn't contain a schema, Verified Permissions rejects all static policies and policy templates because there is no schema to validate against. </p>
    /// <p>To submit a static policy or policy template without a schema, you must turn off validation.</p>
    /// </important>
    pub fn mode(&self) -> &crate::types::ValidationMode {
        &self.mode
    }
}
impl ValidationSettings {
    /// Creates a new builder-style object to manufacture [`ValidationSettings`](crate::types::ValidationSettings).
    pub fn builder() -> crate::types::builders::ValidationSettingsBuilder {
        crate::types::builders::ValidationSettingsBuilder::default()
    }
}

/// A builder for [`ValidationSettings`](crate::types::ValidationSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ValidationSettingsBuilder {
    pub(crate) mode: ::std::option::Option<crate::types::ValidationMode>,
}
impl ValidationSettingsBuilder {
    /// <p>The validation mode currently configured for this policy store. The valid values are:</p>
    /// <ul>
    /// <li> <p> <b>OFF</b> – Neither Verified Permissions nor Cedar perform any validation on policies. No validation errors are reported by either service.</p> </li>
    /// <li> <p> <b>STRICT</b> – Requires a schema to be present in the policy store. Cedar performs validation on all submitted new or updated static policies and policy templates. Any that fail validation are rejected and Cedar doesn't store them in the policy store.</p> </li>
    /// </ul> <important>
    /// <p>If <code>Mode=STRICT</code> and the policy store doesn't contain a schema, Verified Permissions rejects all static policies and policy templates because there is no schema to validate against. </p>
    /// <p>To submit a static policy or policy template without a schema, you must turn off validation.</p>
    /// </important>
    /// This field is required.
    pub fn mode(mut self, input: crate::types::ValidationMode) -> Self {
        self.mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The validation mode currently configured for this policy store. The valid values are:</p>
    /// <ul>
    /// <li> <p> <b>OFF</b> – Neither Verified Permissions nor Cedar perform any validation on policies. No validation errors are reported by either service.</p> </li>
    /// <li> <p> <b>STRICT</b> – Requires a schema to be present in the policy store. Cedar performs validation on all submitted new or updated static policies and policy templates. Any that fail validation are rejected and Cedar doesn't store them in the policy store.</p> </li>
    /// </ul> <important>
    /// <p>If <code>Mode=STRICT</code> and the policy store doesn't contain a schema, Verified Permissions rejects all static policies and policy templates because there is no schema to validate against. </p>
    /// <p>To submit a static policy or policy template without a schema, you must turn off validation.</p>
    /// </important>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::ValidationMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>The validation mode currently configured for this policy store. The valid values are:</p>
    /// <ul>
    /// <li> <p> <b>OFF</b> – Neither Verified Permissions nor Cedar perform any validation on policies. No validation errors are reported by either service.</p> </li>
    /// <li> <p> <b>STRICT</b> – Requires a schema to be present in the policy store. Cedar performs validation on all submitted new or updated static policies and policy templates. Any that fail validation are rejected and Cedar doesn't store them in the policy store.</p> </li>
    /// </ul> <important>
    /// <p>If <code>Mode=STRICT</code> and the policy store doesn't contain a schema, Verified Permissions rejects all static policies and policy templates because there is no schema to validate against. </p>
    /// <p>To submit a static policy or policy template without a schema, you must turn off validation.</p>
    /// </important>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::ValidationMode> {
        &self.mode
    }
    /// Consumes the builder and constructs a [`ValidationSettings`](crate::types::ValidationSettings).
    /// This method will fail if any of the following fields are not set:
    /// - [`mode`](crate::types::builders::ValidationSettingsBuilder::mode)
    pub fn build(self) -> ::std::result::Result<crate::types::ValidationSettings, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ValidationSettings {
            mode: self.mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "mode",
                    "mode was not specified but it is required when building ValidationSettings",
                )
            })?,
        })
    }
}
