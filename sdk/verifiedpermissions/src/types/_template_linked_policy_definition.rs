// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a policy created by instantiating a policy template.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TemplateLinkedPolicyDefinition {
    /// <p>The unique identifier of the policy template used to create this policy.</p>
    pub policy_template_id: ::std::string::String,
    /// <p>The principal associated with this template-linked policy. Verified Permissions substitutes this principal for the <code>?principal</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub principal: ::std::option::Option<crate::types::EntityIdentifier>,
    /// <p>The resource associated with this template-linked policy. Verified Permissions substitutes this resource for the <code>?resource</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub resource: ::std::option::Option<crate::types::EntityIdentifier>,
}
impl TemplateLinkedPolicyDefinition {
    /// <p>The unique identifier of the policy template used to create this policy.</p>
    pub fn policy_template_id(&self) -> &str {
        use std::ops::Deref;
        self.policy_template_id.deref()
    }
    /// <p>The principal associated with this template-linked policy. Verified Permissions substitutes this principal for the <code>?principal</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub fn principal(&self) -> ::std::option::Option<&crate::types::EntityIdentifier> {
        self.principal.as_ref()
    }
    /// <p>The resource associated with this template-linked policy. Verified Permissions substitutes this resource for the <code>?resource</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub fn resource(&self) -> ::std::option::Option<&crate::types::EntityIdentifier> {
        self.resource.as_ref()
    }
}
impl TemplateLinkedPolicyDefinition {
    /// Creates a new builder-style object to manufacture [`TemplateLinkedPolicyDefinition`](crate::types::TemplateLinkedPolicyDefinition).
    pub fn builder() -> crate::types::builders::TemplateLinkedPolicyDefinitionBuilder {
        crate::types::builders::TemplateLinkedPolicyDefinitionBuilder::default()
    }
}

/// A builder for [`TemplateLinkedPolicyDefinition`](crate::types::TemplateLinkedPolicyDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TemplateLinkedPolicyDefinitionBuilder {
    pub(crate) policy_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) principal: ::std::option::Option<crate::types::EntityIdentifier>,
    pub(crate) resource: ::std::option::Option<crate::types::EntityIdentifier>,
}
impl TemplateLinkedPolicyDefinitionBuilder {
    /// <p>The unique identifier of the policy template used to create this policy.</p>
    /// This field is required.
    pub fn policy_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the policy template used to create this policy.</p>
    pub fn set_policy_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_template_id = input;
        self
    }
    /// <p>The unique identifier of the policy template used to create this policy.</p>
    pub fn get_policy_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_template_id
    }
    /// <p>The principal associated with this template-linked policy. Verified Permissions substitutes this principal for the <code>?principal</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub fn principal(mut self, input: crate::types::EntityIdentifier) -> Self {
        self.principal = ::std::option::Option::Some(input);
        self
    }
    /// <p>The principal associated with this template-linked policy. Verified Permissions substitutes this principal for the <code>?principal</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<crate::types::EntityIdentifier>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The principal associated with this template-linked policy. Verified Permissions substitutes this principal for the <code>?principal</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub fn get_principal(&self) -> &::std::option::Option<crate::types::EntityIdentifier> {
        &self.principal
    }
    /// <p>The resource associated with this template-linked policy. Verified Permissions substitutes this resource for the <code>?resource</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub fn resource(mut self, input: crate::types::EntityIdentifier) -> Self {
        self.resource = ::std::option::Option::Some(input);
        self
    }
    /// <p>The resource associated with this template-linked policy. Verified Permissions substitutes this resource for the <code>?resource</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub fn set_resource(mut self, input: ::std::option::Option<crate::types::EntityIdentifier>) -> Self {
        self.resource = input;
        self
    }
    /// <p>The resource associated with this template-linked policy. Verified Permissions substitutes this resource for the <code>?resource</code> placeholder in the policy template when it evaluates an authorization request.</p>
    pub fn get_resource(&self) -> &::std::option::Option<crate::types::EntityIdentifier> {
        &self.resource
    }
    /// Consumes the builder and constructs a [`TemplateLinkedPolicyDefinition`](crate::types::TemplateLinkedPolicyDefinition).
    /// This method will fail if any of the following fields are not set:
    /// - [`policy_template_id`](crate::types::builders::TemplateLinkedPolicyDefinitionBuilder::policy_template_id)
    pub fn build(self) -> ::std::result::Result<crate::types::TemplateLinkedPolicyDefinition, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::TemplateLinkedPolicyDefinition {
            policy_template_id: self.policy_template_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_template_id",
                    "policy_template_id was not specified but it is required when building TemplateLinkedPolicyDefinition",
                )
            })?,
            principal: self.principal,
            resource: self.resource,
        })
    }
}
