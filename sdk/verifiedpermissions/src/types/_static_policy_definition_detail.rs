// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains details about a static policy. It includes the description and policy body.</p>
/// <p>This data type is used within a <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_PolicyDefinition.html">PolicyDefinition</a> structure as part of a request parameter for the <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_CreatePolicy.html">CreatePolicy</a> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct StaticPolicyDefinitionDetail {
    /// <p>A description of the static policy.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The content of the static policy written in the Cedar policy language.</p>
    pub statement: ::std::string::String,
}
impl StaticPolicyDefinitionDetail {
    /// <p>A description of the static policy.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The content of the static policy written in the Cedar policy language.</p>
    pub fn statement(&self) -> &str {
        use std::ops::Deref;
        self.statement.deref()
    }
}
impl ::std::fmt::Debug for StaticPolicyDefinitionDetail {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StaticPolicyDefinitionDetail");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("statement", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl StaticPolicyDefinitionDetail {
    /// Creates a new builder-style object to manufacture [`StaticPolicyDefinitionDetail`](crate::types::StaticPolicyDefinitionDetail).
    pub fn builder() -> crate::types::builders::StaticPolicyDefinitionDetailBuilder {
        crate::types::builders::StaticPolicyDefinitionDetailBuilder::default()
    }
}

/// A builder for [`StaticPolicyDefinitionDetail`](crate::types::StaticPolicyDefinitionDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct StaticPolicyDefinitionDetailBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) statement: ::std::option::Option<::std::string::String>,
}
impl StaticPolicyDefinitionDetailBuilder {
    /// <p>A description of the static policy.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the static policy.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the static policy.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The content of the static policy written in the Cedar policy language.</p>
    /// This field is required.
    pub fn statement(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statement = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The content of the static policy written in the Cedar policy language.</p>
    pub fn set_statement(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statement = input;
        self
    }
    /// <p>The content of the static policy written in the Cedar policy language.</p>
    pub fn get_statement(&self) -> &::std::option::Option<::std::string::String> {
        &self.statement
    }
    /// Consumes the builder and constructs a [`StaticPolicyDefinitionDetail`](crate::types::StaticPolicyDefinitionDetail).
    /// This method will fail if any of the following fields are not set:
    /// - [`statement`](crate::types::builders::StaticPolicyDefinitionDetailBuilder::statement)
    pub fn build(self) -> ::std::result::Result<crate::types::StaticPolicyDefinitionDetail, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::StaticPolicyDefinitionDetail {
            description: self.description,
            statement: self.statement.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "statement",
                    "statement was not specified but it is required when building StaticPolicyDefinitionDetail",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for StaticPolicyDefinitionDetailBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("StaticPolicyDefinitionDetailBuilder");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("statement", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
