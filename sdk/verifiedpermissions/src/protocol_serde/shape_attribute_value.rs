// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_attribute_value(
    object_4: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AttributeValue,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    match input {
        crate::types::AttributeValue::Boolean(inner) => {
            object_4.key("boolean").boolean(*inner);
        }
        crate::types::AttributeValue::EntityIdentifier(inner) => {
            #[allow(unused_mut)]
            let mut object_1 = object_4.key("entityIdentifier").start_object();
            crate::protocol_serde::shape_entity_identifier::ser_entity_identifier(&mut object_1, inner)?;
            object_1.finish();
        }
        crate::types::AttributeValue::Long(inner) => {
            object_4.key("long").number(
                #[allow(clippy::useless_conversion)]
                ::aws_smithy_types::Number::NegInt((*inner).into()),
            );
        }
        crate::types::AttributeValue::String(inner) => {
            object_4.key("string").string(inner.as_str());
        }
        crate::types::AttributeValue::Set(inner) => {
            let mut array_2 = object_4.key("set").start_array();
            for item_3 in inner {
                {
                    #[allow(unused_mut)]
                    let mut object_4 = array_2.value().start_object();
                    crate::protocol_serde::shape_attribute_value::ser_attribute_value(&mut object_4, item_3)?;
                    object_4.finish();
                }
            }
            array_2.finish();
        }
        crate::types::AttributeValue::Record(inner) => {
            #[allow(unused_mut)]
            let mut object_5 = object_4.key("record").start_object();
            for (key_6, value_7) in inner {
                {
                    #[allow(unused_mut)]
                    let mut object_8 = object_5.key(key_6.as_str()).start_object();
                    crate::protocol_serde::shape_attribute_value::ser_attribute_value(&mut object_8, value_7)?;
                    object_8.finish();
                }
            }
            object_5.finish();
        }
        crate::types::AttributeValue::Ipaddr(inner) => {
            object_4.key("ipaddr").string(inner.as_str());
        }
        crate::types::AttributeValue::Decimal(inner) => {
            object_4.key("decimal").string(inner.as_str());
        }
        crate::types::AttributeValue::Datetime(inner) => {
            object_4.key("datetime").string(inner.as_str());
        }
        crate::types::AttributeValue::Duration(inner) => {
            object_4.key("duration").string(inner.as_str());
        }
        crate::types::AttributeValue::Unknown => {
            return Err(::aws_smithy_types::error::operation::SerializationError::unknown_variant(
                "AttributeValue",
            ))
        }
    }
    Ok(())
}

pub(crate) fn de_attribute_value<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::AttributeValue>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    let mut variant = None;
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => return Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => loop {
            match tokens.next().transpose()? {
                Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                    if let ::std::option::Option::Some(::std::result::Result::Ok(::aws_smithy_json::deserialize::Token::ValueNull { .. })) =
                        tokens.peek()
                    {
                        let _ = tokens.next().expect("peek returned a token")?;
                        continue;
                    }
                    let key = key.to_unescaped()?;
                    if key == "__type" {
                        ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                        continue;
                    }
                    if variant.is_some() {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                            "encountered mixed variants in union",
                        ));
                    }
                    variant = match key.as_ref() {
                        "boolean" => Some(crate::types::AttributeValue::Boolean(
                            ::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'boolean' cannot be null")
                            })?,
                        )),
                        "entityIdentifier" => Some(crate::types::AttributeValue::EntityIdentifier(
                            crate::protocol_serde::shape_entity_identifier::de_entity_identifier(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'entityIdentifier' cannot be null")
                            })?,
                        )),
                        "long" => Some(crate::types::AttributeValue::Long(
                            ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                .map(i64::try_from)
                                .transpose()?
                                .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'long' cannot be null"))?,
                        )),
                        "string" => Some(crate::types::AttributeValue::String(
                            ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                .transpose()?
                                .ok_or_else(|| {
                                    ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'string' cannot be null")
                                })?,
                        )),
                        "set" => Some(crate::types::AttributeValue::Set(
                            crate::protocol_serde::shape_set_attribute::de_set_attribute(tokens)?
                                .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'set' cannot be null"))?,
                        )),
                        "record" => Some(crate::types::AttributeValue::Record(
                            crate::protocol_serde::shape_record_attribute::de_record_attribute(tokens)?.ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'record' cannot be null")
                            })?,
                        )),
                        "ipaddr" => Some(crate::types::AttributeValue::Ipaddr(
                            ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                .transpose()?
                                .ok_or_else(|| {
                                    ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'ipaddr' cannot be null")
                                })?,
                        )),
                        "decimal" => Some(crate::types::AttributeValue::Decimal(
                            ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                .transpose()?
                                .ok_or_else(|| {
                                    ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'decimal' cannot be null")
                                })?,
                        )),
                        "datetime" => Some(crate::types::AttributeValue::Datetime(
                            ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                .transpose()?
                                .ok_or_else(|| {
                                    ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'datetime' cannot be null")
                                })?,
                        )),
                        "duration" => Some(crate::types::AttributeValue::Duration(
                            ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                .transpose()?
                                .ok_or_else(|| {
                                    ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'duration' cannot be null")
                                })?,
                        )),
                        _ => {
                            ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                            Some(crate::types::AttributeValue::Unknown)
                        }
                    };
                }
                other => {
                    return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {other:?}"
                    )))
                }
            }
        },
        _ => {
            return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ))
        }
    }
    if variant.is_none() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "Union did not contain a valid variant.",
        ));
    }
    Ok(variant)
}
