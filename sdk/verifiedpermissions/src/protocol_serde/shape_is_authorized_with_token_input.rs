// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_is_authorized_with_token_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::is_authorized_with_token::IsAuthorizedWithTokenInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.policy_store_id {
        object.key("policyStoreId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.identity_token {
        object.key("identityToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.access_token {
        object.key("accessToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.action {
        #[allow(unused_mut)]
        let mut object_5 = object.key("action").start_object();
        crate::protocol_serde::shape_action_identifier::ser_action_identifier(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.resource {
        #[allow(unused_mut)]
        let mut object_7 = object.key("resource").start_object();
        crate::protocol_serde::shape_entity_identifier::ser_entity_identifier(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.context {
        #[allow(unused_mut)]
        let mut object_9 = object.key("context").start_object();
        crate::protocol_serde::shape_context_definition::ser_context_definition(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.entities {
        #[allow(unused_mut)]
        let mut object_11 = object.key("entities").start_object();
        crate::protocol_serde::shape_entities_definition::ser_entities_definition(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
