// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resources.is_none() {
        builder.resources = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    builder
}

pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_identity_source_output_correct_errors(
    mut builder: crate::operation::create_identity_source::builders::CreateIdentitySourceOutputBuilder,
) -> crate::operation::create_identity_source::builders::CreateIdentitySourceOutputBuilder {
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.identity_source_id.is_none() {
        builder.identity_source_id = Some(Default::default())
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_policy_output_correct_errors(
    mut builder: crate::operation::create_policy::builders::CreatePolicyOutputBuilder,
) -> crate::operation::create_policy::builders::CreatePolicyOutputBuilder {
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    if builder.policy_id.is_none() {
        builder.policy_id = Some(Default::default())
    }
    if builder.policy_type.is_none() {
        builder.policy_type = "no value was set".parse::<crate::types::PolicyType>().ok()
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_policy_store_output_correct_errors(
    mut builder: crate::operation::create_policy_store::builders::CreatePolicyStoreOutputBuilder,
) -> crate::operation::create_policy_store::builders::CreatePolicyStoreOutputBuilder {
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_policy_template_output_correct_errors(
    mut builder: crate::operation::create_policy_template::builders::CreatePolicyTemplateOutputBuilder,
) -> crate::operation::create_policy_template::builders::CreatePolicyTemplateOutputBuilder {
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    if builder.policy_template_id.is_none() {
        builder.policy_template_id = Some(Default::default())
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_identity_source_output_correct_errors(
    mut builder: crate::operation::get_identity_source::builders::GetIdentitySourceOutputBuilder,
) -> crate::operation::get_identity_source::builders::GetIdentitySourceOutputBuilder {
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.details.is_none() {
        builder.details = {
            let builder = crate::types::builders::IdentitySourceDetailsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.identity_source_id.is_none() {
        builder.identity_source_id = Some(Default::default())
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    if builder.principal_entity_type.is_none() {
        builder.principal_entity_type = Some(Default::default())
    }
    builder
}

pub(crate) fn get_policy_output_correct_errors(
    mut builder: crate::operation::get_policy::builders::GetPolicyOutputBuilder,
) -> crate::operation::get_policy::builders::GetPolicyOutputBuilder {
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    if builder.policy_id.is_none() {
        builder.policy_id = Some(Default::default())
    }
    if builder.policy_type.is_none() {
        builder.policy_type = "no value was set".parse::<crate::types::PolicyType>().ok()
    }
    if builder.definition.is_none() {
        builder.definition = Some(crate::types::PolicyDefinitionDetail::Unknown)
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_policy_store_output_correct_errors(
    mut builder: crate::operation::get_policy_store::builders::GetPolicyStoreOutputBuilder,
) -> crate::operation::get_policy_store::builders::GetPolicyStoreOutputBuilder {
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.validation_settings.is_none() {
        builder.validation_settings = {
            let builder = crate::types::builders::ValidationSettingsBuilder::default();
            crate::serde_util::validation_settings_correct_errors(builder).build().ok()
        }
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_policy_template_output_correct_errors(
    mut builder: crate::operation::get_policy_template::builders::GetPolicyTemplateOutputBuilder,
) -> crate::operation::get_policy_template::builders::GetPolicyTemplateOutputBuilder {
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    if builder.policy_template_id.is_none() {
        builder.policy_template_id = Some(Default::default())
    }
    if builder.statement.is_none() {
        builder.statement = Some(Default::default())
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_schema_output_correct_errors(
    mut builder: crate::operation::get_schema::builders::GetSchemaOutputBuilder,
) -> crate::operation::get_schema::builders::GetSchemaOutputBuilder {
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    if builder.schema.is_none() {
        builder.schema = Some(Default::default())
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn is_authorized_output_correct_errors(
    mut builder: crate::operation::is_authorized::builders::IsAuthorizedOutputBuilder,
) -> crate::operation::is_authorized::builders::IsAuthorizedOutputBuilder {
    if builder.decision.is_none() {
        builder.decision = "no value was set".parse::<crate::types::Decision>().ok()
    }
    if builder.determining_policies.is_none() {
        builder.determining_policies = Some(Default::default())
    }
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn is_authorized_with_token_output_correct_errors(
    mut builder: crate::operation::is_authorized_with_token::builders::IsAuthorizedWithTokenOutputBuilder,
) -> crate::operation::is_authorized_with_token::builders::IsAuthorizedWithTokenOutputBuilder {
    if builder.decision.is_none() {
        builder.decision = "no value was set".parse::<crate::types::Decision>().ok()
    }
    if builder.determining_policies.is_none() {
        builder.determining_policies = Some(Default::default())
    }
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn list_identity_sources_output_correct_errors(
    mut builder: crate::operation::list_identity_sources::builders::ListIdentitySourcesOutputBuilder,
) -> crate::operation::list_identity_sources::builders::ListIdentitySourcesOutputBuilder {
    if builder.identity_sources.is_none() {
        builder.identity_sources = Some(Default::default())
    }
    builder
}

pub(crate) fn list_policies_output_correct_errors(
    mut builder: crate::operation::list_policies::builders::ListPoliciesOutputBuilder,
) -> crate::operation::list_policies::builders::ListPoliciesOutputBuilder {
    if builder.policies.is_none() {
        builder.policies = Some(Default::default())
    }
    builder
}

pub(crate) fn list_policy_stores_output_correct_errors(
    mut builder: crate::operation::list_policy_stores::builders::ListPolicyStoresOutputBuilder,
) -> crate::operation::list_policy_stores::builders::ListPolicyStoresOutputBuilder {
    if builder.policy_stores.is_none() {
        builder.policy_stores = Some(Default::default())
    }
    builder
}

pub(crate) fn list_policy_templates_output_correct_errors(
    mut builder: crate::operation::list_policy_templates::builders::ListPolicyTemplatesOutputBuilder,
) -> crate::operation::list_policy_templates::builders::ListPolicyTemplatesOutputBuilder {
    if builder.policy_templates.is_none() {
        builder.policy_templates = Some(Default::default())
    }
    builder
}

pub(crate) fn put_schema_output_correct_errors(
    mut builder: crate::operation::put_schema::builders::PutSchemaOutputBuilder,
) -> crate::operation::put_schema::builders::PutSchemaOutputBuilder {
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    if builder.namespaces.is_none() {
        builder.namespaces = Some(Default::default())
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_identity_source_output_correct_errors(
    mut builder: crate::operation::update_identity_source::builders::UpdateIdentitySourceOutputBuilder,
) -> crate::operation::update_identity_source::builders::UpdateIdentitySourceOutputBuilder {
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.identity_source_id.is_none() {
        builder.identity_source_id = Some(Default::default())
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_policy_output_correct_errors(
    mut builder: crate::operation::update_policy::builders::UpdatePolicyOutputBuilder,
) -> crate::operation::update_policy::builders::UpdatePolicyOutputBuilder {
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    if builder.policy_id.is_none() {
        builder.policy_id = Some(Default::default())
    }
    if builder.policy_type.is_none() {
        builder.policy_type = "no value was set".parse::<crate::types::PolicyType>().ok()
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_policy_store_output_correct_errors(
    mut builder: crate::operation::update_policy_store::builders::UpdatePolicyStoreOutputBuilder,
) -> crate::operation::update_policy_store::builders::UpdatePolicyStoreOutputBuilder {
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_policy_template_output_correct_errors(
    mut builder: crate::operation::update_policy_template::builders::UpdatePolicyTemplateOutputBuilder,
) -> crate::operation::update_policy_template::builders::UpdatePolicyTemplateOutputBuilder {
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    if builder.policy_template_id.is_none() {
        builder.policy_template_id = Some(Default::default())
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn validation_settings_correct_errors(
    mut builder: crate::types::builders::ValidationSettingsBuilder,
) -> crate::types::builders::ValidationSettingsBuilder {
    if builder.mode.is_none() {
        builder.mode = "no value was set".parse::<crate::types::ValidationMode>().ok()
    }
    builder
}

pub(crate) fn entity_identifier_correct_errors(
    mut builder: crate::types::builders::EntityIdentifierBuilder,
) -> crate::types::builders::EntityIdentifierBuilder {
    if builder.entity_type.is_none() {
        builder.entity_type = Some(Default::default())
    }
    if builder.entity_id.is_none() {
        builder.entity_id = Some(Default::default())
    }
    builder
}

pub(crate) fn determining_policy_item_correct_errors(
    mut builder: crate::types::builders::DeterminingPolicyItemBuilder,
) -> crate::types::builders::DeterminingPolicyItemBuilder {
    if builder.policy_id.is_none() {
        builder.policy_id = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_error_item_correct_errors(
    mut builder: crate::types::builders::EvaluationErrorItemBuilder,
) -> crate::types::builders::EvaluationErrorItemBuilder {
    if builder.error_description.is_none() {
        builder.error_description = Some(Default::default())
    }
    builder
}

pub(crate) fn identity_source_item_correct_errors(
    mut builder: crate::types::builders::IdentitySourceItemBuilder,
) -> crate::types::builders::IdentitySourceItemBuilder {
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.details.is_none() {
        builder.details = {
            let builder = crate::types::builders::IdentitySourceItemDetailsBuilder::default();
            Some(builder.build())
        }
    }
    if builder.identity_source_id.is_none() {
        builder.identity_source_id = Some(Default::default())
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    if builder.principal_entity_type.is_none() {
        builder.principal_entity_type = Some(Default::default())
    }
    builder
}

pub(crate) fn policy_item_correct_errors(mut builder: crate::types::builders::PolicyItemBuilder) -> crate::types::builders::PolicyItemBuilder {
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    if builder.policy_id.is_none() {
        builder.policy_id = Some(Default::default())
    }
    if builder.policy_type.is_none() {
        builder.policy_type = "no value was set".parse::<crate::types::PolicyType>().ok()
    }
    if builder.definition.is_none() {
        builder.definition = Some(crate::types::PolicyDefinitionItem::Unknown)
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn policy_store_item_correct_errors(
    mut builder: crate::types::builders::PolicyStoreItemBuilder,
) -> crate::types::builders::PolicyStoreItemBuilder {
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn policy_template_item_correct_errors(
    mut builder: crate::types::builders::PolicyTemplateItemBuilder,
) -> crate::types::builders::PolicyTemplateItemBuilder {
    if builder.policy_store_id.is_none() {
        builder.policy_store_id = Some(Default::default())
    }
    if builder.policy_template_id.is_none() {
        builder.policy_template_id = Some(Default::default())
    }
    if builder.created_date.is_none() {
        builder.created_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_updated_date.is_none() {
        builder.last_updated_date = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn resource_conflict_correct_errors(
    mut builder: crate::types::builders::ResourceConflictBuilder,
) -> crate::types::builders::ResourceConflictBuilder {
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    builder
}

pub(crate) fn static_policy_definition_detail_correct_errors(
    mut builder: crate::types::builders::StaticPolicyDefinitionDetailBuilder,
) -> crate::types::builders::StaticPolicyDefinitionDetailBuilder {
    if builder.statement.is_none() {
        builder.statement = Some(Default::default())
    }
    builder
}

pub(crate) fn template_linked_policy_definition_detail_correct_errors(
    mut builder: crate::types::builders::TemplateLinkedPolicyDefinitionDetailBuilder,
) -> crate::types::builders::TemplateLinkedPolicyDefinitionDetailBuilder {
    if builder.policy_template_id.is_none() {
        builder.policy_template_id = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn template_linked_policy_definition_item_correct_errors(
    mut builder: crate::types::builders::TemplateLinkedPolicyDefinitionItemBuilder,
) -> crate::types::builders::TemplateLinkedPolicyDefinitionItemBuilder {
    if builder.policy_template_id.is_none() {
        builder.policy_template_id = Some(Default::default())
    }
    builder
}
