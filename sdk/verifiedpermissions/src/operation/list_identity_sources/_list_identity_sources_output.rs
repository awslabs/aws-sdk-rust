// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListIdentitySourcesOutput {
    /// <p>If present, this value indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. This indicates that this is the last page of results.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The list of identity sources stored in the specified policy store.</p>
    pub identity_sources: ::std::vec::Vec<crate::types::IdentitySourceItem>,
    _request_id: Option<String>,
}
impl ListIdentitySourcesOutput {
    /// <p>If present, this value indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. This indicates that this is the last page of results.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The list of identity sources stored in the specified policy store.</p>
    pub fn identity_sources(&self) -> &[crate::types::IdentitySourceItem] {
        use std::ops::Deref;
        self.identity_sources.deref()
    }
}
impl ::aws_http::request_id::RequestId for ListIdentitySourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListIdentitySourcesOutput {
    /// Creates a new builder-style object to manufacture [`ListIdentitySourcesOutput`](crate::operation::list_identity_sources::ListIdentitySourcesOutput).
    pub fn builder() -> crate::operation::list_identity_sources::builders::ListIdentitySourcesOutputBuilder {
        crate::operation::list_identity_sources::builders::ListIdentitySourcesOutputBuilder::default()
    }
}

/// A builder for [`ListIdentitySourcesOutput`](crate::operation::list_identity_sources::ListIdentitySourcesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListIdentitySourcesOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) identity_sources: ::std::option::Option<::std::vec::Vec<crate::types::IdentitySourceItem>>,
    _request_id: Option<String>,
}
impl ListIdentitySourcesOutputBuilder {
    /// <p>If present, this value indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. This indicates that this is the last page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If present, this value indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. This indicates that this is the last page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If present, this value indicates that more output is available than is included in the current response. Use this value in the <code>NextToken</code> request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the <code>NextToken</code> response element comes back as <code>null</code>. This indicates that this is the last page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `identity_sources`.
    ///
    /// To override the contents of this collection use [`set_identity_sources`](Self::set_identity_sources).
    ///
    /// <p>The list of identity sources stored in the specified policy store.</p>
    pub fn identity_sources(mut self, input: crate::types::IdentitySourceItem) -> Self {
        let mut v = self.identity_sources.unwrap_or_default();
        v.push(input);
        self.identity_sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of identity sources stored in the specified policy store.</p>
    pub fn set_identity_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::IdentitySourceItem>>) -> Self {
        self.identity_sources = input;
        self
    }
    /// <p>The list of identity sources stored in the specified policy store.</p>
    pub fn get_identity_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::IdentitySourceItem>> {
        &self.identity_sources
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListIdentitySourcesOutput`](crate::operation::list_identity_sources::ListIdentitySourcesOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`identity_sources`](crate::operation::list_identity_sources::builders::ListIdentitySourcesOutputBuilder::identity_sources)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_identity_sources::ListIdentitySourcesOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_identity_sources::ListIdentitySourcesOutput {
            next_token: self.next_token,
            identity_sources: self.identity_sources.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "identity_sources",
                    "identity_sources was not specified but it is required when building ListIdentitySourcesOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
