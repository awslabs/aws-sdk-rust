// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateIdentitySourceInput {
    /// <p>Specifies the ID of the policy store that contains the identity source that you want to update.</p>
    pub policy_store_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the ID of the identity source that you want to update.</p>
    pub identity_source_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the details required to communicate with the identity provider (IdP) associated with this identity source.</p> <note>
    /// <p>At this time, the only valid member of this structure is a Amazon Cognito user pool configuration.</p>
    /// <p>You must specify a <code>userPoolArn</code>, and optionally, a <code>ClientId</code>.</p>
    /// </note>
    pub update_configuration: ::std::option::Option<crate::types::UpdateConfiguration>,
    /// <p>Specifies the data type of principals generated for identities authenticated by the identity source.</p>
    pub principal_entity_type: ::std::option::Option<::std::string::String>,
}
impl UpdateIdentitySourceInput {
    /// <p>Specifies the ID of the policy store that contains the identity source that you want to update.</p>
    pub fn policy_store_id(&self) -> ::std::option::Option<&str> {
        self.policy_store_id.as_deref()
    }
    /// <p>Specifies the ID of the identity source that you want to update.</p>
    pub fn identity_source_id(&self) -> ::std::option::Option<&str> {
        self.identity_source_id.as_deref()
    }
    /// <p>Specifies the details required to communicate with the identity provider (IdP) associated with this identity source.</p> <note>
    /// <p>At this time, the only valid member of this structure is a Amazon Cognito user pool configuration.</p>
    /// <p>You must specify a <code>userPoolArn</code>, and optionally, a <code>ClientId</code>.</p>
    /// </note>
    pub fn update_configuration(&self) -> ::std::option::Option<&crate::types::UpdateConfiguration> {
        self.update_configuration.as_ref()
    }
    /// <p>Specifies the data type of principals generated for identities authenticated by the identity source.</p>
    pub fn principal_entity_type(&self) -> ::std::option::Option<&str> {
        self.principal_entity_type.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateIdentitySourceInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateIdentitySourceInput");
        formatter.field("policy_store_id", &self.policy_store_id);
        formatter.field("identity_source_id", &self.identity_source_id);
        formatter.field("update_configuration", &self.update_configuration);
        formatter.field("principal_entity_type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateIdentitySourceInput {
    /// Creates a new builder-style object to manufacture [`UpdateIdentitySourceInput`](crate::operation::update_identity_source::UpdateIdentitySourceInput).
    pub fn builder() -> crate::operation::update_identity_source::builders::UpdateIdentitySourceInputBuilder {
        crate::operation::update_identity_source::builders::UpdateIdentitySourceInputBuilder::default()
    }
}

/// A builder for [`UpdateIdentitySourceInput`](crate::operation::update_identity_source::UpdateIdentitySourceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateIdentitySourceInputBuilder {
    pub(crate) policy_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) identity_source_id: ::std::option::Option<::std::string::String>,
    pub(crate) update_configuration: ::std::option::Option<crate::types::UpdateConfiguration>,
    pub(crate) principal_entity_type: ::std::option::Option<::std::string::String>,
}
impl UpdateIdentitySourceInputBuilder {
    /// <p>Specifies the ID of the policy store that contains the identity source that you want to update.</p>
    /// This field is required.
    pub fn policy_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ID of the policy store that contains the identity source that you want to update.</p>
    pub fn set_policy_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_store_id = input;
        self
    }
    /// <p>Specifies the ID of the policy store that contains the identity source that you want to update.</p>
    pub fn get_policy_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_store_id
    }
    /// <p>Specifies the ID of the identity source that you want to update.</p>
    /// This field is required.
    pub fn identity_source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ID of the identity source that you want to update.</p>
    pub fn set_identity_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_source_id = input;
        self
    }
    /// <p>Specifies the ID of the identity source that you want to update.</p>
    pub fn get_identity_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_source_id
    }
    /// <p>Specifies the details required to communicate with the identity provider (IdP) associated with this identity source.</p> <note>
    /// <p>At this time, the only valid member of this structure is a Amazon Cognito user pool configuration.</p>
    /// <p>You must specify a <code>userPoolArn</code>, and optionally, a <code>ClientId</code>.</p>
    /// </note>
    /// This field is required.
    pub fn update_configuration(mut self, input: crate::types::UpdateConfiguration) -> Self {
        self.update_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the details required to communicate with the identity provider (IdP) associated with this identity source.</p> <note>
    /// <p>At this time, the only valid member of this structure is a Amazon Cognito user pool configuration.</p>
    /// <p>You must specify a <code>userPoolArn</code>, and optionally, a <code>ClientId</code>.</p>
    /// </note>
    pub fn set_update_configuration(mut self, input: ::std::option::Option<crate::types::UpdateConfiguration>) -> Self {
        self.update_configuration = input;
        self
    }
    /// <p>Specifies the details required to communicate with the identity provider (IdP) associated with this identity source.</p> <note>
    /// <p>At this time, the only valid member of this structure is a Amazon Cognito user pool configuration.</p>
    /// <p>You must specify a <code>userPoolArn</code>, and optionally, a <code>ClientId</code>.</p>
    /// </note>
    pub fn get_update_configuration(&self) -> &::std::option::Option<crate::types::UpdateConfiguration> {
        &self.update_configuration
    }
    /// <p>Specifies the data type of principals generated for identities authenticated by the identity source.</p>
    pub fn principal_entity_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_entity_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the data type of principals generated for identities authenticated by the identity source.</p>
    pub fn set_principal_entity_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_entity_type = input;
        self
    }
    /// <p>Specifies the data type of principals generated for identities authenticated by the identity source.</p>
    pub fn get_principal_entity_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_entity_type
    }
    /// Consumes the builder and constructs a [`UpdateIdentitySourceInput`](crate::operation::update_identity_source::UpdateIdentitySourceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_identity_source::UpdateIdentitySourceInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_identity_source::UpdateIdentitySourceInput {
            policy_store_id: self.policy_store_id,
            identity_source_id: self.identity_source_id,
            update_configuration: self.update_configuration,
            principal_entity_type: self.principal_entity_type,
        })
    }
}
impl ::std::fmt::Debug for UpdateIdentitySourceInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateIdentitySourceInputBuilder");
        formatter.field("policy_store_id", &self.policy_store_id);
        formatter.field("identity_source_id", &self.identity_source_id);
        formatter.field("update_configuration", &self.update_configuration);
        formatter.field("principal_entity_type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
