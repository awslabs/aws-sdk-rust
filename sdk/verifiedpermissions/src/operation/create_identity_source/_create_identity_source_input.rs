// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateIdentitySourceInput {
    /// <p>Specifies a unique, case-sensitive ID that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the ID of the policy store in which you want to store this identity source. Only policies and requests made using this policy store can reference identities from the identity provider configured in the new identity source.</p>
    pub policy_store_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the details required to communicate with the identity provider (IdP) associated with this identity source.</p> <note>
    /// <p>At this time, the only valid member of this structure is a Amazon Cognito user pool configuration.</p>
    /// <p>You must specify a <code>UserPoolArn</code>, and optionally, a <code>ClientId</code>.</p>
    /// </note>
    pub configuration: ::std::option::Option<crate::types::Configuration>,
    /// <p>Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.</p>
    pub principal_entity_type: ::std::option::Option<::std::string::String>,
}
impl CreateIdentitySourceInput {
    /// <p>Specifies a unique, case-sensitive ID that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Specifies the ID of the policy store in which you want to store this identity source. Only policies and requests made using this policy store can reference identities from the identity provider configured in the new identity source.</p>
    pub fn policy_store_id(&self) -> ::std::option::Option<&str> {
        self.policy_store_id.as_deref()
    }
    /// <p>Specifies the details required to communicate with the identity provider (IdP) associated with this identity source.</p> <note>
    /// <p>At this time, the only valid member of this structure is a Amazon Cognito user pool configuration.</p>
    /// <p>You must specify a <code>UserPoolArn</code>, and optionally, a <code>ClientId</code>.</p>
    /// </note>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::Configuration> {
        self.configuration.as_ref()
    }
    /// <p>Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.</p>
    pub fn principal_entity_type(&self) -> ::std::option::Option<&str> {
        self.principal_entity_type.as_deref()
    }
}
impl ::std::fmt::Debug for CreateIdentitySourceInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateIdentitySourceInput");
        formatter.field("client_token", &self.client_token);
        formatter.field("policy_store_id", &self.policy_store_id);
        formatter.field("configuration", &self.configuration);
        formatter.field("principal_entity_type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateIdentitySourceInput {
    /// Creates a new builder-style object to manufacture [`CreateIdentitySourceInput`](crate::operation::create_identity_source::CreateIdentitySourceInput).
    pub fn builder() -> crate::operation::create_identity_source::builders::CreateIdentitySourceInputBuilder {
        crate::operation::create_identity_source::builders::CreateIdentitySourceInputBuilder::default()
    }
}

/// A builder for [`CreateIdentitySourceInput`](crate::operation::create_identity_source::CreateIdentitySourceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateIdentitySourceInputBuilder {
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) policy_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) configuration: ::std::option::Option<crate::types::Configuration>,
    pub(crate) principal_entity_type: ::std::option::Option<::std::string::String>,
}
impl CreateIdentitySourceInputBuilder {
    /// <p>Specifies a unique, case-sensitive ID that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a unique, case-sensitive ID that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Specifies a unique, case-sensitive ID that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>
    /// <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>
    /// <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>Specifies the ID of the policy store in which you want to store this identity source. Only policies and requests made using this policy store can reference identities from the identity provider configured in the new identity source.</p>
    /// This field is required.
    pub fn policy_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ID of the policy store in which you want to store this identity source. Only policies and requests made using this policy store can reference identities from the identity provider configured in the new identity source.</p>
    pub fn set_policy_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_store_id = input;
        self
    }
    /// <p>Specifies the ID of the policy store in which you want to store this identity source. Only policies and requests made using this policy store can reference identities from the identity provider configured in the new identity source.</p>
    pub fn get_policy_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_store_id
    }
    /// <p>Specifies the details required to communicate with the identity provider (IdP) associated with this identity source.</p> <note>
    /// <p>At this time, the only valid member of this structure is a Amazon Cognito user pool configuration.</p>
    /// <p>You must specify a <code>UserPoolArn</code>, and optionally, a <code>ClientId</code>.</p>
    /// </note>
    /// This field is required.
    pub fn configuration(mut self, input: crate::types::Configuration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the details required to communicate with the identity provider (IdP) associated with this identity source.</p> <note>
    /// <p>At this time, the only valid member of this structure is a Amazon Cognito user pool configuration.</p>
    /// <p>You must specify a <code>UserPoolArn</code>, and optionally, a <code>ClientId</code>.</p>
    /// </note>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::Configuration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>Specifies the details required to communicate with the identity provider (IdP) associated with this identity source.</p> <note>
    /// <p>At this time, the only valid member of this structure is a Amazon Cognito user pool configuration.</p>
    /// <p>You must specify a <code>UserPoolArn</code>, and optionally, a <code>ClientId</code>.</p>
    /// </note>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::Configuration> {
        &self.configuration
    }
    /// <p>Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.</p>
    pub fn principal_entity_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_entity_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.</p>
    pub fn set_principal_entity_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_entity_type = input;
        self
    }
    /// <p>Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.</p>
    pub fn get_principal_entity_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_entity_type
    }
    /// Consumes the builder and constructs a [`CreateIdentitySourceInput`](crate::operation::create_identity_source::CreateIdentitySourceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_identity_source::CreateIdentitySourceInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_identity_source::CreateIdentitySourceInput {
            client_token: self.client_token,
            policy_store_id: self.policy_store_id,
            configuration: self.configuration,
            principal_entity_type: self.principal_entity_type,
        })
    }
}
impl ::std::fmt::Debug for CreateIdentitySourceInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateIdentitySourceInputBuilder");
        formatter.field("client_token", &self.client_token);
        formatter.field("policy_store_id", &self.policy_store_id);
        formatter.field("configuration", &self.configuration);
        formatter.field("principal_entity_type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
