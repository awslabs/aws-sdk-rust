// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_policy::_update_policy_output::UpdatePolicyOutputBuilder;

pub use crate::operation::update_policy::_update_policy_input::UpdatePolicyInputBuilder;

impl crate::operation::update_policy::builders::UpdatePolicyInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_policy::UpdatePolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_policy::UpdatePolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_policy();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdatePolicy`.
///
/// <p>Modifies a Cedar static policy in the specified policy store. You can change only certain elements of the <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyInput.html#amazonverifiedpermissions-UpdatePolicy-request-UpdatePolicyDefinition">UpdatePolicyDefinition</a> parameter. You can directly update only static policies. To change a template-linked policy, you must update the template instead, using <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_UpdatePolicyTemplate.html">UpdatePolicyTemplate</a>.</p><note>
/// <ul>
/// <li>
/// <p>If policy validation is enabled in the policy store, then updating a static policy causes Verified Permissions to validate the policy against the schema in the policy store. If the updated static policy doesn't pass validation, the operation fails and the update isn't stored.</p></li>
/// <li>
/// <p>When you edit a static policy, you can change only certain elements of a static policy:</p>
/// <ul>
/// <li>
/// <p>The action referenced by the policy.</p></li>
/// <li>
/// <p>A condition clause, such as when and unless.</p></li>
/// </ul>
/// <p>You can't change these elements of a static policy:</p>
/// <ul>
/// <li>
/// <p>Changing a policy from a static policy to a template-linked policy.</p></li>
/// <li>
/// <p>Changing the effect of a static policy from permit or forbid.</p></li>
/// <li>
/// <p>The principal referenced by a static policy.</p></li>
/// <li>
/// <p>The resource referenced by a static policy.</p></li>
/// </ul></li>
/// <li>
/// <p>To update a template-linked policy, you must update the template instead.</p></li>
/// </ul>
/// </note> <note>
/// <p>Verified Permissions is <i> <a href="https://wikipedia.org/wiki/Eventual_consistency">eventually consistent</a> </i>. It can take a few seconds for a new or changed element to propagate through the service and be visible in the results of other Verified Permissions operations.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdatePolicyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_policy::builders::UpdatePolicyInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_policy::UpdatePolicyOutput,
        crate::operation::update_policy::UpdatePolicyError,
    > for UpdatePolicyFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_policy::UpdatePolicyOutput,
            crate::operation::update_policy::UpdatePolicyError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdatePolicyFluentBuilder {
    /// Creates a new `UpdatePolicy`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdatePolicy as a reference.
    pub fn as_input(&self) -> &crate::operation::update_policy::builders::UpdatePolicyInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_policy::UpdatePolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_policy::UpdatePolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_policy::UpdatePolicy::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_policy::UpdatePolicy::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_policy::UpdatePolicyOutput,
        crate::operation::update_policy::UpdatePolicyError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies the ID of the policy store that contains the policy that you want to update.</p>
    pub fn policy_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.policy_store_id(input.into());
        self
    }
    /// <p>Specifies the ID of the policy store that contains the policy that you want to update.</p>
    pub fn set_policy_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_policy_store_id(input);
        self
    }
    /// <p>Specifies the ID of the policy store that contains the policy that you want to update.</p>
    pub fn get_policy_store_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_policy_store_id()
    }
    /// <p>Specifies the ID of the policy that you want to update. To find this value, you can use <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_ListPolicies.html">ListPolicies</a>.</p>
    pub fn policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.policy_id(input.into());
        self
    }
    /// <p>Specifies the ID of the policy that you want to update. To find this value, you can use <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_ListPolicies.html">ListPolicies</a>.</p>
    pub fn set_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_policy_id(input);
        self
    }
    /// <p>Specifies the ID of the policy that you want to update. To find this value, you can use <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_ListPolicies.html">ListPolicies</a>.</p>
    pub fn get_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_policy_id()
    }
    /// <p>Specifies the updated policy content that you want to replace on the specified policy. The content must be valid Cedar policy language text.</p>
    /// <p>You can change only the following elements from the policy definition:</p>
    /// <ul>
    /// <li>
    /// <p>The <code>action</code> referenced by the policy.</p></li>
    /// <li>
    /// <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p></li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li>
    /// <p>Changing from <code>static</code> to <code>templateLinked</code>.</p></li>
    /// <li>
    /// <p>Changing the effect of the policy from <code>permit</code> or <code>forbid</code>.</p></li>
    /// <li>
    /// <p>The <code>principal</code> referenced by the policy.</p></li>
    /// <li>
    /// <p>The <code>resource</code> referenced by the policy.</p></li>
    /// </ul>
    pub fn definition(mut self, input: crate::types::UpdatePolicyDefinition) -> Self {
        self.inner = self.inner.definition(input);
        self
    }
    /// <p>Specifies the updated policy content that you want to replace on the specified policy. The content must be valid Cedar policy language text.</p>
    /// <p>You can change only the following elements from the policy definition:</p>
    /// <ul>
    /// <li>
    /// <p>The <code>action</code> referenced by the policy.</p></li>
    /// <li>
    /// <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p></li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li>
    /// <p>Changing from <code>static</code> to <code>templateLinked</code>.</p></li>
    /// <li>
    /// <p>Changing the effect of the policy from <code>permit</code> or <code>forbid</code>.</p></li>
    /// <li>
    /// <p>The <code>principal</code> referenced by the policy.</p></li>
    /// <li>
    /// <p>The <code>resource</code> referenced by the policy.</p></li>
    /// </ul>
    pub fn set_definition(mut self, input: ::std::option::Option<crate::types::UpdatePolicyDefinition>) -> Self {
        self.inner = self.inner.set_definition(input);
        self
    }
    /// <p>Specifies the updated policy content that you want to replace on the specified policy. The content must be valid Cedar policy language text.</p>
    /// <p>You can change only the following elements from the policy definition:</p>
    /// <ul>
    /// <li>
    /// <p>The <code>action</code> referenced by the policy.</p></li>
    /// <li>
    /// <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p></li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li>
    /// <p>Changing from <code>static</code> to <code>templateLinked</code>.</p></li>
    /// <li>
    /// <p>Changing the effect of the policy from <code>permit</code> or <code>forbid</code>.</p></li>
    /// <li>
    /// <p>The <code>principal</code> referenced by the policy.</p></li>
    /// <li>
    /// <p>The <code>resource</code> referenced by the policy.</p></li>
    /// </ul>
    pub fn get_definition(&self) -> &::std::option::Option<crate::types::UpdatePolicyDefinition> {
        self.inner.get_definition()
    }
}
