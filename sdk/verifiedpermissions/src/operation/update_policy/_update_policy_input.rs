// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdatePolicyInput {
    /// <p>Specifies the ID of the policy store that contains the policy that you want to update.</p>
    pub policy_store_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the ID of the policy that you want to update. To find this value, you can use <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_ListPolicies.html">ListPolicies</a>.</p>
    pub policy_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the updated policy content that you want to replace on the specified policy. The content must be valid Cedar policy language text.</p>
    /// <p>You can change only the following elements from the policy definition:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>Changing from <code>static</code> to <code>templateLinked</code>.</p> </li>
    /// <li> <p>Changing the effect of the policy from <code>permit</code> or <code>forbid</code>.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy.</p> </li>
    /// </ul>
    pub definition: ::std::option::Option<crate::types::UpdatePolicyDefinition>,
}
impl UpdatePolicyInput {
    /// <p>Specifies the ID of the policy store that contains the policy that you want to update.</p>
    pub fn policy_store_id(&self) -> ::std::option::Option<&str> {
        self.policy_store_id.as_deref()
    }
    /// <p>Specifies the ID of the policy that you want to update. To find this value, you can use <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_ListPolicies.html">ListPolicies</a>.</p>
    pub fn policy_id(&self) -> ::std::option::Option<&str> {
        self.policy_id.as_deref()
    }
    /// <p>Specifies the updated policy content that you want to replace on the specified policy. The content must be valid Cedar policy language text.</p>
    /// <p>You can change only the following elements from the policy definition:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>Changing from <code>static</code> to <code>templateLinked</code>.</p> </li>
    /// <li> <p>Changing the effect of the policy from <code>permit</code> or <code>forbid</code>.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy.</p> </li>
    /// </ul>
    pub fn definition(&self) -> ::std::option::Option<&crate::types::UpdatePolicyDefinition> {
        self.definition.as_ref()
    }
}
impl UpdatePolicyInput {
    /// Creates a new builder-style object to manufacture [`UpdatePolicyInput`](crate::operation::update_policy::UpdatePolicyInput).
    pub fn builder() -> crate::operation::update_policy::builders::UpdatePolicyInputBuilder {
        crate::operation::update_policy::builders::UpdatePolicyInputBuilder::default()
    }
}

/// A builder for [`UpdatePolicyInput`](crate::operation::update_policy::UpdatePolicyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdatePolicyInputBuilder {
    pub(crate) policy_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) policy_id: ::std::option::Option<::std::string::String>,
    pub(crate) definition: ::std::option::Option<crate::types::UpdatePolicyDefinition>,
}
impl UpdatePolicyInputBuilder {
    /// <p>Specifies the ID of the policy store that contains the policy that you want to update.</p>
    /// This field is required.
    pub fn policy_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ID of the policy store that contains the policy that you want to update.</p>
    pub fn set_policy_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_store_id = input;
        self
    }
    /// <p>Specifies the ID of the policy store that contains the policy that you want to update.</p>
    pub fn get_policy_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_store_id
    }
    /// <p>Specifies the ID of the policy that you want to update. To find this value, you can use <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_ListPolicies.html">ListPolicies</a>.</p>
    /// This field is required.
    pub fn policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ID of the policy that you want to update. To find this value, you can use <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_ListPolicies.html">ListPolicies</a>.</p>
    pub fn set_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_id = input;
        self
    }
    /// <p>Specifies the ID of the policy that you want to update. To find this value, you can use <a href="https://docs.aws.amazon.com/verifiedpermissions/latest/apireference/API_ListPolicies.html">ListPolicies</a>.</p>
    pub fn get_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_id
    }
    /// <p>Specifies the updated policy content that you want to replace on the specified policy. The content must be valid Cedar policy language text.</p>
    /// <p>You can change only the following elements from the policy definition:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>Changing from <code>static</code> to <code>templateLinked</code>.</p> </li>
    /// <li> <p>Changing the effect of the policy from <code>permit</code> or <code>forbid</code>.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn definition(mut self, input: crate::types::UpdatePolicyDefinition) -> Self {
        self.definition = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the updated policy content that you want to replace on the specified policy. The content must be valid Cedar policy language text.</p>
    /// <p>You can change only the following elements from the policy definition:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>Changing from <code>static</code> to <code>templateLinked</code>.</p> </li>
    /// <li> <p>Changing the effect of the policy from <code>permit</code> or <code>forbid</code>.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy.</p> </li>
    /// </ul>
    pub fn set_definition(mut self, input: ::std::option::Option<crate::types::UpdatePolicyDefinition>) -> Self {
        self.definition = input;
        self
    }
    /// <p>Specifies the updated policy content that you want to replace on the specified policy. The content must be valid Cedar policy language text.</p>
    /// <p>You can change only the following elements from the policy definition:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>Changing from <code>static</code> to <code>templateLinked</code>.</p> </li>
    /// <li> <p>Changing the effect of the policy from <code>permit</code> or <code>forbid</code>.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy.</p> </li>
    /// </ul>
    pub fn get_definition(&self) -> &::std::option::Option<crate::types::UpdatePolicyDefinition> {
        &self.definition
    }
    /// Consumes the builder and constructs a [`UpdatePolicyInput`](crate::operation::update_policy::UpdatePolicyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_policy::UpdatePolicyInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_policy::UpdatePolicyInput {
            policy_store_id: self.policy_store_id,
            policy_id: self.policy_id,
            definition: self.definition,
        })
    }
}
