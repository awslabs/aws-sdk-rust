// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetPolicyTemplateOutput {
    /// <p>The ID of the policy store that contains the policy template.</p>
    pub policy_store_id: ::std::string::String,
    /// <p>The ID of the policy template.</p>
    pub policy_template_id: ::std::string::String,
    /// <p>The description of the policy template.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The content of the body of the policy template written in the Cedar policy language.</p>
    pub statement: ::std::string::String,
    /// <p>The date and time that the policy template was originally created.</p>
    pub created_date: ::aws_smithy_types::DateTime,
    /// <p>The date and time that the policy template was most recently updated.</p>
    pub last_updated_date: ::aws_smithy_types::DateTime,
    _request_id: Option<String>,
}
impl GetPolicyTemplateOutput {
    /// <p>The ID of the policy store that contains the policy template.</p>
    pub fn policy_store_id(&self) -> &str {
        use std::ops::Deref;
        self.policy_store_id.deref()
    }
    /// <p>The ID of the policy template.</p>
    pub fn policy_template_id(&self) -> &str {
        use std::ops::Deref;
        self.policy_template_id.deref()
    }
    /// <p>The description of the policy template.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The content of the body of the policy template written in the Cedar policy language.</p>
    pub fn statement(&self) -> &str {
        use std::ops::Deref;
        self.statement.deref()
    }
    /// <p>The date and time that the policy template was originally created.</p>
    pub fn created_date(&self) -> &::aws_smithy_types::DateTime {
        &self.created_date
    }
    /// <p>The date and time that the policy template was most recently updated.</p>
    pub fn last_updated_date(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_date
    }
}
impl ::std::fmt::Debug for GetPolicyTemplateOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetPolicyTemplateOutput");
        formatter.field("policy_store_id", &self.policy_store_id);
        formatter.field("policy_template_id", &self.policy_template_id);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("statement", &"*** Sensitive Data Redacted ***");
        formatter.field("created_date", &self.created_date);
        formatter.field("last_updated_date", &self.last_updated_date);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for GetPolicyTemplateOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetPolicyTemplateOutput {
    /// Creates a new builder-style object to manufacture [`GetPolicyTemplateOutput`](crate::operation::get_policy_template::GetPolicyTemplateOutput).
    pub fn builder() -> crate::operation::get_policy_template::builders::GetPolicyTemplateOutputBuilder {
        crate::operation::get_policy_template::builders::GetPolicyTemplateOutputBuilder::default()
    }
}

/// A builder for [`GetPolicyTemplateOutput`](crate::operation::get_policy_template::GetPolicyTemplateOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetPolicyTemplateOutputBuilder {
    pub(crate) policy_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) policy_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) statement: ::std::option::Option<::std::string::String>,
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetPolicyTemplateOutputBuilder {
    /// <p>The ID of the policy store that contains the policy template.</p>
    /// This field is required.
    pub fn policy_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the policy store that contains the policy template.</p>
    pub fn set_policy_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_store_id = input;
        self
    }
    /// <p>The ID of the policy store that contains the policy template.</p>
    pub fn get_policy_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_store_id
    }
    /// <p>The ID of the policy template.</p>
    /// This field is required.
    pub fn policy_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the policy template.</p>
    pub fn set_policy_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_template_id = input;
        self
    }
    /// <p>The ID of the policy template.</p>
    pub fn get_policy_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_template_id
    }
    /// <p>The description of the policy template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the policy template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the policy template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The content of the body of the policy template written in the Cedar policy language.</p>
    /// This field is required.
    pub fn statement(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statement = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The content of the body of the policy template written in the Cedar policy language.</p>
    pub fn set_statement(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statement = input;
        self
    }
    /// <p>The content of the body of the policy template written in the Cedar policy language.</p>
    pub fn get_statement(&self) -> &::std::option::Option<::std::string::String> {
        &self.statement
    }
    /// <p>The date and time that the policy template was originally created.</p>
    /// This field is required.
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the policy template was originally created.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The date and time that the policy template was originally created.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// <p>The date and time that the policy template was most recently updated.</p>
    /// This field is required.
    pub fn last_updated_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the policy template was most recently updated.</p>
    pub fn set_last_updated_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date = input;
        self
    }
    /// <p>The date and time that the policy template was most recently updated.</p>
    pub fn get_last_updated_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetPolicyTemplateOutput`](crate::operation::get_policy_template::GetPolicyTemplateOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`policy_store_id`](crate::operation::get_policy_template::builders::GetPolicyTemplateOutputBuilder::policy_store_id)
    /// - [`policy_template_id`](crate::operation::get_policy_template::builders::GetPolicyTemplateOutputBuilder::policy_template_id)
    /// - [`statement`](crate::operation::get_policy_template::builders::GetPolicyTemplateOutputBuilder::statement)
    /// - [`created_date`](crate::operation::get_policy_template::builders::GetPolicyTemplateOutputBuilder::created_date)
    /// - [`last_updated_date`](crate::operation::get_policy_template::builders::GetPolicyTemplateOutputBuilder::last_updated_date)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_policy_template::GetPolicyTemplateOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_policy_template::GetPolicyTemplateOutput {
            policy_store_id: self.policy_store_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_store_id",
                    "policy_store_id was not specified but it is required when building GetPolicyTemplateOutput",
                )
            })?,
            policy_template_id: self.policy_template_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_template_id",
                    "policy_template_id was not specified but it is required when building GetPolicyTemplateOutput",
                )
            })?,
            description: self.description,
            statement: self.statement.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "statement",
                    "statement was not specified but it is required when building GetPolicyTemplateOutput",
                )
            })?,
            created_date: self.created_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_date",
                    "created_date was not specified but it is required when building GetPolicyTemplateOutput",
                )
            })?,
            last_updated_date: self.last_updated_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_date",
                    "last_updated_date was not specified but it is required when building GetPolicyTemplateOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetPolicyTemplateOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetPolicyTemplateOutputBuilder");
        formatter.field("policy_store_id", &self.policy_store_id);
        formatter.field("policy_template_id", &self.policy_template_id);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("statement", &"*** Sensitive Data Redacted ***");
        formatter.field("created_date", &self.created_date);
        formatter.field("last_updated_date", &self.last_updated_date);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
