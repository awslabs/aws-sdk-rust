// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteIdentitySourceInput {
    /// <p>Specifies the ID of the policy store that contains the identity source that you want to delete.</p>
    pub policy_store_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the ID of the identity source that you want to delete.</p>
    pub identity_source_id: ::std::option::Option<::std::string::String>,
}
impl DeleteIdentitySourceInput {
    /// <p>Specifies the ID of the policy store that contains the identity source that you want to delete.</p>
    pub fn policy_store_id(&self) -> ::std::option::Option<&str> {
        self.policy_store_id.as_deref()
    }
    /// <p>Specifies the ID of the identity source that you want to delete.</p>
    pub fn identity_source_id(&self) -> ::std::option::Option<&str> {
        self.identity_source_id.as_deref()
    }
}
impl DeleteIdentitySourceInput {
    /// Creates a new builder-style object to manufacture [`DeleteIdentitySourceInput`](crate::operation::delete_identity_source::DeleteIdentitySourceInput).
    pub fn builder() -> crate::operation::delete_identity_source::builders::DeleteIdentitySourceInputBuilder {
        crate::operation::delete_identity_source::builders::DeleteIdentitySourceInputBuilder::default()
    }
}

/// A builder for [`DeleteIdentitySourceInput`](crate::operation::delete_identity_source::DeleteIdentitySourceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteIdentitySourceInputBuilder {
    pub(crate) policy_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) identity_source_id: ::std::option::Option<::std::string::String>,
}
impl DeleteIdentitySourceInputBuilder {
    /// <p>Specifies the ID of the policy store that contains the identity source that you want to delete.</p>
    /// This field is required.
    pub fn policy_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ID of the policy store that contains the identity source that you want to delete.</p>
    pub fn set_policy_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_store_id = input;
        self
    }
    /// <p>Specifies the ID of the policy store that contains the identity source that you want to delete.</p>
    pub fn get_policy_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_store_id
    }
    /// <p>Specifies the ID of the identity source that you want to delete.</p>
    /// This field is required.
    pub fn identity_source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ID of the identity source that you want to delete.</p>
    pub fn set_identity_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_source_id = input;
        self
    }
    /// <p>Specifies the ID of the identity source that you want to delete.</p>
    pub fn get_identity_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_source_id
    }
    /// Consumes the builder and constructs a [`DeleteIdentitySourceInput`](crate::operation::delete_identity_source::DeleteIdentitySourceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_identity_source::DeleteIdentitySourceInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::delete_identity_source::DeleteIdentitySourceInput {
            policy_store_id: self.policy_store_id,
            identity_source_id: self.identity_source_id,
        })
    }
}
