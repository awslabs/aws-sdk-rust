// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetIdentitySourceOutput {
    /// <p>The date and time that the identity source was originally created.</p>
    pub created_date: ::aws_smithy_types::DateTime,
    /// <p>A structure that describes the configuration of the identity source.</p>
    pub details: ::std::option::Option<crate::types::IdentitySourceDetails>,
    /// <p>The ID of the identity source.</p>
    pub identity_source_id: ::std::string::String,
    /// <p>The date and time that the identity source was most recently updated.</p>
    pub last_updated_date: ::aws_smithy_types::DateTime,
    /// <p>The ID of the policy store that contains the identity source.</p>
    pub policy_store_id: ::std::string::String,
    /// <p>The data type of principals generated for identities authenticated by this identity source.</p>
    pub principal_entity_type: ::std::string::String,
    _request_id: Option<String>,
}
impl GetIdentitySourceOutput {
    /// <p>The date and time that the identity source was originally created.</p>
    pub fn created_date(&self) -> &::aws_smithy_types::DateTime {
        &self.created_date
    }
    /// <p>A structure that describes the configuration of the identity source.</p>
    pub fn details(&self) -> ::std::option::Option<&crate::types::IdentitySourceDetails> {
        self.details.as_ref()
    }
    /// <p>The ID of the identity source.</p>
    pub fn identity_source_id(&self) -> &str {
        use std::ops::Deref;
        self.identity_source_id.deref()
    }
    /// <p>The date and time that the identity source was most recently updated.</p>
    pub fn last_updated_date(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_date
    }
    /// <p>The ID of the policy store that contains the identity source.</p>
    pub fn policy_store_id(&self) -> &str {
        use std::ops::Deref;
        self.policy_store_id.deref()
    }
    /// <p>The data type of principals generated for identities authenticated by this identity source.</p>
    pub fn principal_entity_type(&self) -> &str {
        use std::ops::Deref;
        self.principal_entity_type.deref()
    }
}
impl ::std::fmt::Debug for GetIdentitySourceOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetIdentitySourceOutput");
        formatter.field("created_date", &self.created_date);
        formatter.field("details", &self.details);
        formatter.field("identity_source_id", &self.identity_source_id);
        formatter.field("last_updated_date", &self.last_updated_date);
        formatter.field("policy_store_id", &self.policy_store_id);
        formatter.field("principal_entity_type", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for GetIdentitySourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetIdentitySourceOutput {
    /// Creates a new builder-style object to manufacture [`GetIdentitySourceOutput`](crate::operation::get_identity_source::GetIdentitySourceOutput).
    pub fn builder() -> crate::operation::get_identity_source::builders::GetIdentitySourceOutputBuilder {
        crate::operation::get_identity_source::builders::GetIdentitySourceOutputBuilder::default()
    }
}

/// A builder for [`GetIdentitySourceOutput`](crate::operation::get_identity_source::GetIdentitySourceOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetIdentitySourceOutputBuilder {
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) details: ::std::option::Option<crate::types::IdentitySourceDetails>,
    pub(crate) identity_source_id: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) policy_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) principal_entity_type: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetIdentitySourceOutputBuilder {
    /// <p>The date and time that the identity source was originally created.</p>
    /// This field is required.
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the identity source was originally created.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The date and time that the identity source was originally created.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// <p>A structure that describes the configuration of the identity source.</p>
    /// This field is required.
    pub fn details(mut self, input: crate::types::IdentitySourceDetails) -> Self {
        self.details = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure that describes the configuration of the identity source.</p>
    pub fn set_details(mut self, input: ::std::option::Option<crate::types::IdentitySourceDetails>) -> Self {
        self.details = input;
        self
    }
    /// <p>A structure that describes the configuration of the identity source.</p>
    pub fn get_details(&self) -> &::std::option::Option<crate::types::IdentitySourceDetails> {
        &self.details
    }
    /// <p>The ID of the identity source.</p>
    /// This field is required.
    pub fn identity_source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identity_source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the identity source.</p>
    pub fn set_identity_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identity_source_id = input;
        self
    }
    /// <p>The ID of the identity source.</p>
    pub fn get_identity_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.identity_source_id
    }
    /// <p>The date and time that the identity source was most recently updated.</p>
    /// This field is required.
    pub fn last_updated_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time that the identity source was most recently updated.</p>
    pub fn set_last_updated_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date = input;
        self
    }
    /// <p>The date and time that the identity source was most recently updated.</p>
    pub fn get_last_updated_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date
    }
    /// <p>The ID of the policy store that contains the identity source.</p>
    /// This field is required.
    pub fn policy_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the policy store that contains the identity source.</p>
    pub fn set_policy_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_store_id = input;
        self
    }
    /// <p>The ID of the policy store that contains the identity source.</p>
    pub fn get_policy_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_store_id
    }
    /// <p>The data type of principals generated for identities authenticated by this identity source.</p>
    /// This field is required.
    pub fn principal_entity_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal_entity_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data type of principals generated for identities authenticated by this identity source.</p>
    pub fn set_principal_entity_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal_entity_type = input;
        self
    }
    /// <p>The data type of principals generated for identities authenticated by this identity source.</p>
    pub fn get_principal_entity_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal_entity_type
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetIdentitySourceOutput`](crate::operation::get_identity_source::GetIdentitySourceOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`created_date`](crate::operation::get_identity_source::builders::GetIdentitySourceOutputBuilder::created_date)
    /// - [`identity_source_id`](crate::operation::get_identity_source::builders::GetIdentitySourceOutputBuilder::identity_source_id)
    /// - [`last_updated_date`](crate::operation::get_identity_source::builders::GetIdentitySourceOutputBuilder::last_updated_date)
    /// - [`policy_store_id`](crate::operation::get_identity_source::builders::GetIdentitySourceOutputBuilder::policy_store_id)
    /// - [`principal_entity_type`](crate::operation::get_identity_source::builders::GetIdentitySourceOutputBuilder::principal_entity_type)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_identity_source::GetIdentitySourceOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_identity_source::GetIdentitySourceOutput {
            created_date: self.created_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_date",
                    "created_date was not specified but it is required when building GetIdentitySourceOutput",
                )
            })?,
            details: self.details,
            identity_source_id: self.identity_source_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "identity_source_id",
                    "identity_source_id was not specified but it is required when building GetIdentitySourceOutput",
                )
            })?,
            last_updated_date: self.last_updated_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_date",
                    "last_updated_date was not specified but it is required when building GetIdentitySourceOutput",
                )
            })?,
            policy_store_id: self.policy_store_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "policy_store_id",
                    "policy_store_id was not specified but it is required when building GetIdentitySourceOutput",
                )
            })?,
            principal_entity_type: self.principal_entity_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "principal_entity_type",
                    "principal_entity_type was not specified but it is required when building GetIdentitySourceOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetIdentitySourceOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetIdentitySourceOutputBuilder");
        formatter.field("created_date", &self.created_date);
        formatter.field("details", &self.details);
        formatter.field("identity_source_id", &self.identity_source_id);
        formatter.field("last_updated_date", &self.last_updated_date);
        formatter.field("policy_store_id", &self.policy_store_id);
        formatter.field("principal_entity_type", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
