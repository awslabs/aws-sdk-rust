// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdatePolicyTemplateInput {
    /// <p>Specifies the ID of the policy store that contains the policy template that you want to update.</p>
    pub policy_store_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the ID of the policy template that you want to update.</p>
    pub policy_template_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a new description to apply to the policy template.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Specifies new statement content written in Cedar policy language to replace the current body of the policy template.</p>
    /// <p>You can change only the following elements of the policy body:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy template.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>The effect (<code>permit</code> or <code>forbid</code>) of the policy template.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy template.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy template.</p> </li>
    /// </ul>
    pub statement: ::std::option::Option<::std::string::String>,
}
impl UpdatePolicyTemplateInput {
    /// <p>Specifies the ID of the policy store that contains the policy template that you want to update.</p>
    pub fn policy_store_id(&self) -> ::std::option::Option<&str> {
        self.policy_store_id.as_deref()
    }
    /// <p>Specifies the ID of the policy template that you want to update.</p>
    pub fn policy_template_id(&self) -> ::std::option::Option<&str> {
        self.policy_template_id.as_deref()
    }
    /// <p>Specifies a new description to apply to the policy template.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies new statement content written in Cedar policy language to replace the current body of the policy template.</p>
    /// <p>You can change only the following elements of the policy body:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy template.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>The effect (<code>permit</code> or <code>forbid</code>) of the policy template.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy template.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy template.</p> </li>
    /// </ul>
    pub fn statement(&self) -> ::std::option::Option<&str> {
        self.statement.as_deref()
    }
}
impl ::std::fmt::Debug for UpdatePolicyTemplateInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePolicyTemplateInput");
        formatter.field("policy_store_id", &self.policy_store_id);
        formatter.field("policy_template_id", &self.policy_template_id);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("statement", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdatePolicyTemplateInput {
    /// Creates a new builder-style object to manufacture [`UpdatePolicyTemplateInput`](crate::operation::update_policy_template::UpdatePolicyTemplateInput).
    pub fn builder() -> crate::operation::update_policy_template::builders::UpdatePolicyTemplateInputBuilder {
        crate::operation::update_policy_template::builders::UpdatePolicyTemplateInputBuilder::default()
    }
}

/// A builder for [`UpdatePolicyTemplateInput`](crate::operation::update_policy_template::UpdatePolicyTemplateInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdatePolicyTemplateInputBuilder {
    pub(crate) policy_store_id: ::std::option::Option<::std::string::String>,
    pub(crate) policy_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) statement: ::std::option::Option<::std::string::String>,
}
impl UpdatePolicyTemplateInputBuilder {
    /// <p>Specifies the ID of the policy store that contains the policy template that you want to update.</p>
    /// This field is required.
    pub fn policy_store_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_store_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ID of the policy store that contains the policy template that you want to update.</p>
    pub fn set_policy_store_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_store_id = input;
        self
    }
    /// <p>Specifies the ID of the policy store that contains the policy template that you want to update.</p>
    pub fn get_policy_store_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_store_id
    }
    /// <p>Specifies the ID of the policy template that you want to update.</p>
    /// This field is required.
    pub fn policy_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ID of the policy template that you want to update.</p>
    pub fn set_policy_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_template_id = input;
        self
    }
    /// <p>Specifies the ID of the policy template that you want to update.</p>
    pub fn get_policy_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_template_id
    }
    /// <p>Specifies a new description to apply to the policy template.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a new description to apply to the policy template.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Specifies a new description to apply to the policy template.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Specifies new statement content written in Cedar policy language to replace the current body of the policy template.</p>
    /// <p>You can change only the following elements of the policy body:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy template.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>The effect (<code>permit</code> or <code>forbid</code>) of the policy template.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy template.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy template.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn statement(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.statement = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies new statement content written in Cedar policy language to replace the current body of the policy template.</p>
    /// <p>You can change only the following elements of the policy body:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy template.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>The effect (<code>permit</code> or <code>forbid</code>) of the policy template.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy template.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy template.</p> </li>
    /// </ul>
    pub fn set_statement(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.statement = input;
        self
    }
    /// <p>Specifies new statement content written in Cedar policy language to replace the current body of the policy template.</p>
    /// <p>You can change only the following elements of the policy body:</p>
    /// <ul>
    /// <li> <p>The <code>action</code> referenced by the policy template.</p> </li>
    /// <li> <p>Any conditional clauses, such as <code>when</code> or <code>unless</code> clauses.</p> </li>
    /// </ul>
    /// <p>You <b>can't</b> change the following elements:</p>
    /// <ul>
    /// <li> <p>The effect (<code>permit</code> or <code>forbid</code>) of the policy template.</p> </li>
    /// <li> <p>The <code>principal</code> referenced by the policy template.</p> </li>
    /// <li> <p>The <code>resource</code> referenced by the policy template.</p> </li>
    /// </ul>
    pub fn get_statement(&self) -> &::std::option::Option<::std::string::String> {
        &self.statement
    }
    /// Consumes the builder and constructs a [`UpdatePolicyTemplateInput`](crate::operation::update_policy_template::UpdatePolicyTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_policy_template::UpdatePolicyTemplateInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_policy_template::UpdatePolicyTemplateInput {
            policy_store_id: self.policy_store_id,
            policy_template_id: self.policy_template_id,
            description: self.description,
            statement: self.statement,
        })
    }
}
impl ::std::fmt::Debug for UpdatePolicyTemplateInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdatePolicyTemplateInputBuilder");
        formatter.field("policy_store_id", &self.policy_store_id);
        formatter.field("policy_template_id", &self.policy_template_id);
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("statement", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
