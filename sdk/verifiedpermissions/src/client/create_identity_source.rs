// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateIdentitySource`](crate::operation::create_identity_source::builders::CreateIdentitySourceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_identity_source::builders::CreateIdentitySourceFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_identity_source::builders::CreateIdentitySourceFluentBuilder::set_client_token):<br>required: **false**<br><p>Specifies a unique, case-sensitive ID that you provide to ensure the idempotency of the request. This lets you safely retry the request without accidentally performing the same operation a second time. Passing the same value to a later call to an operation requires that you also pass the same value for all other parameters. We recommend that you use a <a href="https://wikipedia.org/wiki/Universally_unique_identifier">UUID type of value.</a>.</p>  <p>If you don't provide this value, then Amazon Web Services generates a random one for you.</p>  <p>If you retry the operation with the same <code>ClientToken</code>, but with different parameters, the retry fails with an <code>IdempotentParameterMismatch</code> error.</p><br>
    ///   - [`policy_store_id(impl Into<String>)`](crate::operation::create_identity_source::builders::CreateIdentitySourceFluentBuilder::policy_store_id) / [`set_policy_store_id(Option<String>)`](crate::operation::create_identity_source::builders::CreateIdentitySourceFluentBuilder::set_policy_store_id):<br>required: **true**<br><p>Specifies the ID of the policy store in which you want to store this identity source. Only policies and requests made using this policy store can reference identities from the identity provider configured in the new identity source.</p><br>
    ///   - [`configuration(Configuration)`](crate::operation::create_identity_source::builders::CreateIdentitySourceFluentBuilder::configuration) / [`set_configuration(Option<Configuration>)`](crate::operation::create_identity_source::builders::CreateIdentitySourceFluentBuilder::set_configuration):<br>required: **true**<br><p>Specifies the details required to communicate with the identity provider (IdP) associated with this identity source.</p> <note>   <p>At this time, the only valid member of this structure is a Amazon Cognito user pool configuration.</p>   <p>You must specify a <code>UserPoolArn</code>, and optionally, a <code>ClientId</code>.</p>  </note><br>
    ///   - [`principal_entity_type(impl Into<String>)`](crate::operation::create_identity_source::builders::CreateIdentitySourceFluentBuilder::principal_entity_type) / [`set_principal_entity_type(Option<String>)`](crate::operation::create_identity_source::builders::CreateIdentitySourceFluentBuilder::set_principal_entity_type):<br>required: **false**<br><p>Specifies the namespace and data type of the principals generated for identities authenticated by the new identity source.</p><br>
    /// - On success, responds with [`CreateIdentitySourceOutput`](crate::operation::create_identity_source::CreateIdentitySourceOutput) with field(s):
    ///   - [`created_date(DateTime)`](crate::operation::create_identity_source::CreateIdentitySourceOutput::created_date): <p>The date and time the identity source was originally created.</p>
    ///   - [`identity_source_id(String)`](crate::operation::create_identity_source::CreateIdentitySourceOutput::identity_source_id): <p>The unique ID of the new identity source.</p>
    ///   - [`last_updated_date(DateTime)`](crate::operation::create_identity_source::CreateIdentitySourceOutput::last_updated_date): <p>The date and time the identity source was most recently updated.</p>
    ///   - [`policy_store_id(String)`](crate::operation::create_identity_source::CreateIdentitySourceOutput::policy_store_id): <p>The ID of the policy store that contains the identity source.</p>
    /// - On failure, responds with [`SdkError<CreateIdentitySourceError>`](crate::operation::create_identity_source::CreateIdentitySourceError)
    pub fn create_identity_source(&self) -> crate::operation::create_identity_source::builders::CreateIdentitySourceFluentBuilder {
        crate::operation::create_identity_source::builders::CreateIdentitySourceFluentBuilder::new(self.handle.clone())
    }
}
