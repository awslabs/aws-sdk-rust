// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_identity_sources_output_next_token(
    input: &crate::operation::list_identity_sources::ListIdentitySourcesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_policies_output_next_token(
    input: &crate::operation::list_policies::ListPoliciesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_policy_stores_output_next_token(
    input: &crate::operation::list_policy_stores::ListPolicyStoresOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_policy_templates_output_next_token(
    input: &crate::operation::list_policy_templates::ListPolicyTemplatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_identity_sources_output_identity_sources(
    input: crate::operation::list_identity_sources::ListIdentitySourcesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::IdentitySourceItem>> {
    let input = input.identity_sources;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_policies_output_policies(
    input: crate::operation::list_policies::ListPoliciesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PolicyItem>> {
    let input = input.policies;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_policy_stores_output_policy_stores(
    input: crate::operation::list_policy_stores::ListPolicyStoresOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PolicyStoreItem>> {
    let input = input.policy_stores;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_policy_templates_output_policy_templates(
    input: crate::operation::list_policy_templates::ListPolicyTemplatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::PolicyTemplateItem>> {
    let input = input.policy_templates;
    ::std::option::Option::Some(input)
}
