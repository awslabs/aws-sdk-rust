// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn get_identity_dkim_attributes_output_correct_errors(
    mut builder: crate::operation::get_identity_dkim_attributes::builders::GetIdentityDkimAttributesOutputBuilder,
) -> crate::operation::get_identity_dkim_attributes::builders::GetIdentityDkimAttributesOutputBuilder {
    if builder.dkim_attributes.is_none() {
        builder.dkim_attributes = Some(Default::default())
    }
    builder
}

pub(crate) fn get_identity_mail_from_domain_attributes_output_correct_errors(
    mut builder: crate::operation::get_identity_mail_from_domain_attributes::builders::GetIdentityMailFromDomainAttributesOutputBuilder,
) -> crate::operation::get_identity_mail_from_domain_attributes::builders::GetIdentityMailFromDomainAttributesOutputBuilder {
    if builder.mail_from_domain_attributes.is_none() {
        builder.mail_from_domain_attributes = Some(Default::default())
    }
    builder
}

pub(crate) fn get_identity_notification_attributes_output_correct_errors(
    mut builder: crate::operation::get_identity_notification_attributes::builders::GetIdentityNotificationAttributesOutputBuilder,
) -> crate::operation::get_identity_notification_attributes::builders::GetIdentityNotificationAttributesOutputBuilder {
    if builder.notification_attributes.is_none() {
        builder.notification_attributes = Some(Default::default())
    }
    builder
}

pub(crate) fn get_identity_policies_output_correct_errors(
    mut builder: crate::operation::get_identity_policies::builders::GetIdentityPoliciesOutputBuilder,
) -> crate::operation::get_identity_policies::builders::GetIdentityPoliciesOutputBuilder {
    if builder.policies.is_none() {
        builder.policies = Some(Default::default())
    }
    builder
}

pub(crate) fn get_identity_verification_attributes_output_correct_errors(
    mut builder: crate::operation::get_identity_verification_attributes::builders::GetIdentityVerificationAttributesOutputBuilder,
) -> crate::operation::get_identity_verification_attributes::builders::GetIdentityVerificationAttributesOutputBuilder {
    if builder.verification_attributes.is_none() {
        builder.verification_attributes = Some(Default::default())
    }
    builder
}

pub(crate) fn list_identities_output_correct_errors(
    mut builder: crate::operation::list_identities::builders::ListIdentitiesOutputBuilder,
) -> crate::operation::list_identities::builders::ListIdentitiesOutputBuilder {
    if builder.identities.is_none() {
        builder.identities = Some(Default::default())
    }
    builder
}

pub(crate) fn list_identity_policies_output_correct_errors(
    mut builder: crate::operation::list_identity_policies::builders::ListIdentityPoliciesOutputBuilder,
) -> crate::operation::list_identity_policies::builders::ListIdentityPoliciesOutputBuilder {
    if builder.policy_names.is_none() {
        builder.policy_names = Some(Default::default())
    }
    builder
}

pub(crate) fn send_bulk_templated_email_output_correct_errors(
    mut builder: crate::operation::send_bulk_templated_email::builders::SendBulkTemplatedEmailOutputBuilder,
) -> crate::operation::send_bulk_templated_email::builders::SendBulkTemplatedEmailOutputBuilder {
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    builder
}

pub(crate) fn send_email_output_correct_errors(
    mut builder: crate::operation::send_email::builders::SendEmailOutputBuilder,
) -> crate::operation::send_email::builders::SendEmailOutputBuilder {
    if builder.message_id.is_none() {
        builder.message_id = Some(Default::default())
    }
    builder
}

pub(crate) fn send_raw_email_output_correct_errors(
    mut builder: crate::operation::send_raw_email::builders::SendRawEmailOutputBuilder,
) -> crate::operation::send_raw_email::builders::SendRawEmailOutputBuilder {
    if builder.message_id.is_none() {
        builder.message_id = Some(Default::default())
    }
    builder
}

pub(crate) fn send_templated_email_output_correct_errors(
    mut builder: crate::operation::send_templated_email::builders::SendTemplatedEmailOutputBuilder,
) -> crate::operation::send_templated_email::builders::SendTemplatedEmailOutputBuilder {
    if builder.message_id.is_none() {
        builder.message_id = Some(Default::default())
    }
    builder
}

pub(crate) fn verify_domain_dkim_output_correct_errors(
    mut builder: crate::operation::verify_domain_dkim::builders::VerifyDomainDkimOutputBuilder,
) -> crate::operation::verify_domain_dkim::builders::VerifyDomainDkimOutputBuilder {
    if builder.dkim_tokens.is_none() {
        builder.dkim_tokens = Some(Default::default())
    }
    builder
}

pub(crate) fn verify_domain_identity_output_correct_errors(
    mut builder: crate::operation::verify_domain_identity::builders::VerifyDomainIdentityOutputBuilder,
) -> crate::operation::verify_domain_identity::builders::VerifyDomainIdentityOutputBuilder {
    if builder.verification_token.is_none() {
        builder.verification_token = Some(Default::default())
    }
    builder
}

pub(crate) fn configuration_set_correct_errors(
    mut builder: crate::types::builders::ConfigurationSetBuilder,
) -> crate::types::builders::ConfigurationSetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn receipt_rule_correct_errors(mut builder: crate::types::builders::ReceiptRuleBuilder) -> crate::types::builders::ReceiptRuleBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn template_correct_errors(mut builder: crate::types::builders::TemplateBuilder) -> crate::types::builders::TemplateBuilder {
    if builder.template_name.is_none() {
        builder.template_name = Some(Default::default())
    }
    builder
}

pub(crate) fn event_destination_correct_errors(
    mut builder: crate::types::builders::EventDestinationBuilder,
) -> crate::types::builders::EventDestinationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.matching_event_types.is_none() {
        builder.matching_event_types = Some(Default::default())
    }
    builder
}

pub(crate) fn receipt_filter_correct_errors(
    mut builder: crate::types::builders::ReceiptFilterBuilder,
) -> crate::types::builders::ReceiptFilterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.ip_filter.is_none() {
        builder.ip_filter = {
            let builder = crate::types::builders::ReceiptIpFilterBuilder::default();
            crate::serde_util::receipt_ip_filter_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn cloud_watch_destination_correct_errors(
    mut builder: crate::types::builders::CloudWatchDestinationBuilder,
) -> crate::types::builders::CloudWatchDestinationBuilder {
    if builder.dimension_configurations.is_none() {
        builder.dimension_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn identity_dkim_attributes_correct_errors(
    mut builder: crate::types::builders::IdentityDkimAttributesBuilder,
) -> crate::types::builders::IdentityDkimAttributesBuilder {
    if builder.dkim_enabled.is_none() {
        builder.dkim_enabled = Some(Default::default())
    }
    if builder.dkim_verification_status.is_none() {
        builder.dkim_verification_status = "no value was set".parse::<crate::types::VerificationStatus>().ok()
    }
    builder
}

pub(crate) fn identity_mail_from_domain_attributes_correct_errors(
    mut builder: crate::types::builders::IdentityMailFromDomainAttributesBuilder,
) -> crate::types::builders::IdentityMailFromDomainAttributesBuilder {
    if builder.mail_from_domain.is_none() {
        builder.mail_from_domain = Some(Default::default())
    }
    if builder.mail_from_domain_status.is_none() {
        builder.mail_from_domain_status = "no value was set".parse::<crate::types::CustomMailFromStatus>().ok()
    }
    if builder.behavior_on_mx_failure.is_none() {
        builder.behavior_on_mx_failure = "no value was set".parse::<crate::types::BehaviorOnMxFailure>().ok()
    }
    builder
}

pub(crate) fn identity_notification_attributes_correct_errors(
    mut builder: crate::types::builders::IdentityNotificationAttributesBuilder,
) -> crate::types::builders::IdentityNotificationAttributesBuilder {
    if builder.bounce_topic.is_none() {
        builder.bounce_topic = Some(Default::default())
    }
    if builder.complaint_topic.is_none() {
        builder.complaint_topic = Some(Default::default())
    }
    if builder.delivery_topic.is_none() {
        builder.delivery_topic = Some(Default::default())
    }
    if builder.forwarding_enabled.is_none() {
        builder.forwarding_enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn identity_verification_attributes_correct_errors(
    mut builder: crate::types::builders::IdentityVerificationAttributesBuilder,
) -> crate::types::builders::IdentityVerificationAttributesBuilder {
    if builder.verification_status.is_none() {
        builder.verification_status = "no value was set".parse::<crate::types::VerificationStatus>().ok()
    }
    builder
}

pub(crate) fn kinesis_firehose_destination_correct_errors(
    mut builder: crate::types::builders::KinesisFirehoseDestinationBuilder,
) -> crate::types::builders::KinesisFirehoseDestinationBuilder {
    if builder.iam_role_arn.is_none() {
        builder.iam_role_arn = Some(Default::default())
    }
    if builder.delivery_stream_arn.is_none() {
        builder.delivery_stream_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn receipt_ip_filter_correct_errors(
    mut builder: crate::types::builders::ReceiptIpFilterBuilder,
) -> crate::types::builders::ReceiptIpFilterBuilder {
    if builder.policy.is_none() {
        builder.policy = "no value was set".parse::<crate::types::ReceiptFilterPolicy>().ok()
    }
    if builder.cidr.is_none() {
        builder.cidr = Some(Default::default())
    }
    builder
}

pub(crate) fn sns_destination_correct_errors(
    mut builder: crate::types::builders::SnsDestinationBuilder,
) -> crate::types::builders::SnsDestinationBuilder {
    if builder.topic_arn.is_none() {
        builder.topic_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn add_header_action_correct_errors(
    mut builder: crate::types::builders::AddHeaderActionBuilder,
) -> crate::types::builders::AddHeaderActionBuilder {
    if builder.header_name.is_none() {
        builder.header_name = Some(Default::default())
    }
    if builder.header_value.is_none() {
        builder.header_value = Some(Default::default())
    }
    builder
}

pub(crate) fn bounce_action_correct_errors(mut builder: crate::types::builders::BounceActionBuilder) -> crate::types::builders::BounceActionBuilder {
    if builder.smtp_reply_code.is_none() {
        builder.smtp_reply_code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.sender.is_none() {
        builder.sender = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_action_correct_errors(mut builder: crate::types::builders::LambdaActionBuilder) -> crate::types::builders::LambdaActionBuilder {
    if builder.function_arn.is_none() {
        builder.function_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_action_correct_errors(mut builder: crate::types::builders::S3ActionBuilder) -> crate::types::builders::S3ActionBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn sns_action_correct_errors(mut builder: crate::types::builders::SnsActionBuilder) -> crate::types::builders::SnsActionBuilder {
    if builder.topic_arn.is_none() {
        builder.topic_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn stop_action_correct_errors(mut builder: crate::types::builders::StopActionBuilder) -> crate::types::builders::StopActionBuilder {
    if builder.scope.is_none() {
        builder.scope = "no value was set".parse::<crate::types::StopScope>().ok()
    }
    builder
}

pub(crate) fn workmail_action_correct_errors(
    mut builder: crate::types::builders::WorkmailActionBuilder,
) -> crate::types::builders::WorkmailActionBuilder {
    if builder.organization_arn.is_none() {
        builder.organization_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_watch_dimension_configuration_correct_errors(
    mut builder: crate::types::builders::CloudWatchDimensionConfigurationBuilder,
) -> crate::types::builders::CloudWatchDimensionConfigurationBuilder {
    if builder.dimension_name.is_none() {
        builder.dimension_name = Some(Default::default())
    }
    if builder.dimension_value_source.is_none() {
        builder.dimension_value_source = "no value was set".parse::<crate::types::DimensionValueSource>().ok()
    }
    if builder.default_dimension_value.is_none() {
        builder.default_dimension_value = Some(Default::default())
    }
    builder
}
