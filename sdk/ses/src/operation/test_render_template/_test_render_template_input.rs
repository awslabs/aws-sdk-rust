// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestRenderTemplateInput {
    /// <p>The name of the template that you want to render.</p>
    #[doc(hidden)]
    pub template_name: std::option::Option<std::string::String>,
    /// <p>A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
    #[doc(hidden)]
    pub template_data: std::option::Option<std::string::String>,
}
impl TestRenderTemplateInput {
    /// <p>The name of the template that you want to render.</p>
    pub fn template_name(&self) -> std::option::Option<&str> {
        self.template_name.as_deref()
    }
    /// <p>A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
    pub fn template_data(&self) -> std::option::Option<&str> {
        self.template_data.as_deref()
    }
}
impl TestRenderTemplateInput {
    /// Creates a new builder-style object to manufacture [`TestRenderTemplateInput`](crate::operation::test_render_template::TestRenderTemplateInput).
    pub fn builder(
    ) -> crate::operation::test_render_template::builders::TestRenderTemplateInputBuilder {
        crate::operation::test_render_template::builders::TestRenderTemplateInputBuilder::default()
    }
}

/// A builder for [`TestRenderTemplateInput`](crate::operation::test_render_template::TestRenderTemplateInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TestRenderTemplateInputBuilder {
    pub(crate) template_name: std::option::Option<std::string::String>,
    pub(crate) template_data: std::option::Option<std::string::String>,
}
impl TestRenderTemplateInputBuilder {
    /// <p>The name of the template that you want to render.</p>
    pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_name = Some(input.into());
        self
    }
    /// <p>The name of the template that you want to render.</p>
    pub fn set_template_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    /// <p>A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
    pub fn template_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_data = Some(input.into());
        self
    }
    /// <p>A list of replacement values to apply to the template. This parameter is a JSON object, typically consisting of key-value pairs in which the keys correspond to replacement tags in the email template.</p>
    pub fn set_template_data(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_data = input;
        self
    }
    /// Consumes the builder and constructs a [`TestRenderTemplateInput`](crate::operation::test_render_template::TestRenderTemplateInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::test_render_template::TestRenderTemplateInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::test_render_template::TestRenderTemplateInput {
                template_name: self.template_name,
                template_data: self.template_data,
            },
        )
    }
}
