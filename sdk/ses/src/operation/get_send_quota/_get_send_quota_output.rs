// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents your Amazon SES daily sending quota, maximum send rate, and the number of emails you have sent in the last 24 hours.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSendQuotaOutput {
    /// <p>The maximum number of emails the user is allowed to send in a 24-hour interval. A value of -1 signifies an unlimited quota.</p>
    #[doc(hidden)]
    pub max24_hour_send: f64,
    /// <p>The maximum number of emails that Amazon SES can accept from the user's account per second.</p> <note>
    /// <p>The rate at which Amazon SES accepts the user's messages might be less than the maximum send rate.</p>
    /// </note>
    #[doc(hidden)]
    pub max_send_rate: f64,
    /// <p>The number of emails sent during the previous 24 hours.</p>
    #[doc(hidden)]
    pub sent_last24_hours: f64,
    _request_id: Option<String>,
}
impl GetSendQuotaOutput {
    /// <p>The maximum number of emails the user is allowed to send in a 24-hour interval. A value of -1 signifies an unlimited quota.</p>
    pub fn max24_hour_send(&self) -> f64 {
        self.max24_hour_send
    }
    /// <p>The maximum number of emails that Amazon SES can accept from the user's account per second.</p> <note>
    /// <p>The rate at which Amazon SES accepts the user's messages might be less than the maximum send rate.</p>
    /// </note>
    pub fn max_send_rate(&self) -> f64 {
        self.max_send_rate
    }
    /// <p>The number of emails sent during the previous 24 hours.</p>
    pub fn sent_last24_hours(&self) -> f64 {
        self.sent_last24_hours
    }
}
impl aws_http::request_id::RequestId for GetSendQuotaOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSendQuotaOutput {
    /// Creates a new builder-style object to manufacture [`GetSendQuotaOutput`](crate::operation::get_send_quota::GetSendQuotaOutput).
    pub fn builder() -> crate::operation::get_send_quota::builders::GetSendQuotaOutputBuilder {
        crate::operation::get_send_quota::builders::GetSendQuotaOutputBuilder::default()
    }
}

/// A builder for [`GetSendQuotaOutput`](crate::operation::get_send_quota::GetSendQuotaOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSendQuotaOutputBuilder {
    pub(crate) max24_hour_send: std::option::Option<f64>,
    pub(crate) max_send_rate: std::option::Option<f64>,
    pub(crate) sent_last24_hours: std::option::Option<f64>,
    _request_id: Option<String>,
}
impl GetSendQuotaOutputBuilder {
    /// <p>The maximum number of emails the user is allowed to send in a 24-hour interval. A value of -1 signifies an unlimited quota.</p>
    pub fn max24_hour_send(mut self, input: f64) -> Self {
        self.max24_hour_send = Some(input);
        self
    }
    /// <p>The maximum number of emails the user is allowed to send in a 24-hour interval. A value of -1 signifies an unlimited quota.</p>
    pub fn set_max24_hour_send(mut self, input: std::option::Option<f64>) -> Self {
        self.max24_hour_send = input;
        self
    }
    /// <p>The maximum number of emails that Amazon SES can accept from the user's account per second.</p> <note>
    /// <p>The rate at which Amazon SES accepts the user's messages might be less than the maximum send rate.</p>
    /// </note>
    pub fn max_send_rate(mut self, input: f64) -> Self {
        self.max_send_rate = Some(input);
        self
    }
    /// <p>The maximum number of emails that Amazon SES can accept from the user's account per second.</p> <note>
    /// <p>The rate at which Amazon SES accepts the user's messages might be less than the maximum send rate.</p>
    /// </note>
    pub fn set_max_send_rate(mut self, input: std::option::Option<f64>) -> Self {
        self.max_send_rate = input;
        self
    }
    /// <p>The number of emails sent during the previous 24 hours.</p>
    pub fn sent_last24_hours(mut self, input: f64) -> Self {
        self.sent_last24_hours = Some(input);
        self
    }
    /// <p>The number of emails sent during the previous 24 hours.</p>
    pub fn set_sent_last24_hours(mut self, input: std::option::Option<f64>) -> Self {
        self.sent_last24_hours = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSendQuotaOutput`](crate::operation::get_send_quota::GetSendQuotaOutput).
    pub fn build(self) -> crate::operation::get_send_quota::GetSendQuotaOutput {
        crate::operation::get_send_quota::GetSendQuotaOutput {
            max24_hour_send: self.max24_hour_send.unwrap_or_default(),
            max_send_rate: self.max_send_rate.unwrap_or_default(),
            sent_last24_hours: self.sent_last24_hours.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
