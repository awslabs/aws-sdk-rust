// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::reorder_receipt_rule_set::_reorder_receipt_rule_set_output::ReorderReceiptRuleSetOutputBuilder;

pub use crate::operation::reorder_receipt_rule_set::_reorder_receipt_rule_set_input::ReorderReceiptRuleSetInputBuilder;

/// Fluent builder constructing a request to `ReorderReceiptRuleSet`.
///
/// <p>Reorders the receipt rules within a receipt rule set.</p> <note>
/// <p>All of the rules in the rule set must be represented in this request. That is, this API will return an error if the reorder request doesn't explicitly position all of the rules.</p>
/// </note>
/// <p>For information about managing receipt rule sets, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-managing-receipt-rule-sets.html">Amazon SES Developer Guide</a>.</p>
/// <p>You can execute this operation no more than once per second.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ReorderReceiptRuleSetFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::reorder_receipt_rule_set::builders::ReorderReceiptRuleSetInputBuilder,
}
impl ReorderReceiptRuleSetFluentBuilder {
    /// Creates a new `ReorderReceiptRuleSet`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::reorder_receipt_rule_set::ReorderReceiptRuleSet,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::reorder_receipt_rule_set::ReorderReceiptRuleSetError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::reorder_receipt_rule_set::ReorderReceiptRuleSetOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::reorder_receipt_rule_set::ReorderReceiptRuleSetError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the receipt rule set to reorder.</p>
    pub fn rule_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.rule_set_name(input.into());
        self
    }
    /// <p>The name of the receipt rule set to reorder.</p>
    pub fn set_rule_set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_rule_set_name(input);
        self
    }
    /// Appends an item to `RuleNames`.
    ///
    /// To override the contents of this collection use [`set_rule_names`](Self::set_rule_names).
    ///
    /// <p>A list of the specified receipt rule set's receipt rules in the order that you want to put them.</p>
    pub fn rule_names(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.rule_names(input.into());
        self
    }
    /// <p>A list of the specified receipt rule set's receipt rules in the order that you want to put them.</p>
    pub fn set_rule_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_rule_names(input);
        self
    }
}
