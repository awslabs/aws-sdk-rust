// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::set_identity_headers_in_notifications_enabled::_set_identity_headers_in_notifications_enabled_output::SetIdentityHeadersInNotificationsEnabledOutputBuilder;

pub use crate::operation::set_identity_headers_in_notifications_enabled::_set_identity_headers_in_notifications_enabled_input::SetIdentityHeadersInNotificationsEnabledInputBuilder;

/// Fluent builder constructing a request to `SetIdentityHeadersInNotificationsEnabled`.
///
/// <p>Given an identity (an email address or a domain), sets whether Amazon SES includes the original email headers in the Amazon Simple Notification Service (Amazon SNS) notifications of a specified type.</p>
/// <p>You can execute this operation no more than once per second.</p>
/// <p>For more information about using notifications with Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/notifications.html">Amazon SES Developer Guide</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct SetIdentityHeadersInNotificationsEnabledFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::set_identity_headers_in_notifications_enabled::builders::SetIdentityHeadersInNotificationsEnabledInputBuilder
            }
impl SetIdentityHeadersInNotificationsEnabledFluentBuilder {
    /// Creates a new `SetIdentityHeadersInNotificationsEnabled`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::set_identity_headers_in_notifications_enabled::SetIdentityHeadersInNotificationsEnabled, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::set_identity_headers_in_notifications_enabled::SetIdentityHeadersInNotificationsEnabledError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::set_identity_headers_in_notifications_enabled::SetIdentityHeadersInNotificationsEnabledOutput, aws_smithy_http::result::SdkError<crate::operation::set_identity_headers_in_notifications_enabled::SetIdentityHeadersInNotificationsEnabledError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.</p>
    pub fn identity(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.identity(input.into());
        self
    }
    /// <p>The identity for which to enable or disable headers in notifications. Examples: <code>user@example.com</code>, <code>example.com</code>.</p>
    pub fn set_identity(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_identity(input);
        self
    }
    /// <p>The notification type for which to enable or disable headers in notifications. </p>
    pub fn notification_type(mut self, input: crate::types::NotificationType) -> Self {
        self.inner = self.inner.notification_type(input);
        self
    }
    /// <p>The notification type for which to enable or disable headers in notifications. </p>
    pub fn set_notification_type(
        mut self,
        input: std::option::Option<crate::types::NotificationType>,
    ) -> Self {
        self.inner = self.inner.set_notification_type(input);
        self
    }
    /// <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p>
    /// <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.enabled(input);
        self
    }
    /// <p>Sets whether Amazon SES includes the original email headers in Amazon SNS notifications of the specified notification type. A value of <code>true</code> specifies that Amazon SES will include headers in notifications, and a value of <code>false</code> specifies that Amazon SES will not include headers in notifications.</p>
    /// <p>This value can only be set when <code>NotificationType</code> is already set to use a particular Amazon SNS topic.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enabled(input);
        self
    }
}
