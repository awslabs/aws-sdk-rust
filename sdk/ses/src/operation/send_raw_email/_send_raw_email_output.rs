// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a unique message ID.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendRawEmailOutput {
    /// <p>The unique message identifier returned from the <code>SendRawEmail</code> action. </p>
    #[doc(hidden)]
    pub message_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl SendRawEmailOutput {
    /// <p>The unique message identifier returned from the <code>SendRawEmail</code> action. </p>
    pub fn message_id(&self) -> std::option::Option<&str> {
        self.message_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for SendRawEmailOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SendRawEmailOutput {
    /// Creates a new builder-style object to manufacture [`SendRawEmailOutput`](crate::operation::send_raw_email::SendRawEmailOutput).
    pub fn builder() -> crate::operation::send_raw_email::builders::SendRawEmailOutputBuilder {
        crate::operation::send_raw_email::builders::SendRawEmailOutputBuilder::default()
    }
}

/// A builder for [`SendRawEmailOutput`](crate::operation::send_raw_email::SendRawEmailOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SendRawEmailOutputBuilder {
    pub(crate) message_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl SendRawEmailOutputBuilder {
    /// <p>The unique message identifier returned from the <code>SendRawEmail</code> action. </p>
    pub fn message_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.message_id = Some(input.into());
        self
    }
    /// <p>The unique message identifier returned from the <code>SendRawEmail</code> action. </p>
    pub fn set_message_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`SendRawEmailOutput`](crate::operation::send_raw_email::SendRawEmailOutput).
    pub fn build(self) -> crate::operation::send_raw_email::SendRawEmailOutput {
        crate::operation::send_raw_email::SendRawEmailOutput {
            message_id: self.message_id,
            _request_id: self._request_id,
        }
    }
}
