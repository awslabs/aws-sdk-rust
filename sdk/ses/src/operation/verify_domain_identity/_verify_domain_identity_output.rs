// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns a TXT record that you must publish to the DNS server of your domain to complete domain verification with Amazon SES.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VerifyDomainIdentityOutput {
    /// <p>A TXT record that you must place in the DNS settings of the domain to complete domain verification with Amazon SES.</p>
    /// <p>As Amazon SES searches for the TXT record, the domain's verification status is "Pending". When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p>
    #[doc(hidden)]
    pub verification_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl VerifyDomainIdentityOutput {
    /// <p>A TXT record that you must place in the DNS settings of the domain to complete domain verification with Amazon SES.</p>
    /// <p>As Amazon SES searches for the TXT record, the domain's verification status is "Pending". When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p>
    pub fn verification_token(&self) -> std::option::Option<&str> {
        self.verification_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for VerifyDomainIdentityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl VerifyDomainIdentityOutput {
    /// Creates a new builder-style object to manufacture [`VerifyDomainIdentityOutput`](crate::operation::verify_domain_identity::VerifyDomainIdentityOutput).
    pub fn builder(
    ) -> crate::operation::verify_domain_identity::builders::VerifyDomainIdentityOutputBuilder {
        crate::operation::verify_domain_identity::builders::VerifyDomainIdentityOutputBuilder::default()
    }
}

/// A builder for [`VerifyDomainIdentityOutput`](crate::operation::verify_domain_identity::VerifyDomainIdentityOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VerifyDomainIdentityOutputBuilder {
    pub(crate) verification_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl VerifyDomainIdentityOutputBuilder {
    /// <p>A TXT record that you must place in the DNS settings of the domain to complete domain verification with Amazon SES.</p>
    /// <p>As Amazon SES searches for the TXT record, the domain's verification status is "Pending". When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p>
    pub fn verification_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.verification_token = Some(input.into());
        self
    }
    /// <p>A TXT record that you must place in the DNS settings of the domain to complete domain verification with Amazon SES.</p>
    /// <p>As Amazon SES searches for the TXT record, the domain's verification status is "Pending". When Amazon SES detects the record, the domain's verification status changes to "Success". If Amazon SES is unable to detect the record within 72 hours, the domain's verification status changes to "Failed." In that case, if you still want to verify the domain, you must restart the verification process from the beginning.</p>
    pub fn set_verification_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.verification_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`VerifyDomainIdentityOutput`](crate::operation::verify_domain_identity::VerifyDomainIdentityOutput).
    pub fn build(self) -> crate::operation::verify_domain_identity::VerifyDomainIdentityOutput {
        crate::operation::verify_domain_identity::VerifyDomainIdentityOutput {
            verification_token: self.verification_token,
            _request_id: self._request_id,
        }
    }
}
