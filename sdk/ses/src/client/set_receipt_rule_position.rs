// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SetReceiptRulePosition`](crate::operation::set_receipt_rule_position::builders::SetReceiptRulePositionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rule_set_name(impl Into<String>)`](crate::operation::set_receipt_rule_position::builders::SetReceiptRulePositionFluentBuilder::rule_set_name) / [`set_rule_set_name(Option<String>)`](crate::operation::set_receipt_rule_position::builders::SetReceiptRulePositionFluentBuilder::set_rule_set_name):<br>required: **true**<br><p>The name of the receipt rule set that contains the receipt rule to reposition.</p><br>
    ///   - [`rule_name(impl Into<String>)`](crate::operation::set_receipt_rule_position::builders::SetReceiptRulePositionFluentBuilder::rule_name) / [`set_rule_name(Option<String>)`](crate::operation::set_receipt_rule_position::builders::SetReceiptRulePositionFluentBuilder::set_rule_name):<br>required: **true**<br><p>The name of the receipt rule to reposition.</p><br>
    ///   - [`after(impl Into<String>)`](crate::operation::set_receipt_rule_position::builders::SetReceiptRulePositionFluentBuilder::after) / [`set_after(Option<String>)`](crate::operation::set_receipt_rule_position::builders::SetReceiptRulePositionFluentBuilder::set_after):<br>required: **false**<br><p>The name of the receipt rule after which to place the specified receipt rule.</p><br>
    /// - On success, responds with [`SetReceiptRulePositionOutput`](crate::operation::set_receipt_rule_position::SetReceiptRulePositionOutput)
    /// - On failure, responds with [`SdkError<SetReceiptRulePositionError>`](crate::operation::set_receipt_rule_position::SetReceiptRulePositionError)
    pub fn set_receipt_rule_position(&self) -> crate::operation::set_receipt_rule_position::builders::SetReceiptRulePositionFluentBuilder {
        crate::operation::set_receipt_rule_position::builders::SetReceiptRulePositionFluentBuilder::new(self.handle.clone())
    }
}
