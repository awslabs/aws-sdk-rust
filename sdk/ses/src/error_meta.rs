// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Indicates that email sending is disabled for your entire Amazon SES account.</p>
    /// <p>You can enable or disable email sending for your Amazon SES account using <code>UpdateAccountSendingEnabled</code>.</p>
    AccountSendingPausedException(crate::types::error::AccountSendingPausedException),
    /// <p>Indicates that a resource could not be created because of a naming conflict.</p>
    AlreadyExistsException(crate::types::error::AlreadyExistsException),
    /// <p>Indicates that the delete operation could not be completed.</p>
    CannotDeleteException(crate::types::error::CannotDeleteException),
    /// <p>Indicates that the configuration set could not be created because of a naming conflict.</p>
    ConfigurationSetAlreadyExistsException(
        crate::types::error::ConfigurationSetAlreadyExistsException,
    ),
    /// <p>Indicates that the configuration set does not exist.</p>
    ConfigurationSetDoesNotExistException(
        crate::types::error::ConfigurationSetDoesNotExistException,
    ),
    /// <p>Indicates that email sending is disabled for the configuration set.</p>
    /// <p>You can enable or disable email sending for a configuration set using <code>UpdateConfigurationSetSendingEnabled</code>.</p>
    ConfigurationSetSendingPausedException(
        crate::types::error::ConfigurationSetSendingPausedException,
    ),
    /// <p>Indicates that custom verification email template provided content is invalid.</p>
    CustomVerificationEmailInvalidContentException(
        crate::types::error::CustomVerificationEmailInvalidContentException,
    ),
    /// <p>Indicates that a custom verification email template with the name you specified already exists.</p>
    CustomVerificationEmailTemplateAlreadyExistsException(
        crate::types::error::CustomVerificationEmailTemplateAlreadyExistsException,
    ),
    /// <p>Indicates that a custom verification email template with the name you specified does not exist.</p>
    CustomVerificationEmailTemplateDoesNotExistException(
        crate::types::error::CustomVerificationEmailTemplateDoesNotExistException,
    ),
    /// <p>Indicates that the event destination could not be created because of a naming conflict.</p>
    EventDestinationAlreadyExistsException(
        crate::types::error::EventDestinationAlreadyExistsException,
    ),
    /// <p>Indicates that the event destination does not exist.</p>
    EventDestinationDoesNotExistException(
        crate::types::error::EventDestinationDoesNotExistException,
    ),
    /// <p>Indicates that the sender address specified for a custom verification email is not verified, and is therefore not eligible to send the custom verification email. </p>
    FromEmailAddressNotVerifiedException(crate::types::error::FromEmailAddressNotVerifiedException),
    /// <p>Indicates that the Amazon CloudWatch destination is invalid. See the error message for details.</p>
    InvalidCloudWatchDestinationException(
        crate::types::error::InvalidCloudWatchDestinationException,
    ),
    /// <p>Indicates that the configuration set is invalid. See the error message for details.</p>
    InvalidConfigurationSetException(crate::types::error::InvalidConfigurationSetException),
    /// <p>Indicates that provided delivery option is invalid.</p>
    InvalidDeliveryOptionsException(crate::types::error::InvalidDeliveryOptionsException),
    /// <p>Indicates that the Amazon Kinesis Firehose destination is invalid. See the error message for details.</p>
    InvalidFirehoseDestinationException(crate::types::error::InvalidFirehoseDestinationException),
    /// <p>Indicates that the provided AWS Lambda function is invalid, or that Amazon SES could not execute the provided function, possibly due to permissions issues. For information about giving permissions, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES Developer Guide</a>.</p>
    InvalidLambdaFunctionException(crate::types::error::InvalidLambdaFunctionException),
    /// <p>Indicates that the provided policy is invalid. Check the error stack for more information about what caused the error.</p>
    InvalidPolicyException(crate::types::error::InvalidPolicyException),
    /// <p>Indicates that one or more of the replacement values you provided is invalid. This error may occur when the TemplateData object contains invalid JSON.</p>
    InvalidRenderingParameterException(crate::types::error::InvalidRenderingParameterException),
    /// <p>Indicates that the provided Amazon S3 bucket or AWS KMS encryption key is invalid, or that Amazon SES could not publish to the bucket, possibly due to permissions issues. For information about giving permissions, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES Developer Guide</a>.</p>
    InvalidS3ConfigurationException(crate::types::error::InvalidS3ConfigurationException),
    /// <p>Indicates that the Amazon Simple Notification Service (Amazon SNS) destination is invalid. See the error message for details.</p>
    InvalidSnsDestinationException(crate::types::error::InvalidSnsDestinationException),
    /// <p>Indicates that the provided Amazon SNS topic is invalid, or that Amazon SES could not publish to the topic, possibly due to permissions issues. For information about giving permissions, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html">Amazon SES Developer Guide</a>.</p>
    InvalidSnsTopicException(crate::types::error::InvalidSnsTopicException),
    /// <p>Indicates that the template that you specified could not be rendered. This issue may occur when a template refers to a partial that does not exist.</p>
    InvalidTemplateException(crate::types::error::InvalidTemplateException),
    /// <p>Indicates that the custom domain to be used for open and click tracking redirects is invalid. This error appears most often in the following situations:</p>
    /// <ul>
    /// <li> <p>When the tracking domain you specified is not verified in Amazon SES.</p> </li>
    /// <li> <p>When the tracking domain you specified is not a valid domain or subdomain.</p> </li>
    /// </ul>
    InvalidTrackingOptionsException(crate::types::error::InvalidTrackingOptionsException),
    /// <p>Indicates that a resource could not be created because of service limits. For a list of Amazon SES limits, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/limits.html">Amazon SES Developer Guide</a>.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p> Indicates that the message could not be sent because Amazon SES could not read the MX record required to use the specified MAIL FROM domain. For information about editing the custom MAIL FROM domain settings for an identity, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mail-from-edit.html">Amazon SES Developer Guide</a>.</p>
    MailFromDomainNotVerifiedException(crate::types::error::MailFromDomainNotVerifiedException),
    /// <p>Indicates that the action failed, and the message could not be sent. Check the error stack for more information about what caused the error.</p>
    MessageRejected(crate::types::error::MessageRejected),
    /// <p>Indicates that one or more of the replacement values for the specified template was not specified. Ensure that the TemplateData object contains references to all of the replacement tags in the specified template.</p>
    MissingRenderingAttributeException(crate::types::error::MissingRenderingAttributeException),
    /// <p>Indicates that the account has not been granted production access.</p>
    ProductionAccessNotGrantedException(crate::types::error::ProductionAccessNotGrantedException),
    /// <p>Indicates that the provided receipt rule does not exist.</p>
    RuleDoesNotExistException(crate::types::error::RuleDoesNotExistException),
    /// <p>Indicates that the provided receipt rule set does not exist.</p>
    RuleSetDoesNotExistException(crate::types::error::RuleSetDoesNotExistException),
    /// <p>Indicates that the Template object you specified does not exist in your Amazon SES account.</p>
    TemplateDoesNotExistException(crate::types::error::TemplateDoesNotExistException),
    /// <p>Indicates that the configuration set you specified already contains a TrackingOptions object.</p>
    TrackingOptionsAlreadyExistsException(
        crate::types::error::TrackingOptionsAlreadyExistsException,
    ),
    /// <p>Indicates that the TrackingOptions object you specified does not exist.</p>
    TrackingOptionsDoesNotExistException(crate::types::error::TrackingOptionsDoesNotExistException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccountSendingPausedException(inner) => inner.fmt(f),
            Error::AlreadyExistsException(inner) => inner.fmt(f),
            Error::CannotDeleteException(inner) => inner.fmt(f),
            Error::ConfigurationSetAlreadyExistsException(inner) => inner.fmt(f),
            Error::ConfigurationSetDoesNotExistException(inner) => inner.fmt(f),
            Error::ConfigurationSetSendingPausedException(inner) => inner.fmt(f),
            Error::CustomVerificationEmailInvalidContentException(inner) => inner.fmt(f),
            Error::CustomVerificationEmailTemplateAlreadyExistsException(inner) => inner.fmt(f),
            Error::CustomVerificationEmailTemplateDoesNotExistException(inner) => inner.fmt(f),
            Error::EventDestinationAlreadyExistsException(inner) => inner.fmt(f),
            Error::EventDestinationDoesNotExistException(inner) => inner.fmt(f),
            Error::FromEmailAddressNotVerifiedException(inner) => inner.fmt(f),
            Error::InvalidCloudWatchDestinationException(inner) => inner.fmt(f),
            Error::InvalidConfigurationSetException(inner) => inner.fmt(f),
            Error::InvalidDeliveryOptionsException(inner) => inner.fmt(f),
            Error::InvalidFirehoseDestinationException(inner) => inner.fmt(f),
            Error::InvalidLambdaFunctionException(inner) => inner.fmt(f),
            Error::InvalidPolicyException(inner) => inner.fmt(f),
            Error::InvalidRenderingParameterException(inner) => inner.fmt(f),
            Error::InvalidS3ConfigurationException(inner) => inner.fmt(f),
            Error::InvalidSnsDestinationException(inner) => inner.fmt(f),
            Error::InvalidSnsTopicException(inner) => inner.fmt(f),
            Error::InvalidTemplateException(inner) => inner.fmt(f),
            Error::InvalidTrackingOptionsException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::MailFromDomainNotVerifiedException(inner) => inner.fmt(f),
            Error::MessageRejected(inner) => inner.fmt(f),
            Error::MissingRenderingAttributeException(inner) => inner.fmt(f),
            Error::ProductionAccessNotGrantedException(inner) => inner.fmt(f),
            Error::RuleDoesNotExistException(inner) => inner.fmt(f),
            Error::RuleSetDoesNotExistException(inner) => inner.fmt(f),
            Error::TemplateDoesNotExistException(inner) => inner.fmt(f),
            Error::TrackingOptionsAlreadyExistsException(inner) => inner.fmt(f),
            Error::TrackingOptionsDoesNotExistException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::clone_receipt_rule_set::CloneReceiptRuleSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::clone_receipt_rule_set::CloneReceiptRuleSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::clone_receipt_rule_set::CloneReceiptRuleSetError> for Error {
    fn from(err: crate::operation::clone_receipt_rule_set::CloneReceiptRuleSetError) -> Self {
        match err {
            crate::operation::clone_receipt_rule_set::CloneReceiptRuleSetError::AlreadyExistsException(inner) => Error::AlreadyExistsException(inner),
            crate::operation::clone_receipt_rule_set::CloneReceiptRuleSetError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::clone_receipt_rule_set::CloneReceiptRuleSetError::RuleSetDoesNotExistException(inner) => Error::RuleSetDoesNotExistException(inner),
            crate::operation::clone_receipt_rule_set::CloneReceiptRuleSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_configuration_set::CreateConfigurationSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_configuration_set::CreateConfigurationSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_configuration_set::CreateConfigurationSetError> for Error {
    fn from(err: crate::operation::create_configuration_set::CreateConfigurationSetError) -> Self {
        match err {
            crate::operation::create_configuration_set::CreateConfigurationSetError::ConfigurationSetAlreadyExistsException(inner) => Error::ConfigurationSetAlreadyExistsException(inner),
            crate::operation::create_configuration_set::CreateConfigurationSetError::InvalidConfigurationSetException(inner) => Error::InvalidConfigurationSetException(inner),
            crate::operation::create_configuration_set::CreateConfigurationSetError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_configuration_set::CreateConfigurationSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationError> for Error {
    fn from(err: crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationError) -> Self {
        match err {
            crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationError::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
            crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationError::EventDestinationAlreadyExistsException(inner) => Error::EventDestinationAlreadyExistsException(inner),
            crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationError::InvalidCloudWatchDestinationException(inner) => Error::InvalidCloudWatchDestinationException(inner),
            crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationError::InvalidFirehoseDestinationException(inner) => Error::InvalidFirehoseDestinationException(inner),
            crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationError::InvalidSnsDestinationException(inner) => Error::InvalidSnsDestinationException(inner),
            crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_configuration_set_event_destination::CreateConfigurationSetEventDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_configuration_set_tracking_options::CreateConfigurationSetTrackingOptionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_configuration_set_tracking_options::CreateConfigurationSetTrackingOptionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_configuration_set_tracking_options::CreateConfigurationSetTrackingOptionsError> for Error {
    fn from(err: crate::operation::create_configuration_set_tracking_options::CreateConfigurationSetTrackingOptionsError) -> Self {
        match err {
            crate::operation::create_configuration_set_tracking_options::CreateConfigurationSetTrackingOptionsError::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
            crate::operation::create_configuration_set_tracking_options::CreateConfigurationSetTrackingOptionsError::InvalidTrackingOptionsException(inner) => Error::InvalidTrackingOptionsException(inner),
            crate::operation::create_configuration_set_tracking_options::CreateConfigurationSetTrackingOptionsError::TrackingOptionsAlreadyExistsException(inner) => Error::TrackingOptionsAlreadyExistsException(inner),
            crate::operation::create_configuration_set_tracking_options::CreateConfigurationSetTrackingOptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_custom_verification_email_template::CreateCustomVerificationEmailTemplateError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_custom_verification_email_template::CreateCustomVerificationEmailTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_custom_verification_email_template::CreateCustomVerificationEmailTemplateError> for Error {
    fn from(err: crate::operation::create_custom_verification_email_template::CreateCustomVerificationEmailTemplateError) -> Self {
        match err {
            crate::operation::create_custom_verification_email_template::CreateCustomVerificationEmailTemplateError::CustomVerificationEmailInvalidContentException(inner) => Error::CustomVerificationEmailInvalidContentException(inner),
            crate::operation::create_custom_verification_email_template::CreateCustomVerificationEmailTemplateError::CustomVerificationEmailTemplateAlreadyExistsException(inner) => Error::CustomVerificationEmailTemplateAlreadyExistsException(inner),
            crate::operation::create_custom_verification_email_template::CreateCustomVerificationEmailTemplateError::FromEmailAddressNotVerifiedException(inner) => Error::FromEmailAddressNotVerifiedException(inner),
            crate::operation::create_custom_verification_email_template::CreateCustomVerificationEmailTemplateError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_custom_verification_email_template::CreateCustomVerificationEmailTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_receipt_filter::CreateReceiptFilterError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_receipt_filter::CreateReceiptFilterError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_receipt_filter::CreateReceiptFilterError> for Error {
    fn from(err: crate::operation::create_receipt_filter::CreateReceiptFilterError) -> Self {
        match err {
            crate::operation::create_receipt_filter::CreateReceiptFilterError::AlreadyExistsException(inner) => Error::AlreadyExistsException(inner),
            crate::operation::create_receipt_filter::CreateReceiptFilterError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_receipt_filter::CreateReceiptFilterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_receipt_rule::CreateReceiptRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_receipt_rule::CreateReceiptRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_receipt_rule::CreateReceiptRuleError> for Error {
    fn from(err: crate::operation::create_receipt_rule::CreateReceiptRuleError) -> Self {
        match err {
            crate::operation::create_receipt_rule::CreateReceiptRuleError::AlreadyExistsException(inner) => Error::AlreadyExistsException(inner),
            crate::operation::create_receipt_rule::CreateReceiptRuleError::InvalidLambdaFunctionException(inner) => Error::InvalidLambdaFunctionException(inner),
            crate::operation::create_receipt_rule::CreateReceiptRuleError::InvalidS3ConfigurationException(inner) => Error::InvalidS3ConfigurationException(inner),
            crate::operation::create_receipt_rule::CreateReceiptRuleError::InvalidSnsTopicException(inner) => Error::InvalidSnsTopicException(inner),
            crate::operation::create_receipt_rule::CreateReceiptRuleError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_receipt_rule::CreateReceiptRuleError::RuleDoesNotExistException(inner) => Error::RuleDoesNotExistException(inner),
            crate::operation::create_receipt_rule::CreateReceiptRuleError::RuleSetDoesNotExistException(inner) => Error::RuleSetDoesNotExistException(inner),
            crate::operation::create_receipt_rule::CreateReceiptRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_receipt_rule_set::CreateReceiptRuleSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_receipt_rule_set::CreateReceiptRuleSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_receipt_rule_set::CreateReceiptRuleSetError> for Error {
    fn from(err: crate::operation::create_receipt_rule_set::CreateReceiptRuleSetError) -> Self {
        match err {
            crate::operation::create_receipt_rule_set::CreateReceiptRuleSetError::AlreadyExistsException(inner) => Error::AlreadyExistsException(inner),
            crate::operation::create_receipt_rule_set::CreateReceiptRuleSetError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_receipt_rule_set::CreateReceiptRuleSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_template::CreateTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_template::CreateTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_template::CreateTemplateError> for Error {
    fn from(err: crate::operation::create_template::CreateTemplateError) -> Self {
        match err {
            crate::operation::create_template::CreateTemplateError::AlreadyExistsException(
                inner,
            ) => Error::AlreadyExistsException(inner),
            crate::operation::create_template::CreateTemplateError::InvalidTemplateException(
                inner,
            ) => Error::InvalidTemplateException(inner),
            crate::operation::create_template::CreateTemplateError::LimitExceededException(
                inner,
            ) => Error::LimitExceededException(inner),
            crate::operation::create_template::CreateTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_configuration_set::DeleteConfigurationSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_configuration_set::DeleteConfigurationSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_configuration_set::DeleteConfigurationSetError> for Error {
    fn from(err: crate::operation::delete_configuration_set::DeleteConfigurationSetError) -> Self {
        match err {
            crate::operation::delete_configuration_set::DeleteConfigurationSetError::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
            crate::operation::delete_configuration_set::DeleteConfigurationSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_configuration_set_event_destination::DeleteConfigurationSetEventDestinationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_configuration_set_event_destination::DeleteConfigurationSetEventDestinationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_configuration_set_event_destination::DeleteConfigurationSetEventDestinationError> for Error {
    fn from(err: crate::operation::delete_configuration_set_event_destination::DeleteConfigurationSetEventDestinationError) -> Self {
        match err {
            crate::operation::delete_configuration_set_event_destination::DeleteConfigurationSetEventDestinationError::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
            crate::operation::delete_configuration_set_event_destination::DeleteConfigurationSetEventDestinationError::EventDestinationDoesNotExistException(inner) => Error::EventDestinationDoesNotExistException(inner),
            crate::operation::delete_configuration_set_event_destination::DeleteConfigurationSetEventDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_configuration_set_tracking_options::DeleteConfigurationSetTrackingOptionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_configuration_set_tracking_options::DeleteConfigurationSetTrackingOptionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_configuration_set_tracking_options::DeleteConfigurationSetTrackingOptionsError> for Error {
    fn from(err: crate::operation::delete_configuration_set_tracking_options::DeleteConfigurationSetTrackingOptionsError) -> Self {
        match err {
            crate::operation::delete_configuration_set_tracking_options::DeleteConfigurationSetTrackingOptionsError::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
            crate::operation::delete_configuration_set_tracking_options::DeleteConfigurationSetTrackingOptionsError::TrackingOptionsDoesNotExistException(inner) => Error::TrackingOptionsDoesNotExistException(inner),
            crate::operation::delete_configuration_set_tracking_options::DeleteConfigurationSetTrackingOptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_custom_verification_email_template::DeleteCustomVerificationEmailTemplateError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_custom_verification_email_template::DeleteCustomVerificationEmailTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_custom_verification_email_template::DeleteCustomVerificationEmailTemplateError> for Error {
    fn from(err: crate::operation::delete_custom_verification_email_template::DeleteCustomVerificationEmailTemplateError) -> Self {
        match err {
            crate::operation::delete_custom_verification_email_template::DeleteCustomVerificationEmailTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_identity::DeleteIdentityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_identity::DeleteIdentityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_identity::DeleteIdentityError> for Error {
    fn from(err: crate::operation::delete_identity::DeleteIdentityError) -> Self {
        match err {
            crate::operation::delete_identity::DeleteIdentityError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_identity_policy::DeleteIdentityPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_identity_policy::DeleteIdentityPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_identity_policy::DeleteIdentityPolicyError> for Error {
    fn from(err: crate::operation::delete_identity_policy::DeleteIdentityPolicyError) -> Self {
        match err {
            crate::operation::delete_identity_policy::DeleteIdentityPolicyError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_receipt_filter::DeleteReceiptFilterError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_receipt_filter::DeleteReceiptFilterError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_receipt_filter::DeleteReceiptFilterError> for Error {
    fn from(err: crate::operation::delete_receipt_filter::DeleteReceiptFilterError) -> Self {
        match err {
            crate::operation::delete_receipt_filter::DeleteReceiptFilterError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_receipt_rule::DeleteReceiptRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_receipt_rule::DeleteReceiptRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_receipt_rule::DeleteReceiptRuleError> for Error {
    fn from(err: crate::operation::delete_receipt_rule::DeleteReceiptRuleError) -> Self {
        match err {
            crate::operation::delete_receipt_rule::DeleteReceiptRuleError::RuleSetDoesNotExistException(inner) => Error::RuleSetDoesNotExistException(inner),
            crate::operation::delete_receipt_rule::DeleteReceiptRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_receipt_rule_set::DeleteReceiptRuleSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_receipt_rule_set::DeleteReceiptRuleSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_receipt_rule_set::DeleteReceiptRuleSetError> for Error {
    fn from(err: crate::operation::delete_receipt_rule_set::DeleteReceiptRuleSetError) -> Self {
        match err {
            crate::operation::delete_receipt_rule_set::DeleteReceiptRuleSetError::CannotDeleteException(inner) => Error::CannotDeleteException(inner),
            crate::operation::delete_receipt_rule_set::DeleteReceiptRuleSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_template::DeleteTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_template::DeleteTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_template::DeleteTemplateError> for Error {
    fn from(err: crate::operation::delete_template::DeleteTemplateError) -> Self {
        match err {
            crate::operation::delete_template::DeleteTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_verified_email_address::DeleteVerifiedEmailAddressError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_verified_email_address::DeleteVerifiedEmailAddressError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_verified_email_address::DeleteVerifiedEmailAddressError>
    for Error
{
    fn from(
        err: crate::operation::delete_verified_email_address::DeleteVerifiedEmailAddressError,
    ) -> Self {
        match err {
            crate::operation::delete_verified_email_address::DeleteVerifiedEmailAddressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_active_receipt_rule_set::DescribeActiveReceiptRuleSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_active_receipt_rule_set::DescribeActiveReceiptRuleSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_active_receipt_rule_set::DescribeActiveReceiptRuleSetError>
    for Error
{
    fn from(
        err: crate::operation::describe_active_receipt_rule_set::DescribeActiveReceiptRuleSetError,
    ) -> Self {
        match err {
            crate::operation::describe_active_receipt_rule_set::DescribeActiveReceiptRuleSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_configuration_set::DescribeConfigurationSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_configuration_set::DescribeConfigurationSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_configuration_set::DescribeConfigurationSetError> for Error {
    fn from(
        err: crate::operation::describe_configuration_set::DescribeConfigurationSetError,
    ) -> Self {
        match err {
            crate::operation::describe_configuration_set::DescribeConfigurationSetError::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
            crate::operation::describe_configuration_set::DescribeConfigurationSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_receipt_rule::DescribeReceiptRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_receipt_rule::DescribeReceiptRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_receipt_rule::DescribeReceiptRuleError> for Error {
    fn from(err: crate::operation::describe_receipt_rule::DescribeReceiptRuleError) -> Self {
        match err {
            crate::operation::describe_receipt_rule::DescribeReceiptRuleError::RuleDoesNotExistException(inner) => Error::RuleDoesNotExistException(inner),
            crate::operation::describe_receipt_rule::DescribeReceiptRuleError::RuleSetDoesNotExistException(inner) => Error::RuleSetDoesNotExistException(inner),
            crate::operation::describe_receipt_rule::DescribeReceiptRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_receipt_rule_set::DescribeReceiptRuleSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_receipt_rule_set::DescribeReceiptRuleSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_receipt_rule_set::DescribeReceiptRuleSetError> for Error {
    fn from(err: crate::operation::describe_receipt_rule_set::DescribeReceiptRuleSetError) -> Self {
        match err {
            crate::operation::describe_receipt_rule_set::DescribeReceiptRuleSetError::RuleSetDoesNotExistException(inner) => Error::RuleSetDoesNotExistException(inner),
            crate::operation::describe_receipt_rule_set::DescribeReceiptRuleSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_account_sending_enabled::GetAccountSendingEnabledError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_account_sending_enabled::GetAccountSendingEnabledError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_account_sending_enabled::GetAccountSendingEnabledError> for Error {
    fn from(
        err: crate::operation::get_account_sending_enabled::GetAccountSendingEnabledError,
    ) -> Self {
        match err {
            crate::operation::get_account_sending_enabled::GetAccountSendingEnabledError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_custom_verification_email_template::GetCustomVerificationEmailTemplateError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_custom_verification_email_template::GetCustomVerificationEmailTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_custom_verification_email_template::GetCustomVerificationEmailTemplateError> for Error {
    fn from(err: crate::operation::get_custom_verification_email_template::GetCustomVerificationEmailTemplateError) -> Self {
        match err {
            crate::operation::get_custom_verification_email_template::GetCustomVerificationEmailTemplateError::CustomVerificationEmailTemplateDoesNotExistException(inner) => Error::CustomVerificationEmailTemplateDoesNotExistException(inner),
            crate::operation::get_custom_verification_email_template::GetCustomVerificationEmailTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_identity_dkim_attributes::GetIdentityDkimAttributesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_identity_dkim_attributes::GetIdentityDkimAttributesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_identity_dkim_attributes::GetIdentityDkimAttributesError>
    for Error
{
    fn from(
        err: crate::operation::get_identity_dkim_attributes::GetIdentityDkimAttributesError,
    ) -> Self {
        match err {
            crate::operation::get_identity_dkim_attributes::GetIdentityDkimAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_identity_mail_from_domain_attributes::GetIdentityMailFromDomainAttributesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_identity_mail_from_domain_attributes::GetIdentityMailFromDomainAttributesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_identity_mail_from_domain_attributes::GetIdentityMailFromDomainAttributesError> for Error {
    fn from(err: crate::operation::get_identity_mail_from_domain_attributes::GetIdentityMailFromDomainAttributesError) -> Self {
        match err {
            crate::operation::get_identity_mail_from_domain_attributes::GetIdentityMailFromDomainAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_identity_notification_attributes::GetIdentityNotificationAttributesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_identity_notification_attributes::GetIdentityNotificationAttributesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_identity_notification_attributes::GetIdentityNotificationAttributesError> for Error {
    fn from(err: crate::operation::get_identity_notification_attributes::GetIdentityNotificationAttributesError) -> Self {
        match err {
            crate::operation::get_identity_notification_attributes::GetIdentityNotificationAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_identity_policies::GetIdentityPoliciesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_identity_policies::GetIdentityPoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_identity_policies::GetIdentityPoliciesError> for Error {
    fn from(err: crate::operation::get_identity_policies::GetIdentityPoliciesError) -> Self {
        match err {
            crate::operation::get_identity_policies::GetIdentityPoliciesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_identity_verification_attributes::GetIdentityVerificationAttributesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_identity_verification_attributes::GetIdentityVerificationAttributesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_identity_verification_attributes::GetIdentityVerificationAttributesError> for Error {
    fn from(err: crate::operation::get_identity_verification_attributes::GetIdentityVerificationAttributesError) -> Self {
        match err {
            crate::operation::get_identity_verification_attributes::GetIdentityVerificationAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_send_quota::GetSendQuotaError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_send_quota::GetSendQuotaError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_send_quota::GetSendQuotaError> for Error {
    fn from(err: crate::operation::get_send_quota::GetSendQuotaError) -> Self {
        match err {
            crate::operation::get_send_quota::GetSendQuotaError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_send_statistics::GetSendStatisticsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_send_statistics::GetSendStatisticsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_send_statistics::GetSendStatisticsError> for Error {
    fn from(err: crate::operation::get_send_statistics::GetSendStatisticsError) -> Self {
        match err {
            crate::operation::get_send_statistics::GetSendStatisticsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_template::GetTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_template::GetTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_template::GetTemplateError> for Error {
    fn from(err: crate::operation::get_template::GetTemplateError) -> Self {
        match err {
            crate::operation::get_template::GetTemplateError::TemplateDoesNotExistException(
                inner,
            ) => Error::TemplateDoesNotExistException(inner),
            crate::operation::get_template::GetTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_configuration_sets::ListConfigurationSetsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_configuration_sets::ListConfigurationSetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_configuration_sets::ListConfigurationSetsError> for Error {
    fn from(err: crate::operation::list_configuration_sets::ListConfigurationSetsError) -> Self {
        match err {
            crate::operation::list_configuration_sets::ListConfigurationSetsError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_custom_verification_email_templates::ListCustomVerificationEmailTemplatesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_custom_verification_email_templates::ListCustomVerificationEmailTemplatesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_custom_verification_email_templates::ListCustomVerificationEmailTemplatesError> for Error {
    fn from(err: crate::operation::list_custom_verification_email_templates::ListCustomVerificationEmailTemplatesError) -> Self {
        match err {
            crate::operation::list_custom_verification_email_templates::ListCustomVerificationEmailTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_identities::ListIdentitiesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_identities::ListIdentitiesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_identities::ListIdentitiesError> for Error {
    fn from(err: crate::operation::list_identities::ListIdentitiesError) -> Self {
        match err {
            crate::operation::list_identities::ListIdentitiesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_identity_policies::ListIdentityPoliciesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_identity_policies::ListIdentityPoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_identity_policies::ListIdentityPoliciesError> for Error {
    fn from(err: crate::operation::list_identity_policies::ListIdentityPoliciesError) -> Self {
        match err {
            crate::operation::list_identity_policies::ListIdentityPoliciesError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_receipt_filters::ListReceiptFiltersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_receipt_filters::ListReceiptFiltersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_receipt_filters::ListReceiptFiltersError> for Error {
    fn from(err: crate::operation::list_receipt_filters::ListReceiptFiltersError) -> Self {
        match err {
            crate::operation::list_receipt_filters::ListReceiptFiltersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_receipt_rule_sets::ListReceiptRuleSetsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_receipt_rule_sets::ListReceiptRuleSetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_receipt_rule_sets::ListReceiptRuleSetsError> for Error {
    fn from(err: crate::operation::list_receipt_rule_sets::ListReceiptRuleSetsError) -> Self {
        match err {
            crate::operation::list_receipt_rule_sets::ListReceiptRuleSetsError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_templates::ListTemplatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_templates::ListTemplatesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_templates::ListTemplatesError> for Error {
    fn from(err: crate::operation::list_templates::ListTemplatesError) -> Self {
        match err {
            crate::operation::list_templates::ListTemplatesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_verified_email_addresses::ListVerifiedEmailAddressesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_verified_email_addresses::ListVerifiedEmailAddressesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_verified_email_addresses::ListVerifiedEmailAddressesError>
    for Error
{
    fn from(
        err: crate::operation::list_verified_email_addresses::ListVerifiedEmailAddressesError,
    ) -> Self {
        match err {
            crate::operation::list_verified_email_addresses::ListVerifiedEmailAddressesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::put_configuration_set_delivery_options::PutConfigurationSetDeliveryOptionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::put_configuration_set_delivery_options::PutConfigurationSetDeliveryOptionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::put_configuration_set_delivery_options::PutConfigurationSetDeliveryOptionsError> for Error {
    fn from(err: crate::operation::put_configuration_set_delivery_options::PutConfigurationSetDeliveryOptionsError) -> Self {
        match err {
            crate::operation::put_configuration_set_delivery_options::PutConfigurationSetDeliveryOptionsError::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
            crate::operation::put_configuration_set_delivery_options::PutConfigurationSetDeliveryOptionsError::InvalidDeliveryOptionsException(inner) => Error::InvalidDeliveryOptionsException(inner),
            crate::operation::put_configuration_set_delivery_options::PutConfigurationSetDeliveryOptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_identity_policy::PutIdentityPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_identity_policy::PutIdentityPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_identity_policy::PutIdentityPolicyError> for Error {
    fn from(err: crate::operation::put_identity_policy::PutIdentityPolicyError) -> Self {
        match err {
            crate::operation::put_identity_policy::PutIdentityPolicyError::InvalidPolicyException(inner) => Error::InvalidPolicyException(inner),
            crate::operation::put_identity_policy::PutIdentityPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::reorder_receipt_rule_set::ReorderReceiptRuleSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::reorder_receipt_rule_set::ReorderReceiptRuleSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::reorder_receipt_rule_set::ReorderReceiptRuleSetError> for Error {
    fn from(err: crate::operation::reorder_receipt_rule_set::ReorderReceiptRuleSetError) -> Self {
        match err {
            crate::operation::reorder_receipt_rule_set::ReorderReceiptRuleSetError::RuleDoesNotExistException(inner) => Error::RuleDoesNotExistException(inner),
            crate::operation::reorder_receipt_rule_set::ReorderReceiptRuleSetError::RuleSetDoesNotExistException(inner) => Error::RuleSetDoesNotExistException(inner),
            crate::operation::reorder_receipt_rule_set::ReorderReceiptRuleSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::send_bounce::SendBounceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::send_bounce::SendBounceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_bounce::SendBounceError> for Error {
    fn from(err: crate::operation::send_bounce::SendBounceError) -> Self {
        match err {
            crate::operation::send_bounce::SendBounceError::MessageRejected(inner) => {
                Error::MessageRejected(inner)
            }
            crate::operation::send_bounce::SendBounceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::send_bulk_templated_email::SendBulkTemplatedEmailError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::send_bulk_templated_email::SendBulkTemplatedEmailError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_bulk_templated_email::SendBulkTemplatedEmailError> for Error {
    fn from(err: crate::operation::send_bulk_templated_email::SendBulkTemplatedEmailError) -> Self {
        match err {
            crate::operation::send_bulk_templated_email::SendBulkTemplatedEmailError::AccountSendingPausedException(inner) => Error::AccountSendingPausedException(inner),
            crate::operation::send_bulk_templated_email::SendBulkTemplatedEmailError::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
            crate::operation::send_bulk_templated_email::SendBulkTemplatedEmailError::ConfigurationSetSendingPausedException(inner) => Error::ConfigurationSetSendingPausedException(inner),
            crate::operation::send_bulk_templated_email::SendBulkTemplatedEmailError::MailFromDomainNotVerifiedException(inner) => Error::MailFromDomainNotVerifiedException(inner),
            crate::operation::send_bulk_templated_email::SendBulkTemplatedEmailError::MessageRejected(inner) => Error::MessageRejected(inner),
            crate::operation::send_bulk_templated_email::SendBulkTemplatedEmailError::TemplateDoesNotExistException(inner) => Error::TemplateDoesNotExistException(inner),
            crate::operation::send_bulk_templated_email::SendBulkTemplatedEmailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::send_custom_verification_email::SendCustomVerificationEmailError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::send_custom_verification_email::SendCustomVerificationEmailError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_custom_verification_email::SendCustomVerificationEmailError>
    for Error
{
    fn from(
        err: crate::operation::send_custom_verification_email::SendCustomVerificationEmailError,
    ) -> Self {
        match err {
            crate::operation::send_custom_verification_email::SendCustomVerificationEmailError::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
            crate::operation::send_custom_verification_email::SendCustomVerificationEmailError::CustomVerificationEmailTemplateDoesNotExistException(inner) => Error::CustomVerificationEmailTemplateDoesNotExistException(inner),
            crate::operation::send_custom_verification_email::SendCustomVerificationEmailError::FromEmailAddressNotVerifiedException(inner) => Error::FromEmailAddressNotVerifiedException(inner),
            crate::operation::send_custom_verification_email::SendCustomVerificationEmailError::MessageRejected(inner) => Error::MessageRejected(inner),
            crate::operation::send_custom_verification_email::SendCustomVerificationEmailError::ProductionAccessNotGrantedException(inner) => Error::ProductionAccessNotGrantedException(inner),
            crate::operation::send_custom_verification_email::SendCustomVerificationEmailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::send_email::SendEmailError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::send_email::SendEmailError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_email::SendEmailError> for Error {
    fn from(err: crate::operation::send_email::SendEmailError) -> Self {
        match err {
            crate::operation::send_email::SendEmailError::AccountSendingPausedException(inner) => Error::AccountSendingPausedException(inner),
            crate::operation::send_email::SendEmailError::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
            crate::operation::send_email::SendEmailError::ConfigurationSetSendingPausedException(inner) => Error::ConfigurationSetSendingPausedException(inner),
            crate::operation::send_email::SendEmailError::MailFromDomainNotVerifiedException(inner) => Error::MailFromDomainNotVerifiedException(inner),
            crate::operation::send_email::SendEmailError::MessageRejected(inner) => Error::MessageRejected(inner),
            crate::operation::send_email::SendEmailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::send_raw_email::SendRawEmailError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::send_raw_email::SendRawEmailError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_raw_email::SendRawEmailError> for Error {
    fn from(err: crate::operation::send_raw_email::SendRawEmailError) -> Self {
        match err {
            crate::operation::send_raw_email::SendRawEmailError::AccountSendingPausedException(inner) => Error::AccountSendingPausedException(inner),
            crate::operation::send_raw_email::SendRawEmailError::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
            crate::operation::send_raw_email::SendRawEmailError::ConfigurationSetSendingPausedException(inner) => Error::ConfigurationSetSendingPausedException(inner),
            crate::operation::send_raw_email::SendRawEmailError::MailFromDomainNotVerifiedException(inner) => Error::MailFromDomainNotVerifiedException(inner),
            crate::operation::send_raw_email::SendRawEmailError::MessageRejected(inner) => Error::MessageRejected(inner),
            crate::operation::send_raw_email::SendRawEmailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::send_templated_email::SendTemplatedEmailError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::send_templated_email::SendTemplatedEmailError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_templated_email::SendTemplatedEmailError> for Error {
    fn from(err: crate::operation::send_templated_email::SendTemplatedEmailError) -> Self {
        match err {
            crate::operation::send_templated_email::SendTemplatedEmailError::AccountSendingPausedException(inner) => Error::AccountSendingPausedException(inner),
            crate::operation::send_templated_email::SendTemplatedEmailError::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
            crate::operation::send_templated_email::SendTemplatedEmailError::ConfigurationSetSendingPausedException(inner) => Error::ConfigurationSetSendingPausedException(inner),
            crate::operation::send_templated_email::SendTemplatedEmailError::MailFromDomainNotVerifiedException(inner) => Error::MailFromDomainNotVerifiedException(inner),
            crate::operation::send_templated_email::SendTemplatedEmailError::MessageRejected(inner) => Error::MessageRejected(inner),
            crate::operation::send_templated_email::SendTemplatedEmailError::TemplateDoesNotExistException(inner) => Error::TemplateDoesNotExistException(inner),
            crate::operation::send_templated_email::SendTemplatedEmailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_active_receipt_rule_set::SetActiveReceiptRuleSetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_active_receipt_rule_set::SetActiveReceiptRuleSetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_active_receipt_rule_set::SetActiveReceiptRuleSetError> for Error {
    fn from(
        err: crate::operation::set_active_receipt_rule_set::SetActiveReceiptRuleSetError,
    ) -> Self {
        match err {
            crate::operation::set_active_receipt_rule_set::SetActiveReceiptRuleSetError::RuleSetDoesNotExistException(inner) => Error::RuleSetDoesNotExistException(inner),
            crate::operation::set_active_receipt_rule_set::SetActiveReceiptRuleSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_identity_dkim_enabled::SetIdentityDkimEnabledError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_identity_dkim_enabled::SetIdentityDkimEnabledError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_identity_dkim_enabled::SetIdentityDkimEnabledError> for Error {
    fn from(err: crate::operation::set_identity_dkim_enabled::SetIdentityDkimEnabledError) -> Self {
        match err {
            crate::operation::set_identity_dkim_enabled::SetIdentityDkimEnabledError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::set_identity_feedback_forwarding_enabled::SetIdentityFeedbackForwardingEnabledError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::set_identity_feedback_forwarding_enabled::SetIdentityFeedbackForwardingEnabledError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::set_identity_feedback_forwarding_enabled::SetIdentityFeedbackForwardingEnabledError> for Error {
    fn from(err: crate::operation::set_identity_feedback_forwarding_enabled::SetIdentityFeedbackForwardingEnabledError) -> Self {
        match err {
            crate::operation::set_identity_feedback_forwarding_enabled::SetIdentityFeedbackForwardingEnabledError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::set_identity_headers_in_notifications_enabled::SetIdentityHeadersInNotificationsEnabledError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::set_identity_headers_in_notifications_enabled::SetIdentityHeadersInNotificationsEnabledError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::set_identity_headers_in_notifications_enabled::SetIdentityHeadersInNotificationsEnabledError> for Error {
    fn from(err: crate::operation::set_identity_headers_in_notifications_enabled::SetIdentityHeadersInNotificationsEnabledError) -> Self {
        match err {
            crate::operation::set_identity_headers_in_notifications_enabled::SetIdentityHeadersInNotificationsEnabledError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_identity_mail_from_domain::SetIdentityMailFromDomainError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_identity_mail_from_domain::SetIdentityMailFromDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_identity_mail_from_domain::SetIdentityMailFromDomainError>
    for Error
{
    fn from(
        err: crate::operation::set_identity_mail_from_domain::SetIdentityMailFromDomainError,
    ) -> Self {
        match err {
            crate::operation::set_identity_mail_from_domain::SetIdentityMailFromDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_identity_notification_topic::SetIdentityNotificationTopicError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_identity_notification_topic::SetIdentityNotificationTopicError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_identity_notification_topic::SetIdentityNotificationTopicError>
    for Error
{
    fn from(
        err: crate::operation::set_identity_notification_topic::SetIdentityNotificationTopicError,
    ) -> Self {
        match err {
            crate::operation::set_identity_notification_topic::SetIdentityNotificationTopicError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::set_receipt_rule_position::SetReceiptRulePositionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::set_receipt_rule_position::SetReceiptRulePositionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::set_receipt_rule_position::SetReceiptRulePositionError> for Error {
    fn from(err: crate::operation::set_receipt_rule_position::SetReceiptRulePositionError) -> Self {
        match err {
            crate::operation::set_receipt_rule_position::SetReceiptRulePositionError::RuleDoesNotExistException(inner) => Error::RuleDoesNotExistException(inner),
            crate::operation::set_receipt_rule_position::SetReceiptRulePositionError::RuleSetDoesNotExistException(inner) => Error::RuleSetDoesNotExistException(inner),
            crate::operation::set_receipt_rule_position::SetReceiptRulePositionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::test_render_template::TestRenderTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::test_render_template::TestRenderTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::test_render_template::TestRenderTemplateError> for Error {
    fn from(err: crate::operation::test_render_template::TestRenderTemplateError) -> Self {
        match err {
            crate::operation::test_render_template::TestRenderTemplateError::InvalidRenderingParameterException(inner) => Error::InvalidRenderingParameterException(inner),
            crate::operation::test_render_template::TestRenderTemplateError::MissingRenderingAttributeException(inner) => Error::MissingRenderingAttributeException(inner),
            crate::operation::test_render_template::TestRenderTemplateError::TemplateDoesNotExistException(inner) => Error::TemplateDoesNotExistException(inner),
            crate::operation::test_render_template::TestRenderTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_account_sending_enabled::UpdateAccountSendingEnabledError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_account_sending_enabled::UpdateAccountSendingEnabledError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_account_sending_enabled::UpdateAccountSendingEnabledError>
    for Error
{
    fn from(
        err: crate::operation::update_account_sending_enabled::UpdateAccountSendingEnabledError,
    ) -> Self {
        match err {
            crate::operation::update_account_sending_enabled::UpdateAccountSendingEnabledError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_configuration_set_event_destination::UpdateConfigurationSetEventDestinationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_configuration_set_event_destination::UpdateConfigurationSetEventDestinationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::update_configuration_set_event_destination::UpdateConfigurationSetEventDestinationError> for Error {
    fn from(err: crate::operation::update_configuration_set_event_destination::UpdateConfigurationSetEventDestinationError) -> Self {
        match err {
            crate::operation::update_configuration_set_event_destination::UpdateConfigurationSetEventDestinationError::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
            crate::operation::update_configuration_set_event_destination::UpdateConfigurationSetEventDestinationError::EventDestinationDoesNotExistException(inner) => Error::EventDestinationDoesNotExistException(inner),
            crate::operation::update_configuration_set_event_destination::UpdateConfigurationSetEventDestinationError::InvalidCloudWatchDestinationException(inner) => Error::InvalidCloudWatchDestinationException(inner),
            crate::operation::update_configuration_set_event_destination::UpdateConfigurationSetEventDestinationError::InvalidFirehoseDestinationException(inner) => Error::InvalidFirehoseDestinationException(inner),
            crate::operation::update_configuration_set_event_destination::UpdateConfigurationSetEventDestinationError::InvalidSnsDestinationException(inner) => Error::InvalidSnsDestinationException(inner),
            crate::operation::update_configuration_set_event_destination::UpdateConfigurationSetEventDestinationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_configuration_set_reputation_metrics_enabled::UpdateConfigurationSetReputationMetricsEnabledError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_configuration_set_reputation_metrics_enabled::UpdateConfigurationSetReputationMetricsEnabledError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::update_configuration_set_reputation_metrics_enabled::UpdateConfigurationSetReputationMetricsEnabledError> for Error {
    fn from(err: crate::operation::update_configuration_set_reputation_metrics_enabled::UpdateConfigurationSetReputationMetricsEnabledError) -> Self {
        match err {
            crate::operation::update_configuration_set_reputation_metrics_enabled::UpdateConfigurationSetReputationMetricsEnabledError::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
            crate::operation::update_configuration_set_reputation_metrics_enabled::UpdateConfigurationSetReputationMetricsEnabledError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_configuration_set_sending_enabled::UpdateConfigurationSetSendingEnabledError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_configuration_set_sending_enabled::UpdateConfigurationSetSendingEnabledError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::update_configuration_set_sending_enabled::UpdateConfigurationSetSendingEnabledError> for Error {
    fn from(err: crate::operation::update_configuration_set_sending_enabled::UpdateConfigurationSetSendingEnabledError) -> Self {
        match err {
            crate::operation::update_configuration_set_sending_enabled::UpdateConfigurationSetSendingEnabledError::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
            crate::operation::update_configuration_set_sending_enabled::UpdateConfigurationSetSendingEnabledError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_configuration_set_tracking_options::UpdateConfigurationSetTrackingOptionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_configuration_set_tracking_options::UpdateConfigurationSetTrackingOptionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::update_configuration_set_tracking_options::UpdateConfigurationSetTrackingOptionsError> for Error {
    fn from(err: crate::operation::update_configuration_set_tracking_options::UpdateConfigurationSetTrackingOptionsError) -> Self {
        match err {
            crate::operation::update_configuration_set_tracking_options::UpdateConfigurationSetTrackingOptionsError::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
            crate::operation::update_configuration_set_tracking_options::UpdateConfigurationSetTrackingOptionsError::InvalidTrackingOptionsException(inner) => Error::InvalidTrackingOptionsException(inner),
            crate::operation::update_configuration_set_tracking_options::UpdateConfigurationSetTrackingOptionsError::TrackingOptionsDoesNotExistException(inner) => Error::TrackingOptionsDoesNotExistException(inner),
            crate::operation::update_configuration_set_tracking_options::UpdateConfigurationSetTrackingOptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError> for Error {
    fn from(err: crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError) -> Self {
        match err {
            crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError::CustomVerificationEmailInvalidContentException(inner) => Error::CustomVerificationEmailInvalidContentException(inner),
            crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError::CustomVerificationEmailTemplateDoesNotExistException(inner) => Error::CustomVerificationEmailTemplateDoesNotExistException(inner),
            crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError::FromEmailAddressNotVerifiedException(inner) => Error::FromEmailAddressNotVerifiedException(inner),
            crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_receipt_rule::UpdateReceiptRuleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_receipt_rule::UpdateReceiptRuleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_receipt_rule::UpdateReceiptRuleError> for Error {
    fn from(err: crate::operation::update_receipt_rule::UpdateReceiptRuleError) -> Self {
        match err {
            crate::operation::update_receipt_rule::UpdateReceiptRuleError::InvalidLambdaFunctionException(inner) => Error::InvalidLambdaFunctionException(inner),
            crate::operation::update_receipt_rule::UpdateReceiptRuleError::InvalidS3ConfigurationException(inner) => Error::InvalidS3ConfigurationException(inner),
            crate::operation::update_receipt_rule::UpdateReceiptRuleError::InvalidSnsTopicException(inner) => Error::InvalidSnsTopicException(inner),
            crate::operation::update_receipt_rule::UpdateReceiptRuleError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_receipt_rule::UpdateReceiptRuleError::RuleDoesNotExistException(inner) => Error::RuleDoesNotExistException(inner),
            crate::operation::update_receipt_rule::UpdateReceiptRuleError::RuleSetDoesNotExistException(inner) => Error::RuleSetDoesNotExistException(inner),
            crate::operation::update_receipt_rule::UpdateReceiptRuleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_template::UpdateTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_template::UpdateTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_template::UpdateTemplateError> for Error {
    fn from(err: crate::operation::update_template::UpdateTemplateError) -> Self {
        match err {
            crate::operation::update_template::UpdateTemplateError::InvalidTemplateException(inner) => Error::InvalidTemplateException(inner),
            crate::operation::update_template::UpdateTemplateError::TemplateDoesNotExistException(inner) => Error::TemplateDoesNotExistException(inner),
            crate::operation::update_template::UpdateTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::verify_domain_dkim::VerifyDomainDkimError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::verify_domain_dkim::VerifyDomainDkimError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::verify_domain_dkim::VerifyDomainDkimError> for Error {
    fn from(err: crate::operation::verify_domain_dkim::VerifyDomainDkimError) -> Self {
        match err {
            crate::operation::verify_domain_dkim::VerifyDomainDkimError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::verify_domain_identity::VerifyDomainIdentityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::verify_domain_identity::VerifyDomainIdentityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::verify_domain_identity::VerifyDomainIdentityError> for Error {
    fn from(err: crate::operation::verify_domain_identity::VerifyDomainIdentityError) -> Self {
        match err {
            crate::operation::verify_domain_identity::VerifyDomainIdentityError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::verify_email_address::VerifyEmailAddressError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::verify_email_address::VerifyEmailAddressError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::verify_email_address::VerifyEmailAddressError> for Error {
    fn from(err: crate::operation::verify_email_address::VerifyEmailAddressError) -> Self {
        match err {
            crate::operation::verify_email_address::VerifyEmailAddressError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::verify_email_identity::VerifyEmailIdentityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::verify_email_identity::VerifyEmailIdentityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::verify_email_identity::VerifyEmailIdentityError> for Error {
    fn from(err: crate::operation::verify_email_identity::VerifyEmailIdentityError) -> Self {
        match err {
            crate::operation::verify_email_identity::VerifyEmailIdentityError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccountSendingPausedException(e) => e.request_id(),
            Self::AlreadyExistsException(e) => e.request_id(),
            Self::CannotDeleteException(e) => e.request_id(),
            Self::ConfigurationSetAlreadyExistsException(e) => e.request_id(),
            Self::ConfigurationSetDoesNotExistException(e) => e.request_id(),
            Self::ConfigurationSetSendingPausedException(e) => e.request_id(),
            Self::CustomVerificationEmailInvalidContentException(e) => e.request_id(),
            Self::CustomVerificationEmailTemplateAlreadyExistsException(e) => e.request_id(),
            Self::CustomVerificationEmailTemplateDoesNotExistException(e) => e.request_id(),
            Self::EventDestinationAlreadyExistsException(e) => e.request_id(),
            Self::EventDestinationDoesNotExistException(e) => e.request_id(),
            Self::FromEmailAddressNotVerifiedException(e) => e.request_id(),
            Self::InvalidCloudWatchDestinationException(e) => e.request_id(),
            Self::InvalidConfigurationSetException(e) => e.request_id(),
            Self::InvalidDeliveryOptionsException(e) => e.request_id(),
            Self::InvalidFirehoseDestinationException(e) => e.request_id(),
            Self::InvalidLambdaFunctionException(e) => e.request_id(),
            Self::InvalidPolicyException(e) => e.request_id(),
            Self::InvalidRenderingParameterException(e) => e.request_id(),
            Self::InvalidS3ConfigurationException(e) => e.request_id(),
            Self::InvalidSnsDestinationException(e) => e.request_id(),
            Self::InvalidSnsTopicException(e) => e.request_id(),
            Self::InvalidTemplateException(e) => e.request_id(),
            Self::InvalidTrackingOptionsException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::MailFromDomainNotVerifiedException(e) => e.request_id(),
            Self::MessageRejected(e) => e.request_id(),
            Self::MissingRenderingAttributeException(e) => e.request_id(),
            Self::ProductionAccessNotGrantedException(e) => e.request_id(),
            Self::RuleDoesNotExistException(e) => e.request_id(),
            Self::RuleSetDoesNotExistException(e) => e.request_id(),
            Self::TemplateDoesNotExistException(e) => e.request_id(),
            Self::TrackingOptionsAlreadyExistsException(e) => e.request_id(),
            Self::TrackingOptionsDoesNotExistException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
