// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    AccountSendingPausedException(crate::error::AccountSendingPausedException),
    AlreadyExistsException(crate::error::AlreadyExistsException),
    CannotDeleteException(crate::error::CannotDeleteException),
    ConfigurationSetAlreadyExistsException(crate::error::ConfigurationSetAlreadyExistsException),
    ConfigurationSetDoesNotExistException(crate::error::ConfigurationSetDoesNotExistException),
    ConfigurationSetSendingPausedException(crate::error::ConfigurationSetSendingPausedException),
    CustomVerificationEmailInvalidContentException(
        crate::error::CustomVerificationEmailInvalidContentException,
    ),
    CustomVerificationEmailTemplateAlreadyExistsException(
        crate::error::CustomVerificationEmailTemplateAlreadyExistsException,
    ),
    CustomVerificationEmailTemplateDoesNotExistException(
        crate::error::CustomVerificationEmailTemplateDoesNotExistException,
    ),
    EventDestinationAlreadyExistsException(crate::error::EventDestinationAlreadyExistsException),
    EventDestinationDoesNotExistException(crate::error::EventDestinationDoesNotExistException),
    FromEmailAddressNotVerifiedException(crate::error::FromEmailAddressNotVerifiedException),
    InvalidCloudWatchDestinationException(crate::error::InvalidCloudWatchDestinationException),
    InvalidConfigurationSetException(crate::error::InvalidConfigurationSetException),
    InvalidDeliveryOptionsException(crate::error::InvalidDeliveryOptionsException),
    InvalidFirehoseDestinationException(crate::error::InvalidFirehoseDestinationException),
    InvalidLambdaFunctionException(crate::error::InvalidLambdaFunctionException),
    InvalidPolicyException(crate::error::InvalidPolicyException),
    InvalidRenderingParameterException(crate::error::InvalidRenderingParameterException),
    InvalidS3ConfigurationException(crate::error::InvalidS3ConfigurationException),
    InvalidSnsDestinationException(crate::error::InvalidSnsDestinationException),
    InvalidSnsTopicException(crate::error::InvalidSnsTopicException),
    InvalidTemplateException(crate::error::InvalidTemplateException),
    InvalidTrackingOptionsException(crate::error::InvalidTrackingOptionsException),
    LimitExceededException(crate::error::LimitExceededException),
    MailFromDomainNotVerifiedException(crate::error::MailFromDomainNotVerifiedException),
    MessageRejected(crate::error::MessageRejected),
    MissingRenderingAttributeException(crate::error::MissingRenderingAttributeException),
    ProductionAccessNotGrantedException(crate::error::ProductionAccessNotGrantedException),
    RuleDoesNotExistException(crate::error::RuleDoesNotExistException),
    RuleSetDoesNotExistException(crate::error::RuleSetDoesNotExistException),
    TemplateDoesNotExistException(crate::error::TemplateDoesNotExistException),
    TrackingOptionsAlreadyExistsException(crate::error::TrackingOptionsAlreadyExistsException),
    TrackingOptionsDoesNotExistException(crate::error::TrackingOptionsDoesNotExistException),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccountSendingPausedException(inner) => inner.fmt(f),
            Error::AlreadyExistsException(inner) => inner.fmt(f),
            Error::CannotDeleteException(inner) => inner.fmt(f),
            Error::ConfigurationSetAlreadyExistsException(inner) => inner.fmt(f),
            Error::ConfigurationSetDoesNotExistException(inner) => inner.fmt(f),
            Error::ConfigurationSetSendingPausedException(inner) => inner.fmt(f),
            Error::CustomVerificationEmailInvalidContentException(inner) => inner.fmt(f),
            Error::CustomVerificationEmailTemplateAlreadyExistsException(inner) => inner.fmt(f),
            Error::CustomVerificationEmailTemplateDoesNotExistException(inner) => inner.fmt(f),
            Error::EventDestinationAlreadyExistsException(inner) => inner.fmt(f),
            Error::EventDestinationDoesNotExistException(inner) => inner.fmt(f),
            Error::FromEmailAddressNotVerifiedException(inner) => inner.fmt(f),
            Error::InvalidCloudWatchDestinationException(inner) => inner.fmt(f),
            Error::InvalidConfigurationSetException(inner) => inner.fmt(f),
            Error::InvalidDeliveryOptionsException(inner) => inner.fmt(f),
            Error::InvalidFirehoseDestinationException(inner) => inner.fmt(f),
            Error::InvalidLambdaFunctionException(inner) => inner.fmt(f),
            Error::InvalidPolicyException(inner) => inner.fmt(f),
            Error::InvalidRenderingParameterException(inner) => inner.fmt(f),
            Error::InvalidS3ConfigurationException(inner) => inner.fmt(f),
            Error::InvalidSnsDestinationException(inner) => inner.fmt(f),
            Error::InvalidSnsTopicException(inner) => inner.fmt(f),
            Error::InvalidTemplateException(inner) => inner.fmt(f),
            Error::InvalidTrackingOptionsException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::MailFromDomainNotVerifiedException(inner) => inner.fmt(f),
            Error::MessageRejected(inner) => inner.fmt(f),
            Error::MissingRenderingAttributeException(inner) => inner.fmt(f),
            Error::ProductionAccessNotGrantedException(inner) => inner.fmt(f),
            Error::RuleDoesNotExistException(inner) => inner.fmt(f),
            Error::RuleSetDoesNotExistException(inner) => inner.fmt(f),
            Error::TemplateDoesNotExistException(inner) => inner.fmt(f),
            Error::TrackingOptionsAlreadyExistsException(inner) => inner.fmt(f),
            Error::TrackingOptionsDoesNotExistException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CloneReceiptRuleSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CloneReceiptRuleSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CloneReceiptRuleSetErrorKind::AlreadyExistsException(inner) => {
                    Error::AlreadyExistsException(inner)
                }
                crate::error::CloneReceiptRuleSetErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CloneReceiptRuleSetErrorKind::RuleSetDoesNotExistException(inner) => {
                    Error::RuleSetDoesNotExistException(inner)
                }
                crate::error::CloneReceiptRuleSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateConfigurationSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateConfigurationSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateConfigurationSetErrorKind::ConfigurationSetAlreadyExistsException(inner) => Error::ConfigurationSetAlreadyExistsException(inner),
                crate::error::CreateConfigurationSetErrorKind::InvalidConfigurationSetException(inner) => Error::InvalidConfigurationSetException(inner),
                crate::error::CreateConfigurationSetErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
                crate::error::CreateConfigurationSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateConfigurationSetEventDestinationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::CreateConfigurationSetEventDestinationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateConfigurationSetEventDestinationErrorKind::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
                crate::error::CreateConfigurationSetEventDestinationErrorKind::EventDestinationAlreadyExistsException(inner) => Error::EventDestinationAlreadyExistsException(inner),
                crate::error::CreateConfigurationSetEventDestinationErrorKind::InvalidCloudWatchDestinationException(inner) => Error::InvalidCloudWatchDestinationException(inner),
                crate::error::CreateConfigurationSetEventDestinationErrorKind::InvalidFirehoseDestinationException(inner) => Error::InvalidFirehoseDestinationException(inner),
                crate::error::CreateConfigurationSetEventDestinationErrorKind::InvalidSnsDestinationException(inner) => Error::InvalidSnsDestinationException(inner),
                crate::error::CreateConfigurationSetEventDestinationErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
                crate::error::CreateConfigurationSetEventDestinationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateConfigurationSetTrackingOptionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::CreateConfigurationSetTrackingOptionsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateConfigurationSetTrackingOptionsErrorKind::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
                crate::error::CreateConfigurationSetTrackingOptionsErrorKind::InvalidTrackingOptionsException(inner) => Error::InvalidTrackingOptionsException(inner),
                crate::error::CreateConfigurationSetTrackingOptionsErrorKind::TrackingOptionsAlreadyExistsException(inner) => Error::TrackingOptionsAlreadyExistsException(inner),
                crate::error::CreateConfigurationSetTrackingOptionsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateCustomVerificationEmailTemplateError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::CreateCustomVerificationEmailTemplateError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateCustomVerificationEmailTemplateErrorKind::CustomVerificationEmailInvalidContentException(inner) => Error::CustomVerificationEmailInvalidContentException(inner),
                crate::error::CreateCustomVerificationEmailTemplateErrorKind::CustomVerificationEmailTemplateAlreadyExistsException(inner) => Error::CustomVerificationEmailTemplateAlreadyExistsException(inner),
                crate::error::CreateCustomVerificationEmailTemplateErrorKind::FromEmailAddressNotVerifiedException(inner) => Error::FromEmailAddressNotVerifiedException(inner),
                crate::error::CreateCustomVerificationEmailTemplateErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
                crate::error::CreateCustomVerificationEmailTemplateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateReceiptFilterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateReceiptFilterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateReceiptFilterErrorKind::AlreadyExistsException(inner) => {
                    Error::AlreadyExistsException(inner)
                }
                crate::error::CreateReceiptFilterErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateReceiptFilterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateReceiptRuleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateReceiptRuleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateReceiptRuleErrorKind::AlreadyExistsException(inner) => {
                    Error::AlreadyExistsException(inner)
                }
                crate::error::CreateReceiptRuleErrorKind::InvalidLambdaFunctionException(inner) => {
                    Error::InvalidLambdaFunctionException(inner)
                }
                crate::error::CreateReceiptRuleErrorKind::InvalidS3ConfigurationException(
                    inner,
                ) => Error::InvalidS3ConfigurationException(inner),
                crate::error::CreateReceiptRuleErrorKind::InvalidSnsTopicException(inner) => {
                    Error::InvalidSnsTopicException(inner)
                }
                crate::error::CreateReceiptRuleErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateReceiptRuleErrorKind::RuleDoesNotExistException(inner) => {
                    Error::RuleDoesNotExistException(inner)
                }
                crate::error::CreateReceiptRuleErrorKind::RuleSetDoesNotExistException(inner) => {
                    Error::RuleSetDoesNotExistException(inner)
                }
                crate::error::CreateReceiptRuleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateReceiptRuleSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateReceiptRuleSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateReceiptRuleSetErrorKind::AlreadyExistsException(inner) => {
                    Error::AlreadyExistsException(inner)
                }
                crate::error::CreateReceiptRuleSetErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateReceiptRuleSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateTemplateErrorKind::AlreadyExistsException(inner) => {
                    Error::AlreadyExistsException(inner)
                }
                crate::error::CreateTemplateErrorKind::InvalidTemplateException(inner) => {
                    Error::InvalidTemplateException(inner)
                }
                crate::error::CreateTemplateErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateTemplateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteConfigurationSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteConfigurationSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteConfigurationSetErrorKind::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
                crate::error::DeleteConfigurationSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteConfigurationSetEventDestinationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeleteConfigurationSetEventDestinationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteConfigurationSetEventDestinationErrorKind::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
                crate::error::DeleteConfigurationSetEventDestinationErrorKind::EventDestinationDoesNotExistException(inner) => Error::EventDestinationDoesNotExistException(inner),
                crate::error::DeleteConfigurationSetEventDestinationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteConfigurationSetTrackingOptionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeleteConfigurationSetTrackingOptionsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteConfigurationSetTrackingOptionsErrorKind::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
                crate::error::DeleteConfigurationSetTrackingOptionsErrorKind::TrackingOptionsDoesNotExistException(inner) => Error::TrackingOptionsDoesNotExistException(inner),
                crate::error::DeleteConfigurationSetTrackingOptionsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteCustomVerificationEmailTemplateError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::DeleteCustomVerificationEmailTemplateError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteCustomVerificationEmailTemplateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteIdentityError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteIdentityError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteIdentityErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteIdentityPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteIdentityPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteIdentityPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteReceiptFilterError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteReceiptFilterError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteReceiptFilterErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteReceiptRuleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteReceiptRuleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteReceiptRuleErrorKind::RuleSetDoesNotExistException(inner) => {
                    Error::RuleSetDoesNotExistException(inner)
                }
                crate::error::DeleteReceiptRuleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteReceiptRuleSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteReceiptRuleSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteReceiptRuleSetErrorKind::CannotDeleteException(inner) => {
                    Error::CannotDeleteException(inner)
                }
                crate::error::DeleteReceiptRuleSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteTemplateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteVerifiedEmailAddressError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DeleteVerifiedEmailAddressError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteVerifiedEmailAddressErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeActiveReceiptRuleSetError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeActiveReceiptRuleSetError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeActiveReceiptRuleSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeConfigurationSetError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeConfigurationSetError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeConfigurationSetErrorKind::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
                crate::error::DescribeConfigurationSetErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReceiptRuleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeReceiptRuleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeReceiptRuleErrorKind::RuleDoesNotExistException(inner) => {
                    Error::RuleDoesNotExistException(inner)
                }
                crate::error::DescribeReceiptRuleErrorKind::RuleSetDoesNotExistException(inner) => {
                    Error::RuleSetDoesNotExistException(inner)
                }
                crate::error::DescribeReceiptRuleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeReceiptRuleSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeReceiptRuleSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeReceiptRuleSetErrorKind::RuleSetDoesNotExistException(
                    inner,
                ) => Error::RuleSetDoesNotExistException(inner),
                crate::error::DescribeReceiptRuleSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetAccountSendingEnabledError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetAccountSendingEnabledError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetAccountSendingEnabledErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetCustomVerificationEmailTemplateError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetCustomVerificationEmailTemplateError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::GetCustomVerificationEmailTemplateErrorKind::CustomVerificationEmailTemplateDoesNotExistException(inner) => Error::CustomVerificationEmailTemplateDoesNotExistException(inner),
                crate::error::GetCustomVerificationEmailTemplateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetIdentityDkimAttributesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetIdentityDkimAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetIdentityDkimAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetIdentityMailFromDomainAttributesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetIdentityMailFromDomainAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetIdentityMailFromDomainAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetIdentityNotificationAttributesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetIdentityNotificationAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetIdentityNotificationAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetIdentityPoliciesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetIdentityPoliciesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetIdentityPoliciesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetIdentityVerificationAttributesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetIdentityVerificationAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetIdentityVerificationAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSendQuotaError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetSendQuotaError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSendQuotaErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSendStatisticsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetSendStatisticsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSendStatisticsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTemplateErrorKind::TemplateDoesNotExistException(inner) => {
                    Error::TemplateDoesNotExistException(inner)
                }
                crate::error::GetTemplateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListConfigurationSetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListConfigurationSetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListConfigurationSetsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListCustomVerificationEmailTemplatesError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListCustomVerificationEmailTemplatesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListCustomVerificationEmailTemplatesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListIdentitiesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListIdentitiesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListIdentitiesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListIdentityPoliciesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListIdentityPoliciesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListIdentityPoliciesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListReceiptFiltersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListReceiptFiltersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListReceiptFiltersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListReceiptRuleSetsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListReceiptRuleSetsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListReceiptRuleSetsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTemplatesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTemplatesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTemplatesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListVerifiedEmailAddressesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListVerifiedEmailAddressesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListVerifiedEmailAddressesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutConfigurationSetDeliveryOptionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::PutConfigurationSetDeliveryOptionsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::PutConfigurationSetDeliveryOptionsErrorKind::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
                crate::error::PutConfigurationSetDeliveryOptionsErrorKind::InvalidDeliveryOptionsException(inner) => Error::InvalidDeliveryOptionsException(inner),
                crate::error::PutConfigurationSetDeliveryOptionsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutIdentityPolicyError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutIdentityPolicyError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutIdentityPolicyErrorKind::InvalidPolicyException(inner) => {
                    Error::InvalidPolicyException(inner)
                }
                crate::error::PutIdentityPolicyErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ReorderReceiptRuleSetError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ReorderReceiptRuleSetError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ReorderReceiptRuleSetErrorKind::RuleDoesNotExistException(inner) => {
                    Error::RuleDoesNotExistException(inner)
                }
                crate::error::ReorderReceiptRuleSetErrorKind::RuleSetDoesNotExistException(
                    inner,
                ) => Error::RuleSetDoesNotExistException(inner),
                crate::error::ReorderReceiptRuleSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendBounceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SendBounceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SendBounceErrorKind::MessageRejected(inner) => {
                    Error::MessageRejected(inner)
                }
                crate::error::SendBounceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendBulkTemplatedEmailError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SendBulkTemplatedEmailError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::SendBulkTemplatedEmailErrorKind::AccountSendingPausedException(inner) => Error::AccountSendingPausedException(inner),
                crate::error::SendBulkTemplatedEmailErrorKind::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
                crate::error::SendBulkTemplatedEmailErrorKind::ConfigurationSetSendingPausedException(inner) => Error::ConfigurationSetSendingPausedException(inner),
                crate::error::SendBulkTemplatedEmailErrorKind::MailFromDomainNotVerifiedException(inner) => Error::MailFromDomainNotVerifiedException(inner),
                crate::error::SendBulkTemplatedEmailErrorKind::MessageRejected(inner) => Error::MessageRejected(inner),
                crate::error::SendBulkTemplatedEmailErrorKind::TemplateDoesNotExistException(inner) => Error::TemplateDoesNotExistException(inner),
                crate::error::SendBulkTemplatedEmailErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendCustomVerificationEmailError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::SendCustomVerificationEmailError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::SendCustomVerificationEmailErrorKind::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
                crate::error::SendCustomVerificationEmailErrorKind::CustomVerificationEmailTemplateDoesNotExistException(inner) => Error::CustomVerificationEmailTemplateDoesNotExistException(inner),
                crate::error::SendCustomVerificationEmailErrorKind::FromEmailAddressNotVerifiedException(inner) => Error::FromEmailAddressNotVerifiedException(inner),
                crate::error::SendCustomVerificationEmailErrorKind::MessageRejected(inner) => Error::MessageRejected(inner),
                crate::error::SendCustomVerificationEmailErrorKind::ProductionAccessNotGrantedException(inner) => Error::ProductionAccessNotGrantedException(inner),
                crate::error::SendCustomVerificationEmailErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendEmailError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SendEmailError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SendEmailErrorKind::AccountSendingPausedException(inner) => {
                    Error::AccountSendingPausedException(inner)
                }
                crate::error::SendEmailErrorKind::ConfigurationSetDoesNotExistException(inner) => {
                    Error::ConfigurationSetDoesNotExistException(inner)
                }
                crate::error::SendEmailErrorKind::ConfigurationSetSendingPausedException(inner) => {
                    Error::ConfigurationSetSendingPausedException(inner)
                }
                crate::error::SendEmailErrorKind::MailFromDomainNotVerifiedException(inner) => {
                    Error::MailFromDomainNotVerifiedException(inner)
                }
                crate::error::SendEmailErrorKind::MessageRejected(inner) => {
                    Error::MessageRejected(inner)
                }
                crate::error::SendEmailErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendRawEmailError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SendRawEmailError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SendRawEmailErrorKind::AccountSendingPausedException(inner) => {
                    Error::AccountSendingPausedException(inner)
                }
                crate::error::SendRawEmailErrorKind::ConfigurationSetDoesNotExistException(
                    inner,
                ) => Error::ConfigurationSetDoesNotExistException(inner),
                crate::error::SendRawEmailErrorKind::ConfigurationSetSendingPausedException(
                    inner,
                ) => Error::ConfigurationSetSendingPausedException(inner),
                crate::error::SendRawEmailErrorKind::MailFromDomainNotVerifiedException(inner) => {
                    Error::MailFromDomainNotVerifiedException(inner)
                }
                crate::error::SendRawEmailErrorKind::MessageRejected(inner) => {
                    Error::MessageRejected(inner)
                }
                crate::error::SendRawEmailErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SendTemplatedEmailError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SendTemplatedEmailError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::SendTemplatedEmailErrorKind::AccountSendingPausedException(inner) => Error::AccountSendingPausedException(inner),
                crate::error::SendTemplatedEmailErrorKind::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
                crate::error::SendTemplatedEmailErrorKind::ConfigurationSetSendingPausedException(inner) => Error::ConfigurationSetSendingPausedException(inner),
                crate::error::SendTemplatedEmailErrorKind::MailFromDomainNotVerifiedException(inner) => Error::MailFromDomainNotVerifiedException(inner),
                crate::error::SendTemplatedEmailErrorKind::MessageRejected(inner) => Error::MessageRejected(inner),
                crate::error::SendTemplatedEmailErrorKind::TemplateDoesNotExistException(inner) => Error::TemplateDoesNotExistException(inner),
                crate::error::SendTemplatedEmailErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetActiveReceiptRuleSetError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::SetActiveReceiptRuleSetError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetActiveReceiptRuleSetErrorKind::RuleSetDoesNotExistException(
                    inner,
                ) => Error::RuleSetDoesNotExistException(inner),
                crate::error::SetActiveReceiptRuleSetErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetIdentityDkimEnabledError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SetIdentityDkimEnabledError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetIdentityDkimEnabledErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetIdentityFeedbackForwardingEnabledError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::SetIdentityFeedbackForwardingEnabledError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetIdentityFeedbackForwardingEnabledErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<smithy_http::result::SdkError<crate::error::SetIdentityHeadersInNotificationsEnabledError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::SetIdentityHeadersInNotificationsEnabledError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetIdentityHeadersInNotificationsEnabledErrorKind::Unhandled(
                    inner,
                ) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetIdentityMailFromDomainError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::SetIdentityMailFromDomainError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetIdentityMailFromDomainErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetIdentityNotificationTopicError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::SetIdentityNotificationTopicError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetIdentityNotificationTopicErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetReceiptRulePositionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SetReceiptRulePositionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetReceiptRulePositionErrorKind::RuleDoesNotExistException(inner) => {
                    Error::RuleDoesNotExistException(inner)
                }
                crate::error::SetReceiptRulePositionErrorKind::RuleSetDoesNotExistException(
                    inner,
                ) => Error::RuleSetDoesNotExistException(inner),
                crate::error::SetReceiptRulePositionErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TestRenderTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TestRenderTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TestRenderTemplateErrorKind::InvalidRenderingParameterException(
                    inner,
                ) => Error::InvalidRenderingParameterException(inner),
                crate::error::TestRenderTemplateErrorKind::MissingRenderingAttributeException(
                    inner,
                ) => Error::MissingRenderingAttributeException(inner),
                crate::error::TestRenderTemplateErrorKind::TemplateDoesNotExistException(inner) => {
                    Error::TemplateDoesNotExistException(inner)
                }
                crate::error::TestRenderTemplateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateAccountSendingEnabledError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateAccountSendingEnabledError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateAccountSendingEnabledErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateConfigurationSetEventDestinationError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::UpdateConfigurationSetEventDestinationError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateConfigurationSetEventDestinationErrorKind::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
                crate::error::UpdateConfigurationSetEventDestinationErrorKind::EventDestinationDoesNotExistException(inner) => Error::EventDestinationDoesNotExistException(inner),
                crate::error::UpdateConfigurationSetEventDestinationErrorKind::InvalidCloudWatchDestinationException(inner) => Error::InvalidCloudWatchDestinationException(inner),
                crate::error::UpdateConfigurationSetEventDestinationErrorKind::InvalidFirehoseDestinationException(inner) => Error::InvalidFirehoseDestinationException(inner),
                crate::error::UpdateConfigurationSetEventDestinationErrorKind::InvalidSnsDestinationException(inner) => Error::InvalidSnsDestinationException(inner),
                crate::error::UpdateConfigurationSetEventDestinationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl
    From<
        smithy_http::result::SdkError<
            crate::error::UpdateConfigurationSetReputationMetricsEnabledError,
        >,
    > for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::UpdateConfigurationSetReputationMetricsEnabledError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateConfigurationSetReputationMetricsEnabledErrorKind::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
                crate::error::UpdateConfigurationSetReputationMetricsEnabledErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateConfigurationSetSendingEnabledError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateConfigurationSetSendingEnabledError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateConfigurationSetSendingEnabledErrorKind::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
                crate::error::UpdateConfigurationSetSendingEnabledErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateConfigurationSetTrackingOptionsError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::UpdateConfigurationSetTrackingOptionsError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateConfigurationSetTrackingOptionsErrorKind::ConfigurationSetDoesNotExistException(inner) => Error::ConfigurationSetDoesNotExistException(inner),
                crate::error::UpdateConfigurationSetTrackingOptionsErrorKind::InvalidTrackingOptionsException(inner) => Error::InvalidTrackingOptionsException(inner),
                crate::error::UpdateConfigurationSetTrackingOptionsErrorKind::TrackingOptionsDoesNotExistException(inner) => Error::TrackingOptionsDoesNotExistException(inner),
                crate::error::UpdateConfigurationSetTrackingOptionsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateCustomVerificationEmailTemplateError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<
            crate::error::UpdateCustomVerificationEmailTemplateError,
        >,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateCustomVerificationEmailTemplateErrorKind::CustomVerificationEmailInvalidContentException(inner) => Error::CustomVerificationEmailInvalidContentException(inner),
                crate::error::UpdateCustomVerificationEmailTemplateErrorKind::CustomVerificationEmailTemplateDoesNotExistException(inner) => Error::CustomVerificationEmailTemplateDoesNotExistException(inner),
                crate::error::UpdateCustomVerificationEmailTemplateErrorKind::FromEmailAddressNotVerifiedException(inner) => Error::FromEmailAddressNotVerifiedException(inner),
                crate::error::UpdateCustomVerificationEmailTemplateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateReceiptRuleError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateReceiptRuleError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateReceiptRuleErrorKind::InvalidLambdaFunctionException(inner) => {
                    Error::InvalidLambdaFunctionException(inner)
                }
                crate::error::UpdateReceiptRuleErrorKind::InvalidS3ConfigurationException(
                    inner,
                ) => Error::InvalidS3ConfigurationException(inner),
                crate::error::UpdateReceiptRuleErrorKind::InvalidSnsTopicException(inner) => {
                    Error::InvalidSnsTopicException(inner)
                }
                crate::error::UpdateReceiptRuleErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::UpdateReceiptRuleErrorKind::RuleDoesNotExistException(inner) => {
                    Error::RuleDoesNotExistException(inner)
                }
                crate::error::UpdateReceiptRuleErrorKind::RuleSetDoesNotExistException(inner) => {
                    Error::RuleSetDoesNotExistException(inner)
                }
                crate::error::UpdateReceiptRuleErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateTemplateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateTemplateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateTemplateErrorKind::InvalidTemplateException(inner) => {
                    Error::InvalidTemplateException(inner)
                }
                crate::error::UpdateTemplateErrorKind::TemplateDoesNotExistException(inner) => {
                    Error::TemplateDoesNotExistException(inner)
                }
                crate::error::UpdateTemplateErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::VerifyDomainDkimError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::VerifyDomainDkimError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::VerifyDomainDkimErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::VerifyDomainIdentityError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::VerifyDomainIdentityError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::VerifyDomainIdentityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::VerifyEmailAddressError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::VerifyEmailAddressError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::VerifyEmailAddressErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::VerifyEmailIdentityError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::VerifyEmailIdentityError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::VerifyEmailIdentityErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
