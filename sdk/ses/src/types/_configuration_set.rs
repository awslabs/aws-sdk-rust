// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The name of the configuration set.</p>
/// <p>Configuration sets let you create groups of rules that you can apply to the emails you send using Amazon SES. For more information about using configuration sets, see <a href="https://docs.aws.amazon.com/ses/latest/dg/using-configuration-sets.html">Using Amazon SES Configuration Sets</a> in the <a href="https://docs.aws.amazon.com/ses/latest/dg/">Amazon SES Developer Guide</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ConfigurationSet {
    /// <p>The name of the configuration set. The name must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li>
    /// <li> <p>Contain 64 characters or fewer.</p> </li>
    /// </ul>
    pub name: ::std::string::String,
}
impl ConfigurationSet {
    /// <p>The name of the configuration set. The name must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li>
    /// <li> <p>Contain 64 characters or fewer.</p> </li>
    /// </ul>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
}
impl ConfigurationSet {
    /// Creates a new builder-style object to manufacture [`ConfigurationSet`](crate::types::ConfigurationSet).
    pub fn builder() -> crate::types::builders::ConfigurationSetBuilder {
        crate::types::builders::ConfigurationSetBuilder::default()
    }
}

/// A builder for [`ConfigurationSet`](crate::types::ConfigurationSet).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConfigurationSetBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
}
impl ConfigurationSetBuilder {
    /// <p>The name of the configuration set. The name must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li>
    /// <li> <p>Contain 64 characters or fewer.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the configuration set. The name must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li>
    /// <li> <p>Contain 64 characters or fewer.</p> </li>
    /// </ul>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the configuration set. The name must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li>
    /// <li> <p>Contain 64 characters or fewer.</p> </li>
    /// </ul>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Consumes the builder and constructs a [`ConfigurationSet`](crate::types::ConfigurationSet).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::ConfigurationSetBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::ConfigurationSet, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ConfigurationSet {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building ConfigurationSet",
                )
            })?,
        })
    }
}
