// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents sending statistics data. Each <code>SendDataPoint</code> contains statistics for a 15-minute period of sending activity. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendDataPoint {
    /// <p>Time of the data point.</p>
    #[doc(hidden)]
    pub timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Number of emails that have been sent.</p>
    #[doc(hidden)]
    pub delivery_attempts: i64,
    /// <p>Number of emails that have bounced.</p>
    #[doc(hidden)]
    pub bounces: i64,
    /// <p>Number of unwanted emails that were rejected by recipients.</p>
    #[doc(hidden)]
    pub complaints: i64,
    /// <p>Number of emails rejected by Amazon SES.</p>
    #[doc(hidden)]
    pub rejects: i64,
}
impl SendDataPoint {
    /// <p>Time of the data point.</p>
    pub fn timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
    /// <p>Number of emails that have been sent.</p>
    pub fn delivery_attempts(&self) -> i64 {
        self.delivery_attempts
    }
    /// <p>Number of emails that have bounced.</p>
    pub fn bounces(&self) -> i64 {
        self.bounces
    }
    /// <p>Number of unwanted emails that were rejected by recipients.</p>
    pub fn complaints(&self) -> i64 {
        self.complaints
    }
    /// <p>Number of emails rejected by Amazon SES.</p>
    pub fn rejects(&self) -> i64 {
        self.rejects
    }
}
impl SendDataPoint {
    /// Creates a new builder-style object to manufacture [`SendDataPoint`](crate::types::SendDataPoint).
    pub fn builder() -> crate::types::builders::SendDataPointBuilder {
        crate::types::builders::SendDataPointBuilder::default()
    }
}

/// A builder for [`SendDataPoint`](crate::types::SendDataPoint).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SendDataPointBuilder {
    pub(crate) timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) delivery_attempts: std::option::Option<i64>,
    pub(crate) bounces: std::option::Option<i64>,
    pub(crate) complaints: std::option::Option<i64>,
    pub(crate) rejects: std::option::Option<i64>,
}
impl SendDataPointBuilder {
    /// <p>Time of the data point.</p>
    pub fn timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.timestamp = Some(input);
        self
    }
    /// <p>Time of the data point.</p>
    pub fn set_timestamp(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>Number of emails that have been sent.</p>
    pub fn delivery_attempts(mut self, input: i64) -> Self {
        self.delivery_attempts = Some(input);
        self
    }
    /// <p>Number of emails that have been sent.</p>
    pub fn set_delivery_attempts(mut self, input: std::option::Option<i64>) -> Self {
        self.delivery_attempts = input;
        self
    }
    /// <p>Number of emails that have bounced.</p>
    pub fn bounces(mut self, input: i64) -> Self {
        self.bounces = Some(input);
        self
    }
    /// <p>Number of emails that have bounced.</p>
    pub fn set_bounces(mut self, input: std::option::Option<i64>) -> Self {
        self.bounces = input;
        self
    }
    /// <p>Number of unwanted emails that were rejected by recipients.</p>
    pub fn complaints(mut self, input: i64) -> Self {
        self.complaints = Some(input);
        self
    }
    /// <p>Number of unwanted emails that were rejected by recipients.</p>
    pub fn set_complaints(mut self, input: std::option::Option<i64>) -> Self {
        self.complaints = input;
        self
    }
    /// <p>Number of emails rejected by Amazon SES.</p>
    pub fn rejects(mut self, input: i64) -> Self {
        self.rejects = Some(input);
        self
    }
    /// <p>Number of emails rejected by Amazon SES.</p>
    pub fn set_rejects(mut self, input: std::option::Option<i64>) -> Self {
        self.rejects = input;
        self
    }
    /// Consumes the builder and constructs a [`SendDataPoint`](crate::types::SendDataPoint).
    pub fn build(self) -> crate::types::SendDataPoint {
        crate::types::SendDataPoint {
            timestamp: self.timestamp,
            delivery_attempts: self.delivery_attempts.unwrap_or_default(),
            bounces: self.bounces.unwrap_or_default(),
            complaints: self.complaints.unwrap_or_default(),
            rejects: self.rejects.unwrap_or_default(),
        }
    }
}
