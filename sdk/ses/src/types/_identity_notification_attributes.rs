// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the notification attributes of an identity, including whether an identity has Amazon Simple Notification Service (Amazon SNS) topics set for bounce, complaint, and/or delivery notifications, and whether feedback forwarding is enabled for bounce and complaint notifications.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IdentityNotificationAttributes {
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes bounce notifications.</p>
    pub bounce_topic: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes complaint notifications.</p>
    pub complaint_topic: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes delivery notifications.</p>
    pub delivery_topic: ::std::string::String,
    /// <p>Describes whether Amazon SES forwards bounce and complaint notifications as email. <code>true</code> indicates that Amazon SES forwards bounce and complaint notifications as email, while <code>false</code> indicates that bounce and complaint notifications are published only to the specified bounce and complaint Amazon SNS topics.</p>
    pub forwarding_enabled: bool,
    /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type <code>Bounce</code>. A value of <code>true</code> specifies that Amazon SES includes headers in bounce notifications, and a value of <code>false</code> specifies that Amazon SES does not include headers in bounce notifications.</p>
    pub headers_in_bounce_notifications_enabled: bool,
    /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type <code>Complaint</code>. A value of <code>true</code> specifies that Amazon SES includes headers in complaint notifications, and a value of <code>false</code> specifies that Amazon SES does not include headers in complaint notifications.</p>
    pub headers_in_complaint_notifications_enabled: bool,
    /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type <code>Delivery</code>. A value of <code>true</code> specifies that Amazon SES includes headers in delivery notifications, and a value of <code>false</code> specifies that Amazon SES does not include headers in delivery notifications.</p>
    pub headers_in_delivery_notifications_enabled: bool,
}
impl IdentityNotificationAttributes {
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes bounce notifications.</p>
    pub fn bounce_topic(&self) -> &str {
        use std::ops::Deref;
        self.bounce_topic.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes complaint notifications.</p>
    pub fn complaint_topic(&self) -> &str {
        use std::ops::Deref;
        self.complaint_topic.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes delivery notifications.</p>
    pub fn delivery_topic(&self) -> &str {
        use std::ops::Deref;
        self.delivery_topic.deref()
    }
    /// <p>Describes whether Amazon SES forwards bounce and complaint notifications as email. <code>true</code> indicates that Amazon SES forwards bounce and complaint notifications as email, while <code>false</code> indicates that bounce and complaint notifications are published only to the specified bounce and complaint Amazon SNS topics.</p>
    pub fn forwarding_enabled(&self) -> bool {
        self.forwarding_enabled
    }
    /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type <code>Bounce</code>. A value of <code>true</code> specifies that Amazon SES includes headers in bounce notifications, and a value of <code>false</code> specifies that Amazon SES does not include headers in bounce notifications.</p>
    pub fn headers_in_bounce_notifications_enabled(&self) -> bool {
        self.headers_in_bounce_notifications_enabled
    }
    /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type <code>Complaint</code>. A value of <code>true</code> specifies that Amazon SES includes headers in complaint notifications, and a value of <code>false</code> specifies that Amazon SES does not include headers in complaint notifications.</p>
    pub fn headers_in_complaint_notifications_enabled(&self) -> bool {
        self.headers_in_complaint_notifications_enabled
    }
    /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type <code>Delivery</code>. A value of <code>true</code> specifies that Amazon SES includes headers in delivery notifications, and a value of <code>false</code> specifies that Amazon SES does not include headers in delivery notifications.</p>
    pub fn headers_in_delivery_notifications_enabled(&self) -> bool {
        self.headers_in_delivery_notifications_enabled
    }
}
impl IdentityNotificationAttributes {
    /// Creates a new builder-style object to manufacture [`IdentityNotificationAttributes`](crate::types::IdentityNotificationAttributes).
    pub fn builder() -> crate::types::builders::IdentityNotificationAttributesBuilder {
        crate::types::builders::IdentityNotificationAttributesBuilder::default()
    }
}

/// A builder for [`IdentityNotificationAttributes`](crate::types::IdentityNotificationAttributes).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IdentityNotificationAttributesBuilder {
    pub(crate) bounce_topic: ::std::option::Option<::std::string::String>,
    pub(crate) complaint_topic: ::std::option::Option<::std::string::String>,
    pub(crate) delivery_topic: ::std::option::Option<::std::string::String>,
    pub(crate) forwarding_enabled: ::std::option::Option<bool>,
    pub(crate) headers_in_bounce_notifications_enabled: ::std::option::Option<bool>,
    pub(crate) headers_in_complaint_notifications_enabled: ::std::option::Option<bool>,
    pub(crate) headers_in_delivery_notifications_enabled: ::std::option::Option<bool>,
}
impl IdentityNotificationAttributesBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes bounce notifications.</p>
    /// This field is required.
    pub fn bounce_topic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bounce_topic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes bounce notifications.</p>
    pub fn set_bounce_topic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bounce_topic = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes bounce notifications.</p>
    pub fn get_bounce_topic(&self) -> &::std::option::Option<::std::string::String> {
        &self.bounce_topic
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes complaint notifications.</p>
    /// This field is required.
    pub fn complaint_topic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.complaint_topic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes complaint notifications.</p>
    pub fn set_complaint_topic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.complaint_topic = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes complaint notifications.</p>
    pub fn get_complaint_topic(&self) -> &::std::option::Option<::std::string::String> {
        &self.complaint_topic
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes delivery notifications.</p>
    /// This field is required.
    pub fn delivery_topic(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.delivery_topic = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes delivery notifications.</p>
    pub fn set_delivery_topic(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.delivery_topic = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon SNS topic where Amazon SES publishes delivery notifications.</p>
    pub fn get_delivery_topic(&self) -> &::std::option::Option<::std::string::String> {
        &self.delivery_topic
    }
    /// <p>Describes whether Amazon SES forwards bounce and complaint notifications as email. <code>true</code> indicates that Amazon SES forwards bounce and complaint notifications as email, while <code>false</code> indicates that bounce and complaint notifications are published only to the specified bounce and complaint Amazon SNS topics.</p>
    /// This field is required.
    pub fn forwarding_enabled(mut self, input: bool) -> Self {
        self.forwarding_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes whether Amazon SES forwards bounce and complaint notifications as email. <code>true</code> indicates that Amazon SES forwards bounce and complaint notifications as email, while <code>false</code> indicates that bounce and complaint notifications are published only to the specified bounce and complaint Amazon SNS topics.</p>
    pub fn set_forwarding_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.forwarding_enabled = input;
        self
    }
    /// <p>Describes whether Amazon SES forwards bounce and complaint notifications as email. <code>true</code> indicates that Amazon SES forwards bounce and complaint notifications as email, while <code>false</code> indicates that bounce and complaint notifications are published only to the specified bounce and complaint Amazon SNS topics.</p>
    pub fn get_forwarding_enabled(&self) -> &::std::option::Option<bool> {
        &self.forwarding_enabled
    }
    /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type <code>Bounce</code>. A value of <code>true</code> specifies that Amazon SES includes headers in bounce notifications, and a value of <code>false</code> specifies that Amazon SES does not include headers in bounce notifications.</p>
    pub fn headers_in_bounce_notifications_enabled(mut self, input: bool) -> Self {
        self.headers_in_bounce_notifications_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type <code>Bounce</code>. A value of <code>true</code> specifies that Amazon SES includes headers in bounce notifications, and a value of <code>false</code> specifies that Amazon SES does not include headers in bounce notifications.</p>
    pub fn set_headers_in_bounce_notifications_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.headers_in_bounce_notifications_enabled = input;
        self
    }
    /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type <code>Bounce</code>. A value of <code>true</code> specifies that Amazon SES includes headers in bounce notifications, and a value of <code>false</code> specifies that Amazon SES does not include headers in bounce notifications.</p>
    pub fn get_headers_in_bounce_notifications_enabled(&self) -> &::std::option::Option<bool> {
        &self.headers_in_bounce_notifications_enabled
    }
    /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type <code>Complaint</code>. A value of <code>true</code> specifies that Amazon SES includes headers in complaint notifications, and a value of <code>false</code> specifies that Amazon SES does not include headers in complaint notifications.</p>
    pub fn headers_in_complaint_notifications_enabled(mut self, input: bool) -> Self {
        self.headers_in_complaint_notifications_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type <code>Complaint</code>. A value of <code>true</code> specifies that Amazon SES includes headers in complaint notifications, and a value of <code>false</code> specifies that Amazon SES does not include headers in complaint notifications.</p>
    pub fn set_headers_in_complaint_notifications_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.headers_in_complaint_notifications_enabled = input;
        self
    }
    /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type <code>Complaint</code>. A value of <code>true</code> specifies that Amazon SES includes headers in complaint notifications, and a value of <code>false</code> specifies that Amazon SES does not include headers in complaint notifications.</p>
    pub fn get_headers_in_complaint_notifications_enabled(&self) -> &::std::option::Option<bool> {
        &self.headers_in_complaint_notifications_enabled
    }
    /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type <code>Delivery</code>. A value of <code>true</code> specifies that Amazon SES includes headers in delivery notifications, and a value of <code>false</code> specifies that Amazon SES does not include headers in delivery notifications.</p>
    pub fn headers_in_delivery_notifications_enabled(mut self, input: bool) -> Self {
        self.headers_in_delivery_notifications_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type <code>Delivery</code>. A value of <code>true</code> specifies that Amazon SES includes headers in delivery notifications, and a value of <code>false</code> specifies that Amazon SES does not include headers in delivery notifications.</p>
    pub fn set_headers_in_delivery_notifications_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.headers_in_delivery_notifications_enabled = input;
        self
    }
    /// <p>Describes whether Amazon SES includes the original email headers in Amazon SNS notifications of type <code>Delivery</code>. A value of <code>true</code> specifies that Amazon SES includes headers in delivery notifications, and a value of <code>false</code> specifies that Amazon SES does not include headers in delivery notifications.</p>
    pub fn get_headers_in_delivery_notifications_enabled(&self) -> &::std::option::Option<bool> {
        &self.headers_in_delivery_notifications_enabled
    }
    /// Consumes the builder and constructs a [`IdentityNotificationAttributes`](crate::types::IdentityNotificationAttributes).
    /// This method will fail if any of the following fields are not set:
    /// - [`bounce_topic`](crate::types::builders::IdentityNotificationAttributesBuilder::bounce_topic)
    /// - [`complaint_topic`](crate::types::builders::IdentityNotificationAttributesBuilder::complaint_topic)
    /// - [`delivery_topic`](crate::types::builders::IdentityNotificationAttributesBuilder::delivery_topic)
    pub fn build(self) -> ::std::result::Result<crate::types::IdentityNotificationAttributes, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::IdentityNotificationAttributes {
            bounce_topic: self.bounce_topic.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bounce_topic",
                    "bounce_topic was not specified but it is required when building IdentityNotificationAttributes",
                )
            })?,
            complaint_topic: self.complaint_topic.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "complaint_topic",
                    "complaint_topic was not specified but it is required when building IdentityNotificationAttributes",
                )
            })?,
            delivery_topic: self.delivery_topic.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "delivery_topic",
                    "delivery_topic was not specified but it is required when building IdentityNotificationAttributes",
                )
            })?,
            forwarding_enabled: self.forwarding_enabled.unwrap_or_default(),
            headers_in_bounce_notifications_enabled: self.headers_in_bounce_notifications_enabled.unwrap_or_default(),
            headers_in_complaint_notifications_enabled: self.headers_in_complaint_notifications_enabled.unwrap_or_default(),
            headers_in_delivery_notifications_enabled: self.headers_in_delivery_notifications_enabled.unwrap_or_default(),
        })
    }
}
