// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about an event destination.</p> <note>
/// <p>When you create or update an event destination, you must provide one, and only one, destination. The destination can be Amazon CloudWatch, Amazon Kinesis Firehose or Amazon Simple Notification Service (Amazon SNS).</p>
/// </note>
/// <p>Event destinations are associated with configuration sets, which enable you to publish email sending events to Amazon CloudWatch, Amazon Kinesis Firehose, or Amazon Simple Notification Service (Amazon SNS). For information about using configuration sets, see the <a href="https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EventDestination {
    /// <p>The name of the event destination. The name must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li>
    /// <li> <p>Contain 64 characters or fewer.</p> </li>
    /// </ul>
    pub name: ::std::string::String,
    /// <p>Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.</p>
    pub enabled: bool,
    /// <p>The type of email sending events to publish to the event destination.</p>
    /// <ul>
    /// <li> <p> <code>send</code> - The call was successful and Amazon SES is attempting to deliver the email.</p> </li>
    /// <li> <p> <code>reject</code> - Amazon SES determined that the email contained a virus and rejected it.</p> </li>
    /// <li> <p> <code>bounce</code> - The recipient's mail server permanently rejected the email. This corresponds to a hard bounce.</p> </li>
    /// <li> <p> <code>complaint</code> - The recipient marked the email as spam.</p> </li>
    /// <li> <p> <code>delivery</code> - Amazon SES successfully delivered the email to the recipient's mail server.</p> </li>
    /// <li> <p> <code>open</code> - The recipient received the email and opened it in their email client.</p> </li>
    /// <li> <p> <code>click</code> - The recipient clicked one or more links in the email.</p> </li>
    /// <li> <p> <code>renderingFailure</code> - Amazon SES did not send the email because of a template rendering issue.</p> </li>
    /// </ul>
    pub matching_event_types: ::std::vec::Vec<crate::types::EventType>,
    /// <p>An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.</p>
    pub kinesis_firehose_destination: ::std::option::Option<crate::types::KinesisFirehoseDestination>,
    /// <p>An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.</p>
    pub cloud_watch_destination: ::std::option::Option<crate::types::CloudWatchDestination>,
    /// <p>An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.</p>
    pub sns_destination: ::std::option::Option<crate::types::SnsDestination>,
}
impl EventDestination {
    /// <p>The name of the event destination. The name must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li>
    /// <li> <p>Contain 64 characters or fewer.</p> </li>
    /// </ul>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>The type of email sending events to publish to the event destination.</p>
    /// <ul>
    /// <li> <p> <code>send</code> - The call was successful and Amazon SES is attempting to deliver the email.</p> </li>
    /// <li> <p> <code>reject</code> - Amazon SES determined that the email contained a virus and rejected it.</p> </li>
    /// <li> <p> <code>bounce</code> - The recipient's mail server permanently rejected the email. This corresponds to a hard bounce.</p> </li>
    /// <li> <p> <code>complaint</code> - The recipient marked the email as spam.</p> </li>
    /// <li> <p> <code>delivery</code> - Amazon SES successfully delivered the email to the recipient's mail server.</p> </li>
    /// <li> <p> <code>open</code> - The recipient received the email and opened it in their email client.</p> </li>
    /// <li> <p> <code>click</code> - The recipient clicked one or more links in the email.</p> </li>
    /// <li> <p> <code>renderingFailure</code> - Amazon SES did not send the email because of a template rendering issue.</p> </li>
    /// </ul>
    pub fn matching_event_types(&self) -> &[crate::types::EventType] {
        use std::ops::Deref;
        self.matching_event_types.deref()
    }
    /// <p>An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.</p>
    pub fn kinesis_firehose_destination(&self) -> ::std::option::Option<&crate::types::KinesisFirehoseDestination> {
        self.kinesis_firehose_destination.as_ref()
    }
    /// <p>An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.</p>
    pub fn cloud_watch_destination(&self) -> ::std::option::Option<&crate::types::CloudWatchDestination> {
        self.cloud_watch_destination.as_ref()
    }
    /// <p>An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.</p>
    pub fn sns_destination(&self) -> ::std::option::Option<&crate::types::SnsDestination> {
        self.sns_destination.as_ref()
    }
}
impl EventDestination {
    /// Creates a new builder-style object to manufacture [`EventDestination`](crate::types::EventDestination).
    pub fn builder() -> crate::types::builders::EventDestinationBuilder {
        crate::types::builders::EventDestinationBuilder::default()
    }
}

/// A builder for [`EventDestination`](crate::types::EventDestination).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EventDestinationBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) matching_event_types: ::std::option::Option<::std::vec::Vec<crate::types::EventType>>,
    pub(crate) kinesis_firehose_destination: ::std::option::Option<crate::types::KinesisFirehoseDestination>,
    pub(crate) cloud_watch_destination: ::std::option::Option<crate::types::CloudWatchDestination>,
    pub(crate) sns_destination: ::std::option::Option<crate::types::SnsDestination>,
}
impl EventDestinationBuilder {
    /// <p>The name of the event destination. The name must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li>
    /// <li> <p>Contain 64 characters or fewer.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the event destination. The name must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li>
    /// <li> <p>Contain 64 characters or fewer.</p> </li>
    /// </ul>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the event destination. The name must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), or dashes (-).</p> </li>
    /// <li> <p>Contain 64 characters or fewer.</p> </li>
    /// </ul>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Sets whether Amazon SES publishes events to this destination when you send an email with the associated configuration set. Set to <code>true</code> to enable publishing to this destination; set to <code>false</code> to prevent publishing to this destination. The default value is <code>false</code>.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// Appends an item to `matching_event_types`.
    ///
    /// To override the contents of this collection use [`set_matching_event_types`](Self::set_matching_event_types).
    ///
    /// <p>The type of email sending events to publish to the event destination.</p>
    /// <ul>
    /// <li> <p> <code>send</code> - The call was successful and Amazon SES is attempting to deliver the email.</p> </li>
    /// <li> <p> <code>reject</code> - Amazon SES determined that the email contained a virus and rejected it.</p> </li>
    /// <li> <p> <code>bounce</code> - The recipient's mail server permanently rejected the email. This corresponds to a hard bounce.</p> </li>
    /// <li> <p> <code>complaint</code> - The recipient marked the email as spam.</p> </li>
    /// <li> <p> <code>delivery</code> - Amazon SES successfully delivered the email to the recipient's mail server.</p> </li>
    /// <li> <p> <code>open</code> - The recipient received the email and opened it in their email client.</p> </li>
    /// <li> <p> <code>click</code> - The recipient clicked one or more links in the email.</p> </li>
    /// <li> <p> <code>renderingFailure</code> - Amazon SES did not send the email because of a template rendering issue.</p> </li>
    /// </ul>
    pub fn matching_event_types(mut self, input: crate::types::EventType) -> Self {
        let mut v = self.matching_event_types.unwrap_or_default();
        v.push(input);
        self.matching_event_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The type of email sending events to publish to the event destination.</p>
    /// <ul>
    /// <li> <p> <code>send</code> - The call was successful and Amazon SES is attempting to deliver the email.</p> </li>
    /// <li> <p> <code>reject</code> - Amazon SES determined that the email contained a virus and rejected it.</p> </li>
    /// <li> <p> <code>bounce</code> - The recipient's mail server permanently rejected the email. This corresponds to a hard bounce.</p> </li>
    /// <li> <p> <code>complaint</code> - The recipient marked the email as spam.</p> </li>
    /// <li> <p> <code>delivery</code> - Amazon SES successfully delivered the email to the recipient's mail server.</p> </li>
    /// <li> <p> <code>open</code> - The recipient received the email and opened it in their email client.</p> </li>
    /// <li> <p> <code>click</code> - The recipient clicked one or more links in the email.</p> </li>
    /// <li> <p> <code>renderingFailure</code> - Amazon SES did not send the email because of a template rendering issue.</p> </li>
    /// </ul>
    pub fn set_matching_event_types(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EventType>>) -> Self {
        self.matching_event_types = input;
        self
    }
    /// <p>The type of email sending events to publish to the event destination.</p>
    /// <ul>
    /// <li> <p> <code>send</code> - The call was successful and Amazon SES is attempting to deliver the email.</p> </li>
    /// <li> <p> <code>reject</code> - Amazon SES determined that the email contained a virus and rejected it.</p> </li>
    /// <li> <p> <code>bounce</code> - The recipient's mail server permanently rejected the email. This corresponds to a hard bounce.</p> </li>
    /// <li> <p> <code>complaint</code> - The recipient marked the email as spam.</p> </li>
    /// <li> <p> <code>delivery</code> - Amazon SES successfully delivered the email to the recipient's mail server.</p> </li>
    /// <li> <p> <code>open</code> - The recipient received the email and opened it in their email client.</p> </li>
    /// <li> <p> <code>click</code> - The recipient clicked one or more links in the email.</p> </li>
    /// <li> <p> <code>renderingFailure</code> - Amazon SES did not send the email because of a template rendering issue.</p> </li>
    /// </ul>
    pub fn get_matching_event_types(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EventType>> {
        &self.matching_event_types
    }
    /// <p>An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.</p>
    pub fn kinesis_firehose_destination(mut self, input: crate::types::KinesisFirehoseDestination) -> Self {
        self.kinesis_firehose_destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.</p>
    pub fn set_kinesis_firehose_destination(mut self, input: ::std::option::Option<crate::types::KinesisFirehoseDestination>) -> Self {
        self.kinesis_firehose_destination = input;
        self
    }
    /// <p>An object that contains the delivery stream ARN and the IAM role ARN associated with an Amazon Kinesis Firehose event destination.</p>
    pub fn get_kinesis_firehose_destination(&self) -> &::std::option::Option<crate::types::KinesisFirehoseDestination> {
        &self.kinesis_firehose_destination
    }
    /// <p>An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.</p>
    pub fn cloud_watch_destination(mut self, input: crate::types::CloudWatchDestination) -> Self {
        self.cloud_watch_destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.</p>
    pub fn set_cloud_watch_destination(mut self, input: ::std::option::Option<crate::types::CloudWatchDestination>) -> Self {
        self.cloud_watch_destination = input;
        self
    }
    /// <p>An object that contains the names, default values, and sources of the dimensions associated with an Amazon CloudWatch event destination.</p>
    pub fn get_cloud_watch_destination(&self) -> &::std::option::Option<crate::types::CloudWatchDestination> {
        &self.cloud_watch_destination
    }
    /// <p>An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.</p>
    pub fn sns_destination(mut self, input: crate::types::SnsDestination) -> Self {
        self.sns_destination = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.</p>
    pub fn set_sns_destination(mut self, input: ::std::option::Option<crate::types::SnsDestination>) -> Self {
        self.sns_destination = input;
        self
    }
    /// <p>An object that contains the topic ARN associated with an Amazon Simple Notification Service (Amazon SNS) event destination.</p>
    pub fn get_sns_destination(&self) -> &::std::option::Option<crate::types::SnsDestination> {
        &self.sns_destination
    }
    /// Consumes the builder and constructs a [`EventDestination`](crate::types::EventDestination).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::EventDestinationBuilder::name)
    /// - [`matching_event_types`](crate::types::builders::EventDestinationBuilder::matching_event_types)
    pub fn build(self) -> ::std::result::Result<crate::types::EventDestination, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EventDestination {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building EventDestination",
                )
            })?,
            enabled: self.enabled.unwrap_or_default(),
            matching_event_types: self.matching_event_types.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "matching_event_types",
                    "matching_event_types was not specified but it is required when building EventDestination",
                )
            })?,
            kinesis_firehose_destination: self.kinesis_firehose_destination,
            cloud_watch_destination: self.cloud_watch_destination,
            sns_destination: self.sns_destination,
        })
    }
}
