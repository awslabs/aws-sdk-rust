// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the dimension configuration to use when you publish email sending events to Amazon CloudWatch.</p>
/// <p>For information about publishing email sending events to Amazon CloudWatch, see the <a href="https://docs.aws.amazon.com/ses/latest/dg/monitor-sending-activity.html">Amazon SES Developer Guide</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CloudWatchDimensionConfiguration {
    /// <p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), dashes (-), or colons (:).</p> </li>
    /// <li> <p>Contain 256 characters or fewer.</p> </li>
    /// </ul>
    pub dimension_name: ::std::string::String,
    /// <p>The place where Amazon SES finds the value of a dimension to publish to Amazon CloudWatch. To use the message tags that you specify using an <code>X-SES-MESSAGE-TAGS</code> header or a parameter to the <code>SendEmail</code>/<code>SendRawEmail</code> API, specify <code>messageTag</code>. To use your own email headers, specify <code>emailHeader</code>. To put a custom tag on any link included in your email, specify <code>linkTag</code>.</p>
    pub dimension_value_source: crate::types::DimensionValueSource,
    /// <p>The default value of the dimension that is published to Amazon CloudWatch if you do not provide the value of the dimension when you send an email. The default value must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), dashes (-), at signs (@), or periods (.).</p> </li>
    /// <li> <p>Contain 256 characters or fewer.</p> </li>
    /// </ul>
    pub default_dimension_value: ::std::string::String,
}
impl CloudWatchDimensionConfiguration {
    /// <p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), dashes (-), or colons (:).</p> </li>
    /// <li> <p>Contain 256 characters or fewer.</p> </li>
    /// </ul>
    pub fn dimension_name(&self) -> &str {
        use std::ops::Deref;
        self.dimension_name.deref()
    }
    /// <p>The place where Amazon SES finds the value of a dimension to publish to Amazon CloudWatch. To use the message tags that you specify using an <code>X-SES-MESSAGE-TAGS</code> header or a parameter to the <code>SendEmail</code>/<code>SendRawEmail</code> API, specify <code>messageTag</code>. To use your own email headers, specify <code>emailHeader</code>. To put a custom tag on any link included in your email, specify <code>linkTag</code>.</p>
    pub fn dimension_value_source(&self) -> &crate::types::DimensionValueSource {
        &self.dimension_value_source
    }
    /// <p>The default value of the dimension that is published to Amazon CloudWatch if you do not provide the value of the dimension when you send an email. The default value must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), dashes (-), at signs (@), or periods (.).</p> </li>
    /// <li> <p>Contain 256 characters or fewer.</p> </li>
    /// </ul>
    pub fn default_dimension_value(&self) -> &str {
        use std::ops::Deref;
        self.default_dimension_value.deref()
    }
}
impl CloudWatchDimensionConfiguration {
    /// Creates a new builder-style object to manufacture [`CloudWatchDimensionConfiguration`](crate::types::CloudWatchDimensionConfiguration).
    pub fn builder() -> crate::types::builders::CloudWatchDimensionConfigurationBuilder {
        crate::types::builders::CloudWatchDimensionConfigurationBuilder::default()
    }
}

/// A builder for [`CloudWatchDimensionConfiguration`](crate::types::CloudWatchDimensionConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CloudWatchDimensionConfigurationBuilder {
    pub(crate) dimension_name: ::std::option::Option<::std::string::String>,
    pub(crate) dimension_value_source: ::std::option::Option<crate::types::DimensionValueSource>,
    pub(crate) default_dimension_value: ::std::option::Option<::std::string::String>,
}
impl CloudWatchDimensionConfigurationBuilder {
    /// <p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), dashes (-), or colons (:).</p> </li>
    /// <li> <p>Contain 256 characters or fewer.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn dimension_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dimension_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), dashes (-), or colons (:).</p> </li>
    /// <li> <p>Contain 256 characters or fewer.</p> </li>
    /// </ul>
    pub fn set_dimension_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dimension_name = input;
        self
    }
    /// <p>The name of an Amazon CloudWatch dimension associated with an email sending metric. The name must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), dashes (-), or colons (:).</p> </li>
    /// <li> <p>Contain 256 characters or fewer.</p> </li>
    /// </ul>
    pub fn get_dimension_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.dimension_name
    }
    /// <p>The place where Amazon SES finds the value of a dimension to publish to Amazon CloudWatch. To use the message tags that you specify using an <code>X-SES-MESSAGE-TAGS</code> header or a parameter to the <code>SendEmail</code>/<code>SendRawEmail</code> API, specify <code>messageTag</code>. To use your own email headers, specify <code>emailHeader</code>. To put a custom tag on any link included in your email, specify <code>linkTag</code>.</p>
    /// This field is required.
    pub fn dimension_value_source(mut self, input: crate::types::DimensionValueSource) -> Self {
        self.dimension_value_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The place where Amazon SES finds the value of a dimension to publish to Amazon CloudWatch. To use the message tags that you specify using an <code>X-SES-MESSAGE-TAGS</code> header or a parameter to the <code>SendEmail</code>/<code>SendRawEmail</code> API, specify <code>messageTag</code>. To use your own email headers, specify <code>emailHeader</code>. To put a custom tag on any link included in your email, specify <code>linkTag</code>.</p>
    pub fn set_dimension_value_source(mut self, input: ::std::option::Option<crate::types::DimensionValueSource>) -> Self {
        self.dimension_value_source = input;
        self
    }
    /// <p>The place where Amazon SES finds the value of a dimension to publish to Amazon CloudWatch. To use the message tags that you specify using an <code>X-SES-MESSAGE-TAGS</code> header or a parameter to the <code>SendEmail</code>/<code>SendRawEmail</code> API, specify <code>messageTag</code>. To use your own email headers, specify <code>emailHeader</code>. To put a custom tag on any link included in your email, specify <code>linkTag</code>.</p>
    pub fn get_dimension_value_source(&self) -> &::std::option::Option<crate::types::DimensionValueSource> {
        &self.dimension_value_source
    }
    /// <p>The default value of the dimension that is published to Amazon CloudWatch if you do not provide the value of the dimension when you send an email. The default value must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), dashes (-), at signs (@), or periods (.).</p> </li>
    /// <li> <p>Contain 256 characters or fewer.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn default_dimension_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.default_dimension_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The default value of the dimension that is published to Amazon CloudWatch if you do not provide the value of the dimension when you send an email. The default value must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), dashes (-), at signs (@), or periods (.).</p> </li>
    /// <li> <p>Contain 256 characters or fewer.</p> </li>
    /// </ul>
    pub fn set_default_dimension_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.default_dimension_value = input;
        self
    }
    /// <p>The default value of the dimension that is published to Amazon CloudWatch if you do not provide the value of the dimension when you send an email. The default value must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), underscores (_), dashes (-), at signs (@), or periods (.).</p> </li>
    /// <li> <p>Contain 256 characters or fewer.</p> </li>
    /// </ul>
    pub fn get_default_dimension_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.default_dimension_value
    }
    /// Consumes the builder and constructs a [`CloudWatchDimensionConfiguration`](crate::types::CloudWatchDimensionConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`dimension_name`](crate::types::builders::CloudWatchDimensionConfigurationBuilder::dimension_name)
    /// - [`dimension_value_source`](crate::types::builders::CloudWatchDimensionConfigurationBuilder::dimension_value_source)
    /// - [`default_dimension_value`](crate::types::builders::CloudWatchDimensionConfigurationBuilder::default_dimension_value)
    pub fn build(self) -> ::std::result::Result<crate::types::CloudWatchDimensionConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CloudWatchDimensionConfiguration {
            dimension_name: self.dimension_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dimension_name",
                    "dimension_name was not specified but it is required when building CloudWatchDimensionConfiguration",
                )
            })?,
            dimension_value_source: self.dimension_value_source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dimension_value_source",
                    "dimension_value_source was not specified but it is required when building CloudWatchDimensionConfiguration",
                )
            })?,
            default_dimension_value: self.default_dimension_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "default_dimension_value",
                    "default_dimension_value was not specified but it is required when building CloudWatchDimensionConfiguration",
                )
            })?,
        })
    }
}
