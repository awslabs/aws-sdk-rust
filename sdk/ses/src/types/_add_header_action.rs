// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>When included in a receipt rule, this action adds a header to the received email.</p>
/// <p>For information about adding a header using a receipt rule, see the <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-action-add-header.html">Amazon SES Developer Guide</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddHeaderAction {
    /// <p>The name of the header to add. Must be between 1 and 50 characters, inclusive, and consist of alphanumeric (a-z, A-Z, 0-9) characters and dashes only.</p>
    #[doc(hidden)]
    pub header_name: std::option::Option<std::string::String>,
    /// <p>Must be less than 2048 characters, and must not contain newline characters ("\r" or "\n").</p>
    #[doc(hidden)]
    pub header_value: std::option::Option<std::string::String>,
}
impl AddHeaderAction {
    /// <p>The name of the header to add. Must be between 1 and 50 characters, inclusive, and consist of alphanumeric (a-z, A-Z, 0-9) characters and dashes only.</p>
    pub fn header_name(&self) -> std::option::Option<&str> {
        self.header_name.as_deref()
    }
    /// <p>Must be less than 2048 characters, and must not contain newline characters ("\r" or "\n").</p>
    pub fn header_value(&self) -> std::option::Option<&str> {
        self.header_value.as_deref()
    }
}
impl AddHeaderAction {
    /// Creates a new builder-style object to manufacture [`AddHeaderAction`](crate::types::AddHeaderAction).
    pub fn builder() -> crate::types::builders::AddHeaderActionBuilder {
        crate::types::builders::AddHeaderActionBuilder::default()
    }
}

/// A builder for [`AddHeaderAction`](crate::types::AddHeaderAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AddHeaderActionBuilder {
    pub(crate) header_name: std::option::Option<std::string::String>,
    pub(crate) header_value: std::option::Option<std::string::String>,
}
impl AddHeaderActionBuilder {
    /// <p>The name of the header to add. Must be between 1 and 50 characters, inclusive, and consist of alphanumeric (a-z, A-Z, 0-9) characters and dashes only.</p>
    pub fn header_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.header_name = Some(input.into());
        self
    }
    /// <p>The name of the header to add. Must be between 1 and 50 characters, inclusive, and consist of alphanumeric (a-z, A-Z, 0-9) characters and dashes only.</p>
    pub fn set_header_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.header_name = input;
        self
    }
    /// <p>Must be less than 2048 characters, and must not contain newline characters ("\r" or "\n").</p>
    pub fn header_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.header_value = Some(input.into());
        self
    }
    /// <p>Must be less than 2048 characters, and must not contain newline characters ("\r" or "\n").</p>
    pub fn set_header_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.header_value = input;
        self
    }
    /// Consumes the builder and constructs a [`AddHeaderAction`](crate::types::AddHeaderAction).
    pub fn build(self) -> crate::types::AddHeaderAction {
        crate::types::AddHeaderAction {
            header_name: self.header_name,
            header_value: self.header_value,
        }
    }
}
