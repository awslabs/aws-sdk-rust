// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates that one or more of the replacement values for the specified template was not specified. Ensure that the TemplateData object contains references to all of the replacement tags in the specified template.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MissingRenderingAttributeException {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub template_name: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    pub(crate) meta: aws_smithy_types::error::ErrorMetadata,
}
impl MissingRenderingAttributeException {
    #[allow(missing_docs)] // documentation missing in model
    pub fn template_name(&self) -> std::option::Option<&str> {
        self.template_name.as_deref()
    }
}
impl MissingRenderingAttributeException {
    /// Returns the error message.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for MissingRenderingAttributeException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "MissingRenderingAttributeException")?;
        if let Some(inner_1) = &self.message {
            {
                write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl std::error::Error for MissingRenderingAttributeException {}
impl aws_http::request_id::RequestId for crate::types::error::MissingRenderingAttributeException {
    fn request_id(&self) -> Option<&str> {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata
    for MissingRenderingAttributeException
{
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl MissingRenderingAttributeException {
    /// Creates a new builder-style object to manufacture [`MissingRenderingAttributeException`](crate::types::error::MissingRenderingAttributeException).
    pub fn builder() -> crate::types::error::builders::MissingRenderingAttributeExceptionBuilder {
        crate::types::error::builders::MissingRenderingAttributeExceptionBuilder::default()
    }
}

/// A builder for [`MissingRenderingAttributeException`](crate::types::error::MissingRenderingAttributeException).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MissingRenderingAttributeExceptionBuilder {
    pub(crate) template_name: std::option::Option<std::string::String>,
    pub(crate) message: std::option::Option<std::string::String>,
    meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
}
impl MissingRenderingAttributeExceptionBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn template_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.template_name = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_template_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template_name = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(
        &mut self,
        meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`MissingRenderingAttributeException`](crate::types::error::MissingRenderingAttributeException).
    pub fn build(self) -> crate::types::error::MissingRenderingAttributeException {
        crate::types::error::MissingRenderingAttributeException {
            template_name: self.template_name,
            message: self.message,
            meta: self.meta.unwrap_or_default(),
        }
    }
}
