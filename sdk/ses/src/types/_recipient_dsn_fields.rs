// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Recipient-related information to include in the Delivery Status Notification (DSN) when an email that Amazon SES receives on your behalf bounces.</p>
/// <p>For information about receiving email through Amazon SES, see the <a href="https://docs.aws.amazon.com/ses/latest/dg/receiving-email.html">Amazon SES Developer Guide</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecipientDsnFields {
    /// <p>The email address that the message was ultimately delivered to. This corresponds to the <code>Final-Recipient</code> in the DSN. If not specified, <code>FinalRecipient</code> is set to the <code>Recipient</code> specified in the <code>BouncedRecipientInfo</code> structure. Either <code>FinalRecipient</code> or the recipient in <code>BouncedRecipientInfo</code> must be a recipient of the original bounced message.</p> <note>
    /// <p>Do not prepend the <code>FinalRecipient</code> email address with <code>rfc 822;</code>, as described in <a href="https://tools.ietf.org/html/rfc3798">RFC 3798</a>.</p>
    /// </note>
    pub final_recipient: ::std::option::Option<::std::string::String>,
    /// <p>The action performed by the reporting mail transfer agent (MTA) as a result of its attempt to deliver the message to the recipient address. This is required by <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>.</p>
    pub action: crate::types::DsnAction,
    /// <p>The MTA to which the remote MTA attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). This parameter typically applies only to propagating synchronous bounces.</p>
    pub remote_mta: ::std::option::Option<::std::string::String>,
    /// <p>The status code that indicates what went wrong. This is required by <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>.</p>
    pub status: ::std::string::String,
    /// <p>An extended explanation of what went wrong; this is usually an SMTP response. See <a href="https://tools.ietf.org/html/rfc3463">RFC 3463</a> for the correct formatting of this parameter.</p>
    pub diagnostic_code: ::std::option::Option<::std::string::String>,
    /// <p>The time the final delivery attempt was made, in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.</p>
    pub last_attempt_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Additional X-headers to include in the DSN.</p>
    pub extension_fields: ::std::option::Option<::std::vec::Vec<crate::types::ExtensionField>>,
}
impl RecipientDsnFields {
    /// <p>The email address that the message was ultimately delivered to. This corresponds to the <code>Final-Recipient</code> in the DSN. If not specified, <code>FinalRecipient</code> is set to the <code>Recipient</code> specified in the <code>BouncedRecipientInfo</code> structure. Either <code>FinalRecipient</code> or the recipient in <code>BouncedRecipientInfo</code> must be a recipient of the original bounced message.</p> <note>
    /// <p>Do not prepend the <code>FinalRecipient</code> email address with <code>rfc 822;</code>, as described in <a href="https://tools.ietf.org/html/rfc3798">RFC 3798</a>.</p>
    /// </note>
    pub fn final_recipient(&self) -> ::std::option::Option<&str> {
        self.final_recipient.as_deref()
    }
    /// <p>The action performed by the reporting mail transfer agent (MTA) as a result of its attempt to deliver the message to the recipient address. This is required by <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>.</p>
    pub fn action(&self) -> &crate::types::DsnAction {
        &self.action
    }
    /// <p>The MTA to which the remote MTA attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). This parameter typically applies only to propagating synchronous bounces.</p>
    pub fn remote_mta(&self) -> ::std::option::Option<&str> {
        self.remote_mta.as_deref()
    }
    /// <p>The status code that indicates what went wrong. This is required by <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>.</p>
    pub fn status(&self) -> &str {
        use std::ops::Deref;
        self.status.deref()
    }
    /// <p>An extended explanation of what went wrong; this is usually an SMTP response. See <a href="https://tools.ietf.org/html/rfc3463">RFC 3463</a> for the correct formatting of this parameter.</p>
    pub fn diagnostic_code(&self) -> ::std::option::Option<&str> {
        self.diagnostic_code.as_deref()
    }
    /// <p>The time the final delivery attempt was made, in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.</p>
    pub fn last_attempt_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_attempt_date.as_ref()
    }
    /// <p>Additional X-headers to include in the DSN.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.extension_fields.is_none()`.
    pub fn extension_fields(&self) -> &[crate::types::ExtensionField] {
        self.extension_fields.as_deref().unwrap_or_default()
    }
}
impl RecipientDsnFields {
    /// Creates a new builder-style object to manufacture [`RecipientDsnFields`](crate::types::RecipientDsnFields).
    pub fn builder() -> crate::types::builders::RecipientDsnFieldsBuilder {
        crate::types::builders::RecipientDsnFieldsBuilder::default()
    }
}

/// A builder for [`RecipientDsnFields`](crate::types::RecipientDsnFields).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecipientDsnFieldsBuilder {
    pub(crate) final_recipient: ::std::option::Option<::std::string::String>,
    pub(crate) action: ::std::option::Option<crate::types::DsnAction>,
    pub(crate) remote_mta: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) diagnostic_code: ::std::option::Option<::std::string::String>,
    pub(crate) last_attempt_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) extension_fields: ::std::option::Option<::std::vec::Vec<crate::types::ExtensionField>>,
}
impl RecipientDsnFieldsBuilder {
    /// <p>The email address that the message was ultimately delivered to. This corresponds to the <code>Final-Recipient</code> in the DSN. If not specified, <code>FinalRecipient</code> is set to the <code>Recipient</code> specified in the <code>BouncedRecipientInfo</code> structure. Either <code>FinalRecipient</code> or the recipient in <code>BouncedRecipientInfo</code> must be a recipient of the original bounced message.</p> <note>
    /// <p>Do not prepend the <code>FinalRecipient</code> email address with <code>rfc 822;</code>, as described in <a href="https://tools.ietf.org/html/rfc3798">RFC 3798</a>.</p>
    /// </note>
    pub fn final_recipient(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.final_recipient = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The email address that the message was ultimately delivered to. This corresponds to the <code>Final-Recipient</code> in the DSN. If not specified, <code>FinalRecipient</code> is set to the <code>Recipient</code> specified in the <code>BouncedRecipientInfo</code> structure. Either <code>FinalRecipient</code> or the recipient in <code>BouncedRecipientInfo</code> must be a recipient of the original bounced message.</p> <note>
    /// <p>Do not prepend the <code>FinalRecipient</code> email address with <code>rfc 822;</code>, as described in <a href="https://tools.ietf.org/html/rfc3798">RFC 3798</a>.</p>
    /// </note>
    pub fn set_final_recipient(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.final_recipient = input;
        self
    }
    /// <p>The email address that the message was ultimately delivered to. This corresponds to the <code>Final-Recipient</code> in the DSN. If not specified, <code>FinalRecipient</code> is set to the <code>Recipient</code> specified in the <code>BouncedRecipientInfo</code> structure. Either <code>FinalRecipient</code> or the recipient in <code>BouncedRecipientInfo</code> must be a recipient of the original bounced message.</p> <note>
    /// <p>Do not prepend the <code>FinalRecipient</code> email address with <code>rfc 822;</code>, as described in <a href="https://tools.ietf.org/html/rfc3798">RFC 3798</a>.</p>
    /// </note>
    pub fn get_final_recipient(&self) -> &::std::option::Option<::std::string::String> {
        &self.final_recipient
    }
    /// <p>The action performed by the reporting mail transfer agent (MTA) as a result of its attempt to deliver the message to the recipient address. This is required by <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>.</p>
    /// This field is required.
    pub fn action(mut self, input: crate::types::DsnAction) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The action performed by the reporting mail transfer agent (MTA) as a result of its attempt to deliver the message to the recipient address. This is required by <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::DsnAction>) -> Self {
        self.action = input;
        self
    }
    /// <p>The action performed by the reporting mail transfer agent (MTA) as a result of its attempt to deliver the message to the recipient address. This is required by <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::DsnAction> {
        &self.action
    }
    /// <p>The MTA to which the remote MTA attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). This parameter typically applies only to propagating synchronous bounces.</p>
    pub fn remote_mta(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.remote_mta = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MTA to which the remote MTA attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). This parameter typically applies only to propagating synchronous bounces.</p>
    pub fn set_remote_mta(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.remote_mta = input;
        self
    }
    /// <p>The MTA to which the remote MTA attempted to deliver the message, formatted as specified in <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a> (<code>mta-name-type; mta-name</code>). This parameter typically applies only to propagating synchronous bounces.</p>
    pub fn get_remote_mta(&self) -> &::std::option::Option<::std::string::String> {
        &self.remote_mta
    }
    /// <p>The status code that indicates what went wrong. This is required by <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>.</p>
    /// This field is required.
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status code that indicates what went wrong. This is required by <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status code that indicates what went wrong. This is required by <a href="https://tools.ietf.org/html/rfc3464">RFC 3464</a>.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>An extended explanation of what went wrong; this is usually an SMTP response. See <a href="https://tools.ietf.org/html/rfc3463">RFC 3463</a> for the correct formatting of this parameter.</p>
    pub fn diagnostic_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.diagnostic_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An extended explanation of what went wrong; this is usually an SMTP response. See <a href="https://tools.ietf.org/html/rfc3463">RFC 3463</a> for the correct formatting of this parameter.</p>
    pub fn set_diagnostic_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.diagnostic_code = input;
        self
    }
    /// <p>An extended explanation of what went wrong; this is usually an SMTP response. See <a href="https://tools.ietf.org/html/rfc3463">RFC 3463</a> for the correct formatting of this parameter.</p>
    pub fn get_diagnostic_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.diagnostic_code
    }
    /// <p>The time the final delivery attempt was made, in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.</p>
    pub fn last_attempt_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_attempt_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time the final delivery attempt was made, in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.</p>
    pub fn set_last_attempt_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_attempt_date = input;
        self
    }
    /// <p>The time the final delivery attempt was made, in <a href="https://www.ietf.org/rfc/rfc0822.txt">RFC 822</a> date-time format.</p>
    pub fn get_last_attempt_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_attempt_date
    }
    /// Appends an item to `extension_fields`.
    ///
    /// To override the contents of this collection use [`set_extension_fields`](Self::set_extension_fields).
    ///
    /// <p>Additional X-headers to include in the DSN.</p>
    pub fn extension_fields(mut self, input: crate::types::ExtensionField) -> Self {
        let mut v = self.extension_fields.unwrap_or_default();
        v.push(input);
        self.extension_fields = ::std::option::Option::Some(v);
        self
    }
    /// <p>Additional X-headers to include in the DSN.</p>
    pub fn set_extension_fields(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExtensionField>>) -> Self {
        self.extension_fields = input;
        self
    }
    /// <p>Additional X-headers to include in the DSN.</p>
    pub fn get_extension_fields(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExtensionField>> {
        &self.extension_fields
    }
    /// Consumes the builder and constructs a [`RecipientDsnFields`](crate::types::RecipientDsnFields).
    /// This method will fail if any of the following fields are not set:
    /// - [`action`](crate::types::builders::RecipientDsnFieldsBuilder::action)
    /// - [`status`](crate::types::builders::RecipientDsnFieldsBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::RecipientDsnFields, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RecipientDsnFields {
            final_recipient: self.final_recipient,
            action: self.action.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action",
                    "action was not specified but it is required when building RecipientDsnFields",
                )
            })?,
            remote_mta: self.remote_mta,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building RecipientDsnFields",
                )
            })?,
            diagnostic_code: self.diagnostic_code,
            last_attempt_date: self.last_attempt_date,
            extension_fields: self.extension_fields,
        })
    }
}
