// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_update_custom_verification_email_template_http_error(response: &http::Response<bytes::Bytes>) -> std::result::Result<crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateOutput, crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError>{
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
                                Some(code) => code,
                                None => return Err(crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError::unhandled(generic))
                            };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CustomVerificationEmailInvalidContent" => crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError::CustomVerificationEmailInvalidContentException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CustomVerificationEmailInvalidContentExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_custom_verification_email_invalid_content_exception::de_custom_verification_email_invalid_content_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "CustomVerificationEmailTemplateDoesNotExist" => crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError::CustomVerificationEmailTemplateDoesNotExistException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CustomVerificationEmailTemplateDoesNotExistExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_custom_verification_email_template_does_not_exist_exception::de_custom_verification_email_template_does_not_exist_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "FromEmailAddressNotVerified" => crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError::FromEmailAddressNotVerifiedException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::FromEmailAddressNotVerifiedExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_from_email_address_not_verified_exception::de_from_email_address_not_verified_exception_xml_err(response.body().as_ref(), output).map_err(crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_update_custom_verification_email_template_http_response(response: &http::Response<bytes::Bytes>) -> std::result::Result<crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateOutput, crate::operation::update_custom_verification_email_template::UpdateCustomVerificationEmailTemplateError>{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::update_custom_verification_email_template::builders::UpdateCustomVerificationEmailTemplateOutputBuilder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
