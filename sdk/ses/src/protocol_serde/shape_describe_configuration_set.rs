// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_configuration_set_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeConfigurationSetOutput,
    crate::error::DescribeConfigurationSetError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::error::DescribeConfigurationSetError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeConfigurationSetError::unhandled(
                generic,
            ))
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ConfigurationSetDoesNotExist" => {
            crate::error::DescribeConfigurationSetError::ConfigurationSetDoesNotExistException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::configuration_set_does_not_exist_exception::Builder::default(
                        );
                    let _ = response;
                    output = crate::protocol_serde::shape_configuration_set_does_not_exist_exception::de_configuration_set_does_not_exist_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::DescribeConfigurationSetError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        _ => crate::error::DescribeConfigurationSetError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_describe_configuration_set_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::DescribeConfigurationSetOutput,
    crate::error::DescribeConfigurationSetError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_configuration_set_output::Builder::default();
        let _ = response;
        output =
            crate::protocol_serde::shape_describe_configuration_set::de_describe_configuration_set(
                response.body().as_ref(),
                output,
            )
            .map_err(crate::error::DescribeConfigurationSetError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_describe_configuration_set(
    inp: &[u8],
    mut builder: crate::output::describe_configuration_set_output::Builder,
) -> Result<
    crate::output::describe_configuration_set_output::Builder,
    aws_smithy_xml::decode::XmlDecodeError,
> {
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("DescribeConfigurationSetResponse")) {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected DescribeConfigurationSetResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DescribeConfigurationSetResult")) {
            return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
                "invalid result, expected DescribeConfigurationSetResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("ConfigurationSet") /* ConfigurationSet com.amazonaws.ses.synthetic#DescribeConfigurationSetOutput$ConfigurationSet */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_configuration_set::de_configuration_set(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_configuration_set(var_1);
            }
            ,
            s if s.matches("EventDestinations") /* EventDestinations com.amazonaws.ses.synthetic#DescribeConfigurationSetOutput$EventDestinations */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_event_destinations::de_event_destinations(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_event_destinations(var_2);
            }
            ,
            s if s.matches("TrackingOptions") /* TrackingOptions com.amazonaws.ses.synthetic#DescribeConfigurationSetOutput$TrackingOptions */ =>  {
                let var_3 =
                    Some(
                        crate::protocol_serde::shape_tracking_options::de_tracking_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_tracking_options(var_3);
            }
            ,
            s if s.matches("DeliveryOptions") /* DeliveryOptions com.amazonaws.ses.synthetic#DescribeConfigurationSetOutput$DeliveryOptions */ =>  {
                let var_4 =
                    Some(
                        crate::protocol_serde::shape_delivery_options::de_delivery_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_delivery_options(var_4);
            }
            ,
            s if s.matches("ReputationOptions") /* ReputationOptions com.amazonaws.ses.synthetic#DescribeConfigurationSetOutput$ReputationOptions */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_reputation_options::de_reputation_options(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_reputation_options(var_5);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(
            "expected DescribeConfigurationSetResult tag",
        ));
    };
    Ok(builder)
}
