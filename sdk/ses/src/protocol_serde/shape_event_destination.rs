// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_event_destination(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::types::EventDestination,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Name");
    if let Some(var_2) = &input.name {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Enabled");
    if input.enabled {
        scope_3.boolean(input.enabled);
    }
    #[allow(unused_mut)]
    let mut scope_4 = writer.prefix("MatchingEventTypes");
    if let Some(var_5) = &input.matching_event_types {
        let mut list_7 = scope_4.start_list(false, None);
        for item_6 in var_5 {
            #[allow(unused_mut)]
            let mut entry_8 = list_7.entry();
            entry_8.string(item_6.as_str());
        }
        list_7.finish();
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("KinesisFirehoseDestination");
    if let Some(var_10) = &input.kinesis_firehose_destination {
        crate::protocol_serde::shape_kinesis_firehose_destination::ser_kinesis_firehose_destination(scope_9, var_10)?;
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("CloudWatchDestination");
    if let Some(var_12) = &input.cloud_watch_destination {
        crate::protocol_serde::shape_cloud_watch_destination::ser_cloud_watch_destination(
            scope_11, var_12,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("SNSDestination");
    if let Some(var_14) = &input.sns_destination {
        crate::protocol_serde::shape_sns_destination::ser_sns_destination(scope_13, var_14)?;
    }
    Ok(())
}

pub fn de_event_destination(
    decoder: &mut aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::EventDestination, aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::EventDestination::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("Name") /* Name com.amazonaws.ses#EventDestination$Name */ =>  {
                let var_15 =
                    Some(
                        Result::<std::string::String, aws_smithy_xml::decode::XmlDecodeError>::Ok(
                            aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name(var_15);
            }
            ,
            s if s.matches("Enabled") /* Enabled com.amazonaws.ses#EventDestination$Enabled */ =>  {
                let var_16 =
                    Some(
                         {
                            <bool as aws_smithy_types::primitive::Parse>::parse_smithy_primitive(
                                aws_smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|aws_smithy_xml::decode::XmlDecodeError::custom("expected (boolean: `com.amazonaws.ses#Enabled`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_enabled(var_16);
            }
            ,
            s if s.matches("MatchingEventTypes") /* MatchingEventTypes com.amazonaws.ses#EventDestination$MatchingEventTypes */ =>  {
                let var_17 =
                    Some(
                        crate::protocol_serde::shape_event_types::de_event_types(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_matching_event_types(var_17);
            }
            ,
            s if s.matches("KinesisFirehoseDestination") /* KinesisFirehoseDestination com.amazonaws.ses#EventDestination$KinesisFirehoseDestination */ =>  {
                let var_18 =
                    Some(
                        crate::protocol_serde::shape_kinesis_firehose_destination::de_kinesis_firehose_destination(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_kinesis_firehose_destination(var_18);
            }
            ,
            s if s.matches("CloudWatchDestination") /* CloudWatchDestination com.amazonaws.ses#EventDestination$CloudWatchDestination */ =>  {
                let var_19 =
                    Some(
                        crate::protocol_serde::shape_cloud_watch_destination::de_cloud_watch_destination(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_cloud_watch_destination(var_19);
            }
            ,
            s if s.matches("SNSDestination") /* SNSDestination com.amazonaws.ses#EventDestination$SNSDestination */ =>  {
                let var_20 =
                    Some(
                        crate::protocol_serde::shape_sns_destination::de_sns_destination(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_sns_destination(var_20);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
