// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_cloud_watch_destination(
    mut writer: ::aws_smithy_query::QueryValueWriter,
    input: &crate::types::CloudWatchDestination,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DimensionConfigurations");
    {
        let mut list_3 = scope_1.start_list(false, None);
        for item_2 in &input.dimension_configurations {
            #[allow(unused_mut)]
            let mut entry_4 = list_3.entry();
            crate::protocol_serde::shape_cloud_watch_dimension_configuration::ser_cloud_watch_dimension_configuration(entry_4, item_2)?;
        }
        list_3.finish();
    }
    Ok(())
}

#[allow(clippy::needless_question_mark)]
pub fn de_cloud_watch_destination(
    decoder: &mut ::aws_smithy_xml::decode::ScopedDecoder,
) -> Result<crate::types::CloudWatchDestination, ::aws_smithy_xml::decode::XmlDecodeError> {
    #[allow(unused_mut)]
    let mut builder = crate::types::CloudWatchDestination::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("DimensionConfigurations") /* DimensionConfigurations com.amazonaws.ses#CloudWatchDestination$DimensionConfigurations */ =>  {
                let var_5 =
                    Some(
                        crate::protocol_serde::shape_cloud_watch_dimension_configurations::de_cloud_watch_dimension_configurations(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_dimension_configurations(var_5);
            }
            ,
            _ => {}
        }
    }
    Ok(crate::serde_util::cloud_watch_destination_correct_errors(builder)
        .build()
        .map_err(|_| ::aws_smithy_xml::decode::XmlDecodeError::custom("missing field"))?)
}
