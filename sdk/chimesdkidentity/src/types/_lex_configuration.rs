// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration for an Amazon Lex V2 bot.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LexConfiguration {
    /// <important>
    /// <p> <b>Deprecated</b>. Use <code>InvokedBy</code> instead.</p>
    /// </important>
    /// <p>Determines whether the Amazon Lex V2 bot responds to all standard messages. Control messages are not supported.</p>
    pub responds_to: ::std::option::Option<crate::types::RespondsTo>,
    /// <p>Specifies the type of message that triggers a bot.</p>
    pub invoked_by: ::std::option::Option<crate::types::InvokedBy>,
    /// <p>The ARN of the Amazon Lex V2 bot's alias. The ARN uses this format: <code>arn:aws:lex:REGION:ACCOUNT:bot-alias/MYBOTID/MYBOTALIAS</code> </p>
    pub lex_bot_alias_arn: ::std::string::String,
    /// <p>Identifies the Amazon Lex V2 bot's language and locale. The string must match one of the supported locales in Amazon Lex V2. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> in the <i>Amazon Lex V2 Developer Guide</i>.</p>
    pub locale_id: ::std::string::String,
    /// <p>The name of the welcome intent configured in the Amazon Lex V2 bot.</p>
    pub welcome_intent: ::std::option::Option<::std::string::String>,
}
impl LexConfiguration {
    /// <important>
    /// <p> <b>Deprecated</b>. Use <code>InvokedBy</code> instead.</p>
    /// </important>
    /// <p>Determines whether the Amazon Lex V2 bot responds to all standard messages. Control messages are not supported.</p>
    pub fn responds_to(&self) -> ::std::option::Option<&crate::types::RespondsTo> {
        self.responds_to.as_ref()
    }
    /// <p>Specifies the type of message that triggers a bot.</p>
    pub fn invoked_by(&self) -> ::std::option::Option<&crate::types::InvokedBy> {
        self.invoked_by.as_ref()
    }
    /// <p>The ARN of the Amazon Lex V2 bot's alias. The ARN uses this format: <code>arn:aws:lex:REGION:ACCOUNT:bot-alias/MYBOTID/MYBOTALIAS</code> </p>
    pub fn lex_bot_alias_arn(&self) -> &str {
        use std::ops::Deref;
        self.lex_bot_alias_arn.deref()
    }
    /// <p>Identifies the Amazon Lex V2 bot's language and locale. The string must match one of the supported locales in Amazon Lex V2. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> in the <i>Amazon Lex V2 Developer Guide</i>.</p>
    pub fn locale_id(&self) -> &str {
        use std::ops::Deref;
        self.locale_id.deref()
    }
    /// <p>The name of the welcome intent configured in the Amazon Lex V2 bot.</p>
    pub fn welcome_intent(&self) -> ::std::option::Option<&str> {
        self.welcome_intent.as_deref()
    }
}
impl LexConfiguration {
    /// Creates a new builder-style object to manufacture [`LexConfiguration`](crate::types::LexConfiguration).
    pub fn builder() -> crate::types::builders::LexConfigurationBuilder {
        crate::types::builders::LexConfigurationBuilder::default()
    }
}

/// A builder for [`LexConfiguration`](crate::types::LexConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LexConfigurationBuilder {
    pub(crate) responds_to: ::std::option::Option<crate::types::RespondsTo>,
    pub(crate) invoked_by: ::std::option::Option<crate::types::InvokedBy>,
    pub(crate) lex_bot_alias_arn: ::std::option::Option<::std::string::String>,
    pub(crate) locale_id: ::std::option::Option<::std::string::String>,
    pub(crate) welcome_intent: ::std::option::Option<::std::string::String>,
}
impl LexConfigurationBuilder {
    /// <important>
    /// <p> <b>Deprecated</b>. Use <code>InvokedBy</code> instead.</p>
    /// </important>
    /// <p>Determines whether the Amazon Lex V2 bot responds to all standard messages. Control messages are not supported.</p>
    pub fn responds_to(mut self, input: crate::types::RespondsTo) -> Self {
        self.responds_to = ::std::option::Option::Some(input);
        self
    }
    /// <important>
    /// <p> <b>Deprecated</b>. Use <code>InvokedBy</code> instead.</p>
    /// </important>
    /// <p>Determines whether the Amazon Lex V2 bot responds to all standard messages. Control messages are not supported.</p>
    pub fn set_responds_to(mut self, input: ::std::option::Option<crate::types::RespondsTo>) -> Self {
        self.responds_to = input;
        self
    }
    /// <important>
    /// <p> <b>Deprecated</b>. Use <code>InvokedBy</code> instead.</p>
    /// </important>
    /// <p>Determines whether the Amazon Lex V2 bot responds to all standard messages. Control messages are not supported.</p>
    pub fn get_responds_to(&self) -> &::std::option::Option<crate::types::RespondsTo> {
        &self.responds_to
    }
    /// <p>Specifies the type of message that triggers a bot.</p>
    pub fn invoked_by(mut self, input: crate::types::InvokedBy) -> Self {
        self.invoked_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of message that triggers a bot.</p>
    pub fn set_invoked_by(mut self, input: ::std::option::Option<crate::types::InvokedBy>) -> Self {
        self.invoked_by = input;
        self
    }
    /// <p>Specifies the type of message that triggers a bot.</p>
    pub fn get_invoked_by(&self) -> &::std::option::Option<crate::types::InvokedBy> {
        &self.invoked_by
    }
    /// <p>The ARN of the Amazon Lex V2 bot's alias. The ARN uses this format: <code>arn:aws:lex:REGION:ACCOUNT:bot-alias/MYBOTID/MYBOTALIAS</code> </p>
    /// This field is required.
    pub fn lex_bot_alias_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lex_bot_alias_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Amazon Lex V2 bot's alias. The ARN uses this format: <code>arn:aws:lex:REGION:ACCOUNT:bot-alias/MYBOTID/MYBOTALIAS</code> </p>
    pub fn set_lex_bot_alias_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lex_bot_alias_arn = input;
        self
    }
    /// <p>The ARN of the Amazon Lex V2 bot's alias. The ARN uses this format: <code>arn:aws:lex:REGION:ACCOUNT:bot-alias/MYBOTID/MYBOTALIAS</code> </p>
    pub fn get_lex_bot_alias_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.lex_bot_alias_arn
    }
    /// <p>Identifies the Amazon Lex V2 bot's language and locale. The string must match one of the supported locales in Amazon Lex V2. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> in the <i>Amazon Lex V2 Developer Guide</i>.</p>
    /// This field is required.
    pub fn locale_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locale_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifies the Amazon Lex V2 bot's language and locale. The string must match one of the supported locales in Amazon Lex V2. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> in the <i>Amazon Lex V2 Developer Guide</i>.</p>
    pub fn set_locale_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locale_id = input;
        self
    }
    /// <p>Identifies the Amazon Lex V2 bot's language and locale. The string must match one of the supported locales in Amazon Lex V2. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see <a href="https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html">Supported languages</a> in the <i>Amazon Lex V2 Developer Guide</i>.</p>
    pub fn get_locale_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.locale_id
    }
    /// <p>The name of the welcome intent configured in the Amazon Lex V2 bot.</p>
    pub fn welcome_intent(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.welcome_intent = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the welcome intent configured in the Amazon Lex V2 bot.</p>
    pub fn set_welcome_intent(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.welcome_intent = input;
        self
    }
    /// <p>The name of the welcome intent configured in the Amazon Lex V2 bot.</p>
    pub fn get_welcome_intent(&self) -> &::std::option::Option<::std::string::String> {
        &self.welcome_intent
    }
    /// Consumes the builder and constructs a [`LexConfiguration`](crate::types::LexConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`lex_bot_alias_arn`](crate::types::builders::LexConfigurationBuilder::lex_bot_alias_arn)
    /// - [`locale_id`](crate::types::builders::LexConfigurationBuilder::locale_id)
    pub fn build(self) -> ::std::result::Result<crate::types::LexConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LexConfiguration {
            responds_to: self.responds_to,
            invoked_by: self.invoked_by,
            lex_bot_alias_arn: self.lex_bot_alias_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "lex_bot_alias_arn",
                    "lex_bot_alias_arn was not specified but it is required when building LexConfiguration",
                )
            })?,
            locale_id: self.locale_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "locale_id",
                    "locale_id was not specified but it is required when building LexConfiguration",
                )
            })?,
            welcome_intent: self.welcome_intent,
        })
    }
}
