// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A structure that contains configuration data.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Configuration {
    /// <p>The configuration for an Amazon Lex V2 bot.</p>
    pub lex: ::std::option::Option<crate::types::LexConfiguration>,
}
impl Configuration {
    /// <p>The configuration for an Amazon Lex V2 bot.</p>
    pub fn lex(&self) -> ::std::option::Option<&crate::types::LexConfiguration> {
        self.lex.as_ref()
    }
}
impl Configuration {
    /// Creates a new builder-style object to manufacture [`Configuration`](crate::types::Configuration).
    pub fn builder() -> crate::types::builders::ConfigurationBuilder {
        crate::types::builders::ConfigurationBuilder::default()
    }
}

/// A builder for [`Configuration`](crate::types::Configuration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ConfigurationBuilder {
    pub(crate) lex: ::std::option::Option<crate::types::LexConfiguration>,
}
impl ConfigurationBuilder {
    /// <p>The configuration for an Amazon Lex V2 bot.</p>
    /// This field is required.
    pub fn lex(mut self, input: crate::types::LexConfiguration) -> Self {
        self.lex = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for an Amazon Lex V2 bot.</p>
    pub fn set_lex(mut self, input: ::std::option::Option<crate::types::LexConfiguration>) -> Self {
        self.lex = input;
        self
    }
    /// <p>The configuration for an Amazon Lex V2 bot.</p>
    pub fn get_lex(&self) -> &::std::option::Option<crate::types::LexConfiguration> {
        &self.lex
    }
    /// Consumes the builder and constructs a [`Configuration`](crate::types::Configuration).
    pub fn build(self) -> crate::types::Configuration {
        crate::types::Configuration { lex: self.lex }
    }
}
