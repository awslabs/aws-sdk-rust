// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The input parameters don't match the service's restrictions.</p>
    BadRequestException(crate::error::BadRequestException),
    /// <p>The request could not be processed because of conflict in the current state of the resource.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The client is permanently forbidden from making the request.</p>
    ForbiddenException(crate::error::ForbiddenException),
    /// <p>The request exceeds the resource limit.</p>
    ResourceLimitExceededException(crate::error::ResourceLimitExceededException),
    /// <p>The service encountered an unexpected error.</p>
    ServiceFailureException(crate::error::ServiceFailureException),
    /// <p>The service is currently unavailable.</p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// <p>The client exceeded its request rate limit.</p>
    ThrottledClientException(crate::error::ThrottledClientException),
    /// <p>The client is not currently authorized to make the request.</p>
    UnauthorizedClientException(crate::error::UnauthorizedClientException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::ResourceLimitExceededException(inner) => inner.fmt(f),
            Error::ServiceFailureException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottledClientException(inner) => inner.fmt(f),
            Error::UnauthorizedClientException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAppInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAppInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAppInstanceError> for Error {
    fn from(err: crate::error::CreateAppInstanceError) -> Self {
        match err {
            crate::error::CreateAppInstanceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateAppInstanceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateAppInstanceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateAppInstanceError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateAppInstanceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateAppInstanceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateAppInstanceError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateAppInstanceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateAppInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAppInstanceAdminError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAppInstanceAdminError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAppInstanceAdminError> for Error {
    fn from(err: crate::error::CreateAppInstanceAdminError) -> Self {
        match err {
            crate::error::CreateAppInstanceAdminError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateAppInstanceAdminError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateAppInstanceAdminError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateAppInstanceAdminError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateAppInstanceAdminError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateAppInstanceAdminError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateAppInstanceAdminError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateAppInstanceAdminError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateAppInstanceAdminError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAppInstanceUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAppInstanceUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAppInstanceUserError> for Error {
    fn from(err: crate::error::CreateAppInstanceUserError) -> Self {
        match err {
            crate::error::CreateAppInstanceUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateAppInstanceUserError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateAppInstanceUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateAppInstanceUserError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateAppInstanceUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateAppInstanceUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateAppInstanceUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateAppInstanceUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateAppInstanceUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAppInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAppInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAppInstanceError> for Error {
    fn from(err: crate::error::DeleteAppInstanceError) -> Self {
        match err {
            crate::error::DeleteAppInstanceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteAppInstanceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteAppInstanceError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::DeleteAppInstanceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteAppInstanceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteAppInstanceError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteAppInstanceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteAppInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAppInstanceAdminError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAppInstanceAdminError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAppInstanceAdminError> for Error {
    fn from(err: crate::error::DeleteAppInstanceAdminError) -> Self {
        match err {
            crate::error::DeleteAppInstanceAdminError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteAppInstanceAdminError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteAppInstanceAdminError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteAppInstanceAdminError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::DeleteAppInstanceAdminError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteAppInstanceAdminError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteAppInstanceAdminError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteAppInstanceAdminError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteAppInstanceAdminError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAppInstanceUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAppInstanceUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAppInstanceUserError> for Error {
    fn from(err: crate::error::DeleteAppInstanceUserError) -> Self {
        match err {
            crate::error::DeleteAppInstanceUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteAppInstanceUserError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteAppInstanceUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteAppInstanceUserError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::DeleteAppInstanceUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteAppInstanceUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteAppInstanceUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteAppInstanceUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteAppInstanceUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeregisterAppInstanceUserEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeregisterAppInstanceUserEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterAppInstanceUserEndpointError> for Error {
    fn from(err: crate::error::DeregisterAppInstanceUserEndpointError) -> Self {
        match err {
            crate::error::DeregisterAppInstanceUserEndpointError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeregisterAppInstanceUserEndpointError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeregisterAppInstanceUserEndpointError::ServiceFailureException(
                inner,
            ) => Error::ServiceFailureException(inner),
            crate::error::DeregisterAppInstanceUserEndpointError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::DeregisterAppInstanceUserEndpointError::ThrottledClientException(
                inner,
            ) => Error::ThrottledClientException(inner),
            crate::error::DeregisterAppInstanceUserEndpointError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::DeregisterAppInstanceUserEndpointError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAppInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAppInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAppInstanceError> for Error {
    fn from(err: crate::error::DescribeAppInstanceError) -> Self {
        match err {
            crate::error::DescribeAppInstanceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeAppInstanceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeAppInstanceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DescribeAppInstanceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeAppInstanceError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DescribeAppInstanceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DescribeAppInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAppInstanceAdminError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAppInstanceAdminError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAppInstanceAdminError> for Error {
    fn from(err: crate::error::DescribeAppInstanceAdminError) -> Self {
        match err {
            crate::error::DescribeAppInstanceAdminError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeAppInstanceAdminError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeAppInstanceAdminError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DescribeAppInstanceAdminError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeAppInstanceAdminError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DescribeAppInstanceAdminError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DescribeAppInstanceAdminError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAppInstanceUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAppInstanceUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAppInstanceUserError> for Error {
    fn from(err: crate::error::DescribeAppInstanceUserError) -> Self {
        match err {
            crate::error::DescribeAppInstanceUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeAppInstanceUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeAppInstanceUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DescribeAppInstanceUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeAppInstanceUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DescribeAppInstanceUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DescribeAppInstanceUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeAppInstanceUserEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeAppInstanceUserEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAppInstanceUserEndpointError> for Error {
    fn from(err: crate::error::DescribeAppInstanceUserEndpointError) -> Self {
        match err {
            crate::error::DescribeAppInstanceUserEndpointError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeAppInstanceUserEndpointError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeAppInstanceUserEndpointError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DescribeAppInstanceUserEndpointError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::DescribeAppInstanceUserEndpointError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DescribeAppInstanceUserEndpointError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::DescribeAppInstanceUserEndpointError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetAppInstanceRetentionSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetAppInstanceRetentionSettingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAppInstanceRetentionSettingsError> for Error {
    fn from(err: crate::error::GetAppInstanceRetentionSettingsError) -> Self {
        match err {
            crate::error::GetAppInstanceRetentionSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetAppInstanceRetentionSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetAppInstanceRetentionSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetAppInstanceRetentionSettingsError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::GetAppInstanceRetentionSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetAppInstanceRetentionSettingsError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::GetAppInstanceRetentionSettingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAppInstanceAdminsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAppInstanceAdminsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAppInstanceAdminsError> for Error {
    fn from(err: crate::error::ListAppInstanceAdminsError) -> Self {
        match err {
            crate::error::ListAppInstanceAdminsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListAppInstanceAdminsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListAppInstanceAdminsError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::ListAppInstanceAdminsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListAppInstanceAdminsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListAppInstanceAdminsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListAppInstanceAdminsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListAppInstanceAdminsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAppInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAppInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAppInstancesError> for Error {
    fn from(err: crate::error::ListAppInstancesError) -> Self {
        match err {
            crate::error::ListAppInstancesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListAppInstancesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListAppInstancesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListAppInstancesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListAppInstancesError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListAppInstancesError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListAppInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAppInstanceUserEndpointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAppInstanceUserEndpointsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAppInstanceUserEndpointsError> for Error {
    fn from(err: crate::error::ListAppInstanceUserEndpointsError) -> Self {
        match err {
            crate::error::ListAppInstanceUserEndpointsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListAppInstanceUserEndpointsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListAppInstanceUserEndpointsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListAppInstanceUserEndpointsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListAppInstanceUserEndpointsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListAppInstanceUserEndpointsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListAppInstanceUserEndpointsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAppInstanceUsersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListAppInstanceUsersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAppInstanceUsersError> for Error {
    fn from(err: crate::error::ListAppInstanceUsersError) -> Self {
        match err {
            crate::error::ListAppInstanceUsersError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListAppInstanceUsersError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListAppInstanceUsersError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListAppInstanceUsersError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListAppInstanceUsersError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListAppInstanceUsersError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListAppInstanceUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListTagsForResourceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListTagsForResourceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListTagsForResourceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListTagsForResourceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::PutAppInstanceRetentionSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutAppInstanceRetentionSettingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutAppInstanceRetentionSettingsError> for Error {
    fn from(err: crate::error::PutAppInstanceRetentionSettingsError) -> Self {
        match err {
            crate::error::PutAppInstanceRetentionSettingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutAppInstanceRetentionSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutAppInstanceRetentionSettingsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::PutAppInstanceRetentionSettingsError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::PutAppInstanceRetentionSettingsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::PutAppInstanceRetentionSettingsError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::PutAppInstanceRetentionSettingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::RegisterAppInstanceUserEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RegisterAppInstanceUserEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterAppInstanceUserEndpointError> for Error {
    fn from(err: crate::error::RegisterAppInstanceUserEndpointError) -> Self {
        match err {
            crate::error::RegisterAppInstanceUserEndpointError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::RegisterAppInstanceUserEndpointError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RegisterAppInstanceUserEndpointError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::RegisterAppInstanceUserEndpointError::ResourceLimitExceededException(
                inner,
            ) => Error::ResourceLimitExceededException(inner),
            crate::error::RegisterAppInstanceUserEndpointError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::RegisterAppInstanceUserEndpointError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::RegisterAppInstanceUserEndpointError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::RegisterAppInstanceUserEndpointError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::RegisterAppInstanceUserEndpointError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::TagResourceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::TagResourceError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::TagResourceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::TagResourceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::TagResourceError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::TagResourceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UntagResourceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UntagResourceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UntagResourceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UntagResourceError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UntagResourceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAppInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAppInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAppInstanceError> for Error {
    fn from(err: crate::error::UpdateAppInstanceError) -> Self {
        match err {
            crate::error::UpdateAppInstanceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateAppInstanceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateAppInstanceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateAppInstanceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateAppInstanceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateAppInstanceError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateAppInstanceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateAppInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAppInstanceUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAppInstanceUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAppInstanceUserError> for Error {
    fn from(err: crate::error::UpdateAppInstanceUserError) -> Self {
        match err {
            crate::error::UpdateAppInstanceUserError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateAppInstanceUserError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateAppInstanceUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateAppInstanceUserError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::UpdateAppInstanceUserError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateAppInstanceUserError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateAppInstanceUserError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateAppInstanceUserError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateAppInstanceUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAppInstanceUserEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAppInstanceUserEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAppInstanceUserEndpointError> for Error {
    fn from(err: crate::error::UpdateAppInstanceUserEndpointError) -> Self {
        match err {
            crate::error::UpdateAppInstanceUserEndpointError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateAppInstanceUserEndpointError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateAppInstanceUserEndpointError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateAppInstanceUserEndpointError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateAppInstanceUserEndpointError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::UpdateAppInstanceUserEndpointError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateAppInstanceUserEndpointError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::UpdateAppInstanceUserEndpointError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::ResourceLimitExceededException(e) => e.request_id(),
            Self::ServiceFailureException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::ThrottledClientException(e) => e.request_id(),
            Self::UnauthorizedClientException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
