// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateAppInstanceBotInput {
    /// <p>The ARN of the <code>AppInstance</code> request.</p>
    pub app_instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>The user's name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The request metadata. Limited to a 1KB string in UTF-8.</p>
    pub metadata: ::std::option::Option<::std::string::String>,
    /// <p>The unique ID for the client making the request. Use different tokens for different <code>AppInstanceBots</code>.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>The tags assigned to the <code>AppInstanceBot</code>.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Configuration information about the Amazon Lex V2 V2 bot.</p>
    pub configuration: ::std::option::Option<crate::types::Configuration>,
}
impl CreateAppInstanceBotInput {
    /// <p>The ARN of the <code>AppInstance</code> request.</p>
    pub fn app_instance_arn(&self) -> ::std::option::Option<&str> {
        self.app_instance_arn.as_deref()
    }
    /// <p>The user's name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The request metadata. Limited to a 1KB string in UTF-8.</p>
    pub fn metadata(&self) -> ::std::option::Option<&str> {
        self.metadata.as_deref()
    }
    /// <p>The unique ID for the client making the request. Use different tokens for different <code>AppInstanceBots</code>.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The tags assigned to the <code>AppInstanceBot</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Configuration information about the Amazon Lex V2 V2 bot.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::Configuration> {
        self.configuration.as_ref()
    }
}
impl ::std::fmt::Debug for CreateAppInstanceBotInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAppInstanceBotInput");
        formatter.field("app_instance_arn", &self.app_instance_arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.field("client_request_token", &self.client_request_token);
        formatter.field("tags", &self.tags);
        formatter.field("configuration", &self.configuration);
        formatter.finish()
    }
}
impl CreateAppInstanceBotInput {
    /// Creates a new builder-style object to manufacture [`CreateAppInstanceBotInput`](crate::operation::create_app_instance_bot::CreateAppInstanceBotInput).
    pub fn builder() -> crate::operation::create_app_instance_bot::builders::CreateAppInstanceBotInputBuilder {
        crate::operation::create_app_instance_bot::builders::CreateAppInstanceBotInputBuilder::default()
    }
}

/// A builder for [`CreateAppInstanceBotInput`](crate::operation::create_app_instance_bot::CreateAppInstanceBotInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateAppInstanceBotInputBuilder {
    pub(crate) app_instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) metadata: ::std::option::Option<::std::string::String>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) configuration: ::std::option::Option<crate::types::Configuration>,
}
impl CreateAppInstanceBotInputBuilder {
    /// <p>The ARN of the <code>AppInstance</code> request.</p>
    /// This field is required.
    pub fn app_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the <code>AppInstance</code> request.</p>
    pub fn set_app_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_instance_arn = input;
        self
    }
    /// <p>The ARN of the <code>AppInstance</code> request.</p>
    pub fn get_app_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_instance_arn
    }
    /// <p>The user's name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user's name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The user's name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The request metadata. Limited to a 1KB string in UTF-8.</p>
    pub fn metadata(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metadata = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The request metadata. Limited to a 1KB string in UTF-8.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The request metadata. Limited to a 1KB string in UTF-8.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<::std::string::String> {
        &self.metadata
    }
    /// <p>The unique ID for the client making the request. Use different tokens for different <code>AppInstanceBots</code>.</p>
    /// This field is required.
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID for the client making the request. Use different tokens for different <code>AppInstanceBots</code>.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>The unique ID for the client making the request. Use different tokens for different <code>AppInstanceBots</code>.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags assigned to the <code>AppInstanceBot</code>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags assigned to the <code>AppInstanceBot</code>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags assigned to the <code>AppInstanceBot</code>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Configuration information about the Amazon Lex V2 V2 bot.</p>
    /// This field is required.
    pub fn configuration(mut self, input: crate::types::Configuration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration information about the Amazon Lex V2 V2 bot.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::Configuration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>Configuration information about the Amazon Lex V2 V2 bot.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::Configuration> {
        &self.configuration
    }
    /// Consumes the builder and constructs a [`CreateAppInstanceBotInput`](crate::operation::create_app_instance_bot::CreateAppInstanceBotInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_app_instance_bot::CreateAppInstanceBotInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_app_instance_bot::CreateAppInstanceBotInput {
            app_instance_arn: self.app_instance_arn,
            name: self.name,
            metadata: self.metadata,
            client_request_token: self.client_request_token,
            tags: self.tags,
            configuration: self.configuration,
        })
    }
}
impl ::std::fmt::Debug for CreateAppInstanceBotInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateAppInstanceBotInputBuilder");
        formatter.field("app_instance_arn", &self.app_instance_arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.field("client_request_token", &self.client_request_token);
        formatter.field("tags", &self.tags);
        formatter.field("configuration", &self.configuration);
        formatter.finish()
    }
}
