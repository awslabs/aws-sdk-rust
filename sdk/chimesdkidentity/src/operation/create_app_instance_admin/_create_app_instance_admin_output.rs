// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAppInstanceAdminOutput {
    /// <p>The name and ARN of the admin for the <code>AppInstance</code>.</p>
    #[doc(hidden)]
    pub app_instance_admin: std::option::Option<crate::types::Identity>,
    /// <p>The ARN of the of the admin for the <code>AppInstance</code>.</p>
    #[doc(hidden)]
    pub app_instance_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateAppInstanceAdminOutput {
    /// <p>The name and ARN of the admin for the <code>AppInstance</code>.</p>
    pub fn app_instance_admin(&self) -> std::option::Option<&crate::types::Identity> {
        self.app_instance_admin.as_ref()
    }
    /// <p>The ARN of the of the admin for the <code>AppInstance</code>.</p>
    pub fn app_instance_arn(&self) -> std::option::Option<&str> {
        self.app_instance_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateAppInstanceAdminOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAppInstanceAdminOutput {
    /// Creates a new builder-style object to manufacture [`CreateAppInstanceAdminOutput`](crate::operation::create_app_instance_admin::CreateAppInstanceAdminOutput).
    pub fn builder(
    ) -> crate::operation::create_app_instance_admin::builders::CreateAppInstanceAdminOutputBuilder
    {
        crate::operation::create_app_instance_admin::builders::CreateAppInstanceAdminOutputBuilder::default()
    }
}

/// A builder for [`CreateAppInstanceAdminOutput`](crate::operation::create_app_instance_admin::CreateAppInstanceAdminOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateAppInstanceAdminOutputBuilder {
    pub(crate) app_instance_admin: std::option::Option<crate::types::Identity>,
    pub(crate) app_instance_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateAppInstanceAdminOutputBuilder {
    /// <p>The name and ARN of the admin for the <code>AppInstance</code>.</p>
    pub fn app_instance_admin(mut self, input: crate::types::Identity) -> Self {
        self.app_instance_admin = Some(input);
        self
    }
    /// <p>The name and ARN of the admin for the <code>AppInstance</code>.</p>
    pub fn set_app_instance_admin(
        mut self,
        input: std::option::Option<crate::types::Identity>,
    ) -> Self {
        self.app_instance_admin = input;
        self
    }
    /// <p>The ARN of the of the admin for the <code>AppInstance</code>.</p>
    pub fn app_instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.app_instance_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the of the admin for the <code>AppInstance</code>.</p>
    pub fn set_app_instance_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.app_instance_arn = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateAppInstanceAdminOutput`](crate::operation::create_app_instance_admin::CreateAppInstanceAdminOutput).
    pub fn build(
        self,
    ) -> crate::operation::create_app_instance_admin::CreateAppInstanceAdminOutput {
        crate::operation::create_app_instance_admin::CreateAppInstanceAdminOutput {
            app_instance_admin: self.app_instance_admin,
            app_instance_arn: self.app_instance_arn,
            _request_id: self._request_id,
        }
    }
}
