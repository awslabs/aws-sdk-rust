// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateAppInstanceUserEndpointInput {
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    pub app_instance_user_arn: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the <code>AppInstanceUserEndpoint</code>.</p>
    pub endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the <code>AppInstanceUserEndpoint</code>.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Boolean that controls whether the <code>AppInstanceUserEndpoint</code> is opted in to receive messages. <code>ALL</code> indicates the endpoint will receive all messages. <code>NONE</code> indicates the endpoint will receive no messages.</p>
    pub allow_messages: ::std::option::Option<crate::types::AllowMessages>,
}
impl UpdateAppInstanceUserEndpointInput {
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    pub fn app_instance_user_arn(&self) -> ::std::option::Option<&str> {
        self.app_instance_user_arn.as_deref()
    }
    /// <p>The unique identifier of the <code>AppInstanceUserEndpoint</code>.</p>
    pub fn endpoint_id(&self) -> ::std::option::Option<&str> {
        self.endpoint_id.as_deref()
    }
    /// <p>The name of the <code>AppInstanceUserEndpoint</code>.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Boolean that controls whether the <code>AppInstanceUserEndpoint</code> is opted in to receive messages. <code>ALL</code> indicates the endpoint will receive all messages. <code>NONE</code> indicates the endpoint will receive no messages.</p>
    pub fn allow_messages(&self) -> ::std::option::Option<&crate::types::AllowMessages> {
        self.allow_messages.as_ref()
    }
}
impl ::std::fmt::Debug for UpdateAppInstanceUserEndpointInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAppInstanceUserEndpointInput");
        formatter.field("app_instance_user_arn", &self.app_instance_user_arn);
        formatter.field("endpoint_id", &self.endpoint_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("allow_messages", &self.allow_messages);
        formatter.finish()
    }
}
impl UpdateAppInstanceUserEndpointInput {
    /// Creates a new builder-style object to manufacture [`UpdateAppInstanceUserEndpointInput`](crate::operation::update_app_instance_user_endpoint::UpdateAppInstanceUserEndpointInput).
    pub fn builder() -> crate::operation::update_app_instance_user_endpoint::builders::UpdateAppInstanceUserEndpointInputBuilder {
        crate::operation::update_app_instance_user_endpoint::builders::UpdateAppInstanceUserEndpointInputBuilder::default()
    }
}

/// A builder for [`UpdateAppInstanceUserEndpointInput`](crate::operation::update_app_instance_user_endpoint::UpdateAppInstanceUserEndpointInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateAppInstanceUserEndpointInputBuilder {
    pub(crate) app_instance_user_arn: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) allow_messages: ::std::option::Option<crate::types::AllowMessages>,
}
impl UpdateAppInstanceUserEndpointInputBuilder {
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    /// This field is required.
    pub fn app_instance_user_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_instance_user_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    pub fn set_app_instance_user_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_instance_user_arn = input;
        self
    }
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    pub fn get_app_instance_user_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_instance_user_arn
    }
    /// <p>The unique identifier of the <code>AppInstanceUserEndpoint</code>.</p>
    /// This field is required.
    pub fn endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the <code>AppInstanceUserEndpoint</code>.</p>
    pub fn set_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint_id = input;
        self
    }
    /// <p>The unique identifier of the <code>AppInstanceUserEndpoint</code>.</p>
    pub fn get_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint_id
    }
    /// <p>The name of the <code>AppInstanceUserEndpoint</code>.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the <code>AppInstanceUserEndpoint</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the <code>AppInstanceUserEndpoint</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Boolean that controls whether the <code>AppInstanceUserEndpoint</code> is opted in to receive messages. <code>ALL</code> indicates the endpoint will receive all messages. <code>NONE</code> indicates the endpoint will receive no messages.</p>
    pub fn allow_messages(mut self, input: crate::types::AllowMessages) -> Self {
        self.allow_messages = ::std::option::Option::Some(input);
        self
    }
    /// <p>Boolean that controls whether the <code>AppInstanceUserEndpoint</code> is opted in to receive messages. <code>ALL</code> indicates the endpoint will receive all messages. <code>NONE</code> indicates the endpoint will receive no messages.</p>
    pub fn set_allow_messages(mut self, input: ::std::option::Option<crate::types::AllowMessages>) -> Self {
        self.allow_messages = input;
        self
    }
    /// <p>Boolean that controls whether the <code>AppInstanceUserEndpoint</code> is opted in to receive messages. <code>ALL</code> indicates the endpoint will receive all messages. <code>NONE</code> indicates the endpoint will receive no messages.</p>
    pub fn get_allow_messages(&self) -> &::std::option::Option<crate::types::AllowMessages> {
        &self.allow_messages
    }
    /// Consumes the builder and constructs a [`UpdateAppInstanceUserEndpointInput`](crate::operation::update_app_instance_user_endpoint::UpdateAppInstanceUserEndpointInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_app_instance_user_endpoint::UpdateAppInstanceUserEndpointInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_app_instance_user_endpoint::UpdateAppInstanceUserEndpointInput {
            app_instance_user_arn: self.app_instance_user_arn,
            endpoint_id: self.endpoint_id,
            name: self.name,
            allow_messages: self.allow_messages,
        })
    }
}
impl ::std::fmt::Debug for UpdateAppInstanceUserEndpointInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAppInstanceUserEndpointInputBuilder");
        formatter.field("app_instance_user_arn", &self.app_instance_user_arn);
        formatter.field("endpoint_id", &self.endpoint_id);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("allow_messages", &self.allow_messages);
        formatter.finish()
    }
}
