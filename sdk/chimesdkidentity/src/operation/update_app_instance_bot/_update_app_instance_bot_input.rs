// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateAppInstanceBotInput {
    /// <p>The ARN of the <code>AppInstanceBot</code>.</p>
    pub app_instance_bot_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the <code>AppInstanceBot</code>.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The metadata of the <code>AppInstanceBot</code>.</p>
    pub metadata: ::std::option::Option<::std::string::String>,
    /// <p>The configuration for the bot update.</p>
    pub configuration: ::std::option::Option<crate::types::Configuration>,
}
impl UpdateAppInstanceBotInput {
    /// <p>The ARN of the <code>AppInstanceBot</code>.</p>
    pub fn app_instance_bot_arn(&self) -> ::std::option::Option<&str> {
        self.app_instance_bot_arn.as_deref()
    }
    /// <p>The name of the <code>AppInstanceBot</code>.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The metadata of the <code>AppInstanceBot</code>.</p>
    pub fn metadata(&self) -> ::std::option::Option<&str> {
        self.metadata.as_deref()
    }
    /// <p>The configuration for the bot update.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::Configuration> {
        self.configuration.as_ref()
    }
}
impl ::std::fmt::Debug for UpdateAppInstanceBotInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAppInstanceBotInput");
        formatter.field("app_instance_bot_arn", &self.app_instance_bot_arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.field("configuration", &self.configuration);
        formatter.finish()
    }
}
impl UpdateAppInstanceBotInput {
    /// Creates a new builder-style object to manufacture [`UpdateAppInstanceBotInput`](crate::operation::update_app_instance_bot::UpdateAppInstanceBotInput).
    pub fn builder() -> crate::operation::update_app_instance_bot::builders::UpdateAppInstanceBotInputBuilder {
        crate::operation::update_app_instance_bot::builders::UpdateAppInstanceBotInputBuilder::default()
    }
}

/// A builder for [`UpdateAppInstanceBotInput`](crate::operation::update_app_instance_bot::UpdateAppInstanceBotInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateAppInstanceBotInputBuilder {
    pub(crate) app_instance_bot_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) metadata: ::std::option::Option<::std::string::String>,
    pub(crate) configuration: ::std::option::Option<crate::types::Configuration>,
}
impl UpdateAppInstanceBotInputBuilder {
    /// <p>The ARN of the <code>AppInstanceBot</code>.</p>
    /// This field is required.
    pub fn app_instance_bot_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_instance_bot_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the <code>AppInstanceBot</code>.</p>
    pub fn set_app_instance_bot_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_instance_bot_arn = input;
        self
    }
    /// <p>The ARN of the <code>AppInstanceBot</code>.</p>
    pub fn get_app_instance_bot_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_instance_bot_arn
    }
    /// <p>The name of the <code>AppInstanceBot</code>.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the <code>AppInstanceBot</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the <code>AppInstanceBot</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The metadata of the <code>AppInstanceBot</code>.</p>
    /// This field is required.
    pub fn metadata(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metadata = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The metadata of the <code>AppInstanceBot</code>.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The metadata of the <code>AppInstanceBot</code>.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<::std::string::String> {
        &self.metadata
    }
    /// <p>The configuration for the bot update.</p>
    pub fn configuration(mut self, input: crate::types::Configuration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the bot update.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::Configuration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration for the bot update.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::Configuration> {
        &self.configuration
    }
    /// Consumes the builder and constructs a [`UpdateAppInstanceBotInput`](crate::operation::update_app_instance_bot::UpdateAppInstanceBotInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_app_instance_bot::UpdateAppInstanceBotInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_app_instance_bot::UpdateAppInstanceBotInput {
            app_instance_bot_arn: self.app_instance_bot_arn,
            name: self.name,
            metadata: self.metadata,
            configuration: self.configuration,
        })
    }
}
impl ::std::fmt::Debug for UpdateAppInstanceBotInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAppInstanceBotInputBuilder");
        formatter.field("app_instance_bot_arn", &self.app_instance_bot_arn);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.field("configuration", &self.configuration);
        formatter.finish()
    }
}
