// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::register_app_instance_user_endpoint::_register_app_instance_user_endpoint_output::RegisterAppInstanceUserEndpointOutputBuilder;

pub use crate::operation::register_app_instance_user_endpoint::_register_app_instance_user_endpoint_input::RegisterAppInstanceUserEndpointInputBuilder;

/// Fluent builder constructing a request to `RegisterAppInstanceUserEndpoint`.
///
/// <p>Registers an endpoint under an Amazon Chime <code>AppInstanceUser</code>. The endpoint receives messages for a user. For push notifications, the endpoint is a mobile device used to receive mobile push notifications for a user.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RegisterAppInstanceUserEndpointFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::register_app_instance_user_endpoint::builders::RegisterAppInstanceUserEndpointInputBuilder
            }
impl RegisterAppInstanceUserEndpointFluentBuilder {
    /// Creates a new `RegisterAppInstanceUserEndpoint`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::register_app_instance_user_endpoint::RegisterAppInstanceUserEndpoint, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::register_app_instance_user_endpoint::RegisterAppInstanceUserEndpointError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::register_app_instance_user_endpoint::RegisterAppInstanceUserEndpointOutput, aws_smithy_http::result::SdkError<crate::operation::register_app_instance_user_endpoint::RegisterAppInstanceUserEndpointError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    pub fn app_instance_user_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.app_instance_user_arn(input.into());
        self
    }
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    pub fn set_app_instance_user_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_app_instance_user_arn(input);
        self
    }
    /// <p>The name of the <code>AppInstanceUserEndpoint</code>.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the <code>AppInstanceUserEndpoint</code>.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The type of the <code>AppInstanceUserEndpoint</code>. Supported types:</p>
    /// <ul>
    /// <li> <p> <code>APNS</code>: The mobile notification service for an Apple device.</p> </li>
    /// <li> <p> <code>APNS_SANDBOX</code>: The sandbox environment of the mobile notification service for an Apple device.</p> </li>
    /// <li> <p> <code>GCM</code>: The mobile notification service for an Android device.</p> </li>
    /// </ul>
    /// <p>Populate the <code>ResourceArn</code> value of each type as <code>PinpointAppArn</code>.</p>
    pub fn r#type(mut self, input: crate::types::AppInstanceUserEndpointType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The type of the <code>AppInstanceUserEndpoint</code>. Supported types:</p>
    /// <ul>
    /// <li> <p> <code>APNS</code>: The mobile notification service for an Apple device.</p> </li>
    /// <li> <p> <code>APNS_SANDBOX</code>: The sandbox environment of the mobile notification service for an Apple device.</p> </li>
    /// <li> <p> <code>GCM</code>: The mobile notification service for an Android device.</p> </li>
    /// </ul>
    /// <p>Populate the <code>ResourceArn</code> value of each type as <code>PinpointAppArn</code>.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::AppInstanceUserEndpointType>,
    ) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The ARN of the resource to which the endpoint belongs.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The ARN of the resource to which the endpoint belongs.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// <p>The attributes of an <code>Endpoint</code>.</p>
    pub fn endpoint_attributes(mut self, input: crate::types::EndpointAttributes) -> Self {
        self.inner = self.inner.endpoint_attributes(input);
        self
    }
    /// <p>The attributes of an <code>Endpoint</code>.</p>
    pub fn set_endpoint_attributes(
        mut self,
        input: std::option::Option<crate::types::EndpointAttributes>,
    ) -> Self {
        self.inner = self.inner.set_endpoint_attributes(input);
        self
    }
    /// <p>The idempotency token for each client request. </p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>The idempotency token for each client request. </p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>Boolean that controls whether the AppInstanceUserEndpoint is opted in to receive messages. <code>ALL</code> indicates the endpoint receives all messages. <code>NONE</code> indicates the endpoint receives no messages.</p>
    pub fn allow_messages(mut self, input: crate::types::AllowMessages) -> Self {
        self.inner = self.inner.allow_messages(input);
        self
    }
    /// <p>Boolean that controls whether the AppInstanceUserEndpoint is opted in to receive messages. <code>ALL</code> indicates the endpoint receives all messages. <code>NONE</code> indicates the endpoint receives no messages.</p>
    pub fn set_allow_messages(
        mut self,
        input: std::option::Option<crate::types::AllowMessages>,
    ) -> Self {
        self.inner = self.inner.set_allow_messages(input);
        self
    }
}
