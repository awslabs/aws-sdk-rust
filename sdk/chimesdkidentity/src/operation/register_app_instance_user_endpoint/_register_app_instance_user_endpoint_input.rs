// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RegisterAppInstanceUserEndpointInput {
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    pub app_instance_user_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the <code>AppInstanceUserEndpoint</code>.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The type of the <code>AppInstanceUserEndpoint</code>. Supported types:</p>
    /// <ul>
    /// <li> <p> <code>APNS</code>: The mobile notification service for an Apple device.</p> </li>
    /// <li> <p> <code>APNS_SANDBOX</code>: The sandbox environment of the mobile notification service for an Apple device.</p> </li>
    /// <li> <p> <code>GCM</code>: The mobile notification service for an Android device.</p> </li>
    /// </ul>
    /// <p>Populate the <code>ResourceArn</code> value of each type as <code>PinpointAppArn</code>.</p>
    pub r#type: ::std::option::Option<crate::types::AppInstanceUserEndpointType>,
    /// <p>The ARN of the resource to which the endpoint belongs.</p>
    pub resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The attributes of an <code>Endpoint</code>.</p>
    pub endpoint_attributes: ::std::option::Option<crate::types::EndpointAttributes>,
    /// <p>The unique ID assigned to the request. Use different tokens to register other endpoints.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>Boolean that controls whether the AppInstanceUserEndpoint is opted in to receive messages. <code>ALL</code> indicates the endpoint receives all messages. <code>NONE</code> indicates the endpoint receives no messages.</p>
    pub allow_messages: ::std::option::Option<crate::types::AllowMessages>,
}
impl RegisterAppInstanceUserEndpointInput {
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    pub fn app_instance_user_arn(&self) -> ::std::option::Option<&str> {
        self.app_instance_user_arn.as_deref()
    }
    /// <p>The name of the <code>AppInstanceUserEndpoint</code>.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of the <code>AppInstanceUserEndpoint</code>. Supported types:</p>
    /// <ul>
    /// <li> <p> <code>APNS</code>: The mobile notification service for an Apple device.</p> </li>
    /// <li> <p> <code>APNS_SANDBOX</code>: The sandbox environment of the mobile notification service for an Apple device.</p> </li>
    /// <li> <p> <code>GCM</code>: The mobile notification service for an Android device.</p> </li>
    /// </ul>
    /// <p>Populate the <code>ResourceArn</code> value of each type as <code>PinpointAppArn</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::AppInstanceUserEndpointType> {
        self.r#type.as_ref()
    }
    /// <p>The ARN of the resource to which the endpoint belongs.</p>
    pub fn resource_arn(&self) -> ::std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>The attributes of an <code>Endpoint</code>.</p>
    pub fn endpoint_attributes(&self) -> ::std::option::Option<&crate::types::EndpointAttributes> {
        self.endpoint_attributes.as_ref()
    }
    /// <p>The unique ID assigned to the request. Use different tokens to register other endpoints.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>Boolean that controls whether the AppInstanceUserEndpoint is opted in to receive messages. <code>ALL</code> indicates the endpoint receives all messages. <code>NONE</code> indicates the endpoint receives no messages.</p>
    pub fn allow_messages(&self) -> ::std::option::Option<&crate::types::AllowMessages> {
        self.allow_messages.as_ref()
    }
}
impl ::std::fmt::Debug for RegisterAppInstanceUserEndpointInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterAppInstanceUserEndpointInput");
        formatter.field("app_instance_user_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("resource_arn", &self.resource_arn);
        formatter.field("endpoint_attributes", &self.endpoint_attributes);
        formatter.field("client_request_token", &self.client_request_token);
        formatter.field("allow_messages", &self.allow_messages);
        formatter.finish()
    }
}
impl RegisterAppInstanceUserEndpointInput {
    /// Creates a new builder-style object to manufacture [`RegisterAppInstanceUserEndpointInput`](crate::operation::register_app_instance_user_endpoint::RegisterAppInstanceUserEndpointInput).
    pub fn builder() -> crate::operation::register_app_instance_user_endpoint::builders::RegisterAppInstanceUserEndpointInputBuilder {
        crate::operation::register_app_instance_user_endpoint::builders::RegisterAppInstanceUserEndpointInputBuilder::default()
    }
}

/// A builder for [`RegisterAppInstanceUserEndpointInput`](crate::operation::register_app_instance_user_endpoint::RegisterAppInstanceUserEndpointInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct RegisterAppInstanceUserEndpointInputBuilder {
    pub(crate) app_instance_user_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::AppInstanceUserEndpointType>,
    pub(crate) resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint_attributes: ::std::option::Option<crate::types::EndpointAttributes>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) allow_messages: ::std::option::Option<crate::types::AllowMessages>,
}
impl RegisterAppInstanceUserEndpointInputBuilder {
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    /// This field is required.
    pub fn app_instance_user_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.app_instance_user_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    pub fn set_app_instance_user_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.app_instance_user_arn = input;
        self
    }
    /// <p>The ARN of the <code>AppInstanceUser</code>.</p>
    pub fn get_app_instance_user_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.app_instance_user_arn
    }
    /// <p>The name of the <code>AppInstanceUserEndpoint</code>.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the <code>AppInstanceUserEndpoint</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the <code>AppInstanceUserEndpoint</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of the <code>AppInstanceUserEndpoint</code>. Supported types:</p>
    /// <ul>
    /// <li> <p> <code>APNS</code>: The mobile notification service for an Apple device.</p> </li>
    /// <li> <p> <code>APNS_SANDBOX</code>: The sandbox environment of the mobile notification service for an Apple device.</p> </li>
    /// <li> <p> <code>GCM</code>: The mobile notification service for an Android device.</p> </li>
    /// </ul>
    /// <p>Populate the <code>ResourceArn</code> value of each type as <code>PinpointAppArn</code>.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::AppInstanceUserEndpointType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the <code>AppInstanceUserEndpoint</code>. Supported types:</p>
    /// <ul>
    /// <li> <p> <code>APNS</code>: The mobile notification service for an Apple device.</p> </li>
    /// <li> <p> <code>APNS_SANDBOX</code>: The sandbox environment of the mobile notification service for an Apple device.</p> </li>
    /// <li> <p> <code>GCM</code>: The mobile notification service for an Android device.</p> </li>
    /// </ul>
    /// <p>Populate the <code>ResourceArn</code> value of each type as <code>PinpointAppArn</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::AppInstanceUserEndpointType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the <code>AppInstanceUserEndpoint</code>. Supported types:</p>
    /// <ul>
    /// <li> <p> <code>APNS</code>: The mobile notification service for an Apple device.</p> </li>
    /// <li> <p> <code>APNS_SANDBOX</code>: The sandbox environment of the mobile notification service for an Apple device.</p> </li>
    /// <li> <p> <code>GCM</code>: The mobile notification service for an Android device.</p> </li>
    /// </ul>
    /// <p>Populate the <code>ResourceArn</code> value of each type as <code>PinpointAppArn</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::AppInstanceUserEndpointType> {
        &self.r#type
    }
    /// <p>The ARN of the resource to which the endpoint belongs.</p>
    /// This field is required.
    pub fn resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the resource to which the endpoint belongs.</p>
    pub fn set_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>The ARN of the resource to which the endpoint belongs.</p>
    pub fn get_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_arn
    }
    /// <p>The attributes of an <code>Endpoint</code>.</p>
    /// This field is required.
    pub fn endpoint_attributes(mut self, input: crate::types::EndpointAttributes) -> Self {
        self.endpoint_attributes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The attributes of an <code>Endpoint</code>.</p>
    pub fn set_endpoint_attributes(mut self, input: ::std::option::Option<crate::types::EndpointAttributes>) -> Self {
        self.endpoint_attributes = input;
        self
    }
    /// <p>The attributes of an <code>Endpoint</code>.</p>
    pub fn get_endpoint_attributes(&self) -> &::std::option::Option<crate::types::EndpointAttributes> {
        &self.endpoint_attributes
    }
    /// <p>The unique ID assigned to the request. Use different tokens to register other endpoints.</p>
    /// This field is required.
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID assigned to the request. Use different tokens to register other endpoints.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>The unique ID assigned to the request. Use different tokens to register other endpoints.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// <p>Boolean that controls whether the AppInstanceUserEndpoint is opted in to receive messages. <code>ALL</code> indicates the endpoint receives all messages. <code>NONE</code> indicates the endpoint receives no messages.</p>
    pub fn allow_messages(mut self, input: crate::types::AllowMessages) -> Self {
        self.allow_messages = ::std::option::Option::Some(input);
        self
    }
    /// <p>Boolean that controls whether the AppInstanceUserEndpoint is opted in to receive messages. <code>ALL</code> indicates the endpoint receives all messages. <code>NONE</code> indicates the endpoint receives no messages.</p>
    pub fn set_allow_messages(mut self, input: ::std::option::Option<crate::types::AllowMessages>) -> Self {
        self.allow_messages = input;
        self
    }
    /// <p>Boolean that controls whether the AppInstanceUserEndpoint is opted in to receive messages. <code>ALL</code> indicates the endpoint receives all messages. <code>NONE</code> indicates the endpoint receives no messages.</p>
    pub fn get_allow_messages(&self) -> &::std::option::Option<crate::types::AllowMessages> {
        &self.allow_messages
    }
    /// Consumes the builder and constructs a [`RegisterAppInstanceUserEndpointInput`](crate::operation::register_app_instance_user_endpoint::RegisterAppInstanceUserEndpointInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::register_app_instance_user_endpoint::RegisterAppInstanceUserEndpointInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::register_app_instance_user_endpoint::RegisterAppInstanceUserEndpointInput {
                app_instance_user_arn: self.app_instance_user_arn,
                name: self.name,
                r#type: self.r#type,
                resource_arn: self.resource_arn,
                endpoint_attributes: self.endpoint_attributes,
                client_request_token: self.client_request_token,
                allow_messages: self.allow_messages,
            },
        )
    }
}
impl ::std::fmt::Debug for RegisterAppInstanceUserEndpointInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterAppInstanceUserEndpointInputBuilder");
        formatter.field("app_instance_user_arn", &"*** Sensitive Data Redacted ***");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.field("resource_arn", &self.resource_arn);
        formatter.field("endpoint_attributes", &self.endpoint_attributes);
        formatter.field("client_request_token", &self.client_request_token);
        formatter.field("allow_messages", &self.allow_messages);
        formatter.finish()
    }
}
