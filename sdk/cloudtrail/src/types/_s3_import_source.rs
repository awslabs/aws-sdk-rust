// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The settings for the source S3 bucket. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3ImportSource {
    /// <p> The URI for the source S3 bucket. </p>
    #[doc(hidden)]
    pub s3_location_uri: std::option::Option<std::string::String>,
    /// <p> The region associated with the source S3 bucket. </p>
    #[doc(hidden)]
    pub s3_bucket_region: std::option::Option<std::string::String>,
    /// <p> The IAM ARN role used to access the source S3 bucket. </p>
    #[doc(hidden)]
    pub s3_bucket_access_role_arn: std::option::Option<std::string::String>,
}
impl S3ImportSource {
    /// <p> The URI for the source S3 bucket. </p>
    pub fn s3_location_uri(&self) -> std::option::Option<&str> {
        self.s3_location_uri.as_deref()
    }
    /// <p> The region associated with the source S3 bucket. </p>
    pub fn s3_bucket_region(&self) -> std::option::Option<&str> {
        self.s3_bucket_region.as_deref()
    }
    /// <p> The IAM ARN role used to access the source S3 bucket. </p>
    pub fn s3_bucket_access_role_arn(&self) -> std::option::Option<&str> {
        self.s3_bucket_access_role_arn.as_deref()
    }
}
impl S3ImportSource {
    /// Creates a new builder-style object to manufacture [`S3ImportSource`](crate::types::S3ImportSource).
    pub fn builder() -> crate::types::builders::S3ImportSourceBuilder {
        crate::types::builders::S3ImportSourceBuilder::default()
    }
}

/// A builder for [`S3ImportSource`](crate::types::S3ImportSource).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3ImportSourceBuilder {
    pub(crate) s3_location_uri: std::option::Option<std::string::String>,
    pub(crate) s3_bucket_region: std::option::Option<std::string::String>,
    pub(crate) s3_bucket_access_role_arn: std::option::Option<std::string::String>,
}
impl S3ImportSourceBuilder {
    /// <p> The URI for the source S3 bucket. </p>
    pub fn s3_location_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_location_uri = Some(input.into());
        self
    }
    /// <p> The URI for the source S3 bucket. </p>
    pub fn set_s3_location_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_location_uri = input;
        self
    }
    /// <p> The region associated with the source S3 bucket. </p>
    pub fn s3_bucket_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_bucket_region = Some(input.into());
        self
    }
    /// <p> The region associated with the source S3 bucket. </p>
    pub fn set_s3_bucket_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_bucket_region = input;
        self
    }
    /// <p> The IAM ARN role used to access the source S3 bucket. </p>
    pub fn s3_bucket_access_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_bucket_access_role_arn = Some(input.into());
        self
    }
    /// <p> The IAM ARN role used to access the source S3 bucket. </p>
    pub fn set_s3_bucket_access_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.s3_bucket_access_role_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`S3ImportSource`](crate::types::S3ImportSource).
    pub fn build(self) -> crate::types::S3ImportSource {
        crate::types::S3ImportSource {
            s3_location_uri: self.s3_location_uri,
            s3_bucket_region: self.s3_bucket_region,
            s3_bucket_access_role_arn: self.s3_bucket_access_role_arn,
        }
    }
}
