// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies an attribute and value that filter the events returned.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LookupAttribute {
    /// <p>Specifies an attribute on which to filter the events returned.</p>
    pub attribute_key: crate::types::LookupAttributeKey,
    /// <p>Specifies a value for the specified AttributeKey.</p>
    pub attribute_value: ::std::string::String,
}
impl LookupAttribute {
    /// <p>Specifies an attribute on which to filter the events returned.</p>
    pub fn attribute_key(&self) -> &crate::types::LookupAttributeKey {
        &self.attribute_key
    }
    /// <p>Specifies a value for the specified AttributeKey.</p>
    pub fn attribute_value(&self) -> &str {
        use std::ops::Deref;
        self.attribute_value.deref()
    }
}
impl LookupAttribute {
    /// Creates a new builder-style object to manufacture [`LookupAttribute`](crate::types::LookupAttribute).
    pub fn builder() -> crate::types::builders::LookupAttributeBuilder {
        crate::types::builders::LookupAttributeBuilder::default()
    }
}

/// A builder for [`LookupAttribute`](crate::types::LookupAttribute).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LookupAttributeBuilder {
    pub(crate) attribute_key: ::std::option::Option<crate::types::LookupAttributeKey>,
    pub(crate) attribute_value: ::std::option::Option<::std::string::String>,
}
impl LookupAttributeBuilder {
    /// <p>Specifies an attribute on which to filter the events returned.</p>
    /// This field is required.
    pub fn attribute_key(mut self, input: crate::types::LookupAttributeKey) -> Self {
        self.attribute_key = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies an attribute on which to filter the events returned.</p>
    pub fn set_attribute_key(mut self, input: ::std::option::Option<crate::types::LookupAttributeKey>) -> Self {
        self.attribute_key = input;
        self
    }
    /// <p>Specifies an attribute on which to filter the events returned.</p>
    pub fn get_attribute_key(&self) -> &::std::option::Option<crate::types::LookupAttributeKey> {
        &self.attribute_key
    }
    /// <p>Specifies a value for the specified AttributeKey.</p>
    /// This field is required.
    pub fn attribute_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.attribute_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a value for the specified AttributeKey.</p>
    pub fn set_attribute_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.attribute_value = input;
        self
    }
    /// <p>Specifies a value for the specified AttributeKey.</p>
    pub fn get_attribute_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.attribute_value
    }
    /// Consumes the builder and constructs a [`LookupAttribute`](crate::types::LookupAttribute).
    /// This method will fail if any of the following fields are not set:
    /// - [`attribute_key`](crate::types::builders::LookupAttributeBuilder::attribute_key)
    /// - [`attribute_value`](crate::types::builders::LookupAttributeBuilder::attribute_value)
    pub fn build(self) -> ::std::result::Result<crate::types::LookupAttribute, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LookupAttribute {
            attribute_key: self.attribute_key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attribute_key",
                    "attribute_key was not specified but it is required when building LookupAttribute",
                )
            })?,
            attribute_value: self.attribute_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "attribute_value",
                    "attribute_value was not specified but it is required when building LookupAttribute",
                )
            })?,
        })
    }
}
