// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies an attribute and value that filter the events returned.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LookupAttribute {
    /// <p>Specifies an attribute on which to filter the events returned.</p>
    #[doc(hidden)]
    pub attribute_key: std::option::Option<crate::types::LookupAttributeKey>,
    /// <p>Specifies a value for the specified AttributeKey.</p>
    #[doc(hidden)]
    pub attribute_value: std::option::Option<std::string::String>,
}
impl LookupAttribute {
    /// <p>Specifies an attribute on which to filter the events returned.</p>
    pub fn attribute_key(&self) -> std::option::Option<&crate::types::LookupAttributeKey> {
        self.attribute_key.as_ref()
    }
    /// <p>Specifies a value for the specified AttributeKey.</p>
    pub fn attribute_value(&self) -> std::option::Option<&str> {
        self.attribute_value.as_deref()
    }
}
impl LookupAttribute {
    /// Creates a new builder-style object to manufacture [`LookupAttribute`](crate::types::LookupAttribute).
    pub fn builder() -> crate::types::builders::LookupAttributeBuilder {
        crate::types::builders::LookupAttributeBuilder::default()
    }
}

/// A builder for [`LookupAttribute`](crate::types::LookupAttribute).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LookupAttributeBuilder {
    pub(crate) attribute_key: std::option::Option<crate::types::LookupAttributeKey>,
    pub(crate) attribute_value: std::option::Option<std::string::String>,
}
impl LookupAttributeBuilder {
    /// <p>Specifies an attribute on which to filter the events returned.</p>
    pub fn attribute_key(mut self, input: crate::types::LookupAttributeKey) -> Self {
        self.attribute_key = Some(input);
        self
    }
    /// <p>Specifies an attribute on which to filter the events returned.</p>
    pub fn set_attribute_key(
        mut self,
        input: std::option::Option<crate::types::LookupAttributeKey>,
    ) -> Self {
        self.attribute_key = input;
        self
    }
    /// <p>Specifies a value for the specified AttributeKey.</p>
    pub fn attribute_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.attribute_value = Some(input.into());
        self
    }
    /// <p>Specifies a value for the specified AttributeKey.</p>
    pub fn set_attribute_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.attribute_value = input;
        self
    }
    /// Consumes the builder and constructs a [`LookupAttribute`](crate::types::LookupAttribute).
    pub fn build(self) -> crate::types::LookupAttribute {
        crate::types::LookupAttribute {
            attribute_key: self.attribute_key,
            attribute_value: self.attribute_value,
        }
    }
}
