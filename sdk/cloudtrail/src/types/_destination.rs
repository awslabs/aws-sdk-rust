// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about the service where CloudTrail delivers events.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Destination {
    /// <p>The type of destination for events arriving from a channel. For service-linked channels, the value is <code>AWS_SERVICE</code>.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::DestinationType>,
    /// <p>For service-linked channels, the value is the name of the Amazon Web Services service.</p>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
}
impl Destination {
    /// <p>The type of destination for events arriving from a channel. For service-linked channels, the value is <code>AWS_SERVICE</code>.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::DestinationType> {
        self.r#type.as_ref()
    }
    /// <p>For service-linked channels, the value is the name of the Amazon Web Services service.</p>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
}
impl Destination {
    /// Creates a new builder-style object to manufacture [`Destination`](crate::types::Destination).
    pub fn builder() -> crate::types::builders::DestinationBuilder {
        crate::types::builders::DestinationBuilder::default()
    }
}

/// A builder for [`Destination`](crate::types::Destination).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DestinationBuilder {
    pub(crate) r#type: std::option::Option<crate::types::DestinationType>,
    pub(crate) location: std::option::Option<std::string::String>,
}
impl DestinationBuilder {
    /// <p>The type of destination for events arriving from a channel. For service-linked channels, the value is <code>AWS_SERVICE</code>.</p>
    pub fn r#type(mut self, input: crate::types::DestinationType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of destination for events arriving from a channel. For service-linked channels, the value is <code>AWS_SERVICE</code>.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::DestinationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>For service-linked channels, the value is the name of the Amazon Web Services service.</p>
    pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
        self.location = Some(input.into());
        self
    }
    /// <p>For service-linked channels, the value is the name of the Amazon Web Services service.</p>
    pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// Consumes the builder and constructs a [`Destination`](crate::types::Destination).
    pub fn build(self) -> crate::types::Destination {
        crate::types::Destination {
            r#type: self.r#type,
            location: self.location,
        }
    }
}
