// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Advanced event selectors let you create fine-grained selectors for the following CloudTrail event record Ô¨Åelds. They help you control costs by logging only those events that are important to you. For more information about advanced event selectors, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/logging-data-events-with-cloudtrail.html">Logging data events</a> in the <i>CloudTrail User Guide</i>.</p>
/// <ul>
/// <li> <p> <code>readOnly</code> </p> </li>
/// <li> <p> <code>eventSource</code> </p> </li>
/// <li> <p> <code>eventName</code> </p> </li>
/// <li> <p> <code>eventCategory</code> </p> </li>
/// <li> <p> <code>resources.type</code> </p> </li>
/// <li> <p> <code>resources.ARN</code> </p> </li>
/// </ul>
/// <p>You cannot apply both event selectors and advanced event selectors to a trail.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AdvancedEventSelector {
    /// <p>An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Contains all selector statements in an advanced event selector.</p>
    pub field_selectors: ::std::vec::Vec<crate::types::AdvancedFieldSelector>,
}
impl AdvancedEventSelector {
    /// <p>An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Contains all selector statements in an advanced event selector.</p>
    pub fn field_selectors(&self) -> &[crate::types::AdvancedFieldSelector] {
        use std::ops::Deref;
        self.field_selectors.deref()
    }
}
impl AdvancedEventSelector {
    /// Creates a new builder-style object to manufacture [`AdvancedEventSelector`](crate::types::AdvancedEventSelector).
    pub fn builder() -> crate::types::builders::AdvancedEventSelectorBuilder {
        crate::types::builders::AdvancedEventSelectorBuilder::default()
    }
}

/// A builder for [`AdvancedEventSelector`](crate::types::AdvancedEventSelector).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AdvancedEventSelectorBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) field_selectors: ::std::option::Option<::std::vec::Vec<crate::types::AdvancedFieldSelector>>,
}
impl AdvancedEventSelectorBuilder {
    /// <p>An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>An optional, descriptive name for an advanced event selector, such as "Log data events for only two S3 buckets".</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `field_selectors`.
    ///
    /// To override the contents of this collection use [`set_field_selectors`](Self::set_field_selectors).
    ///
    /// <p>Contains all selector statements in an advanced event selector.</p>
    pub fn field_selectors(mut self, input: crate::types::AdvancedFieldSelector) -> Self {
        let mut v = self.field_selectors.unwrap_or_default();
        v.push(input);
        self.field_selectors = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains all selector statements in an advanced event selector.</p>
    pub fn set_field_selectors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AdvancedFieldSelector>>) -> Self {
        self.field_selectors = input;
        self
    }
    /// <p>Contains all selector statements in an advanced event selector.</p>
    pub fn get_field_selectors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AdvancedFieldSelector>> {
        &self.field_selectors
    }
    /// Consumes the builder and constructs a [`AdvancedEventSelector`](crate::types::AdvancedEventSelector).
    /// This method will fail if any of the following fields are not set:
    /// - [`field_selectors`](crate::types::builders::AdvancedEventSelectorBuilder::field_selectors)
    pub fn build(self) -> ::std::result::Result<crate::types::AdvancedEventSelector, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AdvancedEventSelector {
            name: self.name,
            field_selectors: self.field_selectors.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "field_selectors",
                    "field_selectors was not specified but it is required when building AdvancedEventSelector",
                )
            })?,
        })
    }
}
