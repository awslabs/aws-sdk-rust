// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata about a query, such as the number of results.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QueryStatistics {
    /// <p>The number of results returned.</p>
    #[doc(hidden)]
    pub results_count: std::option::Option<i32>,
    /// <p>The total number of results returned by a query.</p>
    #[doc(hidden)]
    pub total_results_count: std::option::Option<i32>,
    /// <p>The total bytes that the query scanned in the event data store. This value matches the number of bytes for which your account is billed for the query, unless the query is still running.</p>
    #[doc(hidden)]
    pub bytes_scanned: std::option::Option<i64>,
}
impl QueryStatistics {
    /// <p>The number of results returned.</p>
    pub fn results_count(&self) -> std::option::Option<i32> {
        self.results_count
    }
    /// <p>The total number of results returned by a query.</p>
    pub fn total_results_count(&self) -> std::option::Option<i32> {
        self.total_results_count
    }
    /// <p>The total bytes that the query scanned in the event data store. This value matches the number of bytes for which your account is billed for the query, unless the query is still running.</p>
    pub fn bytes_scanned(&self) -> std::option::Option<i64> {
        self.bytes_scanned
    }
}
impl QueryStatistics {
    /// Creates a new builder-style object to manufacture [`QueryStatistics`](crate::types::QueryStatistics).
    pub fn builder() -> crate::types::builders::QueryStatisticsBuilder {
        crate::types::builders::QueryStatisticsBuilder::default()
    }
}

/// A builder for [`QueryStatistics`](crate::types::QueryStatistics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QueryStatisticsBuilder {
    pub(crate) results_count: std::option::Option<i32>,
    pub(crate) total_results_count: std::option::Option<i32>,
    pub(crate) bytes_scanned: std::option::Option<i64>,
}
impl QueryStatisticsBuilder {
    /// <p>The number of results returned.</p>
    pub fn results_count(mut self, input: i32) -> Self {
        self.results_count = Some(input);
        self
    }
    /// <p>The number of results returned.</p>
    pub fn set_results_count(mut self, input: std::option::Option<i32>) -> Self {
        self.results_count = input;
        self
    }
    /// <p>The total number of results returned by a query.</p>
    pub fn total_results_count(mut self, input: i32) -> Self {
        self.total_results_count = Some(input);
        self
    }
    /// <p>The total number of results returned by a query.</p>
    pub fn set_total_results_count(mut self, input: std::option::Option<i32>) -> Self {
        self.total_results_count = input;
        self
    }
    /// <p>The total bytes that the query scanned in the event data store. This value matches the number of bytes for which your account is billed for the query, unless the query is still running.</p>
    pub fn bytes_scanned(mut self, input: i64) -> Self {
        self.bytes_scanned = Some(input);
        self
    }
    /// <p>The total bytes that the query scanned in the event data store. This value matches the number of bytes for which your account is billed for the query, unless the query is still running.</p>
    pub fn set_bytes_scanned(mut self, input: std::option::Option<i64>) -> Self {
        self.bytes_scanned = input;
        self
    }
    /// Consumes the builder and constructs a [`QueryStatistics`](crate::types::QueryStatistics).
    pub fn build(self) -> crate::types::QueryStatistics {
        crate::types::QueryStatistics {
            results_count: self.results_count,
            total_results_count: self.total_results_count,
            bytes_scanned: self.bytes_scanned,
        }
    }
}
