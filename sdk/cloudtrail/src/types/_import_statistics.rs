// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Provides statistics for the specified <code>ImportID</code>. CloudTrail does not update import statistics in real-time. Returned values for parameters such as <code>EventsCompleted</code> may be lower than the actual value, because CloudTrail updates statistics incrementally over the course of the import. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportStatistics {
    /// <p> The number of S3 prefixes found for the import. </p>
    #[doc(hidden)]
    pub prefixes_found: std::option::Option<i64>,
    /// <p> The number of S3 prefixes that completed import. </p>
    #[doc(hidden)]
    pub prefixes_completed: std::option::Option<i64>,
    /// <p>The number of log files that completed import.</p>
    #[doc(hidden)]
    pub files_completed: std::option::Option<i64>,
    /// <p> The number of trail events imported into the event data store. </p>
    #[doc(hidden)]
    pub events_completed: std::option::Option<i64>,
    /// <p> The number of failed entries. </p>
    #[doc(hidden)]
    pub failed_entries: std::option::Option<i64>,
}
impl ImportStatistics {
    /// <p> The number of S3 prefixes found for the import. </p>
    pub fn prefixes_found(&self) -> std::option::Option<i64> {
        self.prefixes_found
    }
    /// <p> The number of S3 prefixes that completed import. </p>
    pub fn prefixes_completed(&self) -> std::option::Option<i64> {
        self.prefixes_completed
    }
    /// <p>The number of log files that completed import.</p>
    pub fn files_completed(&self) -> std::option::Option<i64> {
        self.files_completed
    }
    /// <p> The number of trail events imported into the event data store. </p>
    pub fn events_completed(&self) -> std::option::Option<i64> {
        self.events_completed
    }
    /// <p> The number of failed entries. </p>
    pub fn failed_entries(&self) -> std::option::Option<i64> {
        self.failed_entries
    }
}
impl ImportStatistics {
    /// Creates a new builder-style object to manufacture [`ImportStatistics`](crate::types::ImportStatistics).
    pub fn builder() -> crate::types::builders::ImportStatisticsBuilder {
        crate::types::builders::ImportStatisticsBuilder::default()
    }
}

/// A builder for [`ImportStatistics`](crate::types::ImportStatistics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImportStatisticsBuilder {
    pub(crate) prefixes_found: std::option::Option<i64>,
    pub(crate) prefixes_completed: std::option::Option<i64>,
    pub(crate) files_completed: std::option::Option<i64>,
    pub(crate) events_completed: std::option::Option<i64>,
    pub(crate) failed_entries: std::option::Option<i64>,
}
impl ImportStatisticsBuilder {
    /// <p> The number of S3 prefixes found for the import. </p>
    pub fn prefixes_found(mut self, input: i64) -> Self {
        self.prefixes_found = Some(input);
        self
    }
    /// <p> The number of S3 prefixes found for the import. </p>
    pub fn set_prefixes_found(mut self, input: std::option::Option<i64>) -> Self {
        self.prefixes_found = input;
        self
    }
    /// <p> The number of S3 prefixes that completed import. </p>
    pub fn prefixes_completed(mut self, input: i64) -> Self {
        self.prefixes_completed = Some(input);
        self
    }
    /// <p> The number of S3 prefixes that completed import. </p>
    pub fn set_prefixes_completed(mut self, input: std::option::Option<i64>) -> Self {
        self.prefixes_completed = input;
        self
    }
    /// <p>The number of log files that completed import.</p>
    pub fn files_completed(mut self, input: i64) -> Self {
        self.files_completed = Some(input);
        self
    }
    /// <p>The number of log files that completed import.</p>
    pub fn set_files_completed(mut self, input: std::option::Option<i64>) -> Self {
        self.files_completed = input;
        self
    }
    /// <p> The number of trail events imported into the event data store. </p>
    pub fn events_completed(mut self, input: i64) -> Self {
        self.events_completed = Some(input);
        self
    }
    /// <p> The number of trail events imported into the event data store. </p>
    pub fn set_events_completed(mut self, input: std::option::Option<i64>) -> Self {
        self.events_completed = input;
        self
    }
    /// <p> The number of failed entries. </p>
    pub fn failed_entries(mut self, input: i64) -> Self {
        self.failed_entries = Some(input);
        self
    }
    /// <p> The number of failed entries. </p>
    pub fn set_failed_entries(mut self, input: std::option::Option<i64>) -> Self {
        self.failed_entries = input;
        self
    }
    /// Consumes the builder and constructs a [`ImportStatistics`](crate::types::ImportStatistics).
    pub fn build(self) -> crate::types::ImportStatistics {
        crate::types::ImportStatistics {
            prefixes_found: self.prefixes_found,
            prefixes_completed: self.prefixes_completed,
            files_completed: self.files_completed,
            events_completed: self.events_completed,
            failed_entries: self.failed_entries,
        }
    }
}
