// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns the objects or data listed below if successful. Otherwise, returns an error.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListPublicKeysOutput {
    /// <p>Contains an array of PublicKey objects.</p> <note>
    /// <p>The returned public keys may have validity time ranges that overlap.</p>
    /// </note>
    pub public_key_list: ::std::option::Option<::std::vec::Vec<crate::types::PublicKey>>,
    /// <p>Reserved for future use.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListPublicKeysOutput {
    /// <p>Contains an array of PublicKey objects.</p> <note>
    /// <p>The returned public keys may have validity time ranges that overlap.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.public_key_list.is_none()`.
    pub fn public_key_list(&self) -> &[crate::types::PublicKey] {
        self.public_key_list.as_deref().unwrap_or_default()
    }
    /// <p>Reserved for future use.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListPublicKeysOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListPublicKeysOutput {
    /// Creates a new builder-style object to manufacture [`ListPublicKeysOutput`](crate::operation::list_public_keys::ListPublicKeysOutput).
    pub fn builder() -> crate::operation::list_public_keys::builders::ListPublicKeysOutputBuilder {
        crate::operation::list_public_keys::builders::ListPublicKeysOutputBuilder::default()
    }
}

/// A builder for [`ListPublicKeysOutput`](crate::operation::list_public_keys::ListPublicKeysOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListPublicKeysOutputBuilder {
    pub(crate) public_key_list: ::std::option::Option<::std::vec::Vec<crate::types::PublicKey>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListPublicKeysOutputBuilder {
    /// Appends an item to `public_key_list`.
    ///
    /// To override the contents of this collection use [`set_public_key_list`](Self::set_public_key_list).
    ///
    /// <p>Contains an array of PublicKey objects.</p> <note>
    /// <p>The returned public keys may have validity time ranges that overlap.</p>
    /// </note>
    pub fn public_key_list(mut self, input: crate::types::PublicKey) -> Self {
        let mut v = self.public_key_list.unwrap_or_default();
        v.push(input);
        self.public_key_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains an array of PublicKey objects.</p> <note>
    /// <p>The returned public keys may have validity time ranges that overlap.</p>
    /// </note>
    pub fn set_public_key_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PublicKey>>) -> Self {
        self.public_key_list = input;
        self
    }
    /// <p>Contains an array of PublicKey objects.</p> <note>
    /// <p>The returned public keys may have validity time ranges that overlap.</p>
    /// </note>
    pub fn get_public_key_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PublicKey>> {
        &self.public_key_list
    }
    /// <p>Reserved for future use.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListPublicKeysOutput`](crate::operation::list_public_keys::ListPublicKeysOutput).
    pub fn build(self) -> crate::operation::list_public_keys::ListPublicKeysOutput {
        crate::operation::list_public_keys::ListPublicKeysOutput {
            public_key_list: self.public_key_list,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
