// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetChannelOutput {
    /// <p>The ARN of an channel returned by a <code>GetChannel</code> request.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p> The name of the CloudTrail channel. For service-linked channels, the value is <code>aws-service-channel/service-name/custom-suffix</code> where <code>service-name</code> represents the name of the Amazon Web Services service that created the channel and <code>custom-suffix</code> represents the suffix generated by the Amazon Web Services service. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The event source for the CloudTrail channel.</p>
    #[doc(hidden)]
    pub source: std::option::Option<std::string::String>,
    /// <p> Provides information about the advanced event selectors configured for the channel, and whether the channel applies to all regions or a single region. </p>
    #[doc(hidden)]
    pub source_config: std::option::Option<crate::types::SourceConfig>,
    /// <p>The Amazon Web Services service that created the service-linked channel.</p>
    #[doc(hidden)]
    pub destinations: std::option::Option<std::vec::Vec<crate::types::Destination>>,
    _request_id: Option<String>,
}
impl GetChannelOutput {
    /// <p>The ARN of an channel returned by a <code>GetChannel</code> request.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p> The name of the CloudTrail channel. For service-linked channels, the value is <code>aws-service-channel/service-name/custom-suffix</code> where <code>service-name</code> represents the name of the Amazon Web Services service that created the channel and <code>custom-suffix</code> represents the suffix generated by the Amazon Web Services service. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The event source for the CloudTrail channel.</p>
    pub fn source(&self) -> std::option::Option<&str> {
        self.source.as_deref()
    }
    /// <p> Provides information about the advanced event selectors configured for the channel, and whether the channel applies to all regions or a single region. </p>
    pub fn source_config(&self) -> std::option::Option<&crate::types::SourceConfig> {
        self.source_config.as_ref()
    }
    /// <p>The Amazon Web Services service that created the service-linked channel.</p>
    pub fn destinations(&self) -> std::option::Option<&[crate::types::Destination]> {
        self.destinations.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetChannelOutput {
    /// Creates a new builder-style object to manufacture [`GetChannelOutput`](crate::operation::get_channel::GetChannelOutput).
    pub fn builder() -> crate::operation::get_channel::builders::GetChannelOutputBuilder {
        crate::operation::get_channel::builders::GetChannelOutputBuilder::default()
    }
}

/// A builder for [`GetChannelOutput`](crate::operation::get_channel::GetChannelOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetChannelOutputBuilder {
    pub(crate) channel_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) source: std::option::Option<std::string::String>,
    pub(crate) source_config: std::option::Option<crate::types::SourceConfig>,
    pub(crate) destinations: std::option::Option<std::vec::Vec<crate::types::Destination>>,
    _request_id: Option<String>,
}
impl GetChannelOutputBuilder {
    /// <p>The ARN of an channel returned by a <code>GetChannel</code> request.</p>
    pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_arn = Some(input.into());
        self
    }
    /// <p>The ARN of an channel returned by a <code>GetChannel</code> request.</p>
    pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p> The name of the CloudTrail channel. For service-linked channels, the value is <code>aws-service-channel/service-name/custom-suffix</code> where <code>service-name</code> represents the name of the Amazon Web Services service that created the channel and <code>custom-suffix</code> represents the suffix generated by the Amazon Web Services service. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p> The name of the CloudTrail channel. For service-linked channels, the value is <code>aws-service-channel/service-name/custom-suffix</code> where <code>service-name</code> represents the name of the Amazon Web Services service that created the channel and <code>custom-suffix</code> represents the suffix generated by the Amazon Web Services service. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The event source for the CloudTrail channel.</p>
    pub fn source(mut self, input: impl Into<std::string::String>) -> Self {
        self.source = Some(input.into());
        self
    }
    /// <p>The event source for the CloudTrail channel.</p>
    pub fn set_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p> Provides information about the advanced event selectors configured for the channel, and whether the channel applies to all regions or a single region. </p>
    pub fn source_config(mut self, input: crate::types::SourceConfig) -> Self {
        self.source_config = Some(input);
        self
    }
    /// <p> Provides information about the advanced event selectors configured for the channel, and whether the channel applies to all regions or a single region. </p>
    pub fn set_source_config(
        mut self,
        input: std::option::Option<crate::types::SourceConfig>,
    ) -> Self {
        self.source_config = input;
        self
    }
    /// Appends an item to `destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// <p>The Amazon Web Services service that created the service-linked channel.</p>
    pub fn destinations(mut self, input: crate::types::Destination) -> Self {
        let mut v = self.destinations.unwrap_or_default();
        v.push(input);
        self.destinations = Some(v);
        self
    }
    /// <p>The Amazon Web Services service that created the service-linked channel.</p>
    pub fn set_destinations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Destination>>,
    ) -> Self {
        self.destinations = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetChannelOutput`](crate::operation::get_channel::GetChannelOutput).
    pub fn build(self) -> crate::operation::get_channel::GetChannelOutput {
        crate::operation::get_channel::GetChannelOutput {
            channel_arn: self.channel_arn,
            name: self.name,
            source: self.source,
            source_config: self.source_config,
            destinations: self.destinations,
            _request_id: self._request_id,
        }
    }
}
