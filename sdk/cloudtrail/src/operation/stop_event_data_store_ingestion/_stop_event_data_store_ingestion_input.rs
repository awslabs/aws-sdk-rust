// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StopEventDataStoreIngestionInput {
    /// <p>The ARN (or ID suffix of the ARN) of the event data store for which you want to stop ingestion.</p>
    pub event_data_store: ::std::option::Option<::std::string::String>,
}
impl StopEventDataStoreIngestionInput {
    /// <p>The ARN (or ID suffix of the ARN) of the event data store for which you want to stop ingestion.</p>
    pub fn event_data_store(&self) -> ::std::option::Option<&str> {
        self.event_data_store.as_deref()
    }
}
impl StopEventDataStoreIngestionInput {
    /// Creates a new builder-style object to manufacture [`StopEventDataStoreIngestionInput`](crate::operation::stop_event_data_store_ingestion::StopEventDataStoreIngestionInput).
    pub fn builder() -> crate::operation::stop_event_data_store_ingestion::builders::StopEventDataStoreIngestionInputBuilder {
        crate::operation::stop_event_data_store_ingestion::builders::StopEventDataStoreIngestionInputBuilder::default()
    }
}

/// A builder for [`StopEventDataStoreIngestionInput`](crate::operation::stop_event_data_store_ingestion::StopEventDataStoreIngestionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StopEventDataStoreIngestionInputBuilder {
    pub(crate) event_data_store: ::std::option::Option<::std::string::String>,
}
impl StopEventDataStoreIngestionInputBuilder {
    /// <p>The ARN (or ID suffix of the ARN) of the event data store for which you want to stop ingestion.</p>
    /// This field is required.
    pub fn event_data_store(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_data_store = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN (or ID suffix of the ARN) of the event data store for which you want to stop ingestion.</p>
    pub fn set_event_data_store(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_data_store = input;
        self
    }
    /// <p>The ARN (or ID suffix of the ARN) of the event data store for which you want to stop ingestion.</p>
    pub fn get_event_data_store(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_data_store
    }
    /// Consumes the builder and constructs a [`StopEventDataStoreIngestionInput`](crate::operation::stop_event_data_store_ingestion::StopEventDataStoreIngestionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::stop_event_data_store_ingestion::StopEventDataStoreIngestionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::stop_event_data_store_ingestion::StopEventDataStoreIngestionInput {
            event_data_store: self.event_data_store,
        })
    }
}
