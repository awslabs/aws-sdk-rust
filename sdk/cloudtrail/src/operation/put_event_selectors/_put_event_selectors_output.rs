// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutEventSelectorsOutput {
    /// <p>Specifies the ARN of the trail that was updated with event selectors. The following is the format of a trail ARN.</p>
    /// <p> <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code> </p>
    #[doc(hidden)]
    pub trail_arn: std::option::Option<std::string::String>,
    /// <p>Specifies the event selectors configured for your trail.</p>
    #[doc(hidden)]
    pub event_selectors: std::option::Option<std::vec::Vec<crate::types::EventSelector>>,
    /// <p>Specifies the advanced event selectors configured for your trail.</p>
    #[doc(hidden)]
    pub advanced_event_selectors:
        std::option::Option<std::vec::Vec<crate::types::AdvancedEventSelector>>,
    _request_id: Option<String>,
}
impl PutEventSelectorsOutput {
    /// <p>Specifies the ARN of the trail that was updated with event selectors. The following is the format of a trail ARN.</p>
    /// <p> <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code> </p>
    pub fn trail_arn(&self) -> std::option::Option<&str> {
        self.trail_arn.as_deref()
    }
    /// <p>Specifies the event selectors configured for your trail.</p>
    pub fn event_selectors(&self) -> std::option::Option<&[crate::types::EventSelector]> {
        self.event_selectors.as_deref()
    }
    /// <p>Specifies the advanced event selectors configured for your trail.</p>
    pub fn advanced_event_selectors(
        &self,
    ) -> std::option::Option<&[crate::types::AdvancedEventSelector]> {
        self.advanced_event_selectors.as_deref()
    }
}
impl aws_http::request_id::RequestId for PutEventSelectorsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutEventSelectorsOutput {
    /// Creates a new builder-style object to manufacture [`PutEventSelectorsOutput`](crate::operation::put_event_selectors::PutEventSelectorsOutput).
    pub fn builder(
    ) -> crate::operation::put_event_selectors::builders::PutEventSelectorsOutputBuilder {
        crate::operation::put_event_selectors::builders::PutEventSelectorsOutputBuilder::default()
    }
}

/// A builder for [`PutEventSelectorsOutput`](crate::operation::put_event_selectors::PutEventSelectorsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutEventSelectorsOutputBuilder {
    pub(crate) trail_arn: std::option::Option<std::string::String>,
    pub(crate) event_selectors: std::option::Option<std::vec::Vec<crate::types::EventSelector>>,
    pub(crate) advanced_event_selectors:
        std::option::Option<std::vec::Vec<crate::types::AdvancedEventSelector>>,
    _request_id: Option<String>,
}
impl PutEventSelectorsOutputBuilder {
    /// <p>Specifies the ARN of the trail that was updated with event selectors. The following is the format of a trail ARN.</p>
    /// <p> <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code> </p>
    pub fn trail_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.trail_arn = Some(input.into());
        self
    }
    /// <p>Specifies the ARN of the trail that was updated with event selectors. The following is the format of a trail ARN.</p>
    /// <p> <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code> </p>
    pub fn set_trail_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.trail_arn = input;
        self
    }
    /// Appends an item to `event_selectors`.
    ///
    /// To override the contents of this collection use [`set_event_selectors`](Self::set_event_selectors).
    ///
    /// <p>Specifies the event selectors configured for your trail.</p>
    pub fn event_selectors(mut self, input: crate::types::EventSelector) -> Self {
        let mut v = self.event_selectors.unwrap_or_default();
        v.push(input);
        self.event_selectors = Some(v);
        self
    }
    /// <p>Specifies the event selectors configured for your trail.</p>
    pub fn set_event_selectors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EventSelector>>,
    ) -> Self {
        self.event_selectors = input;
        self
    }
    /// Appends an item to `advanced_event_selectors`.
    ///
    /// To override the contents of this collection use [`set_advanced_event_selectors`](Self::set_advanced_event_selectors).
    ///
    /// <p>Specifies the advanced event selectors configured for your trail.</p>
    pub fn advanced_event_selectors(mut self, input: crate::types::AdvancedEventSelector) -> Self {
        let mut v = self.advanced_event_selectors.unwrap_or_default();
        v.push(input);
        self.advanced_event_selectors = Some(v);
        self
    }
    /// <p>Specifies the advanced event selectors configured for your trail.</p>
    pub fn set_advanced_event_selectors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AdvancedEventSelector>>,
    ) -> Self {
        self.advanced_event_selectors = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PutEventSelectorsOutput`](crate::operation::put_event_selectors::PutEventSelectorsOutput).
    pub fn build(self) -> crate::operation::put_event_selectors::PutEventSelectorsOutput {
        crate::operation::put_event_selectors::PutEventSelectorsOutput {
            trail_arn: self.trail_arn,
            event_selectors: self.event_selectors,
            advanced_event_selectors: self.advanced_event_selectors,
            _request_id: self._request_id,
        }
    }
}
