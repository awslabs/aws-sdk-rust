// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetEventDataStoreOutput {
    /// <p>The event data store Amazon Resource Number (ARN).</p>
    #[doc(hidden)]
    pub event_data_store_arn: std::option::Option<std::string::String>,
    /// <p>The name of the event data store.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The status of an event data store. Values can be <code>ENABLED</code> and <code>PENDING_DELETION</code>.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::EventDataStoreStatus>,
    /// <p>The advanced event selectors used to select events for the data store.</p>
    #[doc(hidden)]
    pub advanced_event_selectors:
        std::option::Option<std::vec::Vec<crate::types::AdvancedEventSelector>>,
    /// <p>Indicates whether the event data store includes events from all regions, or only from the region in which it was created.</p>
    #[doc(hidden)]
    pub multi_region_enabled: std::option::Option<bool>,
    /// <p>Indicates whether an event data store is collecting logged events for an organization in Organizations.</p>
    #[doc(hidden)]
    pub organization_enabled: std::option::Option<bool>,
    /// <p>The retention period of the event data store, in days.</p>
    #[doc(hidden)]
    pub retention_period: std::option::Option<i32>,
    /// <p>Indicates that termination protection is enabled.</p>
    #[doc(hidden)]
    pub termination_protection_enabled: std::option::Option<bool>,
    /// <p>The timestamp of the event data store's creation.</p>
    #[doc(hidden)]
    pub created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Shows the time that an event data store was updated, if applicable. <code>UpdatedTimestamp</code> is always either the same or newer than the time shown in <code>CreatedTimestamp</code>.</p>
    #[doc(hidden)]
    pub updated_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Specifies the KMS key ID that encrypts the events delivered by CloudTrail. The value is a fully specified ARN to a KMS key in the following format.</p>
    /// <p> <code>arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012</code> </p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetEventDataStoreOutput {
    /// <p>The event data store Amazon Resource Number (ARN).</p>
    pub fn event_data_store_arn(&self) -> std::option::Option<&str> {
        self.event_data_store_arn.as_deref()
    }
    /// <p>The name of the event data store.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The status of an event data store. Values can be <code>ENABLED</code> and <code>PENDING_DELETION</code>.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::EventDataStoreStatus> {
        self.status.as_ref()
    }
    /// <p>The advanced event selectors used to select events for the data store.</p>
    pub fn advanced_event_selectors(
        &self,
    ) -> std::option::Option<&[crate::types::AdvancedEventSelector]> {
        self.advanced_event_selectors.as_deref()
    }
    /// <p>Indicates whether the event data store includes events from all regions, or only from the region in which it was created.</p>
    pub fn multi_region_enabled(&self) -> std::option::Option<bool> {
        self.multi_region_enabled
    }
    /// <p>Indicates whether an event data store is collecting logged events for an organization in Organizations.</p>
    pub fn organization_enabled(&self) -> std::option::Option<bool> {
        self.organization_enabled
    }
    /// <p>The retention period of the event data store, in days.</p>
    pub fn retention_period(&self) -> std::option::Option<i32> {
        self.retention_period
    }
    /// <p>Indicates that termination protection is enabled.</p>
    pub fn termination_protection_enabled(&self) -> std::option::Option<bool> {
        self.termination_protection_enabled
    }
    /// <p>The timestamp of the event data store's creation.</p>
    pub fn created_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>Shows the time that an event data store was updated, if applicable. <code>UpdatedTimestamp</code> is always either the same or newer than the time shown in <code>CreatedTimestamp</code>.</p>
    pub fn updated_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_timestamp.as_ref()
    }
    /// <p>Specifies the KMS key ID that encrypts the events delivered by CloudTrail. The value is a fully specified ARN to a KMS key in the following format.</p>
    /// <p> <code>arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012</code> </p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetEventDataStoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEventDataStoreOutput {
    /// Creates a new builder-style object to manufacture [`GetEventDataStoreOutput`](crate::operation::get_event_data_store::GetEventDataStoreOutput).
    pub fn builder(
    ) -> crate::operation::get_event_data_store::builders::GetEventDataStoreOutputBuilder {
        crate::operation::get_event_data_store::builders::GetEventDataStoreOutputBuilder::default()
    }
}

/// A builder for [`GetEventDataStoreOutput`](crate::operation::get_event_data_store::GetEventDataStoreOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetEventDataStoreOutputBuilder {
    pub(crate) event_data_store_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::EventDataStoreStatus>,
    pub(crate) advanced_event_selectors:
        std::option::Option<std::vec::Vec<crate::types::AdvancedEventSelector>>,
    pub(crate) multi_region_enabled: std::option::Option<bool>,
    pub(crate) organization_enabled: std::option::Option<bool>,
    pub(crate) retention_period: std::option::Option<i32>,
    pub(crate) termination_protection_enabled: std::option::Option<bool>,
    pub(crate) created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetEventDataStoreOutputBuilder {
    /// <p>The event data store Amazon Resource Number (ARN).</p>
    pub fn event_data_store_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_data_store_arn = Some(input.into());
        self
    }
    /// <p>The event data store Amazon Resource Number (ARN).</p>
    pub fn set_event_data_store_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.event_data_store_arn = input;
        self
    }
    /// <p>The name of the event data store.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the event data store.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The status of an event data store. Values can be <code>ENABLED</code> and <code>PENDING_DELETION</code>.</p>
    pub fn status(mut self, input: crate::types::EventDataStoreStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of an event data store. Values can be <code>ENABLED</code> and <code>PENDING_DELETION</code>.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::EventDataStoreStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Appends an item to `advanced_event_selectors`.
    ///
    /// To override the contents of this collection use [`set_advanced_event_selectors`](Self::set_advanced_event_selectors).
    ///
    /// <p>The advanced event selectors used to select events for the data store.</p>
    pub fn advanced_event_selectors(mut self, input: crate::types::AdvancedEventSelector) -> Self {
        let mut v = self.advanced_event_selectors.unwrap_or_default();
        v.push(input);
        self.advanced_event_selectors = Some(v);
        self
    }
    /// <p>The advanced event selectors used to select events for the data store.</p>
    pub fn set_advanced_event_selectors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AdvancedEventSelector>>,
    ) -> Self {
        self.advanced_event_selectors = input;
        self
    }
    /// <p>Indicates whether the event data store includes events from all regions, or only from the region in which it was created.</p>
    pub fn multi_region_enabled(mut self, input: bool) -> Self {
        self.multi_region_enabled = Some(input);
        self
    }
    /// <p>Indicates whether the event data store includes events from all regions, or only from the region in which it was created.</p>
    pub fn set_multi_region_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.multi_region_enabled = input;
        self
    }
    /// <p>Indicates whether an event data store is collecting logged events for an organization in Organizations.</p>
    pub fn organization_enabled(mut self, input: bool) -> Self {
        self.organization_enabled = Some(input);
        self
    }
    /// <p>Indicates whether an event data store is collecting logged events for an organization in Organizations.</p>
    pub fn set_organization_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.organization_enabled = input;
        self
    }
    /// <p>The retention period of the event data store, in days.</p>
    pub fn retention_period(mut self, input: i32) -> Self {
        self.retention_period = Some(input);
        self
    }
    /// <p>The retention period of the event data store, in days.</p>
    pub fn set_retention_period(mut self, input: std::option::Option<i32>) -> Self {
        self.retention_period = input;
        self
    }
    /// <p>Indicates that termination protection is enabled.</p>
    pub fn termination_protection_enabled(mut self, input: bool) -> Self {
        self.termination_protection_enabled = Some(input);
        self
    }
    /// <p>Indicates that termination protection is enabled.</p>
    pub fn set_termination_protection_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.termination_protection_enabled = input;
        self
    }
    /// <p>The timestamp of the event data store's creation.</p>
    pub fn created_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = Some(input);
        self
    }
    /// <p>The timestamp of the event data store's creation.</p>
    pub fn set_created_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>Shows the time that an event data store was updated, if applicable. <code>UpdatedTimestamp</code> is always either the same or newer than the time shown in <code>CreatedTimestamp</code>.</p>
    pub fn updated_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_timestamp = Some(input);
        self
    }
    /// <p>Shows the time that an event data store was updated, if applicable. <code>UpdatedTimestamp</code> is always either the same or newer than the time shown in <code>CreatedTimestamp</code>.</p>
    pub fn set_updated_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_timestamp = input;
        self
    }
    /// <p>Specifies the KMS key ID that encrypts the events delivered by CloudTrail. The value is a fully specified ARN to a KMS key in the following format.</p>
    /// <p> <code>arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012</code> </p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>Specifies the KMS key ID that encrypts the events delivered by CloudTrail. The value is a fully specified ARN to a KMS key in the following format.</p>
    /// <p> <code>arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012</code> </p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetEventDataStoreOutput`](crate::operation::get_event_data_store::GetEventDataStoreOutput).
    pub fn build(self) -> crate::operation::get_event_data_store::GetEventDataStoreOutput {
        crate::operation::get_event_data_store::GetEventDataStoreOutput {
            event_data_store_arn: self.event_data_store_arn,
            name: self.name,
            status: self.status,
            advanced_event_selectors: self.advanced_event_selectors,
            multi_region_enabled: self.multi_region_enabled,
            organization_enabled: self.organization_enabled,
            retention_period: self.retention_period,
            termination_protection_enabled: self.termination_protection_enabled,
            created_timestamp: self.created_timestamp,
            updated_timestamp: self.updated_timestamp,
            kms_key_id: self.kms_key_id,
            _request_id: self._request_id,
        }
    }
}
