// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CancelQueryInput {
    /// <p>The ARN (or the ID suffix of the ARN) of an event data store on which the specified query is running.</p>
    #[deprecated(note = "EventDataStore is no longer required by CancelQueryRequest")]
    pub event_data_store: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the query that you want to cancel. The <code>QueryId</code> comes from the response of a <code>StartQuery</code> operation.</p>
    pub query_id: ::std::option::Option<::std::string::String>,
}
impl CancelQueryInput {
    /// <p>The ARN (or the ID suffix of the ARN) of an event data store on which the specified query is running.</p>
    #[deprecated(note = "EventDataStore is no longer required by CancelQueryRequest")]
    pub fn event_data_store(&self) -> ::std::option::Option<&str> {
        self.event_data_store.as_deref()
    }
    /// <p>The ID of the query that you want to cancel. The <code>QueryId</code> comes from the response of a <code>StartQuery</code> operation.</p>
    pub fn query_id(&self) -> ::std::option::Option<&str> {
        self.query_id.as_deref()
    }
}
impl CancelQueryInput {
    /// Creates a new builder-style object to manufacture [`CancelQueryInput`](crate::operation::cancel_query::CancelQueryInput).
    pub fn builder() -> crate::operation::cancel_query::builders::CancelQueryInputBuilder {
        crate::operation::cancel_query::builders::CancelQueryInputBuilder::default()
    }
}

/// A builder for [`CancelQueryInput`](crate::operation::cancel_query::CancelQueryInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CancelQueryInputBuilder {
    pub(crate) event_data_store: ::std::option::Option<::std::string::String>,
    pub(crate) query_id: ::std::option::Option<::std::string::String>,
}
impl CancelQueryInputBuilder {
    /// <p>The ARN (or the ID suffix of the ARN) of an event data store on which the specified query is running.</p>
    #[deprecated(note = "EventDataStore is no longer required by CancelQueryRequest")]
    pub fn event_data_store(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.event_data_store = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN (or the ID suffix of the ARN) of an event data store on which the specified query is running.</p>
    #[deprecated(note = "EventDataStore is no longer required by CancelQueryRequest")]
    pub fn set_event_data_store(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.event_data_store = input;
        self
    }
    /// <p>The ARN (or the ID suffix of the ARN) of an event data store on which the specified query is running.</p>
    #[deprecated(note = "EventDataStore is no longer required by CancelQueryRequest")]
    pub fn get_event_data_store(&self) -> &::std::option::Option<::std::string::String> {
        &self.event_data_store
    }
    /// <p>The ID of the query that you want to cancel. The <code>QueryId</code> comes from the response of a <code>StartQuery</code> operation.</p>
    /// This field is required.
    pub fn query_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the query that you want to cancel. The <code>QueryId</code> comes from the response of a <code>StartQuery</code> operation.</p>
    pub fn set_query_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_id = input;
        self
    }
    /// <p>The ID of the query that you want to cancel. The <code>QueryId</code> comes from the response of a <code>StartQuery</code> operation.</p>
    pub fn get_query_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_id
    }
    /// Consumes the builder and constructs a [`CancelQueryInput`](crate::operation::cancel_query::CancelQueryInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::cancel_query::CancelQueryInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::cancel_query::CancelQueryInput {
            event_data_store: self.event_data_store,
            query_id: self.query_id,
        })
    }
}
