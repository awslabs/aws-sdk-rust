// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelQueryOutput {
    /// <p>The ID of the canceled query.</p>
    #[doc(hidden)]
    pub query_id: std::option::Option<std::string::String>,
    /// <p>Shows the status of a query after a <code>CancelQuery</code> request. Typically, the values shown are either <code>RUNNING</code> or <code>CANCELLED</code>.</p>
    #[doc(hidden)]
    pub query_status: std::option::Option<crate::types::QueryStatus>,
    _request_id: Option<String>,
}
impl CancelQueryOutput {
    /// <p>The ID of the canceled query.</p>
    pub fn query_id(&self) -> std::option::Option<&str> {
        self.query_id.as_deref()
    }
    /// <p>Shows the status of a query after a <code>CancelQuery</code> request. Typically, the values shown are either <code>RUNNING</code> or <code>CANCELLED</code>.</p>
    pub fn query_status(&self) -> std::option::Option<&crate::types::QueryStatus> {
        self.query_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for CancelQueryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CancelQueryOutput {
    /// Creates a new builder-style object to manufacture [`CancelQueryOutput`](crate::operation::cancel_query::CancelQueryOutput).
    pub fn builder() -> crate::operation::cancel_query::builders::CancelQueryOutputBuilder {
        crate::operation::cancel_query::builders::CancelQueryOutputBuilder::default()
    }
}

/// A builder for [`CancelQueryOutput`](crate::operation::cancel_query::CancelQueryOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CancelQueryOutputBuilder {
    pub(crate) query_id: std::option::Option<std::string::String>,
    pub(crate) query_status: std::option::Option<crate::types::QueryStatus>,
    _request_id: Option<String>,
}
impl CancelQueryOutputBuilder {
    /// <p>The ID of the canceled query.</p>
    pub fn query_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.query_id = Some(input.into());
        self
    }
    /// <p>The ID of the canceled query.</p>
    pub fn set_query_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.query_id = input;
        self
    }
    /// <p>Shows the status of a query after a <code>CancelQuery</code> request. Typically, the values shown are either <code>RUNNING</code> or <code>CANCELLED</code>.</p>
    pub fn query_status(mut self, input: crate::types::QueryStatus) -> Self {
        self.query_status = Some(input);
        self
    }
    /// <p>Shows the status of a query after a <code>CancelQuery</code> request. Typically, the values shown are either <code>RUNNING</code> or <code>CANCELLED</code>.</p>
    pub fn set_query_status(
        mut self,
        input: std::option::Option<crate::types::QueryStatus>,
    ) -> Self {
        self.query_status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CancelQueryOutput`](crate::operation::cancel_query::CancelQueryOutput).
    pub fn build(self) -> crate::operation::cancel_query::CancelQueryOutput {
        crate::operation::cancel_query::CancelQueryOutput {
            query_id: self.query_id,
            query_status: self.query_status,
            _request_id: self._request_id,
        }
    }
}
