// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StopImportOutput {
    /// <p> The ID for the import. </p>
    pub import_id: ::std::option::Option<::std::string::String>,
    /// <p> The source S3 bucket for the import. </p>
    pub import_source: ::std::option::Option<crate::types::ImportSource>,
    /// <p> The ARN of the destination event data store. </p>
    pub destinations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p> The status of the import. </p>
    pub import_status: ::std::option::Option<crate::types::ImportStatus>,
    /// <p> The timestamp of the import's creation. </p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> The timestamp of the import's last update. </p>
    pub updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> Used with <code>EndEventTime</code> to bound a <code>StartImport</code> request, and limit imported trail events to only those events logged within a specified time period. </p>
    pub start_event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> Used with <code>StartEventTime</code> to bound a <code>StartImport</code> request, and limit imported trail events to only those events logged within a specified time period. </p>
    pub end_event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> Returns information on the stopped import. </p>
    pub import_statistics: ::std::option::Option<crate::types::ImportStatistics>,
    _request_id: Option<String>,
}
impl StopImportOutput {
    /// <p> The ID for the import. </p>
    pub fn import_id(&self) -> ::std::option::Option<&str> {
        self.import_id.as_deref()
    }
    /// <p> The source S3 bucket for the import. </p>
    pub fn import_source(&self) -> ::std::option::Option<&crate::types::ImportSource> {
        self.import_source.as_ref()
    }
    /// <p> The ARN of the destination event data store. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.destinations.is_none()`.
    pub fn destinations(&self) -> &[::std::string::String] {
        self.destinations.as_deref().unwrap_or_default()
    }
    /// <p> The status of the import. </p>
    pub fn import_status(&self) -> ::std::option::Option<&crate::types::ImportStatus> {
        self.import_status.as_ref()
    }
    /// <p> The timestamp of the import's creation. </p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p> The timestamp of the import's last update. </p>
    pub fn updated_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_timestamp.as_ref()
    }
    /// <p> Used with <code>EndEventTime</code> to bound a <code>StartImport</code> request, and limit imported trail events to only those events logged within a specified time period. </p>
    pub fn start_event_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_event_time.as_ref()
    }
    /// <p> Used with <code>StartEventTime</code> to bound a <code>StartImport</code> request, and limit imported trail events to only those events logged within a specified time period. </p>
    pub fn end_event_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_event_time.as_ref()
    }
    /// <p> Returns information on the stopped import. </p>
    pub fn import_statistics(&self) -> ::std::option::Option<&crate::types::ImportStatistics> {
        self.import_statistics.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for StopImportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StopImportOutput {
    /// Creates a new builder-style object to manufacture [`StopImportOutput`](crate::operation::stop_import::StopImportOutput).
    pub fn builder() -> crate::operation::stop_import::builders::StopImportOutputBuilder {
        crate::operation::stop_import::builders::StopImportOutputBuilder::default()
    }
}

/// A builder for [`StopImportOutput`](crate::operation::stop_import::StopImportOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StopImportOutputBuilder {
    pub(crate) import_id: ::std::option::Option<::std::string::String>,
    pub(crate) import_source: ::std::option::Option<crate::types::ImportSource>,
    pub(crate) destinations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) import_status: ::std::option::Option<crate::types::ImportStatus>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) start_event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_event_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) import_statistics: ::std::option::Option<crate::types::ImportStatistics>,
    _request_id: Option<String>,
}
impl StopImportOutputBuilder {
    /// <p> The ID for the import. </p>
    pub fn import_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.import_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The ID for the import. </p>
    pub fn set_import_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.import_id = input;
        self
    }
    /// <p> The ID for the import. </p>
    pub fn get_import_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.import_id
    }
    /// <p> The source S3 bucket for the import. </p>
    pub fn import_source(mut self, input: crate::types::ImportSource) -> Self {
        self.import_source = ::std::option::Option::Some(input);
        self
    }
    /// <p> The source S3 bucket for the import. </p>
    pub fn set_import_source(mut self, input: ::std::option::Option<crate::types::ImportSource>) -> Self {
        self.import_source = input;
        self
    }
    /// <p> The source S3 bucket for the import. </p>
    pub fn get_import_source(&self) -> &::std::option::Option<crate::types::ImportSource> {
        &self.import_source
    }
    /// Appends an item to `destinations`.
    ///
    /// To override the contents of this collection use [`set_destinations`](Self::set_destinations).
    ///
    /// <p> The ARN of the destination event data store. </p>
    pub fn destinations(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.destinations.unwrap_or_default();
        v.push(input.into());
        self.destinations = ::std::option::Option::Some(v);
        self
    }
    /// <p> The ARN of the destination event data store. </p>
    pub fn set_destinations(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.destinations = input;
        self
    }
    /// <p> The ARN of the destination event data store. </p>
    pub fn get_destinations(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.destinations
    }
    /// <p> The status of the import. </p>
    pub fn import_status(mut self, input: crate::types::ImportStatus) -> Self {
        self.import_status = ::std::option::Option::Some(input);
        self
    }
    /// <p> The status of the import. </p>
    pub fn set_import_status(mut self, input: ::std::option::Option<crate::types::ImportStatus>) -> Self {
        self.import_status = input;
        self
    }
    /// <p> The status of the import. </p>
    pub fn get_import_status(&self) -> &::std::option::Option<crate::types::ImportStatus> {
        &self.import_status
    }
    /// <p> The timestamp of the import's creation. </p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p> The timestamp of the import's creation. </p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p> The timestamp of the import's creation. </p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p> The timestamp of the import's last update. </p>
    pub fn updated_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p> The timestamp of the import's last update. </p>
    pub fn set_updated_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_timestamp = input;
        self
    }
    /// <p> The timestamp of the import's last update. </p>
    pub fn get_updated_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_timestamp
    }
    /// <p> Used with <code>EndEventTime</code> to bound a <code>StartImport</code> request, and limit imported trail events to only those events logged within a specified time period. </p>
    pub fn start_event_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_event_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> Used with <code>EndEventTime</code> to bound a <code>StartImport</code> request, and limit imported trail events to only those events logged within a specified time period. </p>
    pub fn set_start_event_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_event_time = input;
        self
    }
    /// <p> Used with <code>EndEventTime</code> to bound a <code>StartImport</code> request, and limit imported trail events to only those events logged within a specified time period. </p>
    pub fn get_start_event_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_event_time
    }
    /// <p> Used with <code>StartEventTime</code> to bound a <code>StartImport</code> request, and limit imported trail events to only those events logged within a specified time period. </p>
    pub fn end_event_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_event_time = ::std::option::Option::Some(input);
        self
    }
    /// <p> Used with <code>StartEventTime</code> to bound a <code>StartImport</code> request, and limit imported trail events to only those events logged within a specified time period. </p>
    pub fn set_end_event_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_event_time = input;
        self
    }
    /// <p> Used with <code>StartEventTime</code> to bound a <code>StartImport</code> request, and limit imported trail events to only those events logged within a specified time period. </p>
    pub fn get_end_event_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_event_time
    }
    /// <p> Returns information on the stopped import. </p>
    pub fn import_statistics(mut self, input: crate::types::ImportStatistics) -> Self {
        self.import_statistics = ::std::option::Option::Some(input);
        self
    }
    /// <p> Returns information on the stopped import. </p>
    pub fn set_import_statistics(mut self, input: ::std::option::Option<crate::types::ImportStatistics>) -> Self {
        self.import_statistics = input;
        self
    }
    /// <p> Returns information on the stopped import. </p>
    pub fn get_import_statistics(&self) -> &::std::option::Option<crate::types::ImportStatistics> {
        &self.import_statistics
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StopImportOutput`](crate::operation::stop_import::StopImportOutput).
    pub fn build(self) -> crate::operation::stop_import::StopImportOutput {
        crate::operation::stop_import::StopImportOutput {
            import_id: self.import_id,
            import_source: self.import_source,
            destinations: self.destinations,
            import_status: self.import_status,
            created_timestamp: self.created_timestamp,
            updated_timestamp: self.updated_timestamp,
            start_event_time: self.start_event_time,
            end_event_time: self.end_event_time,
            import_statistics: self.import_statistics,
            _request_id: self._request_id,
        }
    }
}
