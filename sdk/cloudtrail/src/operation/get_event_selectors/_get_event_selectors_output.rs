// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetEventSelectorsOutput {
    /// <p>The specified trail ARN that has the event selectors.</p>
    pub trail_arn: ::std::option::Option<::std::string::String>,
    /// <p>The event selectors that are configured for the trail.</p>
    pub event_selectors: ::std::option::Option<::std::vec::Vec<crate::types::EventSelector>>,
    /// <p> The advanced event selectors that are configured for the trail. </p>
    pub advanced_event_selectors: ::std::option::Option<::std::vec::Vec<crate::types::AdvancedEventSelector>>,
    _request_id: Option<String>,
}
impl GetEventSelectorsOutput {
    /// <p>The specified trail ARN that has the event selectors.</p>
    pub fn trail_arn(&self) -> ::std::option::Option<&str> {
        self.trail_arn.as_deref()
    }
    /// <p>The event selectors that are configured for the trail.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_selectors.is_none()`.
    pub fn event_selectors(&self) -> &[crate::types::EventSelector] {
        self.event_selectors.as_deref().unwrap_or_default()
    }
    /// <p> The advanced event selectors that are configured for the trail. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.advanced_event_selectors.is_none()`.
    pub fn advanced_event_selectors(&self) -> &[crate::types::AdvancedEventSelector] {
        self.advanced_event_selectors.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for GetEventSelectorsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetEventSelectorsOutput {
    /// Creates a new builder-style object to manufacture [`GetEventSelectorsOutput`](crate::operation::get_event_selectors::GetEventSelectorsOutput).
    pub fn builder() -> crate::operation::get_event_selectors::builders::GetEventSelectorsOutputBuilder {
        crate::operation::get_event_selectors::builders::GetEventSelectorsOutputBuilder::default()
    }
}

/// A builder for [`GetEventSelectorsOutput`](crate::operation::get_event_selectors::GetEventSelectorsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetEventSelectorsOutputBuilder {
    pub(crate) trail_arn: ::std::option::Option<::std::string::String>,
    pub(crate) event_selectors: ::std::option::Option<::std::vec::Vec<crate::types::EventSelector>>,
    pub(crate) advanced_event_selectors: ::std::option::Option<::std::vec::Vec<crate::types::AdvancedEventSelector>>,
    _request_id: Option<String>,
}
impl GetEventSelectorsOutputBuilder {
    /// <p>The specified trail ARN that has the event selectors.</p>
    pub fn trail_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trail_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The specified trail ARN that has the event selectors.</p>
    pub fn set_trail_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trail_arn = input;
        self
    }
    /// <p>The specified trail ARN that has the event selectors.</p>
    pub fn get_trail_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.trail_arn
    }
    /// Appends an item to `event_selectors`.
    ///
    /// To override the contents of this collection use [`set_event_selectors`](Self::set_event_selectors).
    ///
    /// <p>The event selectors that are configured for the trail.</p>
    pub fn event_selectors(mut self, input: crate::types::EventSelector) -> Self {
        let mut v = self.event_selectors.unwrap_or_default();
        v.push(input);
        self.event_selectors = ::std::option::Option::Some(v);
        self
    }
    /// <p>The event selectors that are configured for the trail.</p>
    pub fn set_event_selectors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EventSelector>>) -> Self {
        self.event_selectors = input;
        self
    }
    /// <p>The event selectors that are configured for the trail.</p>
    pub fn get_event_selectors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EventSelector>> {
        &self.event_selectors
    }
    /// Appends an item to `advanced_event_selectors`.
    ///
    /// To override the contents of this collection use [`set_advanced_event_selectors`](Self::set_advanced_event_selectors).
    ///
    /// <p> The advanced event selectors that are configured for the trail. </p>
    pub fn advanced_event_selectors(mut self, input: crate::types::AdvancedEventSelector) -> Self {
        let mut v = self.advanced_event_selectors.unwrap_or_default();
        v.push(input);
        self.advanced_event_selectors = ::std::option::Option::Some(v);
        self
    }
    /// <p> The advanced event selectors that are configured for the trail. </p>
    pub fn set_advanced_event_selectors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AdvancedEventSelector>>) -> Self {
        self.advanced_event_selectors = input;
        self
    }
    /// <p> The advanced event selectors that are configured for the trail. </p>
    pub fn get_advanced_event_selectors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AdvancedEventSelector>> {
        &self.advanced_event_selectors
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetEventSelectorsOutput`](crate::operation::get_event_selectors::GetEventSelectorsOutput).
    pub fn build(self) -> crate::operation::get_event_selectors::GetEventSelectorsOutput {
        crate::operation::get_event_selectors::GetEventSelectorsOutput {
            trail_arn: self.trail_arn,
            event_selectors: self.event_selectors,
            advanced_event_selectors: self.advanced_event_selectors,
            _request_id: self._request_id,
        }
    }
}
