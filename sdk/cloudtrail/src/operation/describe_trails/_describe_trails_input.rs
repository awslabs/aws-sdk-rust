// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns information about the trail.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTrailsInput {
    /// <p>Specifies a list of trail names, trail ARNs, or both, of the trails to describe. The format of a trail ARN is:</p>
    /// <p> <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code> </p>
    /// <p>If an empty list is specified, information for the trail in the current region is returned.</p>
    /// <ul>
    /// <li> <p>If an empty list is specified and <code>IncludeShadowTrails</code> is false, then information for all trails in the current region is returned.</p> </li>
    /// <li> <p>If an empty list is specified and IncludeShadowTrails is null or true, then information for all trails in the current region and any associated shadow trails in other regions is returned.</p> </li>
    /// </ul> <note>
    /// <p>If one or more trail names are specified, information is returned only if the names match the names of trails belonging only to the current region. To return information about a trail in another region, you must specify its trail ARN.</p>
    /// </note>
    #[doc(hidden)]
    pub trail_name_list: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies whether to include shadow trails in the response. A shadow trail is the replication in a region of a trail that was created in a different region, or in the case of an organization trail, the replication of an organization trail in member accounts. If you do not include shadow trails, organization trails in a member account and region replication trails will not be returned. The default is true.</p>
    #[doc(hidden)]
    pub include_shadow_trails: std::option::Option<bool>,
}
impl DescribeTrailsInput {
    /// <p>Specifies a list of trail names, trail ARNs, or both, of the trails to describe. The format of a trail ARN is:</p>
    /// <p> <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code> </p>
    /// <p>If an empty list is specified, information for the trail in the current region is returned.</p>
    /// <ul>
    /// <li> <p>If an empty list is specified and <code>IncludeShadowTrails</code> is false, then information for all trails in the current region is returned.</p> </li>
    /// <li> <p>If an empty list is specified and IncludeShadowTrails is null or true, then information for all trails in the current region and any associated shadow trails in other regions is returned.</p> </li>
    /// </ul> <note>
    /// <p>If one or more trail names are specified, information is returned only if the names match the names of trails belonging only to the current region. To return information about a trail in another region, you must specify its trail ARN.</p>
    /// </note>
    pub fn trail_name_list(&self) -> std::option::Option<&[std::string::String]> {
        self.trail_name_list.as_deref()
    }
    /// <p>Specifies whether to include shadow trails in the response. A shadow trail is the replication in a region of a trail that was created in a different region, or in the case of an organization trail, the replication of an organization trail in member accounts. If you do not include shadow trails, organization trails in a member account and region replication trails will not be returned. The default is true.</p>
    pub fn include_shadow_trails(&self) -> std::option::Option<bool> {
        self.include_shadow_trails
    }
}
impl DescribeTrailsInput {
    /// Creates a new builder-style object to manufacture [`DescribeTrailsInput`](crate::operation::describe_trails::DescribeTrailsInput).
    pub fn builder() -> crate::operation::describe_trails::builders::DescribeTrailsInputBuilder {
        crate::operation::describe_trails::builders::DescribeTrailsInputBuilder::default()
    }
}

/// A builder for [`DescribeTrailsInput`](crate::operation::describe_trails::DescribeTrailsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeTrailsInputBuilder {
    pub(crate) trail_name_list: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) include_shadow_trails: std::option::Option<bool>,
}
impl DescribeTrailsInputBuilder {
    /// Appends an item to `trail_name_list`.
    ///
    /// To override the contents of this collection use [`set_trail_name_list`](Self::set_trail_name_list).
    ///
    /// <p>Specifies a list of trail names, trail ARNs, or both, of the trails to describe. The format of a trail ARN is:</p>
    /// <p> <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code> </p>
    /// <p>If an empty list is specified, information for the trail in the current region is returned.</p>
    /// <ul>
    /// <li> <p>If an empty list is specified and <code>IncludeShadowTrails</code> is false, then information for all trails in the current region is returned.</p> </li>
    /// <li> <p>If an empty list is specified and IncludeShadowTrails is null or true, then information for all trails in the current region and any associated shadow trails in other regions is returned.</p> </li>
    /// </ul> <note>
    /// <p>If one or more trail names are specified, information is returned only if the names match the names of trails belonging only to the current region. To return information about a trail in another region, you must specify its trail ARN.</p>
    /// </note>
    pub fn trail_name_list(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.trail_name_list.unwrap_or_default();
        v.push(input.into());
        self.trail_name_list = Some(v);
        self
    }
    /// <p>Specifies a list of trail names, trail ARNs, or both, of the trails to describe. The format of a trail ARN is:</p>
    /// <p> <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code> </p>
    /// <p>If an empty list is specified, information for the trail in the current region is returned.</p>
    /// <ul>
    /// <li> <p>If an empty list is specified and <code>IncludeShadowTrails</code> is false, then information for all trails in the current region is returned.</p> </li>
    /// <li> <p>If an empty list is specified and IncludeShadowTrails is null or true, then information for all trails in the current region and any associated shadow trails in other regions is returned.</p> </li>
    /// </ul> <note>
    /// <p>If one or more trail names are specified, information is returned only if the names match the names of trails belonging only to the current region. To return information about a trail in another region, you must specify its trail ARN.</p>
    /// </note>
    pub fn set_trail_name_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.trail_name_list = input;
        self
    }
    /// <p>Specifies whether to include shadow trails in the response. A shadow trail is the replication in a region of a trail that was created in a different region, or in the case of an organization trail, the replication of an organization trail in member accounts. If you do not include shadow trails, organization trails in a member account and region replication trails will not be returned. The default is true.</p>
    pub fn include_shadow_trails(mut self, input: bool) -> Self {
        self.include_shadow_trails = Some(input);
        self
    }
    /// <p>Specifies whether to include shadow trails in the response. A shadow trail is the replication in a region of a trail that was created in a different region, or in the case of an organization trail, the replication of an organization trail in member accounts. If you do not include shadow trails, organization trails in a member account and region replication trails will not be returned. The default is true.</p>
    pub fn set_include_shadow_trails(mut self, input: std::option::Option<bool>) -> Self {
        self.include_shadow_trails = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeTrailsInput`](crate::operation::describe_trails::DescribeTrailsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_trails::DescribeTrailsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::describe_trails::DescribeTrailsInput {
            trail_name_list: self.trail_name_list,
            include_shadow_trails: self.include_shadow_trails,
        })
    }
}
