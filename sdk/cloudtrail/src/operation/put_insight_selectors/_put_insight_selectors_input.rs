// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutInsightSelectorsInput {
    /// <p>The name of the CloudTrail trail for which you want to change or add Insights selectors.</p>
    pub trail_name: ::std::option::Option<::std::string::String>,
    /// <p>A JSON string that contains the insight types you want to log on a trail. <code>ApiCallRateInsight</code> and <code>ApiErrorRateInsight</code> are valid Insight types.</p>
    /// <p>The <code>ApiCallRateInsight</code> Insights type analyzes write-only management API calls that are aggregated per minute against a baseline API call volume.</p>
    /// <p>The <code>ApiErrorRateInsight</code> Insights type analyzes management API calls that result in error codes. The error is shown if the API call is unsuccessful.</p>
    pub insight_selectors: ::std::option::Option<::std::vec::Vec<crate::types::InsightSelector>>,
}
impl PutInsightSelectorsInput {
    /// <p>The name of the CloudTrail trail for which you want to change or add Insights selectors.</p>
    pub fn trail_name(&self) -> ::std::option::Option<&str> {
        self.trail_name.as_deref()
    }
    /// <p>A JSON string that contains the insight types you want to log on a trail. <code>ApiCallRateInsight</code> and <code>ApiErrorRateInsight</code> are valid Insight types.</p>
    /// <p>The <code>ApiCallRateInsight</code> Insights type analyzes write-only management API calls that are aggregated per minute against a baseline API call volume.</p>
    /// <p>The <code>ApiErrorRateInsight</code> Insights type analyzes management API calls that result in error codes. The error is shown if the API call is unsuccessful.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.insight_selectors.is_none()`.
    pub fn insight_selectors(&self) -> &[crate::types::InsightSelector] {
        self.insight_selectors.as_deref().unwrap_or_default()
    }
}
impl PutInsightSelectorsInput {
    /// Creates a new builder-style object to manufacture [`PutInsightSelectorsInput`](crate::operation::put_insight_selectors::PutInsightSelectorsInput).
    pub fn builder() -> crate::operation::put_insight_selectors::builders::PutInsightSelectorsInputBuilder {
        crate::operation::put_insight_selectors::builders::PutInsightSelectorsInputBuilder::default()
    }
}

/// A builder for [`PutInsightSelectorsInput`](crate::operation::put_insight_selectors::PutInsightSelectorsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutInsightSelectorsInputBuilder {
    pub(crate) trail_name: ::std::option::Option<::std::string::String>,
    pub(crate) insight_selectors: ::std::option::Option<::std::vec::Vec<crate::types::InsightSelector>>,
}
impl PutInsightSelectorsInputBuilder {
    /// <p>The name of the CloudTrail trail for which you want to change or add Insights selectors.</p>
    /// This field is required.
    pub fn trail_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.trail_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the CloudTrail trail for which you want to change or add Insights selectors.</p>
    pub fn set_trail_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.trail_name = input;
        self
    }
    /// <p>The name of the CloudTrail trail for which you want to change or add Insights selectors.</p>
    pub fn get_trail_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.trail_name
    }
    /// Appends an item to `insight_selectors`.
    ///
    /// To override the contents of this collection use [`set_insight_selectors`](Self::set_insight_selectors).
    ///
    /// <p>A JSON string that contains the insight types you want to log on a trail. <code>ApiCallRateInsight</code> and <code>ApiErrorRateInsight</code> are valid Insight types.</p>
    /// <p>The <code>ApiCallRateInsight</code> Insights type analyzes write-only management API calls that are aggregated per minute against a baseline API call volume.</p>
    /// <p>The <code>ApiErrorRateInsight</code> Insights type analyzes management API calls that result in error codes. The error is shown if the API call is unsuccessful.</p>
    pub fn insight_selectors(mut self, input: crate::types::InsightSelector) -> Self {
        let mut v = self.insight_selectors.unwrap_or_default();
        v.push(input);
        self.insight_selectors = ::std::option::Option::Some(v);
        self
    }
    /// <p>A JSON string that contains the insight types you want to log on a trail. <code>ApiCallRateInsight</code> and <code>ApiErrorRateInsight</code> are valid Insight types.</p>
    /// <p>The <code>ApiCallRateInsight</code> Insights type analyzes write-only management API calls that are aggregated per minute against a baseline API call volume.</p>
    /// <p>The <code>ApiErrorRateInsight</code> Insights type analyzes management API calls that result in error codes. The error is shown if the API call is unsuccessful.</p>
    pub fn set_insight_selectors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InsightSelector>>) -> Self {
        self.insight_selectors = input;
        self
    }
    /// <p>A JSON string that contains the insight types you want to log on a trail. <code>ApiCallRateInsight</code> and <code>ApiErrorRateInsight</code> are valid Insight types.</p>
    /// <p>The <code>ApiCallRateInsight</code> Insights type analyzes write-only management API calls that are aggregated per minute against a baseline API call volume.</p>
    /// <p>The <code>ApiErrorRateInsight</code> Insights type analyzes management API calls that result in error codes. The error is shown if the API call is unsuccessful.</p>
    pub fn get_insight_selectors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InsightSelector>> {
        &self.insight_selectors
    }
    /// Consumes the builder and constructs a [`PutInsightSelectorsInput`](crate::operation::put_insight_selectors::PutInsightSelectorsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_insight_selectors::PutInsightSelectorsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::put_insight_selectors::PutInsightSelectorsInput {
            trail_name: self.trail_name,
            insight_selectors: self.insight_selectors,
        })
    }
}
