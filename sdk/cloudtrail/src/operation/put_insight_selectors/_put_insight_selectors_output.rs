// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutInsightSelectorsOutput {
    /// <p>The Amazon Resource Name (ARN) of a trail for which you want to change or add Insights selectors.</p>
    #[doc(hidden)]
    pub trail_arn: std::option::Option<std::string::String>,
    /// <p>A JSON string that contains the Insights event types that you want to log on a trail. The valid Insights types in this release are <code>ApiErrorRateInsight</code> and <code>ApiCallRateInsight</code>.</p>
    #[doc(hidden)]
    pub insight_selectors: std::option::Option<std::vec::Vec<crate::types::InsightSelector>>,
    _request_id: Option<String>,
}
impl PutInsightSelectorsOutput {
    /// <p>The Amazon Resource Name (ARN) of a trail for which you want to change or add Insights selectors.</p>
    pub fn trail_arn(&self) -> std::option::Option<&str> {
        self.trail_arn.as_deref()
    }
    /// <p>A JSON string that contains the Insights event types that you want to log on a trail. The valid Insights types in this release are <code>ApiErrorRateInsight</code> and <code>ApiCallRateInsight</code>.</p>
    pub fn insight_selectors(&self) -> std::option::Option<&[crate::types::InsightSelector]> {
        self.insight_selectors.as_deref()
    }
}
impl aws_http::request_id::RequestId for PutInsightSelectorsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutInsightSelectorsOutput {
    /// Creates a new builder-style object to manufacture [`PutInsightSelectorsOutput`](crate::operation::put_insight_selectors::PutInsightSelectorsOutput).
    pub fn builder(
    ) -> crate::operation::put_insight_selectors::builders::PutInsightSelectorsOutputBuilder {
        crate::operation::put_insight_selectors::builders::PutInsightSelectorsOutputBuilder::default(
        )
    }
}

/// A builder for [`PutInsightSelectorsOutput`](crate::operation::put_insight_selectors::PutInsightSelectorsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutInsightSelectorsOutputBuilder {
    pub(crate) trail_arn: std::option::Option<std::string::String>,
    pub(crate) insight_selectors: std::option::Option<std::vec::Vec<crate::types::InsightSelector>>,
    _request_id: Option<String>,
}
impl PutInsightSelectorsOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of a trail for which you want to change or add Insights selectors.</p>
    pub fn trail_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.trail_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a trail for which you want to change or add Insights selectors.</p>
    pub fn set_trail_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.trail_arn = input;
        self
    }
    /// Appends an item to `insight_selectors`.
    ///
    /// To override the contents of this collection use [`set_insight_selectors`](Self::set_insight_selectors).
    ///
    /// <p>A JSON string that contains the Insights event types that you want to log on a trail. The valid Insights types in this release are <code>ApiErrorRateInsight</code> and <code>ApiCallRateInsight</code>.</p>
    pub fn insight_selectors(mut self, input: crate::types::InsightSelector) -> Self {
        let mut v = self.insight_selectors.unwrap_or_default();
        v.push(input);
        self.insight_selectors = Some(v);
        self
    }
    /// <p>A JSON string that contains the Insights event types that you want to log on a trail. The valid Insights types in this release are <code>ApiErrorRateInsight</code> and <code>ApiCallRateInsight</code>.</p>
    pub fn set_insight_selectors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::InsightSelector>>,
    ) -> Self {
        self.insight_selectors = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PutInsightSelectorsOutput`](crate::operation::put_insight_selectors::PutInsightSelectorsOutput).
    pub fn build(self) -> crate::operation::put_insight_selectors::PutInsightSelectorsOutput {
        crate::operation::put_insight_selectors::PutInsightSelectorsOutput {
            trail_arn: self.trail_arn,
            insight_selectors: self.insight_selectors,
            _request_id: self._request_id,
        }
    }
}
