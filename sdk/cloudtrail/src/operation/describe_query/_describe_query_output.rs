// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeQueryOutput {
    /// <p>The ID of the query.</p>
    #[doc(hidden)]
    pub query_id: std::option::Option<std::string::String>,
    /// <p>The SQL code of a query.</p>
    #[doc(hidden)]
    pub query_string: std::option::Option<std::string::String>,
    /// <p>The status of a query. Values for <code>QueryStatus</code> include <code>QUEUED</code>, <code>RUNNING</code>, <code>FINISHED</code>, <code>FAILED</code>, <code>TIMED_OUT</code>, or <code>CANCELLED</code> </p>
    #[doc(hidden)]
    pub query_status: std::option::Option<crate::types::QueryStatus>,
    /// <p>Metadata about a query, including the number of events that were matched, the total number of events scanned, the query run time in milliseconds, and the query's creation time.</p>
    #[doc(hidden)]
    pub query_statistics: std::option::Option<crate::types::QueryStatisticsForDescribeQuery>,
    /// <p>The error message returned if a query failed.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
    /// <p>The URI for the S3 bucket where CloudTrail delivered query results, if applicable.</p>
    #[doc(hidden)]
    pub delivery_s3_uri: std::option::Option<std::string::String>,
    /// <p>The delivery status.</p>
    #[doc(hidden)]
    pub delivery_status: std::option::Option<crate::types::DeliveryStatus>,
    _request_id: Option<String>,
}
impl DescribeQueryOutput {
    /// <p>The ID of the query.</p>
    pub fn query_id(&self) -> std::option::Option<&str> {
        self.query_id.as_deref()
    }
    /// <p>The SQL code of a query.</p>
    pub fn query_string(&self) -> std::option::Option<&str> {
        self.query_string.as_deref()
    }
    /// <p>The status of a query. Values for <code>QueryStatus</code> include <code>QUEUED</code>, <code>RUNNING</code>, <code>FINISHED</code>, <code>FAILED</code>, <code>TIMED_OUT</code>, or <code>CANCELLED</code> </p>
    pub fn query_status(&self) -> std::option::Option<&crate::types::QueryStatus> {
        self.query_status.as_ref()
    }
    /// <p>Metadata about a query, including the number of events that were matched, the total number of events scanned, the query run time in milliseconds, and the query's creation time.</p>
    pub fn query_statistics(
        &self,
    ) -> std::option::Option<&crate::types::QueryStatisticsForDescribeQuery> {
        self.query_statistics.as_ref()
    }
    /// <p>The error message returned if a query failed.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
    /// <p>The URI for the S3 bucket where CloudTrail delivered query results, if applicable.</p>
    pub fn delivery_s3_uri(&self) -> std::option::Option<&str> {
        self.delivery_s3_uri.as_deref()
    }
    /// <p>The delivery status.</p>
    pub fn delivery_status(&self) -> std::option::Option<&crate::types::DeliveryStatus> {
        self.delivery_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeQueryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeQueryOutput {
    /// Creates a new builder-style object to manufacture [`DescribeQueryOutput`](crate::operation::describe_query::DescribeQueryOutput).
    pub fn builder() -> crate::operation::describe_query::builders::DescribeQueryOutputBuilder {
        crate::operation::describe_query::builders::DescribeQueryOutputBuilder::default()
    }
}

/// A builder for [`DescribeQueryOutput`](crate::operation::describe_query::DescribeQueryOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeQueryOutputBuilder {
    pub(crate) query_id: std::option::Option<std::string::String>,
    pub(crate) query_string: std::option::Option<std::string::String>,
    pub(crate) query_status: std::option::Option<crate::types::QueryStatus>,
    pub(crate) query_statistics: std::option::Option<crate::types::QueryStatisticsForDescribeQuery>,
    pub(crate) error_message: std::option::Option<std::string::String>,
    pub(crate) delivery_s3_uri: std::option::Option<std::string::String>,
    pub(crate) delivery_status: std::option::Option<crate::types::DeliveryStatus>,
    _request_id: Option<String>,
}
impl DescribeQueryOutputBuilder {
    /// <p>The ID of the query.</p>
    pub fn query_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.query_id = Some(input.into());
        self
    }
    /// <p>The ID of the query.</p>
    pub fn set_query_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.query_id = input;
        self
    }
    /// <p>The SQL code of a query.</p>
    pub fn query_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.query_string = Some(input.into());
        self
    }
    /// <p>The SQL code of a query.</p>
    pub fn set_query_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.query_string = input;
        self
    }
    /// <p>The status of a query. Values for <code>QueryStatus</code> include <code>QUEUED</code>, <code>RUNNING</code>, <code>FINISHED</code>, <code>FAILED</code>, <code>TIMED_OUT</code>, or <code>CANCELLED</code> </p>
    pub fn query_status(mut self, input: crate::types::QueryStatus) -> Self {
        self.query_status = Some(input);
        self
    }
    /// <p>The status of a query. Values for <code>QueryStatus</code> include <code>QUEUED</code>, <code>RUNNING</code>, <code>FINISHED</code>, <code>FAILED</code>, <code>TIMED_OUT</code>, or <code>CANCELLED</code> </p>
    pub fn set_query_status(
        mut self,
        input: std::option::Option<crate::types::QueryStatus>,
    ) -> Self {
        self.query_status = input;
        self
    }
    /// <p>Metadata about a query, including the number of events that were matched, the total number of events scanned, the query run time in milliseconds, and the query's creation time.</p>
    pub fn query_statistics(
        mut self,
        input: crate::types::QueryStatisticsForDescribeQuery,
    ) -> Self {
        self.query_statistics = Some(input);
        self
    }
    /// <p>Metadata about a query, including the number of events that were matched, the total number of events scanned, the query run time in milliseconds, and the query's creation time.</p>
    pub fn set_query_statistics(
        mut self,
        input: std::option::Option<crate::types::QueryStatisticsForDescribeQuery>,
    ) -> Self {
        self.query_statistics = input;
        self
    }
    /// <p>The error message returned if a query failed.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>The error message returned if a query failed.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The URI for the S3 bucket where CloudTrail delivered query results, if applicable.</p>
    pub fn delivery_s3_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.delivery_s3_uri = Some(input.into());
        self
    }
    /// <p>The URI for the S3 bucket where CloudTrail delivered query results, if applicable.</p>
    pub fn set_delivery_s3_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.delivery_s3_uri = input;
        self
    }
    /// <p>The delivery status.</p>
    pub fn delivery_status(mut self, input: crate::types::DeliveryStatus) -> Self {
        self.delivery_status = Some(input);
        self
    }
    /// <p>The delivery status.</p>
    pub fn set_delivery_status(
        mut self,
        input: std::option::Option<crate::types::DeliveryStatus>,
    ) -> Self {
        self.delivery_status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeQueryOutput`](crate::operation::describe_query::DescribeQueryOutput).
    pub fn build(self) -> crate::operation::describe_query::DescribeQueryOutput {
        crate::operation::describe_query::DescribeQueryOutput {
            query_id: self.query_id,
            query_string: self.query_string,
            query_status: self.query_status,
            query_statistics: self.query_statistics,
            error_message: self.error_message,
            delivery_s3_uri: self.delivery_s3_uri,
            delivery_status: self.delivery_status,
            _request_id: self._request_id,
        }
    }
}
