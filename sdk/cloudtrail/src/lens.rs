// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_get_query_results_output_next_token(
    input: &crate::output::GetQueryResultsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_event_data_stores_output_next_token(
    input: &crate::output::ListEventDataStoresOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_public_keys_output_next_token(
    input: &crate::output::ListPublicKeysOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_queries_output_next_token(
    input: &crate::output::ListQueriesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_tags_output_next_token(
    input: &crate::output::ListTagsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_trails_output_next_token(
    input: &crate::output::ListTrailsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_lookup_events_output_next_token(
    input: &crate::output::LookupEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_public_keys_output_public_key_list(
    input: crate::output::ListPublicKeysOutput,
) -> std::option::Option<std::vec::Vec<crate::model::PublicKey>> {
    let input = match input.public_key_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_tags_output_resource_tag_list(
    input: crate::output::ListTagsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ResourceTag>> {
    let input = match input.resource_tag_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_trails_output_trails(
    input: crate::output::ListTrailsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TrailInfo>> {
    let input = match input.trails {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_lookup_events_output_events(
    input: crate::output::LookupEventsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Event>> {
    let input = match input.events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
