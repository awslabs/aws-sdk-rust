// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    CloudTrailArnInvalidException(crate::error::CloudTrailArnInvalidException),
    CloudTrailAccessNotEnabledException(crate::error::CloudTrailAccessNotEnabledException),
    CloudTrailInvalidClientTokenIdException(crate::error::CloudTrailInvalidClientTokenIdException),
    CloudWatchLogsDeliveryUnavailableException(
        crate::error::CloudWatchLogsDeliveryUnavailableException,
    ),
    ConflictException(crate::error::ConflictException),
    InsightNotEnabledException(crate::error::InsightNotEnabledException),
    InsufficientDependencyServiceAccessPermissionException(
        crate::error::InsufficientDependencyServiceAccessPermissionException,
    ),
    InsufficientEncryptionPolicyException(crate::error::InsufficientEncryptionPolicyException),
    InsufficientS3BucketPolicyException(crate::error::InsufficientS3BucketPolicyException),
    InsufficientSnsTopicPolicyException(crate::error::InsufficientSnsTopicPolicyException),
    InvalidCloudWatchLogsLogGroupArnException(
        crate::error::InvalidCloudWatchLogsLogGroupArnException,
    ),
    InvalidCloudWatchLogsRoleArnException(crate::error::InvalidCloudWatchLogsRoleArnException),
    InvalidEventCategoryException(crate::error::InvalidEventCategoryException),
    InvalidEventSelectorsException(crate::error::InvalidEventSelectorsException),
    InvalidHomeRegionException(crate::error::InvalidHomeRegionException),
    InvalidInsightSelectorsException(crate::error::InvalidInsightSelectorsException),
    InvalidKmsKeyIdException(crate::error::InvalidKmsKeyIdException),
    InvalidLookupAttributesException(crate::error::InvalidLookupAttributesException),
    InvalidMaxResultsException(crate::error::InvalidMaxResultsException),
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    InvalidParameterCombinationException(crate::error::InvalidParameterCombinationException),
    InvalidS3BucketNameException(crate::error::InvalidS3BucketNameException),
    InvalidS3PrefixException(crate::error::InvalidS3PrefixException),
    InvalidSnsTopicNameException(crate::error::InvalidSnsTopicNameException),
    InvalidTagParameterException(crate::error::InvalidTagParameterException),
    InvalidTimeRangeException(crate::error::InvalidTimeRangeException),
    InvalidTokenException(crate::error::InvalidTokenException),
    InvalidTrailNameException(crate::error::InvalidTrailNameException),
    KmsException(crate::error::KmsException),
    KmsKeyDisabledException(crate::error::KmsKeyDisabledException),
    KmsKeyNotFoundException(crate::error::KmsKeyNotFoundException),
    MaximumNumberOfTrailsExceededException(crate::error::MaximumNumberOfTrailsExceededException),
    NotOrganizationMasterAccountException(crate::error::NotOrganizationMasterAccountException),
    OperationNotPermittedException(crate::error::OperationNotPermittedException),
    OrganizationNotInAllFeaturesModeException(
        crate::error::OrganizationNotInAllFeaturesModeException,
    ),
    OrganizationsNotInUseException(crate::error::OrganizationsNotInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    ResourceTypeNotSupportedException(crate::error::ResourceTypeNotSupportedException),
    S3BucketDoesNotExistException(crate::error::S3BucketDoesNotExistException),
    TagsLimitExceededException(crate::error::TagsLimitExceededException),
    TrailAlreadyExistsException(crate::error::TrailAlreadyExistsException),
    TrailNotFoundException(crate::error::TrailNotFoundException),
    TrailNotProvidedException(crate::error::TrailNotProvidedException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::CloudTrailArnInvalidException(inner) => inner.fmt(f),
            Error::CloudTrailAccessNotEnabledException(inner) => inner.fmt(f),
            Error::CloudTrailInvalidClientTokenIdException(inner) => inner.fmt(f),
            Error::CloudWatchLogsDeliveryUnavailableException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InsightNotEnabledException(inner) => inner.fmt(f),
            Error::InsufficientDependencyServiceAccessPermissionException(inner) => inner.fmt(f),
            Error::InsufficientEncryptionPolicyException(inner) => inner.fmt(f),
            Error::InsufficientS3BucketPolicyException(inner) => inner.fmt(f),
            Error::InsufficientSnsTopicPolicyException(inner) => inner.fmt(f),
            Error::InvalidCloudWatchLogsLogGroupArnException(inner) => inner.fmt(f),
            Error::InvalidCloudWatchLogsRoleArnException(inner) => inner.fmt(f),
            Error::InvalidEventCategoryException(inner) => inner.fmt(f),
            Error::InvalidEventSelectorsException(inner) => inner.fmt(f),
            Error::InvalidHomeRegionException(inner) => inner.fmt(f),
            Error::InvalidInsightSelectorsException(inner) => inner.fmt(f),
            Error::InvalidKmsKeyIdException(inner) => inner.fmt(f),
            Error::InvalidLookupAttributesException(inner) => inner.fmt(f),
            Error::InvalidMaxResultsException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::InvalidParameterCombinationException(inner) => inner.fmt(f),
            Error::InvalidS3BucketNameException(inner) => inner.fmt(f),
            Error::InvalidS3PrefixException(inner) => inner.fmt(f),
            Error::InvalidSnsTopicNameException(inner) => inner.fmt(f),
            Error::InvalidTagParameterException(inner) => inner.fmt(f),
            Error::InvalidTimeRangeException(inner) => inner.fmt(f),
            Error::InvalidTokenException(inner) => inner.fmt(f),
            Error::InvalidTrailNameException(inner) => inner.fmt(f),
            Error::KmsException(inner) => inner.fmt(f),
            Error::KmsKeyDisabledException(inner) => inner.fmt(f),
            Error::KmsKeyNotFoundException(inner) => inner.fmt(f),
            Error::MaximumNumberOfTrailsExceededException(inner) => inner.fmt(f),
            Error::NotOrganizationMasterAccountException(inner) => inner.fmt(f),
            Error::OperationNotPermittedException(inner) => inner.fmt(f),
            Error::OrganizationNotInAllFeaturesModeException(inner) => inner.fmt(f),
            Error::OrganizationsNotInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ResourceTypeNotSupportedException(inner) => inner.fmt(f),
            Error::S3BucketDoesNotExistException(inner) => inner.fmt(f),
            Error::TagsLimitExceededException(inner) => inner.fmt(f),
            Error::TrailAlreadyExistsException(inner) => inner.fmt(f),
            Error::TrailNotFoundException(inner) => inner.fmt(f),
            Error::TrailNotProvidedException(inner) => inner.fmt(f),
            Error::UnsupportedOperationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AddTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AddTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AddTagsErrorKind::CloudTrailArnInvalidException(inner) => {
                    Error::CloudTrailArnInvalidException(inner)
                }
                crate::error::AddTagsErrorKind::InvalidTagParameterException(inner) => {
                    Error::InvalidTagParameterException(inner)
                }
                crate::error::AddTagsErrorKind::InvalidTrailNameException(inner) => {
                    Error::InvalidTrailNameException(inner)
                }
                crate::error::AddTagsErrorKind::NotOrganizationMasterAccountException(inner) => {
                    Error::NotOrganizationMasterAccountException(inner)
                }
                crate::error::AddTagsErrorKind::OperationNotPermittedException(inner) => {
                    Error::OperationNotPermittedException(inner)
                }
                crate::error::AddTagsErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::AddTagsErrorKind::ResourceTypeNotSupportedException(inner) => {
                    Error::ResourceTypeNotSupportedException(inner)
                }
                crate::error::AddTagsErrorKind::TagsLimitExceededException(inner) => {
                    Error::TagsLimitExceededException(inner)
                }
                crate::error::AddTagsErrorKind::UnsupportedOperationException(inner) => {
                    Error::UnsupportedOperationException(inner)
                }
                crate::error::AddTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateTrailError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateTrailError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CreateTrailErrorKind::CloudTrailAccessNotEnabledException(inner) => Error::CloudTrailAccessNotEnabledException(inner),
                crate::error::CreateTrailErrorKind::CloudTrailInvalidClientTokenIdException(inner) => Error::CloudTrailInvalidClientTokenIdException(inner),
                crate::error::CreateTrailErrorKind::CloudWatchLogsDeliveryUnavailableException(inner) => Error::CloudWatchLogsDeliveryUnavailableException(inner),
                crate::error::CreateTrailErrorKind::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
                crate::error::CreateTrailErrorKind::InsufficientEncryptionPolicyException(inner) => Error::InsufficientEncryptionPolicyException(inner),
                crate::error::CreateTrailErrorKind::InsufficientS3BucketPolicyException(inner) => Error::InsufficientS3BucketPolicyException(inner),
                crate::error::CreateTrailErrorKind::InsufficientSnsTopicPolicyException(inner) => Error::InsufficientSnsTopicPolicyException(inner),
                crate::error::CreateTrailErrorKind::InvalidCloudWatchLogsLogGroupArnException(inner) => Error::InvalidCloudWatchLogsLogGroupArnException(inner),
                crate::error::CreateTrailErrorKind::InvalidCloudWatchLogsRoleArnException(inner) => Error::InvalidCloudWatchLogsRoleArnException(inner),
                crate::error::CreateTrailErrorKind::InvalidKmsKeyIdException(inner) => Error::InvalidKmsKeyIdException(inner),
                crate::error::CreateTrailErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::CreateTrailErrorKind::InvalidS3BucketNameException(inner) => Error::InvalidS3BucketNameException(inner),
                crate::error::CreateTrailErrorKind::InvalidS3PrefixException(inner) => Error::InvalidS3PrefixException(inner),
                crate::error::CreateTrailErrorKind::InvalidSnsTopicNameException(inner) => Error::InvalidSnsTopicNameException(inner),
                crate::error::CreateTrailErrorKind::InvalidTagParameterException(inner) => Error::InvalidTagParameterException(inner),
                crate::error::CreateTrailErrorKind::InvalidTrailNameException(inner) => Error::InvalidTrailNameException(inner),
                crate::error::CreateTrailErrorKind::KmsException(inner) => Error::KmsException(inner),
                crate::error::CreateTrailErrorKind::KmsKeyDisabledException(inner) => Error::KmsKeyDisabledException(inner),
                crate::error::CreateTrailErrorKind::KmsKeyNotFoundException(inner) => Error::KmsKeyNotFoundException(inner),
                crate::error::CreateTrailErrorKind::MaximumNumberOfTrailsExceededException(inner) => Error::MaximumNumberOfTrailsExceededException(inner),
                crate::error::CreateTrailErrorKind::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
                crate::error::CreateTrailErrorKind::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
                crate::error::CreateTrailErrorKind::OrganizationNotInAllFeaturesModeException(inner) => Error::OrganizationNotInAllFeaturesModeException(inner),
                crate::error::CreateTrailErrorKind::OrganizationsNotInUseException(inner) => Error::OrganizationsNotInUseException(inner),
                crate::error::CreateTrailErrorKind::S3BucketDoesNotExistException(inner) => Error::S3BucketDoesNotExistException(inner),
                crate::error::CreateTrailErrorKind::TrailAlreadyExistsException(inner) => Error::TrailAlreadyExistsException(inner),
                crate::error::CreateTrailErrorKind::TrailNotProvidedException(inner) => Error::TrailNotProvidedException(inner),
                crate::error::CreateTrailErrorKind::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
                crate::error::CreateTrailErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteTrailError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteTrailError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteTrailErrorKind::ConflictException(inner) => Error::ConflictException(inner),
                crate::error::DeleteTrailErrorKind::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
                crate::error::DeleteTrailErrorKind::InvalidHomeRegionException(inner) => Error::InvalidHomeRegionException(inner),
                crate::error::DeleteTrailErrorKind::InvalidTrailNameException(inner) => Error::InvalidTrailNameException(inner),
                crate::error::DeleteTrailErrorKind::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
                crate::error::DeleteTrailErrorKind::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
                crate::error::DeleteTrailErrorKind::TrailNotFoundException(inner) => Error::TrailNotFoundException(inner),
                crate::error::DeleteTrailErrorKind::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
                crate::error::DeleteTrailErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeTrailsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeTrailsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeTrailsErrorKind::InvalidTrailNameException(inner) => {
                    Error::InvalidTrailNameException(inner)
                }
                crate::error::DescribeTrailsErrorKind::OperationNotPermittedException(inner) => {
                    Error::OperationNotPermittedException(inner)
                }
                crate::error::DescribeTrailsErrorKind::UnsupportedOperationException(inner) => {
                    Error::UnsupportedOperationException(inner)
                }
                crate::error::DescribeTrailsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetEventSelectorsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetEventSelectorsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetEventSelectorsErrorKind::InvalidTrailNameException(inner) => {
                    Error::InvalidTrailNameException(inner)
                }
                crate::error::GetEventSelectorsErrorKind::OperationNotPermittedException(inner) => {
                    Error::OperationNotPermittedException(inner)
                }
                crate::error::GetEventSelectorsErrorKind::TrailNotFoundException(inner) => {
                    Error::TrailNotFoundException(inner)
                }
                crate::error::GetEventSelectorsErrorKind::UnsupportedOperationException(inner) => {
                    Error::UnsupportedOperationException(inner)
                }
                crate::error::GetEventSelectorsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetInsightSelectorsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetInsightSelectorsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetInsightSelectorsErrorKind::InsightNotEnabledException(inner) => {
                    Error::InsightNotEnabledException(inner)
                }
                crate::error::GetInsightSelectorsErrorKind::InvalidTrailNameException(inner) => {
                    Error::InvalidTrailNameException(inner)
                }
                crate::error::GetInsightSelectorsErrorKind::OperationNotPermittedException(
                    inner,
                ) => Error::OperationNotPermittedException(inner),
                crate::error::GetInsightSelectorsErrorKind::TrailNotFoundException(inner) => {
                    Error::TrailNotFoundException(inner)
                }
                crate::error::GetInsightSelectorsErrorKind::UnsupportedOperationException(
                    inner,
                ) => Error::UnsupportedOperationException(inner),
                crate::error::GetInsightSelectorsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTrailError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetTrailError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTrailErrorKind::InvalidTrailNameException(inner) => {
                    Error::InvalidTrailNameException(inner)
                }
                crate::error::GetTrailErrorKind::OperationNotPermittedException(inner) => {
                    Error::OperationNotPermittedException(inner)
                }
                crate::error::GetTrailErrorKind::TrailNotFoundException(inner) => {
                    Error::TrailNotFoundException(inner)
                }
                crate::error::GetTrailErrorKind::UnsupportedOperationException(inner) => {
                    Error::UnsupportedOperationException(inner)
                }
                crate::error::GetTrailErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetTrailStatusError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetTrailStatusError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetTrailStatusErrorKind::InvalidTrailNameException(inner) => {
                    Error::InvalidTrailNameException(inner)
                }
                crate::error::GetTrailStatusErrorKind::OperationNotPermittedException(inner) => {
                    Error::OperationNotPermittedException(inner)
                }
                crate::error::GetTrailStatusErrorKind::TrailNotFoundException(inner) => {
                    Error::TrailNotFoundException(inner)
                }
                crate::error::GetTrailStatusErrorKind::UnsupportedOperationException(inner) => {
                    Error::UnsupportedOperationException(inner)
                }
                crate::error::GetTrailStatusErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListPublicKeysError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListPublicKeysError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListPublicKeysErrorKind::InvalidTimeRangeException(inner) => {
                    Error::InvalidTimeRangeException(inner)
                }
                crate::error::ListPublicKeysErrorKind::InvalidTokenException(inner) => {
                    Error::InvalidTokenException(inner)
                }
                crate::error::ListPublicKeysErrorKind::OperationNotPermittedException(inner) => {
                    Error::OperationNotPermittedException(inner)
                }
                crate::error::ListPublicKeysErrorKind::UnsupportedOperationException(inner) => {
                    Error::UnsupportedOperationException(inner)
                }
                crate::error::ListPublicKeysErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsErrorKind::CloudTrailArnInvalidException(inner) => {
                    Error::CloudTrailArnInvalidException(inner)
                }
                crate::error::ListTagsErrorKind::InvalidTokenException(inner) => {
                    Error::InvalidTokenException(inner)
                }
                crate::error::ListTagsErrorKind::InvalidTrailNameException(inner) => {
                    Error::InvalidTrailNameException(inner)
                }
                crate::error::ListTagsErrorKind::OperationNotPermittedException(inner) => {
                    Error::OperationNotPermittedException(inner)
                }
                crate::error::ListTagsErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListTagsErrorKind::ResourceTypeNotSupportedException(inner) => {
                    Error::ResourceTypeNotSupportedException(inner)
                }
                crate::error::ListTagsErrorKind::UnsupportedOperationException(inner) => {
                    Error::UnsupportedOperationException(inner)
                }
                crate::error::ListTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTrailsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTrailsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTrailsErrorKind::OperationNotPermittedException(inner) => {
                    Error::OperationNotPermittedException(inner)
                }
                crate::error::ListTrailsErrorKind::UnsupportedOperationException(inner) => {
                    Error::UnsupportedOperationException(inner)
                }
                crate::error::ListTrailsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::LookupEventsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::LookupEventsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::LookupEventsErrorKind::InvalidEventCategoryException(inner) => {
                    Error::InvalidEventCategoryException(inner)
                }
                crate::error::LookupEventsErrorKind::InvalidLookupAttributesException(inner) => {
                    Error::InvalidLookupAttributesException(inner)
                }
                crate::error::LookupEventsErrorKind::InvalidMaxResultsException(inner) => {
                    Error::InvalidMaxResultsException(inner)
                }
                crate::error::LookupEventsErrorKind::InvalidNextTokenException(inner) => {
                    Error::InvalidNextTokenException(inner)
                }
                crate::error::LookupEventsErrorKind::InvalidTimeRangeException(inner) => {
                    Error::InvalidTimeRangeException(inner)
                }
                crate::error::LookupEventsErrorKind::OperationNotPermittedException(inner) => {
                    Error::OperationNotPermittedException(inner)
                }
                crate::error::LookupEventsErrorKind::UnsupportedOperationException(inner) => {
                    Error::UnsupportedOperationException(inner)
                }
                crate::error::LookupEventsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutEventSelectorsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutEventSelectorsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::PutEventSelectorsErrorKind::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
                crate::error::PutEventSelectorsErrorKind::InvalidEventSelectorsException(inner) => Error::InvalidEventSelectorsException(inner),
                crate::error::PutEventSelectorsErrorKind::InvalidHomeRegionException(inner) => Error::InvalidHomeRegionException(inner),
                crate::error::PutEventSelectorsErrorKind::InvalidTrailNameException(inner) => Error::InvalidTrailNameException(inner),
                crate::error::PutEventSelectorsErrorKind::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
                crate::error::PutEventSelectorsErrorKind::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
                crate::error::PutEventSelectorsErrorKind::TrailNotFoundException(inner) => Error::TrailNotFoundException(inner),
                crate::error::PutEventSelectorsErrorKind::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
                crate::error::PutEventSelectorsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutInsightSelectorsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutInsightSelectorsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::PutInsightSelectorsErrorKind::InsufficientEncryptionPolicyException(inner) => Error::InsufficientEncryptionPolicyException(inner),
                crate::error::PutInsightSelectorsErrorKind::InsufficientS3BucketPolicyException(inner) => Error::InsufficientS3BucketPolicyException(inner),
                crate::error::PutInsightSelectorsErrorKind::InvalidHomeRegionException(inner) => Error::InvalidHomeRegionException(inner),
                crate::error::PutInsightSelectorsErrorKind::InvalidInsightSelectorsException(inner) => Error::InvalidInsightSelectorsException(inner),
                crate::error::PutInsightSelectorsErrorKind::InvalidTrailNameException(inner) => Error::InvalidTrailNameException(inner),
                crate::error::PutInsightSelectorsErrorKind::KmsException(inner) => Error::KmsException(inner),
                crate::error::PutInsightSelectorsErrorKind::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
                crate::error::PutInsightSelectorsErrorKind::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
                crate::error::PutInsightSelectorsErrorKind::S3BucketDoesNotExistException(inner) => Error::S3BucketDoesNotExistException(inner),
                crate::error::PutInsightSelectorsErrorKind::TrailNotFoundException(inner) => Error::TrailNotFoundException(inner),
                crate::error::PutInsightSelectorsErrorKind::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
                crate::error::PutInsightSelectorsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RemoveTagsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RemoveTagsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RemoveTagsErrorKind::CloudTrailArnInvalidException(inner) => {
                    Error::CloudTrailArnInvalidException(inner)
                }
                crate::error::RemoveTagsErrorKind::InvalidTagParameterException(inner) => {
                    Error::InvalidTagParameterException(inner)
                }
                crate::error::RemoveTagsErrorKind::InvalidTrailNameException(inner) => {
                    Error::InvalidTrailNameException(inner)
                }
                crate::error::RemoveTagsErrorKind::NotOrganizationMasterAccountException(inner) => {
                    Error::NotOrganizationMasterAccountException(inner)
                }
                crate::error::RemoveTagsErrorKind::OperationNotPermittedException(inner) => {
                    Error::OperationNotPermittedException(inner)
                }
                crate::error::RemoveTagsErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::RemoveTagsErrorKind::ResourceTypeNotSupportedException(inner) => {
                    Error::ResourceTypeNotSupportedException(inner)
                }
                crate::error::RemoveTagsErrorKind::UnsupportedOperationException(inner) => {
                    Error::UnsupportedOperationException(inner)
                }
                crate::error::RemoveTagsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartLoggingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartLoggingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::StartLoggingErrorKind::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
                crate::error::StartLoggingErrorKind::InvalidHomeRegionException(inner) => Error::InvalidHomeRegionException(inner),
                crate::error::StartLoggingErrorKind::InvalidTrailNameException(inner) => Error::InvalidTrailNameException(inner),
                crate::error::StartLoggingErrorKind::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
                crate::error::StartLoggingErrorKind::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
                crate::error::StartLoggingErrorKind::TrailNotFoundException(inner) => Error::TrailNotFoundException(inner),
                crate::error::StartLoggingErrorKind::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
                crate::error::StartLoggingErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopLoggingError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopLoggingError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::StopLoggingErrorKind::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
                crate::error::StopLoggingErrorKind::InvalidHomeRegionException(inner) => Error::InvalidHomeRegionException(inner),
                crate::error::StopLoggingErrorKind::InvalidTrailNameException(inner) => Error::InvalidTrailNameException(inner),
                crate::error::StopLoggingErrorKind::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
                crate::error::StopLoggingErrorKind::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
                crate::error::StopLoggingErrorKind::TrailNotFoundException(inner) => Error::TrailNotFoundException(inner),
                crate::error::StopLoggingErrorKind::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
                crate::error::StopLoggingErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateTrailError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateTrailError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateTrailErrorKind::CloudTrailAccessNotEnabledException(inner) => Error::CloudTrailAccessNotEnabledException(inner),
                crate::error::UpdateTrailErrorKind::CloudTrailInvalidClientTokenIdException(inner) => Error::CloudTrailInvalidClientTokenIdException(inner),
                crate::error::UpdateTrailErrorKind::CloudWatchLogsDeliveryUnavailableException(inner) => Error::CloudWatchLogsDeliveryUnavailableException(inner),
                crate::error::UpdateTrailErrorKind::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
                crate::error::UpdateTrailErrorKind::InsufficientEncryptionPolicyException(inner) => Error::InsufficientEncryptionPolicyException(inner),
                crate::error::UpdateTrailErrorKind::InsufficientS3BucketPolicyException(inner) => Error::InsufficientS3BucketPolicyException(inner),
                crate::error::UpdateTrailErrorKind::InsufficientSnsTopicPolicyException(inner) => Error::InsufficientSnsTopicPolicyException(inner),
                crate::error::UpdateTrailErrorKind::InvalidCloudWatchLogsLogGroupArnException(inner) => Error::InvalidCloudWatchLogsLogGroupArnException(inner),
                crate::error::UpdateTrailErrorKind::InvalidCloudWatchLogsRoleArnException(inner) => Error::InvalidCloudWatchLogsRoleArnException(inner),
                crate::error::UpdateTrailErrorKind::InvalidEventSelectorsException(inner) => Error::InvalidEventSelectorsException(inner),
                crate::error::UpdateTrailErrorKind::InvalidHomeRegionException(inner) => Error::InvalidHomeRegionException(inner),
                crate::error::UpdateTrailErrorKind::InvalidKmsKeyIdException(inner) => Error::InvalidKmsKeyIdException(inner),
                crate::error::UpdateTrailErrorKind::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
                crate::error::UpdateTrailErrorKind::InvalidS3BucketNameException(inner) => Error::InvalidS3BucketNameException(inner),
                crate::error::UpdateTrailErrorKind::InvalidS3PrefixException(inner) => Error::InvalidS3PrefixException(inner),
                crate::error::UpdateTrailErrorKind::InvalidSnsTopicNameException(inner) => Error::InvalidSnsTopicNameException(inner),
                crate::error::UpdateTrailErrorKind::InvalidTrailNameException(inner) => Error::InvalidTrailNameException(inner),
                crate::error::UpdateTrailErrorKind::KmsException(inner) => Error::KmsException(inner),
                crate::error::UpdateTrailErrorKind::KmsKeyDisabledException(inner) => Error::KmsKeyDisabledException(inner),
                crate::error::UpdateTrailErrorKind::KmsKeyNotFoundException(inner) => Error::KmsKeyNotFoundException(inner),
                crate::error::UpdateTrailErrorKind::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
                crate::error::UpdateTrailErrorKind::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
                crate::error::UpdateTrailErrorKind::OrganizationNotInAllFeaturesModeException(inner) => Error::OrganizationNotInAllFeaturesModeException(inner),
                crate::error::UpdateTrailErrorKind::OrganizationsNotInUseException(inner) => Error::OrganizationsNotInUseException(inner),
                crate::error::UpdateTrailErrorKind::S3BucketDoesNotExistException(inner) => Error::S3BucketDoesNotExistException(inner),
                crate::error::UpdateTrailErrorKind::TrailNotFoundException(inner) => Error::TrailNotFoundException(inner),
                crate::error::UpdateTrailErrorKind::TrailNotProvidedException(inner) => Error::TrailNotProvidedException(inner),
                crate::error::UpdateTrailErrorKind::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
                crate::error::UpdateTrailErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
