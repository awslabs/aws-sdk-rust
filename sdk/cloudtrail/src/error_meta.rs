// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p> This exception is thrown when you start a new import and a previous import is still in progress. </p>
    AccountHasOngoingImportException(crate::error::AccountHasOngoingImportException),
    /// <p>This exception is thrown when when the specified account is not found or not part of an organization.</p>
    AccountNotFoundException(crate::error::AccountNotFoundException),
    /// <p>This exception is thrown when the specified account is not registered as the CloudTrail delegated administrator.</p>
    AccountNotRegisteredException(crate::error::AccountNotRegisteredException),
    /// <p>This exception is thrown when the account is already registered as the CloudTrail delegated administrator.</p>
    AccountRegisteredException(crate::error::AccountRegisteredException),
    /// <p>This exception is thrown when the management account of an organization is registered as the CloudTrail delegated administrator.</p>
    CannotDelegateManagementAccountException(
        crate::error::CannotDelegateManagementAccountException,
    ),
    /// <p>This exception is thrown when the specified value of <code>ChannelARN</code> is not valid.</p>
    ChannelArnInvalidException(crate::error::ChannelArnInvalidException),
    /// <p> The specified channel was not found. </p>
    ChannelNotFoundException(crate::error::ChannelNotFoundException),
    /// <p>This exception is thrown when an operation is called with a trail ARN that is not valid. The following is the format of a trail ARN.</p>
    /// <p> <code>arn:aws:cloudtrail:us-east-2:123456789012:trail/MyTrail</code> </p>
    CloudTrailArnInvalidException(crate::error::CloudTrailArnInvalidException),
    /// <p>This exception is thrown when trusted access has not been enabled between CloudTrail and Organizations. For more information, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_integrate_services.html">Enabling Trusted Access with Other Amazon Web Services Services</a> and <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-an-organizational-trail-prepare.html">Prepare For Creating a Trail For Your Organization</a>. </p>
    CloudTrailAccessNotEnabledException(crate::error::CloudTrailAccessNotEnabledException),
    /// <p>This exception is thrown when a call results in the <code>InvalidClientTokenId</code> error code. This can occur when you are creating or updating a trail to send notifications to an Amazon SNS topic that is in a suspended Amazon Web Services account.</p>
    CloudTrailInvalidClientTokenIdException(crate::error::CloudTrailInvalidClientTokenIdException),
    /// <p>Cannot set a CloudWatch Logs delivery for this region.</p>
    CloudWatchLogsDeliveryUnavailableException(
        crate::error::CloudWatchLogsDeliveryUnavailableException,
    ),
    /// <p>This exception is thrown when the specified resource is not ready for an operation. This can occur when you try to run an operation on a resource before CloudTrail has time to fully load the resource. If this exception occurs, wait a few minutes, and then try the operation again.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>This exception is thrown when the maximum number of CloudTrail delegated administrators is reached.</p>
    DelegatedAdminAccountLimitExceededException(
        crate::error::DelegatedAdminAccountLimitExceededException,
    ),
    /// <p>The specified event data store ARN is not valid or does not map to an event data store in your account.</p>
    EventDataStoreArnInvalidException(crate::error::EventDataStoreArnInvalidException),
    /// <p>An event data store with that name already exists.</p>
    EventDataStoreAlreadyExistsException(crate::error::EventDataStoreAlreadyExistsException),
    /// <p> This exception is thrown when you try to update or delete an event data store that currently has an import in progress. </p>
    EventDataStoreHasOngoingImportException(crate::error::EventDataStoreHasOngoingImportException),
    /// <p>Your account has used the maximum number of event data stores.</p>
    EventDataStoreMaxLimitExceededException(crate::error::EventDataStoreMaxLimitExceededException),
    /// <p>The specified event data store was not found.</p>
    EventDataStoreNotFoundException(crate::error::EventDataStoreNotFoundException),
    /// <p>The event data store cannot be deleted because termination protection is enabled for it.</p>
    EventDataStoreTerminationProtectedException(
        crate::error::EventDataStoreTerminationProtectedException,
    ),
    /// <p> The specified import was not found. </p>
    ImportNotFoundException(crate::error::ImportNotFoundException),
    /// <p>The event data store is inactive.</p>
    InactiveEventDataStoreException(crate::error::InactiveEventDataStoreException),
    /// <p>The specified query cannot be canceled because it is in the <code>FINISHED</code>, <code>FAILED</code>, <code>TIMED_OUT</code>, or <code>CANCELLED</code> state.</p>
    InactiveQueryException(crate::error::InactiveQueryException),
    /// <p>If you run <code>GetInsightSelectors</code> on a trail that does not have Insights events enabled, the operation throws the exception <code>InsightNotEnabledException</code>.</p>
    InsightNotEnabledException(crate::error::InsightNotEnabledException),
    /// <p>This exception is thrown when the IAM user or role that is used to create the organization resource lacks one or more required permissions for creating an organization resource in a required service.</p>
    InsufficientDependencyServiceAccessPermissionException(
        crate::error::InsufficientDependencyServiceAccessPermissionException,
    ),
    /// <p>This exception is thrown when the policy on the S3 bucket or KMS key does not have sufficient permissions for the operation.</p>
    InsufficientEncryptionPolicyException(crate::error::InsufficientEncryptionPolicyException),
    /// <p>This exception is thrown when the policy on the S3 bucket is not sufficient.</p>
    InsufficientS3BucketPolicyException(crate::error::InsufficientS3BucketPolicyException),
    /// <p>This exception is thrown when the policy on the Amazon SNS topic is not sufficient.</p>
    InsufficientSnsTopicPolicyException(crate::error::InsufficientSnsTopicPolicyException),
    /// <p>This exception is thrown when the provided CloudWatch Logs log group is not valid.</p>
    InvalidCloudWatchLogsLogGroupArnException(
        crate::error::InvalidCloudWatchLogsLogGroupArnException,
    ),
    /// <p>This exception is thrown when the provided role is not valid.</p>
    InvalidCloudWatchLogsRoleArnException(crate::error::InvalidCloudWatchLogsRoleArnException),
    /// <p>A date range for the query was specified that is not valid. Be sure that the start time is chronologically before the end time. For more information about writing a query, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/query-create-edit-query.html">Create or edit a query</a> in the <i>CloudTrail User Guide</i>.</p>
    InvalidDateRangeException(crate::error::InvalidDateRangeException),
    /// <p>Occurs if an event category that is not valid is specified as a value of <code>EventCategory</code>.</p>
    InvalidEventCategoryException(crate::error::InvalidEventCategoryException),
    /// <p>This exception is thrown when event categories of specified event data stores are not valid.</p>
    InvalidEventDataStoreCategoryException(crate::error::InvalidEventDataStoreCategoryException),
    /// <p>The event data store is not in a status that supports the operation.</p>
    InvalidEventDataStoreStatusException(crate::error::InvalidEventDataStoreStatusException),
    /// <p>This exception is thrown when the <code>PutEventSelectors</code> operation is called with a number of event selectors, advanced event selectors, or data resources that is not valid. The combination of event selectors or advanced event selectors and data resources is not valid. A trail can have up to 5 event selectors. If a trail uses advanced event selectors, a maximum of 500 total values for all conditions in all advanced event selectors is allowed. A trail is limited to 250 data resources. These data resources can be distributed across event selectors, but the overall total cannot exceed 250.</p>
    /// <p>You can:</p>
    /// <ul>
    /// <li> <p>Specify a valid number of event selectors (1 to 5) for a trail.</p> </li>
    /// <li> <p>Specify a valid number of data resources (1 to 250) for an event selector. The limit of number of resources on an individual event selector is configurable up to 250. However, this upper limit is allowed only if the total number of data resources does not exceed 250 across all event selectors for a trail.</p> </li>
    /// <li> <p>Specify up to 500 values for all conditions in all advanced event selectors for a trail.</p> </li>
    /// <li> <p>Specify a valid value for a parameter. For example, specifying the <code>ReadWriteType</code> parameter with a value of <code>read-only</code> is not valid.</p> </li>
    /// </ul>
    InvalidEventSelectorsException(crate::error::InvalidEventSelectorsException),
    /// <p>This exception is thrown when an operation is called on a trail from a region other than the region in which the trail was created.</p>
    InvalidHomeRegionException(crate::error::InvalidHomeRegionException),
    /// <p> This exception is thrown when the provided source S3 bucket is not valid for import. </p>
    InvalidImportSourceException(crate::error::InvalidImportSourceException),
    /// <p>The formatting or syntax of the <code>InsightSelectors</code> JSON statement in your <code>PutInsightSelectors</code> or <code>GetInsightSelectors</code> request is not valid, or the specified insight type in the <code>InsightSelectors</code> statement is not a valid insight type.</p>
    InvalidInsightSelectorsException(crate::error::InvalidInsightSelectorsException),
    /// <p>This exception is thrown when the KMS key ARN is not valid.</p>
    InvalidKmsKeyIdException(crate::error::InvalidKmsKeyIdException),
    /// <p>Occurs when a lookup attribute is specified that is not valid.</p>
    InvalidLookupAttributesException(crate::error::InvalidLookupAttributesException),
    /// <p>This exception is thrown if the limit specified is not valid.</p>
    InvalidMaxResultsException(crate::error::InvalidMaxResultsException),
    /// <p>A token that is not valid, or a token that was previously used in a request with different parameters. This exception is thrown if the token is not valid.</p>
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    /// <p>This exception is thrown when the combination of parameters provided is not valid.</p>
    InvalidParameterCombinationException(crate::error::InvalidParameterCombinationException),
    /// <p>The request includes a parameter that is not valid.</p>
    InvalidParameterException(crate::error::InvalidParameterException),
    /// <p>The query that was submitted has validation errors, or uses incorrect syntax or unsupported keywords. For more information about writing a query, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/query-create-edit-query.html">Create or edit a query</a> in the <i>CloudTrail User Guide</i>.</p>
    InvalidQueryStatementException(crate::error::InvalidQueryStatementException),
    /// <p>The query status is not valid for the operation.</p>
    InvalidQueryStatusException(crate::error::InvalidQueryStatusException),
    /// <p>This exception is thrown when the provided S3 bucket name is not valid.</p>
    InvalidS3BucketNameException(crate::error::InvalidS3BucketNameException),
    /// <p>This exception is thrown when the provided S3 prefix is not valid.</p>
    InvalidS3PrefixException(crate::error::InvalidS3PrefixException),
    /// <p>This exception is thrown when the provided SNS topic name is not valid.</p>
    InvalidSnsTopicNameException(crate::error::InvalidSnsTopicNameException),
    /// <p>This exception is thrown when the specified tag key or values are not valid. It can also occur if there are duplicate tags or too many tags on the resource.</p>
    InvalidTagParameterException(crate::error::InvalidTagParameterException),
    /// <p>Occurs if the timestamp values are not valid. Either the start time occurs after the end time, or the time range is outside the range of possible values.</p>
    InvalidTimeRangeException(crate::error::InvalidTimeRangeException),
    /// <p>Reserved for future use.</p>
    InvalidTokenException(crate::error::InvalidTokenException),
    /// <p>This exception is thrown when the provided trail name is not valid. Trail names must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)</p> </li>
    /// <li> <p>Start with a letter or number, and end with a letter or number</p> </li>
    /// <li> <p>Be between 3 and 128 characters</p> </li>
    /// <li> <p>Have no adjacent periods, underscores or dashes. Names like <code>my-_namespace</code> and <code>my--namespace</code> are not valid.</p> </li>
    /// <li> <p>Not be in IP address format (for example, 192.168.5.4)</p> </li>
    /// </ul>
    InvalidTrailNameException(crate::error::InvalidTrailNameException),
    /// <p>This exception is thrown when there is an issue with the specified KMS key and the trail or event data store can't be updated.</p>
    KmsException(crate::error::KmsException),
    /// <p>This exception is no longer in use.</p>
    #[deprecated]
    KmsKeyDisabledException(crate::error::KmsKeyDisabledException),
    /// <p>This exception is thrown when the KMS key does not exist, when the S3 bucket and the KMS key are not in the same region, or when the KMS key associated with the Amazon SNS topic either does not exist or is not in the same region.</p>
    KmsKeyNotFoundException(crate::error::KmsKeyNotFoundException),
    /// <p>You are already running the maximum number of concurrent queries. Wait a minute for some queries to finish, and then run the query again.</p>
    MaxConcurrentQueriesException(crate::error::MaxConcurrentQueriesException),
    /// <p>This exception is thrown when the maximum number of trails is reached.</p>
    MaximumNumberOfTrailsExceededException(crate::error::MaximumNumberOfTrailsExceededException),
    /// <p> This exception is thrown when the management account does not have a service-linked role. </p>
    NoManagementAccountSlrExistsException(crate::error::NoManagementAccountSlrExistsException),
    /// <p> This exception is thrown when the account making the request is not the organization's management account. </p>
    NotOrganizationManagementAccountException(
        crate::error::NotOrganizationManagementAccountException,
    ),
    /// <p>This exception is thrown when the Amazon Web Services account making the request to create or update an organization trail or event data store is not the management account for an organization in Organizations. For more information, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/creating-an-organizational-trail-prepare.html">Prepare For Creating a Trail For Your Organization</a> or <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/query-event-data-store.html">Create an event data store</a>.</p>
    NotOrganizationMasterAccountException(crate::error::NotOrganizationMasterAccountException),
    /// <p>This exception is thrown when the requested operation is not permitted.</p>
    OperationNotPermittedException(crate::error::OperationNotPermittedException),
    /// <p>This exception is thrown when Organizations is not configured to support all features. All features must be enabled in Organizations to support creating an organization trail or event data store.</p>
    OrganizationNotInAllFeaturesModeException(
        crate::error::OrganizationNotInAllFeaturesModeException,
    ),
    /// <p>This exception is thrown when the request is made from an Amazon Web Services account that is not a member of an organization. To make this request, sign in using the credentials of an account that belongs to an organization.</p>
    OrganizationsNotInUseException(crate::error::OrganizationsNotInUseException),
    /// <p>The query ID does not exist or does not map to a query.</p>
    QueryIdNotFoundException(crate::error::QueryIdNotFoundException),
    /// <p>This exception is thrown when the specified resource is not found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>This exception is thrown when the specified resource type is not supported by CloudTrail.</p>
    ResourceTypeNotSupportedException(crate::error::ResourceTypeNotSupportedException),
    /// <p>This exception is thrown when the specified S3 bucket does not exist.</p>
    S3BucketDoesNotExistException(crate::error::S3BucketDoesNotExistException),
    /// <p>The number of tags per trail has exceeded the permitted amount. Currently, the limit is 50.</p>
    TagsLimitExceededException(crate::error::TagsLimitExceededException),
    /// <p>This exception is thrown when the specified trail already exists.</p>
    TrailAlreadyExistsException(crate::error::TrailAlreadyExistsException),
    /// <p>This exception is thrown when the trail with the given name is not found.</p>
    TrailNotFoundException(crate::error::TrailNotFoundException),
    /// <p>This exception is no longer in use.</p>
    TrailNotProvidedException(crate::error::TrailNotProvidedException),
    /// <p>This exception is thrown when the requested operation is not supported.</p>
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccountHasOngoingImportException(inner) => inner.fmt(f),
            Error::AccountNotFoundException(inner) => inner.fmt(f),
            Error::AccountNotRegisteredException(inner) => inner.fmt(f),
            Error::AccountRegisteredException(inner) => inner.fmt(f),
            Error::CannotDelegateManagementAccountException(inner) => inner.fmt(f),
            Error::ChannelArnInvalidException(inner) => inner.fmt(f),
            Error::ChannelNotFoundException(inner) => inner.fmt(f),
            Error::CloudTrailArnInvalidException(inner) => inner.fmt(f),
            Error::CloudTrailAccessNotEnabledException(inner) => inner.fmt(f),
            Error::CloudTrailInvalidClientTokenIdException(inner) => inner.fmt(f),
            Error::CloudWatchLogsDeliveryUnavailableException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DelegatedAdminAccountLimitExceededException(inner) => inner.fmt(f),
            Error::EventDataStoreArnInvalidException(inner) => inner.fmt(f),
            Error::EventDataStoreAlreadyExistsException(inner) => inner.fmt(f),
            Error::EventDataStoreHasOngoingImportException(inner) => inner.fmt(f),
            Error::EventDataStoreMaxLimitExceededException(inner) => inner.fmt(f),
            Error::EventDataStoreNotFoundException(inner) => inner.fmt(f),
            Error::EventDataStoreTerminationProtectedException(inner) => inner.fmt(f),
            Error::ImportNotFoundException(inner) => inner.fmt(f),
            Error::InactiveEventDataStoreException(inner) => inner.fmt(f),
            Error::InactiveQueryException(inner) => inner.fmt(f),
            Error::InsightNotEnabledException(inner) => inner.fmt(f),
            Error::InsufficientDependencyServiceAccessPermissionException(inner) => inner.fmt(f),
            Error::InsufficientEncryptionPolicyException(inner) => inner.fmt(f),
            Error::InsufficientS3BucketPolicyException(inner) => inner.fmt(f),
            Error::InsufficientSnsTopicPolicyException(inner) => inner.fmt(f),
            Error::InvalidCloudWatchLogsLogGroupArnException(inner) => inner.fmt(f),
            Error::InvalidCloudWatchLogsRoleArnException(inner) => inner.fmt(f),
            Error::InvalidDateRangeException(inner) => inner.fmt(f),
            Error::InvalidEventCategoryException(inner) => inner.fmt(f),
            Error::InvalidEventDataStoreCategoryException(inner) => inner.fmt(f),
            Error::InvalidEventDataStoreStatusException(inner) => inner.fmt(f),
            Error::InvalidEventSelectorsException(inner) => inner.fmt(f),
            Error::InvalidHomeRegionException(inner) => inner.fmt(f),
            Error::InvalidImportSourceException(inner) => inner.fmt(f),
            Error::InvalidInsightSelectorsException(inner) => inner.fmt(f),
            Error::InvalidKmsKeyIdException(inner) => inner.fmt(f),
            Error::InvalidLookupAttributesException(inner) => inner.fmt(f),
            Error::InvalidMaxResultsException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::InvalidParameterCombinationException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::InvalidQueryStatementException(inner) => inner.fmt(f),
            Error::InvalidQueryStatusException(inner) => inner.fmt(f),
            Error::InvalidS3BucketNameException(inner) => inner.fmt(f),
            Error::InvalidS3PrefixException(inner) => inner.fmt(f),
            Error::InvalidSnsTopicNameException(inner) => inner.fmt(f),
            Error::InvalidTagParameterException(inner) => inner.fmt(f),
            Error::InvalidTimeRangeException(inner) => inner.fmt(f),
            Error::InvalidTokenException(inner) => inner.fmt(f),
            Error::InvalidTrailNameException(inner) => inner.fmt(f),
            Error::KmsException(inner) => inner.fmt(f),
            Error::KmsKeyDisabledException(inner) => inner.fmt(f),
            Error::KmsKeyNotFoundException(inner) => inner.fmt(f),
            Error::MaxConcurrentQueriesException(inner) => inner.fmt(f),
            Error::MaximumNumberOfTrailsExceededException(inner) => inner.fmt(f),
            Error::NoManagementAccountSlrExistsException(inner) => inner.fmt(f),
            Error::NotOrganizationManagementAccountException(inner) => inner.fmt(f),
            Error::NotOrganizationMasterAccountException(inner) => inner.fmt(f),
            Error::OperationNotPermittedException(inner) => inner.fmt(f),
            Error::OrganizationNotInAllFeaturesModeException(inner) => inner.fmt(f),
            Error::OrganizationsNotInUseException(inner) => inner.fmt(f),
            Error::QueryIdNotFoundException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ResourceTypeNotSupportedException(inner) => inner.fmt(f),
            Error::S3BucketDoesNotExistException(inner) => inner.fmt(f),
            Error::TagsLimitExceededException(inner) => inner.fmt(f),
            Error::TrailAlreadyExistsException(inner) => inner.fmt(f),
            Error::TrailNotFoundException(inner) => inner.fmt(f),
            Error::TrailNotProvidedException(inner) => inner.fmt(f),
            Error::UnsupportedOperationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AddTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddTagsError> for Error {
    fn from(err: crate::error::AddTagsError) -> Self {
        match err {
            crate::error::AddTagsError::CloudTrailArnInvalidException(inner) => {
                Error::CloudTrailArnInvalidException(inner)
            }
            crate::error::AddTagsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::AddTagsError::EventDataStoreNotFoundException(inner) => {
                Error::EventDataStoreNotFoundException(inner)
            }
            crate::error::AddTagsError::InactiveEventDataStoreException(inner) => {
                Error::InactiveEventDataStoreException(inner)
            }
            crate::error::AddTagsError::InvalidTagParameterException(inner) => {
                Error::InvalidTagParameterException(inner)
            }
            crate::error::AddTagsError::InvalidTrailNameException(inner) => {
                Error::InvalidTrailNameException(inner)
            }
            crate::error::AddTagsError::NoManagementAccountSlrExistsException(inner) => {
                Error::NoManagementAccountSlrExistsException(inner)
            }
            crate::error::AddTagsError::NotOrganizationMasterAccountException(inner) => {
                Error::NotOrganizationMasterAccountException(inner)
            }
            crate::error::AddTagsError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::AddTagsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AddTagsError::ResourceTypeNotSupportedException(inner) => {
                Error::ResourceTypeNotSupportedException(inner)
            }
            crate::error::AddTagsError::TagsLimitExceededException(inner) => {
                Error::TagsLimitExceededException(inner)
            }
            crate::error::AddTagsError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::AddTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CancelQueryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelQueryError> for Error {
    fn from(err: crate::error::CancelQueryError) -> Self {
        match err {
            crate::error::CancelQueryError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CancelQueryError::EventDataStoreArnInvalidException(inner) => {
                Error::EventDataStoreArnInvalidException(inner)
            }
            crate::error::CancelQueryError::EventDataStoreNotFoundException(inner) => {
                Error::EventDataStoreNotFoundException(inner)
            }
            crate::error::CancelQueryError::InactiveEventDataStoreException(inner) => {
                Error::InactiveEventDataStoreException(inner)
            }
            crate::error::CancelQueryError::InactiveQueryException(inner) => {
                Error::InactiveQueryException(inner)
            }
            crate::error::CancelQueryError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CancelQueryError::NoManagementAccountSlrExistsException(inner) => {
                Error::NoManagementAccountSlrExistsException(inner)
            }
            crate::error::CancelQueryError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::CancelQueryError::QueryIdNotFoundException(inner) => {
                Error::QueryIdNotFoundException(inner)
            }
            crate::error::CancelQueryError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::CancelQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateEventDataStoreError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateEventDataStoreError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateEventDataStoreError> for Error {
    fn from(err: crate::error::CreateEventDataStoreError) -> Self {
        match err {
            crate::error::CreateEventDataStoreError::CloudTrailAccessNotEnabledException(inner) => Error::CloudTrailAccessNotEnabledException(inner),
            crate::error::CreateEventDataStoreError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateEventDataStoreError::EventDataStoreAlreadyExistsException(inner) => Error::EventDataStoreAlreadyExistsException(inner),
            crate::error::CreateEventDataStoreError::EventDataStoreMaxLimitExceededException(inner) => Error::EventDataStoreMaxLimitExceededException(inner),
            crate::error::CreateEventDataStoreError::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
            crate::error::CreateEventDataStoreError::InsufficientEncryptionPolicyException(inner) => Error::InsufficientEncryptionPolicyException(inner),
            crate::error::CreateEventDataStoreError::InvalidEventSelectorsException(inner) => Error::InvalidEventSelectorsException(inner),
            crate::error::CreateEventDataStoreError::InvalidKmsKeyIdException(inner) => Error::InvalidKmsKeyIdException(inner),
            crate::error::CreateEventDataStoreError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::CreateEventDataStoreError::InvalidTagParameterException(inner) => Error::InvalidTagParameterException(inner),
            crate::error::CreateEventDataStoreError::KmsException(inner) => Error::KmsException(inner),
            crate::error::CreateEventDataStoreError::KmsKeyNotFoundException(inner) => Error::KmsKeyNotFoundException(inner),
            crate::error::CreateEventDataStoreError::NoManagementAccountSlrExistsException(inner) => Error::NoManagementAccountSlrExistsException(inner),
            crate::error::CreateEventDataStoreError::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
            crate::error::CreateEventDataStoreError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::CreateEventDataStoreError::OrganizationNotInAllFeaturesModeException(inner) => Error::OrganizationNotInAllFeaturesModeException(inner),
            crate::error::CreateEventDataStoreError::OrganizationsNotInUseException(inner) => Error::OrganizationsNotInUseException(inner),
            crate::error::CreateEventDataStoreError::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
            crate::error::CreateEventDataStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTrailError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateTrailError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTrailError> for Error {
    fn from(err: crate::error::CreateTrailError) -> Self {
        match err {
            crate::error::CreateTrailError::CloudTrailAccessNotEnabledException(inner) => Error::CloudTrailAccessNotEnabledException(inner),
            crate::error::CreateTrailError::CloudTrailInvalidClientTokenIdException(inner) => Error::CloudTrailInvalidClientTokenIdException(inner),
            crate::error::CreateTrailError::CloudWatchLogsDeliveryUnavailableException(inner) => Error::CloudWatchLogsDeliveryUnavailableException(inner),
            crate::error::CreateTrailError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::CreateTrailError::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
            crate::error::CreateTrailError::InsufficientEncryptionPolicyException(inner) => Error::InsufficientEncryptionPolicyException(inner),
            crate::error::CreateTrailError::InsufficientS3BucketPolicyException(inner) => Error::InsufficientS3BucketPolicyException(inner),
            crate::error::CreateTrailError::InsufficientSnsTopicPolicyException(inner) => Error::InsufficientSnsTopicPolicyException(inner),
            crate::error::CreateTrailError::InvalidCloudWatchLogsLogGroupArnException(inner) => Error::InvalidCloudWatchLogsLogGroupArnException(inner),
            crate::error::CreateTrailError::InvalidCloudWatchLogsRoleArnException(inner) => Error::InvalidCloudWatchLogsRoleArnException(inner),
            crate::error::CreateTrailError::InvalidKmsKeyIdException(inner) => Error::InvalidKmsKeyIdException(inner),
            crate::error::CreateTrailError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::CreateTrailError::InvalidS3BucketNameException(inner) => Error::InvalidS3BucketNameException(inner),
            crate::error::CreateTrailError::InvalidS3PrefixException(inner) => Error::InvalidS3PrefixException(inner),
            crate::error::CreateTrailError::InvalidSnsTopicNameException(inner) => Error::InvalidSnsTopicNameException(inner),
            crate::error::CreateTrailError::InvalidTagParameterException(inner) => Error::InvalidTagParameterException(inner),
            crate::error::CreateTrailError::InvalidTrailNameException(inner) => Error::InvalidTrailNameException(inner),
            crate::error::CreateTrailError::KmsException(inner) => Error::KmsException(inner),
            crate::error::CreateTrailError::KmsKeyDisabledException(inner) => Error::KmsKeyDisabledException(inner),
            crate::error::CreateTrailError::KmsKeyNotFoundException(inner) => Error::KmsKeyNotFoundException(inner),
            crate::error::CreateTrailError::MaximumNumberOfTrailsExceededException(inner) => Error::MaximumNumberOfTrailsExceededException(inner),
            crate::error::CreateTrailError::NoManagementAccountSlrExistsException(inner) => Error::NoManagementAccountSlrExistsException(inner),
            crate::error::CreateTrailError::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
            crate::error::CreateTrailError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::CreateTrailError::OrganizationNotInAllFeaturesModeException(inner) => Error::OrganizationNotInAllFeaturesModeException(inner),
            crate::error::CreateTrailError::OrganizationsNotInUseException(inner) => Error::OrganizationsNotInUseException(inner),
            crate::error::CreateTrailError::S3BucketDoesNotExistException(inner) => Error::S3BucketDoesNotExistException(inner),
            crate::error::CreateTrailError::TagsLimitExceededException(inner) => Error::TagsLimitExceededException(inner),
            crate::error::CreateTrailError::TrailAlreadyExistsException(inner) => Error::TrailAlreadyExistsException(inner),
            crate::error::CreateTrailError::TrailNotProvidedException(inner) => Error::TrailNotProvidedException(inner),
            crate::error::CreateTrailError::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
            crate::error::CreateTrailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEventDataStoreError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEventDataStoreError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEventDataStoreError> for Error {
    fn from(err: crate::error::DeleteEventDataStoreError) -> Self {
        match err {
            crate::error::DeleteEventDataStoreError::EventDataStoreArnInvalidException(inner) => Error::EventDataStoreArnInvalidException(inner),
            crate::error::DeleteEventDataStoreError::EventDataStoreHasOngoingImportException(inner) => Error::EventDataStoreHasOngoingImportException(inner),
            crate::error::DeleteEventDataStoreError::EventDataStoreNotFoundException(inner) => Error::EventDataStoreNotFoundException(inner),
            crate::error::DeleteEventDataStoreError::EventDataStoreTerminationProtectedException(inner) => Error::EventDataStoreTerminationProtectedException(inner),
            crate::error::DeleteEventDataStoreError::InactiveEventDataStoreException(inner) => Error::InactiveEventDataStoreException(inner),
            crate::error::DeleteEventDataStoreError::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
            crate::error::DeleteEventDataStoreError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::DeleteEventDataStoreError::NoManagementAccountSlrExistsException(inner) => Error::NoManagementAccountSlrExistsException(inner),
            crate::error::DeleteEventDataStoreError::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
            crate::error::DeleteEventDataStoreError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::DeleteEventDataStoreError::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
            crate::error::DeleteEventDataStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTrailError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteTrailError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTrailError> for Error {
    fn from(err: crate::error::DeleteTrailError) -> Self {
        match err {
            crate::error::DeleteTrailError::CloudTrailArnInvalidException(inner) => Error::CloudTrailArnInvalidException(inner),
            crate::error::DeleteTrailError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteTrailError::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
            crate::error::DeleteTrailError::InvalidHomeRegionException(inner) => Error::InvalidHomeRegionException(inner),
            crate::error::DeleteTrailError::InvalidTrailNameException(inner) => Error::InvalidTrailNameException(inner),
            crate::error::DeleteTrailError::NoManagementAccountSlrExistsException(inner) => Error::NoManagementAccountSlrExistsException(inner),
            crate::error::DeleteTrailError::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
            crate::error::DeleteTrailError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::DeleteTrailError::TrailNotFoundException(inner) => Error::TrailNotFoundException(inner),
            crate::error::DeleteTrailError::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
            crate::error::DeleteTrailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeregisterOrganizationDelegatedAdminError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeregisterOrganizationDelegatedAdminError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterOrganizationDelegatedAdminError> for Error {
    fn from(err: crate::error::DeregisterOrganizationDelegatedAdminError) -> Self {
        match err {
            crate::error::DeregisterOrganizationDelegatedAdminError::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::DeregisterOrganizationDelegatedAdminError::AccountNotRegisteredException(inner) => Error::AccountNotRegisteredException(inner),
            crate::error::DeregisterOrganizationDelegatedAdminError::CloudTrailAccessNotEnabledException(inner) => Error::CloudTrailAccessNotEnabledException(inner),
            crate::error::DeregisterOrganizationDelegatedAdminError::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
            crate::error::DeregisterOrganizationDelegatedAdminError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::DeregisterOrganizationDelegatedAdminError::NotOrganizationManagementAccountException(inner) => Error::NotOrganizationManagementAccountException(inner),
            crate::error::DeregisterOrganizationDelegatedAdminError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::DeregisterOrganizationDelegatedAdminError::OrganizationNotInAllFeaturesModeException(inner) => Error::OrganizationNotInAllFeaturesModeException(inner),
            crate::error::DeregisterOrganizationDelegatedAdminError::OrganizationsNotInUseException(inner) => Error::OrganizationsNotInUseException(inner),
            crate::error::DeregisterOrganizationDelegatedAdminError::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
            crate::error::DeregisterOrganizationDelegatedAdminError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeQueryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeQueryError> for Error {
    fn from(err: crate::error::DescribeQueryError) -> Self {
        match err {
            crate::error::DescribeQueryError::EventDataStoreArnInvalidException(inner) => {
                Error::EventDataStoreArnInvalidException(inner)
            }
            crate::error::DescribeQueryError::EventDataStoreNotFoundException(inner) => {
                Error::EventDataStoreNotFoundException(inner)
            }
            crate::error::DescribeQueryError::InactiveEventDataStoreException(inner) => {
                Error::InactiveEventDataStoreException(inner)
            }
            crate::error::DescribeQueryError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeQueryError::NoManagementAccountSlrExistsException(inner) => {
                Error::NoManagementAccountSlrExistsException(inner)
            }
            crate::error::DescribeQueryError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::DescribeQueryError::QueryIdNotFoundException(inner) => {
                Error::QueryIdNotFoundException(inner)
            }
            crate::error::DescribeQueryError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::DescribeQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTrailsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeTrailsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTrailsError> for Error {
    fn from(err: crate::error::DescribeTrailsError) -> Self {
        match err {
            crate::error::DescribeTrailsError::InvalidTrailNameException(inner) => {
                Error::InvalidTrailNameException(inner)
            }
            crate::error::DescribeTrailsError::NoManagementAccountSlrExistsException(inner) => {
                Error::NoManagementAccountSlrExistsException(inner)
            }
            crate::error::DescribeTrailsError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::DescribeTrailsError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::DescribeTrailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetChannelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetChannelError> for Error {
    fn from(err: crate::error::GetChannelError) -> Self {
        match err {
            crate::error::GetChannelError::ChannelArnInvalidException(inner) => {
                Error::ChannelArnInvalidException(inner)
            }
            crate::error::GetChannelError::ChannelNotFoundException(inner) => {
                Error::ChannelNotFoundException(inner)
            }
            crate::error::GetChannelError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::GetChannelError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::GetChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEventDataStoreError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetEventDataStoreError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEventDataStoreError> for Error {
    fn from(err: crate::error::GetEventDataStoreError) -> Self {
        match err {
            crate::error::GetEventDataStoreError::EventDataStoreArnInvalidException(inner) => {
                Error::EventDataStoreArnInvalidException(inner)
            }
            crate::error::GetEventDataStoreError::EventDataStoreNotFoundException(inner) => {
                Error::EventDataStoreNotFoundException(inner)
            }
            crate::error::GetEventDataStoreError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetEventDataStoreError::NoManagementAccountSlrExistsException(inner) => {
                Error::NoManagementAccountSlrExistsException(inner)
            }
            crate::error::GetEventDataStoreError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::GetEventDataStoreError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::GetEventDataStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetEventSelectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetEventSelectorsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetEventSelectorsError> for Error {
    fn from(err: crate::error::GetEventSelectorsError) -> Self {
        match err {
            crate::error::GetEventSelectorsError::CloudTrailArnInvalidException(inner) => {
                Error::CloudTrailArnInvalidException(inner)
            }
            crate::error::GetEventSelectorsError::InvalidTrailNameException(inner) => {
                Error::InvalidTrailNameException(inner)
            }
            crate::error::GetEventSelectorsError::NoManagementAccountSlrExistsException(inner) => {
                Error::NoManagementAccountSlrExistsException(inner)
            }
            crate::error::GetEventSelectorsError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::GetEventSelectorsError::TrailNotFoundException(inner) => {
                Error::TrailNotFoundException(inner)
            }
            crate::error::GetEventSelectorsError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::GetEventSelectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetImportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetImportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetImportError> for Error {
    fn from(err: crate::error::GetImportError) -> Self {
        match err {
            crate::error::GetImportError::ImportNotFoundException(inner) => {
                Error::ImportNotFoundException(inner)
            }
            crate::error::GetImportError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetImportError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::GetImportError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::GetImportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetInsightSelectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetInsightSelectorsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetInsightSelectorsError> for Error {
    fn from(err: crate::error::GetInsightSelectorsError) -> Self {
        match err {
            crate::error::GetInsightSelectorsError::CloudTrailArnInvalidException(inner) => {
                Error::CloudTrailArnInvalidException(inner)
            }
            crate::error::GetInsightSelectorsError::InsightNotEnabledException(inner) => {
                Error::InsightNotEnabledException(inner)
            }
            crate::error::GetInsightSelectorsError::InvalidTrailNameException(inner) => {
                Error::InvalidTrailNameException(inner)
            }
            crate::error::GetInsightSelectorsError::NoManagementAccountSlrExistsException(
                inner,
            ) => Error::NoManagementAccountSlrExistsException(inner),
            crate::error::GetInsightSelectorsError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::GetInsightSelectorsError::TrailNotFoundException(inner) => {
                Error::TrailNotFoundException(inner)
            }
            crate::error::GetInsightSelectorsError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::GetInsightSelectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetQueryResultsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetQueryResultsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetQueryResultsError> for Error {
    fn from(err: crate::error::GetQueryResultsError) -> Self {
        match err {
            crate::error::GetQueryResultsError::EventDataStoreArnInvalidException(inner) => {
                Error::EventDataStoreArnInvalidException(inner)
            }
            crate::error::GetQueryResultsError::EventDataStoreNotFoundException(inner) => {
                Error::EventDataStoreNotFoundException(inner)
            }
            crate::error::GetQueryResultsError::InactiveEventDataStoreException(inner) => {
                Error::InactiveEventDataStoreException(inner)
            }
            crate::error::GetQueryResultsError::InsufficientEncryptionPolicyException(inner) => {
                Error::InsufficientEncryptionPolicyException(inner)
            }
            crate::error::GetQueryResultsError::InvalidMaxResultsException(inner) => {
                Error::InvalidMaxResultsException(inner)
            }
            crate::error::GetQueryResultsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::GetQueryResultsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetQueryResultsError::NoManagementAccountSlrExistsException(inner) => {
                Error::NoManagementAccountSlrExistsException(inner)
            }
            crate::error::GetQueryResultsError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::GetQueryResultsError::QueryIdNotFoundException(inner) => {
                Error::QueryIdNotFoundException(inner)
            }
            crate::error::GetQueryResultsError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::GetQueryResultsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTrailError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetTrailError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTrailError> for Error {
    fn from(err: crate::error::GetTrailError) -> Self {
        match err {
            crate::error::GetTrailError::CloudTrailArnInvalidException(inner) => {
                Error::CloudTrailArnInvalidException(inner)
            }
            crate::error::GetTrailError::InvalidTrailNameException(inner) => {
                Error::InvalidTrailNameException(inner)
            }
            crate::error::GetTrailError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::GetTrailError::TrailNotFoundException(inner) => {
                Error::TrailNotFoundException(inner)
            }
            crate::error::GetTrailError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::GetTrailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTrailStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetTrailStatusError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTrailStatusError> for Error {
    fn from(err: crate::error::GetTrailStatusError) -> Self {
        match err {
            crate::error::GetTrailStatusError::CloudTrailArnInvalidException(inner) => {
                Error::CloudTrailArnInvalidException(inner)
            }
            crate::error::GetTrailStatusError::InvalidTrailNameException(inner) => {
                Error::InvalidTrailNameException(inner)
            }
            crate::error::GetTrailStatusError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::GetTrailStatusError::TrailNotFoundException(inner) => {
                Error::TrailNotFoundException(inner)
            }
            crate::error::GetTrailStatusError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::GetTrailStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListChannelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListChannelsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelsError> for Error {
    fn from(err: crate::error::ListChannelsError) -> Self {
        match err {
            crate::error::ListChannelsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListChannelsError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::ListChannelsError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::ListChannelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListEventDataStoresError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListEventDataStoresError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListEventDataStoresError> for Error {
    fn from(err: crate::error::ListEventDataStoresError) -> Self {
        match err {
            crate::error::ListEventDataStoresError::InvalidMaxResultsException(inner) => {
                Error::InvalidMaxResultsException(inner)
            }
            crate::error::ListEventDataStoresError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListEventDataStoresError::NoManagementAccountSlrExistsException(
                inner,
            ) => Error::NoManagementAccountSlrExistsException(inner),
            crate::error::ListEventDataStoresError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::ListEventDataStoresError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::ListEventDataStoresError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListImportFailuresError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListImportFailuresError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListImportFailuresError> for Error {
    fn from(err: crate::error::ListImportFailuresError) -> Self {
        match err {
            crate::error::ListImportFailuresError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListImportFailuresError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::ListImportFailuresError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::ListImportFailuresError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListImportsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListImportsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListImportsError> for Error {
    fn from(err: crate::error::ListImportsError) -> Self {
        match err {
            crate::error::ListImportsError::EventDataStoreArnInvalidException(inner) => {
                Error::EventDataStoreArnInvalidException(inner)
            }
            crate::error::ListImportsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListImportsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListImportsError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::ListImportsError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::ListImportsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPublicKeysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPublicKeysError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPublicKeysError> for Error {
    fn from(err: crate::error::ListPublicKeysError) -> Self {
        match err {
            crate::error::ListPublicKeysError::InvalidTimeRangeException(inner) => {
                Error::InvalidTimeRangeException(inner)
            }
            crate::error::ListPublicKeysError::InvalidTokenException(inner) => {
                Error::InvalidTokenException(inner)
            }
            crate::error::ListPublicKeysError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::ListPublicKeysError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::ListPublicKeysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListQueriesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListQueriesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListQueriesError> for Error {
    fn from(err: crate::error::ListQueriesError) -> Self {
        match err {
            crate::error::ListQueriesError::EventDataStoreArnInvalidException(inner) => {
                Error::EventDataStoreArnInvalidException(inner)
            }
            crate::error::ListQueriesError::EventDataStoreNotFoundException(inner) => {
                Error::EventDataStoreNotFoundException(inner)
            }
            crate::error::ListQueriesError::InactiveEventDataStoreException(inner) => {
                Error::InactiveEventDataStoreException(inner)
            }
            crate::error::ListQueriesError::InvalidDateRangeException(inner) => {
                Error::InvalidDateRangeException(inner)
            }
            crate::error::ListQueriesError::InvalidMaxResultsException(inner) => {
                Error::InvalidMaxResultsException(inner)
            }
            crate::error::ListQueriesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::ListQueriesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListQueriesError::InvalidQueryStatusException(inner) => {
                Error::InvalidQueryStatusException(inner)
            }
            crate::error::ListQueriesError::NoManagementAccountSlrExistsException(inner) => {
                Error::NoManagementAccountSlrExistsException(inner)
            }
            crate::error::ListQueriesError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::ListQueriesError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::ListQueriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsError> for Error {
    fn from(err: crate::error::ListTagsError) -> Self {
        match err {
            crate::error::ListTagsError::CloudTrailArnInvalidException(inner) => {
                Error::CloudTrailArnInvalidException(inner)
            }
            crate::error::ListTagsError::EventDataStoreNotFoundException(inner) => {
                Error::EventDataStoreNotFoundException(inner)
            }
            crate::error::ListTagsError::InactiveEventDataStoreException(inner) => {
                Error::InactiveEventDataStoreException(inner)
            }
            crate::error::ListTagsError::InvalidTokenException(inner) => {
                Error::InvalidTokenException(inner)
            }
            crate::error::ListTagsError::InvalidTrailNameException(inner) => {
                Error::InvalidTrailNameException(inner)
            }
            crate::error::ListTagsError::NoManagementAccountSlrExistsException(inner) => {
                Error::NoManagementAccountSlrExistsException(inner)
            }
            crate::error::ListTagsError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::ListTagsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsError::ResourceTypeNotSupportedException(inner) => {
                Error::ResourceTypeNotSupportedException(inner)
            }
            crate::error::ListTagsError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::ListTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTrailsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTrailsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTrailsError> for Error {
    fn from(err: crate::error::ListTrailsError) -> Self {
        match err {
            crate::error::ListTrailsError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::ListTrailsError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::ListTrailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::LookupEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::LookupEventsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::LookupEventsError> for Error {
    fn from(err: crate::error::LookupEventsError) -> Self {
        match err {
            crate::error::LookupEventsError::InvalidEventCategoryException(inner) => {
                Error::InvalidEventCategoryException(inner)
            }
            crate::error::LookupEventsError::InvalidLookupAttributesException(inner) => {
                Error::InvalidLookupAttributesException(inner)
            }
            crate::error::LookupEventsError::InvalidMaxResultsException(inner) => {
                Error::InvalidMaxResultsException(inner)
            }
            crate::error::LookupEventsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::LookupEventsError::InvalidTimeRangeException(inner) => {
                Error::InvalidTimeRangeException(inner)
            }
            crate::error::LookupEventsError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::LookupEventsError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::LookupEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutEventSelectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutEventSelectorsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutEventSelectorsError> for Error {
    fn from(err: crate::error::PutEventSelectorsError) -> Self {
        match err {
            crate::error::PutEventSelectorsError::CloudTrailArnInvalidException(inner) => Error::CloudTrailArnInvalidException(inner),
            crate::error::PutEventSelectorsError::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
            crate::error::PutEventSelectorsError::InvalidEventSelectorsException(inner) => Error::InvalidEventSelectorsException(inner),
            crate::error::PutEventSelectorsError::InvalidHomeRegionException(inner) => Error::InvalidHomeRegionException(inner),
            crate::error::PutEventSelectorsError::InvalidTrailNameException(inner) => Error::InvalidTrailNameException(inner),
            crate::error::PutEventSelectorsError::NoManagementAccountSlrExistsException(inner) => Error::NoManagementAccountSlrExistsException(inner),
            crate::error::PutEventSelectorsError::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
            crate::error::PutEventSelectorsError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::PutEventSelectorsError::TrailNotFoundException(inner) => Error::TrailNotFoundException(inner),
            crate::error::PutEventSelectorsError::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
            crate::error::PutEventSelectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutInsightSelectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutInsightSelectorsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutInsightSelectorsError> for Error {
    fn from(err: crate::error::PutInsightSelectorsError) -> Self {
        match err {
            crate::error::PutInsightSelectorsError::CloudTrailArnInvalidException(inner) => {
                Error::CloudTrailArnInvalidException(inner)
            }
            crate::error::PutInsightSelectorsError::InsufficientEncryptionPolicyException(
                inner,
            ) => Error::InsufficientEncryptionPolicyException(inner),
            crate::error::PutInsightSelectorsError::InsufficientS3BucketPolicyException(inner) => {
                Error::InsufficientS3BucketPolicyException(inner)
            }
            crate::error::PutInsightSelectorsError::InvalidHomeRegionException(inner) => {
                Error::InvalidHomeRegionException(inner)
            }
            crate::error::PutInsightSelectorsError::InvalidInsightSelectorsException(inner) => {
                Error::InvalidInsightSelectorsException(inner)
            }
            crate::error::PutInsightSelectorsError::InvalidTrailNameException(inner) => {
                Error::InvalidTrailNameException(inner)
            }
            crate::error::PutInsightSelectorsError::KmsException(inner) => {
                Error::KmsException(inner)
            }
            crate::error::PutInsightSelectorsError::NoManagementAccountSlrExistsException(
                inner,
            ) => Error::NoManagementAccountSlrExistsException(inner),
            crate::error::PutInsightSelectorsError::NotOrganizationMasterAccountException(
                inner,
            ) => Error::NotOrganizationMasterAccountException(inner),
            crate::error::PutInsightSelectorsError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::PutInsightSelectorsError::S3BucketDoesNotExistException(inner) => {
                Error::S3BucketDoesNotExistException(inner)
            }
            crate::error::PutInsightSelectorsError::TrailNotFoundException(inner) => {
                Error::TrailNotFoundException(inner)
            }
            crate::error::PutInsightSelectorsError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::PutInsightSelectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::RegisterOrganizationDelegatedAdminError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RegisterOrganizationDelegatedAdminError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterOrganizationDelegatedAdminError> for Error {
    fn from(err: crate::error::RegisterOrganizationDelegatedAdminError) -> Self {
        match err {
            crate::error::RegisterOrganizationDelegatedAdminError::AccountNotFoundException(inner) => Error::AccountNotFoundException(inner),
            crate::error::RegisterOrganizationDelegatedAdminError::AccountRegisteredException(inner) => Error::AccountRegisteredException(inner),
            crate::error::RegisterOrganizationDelegatedAdminError::CannotDelegateManagementAccountException(inner) => Error::CannotDelegateManagementAccountException(inner),
            crate::error::RegisterOrganizationDelegatedAdminError::CloudTrailAccessNotEnabledException(inner) => Error::CloudTrailAccessNotEnabledException(inner),
            crate::error::RegisterOrganizationDelegatedAdminError::DelegatedAdminAccountLimitExceededException(inner) => Error::DelegatedAdminAccountLimitExceededException(inner),
            crate::error::RegisterOrganizationDelegatedAdminError::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
            crate::error::RegisterOrganizationDelegatedAdminError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::RegisterOrganizationDelegatedAdminError::NotOrganizationManagementAccountException(inner) => Error::NotOrganizationManagementAccountException(inner),
            crate::error::RegisterOrganizationDelegatedAdminError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::RegisterOrganizationDelegatedAdminError::OrganizationNotInAllFeaturesModeException(inner) => Error::OrganizationNotInAllFeaturesModeException(inner),
            crate::error::RegisterOrganizationDelegatedAdminError::OrganizationsNotInUseException(inner) => Error::OrganizationsNotInUseException(inner),
            crate::error::RegisterOrganizationDelegatedAdminError::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
            crate::error::RegisterOrganizationDelegatedAdminError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RemoveTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveTagsError> for Error {
    fn from(err: crate::error::RemoveTagsError) -> Self {
        match err {
            crate::error::RemoveTagsError::CloudTrailArnInvalidException(inner) => {
                Error::CloudTrailArnInvalidException(inner)
            }
            crate::error::RemoveTagsError::EventDataStoreNotFoundException(inner) => {
                Error::EventDataStoreNotFoundException(inner)
            }
            crate::error::RemoveTagsError::InactiveEventDataStoreException(inner) => {
                Error::InactiveEventDataStoreException(inner)
            }
            crate::error::RemoveTagsError::InvalidTagParameterException(inner) => {
                Error::InvalidTagParameterException(inner)
            }
            crate::error::RemoveTagsError::InvalidTrailNameException(inner) => {
                Error::InvalidTrailNameException(inner)
            }
            crate::error::RemoveTagsError::NoManagementAccountSlrExistsException(inner) => {
                Error::NoManagementAccountSlrExistsException(inner)
            }
            crate::error::RemoveTagsError::NotOrganizationMasterAccountException(inner) => {
                Error::NotOrganizationMasterAccountException(inner)
            }
            crate::error::RemoveTagsError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::RemoveTagsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RemoveTagsError::ResourceTypeNotSupportedException(inner) => {
                Error::ResourceTypeNotSupportedException(inner)
            }
            crate::error::RemoveTagsError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::RemoveTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RestoreEventDataStoreError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RestoreEventDataStoreError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestoreEventDataStoreError> for Error {
    fn from(err: crate::error::RestoreEventDataStoreError) -> Self {
        match err {
            crate::error::RestoreEventDataStoreError::CloudTrailAccessNotEnabledException(inner) => Error::CloudTrailAccessNotEnabledException(inner),
            crate::error::RestoreEventDataStoreError::EventDataStoreArnInvalidException(inner) => Error::EventDataStoreArnInvalidException(inner),
            crate::error::RestoreEventDataStoreError::EventDataStoreMaxLimitExceededException(inner) => Error::EventDataStoreMaxLimitExceededException(inner),
            crate::error::RestoreEventDataStoreError::EventDataStoreNotFoundException(inner) => Error::EventDataStoreNotFoundException(inner),
            crate::error::RestoreEventDataStoreError::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
            crate::error::RestoreEventDataStoreError::InvalidEventDataStoreStatusException(inner) => Error::InvalidEventDataStoreStatusException(inner),
            crate::error::RestoreEventDataStoreError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::RestoreEventDataStoreError::NoManagementAccountSlrExistsException(inner) => Error::NoManagementAccountSlrExistsException(inner),
            crate::error::RestoreEventDataStoreError::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
            crate::error::RestoreEventDataStoreError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::RestoreEventDataStoreError::OrganizationNotInAllFeaturesModeException(inner) => Error::OrganizationNotInAllFeaturesModeException(inner),
            crate::error::RestoreEventDataStoreError::OrganizationsNotInUseException(inner) => Error::OrganizationsNotInUseException(inner),
            crate::error::RestoreEventDataStoreError::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
            crate::error::RestoreEventDataStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartImportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartImportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartImportError> for Error {
    fn from(err: crate::error::StartImportError) -> Self {
        match err {
            crate::error::StartImportError::AccountHasOngoingImportException(inner) => {
                Error::AccountHasOngoingImportException(inner)
            }
            crate::error::StartImportError::EventDataStoreArnInvalidException(inner) => {
                Error::EventDataStoreArnInvalidException(inner)
            }
            crate::error::StartImportError::EventDataStoreNotFoundException(inner) => {
                Error::EventDataStoreNotFoundException(inner)
            }
            crate::error::StartImportError::ImportNotFoundException(inner) => {
                Error::ImportNotFoundException(inner)
            }
            crate::error::StartImportError::InactiveEventDataStoreException(inner) => {
                Error::InactiveEventDataStoreException(inner)
            }
            crate::error::StartImportError::InvalidEventDataStoreCategoryException(inner) => {
                Error::InvalidEventDataStoreCategoryException(inner)
            }
            crate::error::StartImportError::InvalidEventDataStoreStatusException(inner) => {
                Error::InvalidEventDataStoreStatusException(inner)
            }
            crate::error::StartImportError::InvalidImportSourceException(inner) => {
                Error::InvalidImportSourceException(inner)
            }
            crate::error::StartImportError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartImportError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::StartImportError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::StartImportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartLoggingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartLoggingError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartLoggingError> for Error {
    fn from(err: crate::error::StartLoggingError) -> Self {
        match err {
            crate::error::StartLoggingError::CloudTrailArnInvalidException(inner) => Error::CloudTrailArnInvalidException(inner),
            crate::error::StartLoggingError::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
            crate::error::StartLoggingError::InvalidHomeRegionException(inner) => Error::InvalidHomeRegionException(inner),
            crate::error::StartLoggingError::InvalidTrailNameException(inner) => Error::InvalidTrailNameException(inner),
            crate::error::StartLoggingError::NoManagementAccountSlrExistsException(inner) => Error::NoManagementAccountSlrExistsException(inner),
            crate::error::StartLoggingError::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
            crate::error::StartLoggingError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::StartLoggingError::TrailNotFoundException(inner) => Error::TrailNotFoundException(inner),
            crate::error::StartLoggingError::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
            crate::error::StartLoggingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartQueryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartQueryError> for Error {
    fn from(err: crate::error::StartQueryError) -> Self {
        match err {
            crate::error::StartQueryError::EventDataStoreArnInvalidException(inner) => {
                Error::EventDataStoreArnInvalidException(inner)
            }
            crate::error::StartQueryError::EventDataStoreNotFoundException(inner) => {
                Error::EventDataStoreNotFoundException(inner)
            }
            crate::error::StartQueryError::InactiveEventDataStoreException(inner) => {
                Error::InactiveEventDataStoreException(inner)
            }
            crate::error::StartQueryError::InsufficientEncryptionPolicyException(inner) => {
                Error::InsufficientEncryptionPolicyException(inner)
            }
            crate::error::StartQueryError::InsufficientS3BucketPolicyException(inner) => {
                Error::InsufficientS3BucketPolicyException(inner)
            }
            crate::error::StartQueryError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartQueryError::InvalidQueryStatementException(inner) => {
                Error::InvalidQueryStatementException(inner)
            }
            crate::error::StartQueryError::InvalidS3BucketNameException(inner) => {
                Error::InvalidS3BucketNameException(inner)
            }
            crate::error::StartQueryError::InvalidS3PrefixException(inner) => {
                Error::InvalidS3PrefixException(inner)
            }
            crate::error::StartQueryError::MaxConcurrentQueriesException(inner) => {
                Error::MaxConcurrentQueriesException(inner)
            }
            crate::error::StartQueryError::NoManagementAccountSlrExistsException(inner) => {
                Error::NoManagementAccountSlrExistsException(inner)
            }
            crate::error::StartQueryError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::StartQueryError::S3BucketDoesNotExistException(inner) => {
                Error::S3BucketDoesNotExistException(inner)
            }
            crate::error::StartQueryError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::StartQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopImportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopImportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopImportError> for Error {
    fn from(err: crate::error::StopImportError) -> Self {
        match err {
            crate::error::StopImportError::ImportNotFoundException(inner) => {
                Error::ImportNotFoundException(inner)
            }
            crate::error::StopImportError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StopImportError::OperationNotPermittedException(inner) => {
                Error::OperationNotPermittedException(inner)
            }
            crate::error::StopImportError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::StopImportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopLoggingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopLoggingError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopLoggingError> for Error {
    fn from(err: crate::error::StopLoggingError) -> Self {
        match err {
            crate::error::StopLoggingError::CloudTrailArnInvalidException(inner) => Error::CloudTrailArnInvalidException(inner),
            crate::error::StopLoggingError::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
            crate::error::StopLoggingError::InvalidHomeRegionException(inner) => Error::InvalidHomeRegionException(inner),
            crate::error::StopLoggingError::InvalidTrailNameException(inner) => Error::InvalidTrailNameException(inner),
            crate::error::StopLoggingError::NoManagementAccountSlrExistsException(inner) => Error::NoManagementAccountSlrExistsException(inner),
            crate::error::StopLoggingError::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
            crate::error::StopLoggingError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::StopLoggingError::TrailNotFoundException(inner) => Error::TrailNotFoundException(inner),
            crate::error::StopLoggingError::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
            crate::error::StopLoggingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateEventDataStoreError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateEventDataStoreError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateEventDataStoreError> for Error {
    fn from(err: crate::error::UpdateEventDataStoreError) -> Self {
        match err {
            crate::error::UpdateEventDataStoreError::CloudTrailAccessNotEnabledException(inner) => Error::CloudTrailAccessNotEnabledException(inner),
            crate::error::UpdateEventDataStoreError::EventDataStoreArnInvalidException(inner) => Error::EventDataStoreArnInvalidException(inner),
            crate::error::UpdateEventDataStoreError::EventDataStoreHasOngoingImportException(inner) => Error::EventDataStoreHasOngoingImportException(inner),
            crate::error::UpdateEventDataStoreError::EventDataStoreNotFoundException(inner) => Error::EventDataStoreNotFoundException(inner),
            crate::error::UpdateEventDataStoreError::InactiveEventDataStoreException(inner) => Error::InactiveEventDataStoreException(inner),
            crate::error::UpdateEventDataStoreError::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
            crate::error::UpdateEventDataStoreError::InsufficientEncryptionPolicyException(inner) => Error::InsufficientEncryptionPolicyException(inner),
            crate::error::UpdateEventDataStoreError::InvalidEventSelectorsException(inner) => Error::InvalidEventSelectorsException(inner),
            crate::error::UpdateEventDataStoreError::InvalidKmsKeyIdException(inner) => Error::InvalidKmsKeyIdException(inner),
            crate::error::UpdateEventDataStoreError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::UpdateEventDataStoreError::KmsException(inner) => Error::KmsException(inner),
            crate::error::UpdateEventDataStoreError::KmsKeyNotFoundException(inner) => Error::KmsKeyNotFoundException(inner),
            crate::error::UpdateEventDataStoreError::NoManagementAccountSlrExistsException(inner) => Error::NoManagementAccountSlrExistsException(inner),
            crate::error::UpdateEventDataStoreError::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
            crate::error::UpdateEventDataStoreError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::UpdateEventDataStoreError::OrganizationNotInAllFeaturesModeException(inner) => Error::OrganizationNotInAllFeaturesModeException(inner),
            crate::error::UpdateEventDataStoreError::OrganizationsNotInUseException(inner) => Error::OrganizationsNotInUseException(inner),
            crate::error::UpdateEventDataStoreError::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
            crate::error::UpdateEventDataStoreError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateTrailError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateTrailError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateTrailError> for Error {
    fn from(err: crate::error::UpdateTrailError) -> Self {
        match err {
            crate::error::UpdateTrailError::CloudTrailAccessNotEnabledException(inner) => Error::CloudTrailAccessNotEnabledException(inner),
            crate::error::UpdateTrailError::CloudTrailArnInvalidException(inner) => Error::CloudTrailArnInvalidException(inner),
            crate::error::UpdateTrailError::CloudTrailInvalidClientTokenIdException(inner) => Error::CloudTrailInvalidClientTokenIdException(inner),
            crate::error::UpdateTrailError::CloudWatchLogsDeliveryUnavailableException(inner) => Error::CloudWatchLogsDeliveryUnavailableException(inner),
            crate::error::UpdateTrailError::InsufficientDependencyServiceAccessPermissionException(inner) => Error::InsufficientDependencyServiceAccessPermissionException(inner),
            crate::error::UpdateTrailError::InsufficientEncryptionPolicyException(inner) => Error::InsufficientEncryptionPolicyException(inner),
            crate::error::UpdateTrailError::InsufficientS3BucketPolicyException(inner) => Error::InsufficientS3BucketPolicyException(inner),
            crate::error::UpdateTrailError::InsufficientSnsTopicPolicyException(inner) => Error::InsufficientSnsTopicPolicyException(inner),
            crate::error::UpdateTrailError::InvalidCloudWatchLogsLogGroupArnException(inner) => Error::InvalidCloudWatchLogsLogGroupArnException(inner),
            crate::error::UpdateTrailError::InvalidCloudWatchLogsRoleArnException(inner) => Error::InvalidCloudWatchLogsRoleArnException(inner),
            crate::error::UpdateTrailError::InvalidEventSelectorsException(inner) => Error::InvalidEventSelectorsException(inner),
            crate::error::UpdateTrailError::InvalidHomeRegionException(inner) => Error::InvalidHomeRegionException(inner),
            crate::error::UpdateTrailError::InvalidKmsKeyIdException(inner) => Error::InvalidKmsKeyIdException(inner),
            crate::error::UpdateTrailError::InvalidParameterCombinationException(inner) => Error::InvalidParameterCombinationException(inner),
            crate::error::UpdateTrailError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::UpdateTrailError::InvalidS3BucketNameException(inner) => Error::InvalidS3BucketNameException(inner),
            crate::error::UpdateTrailError::InvalidS3PrefixException(inner) => Error::InvalidS3PrefixException(inner),
            crate::error::UpdateTrailError::InvalidSnsTopicNameException(inner) => Error::InvalidSnsTopicNameException(inner),
            crate::error::UpdateTrailError::InvalidTrailNameException(inner) => Error::InvalidTrailNameException(inner),
            crate::error::UpdateTrailError::KmsException(inner) => Error::KmsException(inner),
            crate::error::UpdateTrailError::KmsKeyDisabledException(inner) => Error::KmsKeyDisabledException(inner),
            crate::error::UpdateTrailError::KmsKeyNotFoundException(inner) => Error::KmsKeyNotFoundException(inner),
            crate::error::UpdateTrailError::NoManagementAccountSlrExistsException(inner) => Error::NoManagementAccountSlrExistsException(inner),
            crate::error::UpdateTrailError::NotOrganizationMasterAccountException(inner) => Error::NotOrganizationMasterAccountException(inner),
            crate::error::UpdateTrailError::OperationNotPermittedException(inner) => Error::OperationNotPermittedException(inner),
            crate::error::UpdateTrailError::OrganizationNotInAllFeaturesModeException(inner) => Error::OrganizationNotInAllFeaturesModeException(inner),
            crate::error::UpdateTrailError::OrganizationsNotInUseException(inner) => Error::OrganizationsNotInUseException(inner),
            crate::error::UpdateTrailError::S3BucketDoesNotExistException(inner) => Error::S3BucketDoesNotExistException(inner),
            crate::error::UpdateTrailError::TrailNotFoundException(inner) => Error::TrailNotFoundException(inner),
            crate::error::UpdateTrailError::TrailNotProvidedException(inner) => Error::TrailNotProvidedException(inner),
            crate::error::UpdateTrailError::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
            crate::error::UpdateTrailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccountHasOngoingImportException(e) => e.request_id(),
            Self::AccountNotFoundException(e) => e.request_id(),
            Self::AccountNotRegisteredException(e) => e.request_id(),
            Self::AccountRegisteredException(e) => e.request_id(),
            Self::CannotDelegateManagementAccountException(e) => e.request_id(),
            Self::ChannelArnInvalidException(e) => e.request_id(),
            Self::ChannelNotFoundException(e) => e.request_id(),
            Self::CloudTrailArnInvalidException(e) => e.request_id(),
            Self::CloudTrailAccessNotEnabledException(e) => e.request_id(),
            Self::CloudTrailInvalidClientTokenIdException(e) => e.request_id(),
            Self::CloudWatchLogsDeliveryUnavailableException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DelegatedAdminAccountLimitExceededException(e) => e.request_id(),
            Self::EventDataStoreArnInvalidException(e) => e.request_id(),
            Self::EventDataStoreAlreadyExistsException(e) => e.request_id(),
            Self::EventDataStoreHasOngoingImportException(e) => e.request_id(),
            Self::EventDataStoreMaxLimitExceededException(e) => e.request_id(),
            Self::EventDataStoreNotFoundException(e) => e.request_id(),
            Self::EventDataStoreTerminationProtectedException(e) => e.request_id(),
            Self::ImportNotFoundException(e) => e.request_id(),
            Self::InactiveEventDataStoreException(e) => e.request_id(),
            Self::InactiveQueryException(e) => e.request_id(),
            Self::InsightNotEnabledException(e) => e.request_id(),
            Self::InsufficientDependencyServiceAccessPermissionException(e) => e.request_id(),
            Self::InsufficientEncryptionPolicyException(e) => e.request_id(),
            Self::InsufficientS3BucketPolicyException(e) => e.request_id(),
            Self::InsufficientSnsTopicPolicyException(e) => e.request_id(),
            Self::InvalidCloudWatchLogsLogGroupArnException(e) => e.request_id(),
            Self::InvalidCloudWatchLogsRoleArnException(e) => e.request_id(),
            Self::InvalidDateRangeException(e) => e.request_id(),
            Self::InvalidEventCategoryException(e) => e.request_id(),
            Self::InvalidEventDataStoreCategoryException(e) => e.request_id(),
            Self::InvalidEventDataStoreStatusException(e) => e.request_id(),
            Self::InvalidEventSelectorsException(e) => e.request_id(),
            Self::InvalidHomeRegionException(e) => e.request_id(),
            Self::InvalidImportSourceException(e) => e.request_id(),
            Self::InvalidInsightSelectorsException(e) => e.request_id(),
            Self::InvalidKmsKeyIdException(e) => e.request_id(),
            Self::InvalidLookupAttributesException(e) => e.request_id(),
            Self::InvalidMaxResultsException(e) => e.request_id(),
            Self::InvalidNextTokenException(e) => e.request_id(),
            Self::InvalidParameterCombinationException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::InvalidQueryStatementException(e) => e.request_id(),
            Self::InvalidQueryStatusException(e) => e.request_id(),
            Self::InvalidS3BucketNameException(e) => e.request_id(),
            Self::InvalidS3PrefixException(e) => e.request_id(),
            Self::InvalidSnsTopicNameException(e) => e.request_id(),
            Self::InvalidTagParameterException(e) => e.request_id(),
            Self::InvalidTimeRangeException(e) => e.request_id(),
            Self::InvalidTokenException(e) => e.request_id(),
            Self::InvalidTrailNameException(e) => e.request_id(),
            Self::KmsException(e) => e.request_id(),
            Self::KmsKeyDisabledException(e) => e.request_id(),
            Self::KmsKeyNotFoundException(e) => e.request_id(),
            Self::MaxConcurrentQueriesException(e) => e.request_id(),
            Self::MaximumNumberOfTrailsExceededException(e) => e.request_id(),
            Self::NoManagementAccountSlrExistsException(e) => e.request_id(),
            Self::NotOrganizationManagementAccountException(e) => e.request_id(),
            Self::NotOrganizationMasterAccountException(e) => e.request_id(),
            Self::OperationNotPermittedException(e) => e.request_id(),
            Self::OrganizationNotInAllFeaturesModeException(e) => e.request_id(),
            Self::OrganizationsNotInUseException(e) => e.request_id(),
            Self::QueryIdNotFoundException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ResourceTypeNotSupportedException(e) => e.request_id(),
            Self::S3BucketDoesNotExistException(e) => e.request_id(),
            Self::TagsLimitExceededException(e) => e.request_id(),
            Self::TrailAlreadyExistsException(e) => e.request_id(),
            Self::TrailNotFoundException(e) => e.request_id(),
            Self::TrailNotProvidedException(e) => e.request_id(),
            Self::UnsupportedOperationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
