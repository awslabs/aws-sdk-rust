// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateChannel`](crate::operation::create_channel::builders::CreateChannelFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_channel::builders::CreateChannelFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_channel::builders::CreateChannelFluentBuilder::set_name):<br>required: **true**<br><p>The name of the channel.</p><br>
    ///   - [`source(impl Into<String>)`](crate::operation::create_channel::builders::CreateChannelFluentBuilder::source) / [`set_source(Option<String>)`](crate::operation::create_channel::builders::CreateChannelFluentBuilder::set_source):<br>required: **true**<br><p>The name of the partner or external event source. You cannot change this name after you create the channel. A maximum of one channel is allowed per source.</p>  <p> A source can be either <code>Custom</code> for all valid non-Amazon Web Services events, or the name of a partner event source. For information about the source names for available partners, see <a href="https://docs.aws.amazon.com/awscloudtrail/latest/userguide/query-event-data-store-integration.html#cloudtrail-lake-partner-information">Additional information about integration partners</a> in the CloudTrail User Guide. </p><br>
    ///   - [`destinations(Destination)`](crate::operation::create_channel::builders::CreateChannelFluentBuilder::destinations) / [`set_destinations(Option<Vec::<Destination>>)`](crate::operation::create_channel::builders::CreateChannelFluentBuilder::set_destinations):<br>required: **true**<br><p>One or more event data stores to which events arriving through a channel will be logged.</p><br>
    ///   - [`tags(Tag)`](crate::operation::create_channel::builders::CreateChannelFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_channel::builders::CreateChannelFluentBuilder::set_tags):<br>required: **false**<br><p>A list of tags.</p><br>
    /// - On success, responds with [`CreateChannelOutput`](crate::operation::create_channel::CreateChannelOutput) with field(s):
    ///   - [`channel_arn(Option<String>)`](crate::operation::create_channel::CreateChannelOutput::channel_arn): <p>The Amazon Resource Name (ARN) of the new channel.</p>
    ///   - [`name(Option<String>)`](crate::operation::create_channel::CreateChannelOutput::name): <p>The name of the new channel.</p>
    ///   - [`source(Option<String>)`](crate::operation::create_channel::CreateChannelOutput::source): <p>The partner or external event source name.</p>
    ///   - [`destinations(Option<Vec::<Destination>>)`](crate::operation::create_channel::CreateChannelOutput::destinations): <p>The event data stores that log the events arriving through the channel.</p>
    ///   - [`tags(Option<Vec::<Tag>>)`](crate::operation::create_channel::CreateChannelOutput::tags): <p>A list of tags.</p>
    /// - On failure, responds with [`SdkError<CreateChannelError>`](crate::operation::create_channel::CreateChannelError)
    pub fn create_channel(&self) -> crate::operation::create_channel::builders::CreateChannelFluentBuilder {
        crate::operation::create_channel::builders::CreateChannelFluentBuilder::new(self.handle.clone())
    }
}
