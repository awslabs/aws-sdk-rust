// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateEventDataStore`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`event_data_store(impl Into<String>)`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::event_data_store) / [`set_event_data_store(Option<String>)`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::set_event_data_store):<br>required: **true**<br><p>The ARN (or the ID suffix of the ARN) of the event data store that you want to update.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::set_name):<br>required: **false**<br><p>The event data store name.</p><br>
    ///   - [`advanced_event_selectors(AdvancedEventSelector)`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::advanced_event_selectors) / [`set_advanced_event_selectors(Option<Vec::<AdvancedEventSelector>>)`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::set_advanced_event_selectors):<br>required: **false**<br><p>The advanced event selectors used to select events for the event data store. You can configure up to five advanced event selectors for each event data store.</p><br>
    ///   - [`multi_region_enabled(bool)`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::multi_region_enabled) / [`set_multi_region_enabled(Option<bool>)`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::set_multi_region_enabled):<br>required: **false**<br><p>Specifies whether an event data store collects events from all Regions, or only from the Region in which it was created.</p><br>
    ///   - [`organization_enabled(bool)`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::organization_enabled) / [`set_organization_enabled(Option<bool>)`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::set_organization_enabled):<br>required: **false**<br><p>Specifies whether an event data store collects events logged for an organization in Organizations.</p><br>
    ///   - [`retention_period(i32)`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::retention_period) / [`set_retention_period(Option<i32>)`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::set_retention_period):<br>required: **false**<br><p>The retention period of the event data store, in days. You can set a retention period of up to 2557 days, the equivalent of seven years. CloudTrail Lake determines whether to retain an event by checking if the <code>eventTime</code> of the event is within the specified retention period. For example, if you set a retention period of 90 days, CloudTrail will remove events when the <code>eventTime</code> is older than 90 days.</p> <note>   <p>If you decrease the retention period of an event data store, CloudTrail will remove any events with an <code>eventTime</code> older than the new retention period. For example, if the previous retention period was 365 days and you decrease it to 100 days, CloudTrail will remove events with an <code>eventTime</code> older than 100 days.</p>  </note><br>
    ///   - [`termination_protection_enabled(bool)`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::termination_protection_enabled) / [`set_termination_protection_enabled(Option<bool>)`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::set_termination_protection_enabled):<br>required: **false**<br><p>Indicates that termination protection is enabled and the event data store cannot be automatically deleted.</p><br>
    ///   - [`kms_key_id(impl Into<String>)`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::set_kms_key_id):<br>required: **false**<br><p>Specifies the KMS key ID to use to encrypt the events delivered by CloudTrail. The value can be an alias name prefixed by <code>alias/</code>, a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier.</p> <important>   <p>Disabling or deleting the KMS key, or removing CloudTrail permissions on the key, prevents CloudTrail from logging events to the event data store, and prevents users from querying the data in the event data store that was encrypted with the key. After you associate an event data store with a KMS key, the KMS key cannot be removed or changed. Before you disable or delete a KMS key that you are using with an event data store, delete or back up your event data store.</p>  </important>  <p>CloudTrail also supports KMS multi-Region keys. For more information about multi-Region keys, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html">Using multi-Region keys</a> in the <i>Key Management Service Developer Guide</i>.</p>  <p>Examples:</p>  <ul>   <li> <p> <code>alias/MyAliasName</code> </p> </li>   <li> <p> <code>arn:aws:kms:us-east-2:123456789012:alias/MyAliasName</code> </p> </li>   <li> <p> <code>arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012</code> </p> </li>   <li> <p> <code>12345678-1234-1234-1234-123456789012</code> </p> </li>  </ul><br>
    /// - On success, responds with [`UpdateEventDataStoreOutput`](crate::operation::update_event_data_store::UpdateEventDataStoreOutput) with field(s):
    ///   - [`event_data_store_arn(Option<String>)`](crate::operation::update_event_data_store::UpdateEventDataStoreOutput::event_data_store_arn): <p>The ARN of the event data store.</p>
    ///   - [`name(Option<String>)`](crate::operation::update_event_data_store::UpdateEventDataStoreOutput::name): <p>The name of the event data store.</p>
    ///   - [`status(Option<EventDataStoreStatus>)`](crate::operation::update_event_data_store::UpdateEventDataStoreOutput::status): <p>The status of an event data store.</p>
    ///   - [`advanced_event_selectors(Option<Vec::<AdvancedEventSelector>>)`](crate::operation::update_event_data_store::UpdateEventDataStoreOutput::advanced_event_selectors): <p>The advanced event selectors that are applied to the event data store.</p>
    ///   - [`multi_region_enabled(Option<bool>)`](crate::operation::update_event_data_store::UpdateEventDataStoreOutput::multi_region_enabled): <p>Indicates whether the event data store includes events from all Regions, or only from the Region in which it was created.</p>
    ///   - [`organization_enabled(Option<bool>)`](crate::operation::update_event_data_store::UpdateEventDataStoreOutput::organization_enabled): <p>Indicates whether an event data store is collecting logged events for an organization in Organizations.</p>
    ///   - [`retention_period(Option<i32>)`](crate::operation::update_event_data_store::UpdateEventDataStoreOutput::retention_period): <p>The retention period, in days.</p>
    ///   - [`termination_protection_enabled(Option<bool>)`](crate::operation::update_event_data_store::UpdateEventDataStoreOutput::termination_protection_enabled): <p>Indicates whether termination protection is enabled for the event data store.</p>
    ///   - [`created_timestamp(Option<DateTime>)`](crate::operation::update_event_data_store::UpdateEventDataStoreOutput::created_timestamp): <p>The timestamp that shows when an event data store was first created.</p>
    ///   - [`updated_timestamp(Option<DateTime>)`](crate::operation::update_event_data_store::UpdateEventDataStoreOutput::updated_timestamp): <p>The timestamp that shows when the event data store was last updated. <code>UpdatedTimestamp</code> is always either the same or newer than the time shown in <code>CreatedTimestamp</code>.</p>
    ///   - [`kms_key_id(Option<String>)`](crate::operation::update_event_data_store::UpdateEventDataStoreOutput::kms_key_id): <p>Specifies the KMS key ID that encrypts the events delivered by CloudTrail. The value is a fully specified ARN to a KMS key in the following format.</p>  <p> <code>arn:aws:kms:us-east-2:123456789012:key/12345678-1234-1234-1234-123456789012</code> </p>
    /// - On failure, responds with [`SdkError<UpdateEventDataStoreError>`](crate::operation::update_event_data_store::UpdateEventDataStoreError)
    pub fn update_event_data_store(&self) -> crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder {
        crate::operation::update_event_data_store::builders::UpdateEventDataStoreFluentBuilder::new(self.handle.clone())
    }
}
