// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartImport`](crate::client::fluent_builders::StartImport) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`destinations(Vec<String>)`](crate::client::fluent_builders::StartImport::destinations) / [`set_destinations(Option<Vec<String>>)`](crate::client::fluent_builders::StartImport::set_destinations): <p> The ARN of the destination event data store. Use this parameter for a new import. </p>
    ///   - [`import_source(ImportSource)`](crate::client::fluent_builders::StartImport::import_source) / [`set_import_source(Option<ImportSource>)`](crate::client::fluent_builders::StartImport::set_import_source): <p> The source S3 bucket for the import. Use this parameter for a new import. </p>
    ///   - [`start_event_time(DateTime)`](crate::client::fluent_builders::StartImport::start_event_time) / [`set_start_event_time(Option<DateTime>)`](crate::client::fluent_builders::StartImport::set_start_event_time): <p> Use with <code>EndEventTime</code> to bound a <code>StartImport</code> request, and limit imported trail events to only those events logged within a specified time period. When you specify a time range, CloudTrail checks the prefix and log file names to verify the names contain a date between the specified <code>StartEventTime</code> and <code>EndEventTime</code> before attempting to import events. </p>
    ///   - [`end_event_time(DateTime)`](crate::client::fluent_builders::StartImport::end_event_time) / [`set_end_event_time(Option<DateTime>)`](crate::client::fluent_builders::StartImport::set_end_event_time): <p> Use with <code>StartEventTime</code> to bound a <code>StartImport</code> request, and limit imported trail events to only those events logged within a specified time period. When you specify a time range, CloudTrail checks the prefix and log file names to verify the names contain a date between the specified <code>StartEventTime</code> and <code>EndEventTime</code> before attempting to import events. </p>
    ///   - [`import_id(impl Into<String>)`](crate::client::fluent_builders::StartImport::import_id) / [`set_import_id(Option<String>)`](crate::client::fluent_builders::StartImport::set_import_id): <p> The ID of the import. Use this parameter when you are retrying an import. </p>
    /// - On success, responds with [`StartImportOutput`](crate::output::StartImportOutput) with field(s):
    ///   - [`import_id(Option<String>)`](crate::output::StartImportOutput::import_id): <p> The ID of the import. </p>
    ///   - [`destinations(Option<Vec<String>>)`](crate::output::StartImportOutput::destinations): <p> The ARN of the destination event data store. </p>
    ///   - [`import_source(Option<ImportSource>)`](crate::output::StartImportOutput::import_source): <p> The source S3 bucket for the import. </p>
    ///   - [`start_event_time(Option<DateTime>)`](crate::output::StartImportOutput::start_event_time): <p> Used with <code>EndEventTime</code> to bound a <code>StartImport</code> request, and limit imported trail events to only those events logged within a specified time period. </p>
    ///   - [`end_event_time(Option<DateTime>)`](crate::output::StartImportOutput::end_event_time): <p> Used with <code>StartEventTime</code> to bound a <code>StartImport</code> request, and limit imported trail events to only those events logged within a specified time period. </p>
    ///   - [`import_status(Option<ImportStatus>)`](crate::output::StartImportOutput::import_status): <p> Shows the status of the import after a <code>StartImport</code> request. An import finishes with a status of <code>COMPLETED</code> if there were no failures, or <code>FAILED</code> if there were failures. </p>
    ///   - [`created_timestamp(Option<DateTime>)`](crate::output::StartImportOutput::created_timestamp): <p> The timestamp for the import's creation. </p>
    ///   - [`updated_timestamp(Option<DateTime>)`](crate::output::StartImportOutput::updated_timestamp): <p> The timestamp of the import's last update, if applicable. </p>
    /// - On failure, responds with [`SdkError<StartImportError>`](crate::error::StartImportError)
    pub fn start_import(&self) -> crate::client::fluent_builders::StartImport {
        crate::client::fluent_builders::StartImport::new(self.handle.clone())
    }
}
