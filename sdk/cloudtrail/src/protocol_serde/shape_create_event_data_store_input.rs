// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_event_data_store_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_event_data_store::CreateEventDataStoreInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.name {
        object.key("Name").string(var_1.as_str());
    }
    if let Some(var_2) = &input.advanced_event_selectors {
        let mut array_3 = object.key("AdvancedEventSelectors").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_advanced_event_selector::ser_advanced_event_selector(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.multi_region_enabled {
        object.key("MultiRegionEnabled").boolean(*var_6);
    }
    if let Some(var_7) = &input.organization_enabled {
        object.key("OrganizationEnabled").boolean(*var_7);
    }
    if let Some(var_8) = &input.retention_period {
        object.key("RetentionPeriod").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.termination_protection_enabled {
        object.key("TerminationProtectionEnabled").boolean(*var_9);
    }
    if let Some(var_10) = &input.tags_list {
        let mut array_11 = object.key("TagsList").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.kms_key_id {
        object.key("KmsKeyId").string(var_14.as_str());
    }
    if let Some(var_15) = &input.start_ingestion {
        object.key("StartIngestion").boolean(*var_15);
    }
    Ok(())
}
