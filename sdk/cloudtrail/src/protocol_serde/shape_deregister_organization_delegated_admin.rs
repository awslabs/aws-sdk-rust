// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_deregister_organization_delegated_admin_input(
    input: &crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_deregister_organization_delegated_admin_input::ser_deregister_organization_delegated_admin_input(&mut object, input)?;
    object.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_deregister_organization_delegated_admin_http_error(response: &http::Response<bytes::Bytes>) -> std::result::Result<crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminOutput, crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError>{
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response).map_err(crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
                                Some(code) => code,
                                None => return Err(crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::unhandled(generic))
                            };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccountNotFoundException" => crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::AccountNotFoundException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::AccountNotFoundExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_account_not_found_exception::de_account_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "AccountNotRegisteredException" => crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::AccountNotRegisteredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::AccountNotRegisteredExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_account_not_registered_exception::de_account_not_registered_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "CloudTrailAccessNotEnabledException" => crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::CloudTrailAccessNotEnabledException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CloudTrailAccessNotEnabledExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_cloud_trail_access_not_enabled_exception::de_cloud_trail_access_not_enabled_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InsufficientDependencyServiceAccessPermissionException" => crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::InsufficientDependencyServiceAccessPermissionException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InsufficientDependencyServiceAccessPermissionExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_insufficient_dependency_service_access_permission_exception::de_insufficient_dependency_service_access_permission_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidParameterException" => crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidParameterExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_parameter_exception::de_invalid_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "NotOrganizationManagementAccountException" => crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::NotOrganizationManagementAccountException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::NotOrganizationManagementAccountExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_not_organization_management_account_exception::de_not_organization_management_account_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "OperationNotPermittedException" => crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::OperationNotPermittedException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::OperationNotPermittedExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_operation_not_permitted_exception::de_operation_not_permitted_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "OrganizationNotInAllFeaturesModeException" => crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::OrganizationNotInAllFeaturesModeException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::OrganizationNotInAllFeaturesModeExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_organization_not_in_all_features_mode_exception::de_organization_not_in_all_features_mode_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "OrganizationsNotInUseException" => crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::OrganizationsNotInUseException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::OrganizationsNotInUseExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_organizations_not_in_use_exception::de_organizations_not_in_use_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "UnsupportedOperationException" => crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::UnsupportedOperationException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::UnsupportedOperationExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_unsupported_operation_exception::de_unsupported_operation_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_deregister_organization_delegated_admin_http_response(response: &http::Response<bytes::Bytes>) -> std::result::Result<crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminOutput, crate::operation::deregister_organization_delegated_admin::DeregisterOrganizationDelegatedAdminError>{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::deregister_organization_delegated_admin::builders::DeregisterOrganizationDelegatedAdminOutputBuilder::default();
        let _ = response;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}
