// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_register_organization_delegated_admin_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminOutput,
    crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AccountNotFoundException" => crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::AccountNotFoundException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::AccountNotFoundExceptionBuilder::default();
                    output = crate::protocol_serde::shape_account_not_found_exception::de_account_not_found_exception_json_err(_response_body, output).map_err(crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "AccountRegisteredException" => crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::AccountRegisteredException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::AccountRegisteredExceptionBuilder::default();
                    output = crate::protocol_serde::shape_account_registered_exception::de_account_registered_exception_json_err(_response_body, output).map_err(crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "CannotDelegateManagementAccountException" => crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::CannotDelegateManagementAccountException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CannotDelegateManagementAccountExceptionBuilder::default();
                    output = crate::protocol_serde::shape_cannot_delegate_management_account_exception::de_cannot_delegate_management_account_exception_json_err(_response_body, output).map_err(crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "CloudTrailAccessNotEnabledException" => crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::CloudTrailAccessNotEnabledException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CloudTrailAccessNotEnabledExceptionBuilder::default();
                    output = crate::protocol_serde::shape_cloud_trail_access_not_enabled_exception::de_cloud_trail_access_not_enabled_exception_json_err(_response_body, output).map_err(crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "ConflictException" => crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::ConflictExceptionBuilder::default();
                    output = crate::protocol_serde::shape_conflict_exception::de_conflict_exception_json_err(_response_body, output).map_err(crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "DelegatedAdminAccountLimitExceededException" => crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::DelegatedAdminAccountLimitExceededException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::DelegatedAdminAccountLimitExceededExceptionBuilder::default();
                    output = crate::protocol_serde::shape_delegated_admin_account_limit_exceeded_exception::de_delegated_admin_account_limit_exceeded_exception_json_err(_response_body, output).map_err(crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "InsufficientDependencyServiceAccessPermissionException" => crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::InsufficientDependencyServiceAccessPermissionException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InsufficientDependencyServiceAccessPermissionExceptionBuilder::default();
                    output = crate::protocol_serde::shape_insufficient_dependency_service_access_permission_exception::de_insufficient_dependency_service_access_permission_exception_json_err(_response_body, output).map_err(crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "InvalidParameterException" => crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidParameterExceptionBuilder::default();
                    output = crate::protocol_serde::shape_invalid_parameter_exception::de_invalid_parameter_exception_json_err(_response_body, output).map_err(crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "NotOrganizationManagementAccountException" => crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::NotOrganizationManagementAccountException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::NotOrganizationManagementAccountExceptionBuilder::default();
                    output = crate::protocol_serde::shape_not_organization_management_account_exception::de_not_organization_management_account_exception_json_err(_response_body, output).map_err(crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "OperationNotPermittedException" => crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::OperationNotPermittedException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::OperationNotPermittedExceptionBuilder::default();
                    output = crate::protocol_serde::shape_operation_not_permitted_exception::de_operation_not_permitted_exception_json_err(_response_body, output).map_err(crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "OrganizationNotInAllFeaturesModeException" => crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::OrganizationNotInAllFeaturesModeException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::OrganizationNotInAllFeaturesModeExceptionBuilder::default();
                    output = crate::protocol_serde::shape_organization_not_in_all_features_mode_exception::de_organization_not_in_all_features_mode_exception_json_err(_response_body, output).map_err(crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "OrganizationsNotInUseException" => crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::OrganizationsNotInUseException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::OrganizationsNotInUseExceptionBuilder::default();
                    output = crate::protocol_serde::shape_organizations_not_in_use_exception::de_organizations_not_in_use_exception_json_err(_response_body, output).map_err(crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        "UnsupportedOperationException" => crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::UnsupportedOperationException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::UnsupportedOperationExceptionBuilder::default();
                    output = crate::protocol_serde::shape_unsupported_operation_exception::de_unsupported_operation_exception_json_err(_response_body, output).map_err(crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                            tmp.message = _error_message;
                                                        }
            tmp
        }),
        _ => crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_register_organization_delegated_admin_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminOutput,
    crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::operation::register_organization_delegated_admin::builders::RegisterOrganizationDelegatedAdminOutputBuilder::default();
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_register_organization_delegated_admin_input(
    input: &crate::operation::register_organization_delegated_admin::RegisterOrganizationDelegatedAdminInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_register_organization_delegated_admin_input::ser_register_organization_delegated_admin_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
