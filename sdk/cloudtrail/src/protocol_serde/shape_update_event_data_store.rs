// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_event_data_store_input(
    input: &crate::operation::update_event_data_store::UpdateEventDataStoreInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::error::SerializationError> {
    let mut out = String::new();
    let mut object = aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_update_event_data_store_input::ser_update_event_data_store_input(
        &mut object,
        input,
    )?;
    object.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_update_event_data_store_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::update_event_data_store::UpdateEventDataStoreOutput,
    crate::operation::update_event_data_store::UpdateEventDataStoreError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(
                crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled(
                    generic,
                ),
            )
        }
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudTrailAccessNotEnabledException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::CloudTrailAccessNotEnabledException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CloudTrailAccessNotEnabledExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_cloud_trail_access_not_enabled_exception::de_cloud_trail_access_not_enabled_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "EventDataStoreARNInvalidException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::EventDataStoreArnInvalidException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EventDataStoreArnInvalidExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_event_data_store_arn_invalid_exception::de_event_data_store_arn_invalid_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "EventDataStoreHasOngoingImportException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::EventDataStoreHasOngoingImportException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EventDataStoreHasOngoingImportExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_event_data_store_has_ongoing_import_exception::de_event_data_store_has_ongoing_import_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "EventDataStoreNotFoundException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::EventDataStoreNotFoundException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::EventDataStoreNotFoundExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_event_data_store_not_found_exception::de_event_data_store_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InactiveEventDataStoreException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::InactiveEventDataStoreException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InactiveEventDataStoreExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_inactive_event_data_store_exception::de_inactive_event_data_store_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InsufficientDependencyServiceAccessPermissionException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::InsufficientDependencyServiceAccessPermissionException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InsufficientDependencyServiceAccessPermissionExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_insufficient_dependency_service_access_permission_exception::de_insufficient_dependency_service_access_permission_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InsufficientEncryptionPolicyException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::InsufficientEncryptionPolicyException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InsufficientEncryptionPolicyExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_insufficient_encryption_policy_exception::de_insufficient_encryption_policy_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidEventSelectorsException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::InvalidEventSelectorsException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidEventSelectorsExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_event_selectors_exception::de_invalid_event_selectors_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidKmsKeyIdException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::InvalidKmsKeyIdException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidKmsKeyIdExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_kms_key_id_exception::de_invalid_kms_key_id_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "InvalidParameterException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InvalidParameterExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_parameter_exception::de_invalid_parameter_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "KmsException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::KmsException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::KmsExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_kms_exception::de_kms_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "KmsKeyNotFoundException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::KmsKeyNotFoundException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::KmsKeyNotFoundExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_kms_key_not_found_exception::de_kms_key_not_found_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "NoManagementAccountSLRExistsException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::NoManagementAccountSlrExistsException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::NoManagementAccountSlrExistsExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_no_management_account_slr_exists_exception::de_no_management_account_slr_exists_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "NotOrganizationMasterAccountException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::NotOrganizationMasterAccountException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::NotOrganizationMasterAccountExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_not_organization_master_account_exception::de_not_organization_master_account_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "OperationNotPermittedException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::OperationNotPermittedException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::OperationNotPermittedExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_operation_not_permitted_exception::de_operation_not_permitted_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "OrganizationNotInAllFeaturesModeException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::OrganizationNotInAllFeaturesModeException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::OrganizationNotInAllFeaturesModeExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_organization_not_in_all_features_mode_exception::de_organization_not_in_all_features_mode_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "OrganizationsNotInUseException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::OrganizationsNotInUseException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::OrganizationsNotInUseExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_organizations_not_in_use_exception::de_organizations_not_in_use_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        "UnsupportedOperationException" => crate::operation::update_event_data_store::UpdateEventDataStoreError::UnsupportedOperationException({
            #[allow(unused_mut)]
            let mut tmp =
                 {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::UnsupportedOperationExceptionBuilder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_unsupported_operation_exception::de_unsupported_operation_exception_json_err(response.body().as_ref(), output).map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                }
            ;
            if tmp.message.is_none() {
                                                        tmp.message = _error_message;
                                                    }
            tmp
        }),
        _ => crate::operation::update_event_data_store::UpdateEventDataStoreError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_update_event_data_store_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::operation::update_event_data_store::UpdateEventDataStoreOutput,
    crate::operation::update_event_data_store::UpdateEventDataStoreError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::update_event_data_store::builders::UpdateEventDataStoreOutputBuilder::default();
        let _ = response;
        output = crate::protocol_serde::shape_update_event_data_store::de_update_event_data_store(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::operation::update_event_data_store::UpdateEventDataStoreError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

pub(crate) fn de_update_event_data_store(
    value: &[u8],
    mut builder: crate::operation::update_event_data_store::builders::UpdateEventDataStoreOutputBuilder,
) -> Result<
    crate::operation::update_event_data_store::builders::UpdateEventDataStoreOutputBuilder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    let mut tokens_owned =
        aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value))
            .peekable();
    let tokens = &mut tokens_owned;
    aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                match key.to_unescaped()?.as_ref() {
                    "EventDataStoreArn" => {
                        builder = builder.set_event_data_store_arn(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "Name" => {
                        builder = builder.set_name(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    "Status" => {
                        builder = builder.set_status(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| {
                                s.to_unescaped()
                                    .map(|u| crate::types::EventDataStoreStatus::from(u.as_ref()))
                            })
                            .transpose()?,
                        );
                    }
                    "AdvancedEventSelectors" => {
                        builder = builder.set_advanced_event_selectors(
                            crate::protocol_serde::shape_advanced_event_selectors::de_advanced_event_selectors(tokens)?
                        );
                    }
                    "MultiRegionEnabled" => {
                        builder = builder.set_multi_region_enabled(
                            aws_smithy_json::deserialize::token::expect_bool_or_null(
                                tokens.next(),
                            )?,
                        );
                    }
                    "OrganizationEnabled" => {
                        builder = builder.set_organization_enabled(
                            aws_smithy_json::deserialize::token::expect_bool_or_null(
                                tokens.next(),
                            )?,
                        );
                    }
                    "RetentionPeriod" => {
                        builder = builder.set_retention_period(
                            aws_smithy_json::deserialize::token::expect_number_or_null(
                                tokens.next(),
                            )?
                            .map(i32::try_from)
                            .transpose()?,
                        );
                    }
                    "TerminationProtectionEnabled" => {
                        builder = builder.set_termination_protection_enabled(
                            aws_smithy_json::deserialize::token::expect_bool_or_null(
                                tokens.next(),
                            )?,
                        );
                    }
                    "CreatedTimestamp" => {
                        builder = builder.set_created_timestamp(
                            aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                aws_smithy_types::date_time::Format::EpochSeconds,
                            )?,
                        );
                    }
                    "UpdatedTimestamp" => {
                        builder = builder.set_updated_timestamp(
                            aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                aws_smithy_types::date_time::Format::EpochSeconds,
                            )?,
                        );
                    }
                    "KmsKeyId" => {
                        builder = builder.set_kms_key_id(
                            aws_smithy_json::deserialize::token::expect_string_or_null(
                                tokens.next(),
                            )?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                        );
                    }
                    _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                }
            }
            other => {
                return Err(
                    aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {:?}",
                        other
                    )),
                )
            }
        }
    }
    if tokens.next().is_some() {
        return Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "found more JSON tokens after completing parsing",
            ),
        );
    }
    Ok(builder)
}
