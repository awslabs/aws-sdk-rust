// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_update_trail_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::update_trail::UpdateTrailOutput, crate::operation::update_trail::UpdateTrailError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::update_trail::UpdateTrailError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "CloudTrailAccessNotEnabledException" => crate::operation::update_trail::UpdateTrailError::CloudTrailAccessNotEnabledException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::CloudTrailAccessNotEnabledExceptionBuilder::default();
                output = crate::protocol_serde::shape_cloud_trail_access_not_enabled_exception::de_cloud_trail_access_not_enabled_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "CloudTrailARNInvalidException" => crate::operation::update_trail::UpdateTrailError::CloudTrailArnInvalidException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::CloudTrailArnInvalidExceptionBuilder::default();
                output = crate::protocol_serde::shape_cloud_trail_arn_invalid_exception::de_cloud_trail_arn_invalid_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "CloudTrailInvalidClientTokenIdException" => crate::operation::update_trail::UpdateTrailError::CloudTrailInvalidClientTokenIdException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::CloudTrailInvalidClientTokenIdExceptionBuilder::default();
                output = crate::protocol_serde::shape_cloud_trail_invalid_client_token_id_exception::de_cloud_trail_invalid_client_token_id_exception_json_err(_response_body, output).map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "CloudWatchLogsDeliveryUnavailableException" => {
            crate::operation::update_trail::UpdateTrailError::CloudWatchLogsDeliveryUnavailableException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::CloudWatchLogsDeliveryUnavailableExceptionBuilder::default();
                    output = crate::protocol_serde::shape_cloud_watch_logs_delivery_unavailable_exception::de_cloud_watch_logs_delivery_unavailable_exception_json_err(_response_body, output).map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ConflictException" => crate::operation::update_trail::UpdateTrailError::ConflictException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ConflictExceptionBuilder::default();
                output = crate::protocol_serde::shape_conflict_exception::de_conflict_exception_json_err(_response_body, output)
                    .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InsufficientDependencyServiceAccessPermissionException" => {
            crate::operation::update_trail::UpdateTrailError::InsufficientDependencyServiceAccessPermissionException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::InsufficientDependencyServiceAccessPermissionExceptionBuilder::default();
                    output = crate::protocol_serde::shape_insufficient_dependency_service_access_permission_exception::de_insufficient_dependency_service_access_permission_exception_json_err(_response_body, output).map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InsufficientEncryptionPolicyException" => crate::operation::update_trail::UpdateTrailError::InsufficientEncryptionPolicyException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InsufficientEncryptionPolicyExceptionBuilder::default();
                output = crate::protocol_serde::shape_insufficient_encryption_policy_exception::de_insufficient_encryption_policy_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InsufficientS3BucketPolicyException" => crate::operation::update_trail::UpdateTrailError::InsufficientS3BucketPolicyException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InsufficientS3BucketPolicyExceptionBuilder::default();
                output = crate::protocol_serde::shape_insufficient_s3_bucket_policy_exception::de_insufficient_s3_bucket_policy_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InsufficientSnsTopicPolicyException" => crate::operation::update_trail::UpdateTrailError::InsufficientSnsTopicPolicyException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InsufficientSnsTopicPolicyExceptionBuilder::default();
                output = crate::protocol_serde::shape_insufficient_sns_topic_policy_exception::de_insufficient_sns_topic_policy_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidCloudWatchLogsLogGroupArnException" => crate::operation::update_trail::UpdateTrailError::InvalidCloudWatchLogsLogGroupArnException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidCloudWatchLogsLogGroupArnExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_cloud_watch_logs_log_group_arn_exception::de_invalid_cloud_watch_logs_log_group_arn_exception_json_err(_response_body, output).map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidCloudWatchLogsRoleArnException" => crate::operation::update_trail::UpdateTrailError::InvalidCloudWatchLogsRoleArnException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidCloudWatchLogsRoleArnExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_cloud_watch_logs_role_arn_exception::de_invalid_cloud_watch_logs_role_arn_exception_json_err(_response_body, output).map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidEventSelectorsException" => crate::operation::update_trail::UpdateTrailError::InvalidEventSelectorsException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidEventSelectorsExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_event_selectors_exception::de_invalid_event_selectors_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidHomeRegionException" => crate::operation::update_trail::UpdateTrailError::InvalidHomeRegionException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidHomeRegionExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_invalid_home_region_exception::de_invalid_home_region_exception_json_err(_response_body, output)
                        .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidKmsKeyIdException" => crate::operation::update_trail::UpdateTrailError::InvalidKmsKeyIdException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidKmsKeyIdExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_kms_key_id_exception::de_invalid_kms_key_id_exception_json_err(_response_body, output)
                    .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidParameterCombinationException" => crate::operation::update_trail::UpdateTrailError::InvalidParameterCombinationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidParameterCombinationExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_parameter_combination_exception::de_invalid_parameter_combination_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidParameterException" => crate::operation::update_trail::UpdateTrailError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidParameterExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_parameter_exception::de_invalid_parameter_exception_json_err(_response_body, output)
                    .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidS3BucketNameException" => crate::operation::update_trail::UpdateTrailError::InvalidS3BucketNameException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidS3BucketNameExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_s3_bucket_name_exception::de_invalid_s3_bucket_name_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidS3PrefixException" => crate::operation::update_trail::UpdateTrailError::InvalidS3PrefixException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidS3PrefixExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_s3_prefix_exception::de_invalid_s3_prefix_exception_json_err(_response_body, output)
                    .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidSnsTopicNameException" => crate::operation::update_trail::UpdateTrailError::InvalidSnsTopicNameException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidSnsTopicNameExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_sns_topic_name_exception::de_invalid_sns_topic_name_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidTrailNameException" => crate::operation::update_trail::UpdateTrailError::InvalidTrailNameException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InvalidTrailNameExceptionBuilder::default();
                output = crate::protocol_serde::shape_invalid_trail_name_exception::de_invalid_trail_name_exception_json_err(_response_body, output)
                    .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "KmsException" => crate::operation::update_trail::UpdateTrailError::KmsException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::KmsExceptionBuilder::default();
                output = crate::protocol_serde::shape_kms_exception::de_kms_exception_json_err(_response_body, output)
                    .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "KmsKeyDisabledException" => crate::operation::update_trail::UpdateTrailError::KmsKeyDisabledException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::KmsKeyDisabledExceptionBuilder::default();
                output = crate::protocol_serde::shape_kms_key_disabled_exception::de_kms_key_disabled_exception_json_err(_response_body, output)
                    .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "KmsKeyNotFoundException" => crate::operation::update_trail::UpdateTrailError::KmsKeyNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::KmsKeyNotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_kms_key_not_found_exception::de_kms_key_not_found_exception_json_err(_response_body, output)
                    .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "NoManagementAccountSLRExistsException" => {
            crate::operation::update_trail::UpdateTrailError::NoManagementAccountSlrExistsException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::NoManagementAccountSlrExistsExceptionBuilder::default();
                    output = crate::protocol_serde::shape_no_management_account_slr_exists_exception::de_no_management_account_slr_exists_exception_json_err(_response_body, output).map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "NotOrganizationMasterAccountException" => {
            crate::operation::update_trail::UpdateTrailError::NotOrganizationMasterAccountException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::types::error::builders::NotOrganizationMasterAccountExceptionBuilder::default();
                    output = crate::protocol_serde::shape_not_organization_master_account_exception::de_not_organization_master_account_exception_json_err(_response_body, output).map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "OperationNotPermittedException" => crate::operation::update_trail::UpdateTrailError::OperationNotPermittedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::OperationNotPermittedExceptionBuilder::default();
                output = crate::protocol_serde::shape_operation_not_permitted_exception::de_operation_not_permitted_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OrganizationNotInAllFeaturesModeException" => crate::operation::update_trail::UpdateTrailError::OrganizationNotInAllFeaturesModeException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::OrganizationNotInAllFeaturesModeExceptionBuilder::default();
                output = crate::protocol_serde::shape_organization_not_in_all_features_mode_exception::de_organization_not_in_all_features_mode_exception_json_err(_response_body, output).map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "OrganizationsNotInUseException" => crate::operation::update_trail::UpdateTrailError::OrganizationsNotInUseException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::OrganizationsNotInUseExceptionBuilder::default();
                output = crate::protocol_serde::shape_organizations_not_in_use_exception::de_organizations_not_in_use_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "S3BucketDoesNotExistException" => crate::operation::update_trail::UpdateTrailError::S3BucketDoesNotExistException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::S3BucketDoesNotExistExceptionBuilder::default();
                output = crate::protocol_serde::shape_s3_bucket_does_not_exist_exception::de_s3_bucket_does_not_exist_exception_json_err(
                    _response_body,
                    output,
                )
                .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ThrottlingException" => crate::operation::update_trail::UpdateTrailError::ThrottlingException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ThrottlingExceptionBuilder::default();
                output = crate::protocol_serde::shape_throttling_exception::de_throttling_exception_json_err(_response_body, output)
                    .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "TrailNotFoundException" => crate::operation::update_trail::UpdateTrailError::TrailNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::TrailNotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_trail_not_found_exception::de_trail_not_found_exception_json_err(_response_body, output)
                    .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "TrailNotProvidedException" => crate::operation::update_trail::UpdateTrailError::TrailNotProvidedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::TrailNotProvidedExceptionBuilder::default();
                output = crate::protocol_serde::shape_trail_not_provided_exception::de_trail_not_provided_exception_json_err(_response_body, output)
                    .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "UnsupportedOperationException" => crate::operation::update_trail::UpdateTrailError::UnsupportedOperationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::UnsupportedOperationExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_unsupported_operation_exception::de_unsupported_operation_exception_json_err(_response_body, output)
                        .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::operation::update_trail::UpdateTrailError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_update_trail_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<crate::operation::update_trail::UpdateTrailOutput, crate::operation::update_trail::UpdateTrailError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::update_trail::builders::UpdateTrailOutputBuilder::default();
        output = crate::protocol_serde::shape_update_trail::de_update_trail(_response_body, output)
            .map_err(crate::operation::update_trail::UpdateTrailError::unhandled)?;
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}

pub fn ser_update_trail_input(
    input: &crate::operation::update_trail::UpdateTrailInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    let mut object = ::aws_smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::protocol_serde::shape_update_trail_input::ser_update_trail_input(&mut object, input)?;
    object.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}

pub(crate) fn de_update_trail(
    value: &[u8],
    mut builder: crate::operation::update_trail::builders::UpdateTrailOutputBuilder,
) -> Result<crate::operation::update_trail::builders::UpdateTrailOutputBuilder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    let mut tokens_owned = ::aws_smithy_json::deserialize::json_token_iter(crate::protocol_serde::or_empty_doc(value)).peekable();
    let tokens = &mut tokens_owned;
    ::aws_smithy_json::deserialize::token::expect_start_object(tokens.next())?;
    loop {
        match tokens.next().transpose()? {
            Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
            Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                "Name" => {
                    builder = builder.set_name(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "S3BucketName" => {
                    builder = builder.set_s3_bucket_name(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "S3KeyPrefix" => {
                    builder = builder.set_s3_key_prefix(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "SnsTopicName" => {
                    builder = builder.set_sns_topic_name(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "SnsTopicARN" => {
                    builder = builder.set_sns_topic_arn(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "IncludeGlobalServiceEvents" => {
                    builder = builder.set_include_global_service_events(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                }
                "IsMultiRegionTrail" => {
                    builder = builder.set_is_multi_region_trail(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                }
                "TrailARN" => {
                    builder = builder.set_trail_arn(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "LogFileValidationEnabled" => {
                    builder = builder.set_log_file_validation_enabled(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                }
                "CloudWatchLogsLogGroupArn" => {
                    builder = builder.set_cloud_watch_logs_log_group_arn(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "CloudWatchLogsRoleArn" => {
                    builder = builder.set_cloud_watch_logs_role_arn(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "KmsKeyId" => {
                    builder = builder.set_kms_key_id(
                        ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                            .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                            .transpose()?,
                    );
                }
                "IsOrganizationTrail" => {
                    builder = builder.set_is_organization_trail(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                }
                _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
            },
            other => {
                return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                    "expected object key or end object, found: {:?}",
                    other
                )))
            }
        }
    }
    if tokens.next().is_some() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "found more JSON tokens after completing parsing",
        ));
    }
    Ok(builder)
}
