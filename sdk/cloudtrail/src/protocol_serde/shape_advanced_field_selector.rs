// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_advanced_field_selector(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AdvancedFieldSelector,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.field {
        object.key("Field").string(var_1.as_str());
    }
    if let Some(var_2) = &input.equals {
        let mut array_3 = object.key("Equals").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.starts_with {
        let mut array_6 = object.key("StartsWith").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.ends_with {
        let mut array_9 = object.key("EndsWith").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.not_equals {
        let mut array_12 = object.key("NotEquals").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.not_starts_with {
        let mut array_15 = object.key("NotStartsWith").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.not_ends_with {
        let mut array_18 = object.key("NotEndsWith").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    Ok(())
}

pub(crate) fn de_advanced_field_selector<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::AdvancedFieldSelector>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AdvancedFieldSelectorBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Field" => {
                                builder = builder.set_field(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Equals" => {
                                builder = builder.set_equals(
                                    crate::protocol_serde::shape_operator::de_operator(tokens)?,
                                );
                            }
                            "StartsWith" => {
                                builder = builder.set_starts_with(
                                    crate::protocol_serde::shape_operator::de_operator(tokens)?,
                                );
                            }
                            "EndsWith" => {
                                builder = builder.set_ends_with(
                                    crate::protocol_serde::shape_operator::de_operator(tokens)?,
                                );
                            }
                            "NotEquals" => {
                                builder = builder.set_not_equals(
                                    crate::protocol_serde::shape_operator::de_operator(tokens)?,
                                );
                            }
                            "NotStartsWith" => {
                                builder = builder.set_not_starts_with(
                                    crate::protocol_serde::shape_operator::de_operator(tokens)?,
                                );
                            }
                            "NotEndsWith" => {
                                builder = builder.set_not_ends_with(
                                    crate::protocol_serde::shape_operator::de_operator(tokens)?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
