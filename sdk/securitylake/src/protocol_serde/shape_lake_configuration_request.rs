// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_lake_configuration_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::LakeConfigurationRequest,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.encryption_key {
        object.key("encryptionKey").string(var_1.as_str());
    }
    if let Some(var_2) = &input.retention_settings {
        let mut array_3 = object.key("retentionSettings").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_retention_setting::ser_retention_setting(
                    &mut object_5,
                    item_4,
                )?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.tags_map {
        #[allow(unused_mut)]
        let mut object_7 = object.key("tagsMap").start_object();
        for (key_8, value_9) in var_6 {
            {
                object_7.key(key_8.as_str()).string(value_9.as_str());
            }
        }
        object_7.finish();
    }
    if let Some(var_10) = &input.replication_destination_regions {
        let mut array_11 = object.key("replicationDestinationRegions").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.replication_role_arn {
        object.key("replicationRoleArn").string(var_13.as_str());
    }
    Ok(())
}
