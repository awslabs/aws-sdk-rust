// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_subscriber_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_subscriber::CreateSubscriberInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.access_types {
        let mut array_2 = object.key("accessTypes").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.sources {
        let mut array_5 = object.key("sources").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_log_source_resource::ser_log_source_resource(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.subscriber_description {
        object.key("subscriberDescription").string(var_8.as_str());
    }
    if let Some(var_9) = &input.subscriber_identity {
        #[allow(unused_mut)]
        let mut object_10 = object.key("subscriberIdentity").start_object();
        crate::protocol_serde::shape_aws_identity::ser_aws_identity(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.subscriber_name {
        object.key("subscriberName").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        let mut array_13 = object.key("tags").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    Ok(())
}
