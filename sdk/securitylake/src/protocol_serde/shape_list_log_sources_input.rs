// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_list_log_sources_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::list_log_sources::ListLogSourcesInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.input_order {
        let mut array_2 = object.key("inputOrder").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.list_all_dimensions {
        #[allow(unused_mut)]
        let mut object_5 = object.key("listAllDimensions").start_object();
        for (key_6, value_7) in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_8 = object_5.key(key_6.as_str()).start_object();
                for (key_9, value_10) in value_7 {
                    {
                        let mut array_11 = object_8.key(key_9.as_str()).start_array();
                        for item_12 in value_10 {
                            {
                                array_11.value().string(item_12.as_str());
                            }
                        }
                        array_11.finish();
                    }
                }
                object_8.finish();
            }
        }
        object_5.finish();
    }
    if let Some(var_13) = &input.list_single_dimension {
        let mut array_14 = object.key("listSingleDimension").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.list_two_dimensions {
        #[allow(unused_mut)]
        let mut object_17 = object.key("listTwoDimensions").start_object();
        for (key_18, value_19) in var_16 {
            {
                let mut array_20 = object_17.key(key_18.as_str()).start_array();
                for item_21 in value_19 {
                    {
                        array_20.value().string(item_21.as_str());
                    }
                }
                array_20.finish();
            }
        }
        object_17.finish();
    }
    if let Some(var_22) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_22).into()),
        );
    }
    if let Some(var_23) = &input.next_token {
        object.key("nextToken").string(var_23.as_str());
    }
    Ok(())
}
