// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn subscriber_resource_correct_errors(
    mut builder: crate::types::builders::SubscriberResourceBuilder,
) -> crate::types::builders::SubscriberResourceBuilder {
    if builder.subscriber_id.is_none() {
        builder.subscriber_id = Some(Default::default())
    }
    if builder.subscriber_arn.is_none() {
        builder.subscriber_arn = Some(Default::default())
    }
    if builder.subscriber_identity.is_none() {
        builder.subscriber_identity = {
            let builder = crate::types::builders::AwsIdentityBuilder::default();
            crate::serde_util::aws_identity_correct_errors(builder).build().ok()
        }
    }
    if builder.subscriber_name.is_none() {
        builder.subscriber_name = Some(Default::default())
    }
    if builder.sources.is_none() {
        builder.sources = Some(Default::default())
    }
    builder
}

pub(crate) fn aws_identity_correct_errors(mut builder: crate::types::builders::AwsIdentityBuilder) -> crate::types::builders::AwsIdentityBuilder {
    if builder.principal.is_none() {
        builder.principal = Some(Default::default())
    }
    if builder.external_id.is_none() {
        builder.external_id = Some(Default::default())
    }
    builder
}

pub(crate) fn data_lake_auto_enable_new_account_configuration_correct_errors(
    mut builder: crate::types::builders::DataLakeAutoEnableNewAccountConfigurationBuilder,
) -> crate::types::builders::DataLakeAutoEnableNewAccountConfigurationBuilder {
    if builder.region.is_none() {
        builder.region = Some(Default::default())
    }
    if builder.sources.is_none() {
        builder.sources = Some(Default::default())
    }
    builder
}

pub(crate) fn data_lake_resource_correct_errors(
    mut builder: crate::types::builders::DataLakeResourceBuilder,
) -> crate::types::builders::DataLakeResourceBuilder {
    if builder.data_lake_arn.is_none() {
        builder.data_lake_arn = Some(Default::default())
    }
    if builder.region.is_none() {
        builder.region = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
