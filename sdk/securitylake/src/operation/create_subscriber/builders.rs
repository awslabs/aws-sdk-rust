// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_subscriber::_create_subscriber_output::CreateSubscriberOutputBuilder;

pub use crate::operation::create_subscriber::_create_subscriber_input::CreateSubscriberInputBuilder;

/// Fluent builder constructing a request to `CreateSubscriber`.
///
/// <p>Creates a subscription permission for accounts that are already enabled in Amazon Security Lake. You can create a subscriber with access to data in the current Amazon Web Services Region.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateSubscriberFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_subscriber::builders::CreateSubscriberInputBuilder,
}
impl CreateSubscriberFluentBuilder {
    /// Creates a new `CreateSubscriber`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_subscriber::CreateSubscriber,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_subscriber::CreateSubscriberError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_subscriber::CreateSubscriberOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_subscriber::CreateSubscriberError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `sourceTypes`.
    ///
    /// To override the contents of this collection use [`set_source_types`](Self::set_source_types).
    ///
    /// <p>The supported Amazon Web Services from which logs and events are collected. Security Lake supports log and event collection for natively supported Amazon Web Services.</p>
    pub fn source_types(mut self, input: crate::types::SourceType) -> Self {
        self.inner = self.inner.source_types(input);
        self
    }
    /// <p>The supported Amazon Web Services from which logs and events are collected. Security Lake supports log and event collection for natively supported Amazon Web Services.</p>
    pub fn set_source_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SourceType>>,
    ) -> Self {
        self.inner = self.inner.set_source_types(input);
        self
    }
    /// <p>The Amazon Web Services account ID used to access your data.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID used to access your data.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The external ID of the subscriber. This lets the user that is assuming the role assert the circumstances in which they are operating. It also provides a way for the account owner to permit the role to be assumed only under specific circumstances.</p>
    pub fn external_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.external_id(input.into());
        self
    }
    /// <p>The external ID of the subscriber. This lets the user that is assuming the role assert the circumstances in which they are operating. It also provides a way for the account owner to permit the role to be assumed only under specific circumstances.</p>
    pub fn set_external_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_external_id(input);
        self
    }
    /// Appends an item to `accessTypes`.
    ///
    /// To override the contents of this collection use [`set_access_types`](Self::set_access_types).
    ///
    /// <p>The Amazon S3 or Lake Formation access type.</p>
    pub fn access_types(mut self, input: crate::types::AccessType) -> Self {
        self.inner = self.inner.access_types(input);
        self
    }
    /// <p>The Amazon S3 or Lake Formation access type.</p>
    pub fn set_access_types(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AccessType>>,
    ) -> Self {
        self.inner = self.inner.set_access_types(input);
        self
    }
    /// <p>The name of your Security Lake subscriber account.</p>
    pub fn subscriber_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.subscriber_name(input.into());
        self
    }
    /// <p>The name of your Security Lake subscriber account.</p>
    pub fn set_subscriber_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_subscriber_name(input);
        self
    }
    /// <p>The description for your subscriber account in Security Lake. </p>
    pub fn subscriber_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.subscriber_description(input.into());
        self
    }
    /// <p>The description for your subscriber account in Security Lake. </p>
    pub fn set_subscriber_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_subscriber_description(input);
        self
    }
}
