// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListLogSourcesOutput {
    /// <p>Lists the log sources by Regions for enabled Security Lake accounts.</p>
    #[doc(hidden)]
    pub region_source_types_accounts_list: std::option::Option<
        std::vec::Vec<
            std::collections::HashMap<
                std::string::String,
                std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
            >,
        >,
    >,
    /// <p>If nextToken is returned, there are more results available. You can repeat the call using the returned token to retrieve the next page.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListLogSourcesOutput {
    /// <p>Lists the log sources by Regions for enabled Security Lake accounts.</p>
    pub fn region_source_types_accounts_list(
        &self,
    ) -> std::option::Option<
        &[std::collections::HashMap<
            std::string::String,
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >],
    > {
        self.region_source_types_accounts_list.as_deref()
    }
    /// <p>If nextToken is returned, there are more results available. You can repeat the call using the returned token to retrieve the next page.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListLogSourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListLogSourcesOutput {
    /// Creates a new builder-style object to manufacture [`ListLogSourcesOutput`](crate::operation::list_log_sources::ListLogSourcesOutput).
    pub fn builder() -> crate::operation::list_log_sources::builders::ListLogSourcesOutputBuilder {
        crate::operation::list_log_sources::builders::ListLogSourcesOutputBuilder::default()
    }
}

/// A builder for [`ListLogSourcesOutput`](crate::operation::list_log_sources::ListLogSourcesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListLogSourcesOutputBuilder {
    pub(crate) region_source_types_accounts_list: std::option::Option<
        std::vec::Vec<
            std::collections::HashMap<
                std::string::String,
                std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
            >,
        >,
    >,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListLogSourcesOutputBuilder {
    /// Appends an item to `region_source_types_accounts_list`.
    ///
    /// To override the contents of this collection use [`set_region_source_types_accounts_list`](Self::set_region_source_types_accounts_list).
    ///
    /// <p>Lists the log sources by Regions for enabled Security Lake accounts.</p>
    pub fn region_source_types_accounts_list(
        mut self,
        input: std::collections::HashMap<
            std::string::String,
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        let mut v = self.region_source_types_accounts_list.unwrap_or_default();
        v.push(input);
        self.region_source_types_accounts_list = Some(v);
        self
    }
    /// <p>Lists the log sources by Regions for enabled Security Lake accounts.</p>
    pub fn set_region_source_types_accounts_list(
        mut self,
        input: std::option::Option<
            std::vec::Vec<
                std::collections::HashMap<
                    std::string::String,
                    std::collections::HashMap<
                        std::string::String,
                        std::vec::Vec<std::string::String>,
                    >,
                >,
            >,
        >,
    ) -> Self {
        self.region_source_types_accounts_list = input;
        self
    }
    /// <p>If nextToken is returned, there are more results available. You can repeat the call using the returned token to retrieve the next page.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If nextToken is returned, there are more results available. You can repeat the call using the returned token to retrieve the next page.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListLogSourcesOutput`](crate::operation::list_log_sources::ListLogSourcesOutput).
    pub fn build(self) -> crate::operation::list_log_sources::ListLogSourcesOutput {
        crate::operation::list_log_sources::ListLogSourcesOutput {
            region_source_types_accounts_list: self.region_source_types_accounts_list,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
