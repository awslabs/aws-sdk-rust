// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_log_sources::_list_log_sources_output::ListLogSourcesOutputBuilder;

pub use crate::operation::list_log_sources::_list_log_sources_input::ListLogSourcesInputBuilder;

/// Fluent builder constructing a request to `ListLogSources`.
///
/// <p>Retrieves the log sources in the current Amazon Web Services Region. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListLogSourcesFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_log_sources::builders::ListLogSourcesInputBuilder,
}
impl ListLogSourcesFluentBuilder {
    /// Creates a new `ListLogSources`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_log_sources::ListLogSources,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::list_log_sources::ListLogSourcesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_log_sources::ListLogSourcesOutput,
        aws_smithy_http::result::SdkError<crate::operation::list_log_sources::ListLogSourcesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_log_sources::paginator::ListLogSourcesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_log_sources::paginator::ListLogSourcesPaginator {
        crate::operation::list_log_sources::paginator::ListLogSourcesPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// Appends an item to `inputOrder`.
    ///
    /// To override the contents of this collection use [`set_input_order`](Self::set_input_order).
    ///
    /// <p>Lists the log sources in input order, namely Region, source type, and member account.</p>
    pub fn input_order(mut self, input: crate::types::Dimension) -> Self {
        self.inner = self.inner.input_order(input);
        self
    }
    /// <p>Lists the log sources in input order, namely Region, source type, and member account.</p>
    pub fn set_input_order(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Dimension>>,
    ) -> Self {
        self.inner = self.inner.set_input_order(input);
        self
    }
    /// Adds a key-value pair to `listAllDimensions`.
    ///
    /// To override the contents of this collection use [`set_list_all_dimensions`](Self::set_list_all_dimensions).
    ///
    /// <p>List the view of log sources for enabled Amazon Security Lake accounts for specific Amazon Web Services sources from specific accounts and specific Regions.</p>
    pub fn list_all_dimensions(
        mut self,
        k: impl Into<std::string::String>,
        v: std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.list_all_dimensions(k.into(), v);
        self
    }
    /// <p>List the view of log sources for enabled Amazon Security Lake accounts for specific Amazon Web Services sources from specific accounts and specific Regions.</p>
    pub fn set_list_all_dimensions(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
            >,
        >,
    ) -> Self {
        self.inner = self.inner.set_list_all_dimensions(input);
        self
    }
    /// Adds a key-value pair to `listTwoDimensions`.
    ///
    /// To override the contents of this collection use [`set_list_two_dimensions`](Self::set_list_two_dimensions).
    ///
    /// <p>Lists the view of log sources for enabled Security Lake accounts for specific Amazon Web Services sources from specific accounts or specific Regions.</p>
    pub fn list_two_dimensions(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        self.inner = self.inner.list_two_dimensions(k.into(), v);
        self
    }
    /// <p>Lists the view of log sources for enabled Security Lake accounts for specific Amazon Web Services sources from specific accounts or specific Regions.</p>
    pub fn set_list_two_dimensions(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.inner = self.inner.set_list_two_dimensions(input);
        self
    }
    /// Appends an item to `listSingleDimension`.
    ///
    /// To override the contents of this collection use [`set_list_single_dimension`](Self::set_list_single_dimension).
    ///
    /// <p>List the view of log sources for enabled Security Lake accounts for all Amazon Web Services sources from specific accounts or specific Regions.</p>
    pub fn list_single_dimension(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.list_single_dimension(input.into());
        self
    }
    /// <p>List the view of log sources for enabled Security Lake accounts for all Amazon Web Services sources from specific accounts or specific Regions.</p>
    pub fn set_list_single_dimension(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_list_single_dimension(input);
        self
    }
    /// <p>The maximum number of accounts for which the log sources are displayed.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of accounts for which the log sources are displayed.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>If nextToken is returned, there are more results available. You can repeat the call using the returned token to retrieve the next page.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>If nextToken is returned, there are more results available. You can repeat the call using the returned token to retrieve the next page.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
