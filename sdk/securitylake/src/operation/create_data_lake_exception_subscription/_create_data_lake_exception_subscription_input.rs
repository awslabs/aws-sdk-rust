// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDataLakeExceptionSubscriptionInput {
    /// <p>The subscription protocol to which exception notifications are posted.</p>
    pub subscription_protocol: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account where you want to receive exception notifications.</p>
    pub notification_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>The expiration period and time-to-live (TTL).</p>
    pub exception_time_to_live: ::std::option::Option<i64>,
}
impl CreateDataLakeExceptionSubscriptionInput {
    /// <p>The subscription protocol to which exception notifications are posted.</p>
    pub fn subscription_protocol(&self) -> ::std::option::Option<&str> {
        self.subscription_protocol.as_deref()
    }
    /// <p>The Amazon Web Services account where you want to receive exception notifications.</p>
    pub fn notification_endpoint(&self) -> ::std::option::Option<&str> {
        self.notification_endpoint.as_deref()
    }
    /// <p>The expiration period and time-to-live (TTL).</p>
    pub fn exception_time_to_live(&self) -> ::std::option::Option<i64> {
        self.exception_time_to_live
    }
}
impl CreateDataLakeExceptionSubscriptionInput {
    /// Creates a new builder-style object to manufacture [`CreateDataLakeExceptionSubscriptionInput`](crate::operation::create_data_lake_exception_subscription::CreateDataLakeExceptionSubscriptionInput).
    pub fn builder() -> crate::operation::create_data_lake_exception_subscription::builders::CreateDataLakeExceptionSubscriptionInputBuilder {
        crate::operation::create_data_lake_exception_subscription::builders::CreateDataLakeExceptionSubscriptionInputBuilder::default()
    }
}

/// A builder for [`CreateDataLakeExceptionSubscriptionInput`](crate::operation::create_data_lake_exception_subscription::CreateDataLakeExceptionSubscriptionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDataLakeExceptionSubscriptionInputBuilder {
    pub(crate) subscription_protocol: ::std::option::Option<::std::string::String>,
    pub(crate) notification_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) exception_time_to_live: ::std::option::Option<i64>,
}
impl CreateDataLakeExceptionSubscriptionInputBuilder {
    /// <p>The subscription protocol to which exception notifications are posted.</p>
    /// This field is required.
    pub fn subscription_protocol(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subscription_protocol = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subscription protocol to which exception notifications are posted.</p>
    pub fn set_subscription_protocol(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subscription_protocol = input;
        self
    }
    /// <p>The subscription protocol to which exception notifications are posted.</p>
    pub fn get_subscription_protocol(&self) -> &::std::option::Option<::std::string::String> {
        &self.subscription_protocol
    }
    /// <p>The Amazon Web Services account where you want to receive exception notifications.</p>
    /// This field is required.
    pub fn notification_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.notification_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account where you want to receive exception notifications.</p>
    pub fn set_notification_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.notification_endpoint = input;
        self
    }
    /// <p>The Amazon Web Services account where you want to receive exception notifications.</p>
    pub fn get_notification_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.notification_endpoint
    }
    /// <p>The expiration period and time-to-live (TTL).</p>
    pub fn exception_time_to_live(mut self, input: i64) -> Self {
        self.exception_time_to_live = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expiration period and time-to-live (TTL).</p>
    pub fn set_exception_time_to_live(mut self, input: ::std::option::Option<i64>) -> Self {
        self.exception_time_to_live = input;
        self
    }
    /// <p>The expiration period and time-to-live (TTL).</p>
    pub fn get_exception_time_to_live(&self) -> &::std::option::Option<i64> {
        &self.exception_time_to_live
    }
    /// Consumes the builder and constructs a [`CreateDataLakeExceptionSubscriptionInput`](crate::operation::create_data_lake_exception_subscription::CreateDataLakeExceptionSubscriptionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_data_lake_exception_subscription::CreateDataLakeExceptionSubscriptionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_data_lake_exception_subscription::CreateDataLakeExceptionSubscriptionInput {
                subscription_protocol: self.subscription_protocol,
                notification_endpoint: self.notification_endpoint,
                exception_time_to_live: self.exception_time_to_live,
            },
        )
    }
}
