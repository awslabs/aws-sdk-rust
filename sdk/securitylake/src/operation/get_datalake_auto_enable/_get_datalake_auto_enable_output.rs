// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDatalakeAutoEnableOutput {
    /// <p>The configuration for new accounts.</p>
    #[doc(hidden)]
    pub auto_enable_new_accounts:
        ::std::option::Option<::std::vec::Vec<crate::types::AutoEnableNewRegionConfiguration>>,
    _request_id: Option<String>,
}
impl GetDatalakeAutoEnableOutput {
    /// <p>The configuration for new accounts.</p>
    pub fn auto_enable_new_accounts(
        &self,
    ) -> ::std::option::Option<&[crate::types::AutoEnableNewRegionConfiguration]> {
        self.auto_enable_new_accounts.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for GetDatalakeAutoEnableOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDatalakeAutoEnableOutput {
    /// Creates a new builder-style object to manufacture [`GetDatalakeAutoEnableOutput`](crate::operation::get_datalake_auto_enable::GetDatalakeAutoEnableOutput).
    pub fn builder(
    ) -> crate::operation::get_datalake_auto_enable::builders::GetDatalakeAutoEnableOutputBuilder
    {
        crate::operation::get_datalake_auto_enable::builders::GetDatalakeAutoEnableOutputBuilder::default()
    }
}

/// A builder for [`GetDatalakeAutoEnableOutput`](crate::operation::get_datalake_auto_enable::GetDatalakeAutoEnableOutput).
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
)]
pub struct GetDatalakeAutoEnableOutputBuilder {
    pub(crate) auto_enable_new_accounts:
        ::std::option::Option<::std::vec::Vec<crate::types::AutoEnableNewRegionConfiguration>>,
    _request_id: Option<String>,
}
impl GetDatalakeAutoEnableOutputBuilder {
    /// Appends an item to `auto_enable_new_accounts`.
    ///
    /// To override the contents of this collection use [`set_auto_enable_new_accounts`](Self::set_auto_enable_new_accounts).
    ///
    /// <p>The configuration for new accounts.</p>
    pub fn auto_enable_new_accounts(
        mut self,
        input: crate::types::AutoEnableNewRegionConfiguration,
    ) -> Self {
        let mut v = self.auto_enable_new_accounts.unwrap_or_default();
        v.push(input);
        self.auto_enable_new_accounts = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configuration for new accounts.</p>
    pub fn set_auto_enable_new_accounts(
        mut self,
        input: ::std::option::Option<
            ::std::vec::Vec<crate::types::AutoEnableNewRegionConfiguration>,
        >,
    ) -> Self {
        self.auto_enable_new_accounts = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDatalakeAutoEnableOutput`](crate::operation::get_datalake_auto_enable::GetDatalakeAutoEnableOutput).
    pub fn build(self) -> crate::operation::get_datalake_auto_enable::GetDatalakeAutoEnableOutput {
        crate::operation::get_datalake_auto_enable::GetDatalakeAutoEnableOutput {
            auto_enable_new_accounts: self.auto_enable_new_accounts,
            _request_id: self._request_id,
        }
    }
}
