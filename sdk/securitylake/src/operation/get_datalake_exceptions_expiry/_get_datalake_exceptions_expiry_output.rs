// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDatalakeExceptionsExpiryOutput {
    /// <p>The expiration period and time-to-live (TTL).</p>
    #[doc(hidden)]
    pub exception_message_expiry: ::std::option::Option<i64>,
    _request_id: Option<String>,
}
impl GetDatalakeExceptionsExpiryOutput {
    /// <p>The expiration period and time-to-live (TTL).</p>
    pub fn exception_message_expiry(&self) -> ::std::option::Option<i64> {
        self.exception_message_expiry
    }
}
impl ::aws_http::request_id::RequestId for GetDatalakeExceptionsExpiryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDatalakeExceptionsExpiryOutput {
    /// Creates a new builder-style object to manufacture [`GetDatalakeExceptionsExpiryOutput`](crate::operation::get_datalake_exceptions_expiry::GetDatalakeExceptionsExpiryOutput).
    pub fn builder() -> crate::operation::get_datalake_exceptions_expiry::builders::GetDatalakeExceptionsExpiryOutputBuilder{
        crate::operation::get_datalake_exceptions_expiry::builders::GetDatalakeExceptionsExpiryOutputBuilder::default()
    }
}

/// A builder for [`GetDatalakeExceptionsExpiryOutput`](crate::operation::get_datalake_exceptions_expiry::GetDatalakeExceptionsExpiryOutput).
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
)]
pub struct GetDatalakeExceptionsExpiryOutputBuilder {
    pub(crate) exception_message_expiry: ::std::option::Option<i64>,
    _request_id: Option<String>,
}
impl GetDatalakeExceptionsExpiryOutputBuilder {
    /// <p>The expiration period and time-to-live (TTL).</p>
    pub fn exception_message_expiry(mut self, input: i64) -> Self {
        self.exception_message_expiry = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expiration period and time-to-live (TTL).</p>
    pub fn set_exception_message_expiry(mut self, input: ::std::option::Option<i64>) -> Self {
        self.exception_message_expiry = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDatalakeExceptionsExpiryOutput`](crate::operation::get_datalake_exceptions_expiry::GetDatalakeExceptionsExpiryOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_datalake_exceptions_expiry::GetDatalakeExceptionsExpiryOutput {
        crate::operation::get_datalake_exceptions_expiry::GetDatalakeExceptionsExpiryOutput {
            exception_message_expiry: self.exception_message_expiry,
            _request_id: self._request_id,
        }
    }
}
