// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateSubscriberInput {
    /// <p>A value created by Security Lake that uniquely identifies your subscription.</p>
    pub subscriber_id: ::std::option::Option<::std::string::String>,
    /// <p>The AWS identity used to access your data.</p>
    pub subscriber_identity: ::std::option::Option<crate::types::AwsIdentity>,
    /// <p>The name of the Security Lake account subscriber.</p>
    pub subscriber_name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the Security Lake account subscriber.</p>
    pub subscriber_description: ::std::option::Option<::std::string::String>,
    /// <p>The supported Amazon Web Services from which logs and events are collected. For the list of supported Amazon Web Services, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html">Amazon Security Lake User Guide</a>.</p>
    pub sources: ::std::option::Option<::std::vec::Vec<crate::types::LogSourceResource>>,
}
impl UpdateSubscriberInput {
    /// <p>A value created by Security Lake that uniquely identifies your subscription.</p>
    pub fn subscriber_id(&self) -> ::std::option::Option<&str> {
        self.subscriber_id.as_deref()
    }
    /// <p>The AWS identity used to access your data.</p>
    pub fn subscriber_identity(&self) -> ::std::option::Option<&crate::types::AwsIdentity> {
        self.subscriber_identity.as_ref()
    }
    /// <p>The name of the Security Lake account subscriber.</p>
    pub fn subscriber_name(&self) -> ::std::option::Option<&str> {
        self.subscriber_name.as_deref()
    }
    /// <p>The description of the Security Lake account subscriber.</p>
    pub fn subscriber_description(&self) -> ::std::option::Option<&str> {
        self.subscriber_description.as_deref()
    }
    /// <p>The supported Amazon Web Services from which logs and events are collected. For the list of supported Amazon Web Services, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html">Amazon Security Lake User Guide</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sources.is_none()`.
    pub fn sources(&self) -> &[crate::types::LogSourceResource] {
        self.sources.as_deref().unwrap_or_default()
    }
}
impl UpdateSubscriberInput {
    /// Creates a new builder-style object to manufacture [`UpdateSubscriberInput`](crate::operation::update_subscriber::UpdateSubscriberInput).
    pub fn builder() -> crate::operation::update_subscriber::builders::UpdateSubscriberInputBuilder {
        crate::operation::update_subscriber::builders::UpdateSubscriberInputBuilder::default()
    }
}

/// A builder for [`UpdateSubscriberInput`](crate::operation::update_subscriber::UpdateSubscriberInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateSubscriberInputBuilder {
    pub(crate) subscriber_id: ::std::option::Option<::std::string::String>,
    pub(crate) subscriber_identity: ::std::option::Option<crate::types::AwsIdentity>,
    pub(crate) subscriber_name: ::std::option::Option<::std::string::String>,
    pub(crate) subscriber_description: ::std::option::Option<::std::string::String>,
    pub(crate) sources: ::std::option::Option<::std::vec::Vec<crate::types::LogSourceResource>>,
}
impl UpdateSubscriberInputBuilder {
    /// <p>A value created by Security Lake that uniquely identifies your subscription.</p>
    /// This field is required.
    pub fn subscriber_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subscriber_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A value created by Security Lake that uniquely identifies your subscription.</p>
    pub fn set_subscriber_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subscriber_id = input;
        self
    }
    /// <p>A value created by Security Lake that uniquely identifies your subscription.</p>
    pub fn get_subscriber_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.subscriber_id
    }
    /// <p>The AWS identity used to access your data.</p>
    pub fn subscriber_identity(mut self, input: crate::types::AwsIdentity) -> Self {
        self.subscriber_identity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The AWS identity used to access your data.</p>
    pub fn set_subscriber_identity(mut self, input: ::std::option::Option<crate::types::AwsIdentity>) -> Self {
        self.subscriber_identity = input;
        self
    }
    /// <p>The AWS identity used to access your data.</p>
    pub fn get_subscriber_identity(&self) -> &::std::option::Option<crate::types::AwsIdentity> {
        &self.subscriber_identity
    }
    /// <p>The name of the Security Lake account subscriber.</p>
    pub fn subscriber_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subscriber_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Security Lake account subscriber.</p>
    pub fn set_subscriber_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subscriber_name = input;
        self
    }
    /// <p>The name of the Security Lake account subscriber.</p>
    pub fn get_subscriber_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.subscriber_name
    }
    /// <p>The description of the Security Lake account subscriber.</p>
    pub fn subscriber_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subscriber_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the Security Lake account subscriber.</p>
    pub fn set_subscriber_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subscriber_description = input;
        self
    }
    /// <p>The description of the Security Lake account subscriber.</p>
    pub fn get_subscriber_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.subscriber_description
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>The supported Amazon Web Services from which logs and events are collected. For the list of supported Amazon Web Services, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html">Amazon Security Lake User Guide</a>.</p>
    pub fn sources(mut self, input: crate::types::LogSourceResource) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The supported Amazon Web Services from which logs and events are collected. For the list of supported Amazon Web Services, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html">Amazon Security Lake User Guide</a>.</p>
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LogSourceResource>>) -> Self {
        self.sources = input;
        self
    }
    /// <p>The supported Amazon Web Services from which logs and events are collected. For the list of supported Amazon Web Services, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html">Amazon Security Lake User Guide</a>.</p>
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LogSourceResource>> {
        &self.sources
    }
    /// Consumes the builder and constructs a [`UpdateSubscriberInput`](crate::operation::update_subscriber::UpdateSubscriberInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_subscriber::UpdateSubscriberInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_subscriber::UpdateSubscriberInput {
            subscriber_id: self.subscriber_id,
            subscriber_identity: self.subscriber_identity,
            subscriber_name: self.subscriber_name,
            subscriber_description: self.subscriber_description,
            sources: self.sources,
        })
    }
}
