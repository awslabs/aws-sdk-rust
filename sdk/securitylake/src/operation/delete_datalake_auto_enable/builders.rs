// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_datalake_auto_enable::_delete_datalake_auto_enable_output::DeleteDatalakeAutoEnableOutputBuilder;

pub use crate::operation::delete_datalake_auto_enable::_delete_datalake_auto_enable_input::DeleteDatalakeAutoEnableInputBuilder;

/// Fluent builder constructing a request to `DeleteDatalakeAutoEnable`.
///
/// <p> <code>DeleteDatalakeAutoEnable</code> removes automatic enablement of configuration settings for new member accounts (but keeps settings for the delegated administrator) from Amazon Security Lake. You must run this API using credentials of the delegated administrator. When you run this API, new member accounts that are added after the organization enables Security Lake won't contribute to the data lake.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteDatalakeAutoEnableFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
                    inner: crate::operation::delete_datalake_auto_enable::builders::DeleteDatalakeAutoEnableInputBuilder,
}
impl DeleteDatalakeAutoEnableFluentBuilder {
    /// Creates a new `DeleteDatalakeAutoEnable`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
        }
    }
    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
    pub async fn customize_middleware(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_datalake_auto_enable::DeleteDatalakeAutoEnable,
            ::aws_http::retry::AwsResponseRetryClassifier,
        >,
        ::aws_smithy_http::result::SdkError<
            crate::operation::delete_datalake_auto_enable::DeleteDatalakeAutoEnableError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        ::std::result::Result::Ok(crate::client::customize::CustomizableOperation {
            handle,
            operation,
        })
    }

    // This function will go away in the near future. Do not rely on it.
    #[doc(hidden)]
    pub async fn send_middleware(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_datalake_auto_enable::DeleteDatalakeAutoEnableOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::delete_datalake_auto_enable::DeleteDatalakeAutoEnableError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(::aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_datalake_auto_enable::DeleteDatalakeAutoEnableOutput,
        ::aws_smithy_http::result::SdkError<
            crate::operation::delete_datalake_auto_enable::DeleteDatalakeAutoEnableError,
        >,
    > {
        self.send_middleware().await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> ::std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_datalake_auto_enable::DeleteDatalakeAutoEnable,
            ::aws_http::retry::AwsResponseRetryClassifier,
        >,
        ::aws_smithy_http::result::SdkError<
            crate::operation::delete_datalake_auto_enable::DeleteDatalakeAutoEnableError,
        >,
    > {
        self.customize_middleware().await
    }
    /// Appends an item to `removeFromConfigurationForNewAccounts`.
    ///
    /// To override the contents of this collection use [`set_remove_from_configuration_for_new_accounts`](Self::set_remove_from_configuration_for_new_accounts).
    ///
    /// <p>Remove automatic enablement of configuration settings for new member accounts in Security Lake. </p>
    pub fn remove_from_configuration_for_new_accounts(
        mut self,
        input: crate::types::AutoEnableNewRegionConfiguration,
    ) -> Self {
        self.inner = self.inner.remove_from_configuration_for_new_accounts(input);
        self
    }
    /// <p>Remove automatic enablement of configuration settings for new member accounts in Security Lake. </p>
    pub fn set_remove_from_configuration_for_new_accounts(
        mut self,
        input: ::std::option::Option<
            ::std::vec::Vec<crate::types::AutoEnableNewRegionConfiguration>,
        >,
    ) -> Self {
        self.inner = self
            .inner
            .set_remove_from_configuration_for_new_accounts(input);
        self
    }
}
