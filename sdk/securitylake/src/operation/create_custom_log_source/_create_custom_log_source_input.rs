// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateCustomLogSourceInput {
    /// <p>Specify the name for a third-party custom source. This must be a Regionally unique value.</p>
    pub source_name: ::std::option::Option<::std::string::String>,
    /// <p>Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.</p>
    pub source_version: ::std::option::Option<::std::string::String>,
    /// <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. The supported event classes are:</p>
    /// <ul>
    /// <li> <p> <code>ACCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FILE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_EXTENSION</code> </p> </li>
    /// <li> <p> <code>MEMORY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>MODULE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>PROCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_KEY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_VALUE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RESOURCE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SCHEDULED_JOB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SECURITY_FINDING</code> </p> </li>
    /// <li> <p> <code>ACCOUNT_CHANGE</code> </p> </li>
    /// <li> <p> <code>AUTHENTICATION</code> </p> </li>
    /// <li> <p> <code>AUTHORIZATION</code> </p> </li>
    /// <li> <p> <code>ENTITY_MANAGEMENT_AUDIT</code> </p> </li>
    /// <li> <p> <code>DHCP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>NETWORK_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>DNS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>HTTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RDP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SMB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SSH_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CONFIG_STATE</code> </p> </li>
    /// <li> <p> <code>INVENTORY_INFO</code> </p> </li>
    /// <li> <p> <code>EMAIL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>API_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CLOUD_API</code> </p> </li>
    /// </ul>
    pub event_classes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The configuration for the third-party custom source.</p>
    pub configuration: ::std::option::Option<crate::types::CustomLogSourceConfiguration>,
}
impl CreateCustomLogSourceInput {
    /// <p>Specify the name for a third-party custom source. This must be a Regionally unique value.</p>
    pub fn source_name(&self) -> ::std::option::Option<&str> {
        self.source_name.as_deref()
    }
    /// <p>Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.</p>
    pub fn source_version(&self) -> ::std::option::Option<&str> {
        self.source_version.as_deref()
    }
    /// <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. The supported event classes are:</p>
    /// <ul>
    /// <li> <p> <code>ACCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FILE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_EXTENSION</code> </p> </li>
    /// <li> <p> <code>MEMORY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>MODULE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>PROCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_KEY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_VALUE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RESOURCE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SCHEDULED_JOB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SECURITY_FINDING</code> </p> </li>
    /// <li> <p> <code>ACCOUNT_CHANGE</code> </p> </li>
    /// <li> <p> <code>AUTHENTICATION</code> </p> </li>
    /// <li> <p> <code>AUTHORIZATION</code> </p> </li>
    /// <li> <p> <code>ENTITY_MANAGEMENT_AUDIT</code> </p> </li>
    /// <li> <p> <code>DHCP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>NETWORK_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>DNS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>HTTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RDP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SMB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SSH_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CONFIG_STATE</code> </p> </li>
    /// <li> <p> <code>INVENTORY_INFO</code> </p> </li>
    /// <li> <p> <code>EMAIL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>API_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CLOUD_API</code> </p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_classes.is_none()`.
    pub fn event_classes(&self) -> &[::std::string::String] {
        self.event_classes.as_deref().unwrap_or_default()
    }
    /// <p>The configuration for the third-party custom source.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::CustomLogSourceConfiguration> {
        self.configuration.as_ref()
    }
}
impl CreateCustomLogSourceInput {
    /// Creates a new builder-style object to manufacture [`CreateCustomLogSourceInput`](crate::operation::create_custom_log_source::CreateCustomLogSourceInput).
    pub fn builder() -> crate::operation::create_custom_log_source::builders::CreateCustomLogSourceInputBuilder {
        crate::operation::create_custom_log_source::builders::CreateCustomLogSourceInputBuilder::default()
    }
}

/// A builder for [`CreateCustomLogSourceInput`](crate::operation::create_custom_log_source::CreateCustomLogSourceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateCustomLogSourceInputBuilder {
    pub(crate) source_name: ::std::option::Option<::std::string::String>,
    pub(crate) source_version: ::std::option::Option<::std::string::String>,
    pub(crate) event_classes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) configuration: ::std::option::Option<crate::types::CustomLogSourceConfiguration>,
}
impl CreateCustomLogSourceInputBuilder {
    /// <p>Specify the name for a third-party custom source. This must be a Regionally unique value.</p>
    /// This field is required.
    pub fn source_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the name for a third-party custom source. This must be a Regionally unique value.</p>
    pub fn set_source_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_name = input;
        self
    }
    /// <p>Specify the name for a third-party custom source. This must be a Regionally unique value.</p>
    pub fn get_source_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_name
    }
    /// <p>Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.</p>
    pub fn source_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.</p>
    pub fn set_source_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_version = input;
        self
    }
    /// <p>Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.</p>
    pub fn get_source_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_version
    }
    /// Appends an item to `event_classes`.
    ///
    /// To override the contents of this collection use [`set_event_classes`](Self::set_event_classes).
    ///
    /// <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. The supported event classes are:</p>
    /// <ul>
    /// <li> <p> <code>ACCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FILE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_EXTENSION</code> </p> </li>
    /// <li> <p> <code>MEMORY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>MODULE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>PROCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_KEY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_VALUE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RESOURCE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SCHEDULED_JOB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SECURITY_FINDING</code> </p> </li>
    /// <li> <p> <code>ACCOUNT_CHANGE</code> </p> </li>
    /// <li> <p> <code>AUTHENTICATION</code> </p> </li>
    /// <li> <p> <code>AUTHORIZATION</code> </p> </li>
    /// <li> <p> <code>ENTITY_MANAGEMENT_AUDIT</code> </p> </li>
    /// <li> <p> <code>DHCP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>NETWORK_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>DNS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>HTTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RDP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SMB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SSH_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CONFIG_STATE</code> </p> </li>
    /// <li> <p> <code>INVENTORY_INFO</code> </p> </li>
    /// <li> <p> <code>EMAIL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>API_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CLOUD_API</code> </p> </li>
    /// </ul>
    pub fn event_classes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.event_classes.unwrap_or_default();
        v.push(input.into());
        self.event_classes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. The supported event classes are:</p>
    /// <ul>
    /// <li> <p> <code>ACCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FILE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_EXTENSION</code> </p> </li>
    /// <li> <p> <code>MEMORY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>MODULE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>PROCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_KEY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_VALUE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RESOURCE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SCHEDULED_JOB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SECURITY_FINDING</code> </p> </li>
    /// <li> <p> <code>ACCOUNT_CHANGE</code> </p> </li>
    /// <li> <p> <code>AUTHENTICATION</code> </p> </li>
    /// <li> <p> <code>AUTHORIZATION</code> </p> </li>
    /// <li> <p> <code>ENTITY_MANAGEMENT_AUDIT</code> </p> </li>
    /// <li> <p> <code>DHCP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>NETWORK_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>DNS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>HTTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RDP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SMB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SSH_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CONFIG_STATE</code> </p> </li>
    /// <li> <p> <code>INVENTORY_INFO</code> </p> </li>
    /// <li> <p> <code>EMAIL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>API_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CLOUD_API</code> </p> </li>
    /// </ul>
    pub fn set_event_classes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.event_classes = input;
        self
    }
    /// <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. The supported event classes are:</p>
    /// <ul>
    /// <li> <p> <code>ACCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FILE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_EXTENSION</code> </p> </li>
    /// <li> <p> <code>MEMORY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>MODULE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>PROCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_KEY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_VALUE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RESOURCE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SCHEDULED_JOB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SECURITY_FINDING</code> </p> </li>
    /// <li> <p> <code>ACCOUNT_CHANGE</code> </p> </li>
    /// <li> <p> <code>AUTHENTICATION</code> </p> </li>
    /// <li> <p> <code>AUTHORIZATION</code> </p> </li>
    /// <li> <p> <code>ENTITY_MANAGEMENT_AUDIT</code> </p> </li>
    /// <li> <p> <code>DHCP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>NETWORK_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>DNS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>HTTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RDP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SMB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SSH_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CONFIG_STATE</code> </p> </li>
    /// <li> <p> <code>INVENTORY_INFO</code> </p> </li>
    /// <li> <p> <code>EMAIL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>API_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CLOUD_API</code> </p> </li>
    /// </ul>
    pub fn get_event_classes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.event_classes
    }
    /// <p>The configuration for the third-party custom source.</p>
    pub fn configuration(mut self, input: crate::types::CustomLogSourceConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration for the third-party custom source.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::CustomLogSourceConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration for the third-party custom source.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::CustomLogSourceConfiguration> {
        &self.configuration
    }
    /// Consumes the builder and constructs a [`CreateCustomLogSourceInput`](crate::operation::create_custom_log_source::CreateCustomLogSourceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_custom_log_source::CreateCustomLogSourceInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_custom_log_source::CreateCustomLogSourceInput {
            source_name: self.source_name,
            source_version: self.source_version,
            event_classes: self.event_classes,
            configuration: self.configuration,
        })
    }
}
