// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCustomLogSourceOutput {
    /// <p>The location of the partition in the Amazon S3 bucket for Security Lake.</p>
    #[doc(hidden)]
    pub custom_data_location: std::option::Option<std::string::String>,
    /// <p>The name of the Glue crawler.</p>
    #[doc(hidden)]
    pub glue_crawler_name: std::option::Option<std::string::String>,
    /// <p>The table name of the Glue crawler.</p>
    #[doc(hidden)]
    pub glue_table_name: std::option::Option<std::string::String>,
    /// <p>The Glue database where results are written, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>
    #[doc(hidden)]
    pub glue_database_name: std::option::Option<std::string::String>,
    /// <p>The ARN of the IAM role to be used by the entity putting logs into your custom source partition. Security Lake will apply the correct access policies to this role, but you must first manually create the trust policy for this role. The IAM role name must start with the text 'Security Lake'. The IAM role must trust the <code>logProviderAccountId</code> to assume the role.</p>
    #[doc(hidden)]
    pub log_provider_access_role_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateCustomLogSourceOutput {
    /// <p>The location of the partition in the Amazon S3 bucket for Security Lake.</p>
    pub fn custom_data_location(&self) -> std::option::Option<&str> {
        self.custom_data_location.as_deref()
    }
    /// <p>The name of the Glue crawler.</p>
    pub fn glue_crawler_name(&self) -> std::option::Option<&str> {
        self.glue_crawler_name.as_deref()
    }
    /// <p>The table name of the Glue crawler.</p>
    pub fn glue_table_name(&self) -> std::option::Option<&str> {
        self.glue_table_name.as_deref()
    }
    /// <p>The Glue database where results are written, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>
    pub fn glue_database_name(&self) -> std::option::Option<&str> {
        self.glue_database_name.as_deref()
    }
    /// <p>The ARN of the IAM role to be used by the entity putting logs into your custom source partition. Security Lake will apply the correct access policies to this role, but you must first manually create the trust policy for this role. The IAM role name must start with the text 'Security Lake'. The IAM role must trust the <code>logProviderAccountId</code> to assume the role.</p>
    pub fn log_provider_access_role_arn(&self) -> std::option::Option<&str> {
        self.log_provider_access_role_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateCustomLogSourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateCustomLogSourceOutput {
    /// Creates a new builder-style object to manufacture [`CreateCustomLogSourceOutput`](crate::operation::create_custom_log_source::CreateCustomLogSourceOutput).
    pub fn builder(
    ) -> crate::operation::create_custom_log_source::builders::CreateCustomLogSourceOutputBuilder
    {
        crate::operation::create_custom_log_source::builders::CreateCustomLogSourceOutputBuilder::default()
    }
}

/// A builder for [`CreateCustomLogSourceOutput`](crate::operation::create_custom_log_source::CreateCustomLogSourceOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateCustomLogSourceOutputBuilder {
    pub(crate) custom_data_location: std::option::Option<std::string::String>,
    pub(crate) glue_crawler_name: std::option::Option<std::string::String>,
    pub(crate) glue_table_name: std::option::Option<std::string::String>,
    pub(crate) glue_database_name: std::option::Option<std::string::String>,
    pub(crate) log_provider_access_role_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateCustomLogSourceOutputBuilder {
    /// <p>The location of the partition in the Amazon S3 bucket for Security Lake.</p>
    pub fn custom_data_location(mut self, input: impl Into<std::string::String>) -> Self {
        self.custom_data_location = Some(input.into());
        self
    }
    /// <p>The location of the partition in the Amazon S3 bucket for Security Lake.</p>
    pub fn set_custom_data_location(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.custom_data_location = input;
        self
    }
    /// <p>The name of the Glue crawler.</p>
    pub fn glue_crawler_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.glue_crawler_name = Some(input.into());
        self
    }
    /// <p>The name of the Glue crawler.</p>
    pub fn set_glue_crawler_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.glue_crawler_name = input;
        self
    }
    /// <p>The table name of the Glue crawler.</p>
    pub fn glue_table_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.glue_table_name = Some(input.into());
        self
    }
    /// <p>The table name of the Glue crawler.</p>
    pub fn set_glue_table_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.glue_table_name = input;
        self
    }
    /// <p>The Glue database where results are written, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>
    pub fn glue_database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.glue_database_name = Some(input.into());
        self
    }
    /// <p>The Glue database where results are written, such as: <code>arn:aws:daylight:us-east-1::database/sometable/*</code>.</p>
    pub fn set_glue_database_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.glue_database_name = input;
        self
    }
    /// <p>The ARN of the IAM role to be used by the entity putting logs into your custom source partition. Security Lake will apply the correct access policies to this role, but you must first manually create the trust policy for this role. The IAM role name must start with the text 'Security Lake'. The IAM role must trust the <code>logProviderAccountId</code> to assume the role.</p>
    pub fn log_provider_access_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_provider_access_role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the IAM role to be used by the entity putting logs into your custom source partition. Security Lake will apply the correct access policies to this role, but you must first manually create the trust policy for this role. The IAM role name must start with the text 'Security Lake'. The IAM role must trust the <code>logProviderAccountId</code> to assume the role.</p>
    pub fn set_log_provider_access_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.log_provider_access_role_arn = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateCustomLogSourceOutput`](crate::operation::create_custom_log_source::CreateCustomLogSourceOutput).
    pub fn build(self) -> crate::operation::create_custom_log_source::CreateCustomLogSourceOutput {
        crate::operation::create_custom_log_source::CreateCustomLogSourceOutput {
            custom_data_location: self.custom_data_location,
            glue_crawler_name: self.glue_crawler_name,
            glue_table_name: self.glue_table_name,
            glue_database_name: self.glue_database_name,
            log_provider_access_role_arn: self.log_provider_access_role_arn,
            _request_id: self._request_id,
        }
    }
}
