// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAwsLogSourceOutput {
    /// <p>Deletion of the Amazon Web Services sources is in progress.</p>
    #[doc(hidden)]
    pub processing: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Deletion of the Amazon Web Services sources failed as the account is not a part of the organization.</p>
    #[doc(hidden)]
    pub failed: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl DeleteAwsLogSourceOutput {
    /// <p>Deletion of the Amazon Web Services sources is in progress.</p>
    pub fn processing(&self) -> std::option::Option<&[std::string::String]> {
        self.processing.as_deref()
    }
    /// <p>Deletion of the Amazon Web Services sources failed as the account is not a part of the organization.</p>
    pub fn failed(&self) -> std::option::Option<&[std::string::String]> {
        self.failed.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteAwsLogSourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteAwsLogSourceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAwsLogSourceOutput`](crate::operation::delete_aws_log_source::DeleteAwsLogSourceOutput).
    pub fn builder(
    ) -> crate::operation::delete_aws_log_source::builders::DeleteAwsLogSourceOutputBuilder {
        crate::operation::delete_aws_log_source::builders::DeleteAwsLogSourceOutputBuilder::default(
        )
    }
}

/// A builder for [`DeleteAwsLogSourceOutput`](crate::operation::delete_aws_log_source::DeleteAwsLogSourceOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteAwsLogSourceOutputBuilder {
    pub(crate) processing: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) failed: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl DeleteAwsLogSourceOutputBuilder {
    /// Appends an item to `processing`.
    ///
    /// To override the contents of this collection use [`set_processing`](Self::set_processing).
    ///
    /// <p>Deletion of the Amazon Web Services sources is in progress.</p>
    pub fn processing(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.processing.unwrap_or_default();
        v.push(input.into());
        self.processing = Some(v);
        self
    }
    /// <p>Deletion of the Amazon Web Services sources is in progress.</p>
    pub fn set_processing(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.processing = input;
        self
    }
    /// Appends an item to `failed`.
    ///
    /// To override the contents of this collection use [`set_failed`](Self::set_failed).
    ///
    /// <p>Deletion of the Amazon Web Services sources failed as the account is not a part of the organization.</p>
    pub fn failed(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.failed.unwrap_or_default();
        v.push(input.into());
        self.failed = Some(v);
        self
    }
    /// <p>Deletion of the Amazon Web Services sources failed as the account is not a part of the organization.</p>
    pub fn set_failed(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.failed = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteAwsLogSourceOutput`](crate::operation::delete_aws_log_source::DeleteAwsLogSourceOutput).
    pub fn build(self) -> crate::operation::delete_aws_log_source::DeleteAwsLogSourceOutput {
        crate::operation::delete_aws_log_source::DeleteAwsLogSourceOutput {
            processing: self.processing,
            failed: self.failed,
            _request_id: self._request_id,
        }
    }
}
