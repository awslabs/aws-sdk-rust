// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDatalakeStatusInput {
    /// <p>The Amazon Web Services account ID for which a static snapshot of the current Amazon Web Services Region, including enabled accounts and log sources, is retrieved.</p>
    #[doc(hidden)]
    pub account_set: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The maximum limit of accounts for which the static snapshot of the current Region, including enabled accounts and log sources, is retrieved.</p>
    #[doc(hidden)]
    pub max_account_results: ::std::option::Option<i32>,
    /// <p>Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    /// <p>Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    #[doc(hidden)]
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl GetDatalakeStatusInput {
    /// <p>The Amazon Web Services account ID for which a static snapshot of the current Amazon Web Services Region, including enabled accounts and log sources, is retrieved.</p>
    pub fn account_set(&self) -> ::std::option::Option<&[::std::string::String]> {
        self.account_set.as_deref()
    }
    /// <p>The maximum limit of accounts for which the static snapshot of the current Region, including enabled accounts and log sources, is retrieved.</p>
    pub fn max_account_results(&self) -> ::std::option::Option<i32> {
        self.max_account_results
    }
    /// <p>Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    /// <p>Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl GetDatalakeStatusInput {
    /// Creates a new builder-style object to manufacture [`GetDatalakeStatusInput`](crate::operation::get_datalake_status::GetDatalakeStatusInput).
    pub fn builder(
    ) -> crate::operation::get_datalake_status::builders::GetDatalakeStatusInputBuilder {
        crate::operation::get_datalake_status::builders::GetDatalakeStatusInputBuilder::default()
    }
}

/// A builder for [`GetDatalakeStatusInput`](crate::operation::get_datalake_status::GetDatalakeStatusInput).
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
)]
pub struct GetDatalakeStatusInputBuilder {
    pub(crate) account_set: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) max_account_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl GetDatalakeStatusInputBuilder {
    /// Appends an item to `account_set`.
    ///
    /// To override the contents of this collection use [`set_account_set`](Self::set_account_set).
    ///
    /// <p>The Amazon Web Services account ID for which a static snapshot of the current Amazon Web Services Region, including enabled accounts and log sources, is retrieved.</p>
    pub fn account_set(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.account_set.unwrap_or_default();
        v.push(input.into());
        self.account_set = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Web Services account ID for which a static snapshot of the current Amazon Web Services Region, including enabled accounts and log sources, is retrieved.</p>
    pub fn set_account_set(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    ) -> Self {
        self.account_set = input;
        self
    }
    /// <p>The maximum limit of accounts for which the static snapshot of the current Region, including enabled accounts and log sources, is retrieved.</p>
    pub fn max_account_results(mut self, input: i32) -> Self {
        self.max_account_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum limit of accounts for which the static snapshot of the current Region, including enabled accounts and log sources, is retrieved.</p>
    pub fn set_max_account_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_account_results = input;
        self
    }
    /// <p>Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    /// <p>Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>
    /// <p>Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`GetDatalakeStatusInput`](crate::operation::get_datalake_status::GetDatalakeStatusInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_datalake_status::GetDatalakeStatusInput,
        ::aws_smithy_http::operation::error::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::get_datalake_status::GetDatalakeStatusInput {
                account_set: self.account_set,
                max_account_results: self.max_account_results,
                next_token: self.next_token,
            },
        )
    }
}
