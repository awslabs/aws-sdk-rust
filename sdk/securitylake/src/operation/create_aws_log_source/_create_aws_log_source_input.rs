// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateAwsLogSourceInput {
    /// <p>Specify the natively-supported Amazon Web Services service to add as a source in Security Lake.</p>
    pub sources: ::std::option::Option<::std::vec::Vec<crate::types::AwsLogSourceConfiguration>>,
}
impl CreateAwsLogSourceInput {
    /// <p>Specify the natively-supported Amazon Web Services service to add as a source in Security Lake.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sources.is_none()`.
    pub fn sources(&self) -> &[crate::types::AwsLogSourceConfiguration] {
        self.sources.as_deref().unwrap_or_default()
    }
}
impl CreateAwsLogSourceInput {
    /// Creates a new builder-style object to manufacture [`CreateAwsLogSourceInput`](crate::operation::create_aws_log_source::CreateAwsLogSourceInput).
    pub fn builder() -> crate::operation::create_aws_log_source::builders::CreateAwsLogSourceInputBuilder {
        crate::operation::create_aws_log_source::builders::CreateAwsLogSourceInputBuilder::default()
    }
}

/// A builder for [`CreateAwsLogSourceInput`](crate::operation::create_aws_log_source::CreateAwsLogSourceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateAwsLogSourceInputBuilder {
    pub(crate) sources: ::std::option::Option<::std::vec::Vec<crate::types::AwsLogSourceConfiguration>>,
}
impl CreateAwsLogSourceInputBuilder {
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>Specify the natively-supported Amazon Web Services service to add as a source in Security Lake.</p>
    pub fn sources(mut self, input: crate::types::AwsLogSourceConfiguration) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specify the natively-supported Amazon Web Services service to add as a source in Security Lake.</p>
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsLogSourceConfiguration>>) -> Self {
        self.sources = input;
        self
    }
    /// <p>Specify the natively-supported Amazon Web Services service to add as a source in Security Lake.</p>
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsLogSourceConfiguration>> {
        &self.sources
    }
    /// Consumes the builder and constructs a [`CreateAwsLogSourceInput`](crate::operation::create_aws_log_source::CreateAwsLogSourceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_aws_log_source::CreateAwsLogSourceInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_aws_log_source::CreateAwsLogSourceInput { sources: self.sources })
    }
}
