// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_aws_log_source::_create_aws_log_source_output::CreateAwsLogSourceOutputBuilder;

pub use crate::operation::create_aws_log_source::_create_aws_log_source_input::CreateAwsLogSourceInputBuilder;

impl CreateAwsLogSourceInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_aws_log_source::CreateAwsLogSourceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_aws_log_source::CreateAwsLogSourceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_aws_log_source();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateAwsLogSource`.
///
/// <p>Adds a natively supported Amazon Web Service as an Amazon Security Lake source. Enables source types for member accounts in required Amazon Web Services Regions, based on the parameters you specify. You can choose any source type in any Region for either accounts that are part of a trusted organization or standalone accounts. Once you add an Amazon Web Service as a source, Security Lake starts collecting logs and events from it.</p>
/// <p>You can use this API only to enable natively supported Amazon Web Services as a source. Use <code>CreateCustomLogSource</code> to enable data collection from a custom source.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateAwsLogSourceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_aws_log_source::builders::CreateAwsLogSourceInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_aws_log_source::CreateAwsLogSourceOutput,
        crate::operation::create_aws_log_source::CreateAwsLogSourceError,
    > for CreateAwsLogSourceFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_aws_log_source::CreateAwsLogSourceOutput,
            crate::operation::create_aws_log_source::CreateAwsLogSourceError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateAwsLogSourceFluentBuilder {
    /// Creates a new `CreateAwsLogSource`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateAwsLogSource as a reference.
    pub fn as_input(&self) -> &crate::operation::create_aws_log_source::builders::CreateAwsLogSourceInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_aws_log_source::CreateAwsLogSourceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_aws_log_source::CreateAwsLogSourceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_aws_log_source::CreateAwsLogSource::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_aws_log_source::CreateAwsLogSource::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_aws_log_source::CreateAwsLogSourceOutput,
        crate::operation::create_aws_log_source::CreateAwsLogSourceError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>Specify the natively-supported Amazon Web Services service to add as a source in Security Lake.</p>
    pub fn sources(mut self, input: crate::types::AwsLogSourceConfiguration) -> Self {
        self.inner = self.inner.sources(input);
        self
    }
    /// <p>Specify the natively-supported Amazon Web Services service to add as a source in Security Lake.</p>
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AwsLogSourceConfiguration>>) -> Self {
        self.inner = self.inner.set_sources(input);
        self
    }
    /// <p>Specify the natively-supported Amazon Web Services service to add as a source in Security Lake.</p>
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AwsLogSourceConfiguration>> {
        self.inner.get_sources()
    }
}
