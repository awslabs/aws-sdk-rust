// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDatalakeInput {
    /// <p>Enable Security Lake in the specified Regions. To enable Security Lake in specific Amazon Web Services Regions, such as us-east-1 or ap-northeast-3, provide the Region codes. For a list of Region codes, see <a href="https://docs.aws.amazon.com/general/latest/gr/securitylake.html">Amazon Security Lake endpoints</a> in the Amazon Web Services General Reference.</p>
    #[doc(hidden)]
    pub regions: std::option::Option<std::vec::Vec<crate::types::Region>>,
    /// <p>Specify the Region or Regions that will contribute data to the rollup region.</p>
    #[doc(hidden)]
    pub configurations: std::option::Option<
        std::collections::HashMap<crate::types::Region, crate::types::LakeConfigurationRequest>,
    >,
    /// <p>Enable Security Lake in all Regions.</p>
    #[doc(hidden)]
    pub enable_all: std::option::Option<bool>,
    /// <p>The Amazon Resource Name (ARN) used to create and update the Glue table. This table contains partitions generated by the ingestion and normalization of Amazon Web Services log sources and custom sources.</p>
    #[doc(hidden)]
    pub meta_store_manager_role_arn: std::option::Option<std::string::String>,
}
impl CreateDatalakeInput {
    /// <p>Enable Security Lake in the specified Regions. To enable Security Lake in specific Amazon Web Services Regions, such as us-east-1 or ap-northeast-3, provide the Region codes. For a list of Region codes, see <a href="https://docs.aws.amazon.com/general/latest/gr/securitylake.html">Amazon Security Lake endpoints</a> in the Amazon Web Services General Reference.</p>
    pub fn regions(&self) -> std::option::Option<&[crate::types::Region]> {
        self.regions.as_deref()
    }
    /// <p>Specify the Region or Regions that will contribute data to the rollup region.</p>
    pub fn configurations(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<crate::types::Region, crate::types::LakeConfigurationRequest>,
    > {
        self.configurations.as_ref()
    }
    /// <p>Enable Security Lake in all Regions.</p>
    pub fn enable_all(&self) -> std::option::Option<bool> {
        self.enable_all
    }
    /// <p>The Amazon Resource Name (ARN) used to create and update the Glue table. This table contains partitions generated by the ingestion and normalization of Amazon Web Services log sources and custom sources.</p>
    pub fn meta_store_manager_role_arn(&self) -> std::option::Option<&str> {
        self.meta_store_manager_role_arn.as_deref()
    }
}
impl CreateDatalakeInput {
    /// Creates a new builder-style object to manufacture [`CreateDatalakeInput`](crate::operation::create_datalake::CreateDatalakeInput).
    pub fn builder() -> crate::operation::create_datalake::builders::CreateDatalakeInputBuilder {
        crate::operation::create_datalake::builders::CreateDatalakeInputBuilder::default()
    }
}

/// A builder for [`CreateDatalakeInput`](crate::operation::create_datalake::CreateDatalakeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateDatalakeInputBuilder {
    pub(crate) regions: std::option::Option<std::vec::Vec<crate::types::Region>>,
    pub(crate) configurations: std::option::Option<
        std::collections::HashMap<crate::types::Region, crate::types::LakeConfigurationRequest>,
    >,
    pub(crate) enable_all: std::option::Option<bool>,
    pub(crate) meta_store_manager_role_arn: std::option::Option<std::string::String>,
}
impl CreateDatalakeInputBuilder {
    /// Appends an item to `regions`.
    ///
    /// To override the contents of this collection use [`set_regions`](Self::set_regions).
    ///
    /// <p>Enable Security Lake in the specified Regions. To enable Security Lake in specific Amazon Web Services Regions, such as us-east-1 or ap-northeast-3, provide the Region codes. For a list of Region codes, see <a href="https://docs.aws.amazon.com/general/latest/gr/securitylake.html">Amazon Security Lake endpoints</a> in the Amazon Web Services General Reference.</p>
    pub fn regions(mut self, input: crate::types::Region) -> Self {
        let mut v = self.regions.unwrap_or_default();
        v.push(input);
        self.regions = Some(v);
        self
    }
    /// <p>Enable Security Lake in the specified Regions. To enable Security Lake in specific Amazon Web Services Regions, such as us-east-1 or ap-northeast-3, provide the Region codes. For a list of Region codes, see <a href="https://docs.aws.amazon.com/general/latest/gr/securitylake.html">Amazon Security Lake endpoints</a> in the Amazon Web Services General Reference.</p>
    pub fn set_regions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Region>>,
    ) -> Self {
        self.regions = input;
        self
    }
    /// Adds a key-value pair to `configurations`.
    ///
    /// To override the contents of this collection use [`set_configurations`](Self::set_configurations).
    ///
    /// <p>Specify the Region or Regions that will contribute data to the rollup region.</p>
    pub fn configurations(
        mut self,
        k: crate::types::Region,
        v: crate::types::LakeConfigurationRequest,
    ) -> Self {
        let mut hash_map = self.configurations.unwrap_or_default();
        hash_map.insert(k, v);
        self.configurations = Some(hash_map);
        self
    }
    /// <p>Specify the Region or Regions that will contribute data to the rollup region.</p>
    pub fn set_configurations(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<crate::types::Region, crate::types::LakeConfigurationRequest>,
        >,
    ) -> Self {
        self.configurations = input;
        self
    }
    /// <p>Enable Security Lake in all Regions.</p>
    pub fn enable_all(mut self, input: bool) -> Self {
        self.enable_all = Some(input);
        self
    }
    /// <p>Enable Security Lake in all Regions.</p>
    pub fn set_enable_all(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_all = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) used to create and update the Glue table. This table contains partitions generated by the ingestion and normalization of Amazon Web Services log sources and custom sources.</p>
    pub fn meta_store_manager_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.meta_store_manager_role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) used to create and update the Glue table. This table contains partitions generated by the ingestion and normalization of Amazon Web Services log sources and custom sources.</p>
    pub fn set_meta_store_manager_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.meta_store_manager_role_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateDatalakeInput`](crate::operation::create_datalake::CreateDatalakeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_datalake::CreateDatalakeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_datalake::CreateDatalakeInput {
            regions: self.regions,
            configurations: self.configurations,
            enable_all: self.enable_all,
            meta_store_manager_role_arn: self.meta_store_manager_role_arn,
        })
    }
}
