// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateDatalakeExceptionsSubscriptionInput {
    /// <p>The subscription protocol to which exception messages are posted. </p>
    #[doc(hidden)]
    pub subscription_protocol: std::option::Option<crate::types::SubscriptionProtocolType>,
    /// <p>The account that is subscribed to receive exception notifications.</p>
    #[doc(hidden)]
    pub notification_endpoint: std::option::Option<std::string::String>,
}
impl UpdateDatalakeExceptionsSubscriptionInput {
    /// <p>The subscription protocol to which exception messages are posted. </p>
    pub fn subscription_protocol(
        &self,
    ) -> std::option::Option<&crate::types::SubscriptionProtocolType> {
        self.subscription_protocol.as_ref()
    }
    /// <p>The account that is subscribed to receive exception notifications.</p>
    pub fn notification_endpoint(&self) -> std::option::Option<&str> {
        self.notification_endpoint.as_deref()
    }
}
impl UpdateDatalakeExceptionsSubscriptionInput {
    /// Creates a new builder-style object to manufacture [`UpdateDatalakeExceptionsSubscriptionInput`](crate::operation::update_datalake_exceptions_subscription::UpdateDatalakeExceptionsSubscriptionInput).
    pub fn builder() -> crate::operation::update_datalake_exceptions_subscription::builders::UpdateDatalakeExceptionsSubscriptionInputBuilder{
        crate::operation::update_datalake_exceptions_subscription::builders::UpdateDatalakeExceptionsSubscriptionInputBuilder::default()
    }
}

/// A builder for [`UpdateDatalakeExceptionsSubscriptionInput`](crate::operation::update_datalake_exceptions_subscription::UpdateDatalakeExceptionsSubscriptionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateDatalakeExceptionsSubscriptionInputBuilder {
    pub(crate) subscription_protocol: std::option::Option<crate::types::SubscriptionProtocolType>,
    pub(crate) notification_endpoint: std::option::Option<std::string::String>,
}
impl UpdateDatalakeExceptionsSubscriptionInputBuilder {
    /// <p>The subscription protocol to which exception messages are posted. </p>
    pub fn subscription_protocol(mut self, input: crate::types::SubscriptionProtocolType) -> Self {
        self.subscription_protocol = Some(input);
        self
    }
    /// <p>The subscription protocol to which exception messages are posted. </p>
    pub fn set_subscription_protocol(
        mut self,
        input: std::option::Option<crate::types::SubscriptionProtocolType>,
    ) -> Self {
        self.subscription_protocol = input;
        self
    }
    /// <p>The account that is subscribed to receive exception notifications.</p>
    pub fn notification_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.notification_endpoint = Some(input.into());
        self
    }
    /// <p>The account that is subscribed to receive exception notifications.</p>
    pub fn set_notification_endpoint(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.notification_endpoint = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateDatalakeExceptionsSubscriptionInput`](crate::operation::update_datalake_exceptions_subscription::UpdateDatalakeExceptionsSubscriptionInput).
    pub fn build(self) -> Result<crate::operation::update_datalake_exceptions_subscription::UpdateDatalakeExceptionsSubscriptionInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::update_datalake_exceptions_subscription::UpdateDatalakeExceptionsSubscriptionInput {
                subscription_protocol: self.subscription_protocol
                ,
                notification_endpoint: self.notification_endpoint
                ,
            }
        )
    }
}
