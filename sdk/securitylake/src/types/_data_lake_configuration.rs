// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides details of Amazon Security Lake object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataLakeConfiguration {
    /// <p>The Amazon Web Services Regions where Security Lake is automatically enabled.</p>
    pub region: ::std::string::String,
    /// <p>Provides encryption details of Amazon Security Lake object.</p>
    pub encryption_configuration: ::std::option::Option<crate::types::DataLakeEncryptionConfiguration>,
    /// <p>Provides lifecycle details of Amazon Security Lake object.</p>
    pub lifecycle_configuration: ::std::option::Option<crate::types::DataLakeLifecycleConfiguration>,
    /// <p>Provides replication details of Amazon Security Lake object.</p>
    pub replication_configuration: ::std::option::Option<crate::types::DataLakeReplicationConfiguration>,
}
impl DataLakeConfiguration {
    /// <p>The Amazon Web Services Regions where Security Lake is automatically enabled.</p>
    pub fn region(&self) -> &str {
        use std::ops::Deref;
        self.region.deref()
    }
    /// <p>Provides encryption details of Amazon Security Lake object.</p>
    pub fn encryption_configuration(&self) -> ::std::option::Option<&crate::types::DataLakeEncryptionConfiguration> {
        self.encryption_configuration.as_ref()
    }
    /// <p>Provides lifecycle details of Amazon Security Lake object.</p>
    pub fn lifecycle_configuration(&self) -> ::std::option::Option<&crate::types::DataLakeLifecycleConfiguration> {
        self.lifecycle_configuration.as_ref()
    }
    /// <p>Provides replication details of Amazon Security Lake object.</p>
    pub fn replication_configuration(&self) -> ::std::option::Option<&crate::types::DataLakeReplicationConfiguration> {
        self.replication_configuration.as_ref()
    }
}
impl DataLakeConfiguration {
    /// Creates a new builder-style object to manufacture [`DataLakeConfiguration`](crate::types::DataLakeConfiguration).
    pub fn builder() -> crate::types::builders::DataLakeConfigurationBuilder {
        crate::types::builders::DataLakeConfigurationBuilder::default()
    }
}

/// A builder for [`DataLakeConfiguration`](crate::types::DataLakeConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataLakeConfigurationBuilder {
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) encryption_configuration: ::std::option::Option<crate::types::DataLakeEncryptionConfiguration>,
    pub(crate) lifecycle_configuration: ::std::option::Option<crate::types::DataLakeLifecycleConfiguration>,
    pub(crate) replication_configuration: ::std::option::Option<crate::types::DataLakeReplicationConfiguration>,
}
impl DataLakeConfigurationBuilder {
    /// <p>The Amazon Web Services Regions where Security Lake is automatically enabled.</p>
    /// This field is required.
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Regions where Security Lake is automatically enabled.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Regions where Security Lake is automatically enabled.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>Provides encryption details of Amazon Security Lake object.</p>
    pub fn encryption_configuration(mut self, input: crate::types::DataLakeEncryptionConfiguration) -> Self {
        self.encryption_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides encryption details of Amazon Security Lake object.</p>
    pub fn set_encryption_configuration(mut self, input: ::std::option::Option<crate::types::DataLakeEncryptionConfiguration>) -> Self {
        self.encryption_configuration = input;
        self
    }
    /// <p>Provides encryption details of Amazon Security Lake object.</p>
    pub fn get_encryption_configuration(&self) -> &::std::option::Option<crate::types::DataLakeEncryptionConfiguration> {
        &self.encryption_configuration
    }
    /// <p>Provides lifecycle details of Amazon Security Lake object.</p>
    pub fn lifecycle_configuration(mut self, input: crate::types::DataLakeLifecycleConfiguration) -> Self {
        self.lifecycle_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides lifecycle details of Amazon Security Lake object.</p>
    pub fn set_lifecycle_configuration(mut self, input: ::std::option::Option<crate::types::DataLakeLifecycleConfiguration>) -> Self {
        self.lifecycle_configuration = input;
        self
    }
    /// <p>Provides lifecycle details of Amazon Security Lake object.</p>
    pub fn get_lifecycle_configuration(&self) -> &::std::option::Option<crate::types::DataLakeLifecycleConfiguration> {
        &self.lifecycle_configuration
    }
    /// <p>Provides replication details of Amazon Security Lake object.</p>
    pub fn replication_configuration(mut self, input: crate::types::DataLakeReplicationConfiguration) -> Self {
        self.replication_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides replication details of Amazon Security Lake object.</p>
    pub fn set_replication_configuration(mut self, input: ::std::option::Option<crate::types::DataLakeReplicationConfiguration>) -> Self {
        self.replication_configuration = input;
        self
    }
    /// <p>Provides replication details of Amazon Security Lake object.</p>
    pub fn get_replication_configuration(&self) -> &::std::option::Option<crate::types::DataLakeReplicationConfiguration> {
        &self.replication_configuration
    }
    /// Consumes the builder and constructs a [`DataLakeConfiguration`](crate::types::DataLakeConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`region`](crate::types::builders::DataLakeConfigurationBuilder::region)
    pub fn build(self) -> ::std::result::Result<crate::types::DataLakeConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataLakeConfiguration {
            region: self.region.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "region",
                    "region was not specified but it is required when building DataLakeConfiguration",
                )
            })?,
            encryption_configuration: self.encryption_configuration,
            lifecycle_configuration: self.lifecycle_configuration,
            replication_configuration: self.replication_configuration,
        })
    }
}
