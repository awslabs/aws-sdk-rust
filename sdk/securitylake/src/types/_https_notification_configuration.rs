// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configurations for HTTPS subscriber notification.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct HttpsNotificationConfiguration {
    /// <p>The subscription endpoint in Security Lake. If you prefer notification with an HTTPs endpoint, populate this field.</p>
    pub endpoint: ::std::string::String,
    /// <p>The key name for the notification subscription.</p>
    pub authorization_api_key_name: ::std::option::Option<::std::string::String>,
    /// <p>The key value for the notification subscription.</p>
    pub authorization_api_key_value: ::std::option::Option<::std::string::String>,
    /// <p>The HTTPS method used for the notification subscription.</p>
    pub http_method: ::std::option::Option<crate::types::HttpMethod>,
    /// <p>The Amazon Resource Name (ARN) of the EventBridge API destinations IAM role that you created. For more information about ARNs and how to use them in policies, see <a href="https://docs.aws.amazon.com//security-lake/latest/userguide/subscriber-data-access.html">Managing data access</a> and <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/security-iam-awsmanpol.html">Amazon Web Services Managed Policies</a> in the <i>Amazon Security Lake User Guide</i>.</p>
    pub target_role_arn: ::std::string::String,
}
impl HttpsNotificationConfiguration {
    /// <p>The subscription endpoint in Security Lake. If you prefer notification with an HTTPs endpoint, populate this field.</p>
    pub fn endpoint(&self) -> &str {
        use std::ops::Deref;
        self.endpoint.deref()
    }
    /// <p>The key name for the notification subscription.</p>
    pub fn authorization_api_key_name(&self) -> ::std::option::Option<&str> {
        self.authorization_api_key_name.as_deref()
    }
    /// <p>The key value for the notification subscription.</p>
    pub fn authorization_api_key_value(&self) -> ::std::option::Option<&str> {
        self.authorization_api_key_value.as_deref()
    }
    /// <p>The HTTPS method used for the notification subscription.</p>
    pub fn http_method(&self) -> ::std::option::Option<&crate::types::HttpMethod> {
        self.http_method.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the EventBridge API destinations IAM role that you created. For more information about ARNs and how to use them in policies, see <a href="https://docs.aws.amazon.com//security-lake/latest/userguide/subscriber-data-access.html">Managing data access</a> and <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/security-iam-awsmanpol.html">Amazon Web Services Managed Policies</a> in the <i>Amazon Security Lake User Guide</i>.</p>
    pub fn target_role_arn(&self) -> &str {
        use std::ops::Deref;
        self.target_role_arn.deref()
    }
}
impl HttpsNotificationConfiguration {
    /// Creates a new builder-style object to manufacture [`HttpsNotificationConfiguration`](crate::types::HttpsNotificationConfiguration).
    pub fn builder() -> crate::types::builders::HttpsNotificationConfigurationBuilder {
        crate::types::builders::HttpsNotificationConfigurationBuilder::default()
    }
}

/// A builder for [`HttpsNotificationConfiguration`](crate::types::HttpsNotificationConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct HttpsNotificationConfigurationBuilder {
    pub(crate) endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) authorization_api_key_name: ::std::option::Option<::std::string::String>,
    pub(crate) authorization_api_key_value: ::std::option::Option<::std::string::String>,
    pub(crate) http_method: ::std::option::Option<crate::types::HttpMethod>,
    pub(crate) target_role_arn: ::std::option::Option<::std::string::String>,
}
impl HttpsNotificationConfigurationBuilder {
    /// <p>The subscription endpoint in Security Lake. If you prefer notification with an HTTPs endpoint, populate this field.</p>
    /// This field is required.
    pub fn endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subscription endpoint in Security Lake. If you prefer notification with an HTTPs endpoint, populate this field.</p>
    pub fn set_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The subscription endpoint in Security Lake. If you prefer notification with an HTTPs endpoint, populate this field.</p>
    pub fn get_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.endpoint
    }
    /// <p>The key name for the notification subscription.</p>
    pub fn authorization_api_key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorization_api_key_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key name for the notification subscription.</p>
    pub fn set_authorization_api_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorization_api_key_name = input;
        self
    }
    /// <p>The key name for the notification subscription.</p>
    pub fn get_authorization_api_key_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorization_api_key_name
    }
    /// <p>The key value for the notification subscription.</p>
    pub fn authorization_api_key_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorization_api_key_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key value for the notification subscription.</p>
    pub fn set_authorization_api_key_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorization_api_key_value = input;
        self
    }
    /// <p>The key value for the notification subscription.</p>
    pub fn get_authorization_api_key_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorization_api_key_value
    }
    /// <p>The HTTPS method used for the notification subscription.</p>
    pub fn http_method(mut self, input: crate::types::HttpMethod) -> Self {
        self.http_method = ::std::option::Option::Some(input);
        self
    }
    /// <p>The HTTPS method used for the notification subscription.</p>
    pub fn set_http_method(mut self, input: ::std::option::Option<crate::types::HttpMethod>) -> Self {
        self.http_method = input;
        self
    }
    /// <p>The HTTPS method used for the notification subscription.</p>
    pub fn get_http_method(&self) -> &::std::option::Option<crate::types::HttpMethod> {
        &self.http_method
    }
    /// <p>The Amazon Resource Name (ARN) of the EventBridge API destinations IAM role that you created. For more information about ARNs and how to use them in policies, see <a href="https://docs.aws.amazon.com//security-lake/latest/userguide/subscriber-data-access.html">Managing data access</a> and <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/security-iam-awsmanpol.html">Amazon Web Services Managed Policies</a> in the <i>Amazon Security Lake User Guide</i>.</p>
    /// This field is required.
    pub fn target_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the EventBridge API destinations IAM role that you created. For more information about ARNs and how to use them in policies, see <a href="https://docs.aws.amazon.com//security-lake/latest/userguide/subscriber-data-access.html">Managing data access</a> and <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/security-iam-awsmanpol.html">Amazon Web Services Managed Policies</a> in the <i>Amazon Security Lake User Guide</i>.</p>
    pub fn set_target_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the EventBridge API destinations IAM role that you created. For more information about ARNs and how to use them in policies, see <a href="https://docs.aws.amazon.com//security-lake/latest/userguide/subscriber-data-access.html">Managing data access</a> and <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/security-iam-awsmanpol.html">Amazon Web Services Managed Policies</a> in the <i>Amazon Security Lake User Guide</i>.</p>
    pub fn get_target_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_role_arn
    }
    /// Consumes the builder and constructs a [`HttpsNotificationConfiguration`](crate::types::HttpsNotificationConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`endpoint`](crate::types::builders::HttpsNotificationConfigurationBuilder::endpoint)
    /// - [`target_role_arn`](crate::types::builders::HttpsNotificationConfigurationBuilder::target_role_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::HttpsNotificationConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HttpsNotificationConfiguration {
            endpoint: self.endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "endpoint",
                    "endpoint was not specified but it is required when building HttpsNotificationConfiguration",
                )
            })?,
            authorization_api_key_name: self.authorization_api_key_name,
            authorization_api_key_value: self.authorization_api_key_value,
            http_method: self.http_method,
            target_role_arn: self.target_role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target_role_arn",
                    "target_role_arn was not specified but it is required when building HttpsNotificationConfiguration",
                )
            })?,
        })
    }
}
