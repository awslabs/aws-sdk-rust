// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Automatically enable new organization accounts as member accounts from an Amazon Security Lake administrator account.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AutoEnableNewRegionConfiguration {
    /// <p>The Amazon Web Services Regions where Security Lake is automatically enabled.</p>
    #[doc(hidden)]
    pub region: std::option::Option<crate::types::Region>,
    /// <p>The Amazon Web Services sources that are automatically enabled in Security Lake.</p>
    #[doc(hidden)]
    pub sources: std::option::Option<std::vec::Vec<crate::types::AwsLogSourceType>>,
}
impl AutoEnableNewRegionConfiguration {
    /// <p>The Amazon Web Services Regions where Security Lake is automatically enabled.</p>
    pub fn region(&self) -> std::option::Option<&crate::types::Region> {
        self.region.as_ref()
    }
    /// <p>The Amazon Web Services sources that are automatically enabled in Security Lake.</p>
    pub fn sources(&self) -> std::option::Option<&[crate::types::AwsLogSourceType]> {
        self.sources.as_deref()
    }
}
impl AutoEnableNewRegionConfiguration {
    /// Creates a new builder-style object to manufacture [`AutoEnableNewRegionConfiguration`](crate::types::AutoEnableNewRegionConfiguration).
    pub fn builder() -> crate::types::builders::AutoEnableNewRegionConfigurationBuilder {
        crate::types::builders::AutoEnableNewRegionConfigurationBuilder::default()
    }
}

/// A builder for [`AutoEnableNewRegionConfiguration`](crate::types::AutoEnableNewRegionConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AutoEnableNewRegionConfigurationBuilder {
    pub(crate) region: std::option::Option<crate::types::Region>,
    pub(crate) sources: std::option::Option<std::vec::Vec<crate::types::AwsLogSourceType>>,
}
impl AutoEnableNewRegionConfigurationBuilder {
    /// <p>The Amazon Web Services Regions where Security Lake is automatically enabled.</p>
    pub fn region(mut self, input: crate::types::Region) -> Self {
        self.region = Some(input);
        self
    }
    /// <p>The Amazon Web Services Regions where Security Lake is automatically enabled.</p>
    pub fn set_region(mut self, input: std::option::Option<crate::types::Region>) -> Self {
        self.region = input;
        self
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>The Amazon Web Services sources that are automatically enabled in Security Lake.</p>
    pub fn sources(mut self, input: crate::types::AwsLogSourceType) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = Some(v);
        self
    }
    /// <p>The Amazon Web Services sources that are automatically enabled in Security Lake.</p>
    pub fn set_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AwsLogSourceType>>,
    ) -> Self {
        self.sources = input;
        self
    }
    /// Consumes the builder and constructs a [`AutoEnableNewRegionConfiguration`](crate::types::AutoEnableNewRegionConfiguration).
    pub fn build(self) -> crate::types::AutoEnableNewRegionConfiguration {
        crate::types::AutoEnableNewRegionConfiguration {
            region: self.region,
            sources: self.sources,
        }
    }
}
