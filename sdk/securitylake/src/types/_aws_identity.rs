// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The AWS identity.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AwsIdentity {
    /// <p>The AWS identity principal.</p>
    pub principal: ::std::string::String,
    /// <p>The external ID used to estalish trust relationship with the AWS identity.</p>
    pub external_id: ::std::string::String,
}
impl AwsIdentity {
    /// <p>The AWS identity principal.</p>
    pub fn principal(&self) -> &str {
        use std::ops::Deref;
        self.principal.deref()
    }
    /// <p>The external ID used to estalish trust relationship with the AWS identity.</p>
    pub fn external_id(&self) -> &str {
        use std::ops::Deref;
        self.external_id.deref()
    }
}
impl AwsIdentity {
    /// Creates a new builder-style object to manufacture [`AwsIdentity`](crate::types::AwsIdentity).
    pub fn builder() -> crate::types::builders::AwsIdentityBuilder {
        crate::types::builders::AwsIdentityBuilder::default()
    }
}

/// A builder for [`AwsIdentity`](crate::types::AwsIdentity).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AwsIdentityBuilder {
    pub(crate) principal: ::std::option::Option<::std::string::String>,
    pub(crate) external_id: ::std::option::Option<::std::string::String>,
}
impl AwsIdentityBuilder {
    /// <p>The AWS identity principal.</p>
    /// This field is required.
    pub fn principal(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.principal = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS identity principal.</p>
    pub fn set_principal(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.principal = input;
        self
    }
    /// <p>The AWS identity principal.</p>
    pub fn get_principal(&self) -> &::std::option::Option<::std::string::String> {
        &self.principal
    }
    /// <p>The external ID used to estalish trust relationship with the AWS identity.</p>
    /// This field is required.
    pub fn external_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.external_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The external ID used to estalish trust relationship with the AWS identity.</p>
    pub fn set_external_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.external_id = input;
        self
    }
    /// <p>The external ID used to estalish trust relationship with the AWS identity.</p>
    pub fn get_external_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.external_id
    }
    /// Consumes the builder and constructs a [`AwsIdentity`](crate::types::AwsIdentity).
    /// This method will fail if any of the following fields are not set:
    /// - [`principal`](crate::types::builders::AwsIdentityBuilder::principal)
    /// - [`external_id`](crate::types::builders::AwsIdentityBuilder::external_id)
    pub fn build(self) -> ::std::result::Result<crate::types::AwsIdentity, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AwsIdentity {
            principal: self.principal.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "principal",
                    "principal was not specified but it is required when building AwsIdentity",
                )
            })?,
            external_id: self.external_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "external_id",
                    "external_id was not specified but it is required when building AwsIdentity",
                )
            })?,
        })
    }
}
