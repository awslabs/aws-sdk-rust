// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Amazon Security Lake collects logs and events from supported Amazon Web Services and custom sources. For the list of supported Amazon Web Services, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html">Amazon Security Lake User Guide</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataLakeSource {
    /// <p>The ID of the Security Lake account for which logs are collected.</p>
    pub account: ::std::option::Option<::std::string::String>,
    /// <p>The supported Amazon Web Services from which logs and events are collected. Amazon Security Lake supports log and event collection for natively supported Amazon Web Services.</p>
    pub source_name: ::std::option::Option<::std::string::String>,
    /// <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. The supported event classes are:</p>
    /// <ul>
    /// <li> <p> <code>ACCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FILE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_EXTENSION</code> </p> </li>
    /// <li> <p> <code>MEMORY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>MODULE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>PROCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_KEY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_VALUE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RESOURCE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SCHEDULED_JOB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SECURITY_FINDING</code> </p> </li>
    /// <li> <p> <code>ACCOUNT_CHANGE</code> </p> </li>
    /// <li> <p> <code>AUTHENTICATION</code> </p> </li>
    /// <li> <p> <code>AUTHORIZATION</code> </p> </li>
    /// <li> <p> <code>ENTITY_MANAGEMENT_AUDIT</code> </p> </li>
    /// <li> <p> <code>DHCP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>NETWORK_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>DNS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>HTTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RDP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SMB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SSH_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CONFIG_STATE</code> </p> </li>
    /// <li> <p> <code>INVENTORY_INFO</code> </p> </li>
    /// <li> <p> <code>EMAIL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>API_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CLOUD_API</code> </p> </li>
    /// </ul>
    pub event_classes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The log status for the Security Lake account.</p>
    pub source_statuses: ::std::option::Option<::std::vec::Vec<crate::types::DataLakeSourceStatus>>,
}
impl DataLakeSource {
    /// <p>The ID of the Security Lake account for which logs are collected.</p>
    pub fn account(&self) -> ::std::option::Option<&str> {
        self.account.as_deref()
    }
    /// <p>The supported Amazon Web Services from which logs and events are collected. Amazon Security Lake supports log and event collection for natively supported Amazon Web Services.</p>
    pub fn source_name(&self) -> ::std::option::Option<&str> {
        self.source_name.as_deref()
    }
    /// <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. The supported event classes are:</p>
    /// <ul>
    /// <li> <p> <code>ACCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FILE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_EXTENSION</code> </p> </li>
    /// <li> <p> <code>MEMORY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>MODULE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>PROCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_KEY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_VALUE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RESOURCE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SCHEDULED_JOB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SECURITY_FINDING</code> </p> </li>
    /// <li> <p> <code>ACCOUNT_CHANGE</code> </p> </li>
    /// <li> <p> <code>AUTHENTICATION</code> </p> </li>
    /// <li> <p> <code>AUTHORIZATION</code> </p> </li>
    /// <li> <p> <code>ENTITY_MANAGEMENT_AUDIT</code> </p> </li>
    /// <li> <p> <code>DHCP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>NETWORK_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>DNS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>HTTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RDP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SMB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SSH_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CONFIG_STATE</code> </p> </li>
    /// <li> <p> <code>INVENTORY_INFO</code> </p> </li>
    /// <li> <p> <code>EMAIL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>API_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CLOUD_API</code> </p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.event_classes.is_none()`.
    pub fn event_classes(&self) -> &[::std::string::String] {
        self.event_classes.as_deref().unwrap_or_default()
    }
    /// <p>The log status for the Security Lake account.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_statuses.is_none()`.
    pub fn source_statuses(&self) -> &[crate::types::DataLakeSourceStatus] {
        self.source_statuses.as_deref().unwrap_or_default()
    }
}
impl DataLakeSource {
    /// Creates a new builder-style object to manufacture [`DataLakeSource`](crate::types::DataLakeSource).
    pub fn builder() -> crate::types::builders::DataLakeSourceBuilder {
        crate::types::builders::DataLakeSourceBuilder::default()
    }
}

/// A builder for [`DataLakeSource`](crate::types::DataLakeSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataLakeSourceBuilder {
    pub(crate) account: ::std::option::Option<::std::string::String>,
    pub(crate) source_name: ::std::option::Option<::std::string::String>,
    pub(crate) event_classes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) source_statuses: ::std::option::Option<::std::vec::Vec<crate::types::DataLakeSourceStatus>>,
}
impl DataLakeSourceBuilder {
    /// <p>The ID of the Security Lake account for which logs are collected.</p>
    pub fn account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Security Lake account for which logs are collected.</p>
    pub fn set_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account = input;
        self
    }
    /// <p>The ID of the Security Lake account for which logs are collected.</p>
    pub fn get_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.account
    }
    /// <p>The supported Amazon Web Services from which logs and events are collected. Amazon Security Lake supports log and event collection for natively supported Amazon Web Services.</p>
    pub fn source_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The supported Amazon Web Services from which logs and events are collected. Amazon Security Lake supports log and event collection for natively supported Amazon Web Services.</p>
    pub fn set_source_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_name = input;
        self
    }
    /// <p>The supported Amazon Web Services from which logs and events are collected. Amazon Security Lake supports log and event collection for natively supported Amazon Web Services.</p>
    pub fn get_source_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_name
    }
    /// Appends an item to `event_classes`.
    ///
    /// To override the contents of this collection use [`set_event_classes`](Self::set_event_classes).
    ///
    /// <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. The supported event classes are:</p>
    /// <ul>
    /// <li> <p> <code>ACCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FILE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_EXTENSION</code> </p> </li>
    /// <li> <p> <code>MEMORY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>MODULE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>PROCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_KEY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_VALUE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RESOURCE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SCHEDULED_JOB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SECURITY_FINDING</code> </p> </li>
    /// <li> <p> <code>ACCOUNT_CHANGE</code> </p> </li>
    /// <li> <p> <code>AUTHENTICATION</code> </p> </li>
    /// <li> <p> <code>AUTHORIZATION</code> </p> </li>
    /// <li> <p> <code>ENTITY_MANAGEMENT_AUDIT</code> </p> </li>
    /// <li> <p> <code>DHCP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>NETWORK_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>DNS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>HTTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RDP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SMB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SSH_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CONFIG_STATE</code> </p> </li>
    /// <li> <p> <code>INVENTORY_INFO</code> </p> </li>
    /// <li> <p> <code>EMAIL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>API_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CLOUD_API</code> </p> </li>
    /// </ul>
    pub fn event_classes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.event_classes.unwrap_or_default();
        v.push(input.into());
        self.event_classes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. The supported event classes are:</p>
    /// <ul>
    /// <li> <p> <code>ACCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FILE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_EXTENSION</code> </p> </li>
    /// <li> <p> <code>MEMORY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>MODULE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>PROCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_KEY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_VALUE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RESOURCE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SCHEDULED_JOB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SECURITY_FINDING</code> </p> </li>
    /// <li> <p> <code>ACCOUNT_CHANGE</code> </p> </li>
    /// <li> <p> <code>AUTHENTICATION</code> </p> </li>
    /// <li> <p> <code>AUTHORIZATION</code> </p> </li>
    /// <li> <p> <code>ENTITY_MANAGEMENT_AUDIT</code> </p> </li>
    /// <li> <p> <code>DHCP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>NETWORK_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>DNS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>HTTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RDP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SMB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SSH_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CONFIG_STATE</code> </p> </li>
    /// <li> <p> <code>INVENTORY_INFO</code> </p> </li>
    /// <li> <p> <code>EMAIL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>API_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CLOUD_API</code> </p> </li>
    /// </ul>
    pub fn set_event_classes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.event_classes = input;
        self
    }
    /// <p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. The supported event classes are:</p>
    /// <ul>
    /// <li> <p> <code>ACCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FILE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>KERNEL_EXTENSION</code> </p> </li>
    /// <li> <p> <code>MEMORY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>MODULE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>PROCESS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_KEY_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>REGISTRY_VALUE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RESOURCE_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SCHEDULED_JOB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SECURITY_FINDING</code> </p> </li>
    /// <li> <p> <code>ACCOUNT_CHANGE</code> </p> </li>
    /// <li> <p> <code>AUTHENTICATION</code> </p> </li>
    /// <li> <p> <code>AUTHORIZATION</code> </p> </li>
    /// <li> <p> <code>ENTITY_MANAGEMENT_AUDIT</code> </p> </li>
    /// <li> <p> <code>DHCP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>NETWORK_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>DNS_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>FTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>HTTP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>RDP_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SMB_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>SSH_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CONFIG_STATE</code> </p> </li>
    /// <li> <p> <code>INVENTORY_INFO</code> </p> </li>
    /// <li> <p> <code>EMAIL_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>API_ACTIVITY</code> </p> </li>
    /// <li> <p> <code>CLOUD_API</code> </p> </li>
    /// </ul>
    pub fn get_event_classes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.event_classes
    }
    /// Appends an item to `source_statuses`.
    ///
    /// To override the contents of this collection use [`set_source_statuses`](Self::set_source_statuses).
    ///
    /// <p>The log status for the Security Lake account.</p>
    pub fn source_statuses(mut self, input: crate::types::DataLakeSourceStatus) -> Self {
        let mut v = self.source_statuses.unwrap_or_default();
        v.push(input);
        self.source_statuses = ::std::option::Option::Some(v);
        self
    }
    /// <p>The log status for the Security Lake account.</p>
    pub fn set_source_statuses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataLakeSourceStatus>>) -> Self {
        self.source_statuses = input;
        self
    }
    /// <p>The log status for the Security Lake account.</p>
    pub fn get_source_statuses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataLakeSourceStatus>> {
        &self.source_statuses
    }
    /// Consumes the builder and constructs a [`DataLakeSource`](crate::types::DataLakeSource).
    pub fn build(self) -> crate::types::DataLakeSource {
        crate::types::DataLakeSource {
            account: self.account,
            source_name: self.source_name,
            event_classes: self.event_classes,
            source_statuses: self.source_statuses,
        }
    }
}
