// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The supported source types from which logs and events are collected in Amazon Security Lake. For the list of supported Amazon Web Services, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/internal-sources.html">Amazon Security Lake User Guide</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum SourceType {
    /// <p>Amazon Security Lake supports log and event collection for natively supported Amazon Web Services. </p>
    AwsSourceType(crate::types::AwsLogSourceType),
    /// <p>Amazon Security Lake supports custom source types. For a detailed list, see the Amazon Security Lake User Guide.</p>
    CustomSourceType(std::string::String),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl SourceType {
    /// Tries to convert the enum instance into [`AwsSourceType`](crate::types::SourceType::AwsSourceType), extracting the inner [`AwsLogSourceType`](crate::types::AwsLogSourceType).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_aws_source_type(
        &self,
    ) -> std::result::Result<&crate::types::AwsLogSourceType, &Self> {
        if let SourceType::AwsSourceType(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`AwsSourceType`](crate::types::SourceType::AwsSourceType).
    pub fn is_aws_source_type(&self) -> bool {
        self.as_aws_source_type().is_ok()
    }
    /// Tries to convert the enum instance into [`CustomSourceType`](crate::types::SourceType::CustomSourceType), extracting the inner [`String`](std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_custom_source_type(&self) -> std::result::Result<&std::string::String, &Self> {
        if let SourceType::CustomSourceType(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`CustomSourceType`](crate::types::SourceType::CustomSourceType).
    pub fn is_custom_source_type(&self) -> bool {
        self.as_custom_source_type().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
