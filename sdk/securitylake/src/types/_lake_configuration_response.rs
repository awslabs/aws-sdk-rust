// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides details of Amazon Security Lake lake configuration object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LakeConfigurationResponse {
    /// <p>The type of encryption key used by secure the Security Lake configuration object.</p>
    #[doc(hidden)]
    pub encryption_key: std::option::Option<std::string::String>,
    /// <p>Retention settings for the destination Amazon S3 buckets. </p>
    #[doc(hidden)]
    pub retention_settings: std::option::Option<std::vec::Vec<crate::types::RetentionSetting>>,
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value, both of which you define.</p>
    #[doc(hidden)]
    pub tags_map:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Replication enables automatic, asynchronous copying of objects across Amazon S3 buckets. Amazon S3 buckets that are configured for object replication can be owned by the same Amazon Web Services account or by different accounts. You can replicate objects to a single destination bucket or to multiple destination buckets. The destination buckets can be in different Amazon Web Services Regions or within the same Region as the source bucket.</p>
    /// <p>Set up one or more rollup Regions by providing the Region or Regions that should contribute to the central rollup Region. </p>
    #[doc(hidden)]
    pub replication_destination_regions: std::option::Option<std::vec::Vec<crate::types::Region>>,
    /// <p>Replication settings for the Amazon S3 buckets. This parameter uses the IAM role you created that is managed by Security Lake, to ensure the replication setting is correct. </p>
    #[doc(hidden)]
    pub replication_role_arn: std::option::Option<std::string::String>,
    /// <p>Amazon Resource Names (ARNs) uniquely identify Amazon Web Services resources. Security Lake requires an ARN when you need to specify a resource unambiguously across all of Amazon Web Services, such as in IAM policies, Amazon Relational Database Service (Amazon RDS) tags, and API calls. </p>
    #[doc(hidden)]
    pub s3_bucket_arn: std::option::Option<std::string::String>,
    /// <p>Retrieves the status of the configuration operation for an account in Amazon Security Lake. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::SettingsStatus>,
}
impl LakeConfigurationResponse {
    /// <p>The type of encryption key used by secure the Security Lake configuration object.</p>
    pub fn encryption_key(&self) -> std::option::Option<&str> {
        self.encryption_key.as_deref()
    }
    /// <p>Retention settings for the destination Amazon S3 buckets. </p>
    pub fn retention_settings(&self) -> std::option::Option<&[crate::types::RetentionSetting]> {
        self.retention_settings.as_deref()
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value, both of which you define.</p>
    pub fn tags_map(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags_map.as_ref()
    }
    /// <p>Replication enables automatic, asynchronous copying of objects across Amazon S3 buckets. Amazon S3 buckets that are configured for object replication can be owned by the same Amazon Web Services account or by different accounts. You can replicate objects to a single destination bucket or to multiple destination buckets. The destination buckets can be in different Amazon Web Services Regions or within the same Region as the source bucket.</p>
    /// <p>Set up one or more rollup Regions by providing the Region or Regions that should contribute to the central rollup Region. </p>
    pub fn replication_destination_regions(&self) -> std::option::Option<&[crate::types::Region]> {
        self.replication_destination_regions.as_deref()
    }
    /// <p>Replication settings for the Amazon S3 buckets. This parameter uses the IAM role you created that is managed by Security Lake, to ensure the replication setting is correct. </p>
    pub fn replication_role_arn(&self) -> std::option::Option<&str> {
        self.replication_role_arn.as_deref()
    }
    /// <p>Amazon Resource Names (ARNs) uniquely identify Amazon Web Services resources. Security Lake requires an ARN when you need to specify a resource unambiguously across all of Amazon Web Services, such as in IAM policies, Amazon Relational Database Service (Amazon RDS) tags, and API calls. </p>
    pub fn s3_bucket_arn(&self) -> std::option::Option<&str> {
        self.s3_bucket_arn.as_deref()
    }
    /// <p>Retrieves the status of the configuration operation for an account in Amazon Security Lake. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::SettingsStatus> {
        self.status.as_ref()
    }
}
impl LakeConfigurationResponse {
    /// Creates a new builder-style object to manufacture [`LakeConfigurationResponse`](crate::types::LakeConfigurationResponse).
    pub fn builder() -> crate::types::builders::LakeConfigurationResponseBuilder {
        crate::types::builders::LakeConfigurationResponseBuilder::default()
    }
}

/// A builder for [`LakeConfigurationResponse`](crate::types::LakeConfigurationResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LakeConfigurationResponseBuilder {
    pub(crate) encryption_key: std::option::Option<std::string::String>,
    pub(crate) retention_settings:
        std::option::Option<std::vec::Vec<crate::types::RetentionSetting>>,
    pub(crate) tags_map:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) replication_destination_regions:
        std::option::Option<std::vec::Vec<crate::types::Region>>,
    pub(crate) replication_role_arn: std::option::Option<std::string::String>,
    pub(crate) s3_bucket_arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::SettingsStatus>,
}
impl LakeConfigurationResponseBuilder {
    /// <p>The type of encryption key used by secure the Security Lake configuration object.</p>
    pub fn encryption_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.encryption_key = Some(input.into());
        self
    }
    /// <p>The type of encryption key used by secure the Security Lake configuration object.</p>
    pub fn set_encryption_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.encryption_key = input;
        self
    }
    /// Appends an item to `retention_settings`.
    ///
    /// To override the contents of this collection use [`set_retention_settings`](Self::set_retention_settings).
    ///
    /// <p>Retention settings for the destination Amazon S3 buckets. </p>
    pub fn retention_settings(mut self, input: crate::types::RetentionSetting) -> Self {
        let mut v = self.retention_settings.unwrap_or_default();
        v.push(input);
        self.retention_settings = Some(v);
        self
    }
    /// <p>Retention settings for the destination Amazon S3 buckets. </p>
    pub fn set_retention_settings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RetentionSetting>>,
    ) -> Self {
        self.retention_settings = input;
        self
    }
    /// Adds a key-value pair to `tags_map`.
    ///
    /// To override the contents of this collection use [`set_tags_map`](Self::set_tags_map).
    ///
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value, both of which you define.</p>
    pub fn tags_map(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags_map.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags_map = Some(hash_map);
        self
    }
    /// <p>A tag is a label that you assign to an Amazon Web Services resource. Each tag consists of a key and an optional value, both of which you define.</p>
    pub fn set_tags_map(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags_map = input;
        self
    }
    /// Appends an item to `replication_destination_regions`.
    ///
    /// To override the contents of this collection use [`set_replication_destination_regions`](Self::set_replication_destination_regions).
    ///
    /// <p>Replication enables automatic, asynchronous copying of objects across Amazon S3 buckets. Amazon S3 buckets that are configured for object replication can be owned by the same Amazon Web Services account or by different accounts. You can replicate objects to a single destination bucket or to multiple destination buckets. The destination buckets can be in different Amazon Web Services Regions or within the same Region as the source bucket.</p>
    /// <p>Set up one or more rollup Regions by providing the Region or Regions that should contribute to the central rollup Region. </p>
    pub fn replication_destination_regions(mut self, input: crate::types::Region) -> Self {
        let mut v = self.replication_destination_regions.unwrap_or_default();
        v.push(input);
        self.replication_destination_regions = Some(v);
        self
    }
    /// <p>Replication enables automatic, asynchronous copying of objects across Amazon S3 buckets. Amazon S3 buckets that are configured for object replication can be owned by the same Amazon Web Services account or by different accounts. You can replicate objects to a single destination bucket or to multiple destination buckets. The destination buckets can be in different Amazon Web Services Regions or within the same Region as the source bucket.</p>
    /// <p>Set up one or more rollup Regions by providing the Region or Regions that should contribute to the central rollup Region. </p>
    pub fn set_replication_destination_regions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Region>>,
    ) -> Self {
        self.replication_destination_regions = input;
        self
    }
    /// <p>Replication settings for the Amazon S3 buckets. This parameter uses the IAM role you created that is managed by Security Lake, to ensure the replication setting is correct. </p>
    pub fn replication_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.replication_role_arn = Some(input.into());
        self
    }
    /// <p>Replication settings for the Amazon S3 buckets. This parameter uses the IAM role you created that is managed by Security Lake, to ensure the replication setting is correct. </p>
    pub fn set_replication_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.replication_role_arn = input;
        self
    }
    /// <p>Amazon Resource Names (ARNs) uniquely identify Amazon Web Services resources. Security Lake requires an ARN when you need to specify a resource unambiguously across all of Amazon Web Services, such as in IAM policies, Amazon Relational Database Service (Amazon RDS) tags, and API calls. </p>
    pub fn s3_bucket_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_bucket_arn = Some(input.into());
        self
    }
    /// <p>Amazon Resource Names (ARNs) uniquely identify Amazon Web Services resources. Security Lake requires an ARN when you need to specify a resource unambiguously across all of Amazon Web Services, such as in IAM policies, Amazon Relational Database Service (Amazon RDS) tags, and API calls. </p>
    pub fn set_s3_bucket_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_bucket_arn = input;
        self
    }
    /// <p>Retrieves the status of the configuration operation for an account in Amazon Security Lake. </p>
    pub fn status(mut self, input: crate::types::SettingsStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Retrieves the status of the configuration operation for an account in Amazon Security Lake. </p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::SettingsStatus>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`LakeConfigurationResponse`](crate::types::LakeConfigurationResponse).
    pub fn build(self) -> crate::types::LakeConfigurationResponse {
        crate::types::LakeConfigurationResponse {
            encryption_key: self.encryption_key,
            retention_settings: self.retention_settings,
            tags_map: self.tags_map,
            replication_destination_regions: self.replication_destination_regions,
            replication_role_arn: self.replication_role_arn,
            s3_bucket_arn: self.s3_bucket_arn,
            status: self.status,
        }
    }
}
