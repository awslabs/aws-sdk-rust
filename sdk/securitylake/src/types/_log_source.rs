// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Amazon Security Lake can collect logs and events from natively-supported Amazon Web Services services and custom sources. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LogSource {
    /// <p>Specify the account from which you want to collect logs.</p>
    pub account: ::std::option::Option<::std::string::String>,
    /// <p>Specify the Regions from which you want to collect logs.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>Specify the sources from which you want to collect logs.</p>
    pub sources: ::std::option::Option<::std::vec::Vec<crate::types::LogSourceResource>>,
}
impl LogSource {
    /// <p>Specify the account from which you want to collect logs.</p>
    pub fn account(&self) -> ::std::option::Option<&str> {
        self.account.as_deref()
    }
    /// <p>Specify the Regions from which you want to collect logs.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>Specify the sources from which you want to collect logs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sources.is_none()`.
    pub fn sources(&self) -> &[crate::types::LogSourceResource] {
        self.sources.as_deref().unwrap_or_default()
    }
}
impl LogSource {
    /// Creates a new builder-style object to manufacture [`LogSource`](crate::types::LogSource).
    pub fn builder() -> crate::types::builders::LogSourceBuilder {
        crate::types::builders::LogSourceBuilder::default()
    }
}

/// A builder for [`LogSource`](crate::types::LogSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LogSourceBuilder {
    pub(crate) account: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) sources: ::std::option::Option<::std::vec::Vec<crate::types::LogSourceResource>>,
}
impl LogSourceBuilder {
    /// <p>Specify the account from which you want to collect logs.</p>
    pub fn account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the account from which you want to collect logs.</p>
    pub fn set_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account = input;
        self
    }
    /// <p>Specify the account from which you want to collect logs.</p>
    pub fn get_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.account
    }
    /// <p>Specify the Regions from which you want to collect logs.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the Regions from which you want to collect logs.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>Specify the Regions from which you want to collect logs.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>Specify the sources from which you want to collect logs.</p>
    pub fn sources(mut self, input: crate::types::LogSourceResource) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specify the sources from which you want to collect logs.</p>
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::LogSourceResource>>) -> Self {
        self.sources = input;
        self
    }
    /// <p>Specify the sources from which you want to collect logs.</p>
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::LogSourceResource>> {
        &self.sources
    }
    /// Consumes the builder and constructs a [`LogSource`](crate::types::LogSource).
    pub fn build(self) -> crate::types::LogSource {
        crate::types::LogSource {
            account: self.account,
            region: self.region,
            sources: self.sources,
        }
    }
}
