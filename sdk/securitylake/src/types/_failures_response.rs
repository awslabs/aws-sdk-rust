// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Response element for actions that make changes, namely create, update, or delete actions. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FailuresResponse {
    /// <p>List of Amazon Web Services Regions where the failure occurred. </p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
    /// <p>List of all failures. </p>
    #[doc(hidden)]
    pub failures: std::option::Option<std::vec::Vec<crate::types::Failures>>,
}
impl FailuresResponse {
    /// <p>List of Amazon Web Services Regions where the failure occurred. </p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>List of all failures. </p>
    pub fn failures(&self) -> std::option::Option<&[crate::types::Failures]> {
        self.failures.as_deref()
    }
}
impl FailuresResponse {
    /// Creates a new builder-style object to manufacture [`FailuresResponse`](crate::types::FailuresResponse).
    pub fn builder() -> crate::types::builders::FailuresResponseBuilder {
        crate::types::builders::FailuresResponseBuilder::default()
    }
}

/// A builder for [`FailuresResponse`](crate::types::FailuresResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FailuresResponseBuilder {
    pub(crate) region: std::option::Option<std::string::String>,
    pub(crate) failures: std::option::Option<std::vec::Vec<crate::types::Failures>>,
}
impl FailuresResponseBuilder {
    /// <p>List of Amazon Web Services Regions where the failure occurred. </p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>List of Amazon Web Services Regions where the failure occurred. </p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// Appends an item to `failures`.
    ///
    /// To override the contents of this collection use [`set_failures`](Self::set_failures).
    ///
    /// <p>List of all failures. </p>
    pub fn failures(mut self, input: crate::types::Failures) -> Self {
        let mut v = self.failures.unwrap_or_default();
        v.push(input);
        self.failures = Some(v);
        self
    }
    /// <p>List of all failures. </p>
    pub fn set_failures(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Failures>>,
    ) -> Self {
        self.failures = input;
        self
    }
    /// Consumes the builder and constructs a [`FailuresResponse`](crate::types::FailuresResponse).
    pub fn build(self) -> crate::types::FailuresResponse {
        crate::types::FailuresResponse {
            region: self.region,
            failures: self.failures,
        }
    }
}
