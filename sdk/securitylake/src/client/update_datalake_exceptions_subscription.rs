// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateDatalakeExceptionsSubscription`](crate::operation::update_datalake_exceptions_subscription::builders::UpdateDatalakeExceptionsSubscriptionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`subscription_protocol(SubscriptionProtocolType)`](crate::operation::update_datalake_exceptions_subscription::builders::UpdateDatalakeExceptionsSubscriptionFluentBuilder::subscription_protocol) / [`set_subscription_protocol(Option<SubscriptionProtocolType>)`](crate::operation::update_datalake_exceptions_subscription::builders::UpdateDatalakeExceptionsSubscriptionFluentBuilder::set_subscription_protocol): <p>The subscription protocol to which exception messages are posted. </p>
    ///   - [`notification_endpoint(impl ::std::convert::Into<String>)`](crate::operation::update_datalake_exceptions_subscription::builders::UpdateDatalakeExceptionsSubscriptionFluentBuilder::notification_endpoint) / [`set_notification_endpoint(Option<String>)`](crate::operation::update_datalake_exceptions_subscription::builders::UpdateDatalakeExceptionsSubscriptionFluentBuilder::set_notification_endpoint): <p>The account that is subscribed to receive exception notifications.</p>
    /// - On success, responds with [`UpdateDatalakeExceptionsSubscriptionOutput`](crate::operation::update_datalake_exceptions_subscription::UpdateDatalakeExceptionsSubscriptionOutput)
    /// - On failure, responds with [`SdkError<UpdateDatalakeExceptionsSubscriptionError>`](crate::operation::update_datalake_exceptions_subscription::UpdateDatalakeExceptionsSubscriptionError)
    pub fn update_datalake_exceptions_subscription(&self) -> crate::operation::update_datalake_exceptions_subscription::builders::UpdateDatalakeExceptionsSubscriptionFluentBuilder{
        crate::operation::update_datalake_exceptions_subscription::builders::UpdateDatalakeExceptionsSubscriptionFluentBuilder::new(self.handle.clone())
    }
}
