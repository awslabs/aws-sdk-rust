// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateCustomLogSource`](crate::operation::create_custom_log_source::builders::CreateCustomLogSourceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`source_name(impl Into<String>)`](crate::operation::create_custom_log_source::builders::CreateCustomLogSourceFluentBuilder::source_name) / [`set_source_name(Option<String>)`](crate::operation::create_custom_log_source::builders::CreateCustomLogSourceFluentBuilder::set_source_name):<br>required: **true**<br><p>Specify the name for a third-party custom source. This must be a Regionally unique value.</p><br>
    ///   - [`source_version(impl Into<String>)`](crate::operation::create_custom_log_source::builders::CreateCustomLogSourceFluentBuilder::source_version) / [`set_source_version(Option<String>)`](crate::operation::create_custom_log_source::builders::CreateCustomLogSourceFluentBuilder::set_source_version):<br>required: **false**<br><p>Specify the source version for the third-party custom source, to limit log collection to a specific version of custom data source.</p><br>
    ///   - [`event_classes(impl Into<String>)`](crate::operation::create_custom_log_source::builders::CreateCustomLogSourceFluentBuilder::event_classes) / [`set_event_classes(Option<Vec::<String>>)`](crate::operation::create_custom_log_source::builders::CreateCustomLogSourceFluentBuilder::set_event_classes):<br>required: **false**<br><p>The Open Cybersecurity Schema Framework (OCSF) event classes which describes the type of data that the custom source will send to Security Lake. The supported event classes are:</p>  <ul>   <li> <p> <code>ACCESS_ACTIVITY</code> </p> </li>   <li> <p> <code>FILE_ACTIVITY</code> </p> </li>   <li> <p> <code>KERNEL_ACTIVITY</code> </p> </li>   <li> <p> <code>KERNEL_EXTENSION</code> </p> </li>   <li> <p> <code>MEMORY_ACTIVITY</code> </p> </li>   <li> <p> <code>MODULE_ACTIVITY</code> </p> </li>   <li> <p> <code>PROCESS_ACTIVITY</code> </p> </li>   <li> <p> <code>REGISTRY_KEY_ACTIVITY</code> </p> </li>   <li> <p> <code>REGISTRY_VALUE_ACTIVITY</code> </p> </li>   <li> <p> <code>RESOURCE_ACTIVITY</code> </p> </li>   <li> <p> <code>SCHEDULED_JOB_ACTIVITY</code> </p> </li>   <li> <p> <code>SECURITY_FINDING</code> </p> </li>   <li> <p> <code>ACCOUNT_CHANGE</code> </p> </li>   <li> <p> <code>AUTHENTICATION</code> </p> </li>   <li> <p> <code>AUTHORIZATION</code> </p> </li>   <li> <p> <code>ENTITY_MANAGEMENT_AUDIT</code> </p> </li>   <li> <p> <code>DHCP_ACTIVITY</code> </p> </li>   <li> <p> <code>NETWORK_ACTIVITY</code> </p> </li>   <li> <p> <code>DNS_ACTIVITY</code> </p> </li>   <li> <p> <code>FTP_ACTIVITY</code> </p> </li>   <li> <p> <code>HTTP_ACTIVITY</code> </p> </li>   <li> <p> <code>RDP_ACTIVITY</code> </p> </li>   <li> <p> <code>SMB_ACTIVITY</code> </p> </li>   <li> <p> <code>SSH_ACTIVITY</code> </p> </li>   <li> <p> <code>CONFIG_STATE</code> </p> </li>   <li> <p> <code>INVENTORY_INFO</code> </p> </li>   <li> <p> <code>EMAIL_ACTIVITY</code> </p> </li>   <li> <p> <code>API_ACTIVITY</code> </p> </li>   <li> <p> <code>CLOUD_API</code> </p> </li>  </ul><br>
    ///   - [`configuration(CustomLogSourceConfiguration)`](crate::operation::create_custom_log_source::builders::CreateCustomLogSourceFluentBuilder::configuration) / [`set_configuration(Option<CustomLogSourceConfiguration>)`](crate::operation::create_custom_log_source::builders::CreateCustomLogSourceFluentBuilder::set_configuration):<br>required: **false**<br><p>The configuration for the third-party custom source.</p><br>
    /// - On success, responds with [`CreateCustomLogSourceOutput`](crate::operation::create_custom_log_source::CreateCustomLogSourceOutput) with field(s):
    ///   - [`source(Option<CustomLogSourceResource>)`](crate::operation::create_custom_log_source::CreateCustomLogSourceOutput::source): <p>The created third-party custom source.</p>
    /// - On failure, responds with [`SdkError<CreateCustomLogSourceError>`](crate::operation::create_custom_log_source::CreateCustomLogSourceError)
    pub fn create_custom_log_source(&self) -> crate::operation::create_custom_log_source::builders::CreateCustomLogSourceFluentBuilder {
        crate::operation::create_custom_log_source::builders::CreateCustomLogSourceFluentBuilder::new(self.handle.clone())
    }
}
