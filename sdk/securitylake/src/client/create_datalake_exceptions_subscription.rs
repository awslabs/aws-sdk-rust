// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateDatalakeExceptionsSubscription`](crate::operation::create_datalake_exceptions_subscription::builders::CreateDatalakeExceptionsSubscriptionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`subscription_protocol(SubscriptionProtocolType)`](crate::operation::create_datalake_exceptions_subscription::builders::CreateDatalakeExceptionsSubscriptionFluentBuilder::subscription_protocol) / [`set_subscription_protocol(Option<SubscriptionProtocolType>)`](crate::operation::create_datalake_exceptions_subscription::builders::CreateDatalakeExceptionsSubscriptionFluentBuilder::set_subscription_protocol): <p>The subscription protocol to which exception notifications are posted. </p>
    ///   - [`notification_endpoint(impl Into<String>)`](crate::operation::create_datalake_exceptions_subscription::builders::CreateDatalakeExceptionsSubscriptionFluentBuilder::notification_endpoint) / [`set_notification_endpoint(Option<String>)`](crate::operation::create_datalake_exceptions_subscription::builders::CreateDatalakeExceptionsSubscriptionFluentBuilder::set_notification_endpoint): <p>The Amazon Web Services account where you want to receive exception notifications.</p>
    /// - On success, responds with [`CreateDatalakeExceptionsSubscriptionOutput`](crate::operation::create_datalake_exceptions_subscription::CreateDatalakeExceptionsSubscriptionOutput)
    /// - On failure, responds with [`SdkError<CreateDatalakeExceptionsSubscriptionError>`](crate::operation::create_datalake_exceptions_subscription::CreateDatalakeExceptionsSubscriptionError)
    pub fn create_datalake_exceptions_subscription(&self) -> crate::operation::create_datalake_exceptions_subscription::builders::CreateDatalakeExceptionsSubscriptionFluentBuilder{
        crate::operation::create_datalake_exceptions_subscription::builders::CreateDatalakeExceptionsSubscriptionFluentBuilder::new(self.handle.clone())
    }
}
