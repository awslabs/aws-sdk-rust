// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListLogSources`](crate::operation::list_log_sources::builders::ListLogSourcesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_log_sources::builders::ListLogSourcesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`input_order(Vec<Dimension>)`](crate::operation::list_log_sources::builders::ListLogSourcesFluentBuilder::input_order) / [`set_input_order(Option<Vec<Dimension>>)`](crate::operation::list_log_sources::builders::ListLogSourcesFluentBuilder::set_input_order): <p>Lists the log sources in input order, namely Region, source type, and member account.</p>
    ///   - [`list_all_dimensions(HashMap<String, HashMap<String, Vec<String>>>)`](crate::operation::list_log_sources::builders::ListLogSourcesFluentBuilder::list_all_dimensions) / [`set_list_all_dimensions(Option<HashMap<String, HashMap<String, Vec<String>>>>)`](crate::operation::list_log_sources::builders::ListLogSourcesFluentBuilder::set_list_all_dimensions): <p>List the view of log sources for enabled Amazon Security Lake accounts for specific Amazon Web Services sources from specific accounts and specific Regions.</p>
    ///   - [`list_two_dimensions(HashMap<String, Vec<String>>)`](crate::operation::list_log_sources::builders::ListLogSourcesFluentBuilder::list_two_dimensions) / [`set_list_two_dimensions(Option<HashMap<String, Vec<String>>>)`](crate::operation::list_log_sources::builders::ListLogSourcesFluentBuilder::set_list_two_dimensions): <p>Lists the view of log sources for enabled Security Lake accounts for specific Amazon Web Services sources from specific accounts or specific Regions.</p>
    ///   - [`list_single_dimension(Vec<String>)`](crate::operation::list_log_sources::builders::ListLogSourcesFluentBuilder::list_single_dimension) / [`set_list_single_dimension(Option<Vec<String>>)`](crate::operation::list_log_sources::builders::ListLogSourcesFluentBuilder::set_list_single_dimension): <p>List the view of log sources for enabled Security Lake accounts for all Amazon Web Services sources from specific accounts or specific Regions.</p>
    ///   - [`max_results(i32)`](crate::operation::list_log_sources::builders::ListLogSourcesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_log_sources::builders::ListLogSourcesFluentBuilder::set_max_results): <p>The maximum number of accounts for which the log sources are displayed.</p>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_log_sources::builders::ListLogSourcesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_log_sources::builders::ListLogSourcesFluentBuilder::set_next_token): <p>If nextToken is returned, there are more results available. You can repeat the call using the returned token to retrieve the next page.</p>
    /// - On success, responds with [`ListLogSourcesOutput`](crate::operation::list_log_sources::ListLogSourcesOutput) with field(s):
    ///   - [`region_source_types_accounts_list(Option<Vec<HashMap<String, HashMap<String, Vec<String>>>>>)`](crate::operation::list_log_sources::ListLogSourcesOutput::region_source_types_accounts_list): <p>Lists the log sources by Regions for enabled Security Lake accounts.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_log_sources::ListLogSourcesOutput::next_token): <p>If nextToken is returned, there are more results available. You can repeat the call using the returned token to retrieve the next page.</p>
    /// - On failure, responds with [`SdkError<ListLogSourcesError>`](crate::operation::list_log_sources::ListLogSourcesError)
    pub fn list_log_sources(
        &self,
    ) -> crate::operation::list_log_sources::builders::ListLogSourcesFluentBuilder {
        crate::operation::list_log_sources::builders::ListLogSourcesFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
