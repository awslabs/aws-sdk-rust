// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListDataLakeExceptions`](crate::operation::list_data_lake_exceptions::builders::ListDataLakeExceptionsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::list_data_lake_exceptions::builders::ListDataLakeExceptionsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`regions(impl Into<String>)`](crate::operation::list_data_lake_exceptions::builders::ListDataLakeExceptionsFluentBuilder::regions) / [`set_regions(Option<Vec::<String>>)`](crate::operation::list_data_lake_exceptions::builders::ListDataLakeExceptionsFluentBuilder::set_regions):<br>required: **false**<br><p>List the Amazon Web Services Regions from which exceptions are retrieved.</p><br>
    ///   - [`max_results(i32)`](crate::operation::list_data_lake_exceptions::builders::ListDataLakeExceptionsFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_data_lake_exceptions::builders::ListDataLakeExceptionsFluentBuilder::set_max_results):<br>required: **false**<br><p>List the maximum number of failures in Security Lake.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_data_lake_exceptions::builders::ListDataLakeExceptionsFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_data_lake_exceptions::builders::ListDataLakeExceptionsFluentBuilder::set_next_token):<br>required: **false**<br><p>List if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>  <p>Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p><br>
    /// - On success, responds with [`ListDataLakeExceptionsOutput`](crate::operation::list_data_lake_exceptions::ListDataLakeExceptionsOutput) with field(s):
    ///   - [`exceptions(Option<Vec::<DataLakeException>>)`](crate::operation::list_data_lake_exceptions::ListDataLakeExceptionsOutput::exceptions): <p>Lists the failures that cannot be retried in the current Region.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_data_lake_exceptions::ListDataLakeExceptionsOutput::next_token): <p>List if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>  <p>Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    /// - On failure, responds with [`SdkError<ListDataLakeExceptionsError>`](crate::operation::list_data_lake_exceptions::ListDataLakeExceptionsError)
    pub fn list_data_lake_exceptions(&self) -> crate::operation::list_data_lake_exceptions::builders::ListDataLakeExceptionsFluentBuilder {
        crate::operation::list_data_lake_exceptions::builders::ListDataLakeExceptionsFluentBuilder::new(self.handle.clone())
    }
}
