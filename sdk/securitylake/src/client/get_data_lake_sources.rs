// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetDataLakeSources`](crate::operation::get_data_lake_sources::builders::GetDataLakeSourcesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::get_data_lake_sources::builders::GetDataLakeSourcesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`accounts(impl Into<String>)`](crate::operation::get_data_lake_sources::builders::GetDataLakeSourcesFluentBuilder::accounts) / [`set_accounts(Option<Vec::<String>>)`](crate::operation::get_data_lake_sources::builders::GetDataLakeSourcesFluentBuilder::set_accounts):<br>required: **false**<br><p>The Amazon Web Services account ID for which a static snapshot of the current Amazon Web Services Region, including enabled accounts and log sources, is retrieved.</p><br>
    ///   - [`max_results(i32)`](crate::operation::get_data_lake_sources::builders::GetDataLakeSourcesFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::get_data_lake_sources::builders::GetDataLakeSourcesFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum limit of accounts for which the static snapshot of the current Region, including enabled accounts and log sources, is retrieved.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::get_data_lake_sources::builders::GetDataLakeSourcesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::get_data_lake_sources::builders::GetDataLakeSourcesFluentBuilder::set_next_token):<br>required: **false**<br><p>Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>  <p>Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p><br>
    /// - On success, responds with [`GetDataLakeSourcesOutput`](crate::operation::get_data_lake_sources::GetDataLakeSourcesOutput) with field(s):
    ///   - [`data_lake_arn(Option<String>)`](crate::operation::get_data_lake_sources::GetDataLakeSourcesOutput::data_lake_arn): <p>The Amazon Resource Name (ARN) created by you to provide to the subscriber. For more information about ARNs and how to use them in policies, see the <a href="https://docs.aws.amazon.com/security-lake/latest/userguide/subscriber-management.html">Amazon Security Lake User Guide</a>.</p>
    ///   - [`data_lake_sources(Option<Vec::<DataLakeSource>>)`](crate::operation::get_data_lake_sources::GetDataLakeSourcesOutput::data_lake_sources): <p>The list of enabled accounts and enabled sources.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::get_data_lake_sources::GetDataLakeSourcesOutput::next_token): <p>Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged.</p>  <p>Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    /// - On failure, responds with [`SdkError<GetDataLakeSourcesError>`](crate::operation::get_data_lake_sources::GetDataLakeSourcesError)
    pub fn get_data_lake_sources(&self) -> crate::operation::get_data_lake_sources::builders::GetDataLakeSourcesFluentBuilder {
        crate::operation::get_data_lake_sources::builders::GetDataLakeSourcesFluentBuilder::new(self.handle.clone())
    }
}
