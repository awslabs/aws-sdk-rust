// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetDatalakeStatus`](crate::operation::get_datalake_status::builders::GetDatalakeStatusFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::get_datalake_status::builders::GetDatalakeStatusFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_set(Vec<String>)`](crate::operation::get_datalake_status::builders::GetDatalakeStatusFluentBuilder::account_set) / [`set_account_set(Option<Vec<String>>)`](crate::operation::get_datalake_status::builders::GetDatalakeStatusFluentBuilder::set_account_set): <p>The Amazon Web Services account ID for which a static snapshot of the current Amazon Web Services Region, including enabled accounts and log sources, is retrieved.</p>
    ///   - [`max_account_results(i32)`](crate::operation::get_datalake_status::builders::GetDatalakeStatusFluentBuilder::max_account_results) / [`set_max_account_results(Option<i32>)`](crate::operation::get_datalake_status::builders::GetDatalakeStatusFluentBuilder::set_max_account_results): <p>The maximum limit of accounts for which the static snapshot of the current Region, including enabled accounts and log sources, is retrieved.</p>
    ///   - [`next_token(impl ::std::convert::Into<String>)`](crate::operation::get_datalake_status::builders::GetDatalakeStatusFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::get_datalake_status::builders::GetDatalakeStatusFluentBuilder::set_next_token): <p>Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>  <p>Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    /// - On success, responds with [`GetDatalakeStatusOutput`](crate::operation::get_datalake_status::GetDatalakeStatusOutput) with field(s):
    ///   - [`account_sources_list(Option<Vec<AccountSources>>)`](crate::operation::get_datalake_status::GetDatalakeStatusOutput::account_sources_list): <p>The list of enabled accounts and enabled sources.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::get_datalake_status::GetDatalakeStatusOutput::next_token): <p>Lists if there are more results available. The value of nextToken is a unique pagination token for each page. Repeat the call using the returned token to retrieve the next page. Keep all other arguments unchanged. </p>  <p>Each pagination token expires after 24 hours. Using an expired pagination token will return an HTTP 400 InvalidToken error.</p>
    /// - On failure, responds with [`SdkError<GetDatalakeStatusError>`](crate::operation::get_datalake_status::GetDatalakeStatusError)
    pub fn get_datalake_status(
        &self,
    ) -> crate::operation::get_datalake_status::builders::GetDatalakeStatusFluentBuilder {
        crate::operation::get_datalake_status::builders::GetDatalakeStatusFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
