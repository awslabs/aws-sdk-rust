// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateDatalake`](crate::client::fluent_builders::CreateDatalake) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`regions(Vec<Region>)`](crate::client::fluent_builders::CreateDatalake::regions) / [`set_regions(Option<Vec<Region>>)`](crate::client::fluent_builders::CreateDatalake::set_regions): <p>Enable Security Lake in the specified Regions. To enable Security Lake in specific Amazon Web Services Regions, such as us-east-1 or ap-northeast-3, provide the Region codes. For a list of Region codes, see <a href="https://docs.aws.amazon.com/general/latest/gr/securitylake.html">Amazon Security Lake endpoints</a> in the Amazon Web Services General Reference.</p>
    ///   - [`configurations(HashMap<Region, LakeConfigurationRequest>)`](crate::client::fluent_builders::CreateDatalake::configurations) / [`set_configurations(Option<HashMap<Region, LakeConfigurationRequest>>)`](crate::client::fluent_builders::CreateDatalake::set_configurations): <p>Specify the Region or Regions that will contribute data to the rollup region.</p>
    ///   - [`enable_all(bool)`](crate::client::fluent_builders::CreateDatalake::enable_all) / [`set_enable_all(Option<bool>)`](crate::client::fluent_builders::CreateDatalake::set_enable_all): <p>Enable Security Lake in all Regions.</p>
    ///   - [`meta_store_manager_role_arn(impl Into<String>)`](crate::client::fluent_builders::CreateDatalake::meta_store_manager_role_arn) / [`set_meta_store_manager_role_arn(Option<String>)`](crate::client::fluent_builders::CreateDatalake::set_meta_store_manager_role_arn): <p>The Amazon Resource Name (ARN) used to create and update the Glue table. This table contains partitions generated by the ingestion and normalization of Amazon Web Services log sources and custom sources.</p>
    /// - On success, responds with [`CreateDatalakeOutput`](crate::output::CreateDatalakeOutput)
    /// - On failure, responds with [`SdkError<CreateDatalakeError>`](crate::error::CreateDatalakeError)
    pub fn create_datalake(&self) -> crate::client::fluent_builders::CreateDatalake {
        crate::client::fluent_builders::CreateDatalake::new(self.handle.clone())
    }
}
