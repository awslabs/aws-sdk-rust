// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteKxUserInput {
    /// <p>A unique identifier for the user that you want to delete.</p>
    pub user_name: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the kdb environment.</p>
    pub environment_id: ::std::option::Option<::std::string::String>,
}
impl DeleteKxUserInput {
    /// <p>A unique identifier for the user that you want to delete.</p>
    pub fn user_name(&self) -> ::std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>A unique identifier for the kdb environment.</p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
}
impl DeleteKxUserInput {
    /// Creates a new builder-style object to manufacture [`DeleteKxUserInput`](crate::operation::delete_kx_user::DeleteKxUserInput).
    pub fn builder() -> crate::operation::delete_kx_user::builders::DeleteKxUserInputBuilder {
        crate::operation::delete_kx_user::builders::DeleteKxUserInputBuilder::default()
    }
}

/// A builder for [`DeleteKxUserInput`](crate::operation::delete_kx_user::DeleteKxUserInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteKxUserInputBuilder {
    pub(crate) user_name: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
}
impl DeleteKxUserInputBuilder {
    /// <p>A unique identifier for the user that you want to delete.</p>
    /// This field is required.
    pub fn user_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the user that you want to delete.</p>
    pub fn set_user_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>A unique identifier for the user that you want to delete.</p>
    pub fn get_user_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_name
    }
    /// <p>A unique identifier for the kdb environment.</p>
    /// This field is required.
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the kdb environment.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>A unique identifier for the kdb environment.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// Consumes the builder and constructs a [`DeleteKxUserInput`](crate::operation::delete_kx_user::DeleteKxUserInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_kx_user::DeleteKxUserInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::delete_kx_user::DeleteKxUserInput {
            user_name: self.user_name,
            environment_id: self.environment_id,
        })
    }
}
