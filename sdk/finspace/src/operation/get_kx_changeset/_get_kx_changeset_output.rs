// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetKxChangesetOutput {
    /// <p>A unique identifier for the changeset.</p>
    pub changeset_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the kdb database.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for the kdb environment.</p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of change request objects that are run in order.</p>
    pub change_requests: ::std::option::Option<::std::vec::Vec<crate::types::ChangeRequest>>,
    /// <p>The timestamp at which the changeset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Beginning time from which the changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub active_from_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp at which the changeset was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub last_modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Status of the changeset creation process.</p>
    /// <ul>
    /// <li> <p>Pending – Changeset creation is pending.</p> </li>
    /// <li> <p>Processing – Changeset creation is running.</p> </li>
    /// <li> <p>Failed – Changeset creation has failed.</p> </li>
    /// <li> <p>Complete – Changeset creation has succeeded.</p> </li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::ChangesetStatus>,
    /// <p>Provides details in the event of a failed flow, including the error type and the related error message.</p>
    pub error_info: ::std::option::Option<crate::types::ErrorInfo>,
    _request_id: Option<String>,
}
impl GetKxChangesetOutput {
    /// <p>A unique identifier for the changeset.</p>
    pub fn changeset_id(&self) -> ::std::option::Option<&str> {
        self.changeset_id.as_deref()
    }
    /// <p>The name of the kdb database.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>A unique identifier for the kdb environment.</p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>A list of change request objects that are run in order.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.change_requests.is_none()`.
    pub fn change_requests(&self) -> &[crate::types::ChangeRequest] {
        self.change_requests.as_deref().unwrap_or_default()
    }
    /// <p>The timestamp at which the changeset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>Beginning time from which the changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn active_from_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.active_from_timestamp.as_ref()
    }
    /// <p>The timestamp at which the changeset was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn last_modified_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_timestamp.as_ref()
    }
    /// <p>Status of the changeset creation process.</p>
    /// <ul>
    /// <li> <p>Pending – Changeset creation is pending.</p> </li>
    /// <li> <p>Processing – Changeset creation is running.</p> </li>
    /// <li> <p>Failed – Changeset creation has failed.</p> </li>
    /// <li> <p>Complete – Changeset creation has succeeded.</p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ChangesetStatus> {
        self.status.as_ref()
    }
    /// <p>Provides details in the event of a failed flow, including the error type and the related error message.</p>
    pub fn error_info(&self) -> ::std::option::Option<&crate::types::ErrorInfo> {
        self.error_info.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetKxChangesetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetKxChangesetOutput {
    /// Creates a new builder-style object to manufacture [`GetKxChangesetOutput`](crate::operation::get_kx_changeset::GetKxChangesetOutput).
    pub fn builder() -> crate::operation::get_kx_changeset::builders::GetKxChangesetOutputBuilder {
        crate::operation::get_kx_changeset::builders::GetKxChangesetOutputBuilder::default()
    }
}

/// A builder for [`GetKxChangesetOutput`](crate::operation::get_kx_changeset::GetKxChangesetOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetKxChangesetOutputBuilder {
    pub(crate) changeset_id: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) change_requests: ::std::option::Option<::std::vec::Vec<crate::types::ChangeRequest>>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) active_from_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::ChangesetStatus>,
    pub(crate) error_info: ::std::option::Option<crate::types::ErrorInfo>,
    _request_id: Option<String>,
}
impl GetKxChangesetOutputBuilder {
    /// <p>A unique identifier for the changeset.</p>
    pub fn changeset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.changeset_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the changeset.</p>
    pub fn set_changeset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.changeset_id = input;
        self
    }
    /// <p>A unique identifier for the changeset.</p>
    pub fn get_changeset_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.changeset_id
    }
    /// <p>The name of the kdb database.</p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the kdb database.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The name of the kdb database.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>A unique identifier for the kdb environment.</p>
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the kdb environment.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>A unique identifier for the kdb environment.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// Appends an item to `change_requests`.
    ///
    /// To override the contents of this collection use [`set_change_requests`](Self::set_change_requests).
    ///
    /// <p>A list of change request objects that are run in order.</p>
    pub fn change_requests(mut self, input: crate::types::ChangeRequest) -> Self {
        let mut v = self.change_requests.unwrap_or_default();
        v.push(input);
        self.change_requests = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of change request objects that are run in order.</p>
    pub fn set_change_requests(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ChangeRequest>>) -> Self {
        self.change_requests = input;
        self
    }
    /// <p>A list of change request objects that are run in order.</p>
    pub fn get_change_requests(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ChangeRequest>> {
        &self.change_requests
    }
    /// <p>The timestamp at which the changeset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the changeset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The timestamp at which the changeset was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    /// <p>Beginning time from which the changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn active_from_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.active_from_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>Beginning time from which the changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_active_from_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.active_from_timestamp = input;
        self
    }
    /// <p>Beginning time from which the changeset is active. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn get_active_from_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.active_from_timestamp
    }
    /// <p>The timestamp at which the changeset was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn last_modified_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the changeset was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_last_modified_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_timestamp = input;
        self
    }
    /// <p>The timestamp at which the changeset was updated in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn get_last_modified_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_timestamp
    }
    /// <p>Status of the changeset creation process.</p>
    /// <ul>
    /// <li> <p>Pending – Changeset creation is pending.</p> </li>
    /// <li> <p>Processing – Changeset creation is running.</p> </li>
    /// <li> <p>Failed – Changeset creation has failed.</p> </li>
    /// <li> <p>Complete – Changeset creation has succeeded.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::ChangesetStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the changeset creation process.</p>
    /// <ul>
    /// <li> <p>Pending – Changeset creation is pending.</p> </li>
    /// <li> <p>Processing – Changeset creation is running.</p> </li>
    /// <li> <p>Failed – Changeset creation has failed.</p> </li>
    /// <li> <p>Complete – Changeset creation has succeeded.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ChangesetStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status of the changeset creation process.</p>
    /// <ul>
    /// <li> <p>Pending – Changeset creation is pending.</p> </li>
    /// <li> <p>Processing – Changeset creation is running.</p> </li>
    /// <li> <p>Failed – Changeset creation has failed.</p> </li>
    /// <li> <p>Complete – Changeset creation has succeeded.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ChangesetStatus> {
        &self.status
    }
    /// <p>Provides details in the event of a failed flow, including the error type and the related error message.</p>
    pub fn error_info(mut self, input: crate::types::ErrorInfo) -> Self {
        self.error_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides details in the event of a failed flow, including the error type and the related error message.</p>
    pub fn set_error_info(mut self, input: ::std::option::Option<crate::types::ErrorInfo>) -> Self {
        self.error_info = input;
        self
    }
    /// <p>Provides details in the event of a failed flow, including the error type and the related error message.</p>
    pub fn get_error_info(&self) -> &::std::option::Option<crate::types::ErrorInfo> {
        &self.error_info
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetKxChangesetOutput`](crate::operation::get_kx_changeset::GetKxChangesetOutput).
    pub fn build(self) -> crate::operation::get_kx_changeset::GetKxChangesetOutput {
        crate::operation::get_kx_changeset::GetKxChangesetOutput {
            changeset_id: self.changeset_id,
            database_name: self.database_name,
            environment_id: self.environment_id,
            change_requests: self.change_requests,
            created_timestamp: self.created_timestamp,
            active_from_timestamp: self.active_from_timestamp,
            last_modified_timestamp: self.last_modified_timestamp,
            status: self.status,
            error_info: self.error_info,
            _request_id: self._request_id,
        }
    }
}
