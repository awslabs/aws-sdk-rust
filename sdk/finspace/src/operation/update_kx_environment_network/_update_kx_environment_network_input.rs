// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateKxEnvironmentNetworkInput {
    /// <p>A unique identifier for the kdb environment.</p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the transit gateway and network configuration to connect the kdb environment to an internal network.</p>
    pub transit_gateway_configuration: ::std::option::Option<crate::types::TransitGatewayConfiguration>,
    /// <p>A list of DNS server name and server IP. This is used to set up Route-53 outbound resolvers.</p>
    pub custom_dns_configuration: ::std::option::Option<::std::vec::Vec<crate::types::CustomDnsServer>>,
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateKxEnvironmentNetworkInput {
    /// <p>A unique identifier for the kdb environment.</p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>Specifies the transit gateway and network configuration to connect the kdb environment to an internal network.</p>
    pub fn transit_gateway_configuration(&self) -> ::std::option::Option<&crate::types::TransitGatewayConfiguration> {
        self.transit_gateway_configuration.as_ref()
    }
    /// <p>A list of DNS server name and server IP. This is used to set up Route-53 outbound resolvers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.custom_dns_configuration.is_none()`.
    pub fn custom_dns_configuration(&self) -> &[crate::types::CustomDnsServer] {
        self.custom_dns_configuration.as_deref().unwrap_or_default()
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl UpdateKxEnvironmentNetworkInput {
    /// Creates a new builder-style object to manufacture [`UpdateKxEnvironmentNetworkInput`](crate::operation::update_kx_environment_network::UpdateKxEnvironmentNetworkInput).
    pub fn builder() -> crate::operation::update_kx_environment_network::builders::UpdateKxEnvironmentNetworkInputBuilder {
        crate::operation::update_kx_environment_network::builders::UpdateKxEnvironmentNetworkInputBuilder::default()
    }
}

/// A builder for [`UpdateKxEnvironmentNetworkInput`](crate::operation::update_kx_environment_network::UpdateKxEnvironmentNetworkInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateKxEnvironmentNetworkInputBuilder {
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) transit_gateway_configuration: ::std::option::Option<crate::types::TransitGatewayConfiguration>,
    pub(crate) custom_dns_configuration: ::std::option::Option<::std::vec::Vec<crate::types::CustomDnsServer>>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
}
impl UpdateKxEnvironmentNetworkInputBuilder {
    /// <p>A unique identifier for the kdb environment.</p>
    /// This field is required.
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the kdb environment.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>A unique identifier for the kdb environment.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>Specifies the transit gateway and network configuration to connect the kdb environment to an internal network.</p>
    pub fn transit_gateway_configuration(mut self, input: crate::types::TransitGatewayConfiguration) -> Self {
        self.transit_gateway_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the transit gateway and network configuration to connect the kdb environment to an internal network.</p>
    pub fn set_transit_gateway_configuration(mut self, input: ::std::option::Option<crate::types::TransitGatewayConfiguration>) -> Self {
        self.transit_gateway_configuration = input;
        self
    }
    /// <p>Specifies the transit gateway and network configuration to connect the kdb environment to an internal network.</p>
    pub fn get_transit_gateway_configuration(&self) -> &::std::option::Option<crate::types::TransitGatewayConfiguration> {
        &self.transit_gateway_configuration
    }
    /// Appends an item to `custom_dns_configuration`.
    ///
    /// To override the contents of this collection use [`set_custom_dns_configuration`](Self::set_custom_dns_configuration).
    ///
    /// <p>A list of DNS server name and server IP. This is used to set up Route-53 outbound resolvers.</p>
    pub fn custom_dns_configuration(mut self, input: crate::types::CustomDnsServer) -> Self {
        let mut v = self.custom_dns_configuration.unwrap_or_default();
        v.push(input);
        self.custom_dns_configuration = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of DNS server name and server IP. This is used to set up Route-53 outbound resolvers.</p>
    pub fn set_custom_dns_configuration(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CustomDnsServer>>) -> Self {
        self.custom_dns_configuration = input;
        self
    }
    /// <p>A list of DNS server name and server IP. This is used to set up Route-53 outbound resolvers.</p>
    pub fn get_custom_dns_configuration(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CustomDnsServer>> {
        &self.custom_dns_configuration
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Consumes the builder and constructs a [`UpdateKxEnvironmentNetworkInput`](crate::operation::update_kx_environment_network::UpdateKxEnvironmentNetworkInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_kx_environment_network::UpdateKxEnvironmentNetworkInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_kx_environment_network::UpdateKxEnvironmentNetworkInput {
            environment_id: self.environment_id,
            transit_gateway_configuration: self.transit_gateway_configuration,
            custom_dns_configuration: self.custom_dns_configuration,
            client_token: self.client_token,
        })
    }
}
