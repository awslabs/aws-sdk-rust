// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetKxClusterOutput {
    /// <p>The status of cluster creation.</p>
    /// <ul>
    /// <li> <p>PENDING – The cluster is pending creation.</p> </li>
    /// <li> <p>CREATING – The cluster creation process is in progress.</p> </li>
    /// <li> <p>CREATE_FAILED – The cluster creation process has failed.</p> </li>
    /// <li> <p>RUNNING – The cluster creation process is running.</p> </li>
    /// <li> <p>UPDATING – The cluster is in the process of being updated.</p> </li>
    /// <li> <p>DELETING – The cluster is in the process of being deleted.</p> </li>
    /// <li> <p>DELETED – The cluster has been deleted.</p> </li>
    /// <li> <p>DELETE_FAILED – The cluster failed to delete.</p> </li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::KxClusterStatus>,
    /// <p>The error message when a failed state occurs. </p>
    pub status_reason: ::std::option::Option<::std::string::String>,
    /// <p>A unique name for the cluster.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the type of KDB database that is being created. The following types are available: </p>
    /// <ul>
    /// <li> <p>HDB – A Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed kdb databases mounted to the cluster.</p> </li>
    /// <li> <p>RDB – A Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the <code>savedownStorageConfiguration</code> parameter.</p> </li>
    /// <li> <p>GATEWAY – A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a writable local storage.</p> </li>
    /// </ul>
    pub cluster_type: ::std::option::Option<crate::types::KxClusterType>,
    /// <p> A list of databases mounted on the cluster.</p>
    pub databases: ::std::option::Option<::std::vec::Vec<crate::types::KxDatabaseConfiguration>>,
    /// <p>The configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. </p>
    pub cache_storage_configurations: ::std::option::Option<::std::vec::Vec<crate::types::KxCacheStorageConfiguration>>,
    /// <p>The configuration based on which FinSpace will scale in or scale out nodes in your cluster.</p>
    pub auto_scaling_configuration: ::std::option::Option<crate::types::AutoScalingConfiguration>,
    /// <p>A description of the cluster.</p>
    pub cluster_description: ::std::option::Option<::std::string::String>,
    /// <p>A structure for the metadata of a cluster. It includes information like the CPUs needed, memory of instances, and number of instances.</p>
    pub capacity_configuration: ::std::option::Option<crate::types::CapacityConfiguration>,
    /// <p>The version of FinSpace managed kdb to run.</p>
    pub release_label: ::std::option::Option<::std::string::String>,
    /// <p>Configuration details about the network where the Privatelink endpoint of the cluster resides.</p>
    pub vpc_configuration: ::std::option::Option<crate::types::VpcConfiguration>,
    /// <p>Specifies a Q program that will be run at launch of a cluster. It is a relative path within <i>.zip</i> file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, <code>somedir/init.q</code>.</p>
    pub initialization_script: ::std::option::Option<::std::string::String>,
    /// <p>Defines key-value pairs to make them available inside the cluster.</p>
    pub command_line_arguments: ::std::option::Option<::std::vec::Vec<crate::types::KxCommandLineArgument>>,
    /// <p>The details of the custom code that you want to use inside a cluster when analyzing a data. It consists of the S3 source bucket, location, S3 object version, and the relative path from where the custom code is loaded into the cluster. </p>
    pub code: ::std::option::Option<crate::types::CodeConfiguration>,
    /// <p> An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster. </p>
    pub execution_role: ::std::option::Option<::std::string::String>,
    /// <p>The last time that the cluster was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub last_modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose <code>clusterType</code> as RDB. All the data written to this storage space is lost when the cluster node is restarted.</p>
    pub savedown_storage_configuration: ::std::option::Option<crate::types::KxSavedownStorageConfiguration>,
    /// <p>The number of availability zones you want to assign per cluster. This can be one of the following </p>
    /// <ul>
    /// <li> <p> <code>SINGLE</code> – Assigns one availability zone per cluster.</p> </li>
    /// <li> <p> <code>MULTI</code> – Assigns all the availability zones per cluster.</p> </li>
    /// </ul>
    pub az_mode: ::std::option::Option<crate::types::KxAzMode>,
    /// <p> The availability zone identifiers for the requested regions. </p>
    pub availability_zone_id: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp at which the cluster was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetKxClusterOutput {
    /// <p>The status of cluster creation.</p>
    /// <ul>
    /// <li> <p>PENDING – The cluster is pending creation.</p> </li>
    /// <li> <p>CREATING – The cluster creation process is in progress.</p> </li>
    /// <li> <p>CREATE_FAILED – The cluster creation process has failed.</p> </li>
    /// <li> <p>RUNNING – The cluster creation process is running.</p> </li>
    /// <li> <p>UPDATING – The cluster is in the process of being updated.</p> </li>
    /// <li> <p>DELETING – The cluster is in the process of being deleted.</p> </li>
    /// <li> <p>DELETED – The cluster has been deleted.</p> </li>
    /// <li> <p>DELETE_FAILED – The cluster failed to delete.</p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::KxClusterStatus> {
        self.status.as_ref()
    }
    /// <p>The error message when a failed state occurs. </p>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>A unique name for the cluster.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>Specifies the type of KDB database that is being created. The following types are available: </p>
    /// <ul>
    /// <li> <p>HDB – A Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed kdb databases mounted to the cluster.</p> </li>
    /// <li> <p>RDB – A Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the <code>savedownStorageConfiguration</code> parameter.</p> </li>
    /// <li> <p>GATEWAY – A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a writable local storage.</p> </li>
    /// </ul>
    pub fn cluster_type(&self) -> ::std::option::Option<&crate::types::KxClusterType> {
        self.cluster_type.as_ref()
    }
    /// <p> A list of databases mounted on the cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.databases.is_none()`.
    pub fn databases(&self) -> &[crate::types::KxDatabaseConfiguration] {
        self.databases.as_deref().unwrap_or_default()
    }
    /// <p>The configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cache_storage_configurations.is_none()`.
    pub fn cache_storage_configurations(&self) -> &[crate::types::KxCacheStorageConfiguration] {
        self.cache_storage_configurations.as_deref().unwrap_or_default()
    }
    /// <p>The configuration based on which FinSpace will scale in or scale out nodes in your cluster.</p>
    pub fn auto_scaling_configuration(&self) -> ::std::option::Option<&crate::types::AutoScalingConfiguration> {
        self.auto_scaling_configuration.as_ref()
    }
    /// <p>A description of the cluster.</p>
    pub fn cluster_description(&self) -> ::std::option::Option<&str> {
        self.cluster_description.as_deref()
    }
    /// <p>A structure for the metadata of a cluster. It includes information like the CPUs needed, memory of instances, and number of instances.</p>
    pub fn capacity_configuration(&self) -> ::std::option::Option<&crate::types::CapacityConfiguration> {
        self.capacity_configuration.as_ref()
    }
    /// <p>The version of FinSpace managed kdb to run.</p>
    pub fn release_label(&self) -> ::std::option::Option<&str> {
        self.release_label.as_deref()
    }
    /// <p>Configuration details about the network where the Privatelink endpoint of the cluster resides.</p>
    pub fn vpc_configuration(&self) -> ::std::option::Option<&crate::types::VpcConfiguration> {
        self.vpc_configuration.as_ref()
    }
    /// <p>Specifies a Q program that will be run at launch of a cluster. It is a relative path within <i>.zip</i> file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, <code>somedir/init.q</code>.</p>
    pub fn initialization_script(&self) -> ::std::option::Option<&str> {
        self.initialization_script.as_deref()
    }
    /// <p>Defines key-value pairs to make them available inside the cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.command_line_arguments.is_none()`.
    pub fn command_line_arguments(&self) -> &[crate::types::KxCommandLineArgument] {
        self.command_line_arguments.as_deref().unwrap_or_default()
    }
    /// <p>The details of the custom code that you want to use inside a cluster when analyzing a data. It consists of the S3 source bucket, location, S3 object version, and the relative path from where the custom code is loaded into the cluster. </p>
    pub fn code(&self) -> ::std::option::Option<&crate::types::CodeConfiguration> {
        self.code.as_ref()
    }
    /// <p> An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster. </p>
    pub fn execution_role(&self) -> ::std::option::Option<&str> {
        self.execution_role.as_deref()
    }
    /// <p>The last time that the cluster was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn last_modified_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_modified_timestamp.as_ref()
    }
    /// <p>The size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose <code>clusterType</code> as RDB. All the data written to this storage space is lost when the cluster node is restarted.</p>
    pub fn savedown_storage_configuration(&self) -> ::std::option::Option<&crate::types::KxSavedownStorageConfiguration> {
        self.savedown_storage_configuration.as_ref()
    }
    /// <p>The number of availability zones you want to assign per cluster. This can be one of the following </p>
    /// <ul>
    /// <li> <p> <code>SINGLE</code> – Assigns one availability zone per cluster.</p> </li>
    /// <li> <p> <code>MULTI</code> – Assigns all the availability zones per cluster.</p> </li>
    /// </ul>
    pub fn az_mode(&self) -> ::std::option::Option<&crate::types::KxAzMode> {
        self.az_mode.as_ref()
    }
    /// <p> The availability zone identifiers for the requested regions. </p>
    pub fn availability_zone_id(&self) -> ::std::option::Option<&str> {
        self.availability_zone_id.as_deref()
    }
    /// <p>The timestamp at which the cluster was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn created_timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetKxClusterOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetKxClusterOutput {
    /// Creates a new builder-style object to manufacture [`GetKxClusterOutput`](crate::operation::get_kx_cluster::GetKxClusterOutput).
    pub fn builder() -> crate::operation::get_kx_cluster::builders::GetKxClusterOutputBuilder {
        crate::operation::get_kx_cluster::builders::GetKxClusterOutputBuilder::default()
    }
}

/// A builder for [`GetKxClusterOutput`](crate::operation::get_kx_cluster::GetKxClusterOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetKxClusterOutputBuilder {
    pub(crate) status: ::std::option::Option<crate::types::KxClusterStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_type: ::std::option::Option<crate::types::KxClusterType>,
    pub(crate) databases: ::std::option::Option<::std::vec::Vec<crate::types::KxDatabaseConfiguration>>,
    pub(crate) cache_storage_configurations: ::std::option::Option<::std::vec::Vec<crate::types::KxCacheStorageConfiguration>>,
    pub(crate) auto_scaling_configuration: ::std::option::Option<crate::types::AutoScalingConfiguration>,
    pub(crate) cluster_description: ::std::option::Option<::std::string::String>,
    pub(crate) capacity_configuration: ::std::option::Option<crate::types::CapacityConfiguration>,
    pub(crate) release_label: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_configuration: ::std::option::Option<crate::types::VpcConfiguration>,
    pub(crate) initialization_script: ::std::option::Option<::std::string::String>,
    pub(crate) command_line_arguments: ::std::option::Option<::std::vec::Vec<crate::types::KxCommandLineArgument>>,
    pub(crate) code: ::std::option::Option<crate::types::CodeConfiguration>,
    pub(crate) execution_role: ::std::option::Option<::std::string::String>,
    pub(crate) last_modified_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) savedown_storage_configuration: ::std::option::Option<crate::types::KxSavedownStorageConfiguration>,
    pub(crate) az_mode: ::std::option::Option<crate::types::KxAzMode>,
    pub(crate) availability_zone_id: ::std::option::Option<::std::string::String>,
    pub(crate) created_timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetKxClusterOutputBuilder {
    /// <p>The status of cluster creation.</p>
    /// <ul>
    /// <li> <p>PENDING – The cluster is pending creation.</p> </li>
    /// <li> <p>CREATING – The cluster creation process is in progress.</p> </li>
    /// <li> <p>CREATE_FAILED – The cluster creation process has failed.</p> </li>
    /// <li> <p>RUNNING – The cluster creation process is running.</p> </li>
    /// <li> <p>UPDATING – The cluster is in the process of being updated.</p> </li>
    /// <li> <p>DELETING – The cluster is in the process of being deleted.</p> </li>
    /// <li> <p>DELETED – The cluster has been deleted.</p> </li>
    /// <li> <p>DELETE_FAILED – The cluster failed to delete.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::KxClusterStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of cluster creation.</p>
    /// <ul>
    /// <li> <p>PENDING – The cluster is pending creation.</p> </li>
    /// <li> <p>CREATING – The cluster creation process is in progress.</p> </li>
    /// <li> <p>CREATE_FAILED – The cluster creation process has failed.</p> </li>
    /// <li> <p>RUNNING – The cluster creation process is running.</p> </li>
    /// <li> <p>UPDATING – The cluster is in the process of being updated.</p> </li>
    /// <li> <p>DELETING – The cluster is in the process of being deleted.</p> </li>
    /// <li> <p>DELETED – The cluster has been deleted.</p> </li>
    /// <li> <p>DELETE_FAILED – The cluster failed to delete.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::KxClusterStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of cluster creation.</p>
    /// <ul>
    /// <li> <p>PENDING – The cluster is pending creation.</p> </li>
    /// <li> <p>CREATING – The cluster creation process is in progress.</p> </li>
    /// <li> <p>CREATE_FAILED – The cluster creation process has failed.</p> </li>
    /// <li> <p>RUNNING – The cluster creation process is running.</p> </li>
    /// <li> <p>UPDATING – The cluster is in the process of being updated.</p> </li>
    /// <li> <p>DELETING – The cluster is in the process of being deleted.</p> </li>
    /// <li> <p>DELETED – The cluster has been deleted.</p> </li>
    /// <li> <p>DELETE_FAILED – The cluster failed to delete.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::KxClusterStatus> {
        &self.status
    }
    /// <p>The error message when a failed state occurs. </p>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message when a failed state occurs. </p>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>The error message when a failed state occurs. </p>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// <p>A unique name for the cluster.</p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique name for the cluster.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>A unique name for the cluster.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>Specifies the type of KDB database that is being created. The following types are available: </p>
    /// <ul>
    /// <li> <p>HDB – A Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed kdb databases mounted to the cluster.</p> </li>
    /// <li> <p>RDB – A Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the <code>savedownStorageConfiguration</code> parameter.</p> </li>
    /// <li> <p>GATEWAY – A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a writable local storage.</p> </li>
    /// </ul>
    pub fn cluster_type(mut self, input: crate::types::KxClusterType) -> Self {
        self.cluster_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of KDB database that is being created. The following types are available: </p>
    /// <ul>
    /// <li> <p>HDB – A Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed kdb databases mounted to the cluster.</p> </li>
    /// <li> <p>RDB – A Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the <code>savedownStorageConfiguration</code> parameter.</p> </li>
    /// <li> <p>GATEWAY – A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a writable local storage.</p> </li>
    /// </ul>
    pub fn set_cluster_type(mut self, input: ::std::option::Option<crate::types::KxClusterType>) -> Self {
        self.cluster_type = input;
        self
    }
    /// <p>Specifies the type of KDB database that is being created. The following types are available: </p>
    /// <ul>
    /// <li> <p>HDB – A Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed kdb databases mounted to the cluster.</p> </li>
    /// <li> <p>RDB – A Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the <code>savedownStorageConfiguration</code> parameter.</p> </li>
    /// <li> <p>GATEWAY – A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a writable local storage.</p> </li>
    /// </ul>
    pub fn get_cluster_type(&self) -> &::std::option::Option<crate::types::KxClusterType> {
        &self.cluster_type
    }
    /// Appends an item to `databases`.
    ///
    /// To override the contents of this collection use [`set_databases`](Self::set_databases).
    ///
    /// <p> A list of databases mounted on the cluster.</p>
    pub fn databases(mut self, input: crate::types::KxDatabaseConfiguration) -> Self {
        let mut v = self.databases.unwrap_or_default();
        v.push(input);
        self.databases = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of databases mounted on the cluster.</p>
    pub fn set_databases(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KxDatabaseConfiguration>>) -> Self {
        self.databases = input;
        self
    }
    /// <p> A list of databases mounted on the cluster.</p>
    pub fn get_databases(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KxDatabaseConfiguration>> {
        &self.databases
    }
    /// Appends an item to `cache_storage_configurations`.
    ///
    /// To override the contents of this collection use [`set_cache_storage_configurations`](Self::set_cache_storage_configurations).
    ///
    /// <p>The configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. </p>
    pub fn cache_storage_configurations(mut self, input: crate::types::KxCacheStorageConfiguration) -> Self {
        let mut v = self.cache_storage_configurations.unwrap_or_default();
        v.push(input);
        self.cache_storage_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>The configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. </p>
    pub fn set_cache_storage_configurations(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::KxCacheStorageConfiguration>>,
    ) -> Self {
        self.cache_storage_configurations = input;
        self
    }
    /// <p>The configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. </p>
    pub fn get_cache_storage_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KxCacheStorageConfiguration>> {
        &self.cache_storage_configurations
    }
    /// <p>The configuration based on which FinSpace will scale in or scale out nodes in your cluster.</p>
    pub fn auto_scaling_configuration(mut self, input: crate::types::AutoScalingConfiguration) -> Self {
        self.auto_scaling_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration based on which FinSpace will scale in or scale out nodes in your cluster.</p>
    pub fn set_auto_scaling_configuration(mut self, input: ::std::option::Option<crate::types::AutoScalingConfiguration>) -> Self {
        self.auto_scaling_configuration = input;
        self
    }
    /// <p>The configuration based on which FinSpace will scale in or scale out nodes in your cluster.</p>
    pub fn get_auto_scaling_configuration(&self) -> &::std::option::Option<crate::types::AutoScalingConfiguration> {
        &self.auto_scaling_configuration
    }
    /// <p>A description of the cluster.</p>
    pub fn cluster_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the cluster.</p>
    pub fn set_cluster_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_description = input;
        self
    }
    /// <p>A description of the cluster.</p>
    pub fn get_cluster_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_description
    }
    /// <p>A structure for the metadata of a cluster. It includes information like the CPUs needed, memory of instances, and number of instances.</p>
    pub fn capacity_configuration(mut self, input: crate::types::CapacityConfiguration) -> Self {
        self.capacity_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>A structure for the metadata of a cluster. It includes information like the CPUs needed, memory of instances, and number of instances.</p>
    pub fn set_capacity_configuration(mut self, input: ::std::option::Option<crate::types::CapacityConfiguration>) -> Self {
        self.capacity_configuration = input;
        self
    }
    /// <p>A structure for the metadata of a cluster. It includes information like the CPUs needed, memory of instances, and number of instances.</p>
    pub fn get_capacity_configuration(&self) -> &::std::option::Option<crate::types::CapacityConfiguration> {
        &self.capacity_configuration
    }
    /// <p>The version of FinSpace managed kdb to run.</p>
    pub fn release_label(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.release_label = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of FinSpace managed kdb to run.</p>
    pub fn set_release_label(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.release_label = input;
        self
    }
    /// <p>The version of FinSpace managed kdb to run.</p>
    pub fn get_release_label(&self) -> &::std::option::Option<::std::string::String> {
        &self.release_label
    }
    /// <p>Configuration details about the network where the Privatelink endpoint of the cluster resides.</p>
    pub fn vpc_configuration(mut self, input: crate::types::VpcConfiguration) -> Self {
        self.vpc_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration details about the network where the Privatelink endpoint of the cluster resides.</p>
    pub fn set_vpc_configuration(mut self, input: ::std::option::Option<crate::types::VpcConfiguration>) -> Self {
        self.vpc_configuration = input;
        self
    }
    /// <p>Configuration details about the network where the Privatelink endpoint of the cluster resides.</p>
    pub fn get_vpc_configuration(&self) -> &::std::option::Option<crate::types::VpcConfiguration> {
        &self.vpc_configuration
    }
    /// <p>Specifies a Q program that will be run at launch of a cluster. It is a relative path within <i>.zip</i> file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, <code>somedir/init.q</code>.</p>
    pub fn initialization_script(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.initialization_script = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a Q program that will be run at launch of a cluster. It is a relative path within <i>.zip</i> file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, <code>somedir/init.q</code>.</p>
    pub fn set_initialization_script(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.initialization_script = input;
        self
    }
    /// <p>Specifies a Q program that will be run at launch of a cluster. It is a relative path within <i>.zip</i> file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, <code>somedir/init.q</code>.</p>
    pub fn get_initialization_script(&self) -> &::std::option::Option<::std::string::String> {
        &self.initialization_script
    }
    /// Appends an item to `command_line_arguments`.
    ///
    /// To override the contents of this collection use [`set_command_line_arguments`](Self::set_command_line_arguments).
    ///
    /// <p>Defines key-value pairs to make them available inside the cluster.</p>
    pub fn command_line_arguments(mut self, input: crate::types::KxCommandLineArgument) -> Self {
        let mut v = self.command_line_arguments.unwrap_or_default();
        v.push(input);
        self.command_line_arguments = ::std::option::Option::Some(v);
        self
    }
    /// <p>Defines key-value pairs to make them available inside the cluster.</p>
    pub fn set_command_line_arguments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KxCommandLineArgument>>) -> Self {
        self.command_line_arguments = input;
        self
    }
    /// <p>Defines key-value pairs to make them available inside the cluster.</p>
    pub fn get_command_line_arguments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KxCommandLineArgument>> {
        &self.command_line_arguments
    }
    /// <p>The details of the custom code that you want to use inside a cluster when analyzing a data. It consists of the S3 source bucket, location, S3 object version, and the relative path from where the custom code is loaded into the cluster. </p>
    pub fn code(mut self, input: crate::types::CodeConfiguration) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the custom code that you want to use inside a cluster when analyzing a data. It consists of the S3 source bucket, location, S3 object version, and the relative path from where the custom code is loaded into the cluster. </p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::CodeConfiguration>) -> Self {
        self.code = input;
        self
    }
    /// <p>The details of the custom code that you want to use inside a cluster when analyzing a data. It consists of the S3 source bucket, location, S3 object version, and the relative path from where the custom code is loaded into the cluster. </p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::CodeConfiguration> {
        &self.code
    }
    /// <p> An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster. </p>
    pub fn execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster. </p>
    pub fn set_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role = input;
        self
    }
    /// <p> An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster. </p>
    pub fn get_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role
    }
    /// <p>The last time that the cluster was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn last_modified_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time that the cluster was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_last_modified_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_timestamp = input;
        self
    }
    /// <p>The last time that the cluster was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn get_last_modified_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_timestamp
    }
    /// <p>The size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose <code>clusterType</code> as RDB. All the data written to this storage space is lost when the cluster node is restarted.</p>
    pub fn savedown_storage_configuration(mut self, input: crate::types::KxSavedownStorageConfiguration) -> Self {
        self.savedown_storage_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose <code>clusterType</code> as RDB. All the data written to this storage space is lost when the cluster node is restarted.</p>
    pub fn set_savedown_storage_configuration(mut self, input: ::std::option::Option<crate::types::KxSavedownStorageConfiguration>) -> Self {
        self.savedown_storage_configuration = input;
        self
    }
    /// <p>The size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose <code>clusterType</code> as RDB. All the data written to this storage space is lost when the cluster node is restarted.</p>
    pub fn get_savedown_storage_configuration(&self) -> &::std::option::Option<crate::types::KxSavedownStorageConfiguration> {
        &self.savedown_storage_configuration
    }
    /// <p>The number of availability zones you want to assign per cluster. This can be one of the following </p>
    /// <ul>
    /// <li> <p> <code>SINGLE</code> – Assigns one availability zone per cluster.</p> </li>
    /// <li> <p> <code>MULTI</code> – Assigns all the availability zones per cluster.</p> </li>
    /// </ul>
    pub fn az_mode(mut self, input: crate::types::KxAzMode) -> Self {
        self.az_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of availability zones you want to assign per cluster. This can be one of the following </p>
    /// <ul>
    /// <li> <p> <code>SINGLE</code> – Assigns one availability zone per cluster.</p> </li>
    /// <li> <p> <code>MULTI</code> – Assigns all the availability zones per cluster.</p> </li>
    /// </ul>
    pub fn set_az_mode(mut self, input: ::std::option::Option<crate::types::KxAzMode>) -> Self {
        self.az_mode = input;
        self
    }
    /// <p>The number of availability zones you want to assign per cluster. This can be one of the following </p>
    /// <ul>
    /// <li> <p> <code>SINGLE</code> – Assigns one availability zone per cluster.</p> </li>
    /// <li> <p> <code>MULTI</code> – Assigns all the availability zones per cluster.</p> </li>
    /// </ul>
    pub fn get_az_mode(&self) -> &::std::option::Option<crate::types::KxAzMode> {
        &self.az_mode
    }
    /// <p> The availability zone identifiers for the requested regions. </p>
    pub fn availability_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The availability zone identifiers for the requested regions. </p>
    pub fn set_availability_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone_id = input;
        self
    }
    /// <p> The availability zone identifiers for the requested regions. </p>
    pub fn get_availability_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone_id
    }
    /// <p>The timestamp at which the cluster was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn created_timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp at which the cluster was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn set_created_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The timestamp at which the cluster was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    pub fn get_created_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_timestamp
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetKxClusterOutput`](crate::operation::get_kx_cluster::GetKxClusterOutput).
    pub fn build(self) -> crate::operation::get_kx_cluster::GetKxClusterOutput {
        crate::operation::get_kx_cluster::GetKxClusterOutput {
            status: self.status,
            status_reason: self.status_reason,
            cluster_name: self.cluster_name,
            cluster_type: self.cluster_type,
            databases: self.databases,
            cache_storage_configurations: self.cache_storage_configurations,
            auto_scaling_configuration: self.auto_scaling_configuration,
            cluster_description: self.cluster_description,
            capacity_configuration: self.capacity_configuration,
            release_label: self.release_label,
            vpc_configuration: self.vpc_configuration,
            initialization_script: self.initialization_script,
            command_line_arguments: self.command_line_arguments,
            code: self.code,
            execution_role: self.execution_role,
            last_modified_timestamp: self.last_modified_timestamp,
            savedown_storage_configuration: self.savedown_storage_configuration,
            az_mode: self.az_mode,
            availability_zone_id: self.availability_zone_id,
            created_timestamp: self.created_timestamp,
            _request_id: self._request_id,
        }
    }
}
