// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateKxClusterCodeConfigurationInput {
    /// <p> A unique identifier of the kdb environment. </p>
    pub environment_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the cluster.</p>
    pub cluster_name: ::std::option::Option<::std::string::String>,
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The structure of the customer code available within the running cluster.</p>
    pub code: ::std::option::Option<crate::types::CodeConfiguration>,
    /// <p>Specifies a Q program that will be run at launch of a cluster. It is a relative path within <i>.zip</i> file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, <code>somedir/init.q</code>.</p>
    pub initialization_script: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the key-value pairs to make them available inside the cluster.</p>
    pub command_line_arguments: ::std::option::Option<::std::vec::Vec<crate::types::KxCommandLineArgument>>,
    /// <p> The configuration that allows you to choose how you want to update the code on a cluster. </p>
    pub deployment_configuration: ::std::option::Option<crate::types::KxClusterCodeDeploymentConfiguration>,
}
impl UpdateKxClusterCodeConfigurationInput {
    /// <p> A unique identifier of the kdb environment. </p>
    pub fn environment_id(&self) -> ::std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The name of the cluster.</p>
    pub fn cluster_name(&self) -> ::std::option::Option<&str> {
        self.cluster_name.as_deref()
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The structure of the customer code available within the running cluster.</p>
    pub fn code(&self) -> ::std::option::Option<&crate::types::CodeConfiguration> {
        self.code.as_ref()
    }
    /// <p>Specifies a Q program that will be run at launch of a cluster. It is a relative path within <i>.zip</i> file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, <code>somedir/init.q</code>.</p>
    pub fn initialization_script(&self) -> ::std::option::Option<&str> {
        self.initialization_script.as_deref()
    }
    /// <p>Specifies the key-value pairs to make them available inside the cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.command_line_arguments.is_none()`.
    pub fn command_line_arguments(&self) -> &[crate::types::KxCommandLineArgument] {
        self.command_line_arguments.as_deref().unwrap_or_default()
    }
    /// <p> The configuration that allows you to choose how you want to update the code on a cluster. </p>
    pub fn deployment_configuration(&self) -> ::std::option::Option<&crate::types::KxClusterCodeDeploymentConfiguration> {
        self.deployment_configuration.as_ref()
    }
}
impl UpdateKxClusterCodeConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateKxClusterCodeConfigurationInput`](crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationInput).
    pub fn builder() -> crate::operation::update_kx_cluster_code_configuration::builders::UpdateKxClusterCodeConfigurationInputBuilder {
        crate::operation::update_kx_cluster_code_configuration::builders::UpdateKxClusterCodeConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateKxClusterCodeConfigurationInput`](crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateKxClusterCodeConfigurationInputBuilder {
    pub(crate) environment_id: ::std::option::Option<::std::string::String>,
    pub(crate) cluster_name: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) code: ::std::option::Option<crate::types::CodeConfiguration>,
    pub(crate) initialization_script: ::std::option::Option<::std::string::String>,
    pub(crate) command_line_arguments: ::std::option::Option<::std::vec::Vec<crate::types::KxCommandLineArgument>>,
    pub(crate) deployment_configuration: ::std::option::Option<crate::types::KxClusterCodeDeploymentConfiguration>,
}
impl UpdateKxClusterCodeConfigurationInputBuilder {
    /// <p> A unique identifier of the kdb environment. </p>
    /// This field is required.
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.environment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A unique identifier of the kdb environment. </p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p> A unique identifier of the kdb environment. </p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.environment_id
    }
    /// <p>The name of the cluster.</p>
    /// This field is required.
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cluster_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the cluster.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cluster_name = input;
        self
    }
    /// <p>The name of the cluster.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cluster_name
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The structure of the customer code available within the running cluster.</p>
    /// This field is required.
    pub fn code(mut self, input: crate::types::CodeConfiguration) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The structure of the customer code available within the running cluster.</p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::CodeConfiguration>) -> Self {
        self.code = input;
        self
    }
    /// <p>The structure of the customer code available within the running cluster.</p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::CodeConfiguration> {
        &self.code
    }
    /// <p>Specifies a Q program that will be run at launch of a cluster. It is a relative path within <i>.zip</i> file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, <code>somedir/init.q</code>.</p>
    pub fn initialization_script(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.initialization_script = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a Q program that will be run at launch of a cluster. It is a relative path within <i>.zip</i> file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, <code>somedir/init.q</code>.</p>
    pub fn set_initialization_script(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.initialization_script = input;
        self
    }
    /// <p>Specifies a Q program that will be run at launch of a cluster. It is a relative path within <i>.zip</i> file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, <code>somedir/init.q</code>.</p>
    pub fn get_initialization_script(&self) -> &::std::option::Option<::std::string::String> {
        &self.initialization_script
    }
    /// Appends an item to `command_line_arguments`.
    ///
    /// To override the contents of this collection use [`set_command_line_arguments`](Self::set_command_line_arguments).
    ///
    /// <p>Specifies the key-value pairs to make them available inside the cluster.</p>
    pub fn command_line_arguments(mut self, input: crate::types::KxCommandLineArgument) -> Self {
        let mut v = self.command_line_arguments.unwrap_or_default();
        v.push(input);
        self.command_line_arguments = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the key-value pairs to make them available inside the cluster.</p>
    pub fn set_command_line_arguments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KxCommandLineArgument>>) -> Self {
        self.command_line_arguments = input;
        self
    }
    /// <p>Specifies the key-value pairs to make them available inside the cluster.</p>
    pub fn get_command_line_arguments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KxCommandLineArgument>> {
        &self.command_line_arguments
    }
    /// <p> The configuration that allows you to choose how you want to update the code on a cluster. </p>
    pub fn deployment_configuration(mut self, input: crate::types::KxClusterCodeDeploymentConfiguration) -> Self {
        self.deployment_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p> The configuration that allows you to choose how you want to update the code on a cluster. </p>
    pub fn set_deployment_configuration(mut self, input: ::std::option::Option<crate::types::KxClusterCodeDeploymentConfiguration>) -> Self {
        self.deployment_configuration = input;
        self
    }
    /// <p> The configuration that allows you to choose how you want to update the code on a cluster. </p>
    pub fn get_deployment_configuration(&self) -> &::std::option::Option<crate::types::KxClusterCodeDeploymentConfiguration> {
        &self.deployment_configuration
    }
    /// Consumes the builder and constructs a [`UpdateKxClusterCodeConfigurationInput`](crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationInput {
                environment_id: self.environment_id,
                cluster_name: self.cluster_name,
                client_token: self.client_token,
                code: self.code,
                initialization_script: self.initialization_script,
                command_line_arguments: self.command_line_arguments,
                deployment_configuration: self.deployment_configuration,
            },
        )
    }
}
