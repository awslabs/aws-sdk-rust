// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_kx_cluster_code_configuration::_update_kx_cluster_code_configuration_output::UpdateKxClusterCodeConfigurationOutputBuilder;

pub use crate::operation::update_kx_cluster_code_configuration::_update_kx_cluster_code_configuration_input::UpdateKxClusterCodeConfigurationInputBuilder;

impl crate::operation::update_kx_cluster_code_configuration::builders::UpdateKxClusterCodeConfigurationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_kx_cluster_code_configuration();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateKxClusterCodeConfiguration`.
///
/// <p>Allows you to update code configuration on a running cluster. By using this API you can update the code, the initialization script path, and the command line arguments for a specific cluster. The configuration that you want to update will override any existing configurations on the cluster.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateKxClusterCodeConfigurationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_kx_cluster_code_configuration::builders::UpdateKxClusterCodeConfigurationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationOutput,
        crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError,
    > for UpdateKxClusterCodeConfigurationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationOutput,
            crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateKxClusterCodeConfigurationFluentBuilder {
    /// Creates a new `UpdateKxClusterCodeConfiguration`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateKxClusterCodeConfiguration as a reference.
    pub fn as_input(&self) -> &crate::operation::update_kx_cluster_code_configuration::builders::UpdateKxClusterCodeConfigurationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfiguration::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfiguration::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationOutput,
        crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A unique identifier of the kdb environment.</p>
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.environment_id(input.into());
        self
    }
    /// <p>A unique identifier of the kdb environment.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_environment_id(input);
        self
    }
    /// <p>A unique identifier of the kdb environment.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_environment_id()
    }
    /// <p>The name of the cluster.</p>
    pub fn cluster_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.cluster_name(input.into());
        self
    }
    /// <p>The name of the cluster.</p>
    pub fn set_cluster_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_cluster_name(input);
        self
    }
    /// <p>The name of the cluster.</p>
    pub fn get_cluster_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_cluster_name()
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>The structure of the customer code available within the running cluster.</p>
    pub fn code(mut self, input: crate::types::CodeConfiguration) -> Self {
        self.inner = self.inner.code(input);
        self
    }
    /// <p>The structure of the customer code available within the running cluster.</p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::CodeConfiguration>) -> Self {
        self.inner = self.inner.set_code(input);
        self
    }
    /// <p>The structure of the customer code available within the running cluster.</p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::CodeConfiguration> {
        self.inner.get_code()
    }
    /// <p>Specifies a Q program that will be run at launch of a cluster. It is a relative path within <i>.zip</i> file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, <code>somedir/init.q</code>.</p>
    /// <p>You cannot update this parameter for a <code>NO_RESTART</code> deployment.</p>
    pub fn initialization_script(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.initialization_script(input.into());
        self
    }
    /// <p>Specifies a Q program that will be run at launch of a cluster. It is a relative path within <i>.zip</i> file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, <code>somedir/init.q</code>.</p>
    /// <p>You cannot update this parameter for a <code>NO_RESTART</code> deployment.</p>
    pub fn set_initialization_script(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_initialization_script(input);
        self
    }
    /// <p>Specifies a Q program that will be run at launch of a cluster. It is a relative path within <i>.zip</i> file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, <code>somedir/init.q</code>.</p>
    /// <p>You cannot update this parameter for a <code>NO_RESTART</code> deployment.</p>
    pub fn get_initialization_script(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_initialization_script()
    }
    ///
    /// Appends an item to `commandLineArguments`.
    ///
    /// To override the contents of this collection use [`set_command_line_arguments`](Self::set_command_line_arguments).
    ///
    /// <p>Specifies the key-value pairs to make them available inside the cluster.</p>
    /// <p>You cannot update this parameter for a <code>NO_RESTART</code> deployment.</p>
    pub fn command_line_arguments(mut self, input: crate::types::KxCommandLineArgument) -> Self {
        self.inner = self.inner.command_line_arguments(input);
        self
    }
    /// <p>Specifies the key-value pairs to make them available inside the cluster.</p>
    /// <p>You cannot update this parameter for a <code>NO_RESTART</code> deployment.</p>
    pub fn set_command_line_arguments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KxCommandLineArgument>>) -> Self {
        self.inner = self.inner.set_command_line_arguments(input);
        self
    }
    /// <p>Specifies the key-value pairs to make them available inside the cluster.</p>
    /// <p>You cannot update this parameter for a <code>NO_RESTART</code> deployment.</p>
    pub fn get_command_line_arguments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KxCommandLineArgument>> {
        self.inner.get_command_line_arguments()
    }
    /// <p>The configuration that allows you to choose how you want to update the code on a cluster.</p>
    pub fn deployment_configuration(mut self, input: crate::types::KxClusterCodeDeploymentConfiguration) -> Self {
        self.inner = self.inner.deployment_configuration(input);
        self
    }
    /// <p>The configuration that allows you to choose how you want to update the code on a cluster.</p>
    pub fn set_deployment_configuration(mut self, input: ::std::option::Option<crate::types::KxClusterCodeDeploymentConfiguration>) -> Self {
        self.inner = self.inner.set_deployment_configuration(input);
        self
    }
    /// <p>The configuration that allows you to choose how you want to update the code on a cluster.</p>
    pub fn get_deployment_configuration(&self) -> &::std::option::Option<crate::types::KxClusterCodeDeploymentConfiguration> {
        self.inner.get_deployment_configuration()
    }
}
