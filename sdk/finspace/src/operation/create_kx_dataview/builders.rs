// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_kx_dataview::_create_kx_dataview_output::CreateKxDataviewOutputBuilder;

pub use crate::operation::create_kx_dataview::_create_kx_dataview_input::CreateKxDataviewInputBuilder;

impl crate::operation::create_kx_dataview::builders::CreateKxDataviewInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_kx_dataview::CreateKxDataviewOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_kx_dataview::CreateKxDataviewError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_kx_dataview();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateKxDataview`.
///
/// <p>Creates a snapshot of kdb database with tiered storage capabilities and a pre-warmed cache, ready for mounting on kdb clusters. Dataviews are only available for clusters running on a scaling group. They are not supported on dedicated clusters.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateKxDataviewFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_kx_dataview::builders::CreateKxDataviewInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_kx_dataview::CreateKxDataviewOutput,
        crate::operation::create_kx_dataview::CreateKxDataviewError,
    > for CreateKxDataviewFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_kx_dataview::CreateKxDataviewOutput,
            crate::operation::create_kx_dataview::CreateKxDataviewError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateKxDataviewFluentBuilder {
    /// Creates a new `CreateKxDataview`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateKxDataview as a reference.
    pub fn as_input(&self) -> &crate::operation::create_kx_dataview::builders::CreateKxDataviewInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_kx_dataview::CreateKxDataviewOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_kx_dataview::CreateKxDataviewError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_kx_dataview::CreateKxDataview::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_kx_dataview::CreateKxDataview::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_kx_dataview::CreateKxDataviewOutput,
        crate::operation::create_kx_dataview::CreateKxDataviewError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>A unique identifier for the kdb environment, where you want to create the dataview.</p>
    pub fn environment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.environment_id(input.into());
        self
    }
    /// <p>A unique identifier for the kdb environment, where you want to create the dataview.</p>
    pub fn set_environment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_environment_id(input);
        self
    }
    /// <p>A unique identifier for the kdb environment, where you want to create the dataview.</p>
    pub fn get_environment_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_environment_id()
    }
    /// <p>The name of the database where you want to create a dataview.</p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.database_name(input.into());
        self
    }
    /// <p>The name of the database where you want to create a dataview.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_database_name(input);
        self
    }
    /// <p>The name of the database where you want to create a dataview.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_database_name()
    }
    /// <p>A unique identifier for the dataview.</p>
    pub fn dataview_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.dataview_name(input.into());
        self
    }
    /// <p>A unique identifier for the dataview.</p>
    pub fn set_dataview_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_dataview_name(input);
        self
    }
    /// <p>A unique identifier for the dataview.</p>
    pub fn get_dataview_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_dataview_name()
    }
    /// <p>The number of availability zones you want to assign per volume. Currently, FinSpace only supports <code>SINGLE</code> for volumes. This places dataview in a single AZ.</p>
    pub fn az_mode(mut self, input: crate::types::KxAzMode) -> Self {
        self.inner = self.inner.az_mode(input);
        self
    }
    /// <p>The number of availability zones you want to assign per volume. Currently, FinSpace only supports <code>SINGLE</code> for volumes. This places dataview in a single AZ.</p>
    pub fn set_az_mode(mut self, input: ::std::option::Option<crate::types::KxAzMode>) -> Self {
        self.inner = self.inner.set_az_mode(input);
        self
    }
    /// <p>The number of availability zones you want to assign per volume. Currently, FinSpace only supports <code>SINGLE</code> for volumes. This places dataview in a single AZ.</p>
    pub fn get_az_mode(&self) -> &::std::option::Option<crate::types::KxAzMode> {
        self.inner.get_az_mode()
    }
    /// <p>The identifier of the availability zones.</p>
    pub fn availability_zone_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.availability_zone_id(input.into());
        self
    }
    /// <p>The identifier of the availability zones.</p>
    pub fn set_availability_zone_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_availability_zone_id(input);
        self
    }
    /// <p>The identifier of the availability zones.</p>
    pub fn get_availability_zone_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_availability_zone_id()
    }
    /// <p>A unique identifier of the changeset that you want to use to ingest data.</p>
    pub fn changeset_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.changeset_id(input.into());
        self
    }
    /// <p>A unique identifier of the changeset that you want to use to ingest data.</p>
    pub fn set_changeset_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_changeset_id(input);
        self
    }
    /// <p>A unique identifier of the changeset that you want to use to ingest data.</p>
    pub fn get_changeset_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_changeset_id()
    }
    ///
    /// Appends an item to `segmentConfigurations`.
    ///
    /// To override the contents of this collection use [`set_segment_configurations`](Self::set_segment_configurations).
    ///
    /// <p>The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment.</p>
    pub fn segment_configurations(mut self, input: crate::types::KxDataviewSegmentConfiguration) -> Self {
        self.inner = self.inner.segment_configurations(input);
        self
    }
    /// <p>The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment.</p>
    pub fn set_segment_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::KxDataviewSegmentConfiguration>>) -> Self {
        self.inner = self.inner.set_segment_configurations(input);
        self
    }
    /// <p>The configuration that contains the database path of the data that you want to place on each selected volume. Each segment must have a unique database path for each volume. If you do not explicitly specify any database path for a volume, they are accessible from the cluster through the default S3/object store segment.</p>
    pub fn get_segment_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::KxDataviewSegmentConfiguration>> {
        self.inner.get_segment_configurations()
    }
    /// <p>The option to specify whether you want to apply all the future additions and corrections automatically to the dataview, when you ingest new changesets. The default value is false.</p>
    pub fn auto_update(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_update(input);
        self
    }
    /// <p>The option to specify whether you want to apply all the future additions and corrections automatically to the dataview, when you ingest new changesets. The default value is false.</p>
    pub fn set_auto_update(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_update(input);
        self
    }
    /// <p>The option to specify whether you want to apply all the future additions and corrections automatically to the dataview, when you ingest new changesets. The default value is false.</p>
    pub fn get_auto_update(&self) -> &::std::option::Option<bool> {
        self.inner.get_auto_update()
    }
    /// <p>The option to specify whether you want to make the dataview writable to perform database maintenance. The following are some considerations related to writable dataviews.  </p>
    /// <ul>
    /// <li>
    /// <p>You cannot create partial writable dataviews. When you create writeable dataviews you must provide the entire database path.</p></li>
    /// <li>
    /// <p>You cannot perform updates on a writeable dataview. Hence, <code>autoUpdate</code> must be set as <b>False</b> if <code>readWrite</code> is <b>True</b> for a dataview.</p></li>
    /// <li>
    /// <p>You must also use a unique volume for creating a writeable dataview. So, if you choose a volume that is already in use by another dataview, the dataview creation fails.</p></li>
    /// <li>
    /// <p>Once you create a dataview as writeable, you cannot change it to read-only. So, you cannot update the <code>readWrite</code> parameter later.</p></li>
    /// </ul>
    pub fn read_write(mut self, input: bool) -> Self {
        self.inner = self.inner.read_write(input);
        self
    }
    /// <p>The option to specify whether you want to make the dataview writable to perform database maintenance. The following are some considerations related to writable dataviews.  </p>
    /// <ul>
    /// <li>
    /// <p>You cannot create partial writable dataviews. When you create writeable dataviews you must provide the entire database path.</p></li>
    /// <li>
    /// <p>You cannot perform updates on a writeable dataview. Hence, <code>autoUpdate</code> must be set as <b>False</b> if <code>readWrite</code> is <b>True</b> for a dataview.</p></li>
    /// <li>
    /// <p>You must also use a unique volume for creating a writeable dataview. So, if you choose a volume that is already in use by another dataview, the dataview creation fails.</p></li>
    /// <li>
    /// <p>Once you create a dataview as writeable, you cannot change it to read-only. So, you cannot update the <code>readWrite</code> parameter later.</p></li>
    /// </ul>
    pub fn set_read_write(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_read_write(input);
        self
    }
    /// <p>The option to specify whether you want to make the dataview writable to perform database maintenance. The following are some considerations related to writable dataviews.  </p>
    /// <ul>
    /// <li>
    /// <p>You cannot create partial writable dataviews. When you create writeable dataviews you must provide the entire database path.</p></li>
    /// <li>
    /// <p>You cannot perform updates on a writeable dataview. Hence, <code>autoUpdate</code> must be set as <b>False</b> if <code>readWrite</code> is <b>True</b> for a dataview.</p></li>
    /// <li>
    /// <p>You must also use a unique volume for creating a writeable dataview. So, if you choose a volume that is already in use by another dataview, the dataview creation fails.</p></li>
    /// <li>
    /// <p>Once you create a dataview as writeable, you cannot change it to read-only. So, you cannot update the <code>readWrite</code> parameter later.</p></li>
    /// </ul>
    pub fn get_read_write(&self) -> &::std::option::Option<bool> {
        self.inner.get_read_write()
    }
    /// <p>A description of the dataview.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>A description of the dataview.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>A description of the dataview.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of key-value pairs to label the dataview. You can add up to 50 tags to a dataview.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>A list of key-value pairs to label the dataview. You can add up to 50 tags to a dataview.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A list of key-value pairs to label the dataview. You can add up to 50 tags to a dataview.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>A token that ensures idempotency. This token expires in 10 minutes.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
}
