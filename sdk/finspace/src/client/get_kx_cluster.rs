// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetKxCluster`](crate::operation::get_kx_cluster::builders::GetKxClusterFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`environment_id(impl Into<String>)`](crate::operation::get_kx_cluster::builders::GetKxClusterFluentBuilder::environment_id) / [`set_environment_id(Option<String>)`](crate::operation::get_kx_cluster::builders::GetKxClusterFluentBuilder::set_environment_id):<br>required: **true**<br><p>A unique identifier for the kdb environment.</p><br>
    ///   - [`cluster_name(impl Into<String>)`](crate::operation::get_kx_cluster::builders::GetKxClusterFluentBuilder::cluster_name) / [`set_cluster_name(Option<String>)`](crate::operation::get_kx_cluster::builders::GetKxClusterFluentBuilder::set_cluster_name):<br>required: **true**<br><p>The name of the cluster that you want to retrieve.</p><br>
    /// - On success, responds with [`GetKxClusterOutput`](crate::operation::get_kx_cluster::GetKxClusterOutput) with field(s):
    ///   - [`status(Option<KxClusterStatus>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::status): <p>The status of cluster creation.</p>  <ul>   <li> <p>PENDING – The cluster is pending creation.</p> </li>   <li> <p>CREATING – The cluster creation process is in progress.</p> </li>   <li> <p>CREATE_FAILED – The cluster creation process has failed.</p> </li>   <li> <p>RUNNING – The cluster creation process is running.</p> </li>   <li> <p>UPDATING – The cluster is in the process of being updated.</p> </li>   <li> <p>DELETING – The cluster is in the process of being deleted.</p> </li>   <li> <p>DELETED – The cluster has been deleted.</p> </li>   <li> <p>DELETE_FAILED – The cluster failed to delete.</p> </li>  </ul>
    ///   - [`status_reason(Option<String>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::status_reason): <p>The error message when a failed state occurs. </p>
    ///   - [`cluster_name(Option<String>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::cluster_name): <p>A unique name for the cluster.</p>
    ///   - [`cluster_type(Option<KxClusterType>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::cluster_type): <p>Specifies the type of KDB database that is being created. The following types are available: </p>  <ul>   <li> <p>HDB – A Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed kdb databases mounted to the cluster.</p> </li>   <li> <p>RDB – A Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the <code>savedownStorageConfiguration</code> parameter.</p> </li>   <li> <p>GATEWAY – A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a writable local storage.</p> </li>  </ul>
    ///   - [`databases(Option<Vec::<KxDatabaseConfiguration>>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::databases): <p> A list of databases mounted on the cluster.</p>
    ///   - [`cache_storage_configurations(Option<Vec::<KxCacheStorageConfiguration>>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::cache_storage_configurations): <p>The configurations for a read only cache storage associated with a cluster. This cache will be stored as an FSx Lustre that reads from the S3 store. </p>
    ///   - [`auto_scaling_configuration(Option<AutoScalingConfiguration>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::auto_scaling_configuration): <p>The configuration based on which FinSpace will scale in or scale out nodes in your cluster.</p>
    ///   - [`cluster_description(Option<String>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::cluster_description): <p>A description of the cluster.</p>
    ///   - [`capacity_configuration(Option<CapacityConfiguration>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::capacity_configuration): <p>A structure for the metadata of a cluster. It includes information like the CPUs needed, memory of instances, and number of instances.</p>
    ///   - [`release_label(Option<String>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::release_label): <p>The version of FinSpace managed kdb to run.</p>
    ///   - [`vpc_configuration(Option<VpcConfiguration>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::vpc_configuration): <p>Configuration details about the network where the Privatelink endpoint of the cluster resides.</p>
    ///   - [`initialization_script(Option<String>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::initialization_script): <p>Specifies a Q program that will be run at launch of a cluster. It is a relative path within <i>.zip</i> file that contains the custom code, which will be loaded on the cluster. It must include the file name itself. For example, <code>somedir/init.q</code>.</p>
    ///   - [`command_line_arguments(Option<Vec::<KxCommandLineArgument>>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::command_line_arguments): <p>Defines key-value pairs to make them available inside the cluster.</p>
    ///   - [`code(Option<CodeConfiguration>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::code): <p>The details of the custom code that you want to use inside a cluster when analyzing a data. It consists of the S3 source bucket, location, S3 object version, and the relative path from where the custom code is loaded into the cluster. </p>
    ///   - [`execution_role(Option<String>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::execution_role): <p> An IAM role that defines a set of permissions associated with a cluster. These permissions are assumed when a cluster attempts to access another cluster. </p>
    ///   - [`last_modified_timestamp(Option<DateTime>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::last_modified_timestamp): <p>The last time that the cluster was modified. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    ///   - [`savedown_storage_configuration(Option<KxSavedownStorageConfiguration>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::savedown_storage_configuration): <p>The size and type of the temporary storage that is used to hold data during the savedown process. This parameter is required when you choose <code>clusterType</code> as RDB. All the data written to this storage space is lost when the cluster node is restarted.</p>
    ///   - [`az_mode(Option<KxAzMode>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::az_mode): <p>The number of availability zones you want to assign per cluster. This can be one of the following </p>  <ul>   <li> <p> <code>SINGLE</code> – Assigns one availability zone per cluster.</p> </li>   <li> <p> <code>MULTI</code> – Assigns all the availability zones per cluster.</p> </li>  </ul>
    ///   - [`availability_zone_id(Option<String>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::availability_zone_id): <p> The availability zone identifiers for the requested regions. </p>
    ///   - [`created_timestamp(Option<DateTime>)`](crate::operation::get_kx_cluster::GetKxClusterOutput::created_timestamp): <p>The timestamp at which the cluster was created in FinSpace. The value is determined as epoch time in milliseconds. For example, the value for Monday, November 1, 2021 12:00:00 PM UTC is specified as 1635768000000.</p>
    /// - On failure, responds with [`SdkError<GetKxClusterError>`](crate::operation::get_kx_cluster::GetKxClusterError)
    pub fn get_kx_cluster(&self) -> crate::operation::get_kx_cluster::builders::GetKxClusterFluentBuilder {
        crate::operation::get_kx_cluster::builders::GetKxClusterFluentBuilder::new(self.handle.clone())
    }
}
