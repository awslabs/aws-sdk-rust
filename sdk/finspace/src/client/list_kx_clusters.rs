// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListKxClusters`](crate::operation::list_kx_clusters::builders::ListKxClustersFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`environment_id(impl Into<String>)`](crate::operation::list_kx_clusters::builders::ListKxClustersFluentBuilder::environment_id) / [`set_environment_id(Option<String>)`](crate::operation::list_kx_clusters::builders::ListKxClustersFluentBuilder::set_environment_id):<br>required: **true**<br><p>A unique identifier for the kdb environment.</p><br>
    ///   - [`cluster_type(KxClusterType)`](crate::operation::list_kx_clusters::builders::ListKxClustersFluentBuilder::cluster_type) / [`set_cluster_type(Option<KxClusterType>)`](crate::operation::list_kx_clusters::builders::ListKxClustersFluentBuilder::set_cluster_type):<br>required: **false**<br><p>Specifies the type of KDB database that is being created. The following types are available: </p>  <ul>   <li> <p>HDB – A Historical Database. The data is only accessible with read-only permissions from one of the FinSpace managed kdb databases mounted to the cluster.</p> </li>   <li> <p>RDB – A Realtime Database. This type of database captures all the data from a ticker plant and stores it in memory until the end of day, after which it writes all of its data to a disk and reloads the HDB. This cluster type requires local storage for temporary storage of data during the savedown process. If you specify this field in your request, you must provide the <code>savedownStorageConfiguration</code> parameter.</p> </li>   <li> <p>GATEWAY – A gateway cluster allows you to access data across processes in kdb systems. It allows you to create your own routing logic using the initialization scripts and custom code. This type of cluster does not require a writable local storage.</p> </li>  </ul><br>
    ///   - [`max_results(i32)`](crate::operation::list_kx_clusters::builders::ListKxClustersFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_kx_clusters::builders::ListKxClustersFluentBuilder::set_max_results):<br>required: **false**<br><p>The maximum number of results to return in this request.</p><br>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_kx_clusters::builders::ListKxClustersFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_kx_clusters::builders::ListKxClustersFluentBuilder::set_next_token):<br>required: **false**<br><p>A token that indicates where a results page should begin.</p><br>
    /// - On success, responds with [`ListKxClustersOutput`](crate::operation::list_kx_clusters::ListKxClustersOutput) with field(s):
    ///   - [`kx_cluster_summaries(Option<Vec::<KxCluster>>)`](crate::operation::list_kx_clusters::ListKxClustersOutput::kx_cluster_summaries): <p>Lists the cluster details.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_kx_clusters::ListKxClustersOutput::next_token): <p>A token that indicates where a results page should begin.</p>
    /// - On failure, responds with [`SdkError<ListKxClustersError>`](crate::operation::list_kx_clusters::ListKxClustersError)
    pub fn list_kx_clusters(&self) -> crate::operation::list_kx_clusters::builders::ListKxClustersFluentBuilder {
        crate::operation::list_kx_clusters::builders::ListKxClustersFluentBuilder::new(self.handle.clone())
    }
}
