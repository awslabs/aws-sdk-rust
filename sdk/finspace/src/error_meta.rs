// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>There was a conflict with this action, and it could not be completed.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The request processing has failed because of an unknown error, exception or failure.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The request is invalid. Something is wrong with the input to the request.</p>
    InvalidRequestException(crate::types::error::InvalidRequestException),
    /// <p>A service limit or quota is exceeded.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The specified resource group already exists.</p>
    ResourceAlreadyExistsException(crate::types::error::ResourceAlreadyExistsException),
    /// <p>One or more resources can't be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p> You have exceeded your service quota. To perform the requested action, remove some of the relevant resources, or use Service Quotas to request a service quota increase.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input fails to satisfy the constraints specified by an AWS service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_environment::CreateEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_environment::CreateEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_environment::CreateEnvironmentError> for Error {
    fn from(err: crate::operation::create_environment::CreateEnvironmentError) -> Self {
        match err {
            crate::operation::create_environment::CreateEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_environment::CreateEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_environment::CreateEnvironmentError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_environment::CreateEnvironmentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_environment::CreateEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_environment::CreateEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_environment::CreateEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_kx_changeset::CreateKxChangesetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_kx_changeset::CreateKxChangesetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_kx_changeset::CreateKxChangesetError> for Error {
    fn from(err: crate::operation::create_kx_changeset::CreateKxChangesetError) -> Self {
        match err {
            crate::operation::create_kx_changeset::CreateKxChangesetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_kx_changeset::CreateKxChangesetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_kx_changeset::CreateKxChangesetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_kx_changeset::CreateKxChangesetError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_kx_changeset::CreateKxChangesetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_kx_changeset::CreateKxChangesetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_kx_changeset::CreateKxChangesetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_kx_changeset::CreateKxChangesetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_kx_cluster::CreateKxClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_kx_cluster::CreateKxClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_kx_cluster::CreateKxClusterError> for Error {
    fn from(err: crate::operation::create_kx_cluster::CreateKxClusterError) -> Self {
        match err {
            crate::operation::create_kx_cluster::CreateKxClusterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_kx_cluster::CreateKxClusterError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_kx_cluster::CreateKxClusterError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_kx_cluster::CreateKxClusterError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_kx_cluster::CreateKxClusterError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_kx_cluster::CreateKxClusterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_kx_cluster::CreateKxClusterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_kx_cluster::CreateKxClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_kx_database::CreateKxDatabaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_kx_database::CreateKxDatabaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_kx_database::CreateKxDatabaseError> for Error {
    fn from(err: crate::operation::create_kx_database::CreateKxDatabaseError) -> Self {
        match err {
            crate::operation::create_kx_database::CreateKxDatabaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_kx_database::CreateKxDatabaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_kx_database::CreateKxDatabaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_kx_database::CreateKxDatabaseError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_kx_database::CreateKxDatabaseError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::operation::create_kx_database::CreateKxDatabaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_kx_database::CreateKxDatabaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_kx_database::CreateKxDatabaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_kx_database::CreateKxDatabaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_kx_environment::CreateKxEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_kx_environment::CreateKxEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_kx_environment::CreateKxEnvironmentError> for Error {
    fn from(err: crate::operation::create_kx_environment::CreateKxEnvironmentError) -> Self {
        match err {
            crate::operation::create_kx_environment::CreateKxEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_kx_environment::CreateKxEnvironmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_kx_environment::CreateKxEnvironmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_kx_environment::CreateKxEnvironmentError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_kx_environment::CreateKxEnvironmentError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_kx_environment::CreateKxEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_kx_environment::CreateKxEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_kx_environment::CreateKxEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_kx_user::CreateKxUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_kx_user::CreateKxUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_kx_user::CreateKxUserError> for Error {
    fn from(err: crate::operation::create_kx_user::CreateKxUserError) -> Self {
        match err {
            crate::operation::create_kx_user::CreateKxUserError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_kx_user::CreateKxUserError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_kx_user::CreateKxUserError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_kx_user::CreateKxUserError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_kx_user::CreateKxUserError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::operation::create_kx_user::CreateKxUserError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_kx_user::CreateKxUserError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_kx_user::CreateKxUserError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_kx_user::CreateKxUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_environment::DeleteEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_environment::DeleteEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_environment::DeleteEnvironmentError> for Error {
    fn from(err: crate::operation::delete_environment::DeleteEnvironmentError) -> Self {
        match err {
            crate::operation::delete_environment::DeleteEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_environment::DeleteEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_kx_cluster::DeleteKxClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_kx_cluster::DeleteKxClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_kx_cluster::DeleteKxClusterError> for Error {
    fn from(err: crate::operation::delete_kx_cluster::DeleteKxClusterError) -> Self {
        match err {
            crate::operation::delete_kx_cluster::DeleteKxClusterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_kx_cluster::DeleteKxClusterError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_kx_cluster::DeleteKxClusterError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_kx_cluster::DeleteKxClusterError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_kx_cluster::DeleteKxClusterError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_kx_cluster::DeleteKxClusterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_kx_cluster::DeleteKxClusterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_kx_cluster::DeleteKxClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_kx_database::DeleteKxDatabaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_kx_database::DeleteKxDatabaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_kx_database::DeleteKxDatabaseError> for Error {
    fn from(err: crate::operation::delete_kx_database::DeleteKxDatabaseError) -> Self {
        match err {
            crate::operation::delete_kx_database::DeleteKxDatabaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_kx_database::DeleteKxDatabaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_kx_database::DeleteKxDatabaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_kx_database::DeleteKxDatabaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_kx_database::DeleteKxDatabaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_kx_database::DeleteKxDatabaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_kx_database::DeleteKxDatabaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_kx_environment::DeleteKxEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_kx_environment::DeleteKxEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_kx_environment::DeleteKxEnvironmentError> for Error {
    fn from(err: crate::operation::delete_kx_environment::DeleteKxEnvironmentError) -> Self {
        match err {
            crate::operation::delete_kx_environment::DeleteKxEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_kx_environment::DeleteKxEnvironmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_kx_environment::DeleteKxEnvironmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_kx_environment::DeleteKxEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_kx_environment::DeleteKxEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_kx_environment::DeleteKxEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_kx_user::DeleteKxUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_kx_user::DeleteKxUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_kx_user::DeleteKxUserError> for Error {
    fn from(err: crate::operation::delete_kx_user::DeleteKxUserError) -> Self {
        match err {
            crate::operation::delete_kx_user::DeleteKxUserError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_kx_user::DeleteKxUserError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_kx_user::DeleteKxUserError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_kx_user::DeleteKxUserError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_kx_user::DeleteKxUserError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_kx_user::DeleteKxUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment::GetEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_environment::GetEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_environment::GetEnvironmentError> for Error {
    fn from(err: crate::operation::get_environment::GetEnvironmentError) -> Self {
        match err {
            crate::operation::get_environment::GetEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_environment::GetEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_environment::GetEnvironmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_environment::GetEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_environment::GetEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_kx_changeset::GetKxChangesetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_kx_changeset::GetKxChangesetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_kx_changeset::GetKxChangesetError> for Error {
    fn from(err: crate::operation::get_kx_changeset::GetKxChangesetError) -> Self {
        match err {
            crate::operation::get_kx_changeset::GetKxChangesetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_kx_changeset::GetKxChangesetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_kx_changeset::GetKxChangesetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_kx_changeset::GetKxChangesetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_kx_changeset::GetKxChangesetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_kx_changeset::GetKxChangesetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_kx_cluster::GetKxClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_kx_cluster::GetKxClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_kx_cluster::GetKxClusterError> for Error {
    fn from(err: crate::operation::get_kx_cluster::GetKxClusterError) -> Self {
        match err {
            crate::operation::get_kx_cluster::GetKxClusterError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_kx_cluster::GetKxClusterError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_kx_cluster::GetKxClusterError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_kx_cluster::GetKxClusterError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_kx_cluster::GetKxClusterError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_kx_cluster::GetKxClusterError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_kx_cluster::GetKxClusterError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_kx_cluster::GetKxClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_kx_connection_string::GetKxConnectionStringError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_kx_connection_string::GetKxConnectionStringError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_kx_connection_string::GetKxConnectionStringError> for Error {
    fn from(err: crate::operation::get_kx_connection_string::GetKxConnectionStringError) -> Self {
        match err {
            crate::operation::get_kx_connection_string::GetKxConnectionStringError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_kx_connection_string::GetKxConnectionStringError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_kx_connection_string::GetKxConnectionStringError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_kx_connection_string::GetKxConnectionStringError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_kx_connection_string::GetKxConnectionStringError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_kx_connection_string::GetKxConnectionStringError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_kx_database::GetKxDatabaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_kx_database::GetKxDatabaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_kx_database::GetKxDatabaseError> for Error {
    fn from(err: crate::operation::get_kx_database::GetKxDatabaseError) -> Self {
        match err {
            crate::operation::get_kx_database::GetKxDatabaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_kx_database::GetKxDatabaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_kx_database::GetKxDatabaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_kx_database::GetKxDatabaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_kx_database::GetKxDatabaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_kx_database::GetKxDatabaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_kx_environment::GetKxEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_kx_environment::GetKxEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_kx_environment::GetKxEnvironmentError> for Error {
    fn from(err: crate::operation::get_kx_environment::GetKxEnvironmentError) -> Self {
        match err {
            crate::operation::get_kx_environment::GetKxEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_kx_environment::GetKxEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_kx_environment::GetKxEnvironmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_kx_environment::GetKxEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_kx_environment::GetKxEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_kx_user::GetKxUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_kx_user::GetKxUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_kx_user::GetKxUserError> for Error {
    fn from(err: crate::operation::get_kx_user::GetKxUserError) -> Self {
        match err {
            crate::operation::get_kx_user::GetKxUserError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_kx_user::GetKxUserError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_kx_user::GetKxUserError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_kx_user::GetKxUserError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_kx_user::GetKxUserError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_kx_user::GetKxUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_environments::ListEnvironmentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_environments::ListEnvironmentsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_environments::ListEnvironmentsError> for Error {
    fn from(err: crate::operation::list_environments::ListEnvironmentsError) -> Self {
        match err {
            crate::operation::list_environments::ListEnvironmentsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_environments::ListEnvironmentsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_environments::ListEnvironmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_kx_changesets::ListKxChangesetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_kx_changesets::ListKxChangesetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_kx_changesets::ListKxChangesetsError> for Error {
    fn from(err: crate::operation::list_kx_changesets::ListKxChangesetsError) -> Self {
        match err {
            crate::operation::list_kx_changesets::ListKxChangesetsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_kx_changesets::ListKxChangesetsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_kx_changesets::ListKxChangesetsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_kx_changesets::ListKxChangesetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_kx_changesets::ListKxChangesetsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_kx_changesets::ListKxChangesetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_kx_cluster_nodes::ListKxClusterNodesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_kx_cluster_nodes::ListKxClusterNodesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_kx_cluster_nodes::ListKxClusterNodesError> for Error {
    fn from(err: crate::operation::list_kx_cluster_nodes::ListKxClusterNodesError) -> Self {
        match err {
            crate::operation::list_kx_cluster_nodes::ListKxClusterNodesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_kx_cluster_nodes::ListKxClusterNodesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_kx_cluster_nodes::ListKxClusterNodesError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_kx_cluster_nodes::ListKxClusterNodesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_kx_cluster_nodes::ListKxClusterNodesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_kx_cluster_nodes::ListKxClusterNodesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_kx_cluster_nodes::ListKxClusterNodesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_kx_clusters::ListKxClustersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_kx_clusters::ListKxClustersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_kx_clusters::ListKxClustersError> for Error {
    fn from(err: crate::operation::list_kx_clusters::ListKxClustersError) -> Self {
        match err {
            crate::operation::list_kx_clusters::ListKxClustersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_kx_clusters::ListKxClustersError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::list_kx_clusters::ListKxClustersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_kx_clusters::ListKxClustersError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_kx_clusters::ListKxClustersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_kx_clusters::ListKxClustersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_kx_clusters::ListKxClustersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_kx_clusters::ListKxClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_kx_databases::ListKxDatabasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_kx_databases::ListKxDatabasesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_kx_databases::ListKxDatabasesError> for Error {
    fn from(err: crate::operation::list_kx_databases::ListKxDatabasesError) -> Self {
        match err {
            crate::operation::list_kx_databases::ListKxDatabasesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_kx_databases::ListKxDatabasesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_kx_databases::ListKxDatabasesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_kx_databases::ListKxDatabasesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_kx_databases::ListKxDatabasesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_kx_databases::ListKxDatabasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_kx_environments::ListKxEnvironmentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_kx_environments::ListKxEnvironmentsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_kx_environments::ListKxEnvironmentsError> for Error {
    fn from(err: crate::operation::list_kx_environments::ListKxEnvironmentsError) -> Self {
        match err {
            crate::operation::list_kx_environments::ListKxEnvironmentsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_kx_environments::ListKxEnvironmentsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_kx_environments::ListKxEnvironmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_kx_users::ListKxUsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_kx_users::ListKxUsersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_kx_users::ListKxUsersError> for Error {
    fn from(err: crate::operation::list_kx_users::ListKxUsersError) -> Self {
        match err {
            crate::operation::list_kx_users::ListKxUsersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_kx_users::ListKxUsersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_kx_users::ListKxUsersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_kx_users::ListKxUsersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_kx_users::ListKxUsersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_kx_users::ListKxUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_environment::UpdateEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_environment::UpdateEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_environment::UpdateEnvironmentError> for Error {
    fn from(err: crate::operation::update_environment::UpdateEnvironmentError) -> Self {
        match err {
            crate::operation::update_environment::UpdateEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_environment::UpdateEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError> for Error {
    fn from(err: crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError) -> Self {
        match err {
            crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_kx_cluster_code_configuration::UpdateKxClusterCodeConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_kx_cluster_databases::UpdateKxClusterDatabasesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_kx_cluster_databases::UpdateKxClusterDatabasesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_kx_cluster_databases::UpdateKxClusterDatabasesError> for Error {
    fn from(err: crate::operation::update_kx_cluster_databases::UpdateKxClusterDatabasesError) -> Self {
        match err {
            crate::operation::update_kx_cluster_databases::UpdateKxClusterDatabasesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_kx_cluster_databases::UpdateKxClusterDatabasesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_kx_cluster_databases::UpdateKxClusterDatabasesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_kx_cluster_databases::UpdateKxClusterDatabasesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_kx_cluster_databases::UpdateKxClusterDatabasesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_kx_cluster_databases::UpdateKxClusterDatabasesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_kx_cluster_databases::UpdateKxClusterDatabasesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_kx_cluster_databases::UpdateKxClusterDatabasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_kx_database::UpdateKxDatabaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_kx_database::UpdateKxDatabaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_kx_database::UpdateKxDatabaseError> for Error {
    fn from(err: crate::operation::update_kx_database::UpdateKxDatabaseError) -> Self {
        match err {
            crate::operation::update_kx_database::UpdateKxDatabaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_kx_database::UpdateKxDatabaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_kx_database::UpdateKxDatabaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_kx_database::UpdateKxDatabaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_kx_database::UpdateKxDatabaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_kx_database::UpdateKxDatabaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_kx_database::UpdateKxDatabaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_kx_environment::UpdateKxEnvironmentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_kx_environment::UpdateKxEnvironmentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_kx_environment::UpdateKxEnvironmentError> for Error {
    fn from(err: crate::operation::update_kx_environment::UpdateKxEnvironmentError) -> Self {
        match err {
            crate::operation::update_kx_environment::UpdateKxEnvironmentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_kx_environment::UpdateKxEnvironmentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_kx_environment::UpdateKxEnvironmentError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_kx_environment::UpdateKxEnvironmentError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_kx_environment::UpdateKxEnvironmentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_kx_environment::UpdateKxEnvironmentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_kx_environment::UpdateKxEnvironmentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_kx_environment_network::UpdateKxEnvironmentNetworkError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_kx_environment_network::UpdateKxEnvironmentNetworkError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_kx_environment_network::UpdateKxEnvironmentNetworkError> for Error {
    fn from(err: crate::operation::update_kx_environment_network::UpdateKxEnvironmentNetworkError) -> Self {
        match err {
            crate::operation::update_kx_environment_network::UpdateKxEnvironmentNetworkError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_kx_environment_network::UpdateKxEnvironmentNetworkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_kx_environment_network::UpdateKxEnvironmentNetworkError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_kx_environment_network::UpdateKxEnvironmentNetworkError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_kx_environment_network::UpdateKxEnvironmentNetworkError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_kx_environment_network::UpdateKxEnvironmentNetworkError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_kx_environment_network::UpdateKxEnvironmentNetworkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_kx_user::UpdateKxUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_kx_user::UpdateKxUserError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_kx_user::UpdateKxUserError> for Error {
    fn from(err: crate::operation::update_kx_user::UpdateKxUserError) -> Self {
        match err {
            crate::operation::update_kx_user::UpdateKxUserError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_kx_user::UpdateKxUserError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_kx_user::UpdateKxUserError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_kx_user::UpdateKxUserError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_kx_user::UpdateKxUserError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_kx_user::UpdateKxUserError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_kx_user::UpdateKxUserError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_kx_user::UpdateKxUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::InvalidRequestException(inner) => inner.source(),
            Error::LimitExceededException(inner) => inner.source(),
            Error::ResourceAlreadyExistsException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceAlreadyExistsException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
