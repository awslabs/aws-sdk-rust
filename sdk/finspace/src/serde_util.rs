// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn kx_savedown_storage_configuration_correct_errors(
    mut builder: crate::types::builders::KxSavedownStorageConfigurationBuilder,
) -> crate::types::builders::KxSavedownStorageConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::KxSavedownStorageType>().ok()
    }
    if builder.size.is_none() {
        builder.size = Some(Default::default())
    }
    builder
}

pub(crate) fn transit_gateway_configuration_correct_errors(
    mut builder: crate::types::builders::TransitGatewayConfigurationBuilder,
) -> crate::types::builders::TransitGatewayConfigurationBuilder {
    if builder.transit_gateway_id.is_none() {
        builder.transit_gateway_id = Some(Default::default())
    }
    if builder.routable_cidr_space.is_none() {
        builder.routable_cidr_space = Some(Default::default())
    }
    builder
}

pub(crate) fn change_request_correct_errors(
    mut builder: crate::types::builders::ChangeRequestBuilder,
) -> crate::types::builders::ChangeRequestBuilder {
    if builder.change_type.is_none() {
        builder.change_type = "no value was set".parse::<crate::types::ChangeType>().ok()
    }
    if builder.db_path.is_none() {
        builder.db_path = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_dns_server_correct_errors(
    mut builder: crate::types::builders::CustomDnsServerBuilder,
) -> crate::types::builders::CustomDnsServerBuilder {
    if builder.custom_dns_server_name.is_none() {
        builder.custom_dns_server_name = Some(Default::default())
    }
    if builder.custom_dns_server_ip.is_none() {
        builder.custom_dns_server_ip = Some(Default::default())
    }
    builder
}

pub(crate) fn kx_cache_storage_configuration_correct_errors(
    mut builder: crate::types::builders::KxCacheStorageConfigurationBuilder,
) -> crate::types::builders::KxCacheStorageConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.size.is_none() {
        builder.size = Some(Default::default())
    }
    builder
}

pub(crate) fn kx_database_configuration_correct_errors(
    mut builder: crate::types::builders::KxDatabaseConfigurationBuilder,
) -> crate::types::builders::KxDatabaseConfigurationBuilder {
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    builder
}

pub(crate) fn network_acl_entry_correct_errors(
    mut builder: crate::types::builders::NetworkAclEntryBuilder,
) -> crate::types::builders::NetworkAclEntryBuilder {
    if builder.rule_number.is_none() {
        builder.rule_number = Some(Default::default())
    }
    if builder.protocol.is_none() {
        builder.protocol = Some(Default::default())
    }
    if builder.rule_action.is_none() {
        builder.rule_action = "no value was set".parse::<crate::types::RuleAction>().ok()
    }
    if builder.cidr_block.is_none() {
        builder.cidr_block = Some(Default::default())
    }
    builder
}

pub(crate) fn icmp_type_code_correct_errors(mut builder: crate::types::builders::IcmpTypeCodeBuilder) -> crate::types::builders::IcmpTypeCodeBuilder {
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    builder
}

pub(crate) fn kx_database_cache_configuration_correct_errors(
    mut builder: crate::types::builders::KxDatabaseCacheConfigurationBuilder,
) -> crate::types::builders::KxDatabaseCacheConfigurationBuilder {
    if builder.cache_type.is_none() {
        builder.cache_type = Some(Default::default())
    }
    if builder.db_paths.is_none() {
        builder.db_paths = Some(Default::default())
    }
    builder
}

pub(crate) fn port_range_correct_errors(mut builder: crate::types::builders::PortRangeBuilder) -> crate::types::builders::PortRangeBuilder {
    if builder.from.is_none() {
        builder.from = Some(Default::default())
    }
    if builder.to.is_none() {
        builder.to = Some(Default::default())
    }
    builder
}
