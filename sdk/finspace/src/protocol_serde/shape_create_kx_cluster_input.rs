// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_kx_cluster_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_kx_cluster::CreateKxClusterInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.auto_scaling_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("autoScalingConfiguration").start_object();
        crate::protocol_serde::shape_auto_scaling_configuration::ser_auto_scaling_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.availability_zone_id {
        object.key("availabilityZoneId").string(var_3.as_str());
    }
    if let Some(var_4) = &input.az_mode {
        object.key("azMode").string(var_4.as_str());
    }
    if let Some(var_5) = &input.cache_storage_configurations {
        let mut array_6 = object.key("cacheStorageConfigurations").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_kx_cache_storage_configuration::ser_kx_cache_storage_configuration(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.capacity_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("capacityConfiguration").start_object();
        crate::protocol_serde::shape_capacity_configuration::ser_capacity_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    if let Some(var_11) = &input.client_token {
        object.key("clientToken").string(var_11.as_str());
    }
    if let Some(var_12) = &input.cluster_description {
        object.key("clusterDescription").string(var_12.as_str());
    }
    if let Some(var_13) = &input.cluster_name {
        object.key("clusterName").string(var_13.as_str());
    }
    if let Some(var_14) = &input.cluster_type {
        object.key("clusterType").string(var_14.as_str());
    }
    if let Some(var_15) = &input.code {
        #[allow(unused_mut)]
        let mut object_16 = object.key("code").start_object();
        crate::protocol_serde::shape_code_configuration::ser_code_configuration(&mut object_16, var_15)?;
        object_16.finish();
    }
    if let Some(var_17) = &input.command_line_arguments {
        let mut array_18 = object.key("commandLineArguments").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_kx_command_line_argument::ser_kx_command_line_argument(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    if let Some(var_21) = &input.databases {
        let mut array_22 = object.key("databases").start_array();
        for item_23 in var_21 {
            {
                #[allow(unused_mut)]
                let mut object_24 = array_22.value().start_object();
                crate::protocol_serde::shape_kx_database_configuration::ser_kx_database_configuration(&mut object_24, item_23)?;
                object_24.finish();
            }
        }
        array_22.finish();
    }
    if let Some(var_25) = &input.execution_role {
        object.key("executionRole").string(var_25.as_str());
    }
    if let Some(var_26) = &input.initialization_script {
        object.key("initializationScript").string(var_26.as_str());
    }
    if let Some(var_27) = &input.release_label {
        object.key("releaseLabel").string(var_27.as_str());
    }
    if let Some(var_28) = &input.savedown_storage_configuration {
        #[allow(unused_mut)]
        let mut object_29 = object.key("savedownStorageConfiguration").start_object();
        crate::protocol_serde::shape_kx_savedown_storage_configuration::ser_kx_savedown_storage_configuration(&mut object_29, var_28)?;
        object_29.finish();
    }
    if let Some(var_30) = &input.tags {
        #[allow(unused_mut)]
        let mut object_31 = object.key("tags").start_object();
        for (key_32, value_33) in var_30 {
            {
                object_31.key(key_32.as_str()).string(value_33.as_str());
            }
        }
        object_31.finish();
    }
    if let Some(var_34) = &input.vpc_configuration {
        #[allow(unused_mut)]
        let mut object_35 = object.key("vpcConfiguration").start_object();
        crate::protocol_serde::shape_vpc_configuration::ser_vpc_configuration(&mut object_35, var_34)?;
        object_35.finish();
    }
    Ok(())
}
