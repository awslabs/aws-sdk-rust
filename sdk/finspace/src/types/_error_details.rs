// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ErrorDetails`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let errordetails = unimplemented!();
/// match errordetails {
///     ErrorDetails::UserRecoverable => { /* ... */ },
///     ErrorDetails::InternalServiceException => { /* ... */ },
///     ErrorDetails::Cancelled => { /* ... */ },
///     ErrorDetails::AccessDenied => { /* ... */ },
///     ErrorDetails::ResourceNotFound => { /* ... */ },
///     ErrorDetails::ServiceQuotaExceeded => { /* ... */ },
///     ErrorDetails::Validation => { /* ... */ },
///     ErrorDetails::Throttling => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `errordetails` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ErrorDetails::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ErrorDetails::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ErrorDetails::NewFeature` is defined.
/// Specifically, when `errordetails` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ErrorDetails::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ErrorDetails {
    #[allow(missing_docs)] // documentation missing in model
    UserRecoverable,
    #[allow(missing_docs)] // documentation missing in model
    InternalServiceException,
    #[allow(missing_docs)] // documentation missing in model
    Cancelled,
    #[allow(missing_docs)] // documentation missing in model
    AccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    ResourceNotFound,
    #[allow(missing_docs)] // documentation missing in model
    ServiceQuotaExceeded,
    #[allow(missing_docs)] // documentation missing in model
    Validation,
    #[allow(missing_docs)] // documentation missing in model
    Throttling,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ErrorDetails {
    fn from(s: &str) -> Self {
        match s {
            "A user recoverable error has occurred" => ErrorDetails::UserRecoverable,
            "An internal error has occurred." => ErrorDetails::InternalServiceException,
            "Cancelled" => ErrorDetails::Cancelled,
            "Missing required permission to perform this request." => ErrorDetails::AccessDenied,
            "One or more inputs to this request were not found." => ErrorDetails::ResourceNotFound,
            "Service limits have been exceeded." => ErrorDetails::ServiceQuotaExceeded,
            "The inputs to this request are invalid." => ErrorDetails::Validation,
            "The system temporarily lacks sufficient resources to process the request." => ErrorDetails::Throttling,
            other => ErrorDetails::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ErrorDetails {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ErrorDetails::from(s))
    }
}
impl ErrorDetails {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ErrorDetails::UserRecoverable => "A user recoverable error has occurred",
            ErrorDetails::InternalServiceException => "An internal error has occurred.",
            ErrorDetails::Cancelled => "Cancelled",
            ErrorDetails::AccessDenied => "Missing required permission to perform this request.",
            ErrorDetails::ResourceNotFound => "One or more inputs to this request were not found.",
            ErrorDetails::ServiceQuotaExceeded => "Service limits have been exceeded.",
            ErrorDetails::Validation => "The inputs to this request are invalid.",
            ErrorDetails::Throttling => "The system temporarily lacks sufficient resources to process the request.",
            ErrorDetails::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "A user recoverable error has occurred",
            "An internal error has occurred.",
            "Cancelled",
            "Missing required permission to perform this request.",
            "One or more inputs to this request were not found.",
            "Service limits have been exceeded.",
            "The inputs to this request are invalid.",
            "The system temporarily lacks sufficient resources to process the request.",
        ]
    }
}
impl ::std::convert::AsRef<str> for ErrorDetails {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ErrorDetails {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ErrorDetails {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ErrorDetails::UserRecoverable => write!(f, "A user recoverable error has occurred"),
            ErrorDetails::InternalServiceException => write!(f, "An internal error has occurred."),
            ErrorDetails::Cancelled => write!(f, "Cancelled"),
            ErrorDetails::AccessDenied => write!(f, "Missing required permission to perform this request."),
            ErrorDetails::ResourceNotFound => write!(f, "One or more inputs to this request were not found."),
            ErrorDetails::ServiceQuotaExceeded => write!(f, "Service limits have been exceeded."),
            ErrorDetails::Validation => write!(f, "The inputs to this request are invalid."),
            ErrorDetails::Throttling => write!(f, "The system temporarily lacks sufficient resources to process the request."),
            ErrorDetails::Unknown(value) => write!(f, "{value}"),
        }
    }
}
