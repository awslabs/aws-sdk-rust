// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents an FinSpace environment.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Environment {
    /// <p>The name of the FinSpace environment.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The identifier of the FinSpace environment.</p>
    #[doc(hidden)]
    pub environment_id: std::option::Option<std::string::String>,
    /// <p>The ID of the AWS account in which the FinSpace environment is created.</p>
    #[doc(hidden)]
    pub aws_account_id: std::option::Option<std::string::String>,
    /// <p>The current status of creation of the FinSpace environment.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::EnvironmentStatus>,
    /// <p>The sign-in url for the web application of your FinSpace environment.</p>
    #[doc(hidden)]
    pub environment_url: std::option::Option<std::string::String>,
    /// <p>The description of the FinSpace environment.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of your FinSpace environment.</p>
    #[doc(hidden)]
    pub environment_arn: std::option::Option<std::string::String>,
    /// <p>The url of the integrated FinSpace notebook environment in your web application.</p>
    #[doc(hidden)]
    pub sage_maker_studio_domain_url: std::option::Option<std::string::String>,
    /// <p>The KMS key id used to encrypt in the FinSpace environment.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The AWS account ID of the dedicated service account associated with your FinSpace environment.</p>
    #[doc(hidden)]
    pub dedicated_service_account_id: std::option::Option<std::string::String>,
    /// <p>The authentication mode for the environment.</p>
    #[doc(hidden)]
    pub federation_mode: std::option::Option<crate::types::FederationMode>,
    /// <p>Configuration information when authentication mode is FEDERATED.</p>
    #[doc(hidden)]
    pub federation_parameters: std::option::Option<crate::types::FederationParameters>,
}
impl Environment {
    /// <p>The name of the FinSpace environment.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The identifier of the FinSpace environment.</p>
    pub fn environment_id(&self) -> std::option::Option<&str> {
        self.environment_id.as_deref()
    }
    /// <p>The ID of the AWS account in which the FinSpace environment is created.</p>
    pub fn aws_account_id(&self) -> std::option::Option<&str> {
        self.aws_account_id.as_deref()
    }
    /// <p>The current status of creation of the FinSpace environment.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::EnvironmentStatus> {
        self.status.as_ref()
    }
    /// <p>The sign-in url for the web application of your FinSpace environment.</p>
    pub fn environment_url(&self) -> std::option::Option<&str> {
        self.environment_url.as_deref()
    }
    /// <p>The description of the FinSpace environment.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of your FinSpace environment.</p>
    pub fn environment_arn(&self) -> std::option::Option<&str> {
        self.environment_arn.as_deref()
    }
    /// <p>The url of the integrated FinSpace notebook environment in your web application.</p>
    pub fn sage_maker_studio_domain_url(&self) -> std::option::Option<&str> {
        self.sage_maker_studio_domain_url.as_deref()
    }
    /// <p>The KMS key id used to encrypt in the FinSpace environment.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The AWS account ID of the dedicated service account associated with your FinSpace environment.</p>
    pub fn dedicated_service_account_id(&self) -> std::option::Option<&str> {
        self.dedicated_service_account_id.as_deref()
    }
    /// <p>The authentication mode for the environment.</p>
    pub fn federation_mode(&self) -> std::option::Option<&crate::types::FederationMode> {
        self.federation_mode.as_ref()
    }
    /// <p>Configuration information when authentication mode is FEDERATED.</p>
    pub fn federation_parameters(
        &self,
    ) -> std::option::Option<&crate::types::FederationParameters> {
        self.federation_parameters.as_ref()
    }
}
impl Environment {
    /// Creates a new builder-style object to manufacture [`Environment`](crate::types::Environment).
    pub fn builder() -> crate::types::builders::EnvironmentBuilder {
        crate::types::builders::EnvironmentBuilder::default()
    }
}

/// A builder for [`Environment`](crate::types::Environment).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EnvironmentBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) environment_id: std::option::Option<std::string::String>,
    pub(crate) aws_account_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::EnvironmentStatus>,
    pub(crate) environment_url: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) environment_arn: std::option::Option<std::string::String>,
    pub(crate) sage_maker_studio_domain_url: std::option::Option<std::string::String>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) dedicated_service_account_id: std::option::Option<std::string::String>,
    pub(crate) federation_mode: std::option::Option<crate::types::FederationMode>,
    pub(crate) federation_parameters: std::option::Option<crate::types::FederationParameters>,
}
impl EnvironmentBuilder {
    /// <p>The name of the FinSpace environment.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the FinSpace environment.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The identifier of the FinSpace environment.</p>
    pub fn environment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_id = Some(input.into());
        self
    }
    /// <p>The identifier of the FinSpace environment.</p>
    pub fn set_environment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.environment_id = input;
        self
    }
    /// <p>The ID of the AWS account in which the FinSpace environment is created.</p>
    pub fn aws_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_account_id = Some(input.into());
        self
    }
    /// <p>The ID of the AWS account in which the FinSpace environment is created.</p>
    pub fn set_aws_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_account_id = input;
        self
    }
    /// <p>The current status of creation of the FinSpace environment.</p>
    pub fn status(mut self, input: crate::types::EnvironmentStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of creation of the FinSpace environment.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::EnvironmentStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The sign-in url for the web application of your FinSpace environment.</p>
    pub fn environment_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_url = Some(input.into());
        self
    }
    /// <p>The sign-in url for the web application of your FinSpace environment.</p>
    pub fn set_environment_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.environment_url = input;
        self
    }
    /// <p>The description of the FinSpace environment.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the FinSpace environment.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of your FinSpace environment.</p>
    pub fn environment_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.environment_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of your FinSpace environment.</p>
    pub fn set_environment_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.environment_arn = input;
        self
    }
    /// <p>The url of the integrated FinSpace notebook environment in your web application.</p>
    pub fn sage_maker_studio_domain_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.sage_maker_studio_domain_url = Some(input.into());
        self
    }
    /// <p>The url of the integrated FinSpace notebook environment in your web application.</p>
    pub fn set_sage_maker_studio_domain_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.sage_maker_studio_domain_url = input;
        self
    }
    /// <p>The KMS key id used to encrypt in the FinSpace environment.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The KMS key id used to encrypt in the FinSpace environment.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The AWS account ID of the dedicated service account associated with your FinSpace environment.</p>
    pub fn dedicated_service_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.dedicated_service_account_id = Some(input.into());
        self
    }
    /// <p>The AWS account ID of the dedicated service account associated with your FinSpace environment.</p>
    pub fn set_dedicated_service_account_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.dedicated_service_account_id = input;
        self
    }
    /// <p>The authentication mode for the environment.</p>
    pub fn federation_mode(mut self, input: crate::types::FederationMode) -> Self {
        self.federation_mode = Some(input);
        self
    }
    /// <p>The authentication mode for the environment.</p>
    pub fn set_federation_mode(
        mut self,
        input: std::option::Option<crate::types::FederationMode>,
    ) -> Self {
        self.federation_mode = input;
        self
    }
    /// <p>Configuration information when authentication mode is FEDERATED.</p>
    pub fn federation_parameters(mut self, input: crate::types::FederationParameters) -> Self {
        self.federation_parameters = Some(input);
        self
    }
    /// <p>Configuration information when authentication mode is FEDERATED.</p>
    pub fn set_federation_parameters(
        mut self,
        input: std::option::Option<crate::types::FederationParameters>,
    ) -> Self {
        self.federation_parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`Environment`](crate::types::Environment).
    pub fn build(self) -> crate::types::Environment {
        crate::types::Environment {
            name: self.name,
            environment_id: self.environment_id,
            aws_account_id: self.aws_account_id,
            status: self.status,
            environment_url: self.environment_url,
            description: self.description,
            environment_arn: self.environment_arn,
            sage_maker_studio_domain_url: self.sage_maker_studio_domain_url,
            kms_key_id: self.kms_key_id,
            dedicated_service_account_id: self.dedicated_service_account_id,
            federation_mode: self.federation_mode,
            federation_parameters: self.federation_parameters,
        }
    }
}
