// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Defines the ICMP protocol that consists of the ICMP type and code. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct IcmpTypeCode {
    /// <p>The ICMP type. A value of <i>-1</i> means all types. </p>
    pub r#type: i32,
    /// <p> The ICMP code. A value of <i>-1</i> means all codes for the specified ICMP type. </p>
    pub code: i32,
}
impl IcmpTypeCode {
    /// <p>The ICMP type. A value of <i>-1</i> means all types. </p>
    pub fn r#type(&self) -> i32 {
        self.r#type
    }
    /// <p> The ICMP code. A value of <i>-1</i> means all codes for the specified ICMP type. </p>
    pub fn code(&self) -> i32 {
        self.code
    }
}
impl IcmpTypeCode {
    /// Creates a new builder-style object to manufacture [`IcmpTypeCode`](crate::types::IcmpTypeCode).
    pub fn builder() -> crate::types::builders::IcmpTypeCodeBuilder {
        crate::types::builders::IcmpTypeCodeBuilder::default()
    }
}

/// A builder for [`IcmpTypeCode`](crate::types::IcmpTypeCode).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct IcmpTypeCodeBuilder {
    pub(crate) r#type: ::std::option::Option<i32>,
    pub(crate) code: ::std::option::Option<i32>,
}
impl IcmpTypeCodeBuilder {
    /// <p>The ICMP type. A value of <i>-1</i> means all types. </p>
    /// This field is required.
    pub fn r#type(mut self, input: i32) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ICMP type. A value of <i>-1</i> means all types. </p>
    pub fn set_type(mut self, input: ::std::option::Option<i32>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The ICMP type. A value of <i>-1</i> means all types. </p>
    pub fn get_type(&self) -> &::std::option::Option<i32> {
        &self.r#type
    }
    /// <p> The ICMP code. A value of <i>-1</i> means all codes for the specified ICMP type. </p>
    /// This field is required.
    pub fn code(mut self, input: i32) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p> The ICMP code. A value of <i>-1</i> means all codes for the specified ICMP type. </p>
    pub fn set_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.code = input;
        self
    }
    /// <p> The ICMP code. A value of <i>-1</i> means all codes for the specified ICMP type. </p>
    pub fn get_code(&self) -> &::std::option::Option<i32> {
        &self.code
    }
    /// Consumes the builder and constructs a [`IcmpTypeCode`](crate::types::IcmpTypeCode).
    pub fn build(self) -> crate::types::IcmpTypeCode {
        crate::types::IcmpTypeCode {
            r#type: self.r#type.unwrap_or_default(),
            code: self.code.unwrap_or_default(),
        }
    }
}
