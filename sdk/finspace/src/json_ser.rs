// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_environment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateEnvironmentInput,
) {
    if let Some(var_1) = &input.description {
        object.key("description").string(var_1);
    }
    if let Some(var_2) = &input.federation_mode {
        object.key("federationMode").string(var_2.as_str());
    }
    if let Some(var_3) = &input.federation_parameters {
        let mut object_4 = object.key("federationParameters").start_object();
        crate::json_ser::serialize_structure_federation_parameters(&mut object_4, var_3);
        object_4.finish();
    }
    if let Some(var_5) = &input.kms_key_id {
        object.key("kmsKeyId").string(var_5);
    }
    if let Some(var_6) = &input.name {
        object.key("name").string(var_6);
    }
    if let Some(var_7) = &input.tags {
        let mut object_8 = object.key("tags").start_object();
        for (key_9, value_10) in var_7 {
            {
                object_8.key(key_9).string(value_10);
            }
        }
        object_8.finish();
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_11) = &input.tags {
        let mut object_12 = object.key("tags").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13).string(value_14);
            }
        }
        object_12.finish();
    }
}

pub fn serialize_structure_update_environment_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateEnvironmentInput,
) {
    if let Some(var_15) = &input.description {
        object.key("description").string(var_15);
    }
    if let Some(var_16) = &input.federation_mode {
        object.key("federationMode").string(var_16.as_str());
    }
    if let Some(var_17) = &input.federation_parameters {
        let mut object_18 = object.key("federationParameters").start_object();
        crate::json_ser::serialize_structure_federation_parameters(&mut object_18, var_17);
        object_18.finish();
    }
    if let Some(var_19) = &input.name {
        object.key("name").string(var_19);
    }
}

pub fn serialize_structure_federation_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FederationParameters,
) {
    if let Some(var_20) = &input.saml_metadata_document {
        object.key("samlMetadataDocument").string(var_20);
    }
    if let Some(var_21) = &input.saml_metadata_url {
        object.key("samlMetadataURL").string(var_21);
    }
    if let Some(var_22) = &input.application_call_back_url {
        object.key("applicationCallBackURL").string(var_22);
    }
    if let Some(var_23) = &input.federation_urn {
        object.key("federationURN").string(var_23);
    }
    if let Some(var_24) = &input.federation_provider_name {
        object.key("federationProviderName").string(var_24);
    }
    if let Some(var_25) = &input.attribute_map {
        let mut object_26 = object.key("attributeMap").start_object();
        for (key_27, value_28) in var_25 {
            {
                object_26.key(key_27).string(value_28);
            }
        }
        object_26.finish();
    }
}
