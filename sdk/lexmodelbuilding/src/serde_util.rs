// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn code_hook_correct_errors(mut builder: crate::types::builders::CodeHookBuilder) -> crate::types::builders::CodeHookBuilder {
    if builder.uri.is_none() {
        builder.uri = Some(Default::default())
    }
    if builder.message_version.is_none() {
        builder.message_version = Some(Default::default())
    }
    builder
}

pub(crate) fn follow_up_prompt_correct_errors(
    mut builder: crate::types::builders::FollowUpPromptBuilder,
) -> crate::types::builders::FollowUpPromptBuilder {
    if builder.prompt.is_none() {
        builder.prompt = {
            let builder = crate::types::builders::PromptBuilder::default();
            crate::serde_util::prompt_correct_errors(builder).build().ok()
        }
    }
    if builder.rejection_statement.is_none() {
        builder.rejection_statement = {
            let builder = crate::types::builders::StatementBuilder::default();
            crate::serde_util::statement_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn fulfillment_activity_correct_errors(
    mut builder: crate::types::builders::FulfillmentActivityBuilder,
) -> crate::types::builders::FulfillmentActivityBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::FulfillmentActivityType>().ok()
    }
    builder
}

pub(crate) fn kendra_configuration_correct_errors(
    mut builder: crate::types::builders::KendraConfigurationBuilder,
) -> crate::types::builders::KendraConfigurationBuilder {
    if builder.kendra_index.is_none() {
        builder.kendra_index = Some(Default::default())
    }
    if builder.role.is_none() {
        builder.role = Some(Default::default())
    }
    builder
}

pub(crate) fn prompt_correct_errors(mut builder: crate::types::builders::PromptBuilder) -> crate::types::builders::PromptBuilder {
    if builder.messages.is_none() {
        builder.messages = Some(Default::default())
    }
    if builder.max_attempts.is_none() {
        builder.max_attempts = Some(Default::default())
    }
    builder
}

pub(crate) fn statement_correct_errors(mut builder: crate::types::builders::StatementBuilder) -> crate::types::builders::StatementBuilder {
    if builder.messages.is_none() {
        builder.messages = Some(Default::default())
    }
    builder
}

pub(crate) fn enumeration_value_correct_errors(
    mut builder: crate::types::builders::EnumerationValueBuilder,
) -> crate::types::builders::EnumerationValueBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn input_context_correct_errors(mut builder: crate::types::builders::InputContextBuilder) -> crate::types::builders::InputContextBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn intent_correct_errors(mut builder: crate::types::builders::IntentBuilder) -> crate::types::builders::IntentBuilder {
    if builder.intent_name.is_none() {
        builder.intent_name = Some(Default::default())
    }
    if builder.intent_version.is_none() {
        builder.intent_version = Some(Default::default())
    }
    builder
}

pub(crate) fn output_context_correct_errors(
    mut builder: crate::types::builders::OutputContextBuilder,
) -> crate::types::builders::OutputContextBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.time_to_live_in_seconds.is_none() {
        builder.time_to_live_in_seconds = Some(Default::default())
    }
    if builder.turns_to_live.is_none() {
        builder.turns_to_live = Some(Default::default())
    }
    builder
}

pub(crate) fn slot_correct_errors(mut builder: crate::types::builders::SlotBuilder) -> crate::types::builders::SlotBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.slot_constraint.is_none() {
        builder.slot_constraint = "no value was set".parse::<crate::types::SlotConstraint>().ok()
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn message_correct_errors(mut builder: crate::types::builders::MessageBuilder) -> crate::types::builders::MessageBuilder {
    if builder.content_type.is_none() {
        builder.content_type = "no value was set".parse::<crate::types::ContentType>().ok()
    }
    if builder.content.is_none() {
        builder.content = Some(Default::default())
    }
    builder
}

pub(crate) fn slot_default_value_spec_correct_errors(
    mut builder: crate::types::builders::SlotDefaultValueSpecBuilder,
) -> crate::types::builders::SlotDefaultValueSpecBuilder {
    if builder.default_value_list.is_none() {
        builder.default_value_list = Some(Default::default())
    }
    builder
}

pub(crate) fn slot_type_regex_configuration_correct_errors(
    mut builder: crate::types::builders::SlotTypeRegexConfigurationBuilder,
) -> crate::types::builders::SlotTypeRegexConfigurationBuilder {
    if builder.pattern.is_none() {
        builder.pattern = Some(Default::default())
    }
    builder
}

pub(crate) fn slot_default_value_correct_errors(
    mut builder: crate::types::builders::SlotDefaultValueBuilder,
) -> crate::types::builders::SlotDefaultValueBuilder {
    if builder.default_value.is_none() {
        builder.default_value = Some(Default::default())
    }
    builder
}
