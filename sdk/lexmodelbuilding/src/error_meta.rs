// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Your IAM user or role does not have permission to call the Amazon Lex V2 APIs required to migrate your bot.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>The request is not well formed. For example, a value is invalid or a required field is missing. Check the field values, and try again.</p>
    BadRequestException(crate::error::BadRequestException),
    /// <p> There was a conflict processing the request. Try your request again. </p>
    ConflictException(crate::error::ConflictException),
    /// <p>An internal Amazon Lex error occurred. Try your request again.</p>
    InternalFailureException(crate::error::InternalFailureException),
    /// <p>The request exceeded a limit. Try your request again.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The resource specified in the request was not found. Check the resource and try again.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p> The checksum of the resource that you are trying to change does not match the checksum in the request. Check the resource's checksum and try again.</p>
    PreconditionFailedException(crate::error::PreconditionFailedException),
    /// <p>The resource that you are attempting to delete is referred to by another resource. Use this information to remove references to the resource that you are trying to delete.</p>
    /// <p>The body of the exception contains a JSON object that describes the resource.</p>
    /// <p> <code>{ "resourceType": BOT | BOTALIAS | BOTCHANNEL | INTENT,</code> </p>
    /// <p> <code>"resourceReference": {</code> </p>
    /// <p> <code>"name": <i>string</i>, "version": <i>string</i> } }</code> </p>
    ResourceInUseException(crate::error::ResourceInUseException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalFailureException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::PreconditionFailedException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBotVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateBotVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBotVersionError> for Error {
    fn from(err: crate::error::CreateBotVersionError) -> Self {
        match err {
            crate::error::CreateBotVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateBotVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateBotVersionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateBotVersionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateBotVersionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateBotVersionError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::CreateBotVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateIntentVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateIntentVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateIntentVersionError> for Error {
    fn from(err: crate::error::CreateIntentVersionError) -> Self {
        match err {
            crate::error::CreateIntentVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateIntentVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateIntentVersionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateIntentVersionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateIntentVersionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateIntentVersionError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::CreateIntentVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSlotTypeVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSlotTypeVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSlotTypeVersionError> for Error {
    fn from(err: crate::error::CreateSlotTypeVersionError) -> Self {
        match err {
            crate::error::CreateSlotTypeVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateSlotTypeVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateSlotTypeVersionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::CreateSlotTypeVersionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateSlotTypeVersionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateSlotTypeVersionError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::CreateSlotTypeVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteBotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBotError> for Error {
    fn from(err: crate::error::DeleteBotError) -> Self {
        match err {
            crate::error::DeleteBotError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteBotError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteBotError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteBotError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteBotError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBotError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBotAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteBotAliasError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBotAliasError> for Error {
    fn from(err: crate::error::DeleteBotAliasError) -> Self {
        match err {
            crate::error::DeleteBotAliasError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteBotAliasError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteBotAliasError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteBotAliasError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteBotAliasError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBotAliasError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteBotAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBotChannelAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBotChannelAssociationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBotChannelAssociationError> for Error {
    fn from(err: crate::error::DeleteBotChannelAssociationError) -> Self {
        match err {
            crate::error::DeleteBotChannelAssociationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteBotChannelAssociationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteBotChannelAssociationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteBotChannelAssociationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteBotChannelAssociationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBotChannelAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBotVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBotVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBotVersionError> for Error {
    fn from(err: crate::error::DeleteBotVersionError) -> Self {
        match err {
            crate::error::DeleteBotVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteBotVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteBotVersionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteBotVersionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteBotVersionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBotVersionError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteBotVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteIntentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteIntentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteIntentError> for Error {
    fn from(err: crate::error::DeleteIntentError) -> Self {
        match err {
            crate::error::DeleteIntentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteIntentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteIntentError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteIntentError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteIntentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteIntentError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteIntentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteIntentVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteIntentVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteIntentVersionError> for Error {
    fn from(err: crate::error::DeleteIntentVersionError) -> Self {
        match err {
            crate::error::DeleteIntentVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteIntentVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteIntentVersionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteIntentVersionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteIntentVersionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteIntentVersionError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteIntentVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSlotTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSlotTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSlotTypeError> for Error {
    fn from(err: crate::error::DeleteSlotTypeError) -> Self {
        match err {
            crate::error::DeleteSlotTypeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteSlotTypeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteSlotTypeError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteSlotTypeError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteSlotTypeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteSlotTypeError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteSlotTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSlotTypeVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSlotTypeVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSlotTypeVersionError> for Error {
    fn from(err: crate::error::DeleteSlotTypeVersionError) -> Self {
        match err {
            crate::error::DeleteSlotTypeVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteSlotTypeVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteSlotTypeVersionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteSlotTypeVersionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteSlotTypeVersionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteSlotTypeVersionError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::error::DeleteSlotTypeVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUtterancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteUtterancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUtterancesError> for Error {
    fn from(err: crate::error::DeleteUtterancesError) -> Self {
        match err {
            crate::error::DeleteUtterancesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteUtterancesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteUtterancesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteUtterancesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteUtterancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetBotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBotError> for Error {
    fn from(err: crate::error::GetBotError) -> Self {
        match err {
            crate::error::GetBotError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBotError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetBotError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetBotError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBotAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetBotAliasError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBotAliasError> for Error {
    fn from(err: crate::error::GetBotAliasError) -> Self {
        match err {
            crate::error::GetBotAliasError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBotAliasError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetBotAliasError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetBotAliasError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBotAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBotAliasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetBotAliasesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBotAliasesError> for Error {
    fn from(err: crate::error::GetBotAliasesError) -> Self {
        match err {
            crate::error::GetBotAliasesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBotAliasesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetBotAliasesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetBotAliasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBotChannelAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBotChannelAssociationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBotChannelAssociationError> for Error {
    fn from(err: crate::error::GetBotChannelAssociationError) -> Self {
        match err {
            crate::error::GetBotChannelAssociationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBotChannelAssociationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetBotChannelAssociationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetBotChannelAssociationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBotChannelAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBotChannelAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBotChannelAssociationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBotChannelAssociationsError> for Error {
    fn from(err: crate::error::GetBotChannelAssociationsError) -> Self {
        match err {
            crate::error::GetBotChannelAssociationsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBotChannelAssociationsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetBotChannelAssociationsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetBotChannelAssociationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetBotsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBotsError> for Error {
    fn from(err: crate::error::GetBotsError) -> Self {
        match err {
            crate::error::GetBotsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBotsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetBotsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetBotsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetBotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBotVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetBotVersionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBotVersionsError> for Error {
    fn from(err: crate::error::GetBotVersionsError) -> Self {
        match err {
            crate::error::GetBotVersionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBotVersionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetBotVersionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetBotVersionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBotVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBuiltinIntentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBuiltinIntentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBuiltinIntentError> for Error {
    fn from(err: crate::error::GetBuiltinIntentError) -> Self {
        match err {
            crate::error::GetBuiltinIntentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBuiltinIntentError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetBuiltinIntentError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetBuiltinIntentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBuiltinIntentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBuiltinIntentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBuiltinIntentsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBuiltinIntentsError> for Error {
    fn from(err: crate::error::GetBuiltinIntentsError) -> Self {
        match err {
            crate::error::GetBuiltinIntentsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBuiltinIntentsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetBuiltinIntentsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetBuiltinIntentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBuiltinSlotTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBuiltinSlotTypesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBuiltinSlotTypesError> for Error {
    fn from(err: crate::error::GetBuiltinSlotTypesError) -> Self {
        match err {
            crate::error::GetBuiltinSlotTypesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBuiltinSlotTypesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetBuiltinSlotTypesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetBuiltinSlotTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetExportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetExportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetExportError> for Error {
    fn from(err: crate::error::GetExportError) -> Self {
        match err {
            crate::error::GetExportError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetExportError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetExportError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetExportError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetImportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetImportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetImportError> for Error {
    fn from(err: crate::error::GetImportError) -> Self {
        match err {
            crate::error::GetImportError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetImportError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetImportError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetImportError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetImportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetIntentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetIntentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetIntentError> for Error {
    fn from(err: crate::error::GetIntentError) -> Self {
        match err {
            crate::error::GetIntentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetIntentError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetIntentError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetIntentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetIntentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetIntentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetIntentsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetIntentsError> for Error {
    fn from(err: crate::error::GetIntentsError) -> Self {
        match err {
            crate::error::GetIntentsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetIntentsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetIntentsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetIntentsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetIntentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetIntentVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetIntentVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetIntentVersionsError> for Error {
    fn from(err: crate::error::GetIntentVersionsError) -> Self {
        match err {
            crate::error::GetIntentVersionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetIntentVersionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetIntentVersionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetIntentVersionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetIntentVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMigrationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetMigrationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMigrationError> for Error {
    fn from(err: crate::error::GetMigrationError) -> Self {
        match err {
            crate::error::GetMigrationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetMigrationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetMigrationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetMigrationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetMigrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMigrationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetMigrationsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMigrationsError> for Error {
    fn from(err: crate::error::GetMigrationsError) -> Self {
        match err {
            crate::error::GetMigrationsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetMigrationsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetMigrationsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetMigrationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSlotTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSlotTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSlotTypeError> for Error {
    fn from(err: crate::error::GetSlotTypeError) -> Self {
        match err {
            crate::error::GetSlotTypeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSlotTypeError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetSlotTypeError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetSlotTypeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSlotTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSlotTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSlotTypesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSlotTypesError> for Error {
    fn from(err: crate::error::GetSlotTypesError) -> Self {
        match err {
            crate::error::GetSlotTypesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSlotTypesError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetSlotTypesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetSlotTypesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSlotTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSlotTypeVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSlotTypeVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSlotTypeVersionsError> for Error {
    fn from(err: crate::error::GetSlotTypeVersionsError) -> Self {
        match err {
            crate::error::GetSlotTypeVersionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSlotTypeVersionsError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetSlotTypeVersionsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetSlotTypeVersionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSlotTypeVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUtterancesViewError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetUtterancesViewError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUtterancesViewError> for Error {
    fn from(err: crate::error::GetUtterancesViewError) -> Self {
        match err {
            crate::error::GetUtterancesViewError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetUtterancesViewError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetUtterancesViewError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetUtterancesViewError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListTagsForResourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::ListTagsForResourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListTagsForResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutBotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutBotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutBotError> for Error {
    fn from(err: crate::error::PutBotError) -> Self {
        match err {
            crate::error::PutBotError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutBotError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::PutBotError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::PutBotError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutBotError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::PutBotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutBotAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutBotAliasError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutBotAliasError> for Error {
    fn from(err: crate::error::PutBotAliasError) -> Self {
        match err {
            crate::error::PutBotAliasError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutBotAliasError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutBotAliasError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::PutBotAliasError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutBotAliasError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::PutBotAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutIntentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutIntentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutIntentError> for Error {
    fn from(err: crate::error::PutIntentError) -> Self {
        match err {
            crate::error::PutIntentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutIntentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutIntentError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::PutIntentError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutIntentError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::PutIntentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutSlotTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutSlotTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutSlotTypeError> for Error {
    fn from(err: crate::error::PutSlotTypeError) -> Self {
        match err {
            crate::error::PutSlotTypeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutSlotTypeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutSlotTypeError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::PutSlotTypeError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutSlotTypeError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::error::PutSlotTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartImportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartImportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartImportError> for Error {
    fn from(err: crate::error::StartImportError) -> Self {
        match err {
            crate::error::StartImportError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::StartImportError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::StartImportError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StartImportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartMigrationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartMigrationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartMigrationError> for Error {
    fn from(err: crate::error::StartMigrationError) -> Self {
        match err {
            crate::error::StartMigrationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::StartMigrationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::StartMigrationError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::StartMigrationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StartMigrationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::StartMigrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::TagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::TagResourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::TagResourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::TagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UntagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UntagResourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::UntagResourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UntagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalFailureException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::PreconditionFailedException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
