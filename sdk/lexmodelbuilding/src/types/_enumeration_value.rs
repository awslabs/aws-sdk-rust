// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Each slot type can have a set of values. Each enumeration value represents a value the slot type can take. </p>
/// <p>For example, a pizza ordering bot could have a slot type that specifies the type of crust that the pizza should have. The slot type could include the values </p>
/// <ul>
/// <li> <p>thick</p> </li>
/// <li> <p>thin</p> </li>
/// <li> <p>stuffed</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnumerationValue {
    /// <p>The value of the slot type.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>Additional values related to the slot type value.</p>
    #[doc(hidden)]
    pub synonyms: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl EnumerationValue {
    /// <p>The value of the slot type.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>Additional values related to the slot type value.</p>
    pub fn synonyms(&self) -> std::option::Option<&[std::string::String]> {
        self.synonyms.as_deref()
    }
}
impl EnumerationValue {
    /// Creates a new builder-style object to manufacture [`EnumerationValue`](crate::types::EnumerationValue).
    pub fn builder() -> crate::types::builders::EnumerationValueBuilder {
        crate::types::builders::EnumerationValueBuilder::default()
    }
}

/// A builder for [`EnumerationValue`](crate::types::EnumerationValue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EnumerationValueBuilder {
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) synonyms: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl EnumerationValueBuilder {
    /// <p>The value of the slot type.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value of the slot type.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Appends an item to `synonyms`.
    ///
    /// To override the contents of this collection use [`set_synonyms`](Self::set_synonyms).
    ///
    /// <p>Additional values related to the slot type value.</p>
    pub fn synonyms(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.synonyms.unwrap_or_default();
        v.push(input.into());
        self.synonyms = Some(v);
        self
    }
    /// <p>Additional values related to the slot type value.</p>
    pub fn set_synonyms(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.synonyms = input;
        self
    }
    /// Consumes the builder and constructs a [`EnumerationValue`](crate::types::EnumerationValue).
    pub fn build(self) -> crate::types::EnumerationValue {
        crate::types::EnumerationValue {
            value: self.value,
            synonyms: self.synonyms,
        }
    }
}
