// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Each slot type can have a set of values. Each enumeration value represents a value the slot type can take. </p>
/// <p>For example, a pizza ordering bot could have a slot type that specifies the type of crust that the pizza should have. The slot type could include the values </p>
/// <ul>
/// <li> <p>thick</p> </li>
/// <li> <p>thin</p> </li>
/// <li> <p>stuffed</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnumerationValue {
    /// <p>The value of the slot type.</p>
    pub value: ::std::string::String,
    /// <p>Additional values related to the slot type value.</p>
    pub synonyms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EnumerationValue {
    /// <p>The value of the slot type.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
    /// <p>Additional values related to the slot type value.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.synonyms.is_none()`.
    pub fn synonyms(&self) -> &[::std::string::String] {
        self.synonyms.as_deref().unwrap_or_default()
    }
}
impl EnumerationValue {
    /// Creates a new builder-style object to manufacture [`EnumerationValue`](crate::types::EnumerationValue).
    pub fn builder() -> crate::types::builders::EnumerationValueBuilder {
        crate::types::builders::EnumerationValueBuilder::default()
    }
}

/// A builder for [`EnumerationValue`](crate::types::EnumerationValue).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EnumerationValueBuilder {
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) synonyms: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl EnumerationValueBuilder {
    /// <p>The value of the slot type.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the slot type.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the slot type.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Appends an item to `synonyms`.
    ///
    /// To override the contents of this collection use [`set_synonyms`](Self::set_synonyms).
    ///
    /// <p>Additional values related to the slot type value.</p>
    pub fn synonyms(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.synonyms.unwrap_or_default();
        v.push(input.into());
        self.synonyms = ::std::option::Option::Some(v);
        self
    }
    /// <p>Additional values related to the slot type value.</p>
    pub fn set_synonyms(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.synonyms = input;
        self
    }
    /// <p>Additional values related to the slot type value.</p>
    pub fn get_synonyms(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.synonyms
    }
    /// Consumes the builder and constructs a [`EnumerationValue`](crate::types::EnumerationValue).
    /// This method will fail if any of the following fields are not set:
    /// - [`value`](crate::types::builders::EnumerationValueBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::EnumerationValue, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EnumerationValue {
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building EnumerationValue",
                )
            })?,
            synonyms: self.synonyms,
        })
    }
}
