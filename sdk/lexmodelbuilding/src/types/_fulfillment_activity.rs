// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Describes how the intent is fulfilled after the user provides all of the information required for the intent. You can provide a Lambda function to process the intent, or you can return the intent information to the client application. We recommend that you use a Lambda function so that the relevant logic lives in the Cloud and limit the client-side code primarily to presentation. If you need to update the logic, you only update the Lambda function; you don't need to upgrade your client application. </p>
/// <p>Consider the following examples:</p>
/// <ul>
/// <li> <p>In a pizza ordering application, after the user provides all of the information for placing an order, you use a Lambda function to place an order with a pizzeria. </p> </li>
/// <li> <p>In a gaming application, when a user says "pick up a rock," this information must go back to the client application so that it can perform the operation and update the graphics. In this case, you want Amazon Lex to return the intent data to the client. </p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FulfillmentActivity {
    /// <p> How the intent should be fulfilled, either by running a Lambda function or by returning the slot data to the client application. </p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::FulfillmentActivityType>,
    /// <p> A description of the Lambda function that is run to fulfill the intent. </p>
    #[doc(hidden)]
    pub code_hook: std::option::Option<crate::types::CodeHook>,
}
impl FulfillmentActivity {
    /// <p> How the intent should be fulfilled, either by running a Lambda function or by returning the slot data to the client application. </p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::FulfillmentActivityType> {
        self.r#type.as_ref()
    }
    /// <p> A description of the Lambda function that is run to fulfill the intent. </p>
    pub fn code_hook(&self) -> std::option::Option<&crate::types::CodeHook> {
        self.code_hook.as_ref()
    }
}
impl FulfillmentActivity {
    /// Creates a new builder-style object to manufacture [`FulfillmentActivity`](crate::types::FulfillmentActivity).
    pub fn builder() -> crate::types::builders::FulfillmentActivityBuilder {
        crate::types::builders::FulfillmentActivityBuilder::default()
    }
}

/// A builder for [`FulfillmentActivity`](crate::types::FulfillmentActivity).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FulfillmentActivityBuilder {
    pub(crate) r#type: std::option::Option<crate::types::FulfillmentActivityType>,
    pub(crate) code_hook: std::option::Option<crate::types::CodeHook>,
}
impl FulfillmentActivityBuilder {
    /// <p> How the intent should be fulfilled, either by running a Lambda function or by returning the slot data to the client application. </p>
    pub fn r#type(mut self, input: crate::types::FulfillmentActivityType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p> How the intent should be fulfilled, either by running a Lambda function or by returning the slot data to the client application. </p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::FulfillmentActivityType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p> A description of the Lambda function that is run to fulfill the intent. </p>
    pub fn code_hook(mut self, input: crate::types::CodeHook) -> Self {
        self.code_hook = Some(input);
        self
    }
    /// <p> A description of the Lambda function that is run to fulfill the intent. </p>
    pub fn set_code_hook(mut self, input: std::option::Option<crate::types::CodeHook>) -> Self {
        self.code_hook = input;
        self
    }
    /// Consumes the builder and constructs a [`FulfillmentActivity`](crate::types::FulfillmentActivity).
    pub fn build(self) -> crate::types::FulfillmentActivity {
        crate::types::FulfillmentActivity {
            r#type: self.r#type,
            code_hook: self.code_hook,
        }
    }
}
