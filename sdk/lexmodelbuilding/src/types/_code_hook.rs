// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies a Lambda function that verifies requests to a bot or fulfills the user's request to a bot..</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CodeHook {
    /// <p>The Amazon Resource Name (ARN) of the Lambda function.</p>
    #[doc(hidden)]
    pub uri: std::option::Option<std::string::String>,
    /// <p>The version of the request-response that you want Amazon Lex to use to invoke your Lambda function. For more information, see <code>using-lambda</code>.</p>
    #[doc(hidden)]
    pub message_version: std::option::Option<std::string::String>,
}
impl CodeHook {
    /// <p>The Amazon Resource Name (ARN) of the Lambda function.</p>
    pub fn uri(&self) -> std::option::Option<&str> {
        self.uri.as_deref()
    }
    /// <p>The version of the request-response that you want Amazon Lex to use to invoke your Lambda function. For more information, see <code>using-lambda</code>.</p>
    pub fn message_version(&self) -> std::option::Option<&str> {
        self.message_version.as_deref()
    }
}
impl CodeHook {
    /// Creates a new builder-style object to manufacture [`CodeHook`](crate::types::CodeHook).
    pub fn builder() -> crate::types::builders::CodeHookBuilder {
        crate::types::builders::CodeHookBuilder::default()
    }
}

/// A builder for [`CodeHook`](crate::types::CodeHook).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CodeHookBuilder {
    pub(crate) uri: std::option::Option<std::string::String>,
    pub(crate) message_version: std::option::Option<std::string::String>,
}
impl CodeHookBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Lambda function.</p>
    pub fn uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.uri = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Lambda function.</p>
    pub fn set_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.uri = input;
        self
    }
    /// <p>The version of the request-response that you want Amazon Lex to use to invoke your Lambda function. For more information, see <code>using-lambda</code>.</p>
    pub fn message_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.message_version = Some(input.into());
        self
    }
    /// <p>The version of the request-response that you want Amazon Lex to use to invoke your Lambda function. For more information, see <code>using-lambda</code>.</p>
    pub fn set_message_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message_version = input;
        self
    }
    /// Consumes the builder and constructs a [`CodeHook`](crate::types::CodeHook).
    pub fn build(self) -> crate::types::CodeHook {
        crate::types::CodeHook {
            uri: self.uri,
            message_version: self.message_version,
        }
    }
}
