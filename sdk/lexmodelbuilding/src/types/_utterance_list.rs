// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a list of utterances that have been made to a specific version of your bot. The list contains a maximum of 100 utterances.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UtteranceList {
    /// <p>The version of the bot that processed the list.</p>
    #[doc(hidden)]
    pub bot_version: std::option::Option<std::string::String>,
    /// <p>One or more <code>UtteranceData</code> objects that contain information about the utterances that have been made to a bot. The maximum number of object is 100.</p>
    #[doc(hidden)]
    pub utterances: std::option::Option<std::vec::Vec<crate::types::UtteranceData>>,
}
impl UtteranceList {
    /// <p>The version of the bot that processed the list.</p>
    pub fn bot_version(&self) -> std::option::Option<&str> {
        self.bot_version.as_deref()
    }
    /// <p>One or more <code>UtteranceData</code> objects that contain information about the utterances that have been made to a bot. The maximum number of object is 100.</p>
    pub fn utterances(&self) -> std::option::Option<&[crate::types::UtteranceData]> {
        self.utterances.as_deref()
    }
}
impl UtteranceList {
    /// Creates a new builder-style object to manufacture [`UtteranceList`](crate::types::UtteranceList).
    pub fn builder() -> crate::types::builders::UtteranceListBuilder {
        crate::types::builders::UtteranceListBuilder::default()
    }
}

/// A builder for [`UtteranceList`](crate::types::UtteranceList).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UtteranceListBuilder {
    pub(crate) bot_version: std::option::Option<std::string::String>,
    pub(crate) utterances: std::option::Option<std::vec::Vec<crate::types::UtteranceData>>,
}
impl UtteranceListBuilder {
    /// <p>The version of the bot that processed the list.</p>
    pub fn bot_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_version = Some(input.into());
        self
    }
    /// <p>The version of the bot that processed the list.</p>
    pub fn set_bot_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_version = input;
        self
    }
    /// Appends an item to `utterances`.
    ///
    /// To override the contents of this collection use [`set_utterances`](Self::set_utterances).
    ///
    /// <p>One or more <code>UtteranceData</code> objects that contain information about the utterances that have been made to a bot. The maximum number of object is 100.</p>
    pub fn utterances(mut self, input: crate::types::UtteranceData) -> Self {
        let mut v = self.utterances.unwrap_or_default();
        v.push(input);
        self.utterances = Some(v);
        self
    }
    /// <p>One or more <code>UtteranceData</code> objects that contain information about the utterances that have been made to a bot. The maximum number of object is 100.</p>
    pub fn set_utterances(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UtteranceData>>,
    ) -> Self {
        self.utterances = input;
        self
    }
    /// Consumes the builder and constructs a [`UtteranceList`](crate::types::UtteranceList).
    pub fn build(self) -> crate::types::UtteranceList {
        crate::types::UtteranceList {
            bot_version: self.bot_version,
            utterances: self.utterances,
        }
    }
}
