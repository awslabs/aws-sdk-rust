// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A prompt for additional activity after an intent is fulfilled. For example, after the <code>OrderPizza</code> intent is fulfilled, you might prompt the user to find out whether the user wants to order drinks.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FollowUpPrompt {
    /// <p>Prompts for information from the user. </p>
    #[doc(hidden)]
    pub prompt: std::option::Option<crate::types::Prompt>,
    /// <p>If the user answers "no" to the question defined in the <code>prompt</code> field, Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p>
    #[doc(hidden)]
    pub rejection_statement: std::option::Option<crate::types::Statement>,
}
impl FollowUpPrompt {
    /// <p>Prompts for information from the user. </p>
    pub fn prompt(&self) -> std::option::Option<&crate::types::Prompt> {
        self.prompt.as_ref()
    }
    /// <p>If the user answers "no" to the question defined in the <code>prompt</code> field, Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p>
    pub fn rejection_statement(&self) -> std::option::Option<&crate::types::Statement> {
        self.rejection_statement.as_ref()
    }
}
impl FollowUpPrompt {
    /// Creates a new builder-style object to manufacture [`FollowUpPrompt`](crate::types::FollowUpPrompt).
    pub fn builder() -> crate::types::builders::FollowUpPromptBuilder {
        crate::types::builders::FollowUpPromptBuilder::default()
    }
}

/// A builder for [`FollowUpPrompt`](crate::types::FollowUpPrompt).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FollowUpPromptBuilder {
    pub(crate) prompt: std::option::Option<crate::types::Prompt>,
    pub(crate) rejection_statement: std::option::Option<crate::types::Statement>,
}
impl FollowUpPromptBuilder {
    /// <p>Prompts for information from the user. </p>
    pub fn prompt(mut self, input: crate::types::Prompt) -> Self {
        self.prompt = Some(input);
        self
    }
    /// <p>Prompts for information from the user. </p>
    pub fn set_prompt(mut self, input: std::option::Option<crate::types::Prompt>) -> Self {
        self.prompt = input;
        self
    }
    /// <p>If the user answers "no" to the question defined in the <code>prompt</code> field, Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p>
    pub fn rejection_statement(mut self, input: crate::types::Statement) -> Self {
        self.rejection_statement = Some(input);
        self
    }
    /// <p>If the user answers "no" to the question defined in the <code>prompt</code> field, Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p>
    pub fn set_rejection_statement(
        mut self,
        input: std::option::Option<crate::types::Statement>,
    ) -> Self {
        self.rejection_statement = input;
        self
    }
    /// Consumes the builder and constructs a [`FollowUpPrompt`](crate::types::FollowUpPrompt).
    pub fn build(self) -> crate::types::FollowUpPrompt {
        crate::types::FollowUpPrompt {
            prompt: self.prompt,
            rejection_statement: self.rejection_statement,
        }
    }
}
