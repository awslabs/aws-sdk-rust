// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the default values for a slot. Default values are used when Amazon Lex hasn't determined a value for a slot.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SlotDefaultValueSpec {
    /// <p>The default values for a slot. You can specify more than one default. For example, you can specify a default value to use from a matching context variable, a session attribute, or a fixed value.</p>
    /// <p>The default value chosen is selected based on the order that you specify them in the list. For example, if you specify a context variable and a fixed value in that order, Amazon Lex uses the context variable if it is available, else it uses the fixed value.</p>
    #[doc(hidden)]
    pub default_value_list: std::option::Option<std::vec::Vec<crate::types::SlotDefaultValue>>,
}
impl SlotDefaultValueSpec {
    /// <p>The default values for a slot. You can specify more than one default. For example, you can specify a default value to use from a matching context variable, a session attribute, or a fixed value.</p>
    /// <p>The default value chosen is selected based on the order that you specify them in the list. For example, if you specify a context variable and a fixed value in that order, Amazon Lex uses the context variable if it is available, else it uses the fixed value.</p>
    pub fn default_value_list(&self) -> std::option::Option<&[crate::types::SlotDefaultValue]> {
        self.default_value_list.as_deref()
    }
}
impl SlotDefaultValueSpec {
    /// Creates a new builder-style object to manufacture [`SlotDefaultValueSpec`](crate::types::SlotDefaultValueSpec).
    pub fn builder() -> crate::types::builders::SlotDefaultValueSpecBuilder {
        crate::types::builders::SlotDefaultValueSpecBuilder::default()
    }
}

/// A builder for [`SlotDefaultValueSpec`](crate::types::SlotDefaultValueSpec).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SlotDefaultValueSpecBuilder {
    pub(crate) default_value_list:
        std::option::Option<std::vec::Vec<crate::types::SlotDefaultValue>>,
}
impl SlotDefaultValueSpecBuilder {
    /// Appends an item to `default_value_list`.
    ///
    /// To override the contents of this collection use [`set_default_value_list`](Self::set_default_value_list).
    ///
    /// <p>The default values for a slot. You can specify more than one default. For example, you can specify a default value to use from a matching context variable, a session attribute, or a fixed value.</p>
    /// <p>The default value chosen is selected based on the order that you specify them in the list. For example, if you specify a context variable and a fixed value in that order, Amazon Lex uses the context variable if it is available, else it uses the fixed value.</p>
    pub fn default_value_list(mut self, input: crate::types::SlotDefaultValue) -> Self {
        let mut v = self.default_value_list.unwrap_or_default();
        v.push(input);
        self.default_value_list = Some(v);
        self
    }
    /// <p>The default values for a slot. You can specify more than one default. For example, you can specify a default value to use from a matching context variable, a session attribute, or a fixed value.</p>
    /// <p>The default value chosen is selected based on the order that you specify them in the list. For example, if you specify a context variable and a fixed value in that order, Amazon Lex uses the context variable if it is available, else it uses the fixed value.</p>
    pub fn set_default_value_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SlotDefaultValue>>,
    ) -> Self {
        self.default_value_list = input;
        self
    }
    /// Consumes the builder and constructs a [`SlotDefaultValueSpec`](crate::types::SlotDefaultValueSpec).
    pub fn build(self) -> crate::types::SlotDefaultValueSpec {
        crate::types::SlotDefaultValueSpec {
            default_value_list: self.default_value_list,
        }
    }
}
