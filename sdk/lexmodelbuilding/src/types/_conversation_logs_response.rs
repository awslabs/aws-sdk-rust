// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about conversation log settings.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConversationLogsResponse {
    /// <p>The settings for your conversation logs. You can log text, audio, or both.</p>
    #[doc(hidden)]
    pub log_settings: std::option::Option<std::vec::Vec<crate::types::LogSettingsResponse>>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket.</p>
    #[doc(hidden)]
    pub iam_role_arn: std::option::Option<std::string::String>,
}
impl ConversationLogsResponse {
    /// <p>The settings for your conversation logs. You can log text, audio, or both.</p>
    pub fn log_settings(&self) -> std::option::Option<&[crate::types::LogSettingsResponse]> {
        self.log_settings.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket.</p>
    pub fn iam_role_arn(&self) -> std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
}
impl ConversationLogsResponse {
    /// Creates a new builder-style object to manufacture [`ConversationLogsResponse`](crate::types::ConversationLogsResponse).
    pub fn builder() -> crate::types::builders::ConversationLogsResponseBuilder {
        crate::types::builders::ConversationLogsResponseBuilder::default()
    }
}

/// A builder for [`ConversationLogsResponse`](crate::types::ConversationLogsResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConversationLogsResponseBuilder {
    pub(crate) log_settings: std::option::Option<std::vec::Vec<crate::types::LogSettingsResponse>>,
    pub(crate) iam_role_arn: std::option::Option<std::string::String>,
}
impl ConversationLogsResponseBuilder {
    /// Appends an item to `log_settings`.
    ///
    /// To override the contents of this collection use [`set_log_settings`](Self::set_log_settings).
    ///
    /// <p>The settings for your conversation logs. You can log text, audio, or both.</p>
    pub fn log_settings(mut self, input: crate::types::LogSettingsResponse) -> Self {
        let mut v = self.log_settings.unwrap_or_default();
        v.push(input);
        self.log_settings = Some(v);
        self
    }
    /// <p>The settings for your conversation logs. You can log text, audio, or both.</p>
    pub fn set_log_settings(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LogSettingsResponse>>,
    ) -> Self {
        self.log_settings = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket.</p>
    pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.iam_role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role used to write your logs to CloudWatch Logs or an S3 bucket.</p>
    pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`ConversationLogsResponse`](crate::types::ConversationLogsResponse).
    pub fn build(self) -> crate::types::ConversationLogsResponse {
        crate::types::ConversationLogsResponse {
            log_settings: self.log_settings,
            iam_role_arn: self.iam_role_arn,
        }
    }
}
