// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides a regular expression used to validate the value of a slot.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SlotTypeRegexConfiguration {
    /// <p>A regular expression used to validate the value of a slot. </p>
    /// <p>Use a standard regular expression. Amazon Lex supports the following characters in the regular expression:</p>
    /// <ul>
    /// <li> <p>A-Z, a-z</p> </li>
    /// <li> <p>0-9</p> </li>
    /// <li> <p>Unicode characters ("\ u<unicode>
    /// ")
    /// </unicode></p> </li>
    /// </ul>
    /// <p>Represent Unicode characters with four digits, for example "\u0041" or "\u005A".</p>
    /// <p>The following regular expression operators are not supported:</p>
    /// <ul>
    /// <li> <p>Infinite repeaters: *, +, or {x,} with no upper bound.</p> </li>
    /// <li> <p>Wild card (.)</p> </li>
    /// </ul>
    pub pattern: ::std::string::String,
}
impl SlotTypeRegexConfiguration {
    /// <p>A regular expression used to validate the value of a slot. </p>
    /// <p>Use a standard regular expression. Amazon Lex supports the following characters in the regular expression:</p>
    /// <ul>
    /// <li> <p>A-Z, a-z</p> </li>
    /// <li> <p>0-9</p> </li>
    /// <li> <p>Unicode characters ("\ u<unicode>
    /// ")
    /// </unicode></p> </li>
    /// </ul>
    /// <p>Represent Unicode characters with four digits, for example "\u0041" or "\u005A".</p>
    /// <p>The following regular expression operators are not supported:</p>
    /// <ul>
    /// <li> <p>Infinite repeaters: *, +, or {x,} with no upper bound.</p> </li>
    /// <li> <p>Wild card (.)</p> </li>
    /// </ul>
    pub fn pattern(&self) -> &str {
        use std::ops::Deref;
        self.pattern.deref()
    }
}
impl SlotTypeRegexConfiguration {
    /// Creates a new builder-style object to manufacture [`SlotTypeRegexConfiguration`](crate::types::SlotTypeRegexConfiguration).
    pub fn builder() -> crate::types::builders::SlotTypeRegexConfigurationBuilder {
        crate::types::builders::SlotTypeRegexConfigurationBuilder::default()
    }
}

/// A builder for [`SlotTypeRegexConfiguration`](crate::types::SlotTypeRegexConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SlotTypeRegexConfigurationBuilder {
    pub(crate) pattern: ::std::option::Option<::std::string::String>,
}
impl SlotTypeRegexConfigurationBuilder {
    /// <p>A regular expression used to validate the value of a slot. </p>
    /// <p>Use a standard regular expression. Amazon Lex supports the following characters in the regular expression:</p>
    /// <ul>
    /// <li> <p>A-Z, a-z</p> </li>
    /// <li> <p>0-9</p> </li>
    /// <li> <p>Unicode characters ("\ u<unicode>
    /// ")
    /// </unicode></p> </li>
    /// </ul>
    /// <p>Represent Unicode characters with four digits, for example "\u0041" or "\u005A".</p>
    /// <p>The following regular expression operators are not supported:</p>
    /// <ul>
    /// <li> <p>Infinite repeaters: *, +, or {x,} with no upper bound.</p> </li>
    /// <li> <p>Wild card (.)</p> </li>
    /// </ul>
    /// This field is required.
    pub fn pattern(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pattern = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A regular expression used to validate the value of a slot. </p>
    /// <p>Use a standard regular expression. Amazon Lex supports the following characters in the regular expression:</p>
    /// <ul>
    /// <li> <p>A-Z, a-z</p> </li>
    /// <li> <p>0-9</p> </li>
    /// <li> <p>Unicode characters ("\ u<unicode>
    /// ")
    /// </unicode></p> </li>
    /// </ul>
    /// <p>Represent Unicode characters with four digits, for example "\u0041" or "\u005A".</p>
    /// <p>The following regular expression operators are not supported:</p>
    /// <ul>
    /// <li> <p>Infinite repeaters: *, +, or {x,} with no upper bound.</p> </li>
    /// <li> <p>Wild card (.)</p> </li>
    /// </ul>
    pub fn set_pattern(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pattern = input;
        self
    }
    /// <p>A regular expression used to validate the value of a slot. </p>
    /// <p>Use a standard regular expression. Amazon Lex supports the following characters in the regular expression:</p>
    /// <ul>
    /// <li> <p>A-Z, a-z</p> </li>
    /// <li> <p>0-9</p> </li>
    /// <li> <p>Unicode characters ("\ u<unicode>
    /// ")
    /// </unicode></p> </li>
    /// </ul>
    /// <p>Represent Unicode characters with four digits, for example "\u0041" or "\u005A".</p>
    /// <p>The following regular expression operators are not supported:</p>
    /// <ul>
    /// <li> <p>Infinite repeaters: *, +, or {x,} with no upper bound.</p> </li>
    /// <li> <p>Wild card (.)</p> </li>
    /// </ul>
    pub fn get_pattern(&self) -> &::std::option::Option<::std::string::String> {
        &self.pattern
    }
    /// Consumes the builder and constructs a [`SlotTypeRegexConfiguration`](crate::types::SlotTypeRegexConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`pattern`](crate::types::builders::SlotTypeRegexConfigurationBuilder::pattern)
    pub fn build(self) -> ::std::result::Result<crate::types::SlotTypeRegexConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SlotTypeRegexConfiguration {
            pattern: self.pattern.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pattern",
                    "pattern was not specified but it is required when building SlotTypeRegexConfiguration",
                )
            })?,
        })
    }
}
