// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides information about migrating a bot from Amazon Lex V1 to Amazon Lex V2.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MigrationSummary {
    /// <p>The unique identifier that Amazon Lex assigned to the migration.</p>
    #[doc(hidden)]
    pub migration_id: std::option::Option<std::string::String>,
    /// <p>The name of the Amazon Lex V1 bot that is the source of the migration.</p>
    #[doc(hidden)]
    pub v1_bot_name: std::option::Option<std::string::String>,
    /// <p>The version of the Amazon Lex V1 bot that is the source of the migration.</p>
    #[doc(hidden)]
    pub v1_bot_version: std::option::Option<std::string::String>,
    /// <p>The locale of the Amazon Lex V1 bot that is the source of the migration.</p>
    #[doc(hidden)]
    pub v1_bot_locale: std::option::Option<crate::types::Locale>,
    /// <p>The unique identifier of the Amazon Lex V2 that is the destination of the migration.</p>
    #[doc(hidden)]
    pub v2_bot_id: std::option::Option<std::string::String>,
    /// <p>The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.</p>
    #[doc(hidden)]
    pub v2_bot_role: std::option::Option<std::string::String>,
    /// <p>The status of the operation. When the status is <code>COMPLETE</code> the bot is available in Amazon Lex V2. There may be alerts and warnings that need to be resolved to complete the migration.</p>
    #[doc(hidden)]
    pub migration_status: std::option::Option<crate::types::MigrationStatus>,
    /// <p>The strategy used to conduct the migration.</p>
    #[doc(hidden)]
    pub migration_strategy: std::option::Option<crate::types::MigrationStrategy>,
    /// <p>The date and time that the migration started.</p>
    #[doc(hidden)]
    pub migration_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl MigrationSummary {
    /// <p>The unique identifier that Amazon Lex assigned to the migration.</p>
    pub fn migration_id(&self) -> std::option::Option<&str> {
        self.migration_id.as_deref()
    }
    /// <p>The name of the Amazon Lex V1 bot that is the source of the migration.</p>
    pub fn v1_bot_name(&self) -> std::option::Option<&str> {
        self.v1_bot_name.as_deref()
    }
    /// <p>The version of the Amazon Lex V1 bot that is the source of the migration.</p>
    pub fn v1_bot_version(&self) -> std::option::Option<&str> {
        self.v1_bot_version.as_deref()
    }
    /// <p>The locale of the Amazon Lex V1 bot that is the source of the migration.</p>
    pub fn v1_bot_locale(&self) -> std::option::Option<&crate::types::Locale> {
        self.v1_bot_locale.as_ref()
    }
    /// <p>The unique identifier of the Amazon Lex V2 that is the destination of the migration.</p>
    pub fn v2_bot_id(&self) -> std::option::Option<&str> {
        self.v2_bot_id.as_deref()
    }
    /// <p>The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.</p>
    pub fn v2_bot_role(&self) -> std::option::Option<&str> {
        self.v2_bot_role.as_deref()
    }
    /// <p>The status of the operation. When the status is <code>COMPLETE</code> the bot is available in Amazon Lex V2. There may be alerts and warnings that need to be resolved to complete the migration.</p>
    pub fn migration_status(&self) -> std::option::Option<&crate::types::MigrationStatus> {
        self.migration_status.as_ref()
    }
    /// <p>The strategy used to conduct the migration.</p>
    pub fn migration_strategy(&self) -> std::option::Option<&crate::types::MigrationStrategy> {
        self.migration_strategy.as_ref()
    }
    /// <p>The date and time that the migration started.</p>
    pub fn migration_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.migration_timestamp.as_ref()
    }
}
impl MigrationSummary {
    /// Creates a new builder-style object to manufacture [`MigrationSummary`](crate::types::MigrationSummary).
    pub fn builder() -> crate::types::builders::MigrationSummaryBuilder {
        crate::types::builders::MigrationSummaryBuilder::default()
    }
}

/// A builder for [`MigrationSummary`](crate::types::MigrationSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MigrationSummaryBuilder {
    pub(crate) migration_id: std::option::Option<std::string::String>,
    pub(crate) v1_bot_name: std::option::Option<std::string::String>,
    pub(crate) v1_bot_version: std::option::Option<std::string::String>,
    pub(crate) v1_bot_locale: std::option::Option<crate::types::Locale>,
    pub(crate) v2_bot_id: std::option::Option<std::string::String>,
    pub(crate) v2_bot_role: std::option::Option<std::string::String>,
    pub(crate) migration_status: std::option::Option<crate::types::MigrationStatus>,
    pub(crate) migration_strategy: std::option::Option<crate::types::MigrationStrategy>,
    pub(crate) migration_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl MigrationSummaryBuilder {
    /// <p>The unique identifier that Amazon Lex assigned to the migration.</p>
    pub fn migration_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.migration_id = Some(input.into());
        self
    }
    /// <p>The unique identifier that Amazon Lex assigned to the migration.</p>
    pub fn set_migration_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.migration_id = input;
        self
    }
    /// <p>The name of the Amazon Lex V1 bot that is the source of the migration.</p>
    pub fn v1_bot_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.v1_bot_name = Some(input.into());
        self
    }
    /// <p>The name of the Amazon Lex V1 bot that is the source of the migration.</p>
    pub fn set_v1_bot_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.v1_bot_name = input;
        self
    }
    /// <p>The version of the Amazon Lex V1 bot that is the source of the migration.</p>
    pub fn v1_bot_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.v1_bot_version = Some(input.into());
        self
    }
    /// <p>The version of the Amazon Lex V1 bot that is the source of the migration.</p>
    pub fn set_v1_bot_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.v1_bot_version = input;
        self
    }
    /// <p>The locale of the Amazon Lex V1 bot that is the source of the migration.</p>
    pub fn v1_bot_locale(mut self, input: crate::types::Locale) -> Self {
        self.v1_bot_locale = Some(input);
        self
    }
    /// <p>The locale of the Amazon Lex V1 bot that is the source of the migration.</p>
    pub fn set_v1_bot_locale(mut self, input: std::option::Option<crate::types::Locale>) -> Self {
        self.v1_bot_locale = input;
        self
    }
    /// <p>The unique identifier of the Amazon Lex V2 that is the destination of the migration.</p>
    pub fn v2_bot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.v2_bot_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the Amazon Lex V2 that is the destination of the migration.</p>
    pub fn set_v2_bot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.v2_bot_id = input;
        self
    }
    /// <p>The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.</p>
    pub fn v2_bot_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.v2_bot_role = Some(input.into());
        self
    }
    /// <p>The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.</p>
    pub fn set_v2_bot_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.v2_bot_role = input;
        self
    }
    /// <p>The status of the operation. When the status is <code>COMPLETE</code> the bot is available in Amazon Lex V2. There may be alerts and warnings that need to be resolved to complete the migration.</p>
    pub fn migration_status(mut self, input: crate::types::MigrationStatus) -> Self {
        self.migration_status = Some(input);
        self
    }
    /// <p>The status of the operation. When the status is <code>COMPLETE</code> the bot is available in Amazon Lex V2. There may be alerts and warnings that need to be resolved to complete the migration.</p>
    pub fn set_migration_status(
        mut self,
        input: std::option::Option<crate::types::MigrationStatus>,
    ) -> Self {
        self.migration_status = input;
        self
    }
    /// <p>The strategy used to conduct the migration.</p>
    pub fn migration_strategy(mut self, input: crate::types::MigrationStrategy) -> Self {
        self.migration_strategy = Some(input);
        self
    }
    /// <p>The strategy used to conduct the migration.</p>
    pub fn set_migration_strategy(
        mut self,
        input: std::option::Option<crate::types::MigrationStrategy>,
    ) -> Self {
        self.migration_strategy = input;
        self
    }
    /// <p>The date and time that the migration started.</p>
    pub fn migration_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.migration_timestamp = Some(input);
        self
    }
    /// <p>The date and time that the migration started.</p>
    pub fn set_migration_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.migration_timestamp = input;
        self
    }
    /// Consumes the builder and constructs a [`MigrationSummary`](crate::types::MigrationSummary).
    pub fn build(self) -> crate::types::MigrationSummary {
        crate::types::MigrationSummary {
            migration_id: self.migration_id,
            v1_bot_name: self.v1_bot_name,
            v1_bot_version: self.v1_bot_version,
            v1_bot_locale: self.v1_bot_locale,
            v2_bot_id: self.v2_bot_id,
            v2_bot_role: self.v2_bot_role,
            migration_status: self.migration_status,
            migration_strategy: self.migration_strategy,
            migration_timestamp: self.migration_timestamp,
        }
    }
}
