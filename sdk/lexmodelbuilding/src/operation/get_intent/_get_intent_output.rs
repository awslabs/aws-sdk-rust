// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetIntentOutput {
    /// <p>The name of the intent.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description of the intent.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>An array of intent slots configured for the intent.</p>
    #[doc(hidden)]
    pub slots: std::option::Option<std::vec::Vec<crate::types::Slot>>,
    /// <p>An array of sample utterances configured for the intent.</p>
    #[doc(hidden)]
    pub sample_utterances: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>If defined in the bot, Amazon Lex uses prompt to confirm the intent before fulfilling the user's request. For more information, see <code>PutIntent</code>. </p>
    #[doc(hidden)]
    pub confirmation_prompt: std::option::Option<crate::types::Prompt>,
    /// <p>If the user answers "no" to the question defined in <code>confirmationPrompt</code>, Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p>
    #[doc(hidden)]
    pub rejection_statement: std::option::Option<crate::types::Statement>,
    /// <p>If defined in the bot, Amazon Lex uses this prompt to solicit additional user activity after the intent is fulfilled. For more information, see <code>PutIntent</code>.</p>
    #[doc(hidden)]
    pub follow_up_prompt: std::option::Option<crate::types::FollowUpPrompt>,
    /// <p>After the Lambda function specified in the <code>fulfillmentActivity</code> element fulfills the intent, Amazon Lex conveys this statement to the user.</p>
    #[doc(hidden)]
    pub conclusion_statement: std::option::Option<crate::types::Statement>,
    /// <p>If defined in the bot, Amazon Amazon Lex invokes this Lambda function for each user input. For more information, see <code>PutIntent</code>. </p>
    #[doc(hidden)]
    pub dialog_code_hook: std::option::Option<crate::types::CodeHook>,
    /// <p>Describes how the intent is fulfilled. For more information, see <code>PutIntent</code>. </p>
    #[doc(hidden)]
    pub fulfillment_activity: std::option::Option<crate::types::FulfillmentActivity>,
    /// <p>A unique identifier for a built-in intent.</p>
    #[doc(hidden)]
    pub parent_intent_signature: std::option::Option<std::string::String>,
    /// <p>The date that the intent was updated. When you create a resource, the creation date and the last updated date are the same. </p>
    #[doc(hidden)]
    pub last_updated_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date that the intent was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The version of the intent.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
    /// <p>Checksum of the intent.</p>
    #[doc(hidden)]
    pub checksum: std::option::Option<std::string::String>,
    /// <p>Configuration information, if any, to connect to an Amazon Kendra index with the <code>AMAZON.KendraSearchIntent</code> intent.</p>
    #[doc(hidden)]
    pub kendra_configuration: std::option::Option<crate::types::KendraConfiguration>,
    /// <p>An array of <code>InputContext</code> objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.</p>
    #[doc(hidden)]
    pub input_contexts: std::option::Option<std::vec::Vec<crate::types::InputContext>>,
    /// <p>An array of <code>OutputContext</code> objects that lists the contexts that the intent activates when the intent is fulfilled.</p>
    #[doc(hidden)]
    pub output_contexts: std::option::Option<std::vec::Vec<crate::types::OutputContext>>,
    _request_id: Option<String>,
}
impl GetIntentOutput {
    /// <p>The name of the intent.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the intent.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>An array of intent slots configured for the intent.</p>
    pub fn slots(&self) -> std::option::Option<&[crate::types::Slot]> {
        self.slots.as_deref()
    }
    /// <p>An array of sample utterances configured for the intent.</p>
    pub fn sample_utterances(&self) -> std::option::Option<&[std::string::String]> {
        self.sample_utterances.as_deref()
    }
    /// <p>If defined in the bot, Amazon Lex uses prompt to confirm the intent before fulfilling the user's request. For more information, see <code>PutIntent</code>. </p>
    pub fn confirmation_prompt(&self) -> std::option::Option<&crate::types::Prompt> {
        self.confirmation_prompt.as_ref()
    }
    /// <p>If the user answers "no" to the question defined in <code>confirmationPrompt</code>, Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p>
    pub fn rejection_statement(&self) -> std::option::Option<&crate::types::Statement> {
        self.rejection_statement.as_ref()
    }
    /// <p>If defined in the bot, Amazon Lex uses this prompt to solicit additional user activity after the intent is fulfilled. For more information, see <code>PutIntent</code>.</p>
    pub fn follow_up_prompt(&self) -> std::option::Option<&crate::types::FollowUpPrompt> {
        self.follow_up_prompt.as_ref()
    }
    /// <p>After the Lambda function specified in the <code>fulfillmentActivity</code> element fulfills the intent, Amazon Lex conveys this statement to the user.</p>
    pub fn conclusion_statement(&self) -> std::option::Option<&crate::types::Statement> {
        self.conclusion_statement.as_ref()
    }
    /// <p>If defined in the bot, Amazon Amazon Lex invokes this Lambda function for each user input. For more information, see <code>PutIntent</code>. </p>
    pub fn dialog_code_hook(&self) -> std::option::Option<&crate::types::CodeHook> {
        self.dialog_code_hook.as_ref()
    }
    /// <p>Describes how the intent is fulfilled. For more information, see <code>PutIntent</code>. </p>
    pub fn fulfillment_activity(&self) -> std::option::Option<&crate::types::FulfillmentActivity> {
        self.fulfillment_activity.as_ref()
    }
    /// <p>A unique identifier for a built-in intent.</p>
    pub fn parent_intent_signature(&self) -> std::option::Option<&str> {
        self.parent_intent_signature.as_deref()
    }
    /// <p>The date that the intent was updated. When you create a resource, the creation date and the last updated date are the same. </p>
    pub fn last_updated_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_date.as_ref()
    }
    /// <p>The date that the intent was created.</p>
    pub fn created_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p>The version of the intent.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>Checksum of the intent.</p>
    pub fn checksum(&self) -> std::option::Option<&str> {
        self.checksum.as_deref()
    }
    /// <p>Configuration information, if any, to connect to an Amazon Kendra index with the <code>AMAZON.KendraSearchIntent</code> intent.</p>
    pub fn kendra_configuration(&self) -> std::option::Option<&crate::types::KendraConfiguration> {
        self.kendra_configuration.as_ref()
    }
    /// <p>An array of <code>InputContext</code> objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.</p>
    pub fn input_contexts(&self) -> std::option::Option<&[crate::types::InputContext]> {
        self.input_contexts.as_deref()
    }
    /// <p>An array of <code>OutputContext</code> objects that lists the contexts that the intent activates when the intent is fulfilled.</p>
    pub fn output_contexts(&self) -> std::option::Option<&[crate::types::OutputContext]> {
        self.output_contexts.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetIntentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetIntentOutput {
    /// Creates a new builder-style object to manufacture [`GetIntentOutput`](crate::operation::get_intent::GetIntentOutput).
    pub fn builder() -> crate::operation::get_intent::builders::GetIntentOutputBuilder {
        crate::operation::get_intent::builders::GetIntentOutputBuilder::default()
    }
}

/// A builder for [`GetIntentOutput`](crate::operation::get_intent::GetIntentOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetIntentOutputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) slots: std::option::Option<std::vec::Vec<crate::types::Slot>>,
    pub(crate) sample_utterances: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) confirmation_prompt: std::option::Option<crate::types::Prompt>,
    pub(crate) rejection_statement: std::option::Option<crate::types::Statement>,
    pub(crate) follow_up_prompt: std::option::Option<crate::types::FollowUpPrompt>,
    pub(crate) conclusion_statement: std::option::Option<crate::types::Statement>,
    pub(crate) dialog_code_hook: std::option::Option<crate::types::CodeHook>,
    pub(crate) fulfillment_activity: std::option::Option<crate::types::FulfillmentActivity>,
    pub(crate) parent_intent_signature: std::option::Option<std::string::String>,
    pub(crate) last_updated_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) created_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) version: std::option::Option<std::string::String>,
    pub(crate) checksum: std::option::Option<std::string::String>,
    pub(crate) kendra_configuration: std::option::Option<crate::types::KendraConfiguration>,
    pub(crate) input_contexts: std::option::Option<std::vec::Vec<crate::types::InputContext>>,
    pub(crate) output_contexts: std::option::Option<std::vec::Vec<crate::types::OutputContext>>,
    _request_id: Option<String>,
}
impl GetIntentOutputBuilder {
    /// <p>The name of the intent.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the intent.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description of the intent.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the intent.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `slots`.
    ///
    /// To override the contents of this collection use [`set_slots`](Self::set_slots).
    ///
    /// <p>An array of intent slots configured for the intent.</p>
    pub fn slots(mut self, input: crate::types::Slot) -> Self {
        let mut v = self.slots.unwrap_or_default();
        v.push(input);
        self.slots = Some(v);
        self
    }
    /// <p>An array of intent slots configured for the intent.</p>
    pub fn set_slots(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Slot>>,
    ) -> Self {
        self.slots = input;
        self
    }
    /// Appends an item to `sample_utterances`.
    ///
    /// To override the contents of this collection use [`set_sample_utterances`](Self::set_sample_utterances).
    ///
    /// <p>An array of sample utterances configured for the intent.</p>
    pub fn sample_utterances(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.sample_utterances.unwrap_or_default();
        v.push(input.into());
        self.sample_utterances = Some(v);
        self
    }
    /// <p>An array of sample utterances configured for the intent.</p>
    pub fn set_sample_utterances(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.sample_utterances = input;
        self
    }
    /// <p>If defined in the bot, Amazon Lex uses prompt to confirm the intent before fulfilling the user's request. For more information, see <code>PutIntent</code>. </p>
    pub fn confirmation_prompt(mut self, input: crate::types::Prompt) -> Self {
        self.confirmation_prompt = Some(input);
        self
    }
    /// <p>If defined in the bot, Amazon Lex uses prompt to confirm the intent before fulfilling the user's request. For more information, see <code>PutIntent</code>. </p>
    pub fn set_confirmation_prompt(
        mut self,
        input: std::option::Option<crate::types::Prompt>,
    ) -> Self {
        self.confirmation_prompt = input;
        self
    }
    /// <p>If the user answers "no" to the question defined in <code>confirmationPrompt</code>, Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p>
    pub fn rejection_statement(mut self, input: crate::types::Statement) -> Self {
        self.rejection_statement = Some(input);
        self
    }
    /// <p>If the user answers "no" to the question defined in <code>confirmationPrompt</code>, Amazon Lex responds with this statement to acknowledge that the intent was canceled. </p>
    pub fn set_rejection_statement(
        mut self,
        input: std::option::Option<crate::types::Statement>,
    ) -> Self {
        self.rejection_statement = input;
        self
    }
    /// <p>If defined in the bot, Amazon Lex uses this prompt to solicit additional user activity after the intent is fulfilled. For more information, see <code>PutIntent</code>.</p>
    pub fn follow_up_prompt(mut self, input: crate::types::FollowUpPrompt) -> Self {
        self.follow_up_prompt = Some(input);
        self
    }
    /// <p>If defined in the bot, Amazon Lex uses this prompt to solicit additional user activity after the intent is fulfilled. For more information, see <code>PutIntent</code>.</p>
    pub fn set_follow_up_prompt(
        mut self,
        input: std::option::Option<crate::types::FollowUpPrompt>,
    ) -> Self {
        self.follow_up_prompt = input;
        self
    }
    /// <p>After the Lambda function specified in the <code>fulfillmentActivity</code> element fulfills the intent, Amazon Lex conveys this statement to the user.</p>
    pub fn conclusion_statement(mut self, input: crate::types::Statement) -> Self {
        self.conclusion_statement = Some(input);
        self
    }
    /// <p>After the Lambda function specified in the <code>fulfillmentActivity</code> element fulfills the intent, Amazon Lex conveys this statement to the user.</p>
    pub fn set_conclusion_statement(
        mut self,
        input: std::option::Option<crate::types::Statement>,
    ) -> Self {
        self.conclusion_statement = input;
        self
    }
    /// <p>If defined in the bot, Amazon Amazon Lex invokes this Lambda function for each user input. For more information, see <code>PutIntent</code>. </p>
    pub fn dialog_code_hook(mut self, input: crate::types::CodeHook) -> Self {
        self.dialog_code_hook = Some(input);
        self
    }
    /// <p>If defined in the bot, Amazon Amazon Lex invokes this Lambda function for each user input. For more information, see <code>PutIntent</code>. </p>
    pub fn set_dialog_code_hook(
        mut self,
        input: std::option::Option<crate::types::CodeHook>,
    ) -> Self {
        self.dialog_code_hook = input;
        self
    }
    /// <p>Describes how the intent is fulfilled. For more information, see <code>PutIntent</code>. </p>
    pub fn fulfillment_activity(mut self, input: crate::types::FulfillmentActivity) -> Self {
        self.fulfillment_activity = Some(input);
        self
    }
    /// <p>Describes how the intent is fulfilled. For more information, see <code>PutIntent</code>. </p>
    pub fn set_fulfillment_activity(
        mut self,
        input: std::option::Option<crate::types::FulfillmentActivity>,
    ) -> Self {
        self.fulfillment_activity = input;
        self
    }
    /// <p>A unique identifier for a built-in intent.</p>
    pub fn parent_intent_signature(mut self, input: impl Into<std::string::String>) -> Self {
        self.parent_intent_signature = Some(input.into());
        self
    }
    /// <p>A unique identifier for a built-in intent.</p>
    pub fn set_parent_intent_signature(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.parent_intent_signature = input;
        self
    }
    /// <p>The date that the intent was updated. When you create a resource, the creation date and the last updated date are the same. </p>
    pub fn last_updated_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_date = Some(input);
        self
    }
    /// <p>The date that the intent was updated. When you create a resource, the creation date and the last updated date are the same. </p>
    pub fn set_last_updated_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_date = input;
        self
    }
    /// <p>The date that the intent was created.</p>
    pub fn created_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_date = Some(input);
        self
    }
    /// <p>The date that the intent was created.</p>
    pub fn set_created_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The version of the intent.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The version of the intent.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>Checksum of the intent.</p>
    pub fn checksum(mut self, input: impl Into<std::string::String>) -> Self {
        self.checksum = Some(input.into());
        self
    }
    /// <p>Checksum of the intent.</p>
    pub fn set_checksum(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.checksum = input;
        self
    }
    /// <p>Configuration information, if any, to connect to an Amazon Kendra index with the <code>AMAZON.KendraSearchIntent</code> intent.</p>
    pub fn kendra_configuration(mut self, input: crate::types::KendraConfiguration) -> Self {
        self.kendra_configuration = Some(input);
        self
    }
    /// <p>Configuration information, if any, to connect to an Amazon Kendra index with the <code>AMAZON.KendraSearchIntent</code> intent.</p>
    pub fn set_kendra_configuration(
        mut self,
        input: std::option::Option<crate::types::KendraConfiguration>,
    ) -> Self {
        self.kendra_configuration = input;
        self
    }
    /// Appends an item to `input_contexts`.
    ///
    /// To override the contents of this collection use [`set_input_contexts`](Self::set_input_contexts).
    ///
    /// <p>An array of <code>InputContext</code> objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.</p>
    pub fn input_contexts(mut self, input: crate::types::InputContext) -> Self {
        let mut v = self.input_contexts.unwrap_or_default();
        v.push(input);
        self.input_contexts = Some(v);
        self
    }
    /// <p>An array of <code>InputContext</code> objects that lists the contexts that must be active for Amazon Lex to choose the intent in a conversation with the user.</p>
    pub fn set_input_contexts(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::InputContext>>,
    ) -> Self {
        self.input_contexts = input;
        self
    }
    /// Appends an item to `output_contexts`.
    ///
    /// To override the contents of this collection use [`set_output_contexts`](Self::set_output_contexts).
    ///
    /// <p>An array of <code>OutputContext</code> objects that lists the contexts that the intent activates when the intent is fulfilled.</p>
    pub fn output_contexts(mut self, input: crate::types::OutputContext) -> Self {
        let mut v = self.output_contexts.unwrap_or_default();
        v.push(input);
        self.output_contexts = Some(v);
        self
    }
    /// <p>An array of <code>OutputContext</code> objects that lists the contexts that the intent activates when the intent is fulfilled.</p>
    pub fn set_output_contexts(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::OutputContext>>,
    ) -> Self {
        self.output_contexts = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetIntentOutput`](crate::operation::get_intent::GetIntentOutput).
    pub fn build(self) -> crate::operation::get_intent::GetIntentOutput {
        crate::operation::get_intent::GetIntentOutput {
            name: self.name,
            description: self.description,
            slots: self.slots,
            sample_utterances: self.sample_utterances,
            confirmation_prompt: self.confirmation_prompt,
            rejection_statement: self.rejection_statement,
            follow_up_prompt: self.follow_up_prompt,
            conclusion_statement: self.conclusion_statement,
            dialog_code_hook: self.dialog_code_hook,
            fulfillment_activity: self.fulfillment_activity,
            parent_intent_signature: self.parent_intent_signature,
            last_updated_date: self.last_updated_date,
            created_date: self.created_date,
            version: self.version,
            checksum: self.checksum,
            kendra_configuration: self.kendra_configuration,
            input_contexts: self.input_contexts,
            output_contexts: self.output_contexts,
            _request_id: self._request_id,
        }
    }
}
