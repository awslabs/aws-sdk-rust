// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteBotChannelAssociationInput {
    /// <p>The name of the association. The name is case sensitive. </p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Amazon Lex bot.</p>
    pub bot_name: ::std::option::Option<::std::string::String>,
    /// <p>An alias that points to the specific version of the Amazon Lex bot to which this association is being made.</p>
    pub bot_alias: ::std::option::Option<::std::string::String>,
}
impl DeleteBotChannelAssociationInput {
    /// <p>The name of the association. The name is case sensitive. </p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The name of the Amazon Lex bot.</p>
    pub fn bot_name(&self) -> ::std::option::Option<&str> {
        self.bot_name.as_deref()
    }
    /// <p>An alias that points to the specific version of the Amazon Lex bot to which this association is being made.</p>
    pub fn bot_alias(&self) -> ::std::option::Option<&str> {
        self.bot_alias.as_deref()
    }
}
impl DeleteBotChannelAssociationInput {
    /// Creates a new builder-style object to manufacture [`DeleteBotChannelAssociationInput`](crate::operation::delete_bot_channel_association::DeleteBotChannelAssociationInput).
    pub fn builder() -> crate::operation::delete_bot_channel_association::builders::DeleteBotChannelAssociationInputBuilder {
        crate::operation::delete_bot_channel_association::builders::DeleteBotChannelAssociationInputBuilder::default()
    }
}

/// A builder for [`DeleteBotChannelAssociationInput`](crate::operation::delete_bot_channel_association::DeleteBotChannelAssociationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteBotChannelAssociationInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) bot_name: ::std::option::Option<::std::string::String>,
    pub(crate) bot_alias: ::std::option::Option<::std::string::String>,
}
impl DeleteBotChannelAssociationInputBuilder {
    /// <p>The name of the association. The name is case sensitive. </p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the association. The name is case sensitive. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the association. The name is case sensitive. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The name of the Amazon Lex bot.</p>
    /// This field is required.
    pub fn bot_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon Lex bot.</p>
    pub fn set_bot_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_name = input;
        self
    }
    /// <p>The name of the Amazon Lex bot.</p>
    pub fn get_bot_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_name
    }
    /// <p>An alias that points to the specific version of the Amazon Lex bot to which this association is being made.</p>
    /// This field is required.
    pub fn bot_alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_alias = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An alias that points to the specific version of the Amazon Lex bot to which this association is being made.</p>
    pub fn set_bot_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_alias = input;
        self
    }
    /// <p>An alias that points to the specific version of the Amazon Lex bot to which this association is being made.</p>
    pub fn get_bot_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_alias
    }
    /// Consumes the builder and constructs a [`DeleteBotChannelAssociationInput`](crate::operation::delete_bot_channel_association::DeleteBotChannelAssociationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_bot_channel_association::DeleteBotChannelAssociationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::delete_bot_channel_association::DeleteBotChannelAssociationInput {
            name: self.name,
            bot_name: self.bot_name,
            bot_alias: self.bot_alias,
        })
    }
}
