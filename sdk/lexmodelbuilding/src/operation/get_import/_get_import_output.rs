// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetImportOutput {
    /// <p>The name given to the import job.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The type of resource imported.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::ResourceType>,
    /// <p>The action taken when there was a conflict between an existing resource and a resource in the import file.</p>
    #[doc(hidden)]
    pub merge_strategy: std::option::Option<crate::types::MergeStrategy>,
    /// <p>The identifier for the specific import job.</p>
    #[doc(hidden)]
    pub import_id: std::option::Option<std::string::String>,
    /// <p>The status of the import job. If the status is <code>FAILED</code>, you can get the reason for the failure from the <code>failureReason</code> field.</p>
    #[doc(hidden)]
    pub import_status: std::option::Option<crate::types::ImportStatus>,
    /// <p>A string that describes why an import job failed to complete.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A timestamp for the date and time that the import job was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetImportOutput {
    /// <p>The name given to the import job.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The type of resource imported.</p>
    pub fn resource_type(&self) -> std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The action taken when there was a conflict between an existing resource and a resource in the import file.</p>
    pub fn merge_strategy(&self) -> std::option::Option<&crate::types::MergeStrategy> {
        self.merge_strategy.as_ref()
    }
    /// <p>The identifier for the specific import job.</p>
    pub fn import_id(&self) -> std::option::Option<&str> {
        self.import_id.as_deref()
    }
    /// <p>The status of the import job. If the status is <code>FAILED</code>, you can get the reason for the failure from the <code>failureReason</code> field.</p>
    pub fn import_status(&self) -> std::option::Option<&crate::types::ImportStatus> {
        self.import_status.as_ref()
    }
    /// <p>A string that describes why an import job failed to complete.</p>
    pub fn failure_reason(&self) -> std::option::Option<&[std::string::String]> {
        self.failure_reason.as_deref()
    }
    /// <p>A timestamp for the date and time that the import job was created.</p>
    pub fn created_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetImportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetImportOutput {
    /// Creates a new builder-style object to manufacture [`GetImportOutput`](crate::operation::get_import::GetImportOutput).
    pub fn builder() -> crate::operation::get_import::builders::GetImportOutputBuilder {
        crate::operation::get_import::builders::GetImportOutputBuilder::default()
    }
}

/// A builder for [`GetImportOutput`](crate::operation::get_import::GetImportOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetImportOutputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) resource_type: std::option::Option<crate::types::ResourceType>,
    pub(crate) merge_strategy: std::option::Option<crate::types::MergeStrategy>,
    pub(crate) import_id: std::option::Option<std::string::String>,
    pub(crate) import_status: std::option::Option<crate::types::ImportStatus>,
    pub(crate) failure_reason: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) created_date: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetImportOutputBuilder {
    /// <p>The name given to the import job.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name given to the import job.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The type of resource imported.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p>The type of resource imported.</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The action taken when there was a conflict between an existing resource and a resource in the import file.</p>
    pub fn merge_strategy(mut self, input: crate::types::MergeStrategy) -> Self {
        self.merge_strategy = Some(input);
        self
    }
    /// <p>The action taken when there was a conflict between an existing resource and a resource in the import file.</p>
    pub fn set_merge_strategy(
        mut self,
        input: std::option::Option<crate::types::MergeStrategy>,
    ) -> Self {
        self.merge_strategy = input;
        self
    }
    /// <p>The identifier for the specific import job.</p>
    pub fn import_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.import_id = Some(input.into());
        self
    }
    /// <p>The identifier for the specific import job.</p>
    pub fn set_import_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.import_id = input;
        self
    }
    /// <p>The status of the import job. If the status is <code>FAILED</code>, you can get the reason for the failure from the <code>failureReason</code> field.</p>
    pub fn import_status(mut self, input: crate::types::ImportStatus) -> Self {
        self.import_status = Some(input);
        self
    }
    /// <p>The status of the import job. If the status is <code>FAILED</code>, you can get the reason for the failure from the <code>failureReason</code> field.</p>
    pub fn set_import_status(
        mut self,
        input: std::option::Option<crate::types::ImportStatus>,
    ) -> Self {
        self.import_status = input;
        self
    }
    /// Appends an item to `failure_reason`.
    ///
    /// To override the contents of this collection use [`set_failure_reason`](Self::set_failure_reason).
    ///
    /// <p>A string that describes why an import job failed to complete.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.failure_reason.unwrap_or_default();
        v.push(input.into());
        self.failure_reason = Some(v);
        self
    }
    /// <p>A string that describes why an import job failed to complete.</p>
    pub fn set_failure_reason(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>A timestamp for the date and time that the import job was created.</p>
    pub fn created_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_date = Some(input);
        self
    }
    /// <p>A timestamp for the date and time that the import job was created.</p>
    pub fn set_created_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_date = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetImportOutput`](crate::operation::get_import::GetImportOutput).
    pub fn build(self) -> crate::operation::get_import::GetImportOutput {
        crate::operation::get_import::GetImportOutput {
            name: self.name,
            resource_type: self.resource_type,
            merge_strategy: self.merge_strategy,
            import_id: self.import_id,
            import_status: self.import_status,
            failure_reason: self.failure_reason,
            created_date: self.created_date,
            _request_id: self._request_id,
        }
    }
}
