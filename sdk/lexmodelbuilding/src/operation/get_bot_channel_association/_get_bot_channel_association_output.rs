// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetBotChannelAssociationOutput {
    /// <p>The name of the association between the bot and the channel.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description of the association between the bot and the channel.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.</p>
    #[doc(hidden)]
    pub bot_alias: std::option::Option<std::string::String>,
    /// <p>The name of the Amazon Lex bot.</p>
    #[doc(hidden)]
    pub bot_name: std::option::Option<std::string::String>,
    /// <p>The date that the association between the bot and the channel was created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The type of the messaging platform.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::ChannelType>,
    /// <p>Provides information that the messaging platform needs to communicate with the Amazon Lex bot.</p>
    #[doc(hidden)]
    pub bot_configuration:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The status of the bot channel. </p>
    /// <ul>
    /// <li> <p> <code>CREATED</code> - The channel has been created and is ready for use.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - Channel creation is in progress.</p> </li>
    /// <li> <p> <code>FAILED</code> - There was an error creating the channel. For information about the reason for the failure, see the <code>failureReason</code> field.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ChannelStatus>,
    /// <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed to create the association.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetBotChannelAssociationOutput {
    /// <p>The name of the association between the bot and the channel.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the association between the bot and the channel.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.</p>
    pub fn bot_alias(&self) -> std::option::Option<&str> {
        self.bot_alias.as_deref()
    }
    /// <p>The name of the Amazon Lex bot.</p>
    pub fn bot_name(&self) -> std::option::Option<&str> {
        self.bot_name.as_deref()
    }
    /// <p>The date that the association between the bot and the channel was created.</p>
    pub fn created_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p>The type of the messaging platform.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::ChannelType> {
        self.r#type.as_ref()
    }
    /// <p>Provides information that the messaging platform needs to communicate with the Amazon Lex bot.</p>
    pub fn bot_configuration(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.bot_configuration.as_ref()
    }
    /// <p>The status of the bot channel. </p>
    /// <ul>
    /// <li> <p> <code>CREATED</code> - The channel has been created and is ready for use.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - Channel creation is in progress.</p> </li>
    /// <li> <p> <code>FAILED</code> - There was an error creating the channel. For information about the reason for the failure, see the <code>failureReason</code> field.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::ChannelStatus> {
        self.status.as_ref()
    }
    /// <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed to create the association.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
}
impl std::fmt::Debug for GetBotChannelAssociationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetBotChannelAssociationOutput");
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("bot_alias", &self.bot_alias);
        formatter.field("bot_name", &self.bot_name);
        formatter.field("created_date", &self.created_date);
        formatter.field("r#type", &self.r#type);
        formatter.field("bot_configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("failure_reason", &self.failure_reason);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for GetBotChannelAssociationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetBotChannelAssociationOutput {
    /// Creates a new builder-style object to manufacture [`GetBotChannelAssociationOutput`](crate::operation::get_bot_channel_association::GetBotChannelAssociationOutput).
    pub fn builder() -> crate::operation::get_bot_channel_association::builders::GetBotChannelAssociationOutputBuilder{
        crate::operation::get_bot_channel_association::builders::GetBotChannelAssociationOutputBuilder::default()
    }
}

/// A builder for [`GetBotChannelAssociationOutput`](crate::operation::get_bot_channel_association::GetBotChannelAssociationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct GetBotChannelAssociationOutputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) bot_alias: std::option::Option<std::string::String>,
    pub(crate) bot_name: std::option::Option<std::string::String>,
    pub(crate) created_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) r#type: std::option::Option<crate::types::ChannelType>,
    pub(crate) bot_configuration:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) status: std::option::Option<crate::types::ChannelStatus>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetBotChannelAssociationOutputBuilder {
    /// <p>The name of the association between the bot and the channel.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the association between the bot and the channel.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description of the association between the bot and the channel.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the association between the bot and the channel.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.</p>
    pub fn bot_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_alias = Some(input.into());
        self
    }
    /// <p>An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.</p>
    pub fn set_bot_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_alias = input;
        self
    }
    /// <p>The name of the Amazon Lex bot.</p>
    pub fn bot_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_name = Some(input.into());
        self
    }
    /// <p>The name of the Amazon Lex bot.</p>
    pub fn set_bot_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_name = input;
        self
    }
    /// <p>The date that the association between the bot and the channel was created.</p>
    pub fn created_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_date = Some(input);
        self
    }
    /// <p>The date that the association between the bot and the channel was created.</p>
    pub fn set_created_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The type of the messaging platform.</p>
    pub fn r#type(mut self, input: crate::types::ChannelType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of the messaging platform.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::ChannelType>) -> Self {
        self.r#type = input;
        self
    }
    /// Adds a key-value pair to `bot_configuration`.
    ///
    /// To override the contents of this collection use [`set_bot_configuration`](Self::set_bot_configuration).
    ///
    /// <p>Provides information that the messaging platform needs to communicate with the Amazon Lex bot.</p>
    pub fn bot_configuration(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.bot_configuration.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.bot_configuration = Some(hash_map);
        self
    }
    /// <p>Provides information that the messaging platform needs to communicate with the Amazon Lex bot.</p>
    pub fn set_bot_configuration(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.bot_configuration = input;
        self
    }
    /// <p>The status of the bot channel. </p>
    /// <ul>
    /// <li> <p> <code>CREATED</code> - The channel has been created and is ready for use.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - Channel creation is in progress.</p> </li>
    /// <li> <p> <code>FAILED</code> - There was an error creating the channel. For information about the reason for the failure, see the <code>failureReason</code> field.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::ChannelStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the bot channel. </p>
    /// <ul>
    /// <li> <p> <code>CREATED</code> - The channel has been created and is ready for use.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - Channel creation is in progress.</p> </li>
    /// <li> <p> <code>FAILED</code> - There was an error creating the channel. For information about the reason for the failure, see the <code>failureReason</code> field.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ChannelStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed to create the association.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed to create the association.</p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetBotChannelAssociationOutput`](crate::operation::get_bot_channel_association::GetBotChannelAssociationOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_bot_channel_association::GetBotChannelAssociationOutput {
        crate::operation::get_bot_channel_association::GetBotChannelAssociationOutput {
            name: self.name,
            description: self.description,
            bot_alias: self.bot_alias,
            bot_name: self.bot_name,
            created_date: self.created_date,
            r#type: self.r#type,
            bot_configuration: self.bot_configuration,
            status: self.status,
            failure_reason: self.failure_reason,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for GetBotChannelAssociationOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetBotChannelAssociationOutputBuilder");
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("bot_alias", &self.bot_alias);
        formatter.field("bot_name", &self.bot_name);
        formatter.field("created_date", &self.created_date);
        formatter.field("r#type", &self.r#type);
        formatter.field("bot_configuration", &"*** Sensitive Data Redacted ***");
        formatter.field("status", &self.status);
        formatter.field("failure_reason", &self.failure_reason);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
