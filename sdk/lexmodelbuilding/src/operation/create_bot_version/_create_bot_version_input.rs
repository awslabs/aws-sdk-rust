// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateBotVersionInput {
    /// <p>The name of the bot that you want to create a new version of. The name is case sensitive. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Identifies a specific revision of the <code>$LATEST</code> version of the bot. If you specify a checksum and the <code>$LATEST</code> version of the bot has a different checksum, a <code>PreconditionFailedException</code> exception is returned and Amazon Lex doesn't publish a new version. If you don't specify a checksum, Amazon Lex publishes the <code>$LATEST</code> version.</p>
    #[doc(hidden)]
    pub checksum: std::option::Option<std::string::String>,
}
impl CreateBotVersionInput {
    /// <p>The name of the bot that you want to create a new version of. The name is case sensitive. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Identifies a specific revision of the <code>$LATEST</code> version of the bot. If you specify a checksum and the <code>$LATEST</code> version of the bot has a different checksum, a <code>PreconditionFailedException</code> exception is returned and Amazon Lex doesn't publish a new version. If you don't specify a checksum, Amazon Lex publishes the <code>$LATEST</code> version.</p>
    pub fn checksum(&self) -> std::option::Option<&str> {
        self.checksum.as_deref()
    }
}
impl CreateBotVersionInput {
    /// Creates a new builder-style object to manufacture [`CreateBotVersionInput`](crate::operation::create_bot_version::CreateBotVersionInput).
    pub fn builder() -> crate::operation::create_bot_version::builders::CreateBotVersionInputBuilder
    {
        crate::operation::create_bot_version::builders::CreateBotVersionInputBuilder::default()
    }
}

/// A builder for [`CreateBotVersionInput`](crate::operation::create_bot_version::CreateBotVersionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateBotVersionInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) checksum: std::option::Option<std::string::String>,
}
impl CreateBotVersionInputBuilder {
    /// <p>The name of the bot that you want to create a new version of. The name is case sensitive. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the bot that you want to create a new version of. The name is case sensitive. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Identifies a specific revision of the <code>$LATEST</code> version of the bot. If you specify a checksum and the <code>$LATEST</code> version of the bot has a different checksum, a <code>PreconditionFailedException</code> exception is returned and Amazon Lex doesn't publish a new version. If you don't specify a checksum, Amazon Lex publishes the <code>$LATEST</code> version.</p>
    pub fn checksum(mut self, input: impl Into<std::string::String>) -> Self {
        self.checksum = Some(input.into());
        self
    }
    /// <p>Identifies a specific revision of the <code>$LATEST</code> version of the bot. If you specify a checksum and the <code>$LATEST</code> version of the bot has a different checksum, a <code>PreconditionFailedException</code> exception is returned and Amazon Lex doesn't publish a new version. If you don't specify a checksum, Amazon Lex publishes the <code>$LATEST</code> version.</p>
    pub fn set_checksum(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.checksum = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateBotVersionInput`](crate::operation::create_bot_version::CreateBotVersionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_bot_version::CreateBotVersionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_bot_version::CreateBotVersionInput {
                name: self.name,
                checksum: self.checksum,
            },
        )
    }
}
