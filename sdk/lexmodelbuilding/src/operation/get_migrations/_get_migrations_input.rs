// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMigrationsInput {
    /// <p>The field to sort the list of migrations by. You can sort by the Amazon Lex V1 bot name or the date and time that the migration was started.</p>
    #[doc(hidden)]
    pub sort_by_attribute: std::option::Option<crate::types::MigrationSortAttribute>,
    /// <p>The order so sort the list.</p>
    #[doc(hidden)]
    pub sort_by_order: std::option::Option<crate::types::SortOrder>,
    /// <p>Filters the list to contain only bots whose name contains the specified string. The string is matched anywhere in bot name.</p>
    #[doc(hidden)]
    pub v1_bot_name_contains: std::option::Option<std::string::String>,
    /// <p>Filters the list to contain only migrations in the specified state.</p>
    #[doc(hidden)]
    pub migration_status_equals: std::option::Option<crate::types::MigrationStatus>,
    /// <p>The maximum number of migrations to return in the response. The default is 10.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>A pagination token that fetches the next page of migrations. If the response to this operation is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of migrations, specify the pagination token in the request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl GetMigrationsInput {
    /// <p>The field to sort the list of migrations by. You can sort by the Amazon Lex V1 bot name or the date and time that the migration was started.</p>
    pub fn sort_by_attribute(&self) -> std::option::Option<&crate::types::MigrationSortAttribute> {
        self.sort_by_attribute.as_ref()
    }
    /// <p>The order so sort the list.</p>
    pub fn sort_by_order(&self) -> std::option::Option<&crate::types::SortOrder> {
        self.sort_by_order.as_ref()
    }
    /// <p>Filters the list to contain only bots whose name contains the specified string. The string is matched anywhere in bot name.</p>
    pub fn v1_bot_name_contains(&self) -> std::option::Option<&str> {
        self.v1_bot_name_contains.as_deref()
    }
    /// <p>Filters the list to contain only migrations in the specified state.</p>
    pub fn migration_status_equals(&self) -> std::option::Option<&crate::types::MigrationStatus> {
        self.migration_status_equals.as_ref()
    }
    /// <p>The maximum number of migrations to return in the response. The default is 10.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>A pagination token that fetches the next page of migrations. If the response to this operation is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of migrations, specify the pagination token in the request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl GetMigrationsInput {
    /// Creates a new builder-style object to manufacture [`GetMigrationsInput`](crate::operation::get_migrations::GetMigrationsInput).
    pub fn builder() -> crate::operation::get_migrations::builders::GetMigrationsInputBuilder {
        crate::operation::get_migrations::builders::GetMigrationsInputBuilder::default()
    }
}

/// A builder for [`GetMigrationsInput`](crate::operation::get_migrations::GetMigrationsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetMigrationsInputBuilder {
    pub(crate) sort_by_attribute: std::option::Option<crate::types::MigrationSortAttribute>,
    pub(crate) sort_by_order: std::option::Option<crate::types::SortOrder>,
    pub(crate) v1_bot_name_contains: std::option::Option<std::string::String>,
    pub(crate) migration_status_equals: std::option::Option<crate::types::MigrationStatus>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl GetMigrationsInputBuilder {
    /// <p>The field to sort the list of migrations by. You can sort by the Amazon Lex V1 bot name or the date and time that the migration was started.</p>
    pub fn sort_by_attribute(mut self, input: crate::types::MigrationSortAttribute) -> Self {
        self.sort_by_attribute = Some(input);
        self
    }
    /// <p>The field to sort the list of migrations by. You can sort by the Amazon Lex V1 bot name or the date and time that the migration was started.</p>
    pub fn set_sort_by_attribute(
        mut self,
        input: std::option::Option<crate::types::MigrationSortAttribute>,
    ) -> Self {
        self.sort_by_attribute = input;
        self
    }
    /// <p>The order so sort the list.</p>
    pub fn sort_by_order(mut self, input: crate::types::SortOrder) -> Self {
        self.sort_by_order = Some(input);
        self
    }
    /// <p>The order so sort the list.</p>
    pub fn set_sort_by_order(
        mut self,
        input: std::option::Option<crate::types::SortOrder>,
    ) -> Self {
        self.sort_by_order = input;
        self
    }
    /// <p>Filters the list to contain only bots whose name contains the specified string. The string is matched anywhere in bot name.</p>
    pub fn v1_bot_name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.v1_bot_name_contains = Some(input.into());
        self
    }
    /// <p>Filters the list to contain only bots whose name contains the specified string. The string is matched anywhere in bot name.</p>
    pub fn set_v1_bot_name_contains(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.v1_bot_name_contains = input;
        self
    }
    /// <p>Filters the list to contain only migrations in the specified state.</p>
    pub fn migration_status_equals(mut self, input: crate::types::MigrationStatus) -> Self {
        self.migration_status_equals = Some(input);
        self
    }
    /// <p>Filters the list to contain only migrations in the specified state.</p>
    pub fn set_migration_status_equals(
        mut self,
        input: std::option::Option<crate::types::MigrationStatus>,
    ) -> Self {
        self.migration_status_equals = input;
        self
    }
    /// <p>The maximum number of migrations to return in the response. The default is 10.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of migrations to return in the response. The default is 10.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>A pagination token that fetches the next page of migrations. If the response to this operation is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of migrations, specify the pagination token in the request.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>A pagination token that fetches the next page of migrations. If the response to this operation is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of migrations, specify the pagination token in the request.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`GetMigrationsInput`](crate::operation::get_migrations::GetMigrationsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_migrations::GetMigrationsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_migrations::GetMigrationsInput {
            sort_by_attribute: self.sort_by_attribute,
            sort_by_order: self.sort_by_order,
            v1_bot_name_contains: self.v1_bot_name_contains,
            migration_status_equals: self.migration_status_equals,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
