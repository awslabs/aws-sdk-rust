// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_migration::_get_migration_output::GetMigrationOutputBuilder;

pub use crate::operation::get_migration::_get_migration_input::GetMigrationInputBuilder;

/// Fluent builder constructing a request to `GetMigration`.
///
/// <p>Provides details about an ongoing or complete migration from an Amazon Lex V1 bot to an Amazon Lex V2 bot. Use this operation to view the migration alerts and warnings related to the migration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetMigrationFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_migration::builders::GetMigrationInputBuilder,
}
impl GetMigrationFluentBuilder {
    /// Creates a new `GetMigration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_migration::GetMigration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::get_migration::GetMigrationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_migration::GetMigrationOutput,
        aws_smithy_http::result::SdkError<crate::operation::get_migration::GetMigrationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The unique identifier of the migration to view. The <code>migrationID</code> is returned by the operation.</p>
    pub fn migration_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.migration_id(input.into());
        self
    }
    /// <p>The unique identifier of the migration to view. The <code>migrationID</code> is returned by the operation.</p>
    pub fn set_migration_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_migration_id(input);
        self
    }
}
