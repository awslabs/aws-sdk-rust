// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetExportOutput {
    /// <p>The name of the bot being exported.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The version of the bot being exported.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
    /// <p>The type of the exported resource.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::ResourceType>,
    /// <p>The format of the exported data.</p>
    #[doc(hidden)]
    pub export_type: std::option::Option<crate::types::ExportType>,
    /// <p>The status of the export. </p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> - The export is in progress.</p> </li>
    /// <li> <p> <code>READY</code> - The export is complete.</p> </li>
    /// <li> <p> <code>FAILED</code> - The export could not be completed.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub export_status: std::option::Option<crate::types::ExportStatus>,
    /// <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed to export the resource.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    /// <p>An S3 pre-signed URL that provides the location of the exported resource. The exported resource is a ZIP archive that contains the exported resource in JSON format. The structure of the archive may change. Your code should not rely on the archive structure.</p>
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetExportOutput {
    /// <p>The name of the bot being exported.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The version of the bot being exported.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The type of the exported resource.</p>
    pub fn resource_type(&self) -> std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The format of the exported data.</p>
    pub fn export_type(&self) -> std::option::Option<&crate::types::ExportType> {
        self.export_type.as_ref()
    }
    /// <p>The status of the export. </p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> - The export is in progress.</p> </li>
    /// <li> <p> <code>READY</code> - The export is complete.</p> </li>
    /// <li> <p> <code>FAILED</code> - The export could not be completed.</p> </li>
    /// </ul>
    pub fn export_status(&self) -> std::option::Option<&crate::types::ExportStatus> {
        self.export_status.as_ref()
    }
    /// <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed to export the resource.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>An S3 pre-signed URL that provides the location of the exported resource. The exported resource is a ZIP archive that contains the exported resource in JSON format. The structure of the archive may change. Your code should not rely on the archive structure.</p>
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetExportOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetExportOutput {
    /// Creates a new builder-style object to manufacture [`GetExportOutput`](crate::operation::get_export::GetExportOutput).
    pub fn builder() -> crate::operation::get_export::builders::GetExportOutputBuilder {
        crate::operation::get_export::builders::GetExportOutputBuilder::default()
    }
}

/// A builder for [`GetExportOutput`](crate::operation::get_export::GetExportOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetExportOutputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
    pub(crate) resource_type: std::option::Option<crate::types::ResourceType>,
    pub(crate) export_type: std::option::Option<crate::types::ExportType>,
    pub(crate) export_status: std::option::Option<crate::types::ExportStatus>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
    pub(crate) url: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetExportOutputBuilder {
    /// <p>The name of the bot being exported.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the bot being exported.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The version of the bot being exported.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The version of the bot being exported.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The type of the exported resource.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p>The type of the exported resource.</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The format of the exported data.</p>
    pub fn export_type(mut self, input: crate::types::ExportType) -> Self {
        self.export_type = Some(input);
        self
    }
    /// <p>The format of the exported data.</p>
    pub fn set_export_type(mut self, input: std::option::Option<crate::types::ExportType>) -> Self {
        self.export_type = input;
        self
    }
    /// <p>The status of the export. </p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> - The export is in progress.</p> </li>
    /// <li> <p> <code>READY</code> - The export is complete.</p> </li>
    /// <li> <p> <code>FAILED</code> - The export could not be completed.</p> </li>
    /// </ul>
    pub fn export_status(mut self, input: crate::types::ExportStatus) -> Self {
        self.export_status = Some(input);
        self
    }
    /// <p>The status of the export. </p>
    /// <ul>
    /// <li> <p> <code>IN_PROGRESS</code> - The export is in progress.</p> </li>
    /// <li> <p> <code>READY</code> - The export is complete.</p> </li>
    /// <li> <p> <code>FAILED</code> - The export could not be completed.</p> </li>
    /// </ul>
    pub fn set_export_status(
        mut self,
        input: std::option::Option<crate::types::ExportStatus>,
    ) -> Self {
        self.export_status = input;
        self
    }
    /// <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed to export the resource.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex provides the reason that it failed to export the resource.</p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>An S3 pre-signed URL that provides the location of the exported resource. The exported resource is a ZIP archive that contains the exported resource in JSON format. The structure of the archive may change. Your code should not rely on the archive structure.</p>
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// <p>An S3 pre-signed URL that provides the location of the exported resource. The exported resource is a ZIP archive that contains the exported resource in JSON format. The structure of the archive may change. Your code should not rely on the archive structure.</p>
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetExportOutput`](crate::operation::get_export::GetExportOutput).
    pub fn build(self) -> crate::operation::get_export::GetExportOutput {
        crate::operation::get_export::GetExportOutput {
            name: self.name,
            version: self.version,
            resource_type: self.resource_type,
            export_type: self.export_type,
            export_status: self.export_status,
            failure_reason: self.failure_reason,
            url: self.url,
            _request_id: self._request_id,
        }
    }
}
