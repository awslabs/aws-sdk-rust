// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetExportInput {
    /// <p>The name of the bot to export.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The version of the bot to export.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>The type of resource to export. </p>
    pub resource_type: ::std::option::Option<crate::types::ResourceType>,
    /// <p>The format of the exported data.</p>
    pub export_type: ::std::option::Option<crate::types::ExportType>,
}
impl GetExportInput {
    /// <p>The name of the bot to export.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The version of the bot to export.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The type of resource to export. </p>
    pub fn resource_type(&self) -> ::std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>The format of the exported data.</p>
    pub fn export_type(&self) -> ::std::option::Option<&crate::types::ExportType> {
        self.export_type.as_ref()
    }
}
impl GetExportInput {
    /// Creates a new builder-style object to manufacture [`GetExportInput`](crate::operation::get_export::GetExportInput).
    pub fn builder() -> crate::operation::get_export::builders::GetExportInputBuilder {
        crate::operation::get_export::builders::GetExportInputBuilder::default()
    }
}

/// A builder for [`GetExportInput`](crate::operation::get_export::GetExportInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetExportInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) resource_type: ::std::option::Option<crate::types::ResourceType>,
    pub(crate) export_type: ::std::option::Option<crate::types::ExportType>,
}
impl GetExportInputBuilder {
    /// <p>The name of the bot to export.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the bot to export.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the bot to export.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The version of the bot to export.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the bot to export.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the bot to export.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The type of resource to export. </p>
    /// This field is required.
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of resource to export. </p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<crate::types::ResourceType>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of resource to export. </p>
    pub fn get_resource_type(&self) -> &::std::option::Option<crate::types::ResourceType> {
        &self.resource_type
    }
    /// <p>The format of the exported data.</p>
    /// This field is required.
    pub fn export_type(mut self, input: crate::types::ExportType) -> Self {
        self.export_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The format of the exported data.</p>
    pub fn set_export_type(mut self, input: ::std::option::Option<crate::types::ExportType>) -> Self {
        self.export_type = input;
        self
    }
    /// <p>The format of the exported data.</p>
    pub fn get_export_type(&self) -> &::std::option::Option<crate::types::ExportType> {
        &self.export_type
    }
    /// Consumes the builder and constructs a [`GetExportInput`](crate::operation::get_export::GetExportInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::get_export::GetExportInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_export::GetExportInput {
            name: self.name,
            version: self.version,
            resource_type: self.resource_type,
            export_type: self.export_type,
        })
    }
}
