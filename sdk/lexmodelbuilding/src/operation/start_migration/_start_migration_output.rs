// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartMigrationOutput {
    /// <p>The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.</p>
    #[doc(hidden)]
    pub v1_bot_name: std::option::Option<std::string::String>,
    /// <p>The version of the bot to migrate to Amazon Lex V2. </p>
    #[doc(hidden)]
    pub v1_bot_version: std::option::Option<std::string::String>,
    /// <p>The locale used for the Amazon Lex V1 bot. </p>
    #[doc(hidden)]
    pub v1_bot_locale: std::option::Option<crate::types::Locale>,
    /// <p>The unique identifier for the Amazon Lex V2 bot. </p>
    #[doc(hidden)]
    pub v2_bot_id: std::option::Option<std::string::String>,
    /// <p>The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.</p>
    #[doc(hidden)]
    pub v2_bot_role: std::option::Option<std::string::String>,
    /// <p>The unique identifier that Amazon Lex assigned to the migration.</p>
    #[doc(hidden)]
    pub migration_id: std::option::Option<std::string::String>,
    /// <p>The strategy used to conduct the migration.</p>
    #[doc(hidden)]
    pub migration_strategy: std::option::Option<crate::types::MigrationStrategy>,
    /// <p>The date and time that the migration started.</p>
    #[doc(hidden)]
    pub migration_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl StartMigrationOutput {
    /// <p>The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.</p>
    pub fn v1_bot_name(&self) -> std::option::Option<&str> {
        self.v1_bot_name.as_deref()
    }
    /// <p>The version of the bot to migrate to Amazon Lex V2. </p>
    pub fn v1_bot_version(&self) -> std::option::Option<&str> {
        self.v1_bot_version.as_deref()
    }
    /// <p>The locale used for the Amazon Lex V1 bot. </p>
    pub fn v1_bot_locale(&self) -> std::option::Option<&crate::types::Locale> {
        self.v1_bot_locale.as_ref()
    }
    /// <p>The unique identifier for the Amazon Lex V2 bot. </p>
    pub fn v2_bot_id(&self) -> std::option::Option<&str> {
        self.v2_bot_id.as_deref()
    }
    /// <p>The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.</p>
    pub fn v2_bot_role(&self) -> std::option::Option<&str> {
        self.v2_bot_role.as_deref()
    }
    /// <p>The unique identifier that Amazon Lex assigned to the migration.</p>
    pub fn migration_id(&self) -> std::option::Option<&str> {
        self.migration_id.as_deref()
    }
    /// <p>The strategy used to conduct the migration.</p>
    pub fn migration_strategy(&self) -> std::option::Option<&crate::types::MigrationStrategy> {
        self.migration_strategy.as_ref()
    }
    /// <p>The date and time that the migration started.</p>
    pub fn migration_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.migration_timestamp.as_ref()
    }
}
impl aws_http::request_id::RequestId for StartMigrationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartMigrationOutput {
    /// Creates a new builder-style object to manufacture [`StartMigrationOutput`](crate::operation::start_migration::StartMigrationOutput).
    pub fn builder() -> crate::operation::start_migration::builders::StartMigrationOutputBuilder {
        crate::operation::start_migration::builders::StartMigrationOutputBuilder::default()
    }
}

/// A builder for [`StartMigrationOutput`](crate::operation::start_migration::StartMigrationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartMigrationOutputBuilder {
    pub(crate) v1_bot_name: std::option::Option<std::string::String>,
    pub(crate) v1_bot_version: std::option::Option<std::string::String>,
    pub(crate) v1_bot_locale: std::option::Option<crate::types::Locale>,
    pub(crate) v2_bot_id: std::option::Option<std::string::String>,
    pub(crate) v2_bot_role: std::option::Option<std::string::String>,
    pub(crate) migration_id: std::option::Option<std::string::String>,
    pub(crate) migration_strategy: std::option::Option<crate::types::MigrationStrategy>,
    pub(crate) migration_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl StartMigrationOutputBuilder {
    /// <p>The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.</p>
    pub fn v1_bot_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.v1_bot_name = Some(input.into());
        self
    }
    /// <p>The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.</p>
    pub fn set_v1_bot_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.v1_bot_name = input;
        self
    }
    /// <p>The version of the bot to migrate to Amazon Lex V2. </p>
    pub fn v1_bot_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.v1_bot_version = Some(input.into());
        self
    }
    /// <p>The version of the bot to migrate to Amazon Lex V2. </p>
    pub fn set_v1_bot_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.v1_bot_version = input;
        self
    }
    /// <p>The locale used for the Amazon Lex V1 bot. </p>
    pub fn v1_bot_locale(mut self, input: crate::types::Locale) -> Self {
        self.v1_bot_locale = Some(input);
        self
    }
    /// <p>The locale used for the Amazon Lex V1 bot. </p>
    pub fn set_v1_bot_locale(mut self, input: std::option::Option<crate::types::Locale>) -> Self {
        self.v1_bot_locale = input;
        self
    }
    /// <p>The unique identifier for the Amazon Lex V2 bot. </p>
    pub fn v2_bot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.v2_bot_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the Amazon Lex V2 bot. </p>
    pub fn set_v2_bot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.v2_bot_id = input;
        self
    }
    /// <p>The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.</p>
    pub fn v2_bot_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.v2_bot_role = Some(input.into());
        self
    }
    /// <p>The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.</p>
    pub fn set_v2_bot_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.v2_bot_role = input;
        self
    }
    /// <p>The unique identifier that Amazon Lex assigned to the migration.</p>
    pub fn migration_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.migration_id = Some(input.into());
        self
    }
    /// <p>The unique identifier that Amazon Lex assigned to the migration.</p>
    pub fn set_migration_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.migration_id = input;
        self
    }
    /// <p>The strategy used to conduct the migration.</p>
    pub fn migration_strategy(mut self, input: crate::types::MigrationStrategy) -> Self {
        self.migration_strategy = Some(input);
        self
    }
    /// <p>The strategy used to conduct the migration.</p>
    pub fn set_migration_strategy(
        mut self,
        input: std::option::Option<crate::types::MigrationStrategy>,
    ) -> Self {
        self.migration_strategy = input;
        self
    }
    /// <p>The date and time that the migration started.</p>
    pub fn migration_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.migration_timestamp = Some(input);
        self
    }
    /// <p>The date and time that the migration started.</p>
    pub fn set_migration_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.migration_timestamp = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartMigrationOutput`](crate::operation::start_migration::StartMigrationOutput).
    pub fn build(self) -> crate::operation::start_migration::StartMigrationOutput {
        crate::operation::start_migration::StartMigrationOutput {
            v1_bot_name: self.v1_bot_name,
            v1_bot_version: self.v1_bot_version,
            v1_bot_locale: self.v1_bot_locale,
            v2_bot_id: self.v2_bot_id,
            v2_bot_role: self.v2_bot_role,
            migration_id: self.migration_id,
            migration_strategy: self.migration_strategy,
            migration_timestamp: self.migration_timestamp,
            _request_id: self._request_id,
        }
    }
}
