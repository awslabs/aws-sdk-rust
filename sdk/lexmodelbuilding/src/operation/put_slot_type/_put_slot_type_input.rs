// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutSlotTypeInput {
    /// <p>The name of the slot type. The name is <i>not</i> case sensitive. </p>
    /// <p>The name can't match a built-in slot type name, or a built-in slot type name with "AMAZON." removed. For example, because there is a built-in slot type called <code>AMAZON.DATE</code>, you can't create a custom slot type called <code>DATE</code>.</p>
    /// <p>For a list of built-in slot types, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference">Slot Type Reference</a> in the <i>Alexa Skills Kit</i>.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A description of the slot type.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A list of <code>EnumerationValue</code> objects that defines the values that the slot type can take. Each value can have a list of <code>synonyms</code>, which are additional values that help train the machine learning model about the values that it resolves for a slot. </p>
    /// <p>A regular expression slot type doesn't require enumeration values. All other slot types require a list of enumeration values.</p>
    /// <p>When Amazon Lex resolves a slot value, it generates a resolution list that contains up to five possible values for the slot. If you are using a Lambda function, this resolution list is passed to the function. If you are not using a Lambda function you can choose to return the value that the user entered or the first value in the resolution list as the slot value. The <code>valueSelectionStrategy</code> field indicates the option to use. </p>
    #[doc(hidden)]
    pub enumeration_values: std::option::Option<std::vec::Vec<crate::types::EnumerationValue>>,
    /// <p>Identifies a specific revision of the <code>$LATEST</code> version.</p>
    /// <p>When you create a new slot type, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p>
    /// <p>When you want to update a slot type, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>
    #[doc(hidden)]
    pub checksum: std::option::Option<std::string::String>,
    /// <p>Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ORIGINAL_VALUE</code> - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li>
    /// <li> <p> <code>TOP_RESOLUTION</code> - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.</p> </li>
    /// </ul>
    /// <p>If you don't specify the <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>
    #[doc(hidden)]
    pub value_selection_strategy: std::option::Option<crate::types::SlotValueSelectionStrategy>,
    /// <p>When set to <code>true</code> a new numbered version of the slot type is created. This is the same as calling the <code>CreateSlotTypeVersion</code> operation. If you do not specify <code>createVersion</code>, the default is <code>false</code>.</p>
    #[doc(hidden)]
    pub create_version: std::option::Option<bool>,
    /// <p>The built-in slot type used as the parent of the slot type. When you define a parent slot type, the new slot type has all of the same configuration as the parent.</p>
    /// <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>
    #[doc(hidden)]
    pub parent_slot_type_signature: std::option::Option<std::string::String>,
    /// <p>Configuration information that extends the parent built-in slot type. The configuration is added to the settings for the parent slot type.</p>
    #[doc(hidden)]
    pub slot_type_configurations:
        std::option::Option<std::vec::Vec<crate::types::SlotTypeConfiguration>>,
}
impl PutSlotTypeInput {
    /// <p>The name of the slot type. The name is <i>not</i> case sensitive. </p>
    /// <p>The name can't match a built-in slot type name, or a built-in slot type name with "AMAZON." removed. For example, because there is a built-in slot type called <code>AMAZON.DATE</code>, you can't create a custom slot type called <code>DATE</code>.</p>
    /// <p>For a list of built-in slot types, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference">Slot Type Reference</a> in the <i>Alexa Skills Kit</i>.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the slot type.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of <code>EnumerationValue</code> objects that defines the values that the slot type can take. Each value can have a list of <code>synonyms</code>, which are additional values that help train the machine learning model about the values that it resolves for a slot. </p>
    /// <p>A regular expression slot type doesn't require enumeration values. All other slot types require a list of enumeration values.</p>
    /// <p>When Amazon Lex resolves a slot value, it generates a resolution list that contains up to five possible values for the slot. If you are using a Lambda function, this resolution list is passed to the function. If you are not using a Lambda function you can choose to return the value that the user entered or the first value in the resolution list as the slot value. The <code>valueSelectionStrategy</code> field indicates the option to use. </p>
    pub fn enumeration_values(&self) -> std::option::Option<&[crate::types::EnumerationValue]> {
        self.enumeration_values.as_deref()
    }
    /// <p>Identifies a specific revision of the <code>$LATEST</code> version.</p>
    /// <p>When you create a new slot type, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p>
    /// <p>When you want to update a slot type, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>
    pub fn checksum(&self) -> std::option::Option<&str> {
        self.checksum.as_deref()
    }
    /// <p>Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ORIGINAL_VALUE</code> - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li>
    /// <li> <p> <code>TOP_RESOLUTION</code> - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.</p> </li>
    /// </ul>
    /// <p>If you don't specify the <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>
    pub fn value_selection_strategy(
        &self,
    ) -> std::option::Option<&crate::types::SlotValueSelectionStrategy> {
        self.value_selection_strategy.as_ref()
    }
    /// <p>When set to <code>true</code> a new numbered version of the slot type is created. This is the same as calling the <code>CreateSlotTypeVersion</code> operation. If you do not specify <code>createVersion</code>, the default is <code>false</code>.</p>
    pub fn create_version(&self) -> std::option::Option<bool> {
        self.create_version
    }
    /// <p>The built-in slot type used as the parent of the slot type. When you define a parent slot type, the new slot type has all of the same configuration as the parent.</p>
    /// <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>
    pub fn parent_slot_type_signature(&self) -> std::option::Option<&str> {
        self.parent_slot_type_signature.as_deref()
    }
    /// <p>Configuration information that extends the parent built-in slot type. The configuration is added to the settings for the parent slot type.</p>
    pub fn slot_type_configurations(
        &self,
    ) -> std::option::Option<&[crate::types::SlotTypeConfiguration]> {
        self.slot_type_configurations.as_deref()
    }
}
impl PutSlotTypeInput {
    /// Creates a new builder-style object to manufacture [`PutSlotTypeInput`](crate::operation::put_slot_type::PutSlotTypeInput).
    pub fn builder() -> crate::operation::put_slot_type::builders::PutSlotTypeInputBuilder {
        crate::operation::put_slot_type::builders::PutSlotTypeInputBuilder::default()
    }
}

/// A builder for [`PutSlotTypeInput`](crate::operation::put_slot_type::PutSlotTypeInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutSlotTypeInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) enumeration_values:
        std::option::Option<std::vec::Vec<crate::types::EnumerationValue>>,
    pub(crate) checksum: std::option::Option<std::string::String>,
    pub(crate) value_selection_strategy:
        std::option::Option<crate::types::SlotValueSelectionStrategy>,
    pub(crate) create_version: std::option::Option<bool>,
    pub(crate) parent_slot_type_signature: std::option::Option<std::string::String>,
    pub(crate) slot_type_configurations:
        std::option::Option<std::vec::Vec<crate::types::SlotTypeConfiguration>>,
}
impl PutSlotTypeInputBuilder {
    /// <p>The name of the slot type. The name is <i>not</i> case sensitive. </p>
    /// <p>The name can't match a built-in slot type name, or a built-in slot type name with "AMAZON." removed. For example, because there is a built-in slot type called <code>AMAZON.DATE</code>, you can't create a custom slot type called <code>DATE</code>.</p>
    /// <p>For a list of built-in slot types, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference">Slot Type Reference</a> in the <i>Alexa Skills Kit</i>.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the slot type. The name is <i>not</i> case sensitive. </p>
    /// <p>The name can't match a built-in slot type name, or a built-in slot type name with "AMAZON." removed. For example, because there is a built-in slot type called <code>AMAZON.DATE</code>, you can't create a custom slot type called <code>DATE</code>.</p>
    /// <p>For a list of built-in slot types, see <a href="https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/built-in-intent-ref/slot-type-reference">Slot Type Reference</a> in the <i>Alexa Skills Kit</i>.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A description of the slot type.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the slot type.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `enumeration_values`.
    ///
    /// To override the contents of this collection use [`set_enumeration_values`](Self::set_enumeration_values).
    ///
    /// <p>A list of <code>EnumerationValue</code> objects that defines the values that the slot type can take. Each value can have a list of <code>synonyms</code>, which are additional values that help train the machine learning model about the values that it resolves for a slot. </p>
    /// <p>A regular expression slot type doesn't require enumeration values. All other slot types require a list of enumeration values.</p>
    /// <p>When Amazon Lex resolves a slot value, it generates a resolution list that contains up to five possible values for the slot. If you are using a Lambda function, this resolution list is passed to the function. If you are not using a Lambda function you can choose to return the value that the user entered or the first value in the resolution list as the slot value. The <code>valueSelectionStrategy</code> field indicates the option to use. </p>
    pub fn enumeration_values(mut self, input: crate::types::EnumerationValue) -> Self {
        let mut v = self.enumeration_values.unwrap_or_default();
        v.push(input);
        self.enumeration_values = Some(v);
        self
    }
    /// <p>A list of <code>EnumerationValue</code> objects that defines the values that the slot type can take. Each value can have a list of <code>synonyms</code>, which are additional values that help train the machine learning model about the values that it resolves for a slot. </p>
    /// <p>A regular expression slot type doesn't require enumeration values. All other slot types require a list of enumeration values.</p>
    /// <p>When Amazon Lex resolves a slot value, it generates a resolution list that contains up to five possible values for the slot. If you are using a Lambda function, this resolution list is passed to the function. If you are not using a Lambda function you can choose to return the value that the user entered or the first value in the resolution list as the slot value. The <code>valueSelectionStrategy</code> field indicates the option to use. </p>
    pub fn set_enumeration_values(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EnumerationValue>>,
    ) -> Self {
        self.enumeration_values = input;
        self
    }
    /// <p>Identifies a specific revision of the <code>$LATEST</code> version.</p>
    /// <p>When you create a new slot type, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p>
    /// <p>When you want to update a slot type, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>
    pub fn checksum(mut self, input: impl Into<std::string::String>) -> Self {
        self.checksum = Some(input.into());
        self
    }
    /// <p>Identifies a specific revision of the <code>$LATEST</code> version.</p>
    /// <p>When you create a new slot type, leave the <code>checksum</code> field blank. If you specify a checksum you get a <code>BadRequestException</code> exception.</p>
    /// <p>When you want to update a slot type, set the <code>checksum</code> field to the checksum of the most recent revision of the <code>$LATEST</code> version. If you don't specify the <code> checksum</code> field, or if the checksum does not match the <code>$LATEST</code> version, you get a <code>PreconditionFailedException</code> exception.</p>
    pub fn set_checksum(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.checksum = input;
        self
    }
    /// <p>Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ORIGINAL_VALUE</code> - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li>
    /// <li> <p> <code>TOP_RESOLUTION</code> - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.</p> </li>
    /// </ul>
    /// <p>If you don't specify the <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>
    pub fn value_selection_strategy(
        mut self,
        input: crate::types::SlotValueSelectionStrategy,
    ) -> Self {
        self.value_selection_strategy = Some(input);
        self
    }
    /// <p>Determines the slot resolution strategy that Amazon Lex uses to return slot type values. The field can be set to one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>ORIGINAL_VALUE</code> - Returns the value entered by the user, if the user value is similar to the slot value.</p> </li>
    /// <li> <p> <code>TOP_RESOLUTION</code> - If there is a resolution list for the slot, return the first value in the resolution list as the slot type value. If there is no resolution list, null is returned.</p> </li>
    /// </ul>
    /// <p>If you don't specify the <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>
    pub fn set_value_selection_strategy(
        mut self,
        input: std::option::Option<crate::types::SlotValueSelectionStrategy>,
    ) -> Self {
        self.value_selection_strategy = input;
        self
    }
    /// <p>When set to <code>true</code> a new numbered version of the slot type is created. This is the same as calling the <code>CreateSlotTypeVersion</code> operation. If you do not specify <code>createVersion</code>, the default is <code>false</code>.</p>
    pub fn create_version(mut self, input: bool) -> Self {
        self.create_version = Some(input);
        self
    }
    /// <p>When set to <code>true</code> a new numbered version of the slot type is created. This is the same as calling the <code>CreateSlotTypeVersion</code> operation. If you do not specify <code>createVersion</code>, the default is <code>false</code>.</p>
    pub fn set_create_version(mut self, input: std::option::Option<bool>) -> Self {
        self.create_version = input;
        self
    }
    /// <p>The built-in slot type used as the parent of the slot type. When you define a parent slot type, the new slot type has all of the same configuration as the parent.</p>
    /// <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>
    pub fn parent_slot_type_signature(mut self, input: impl Into<std::string::String>) -> Self {
        self.parent_slot_type_signature = Some(input.into());
        self
    }
    /// <p>The built-in slot type used as the parent of the slot type. When you define a parent slot type, the new slot type has all of the same configuration as the parent.</p>
    /// <p>Only <code>AMAZON.AlphaNumeric</code> is supported.</p>
    pub fn set_parent_slot_type_signature(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.parent_slot_type_signature = input;
        self
    }
    /// Appends an item to `slot_type_configurations`.
    ///
    /// To override the contents of this collection use [`set_slot_type_configurations`](Self::set_slot_type_configurations).
    ///
    /// <p>Configuration information that extends the parent built-in slot type. The configuration is added to the settings for the parent slot type.</p>
    pub fn slot_type_configurations(mut self, input: crate::types::SlotTypeConfiguration) -> Self {
        let mut v = self.slot_type_configurations.unwrap_or_default();
        v.push(input);
        self.slot_type_configurations = Some(v);
        self
    }
    /// <p>Configuration information that extends the parent built-in slot type. The configuration is added to the settings for the parent slot type.</p>
    pub fn set_slot_type_configurations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SlotTypeConfiguration>>,
    ) -> Self {
        self.slot_type_configurations = input;
        self
    }
    /// Consumes the builder and constructs a [`PutSlotTypeInput`](crate::operation::put_slot_type::PutSlotTypeInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::put_slot_type::PutSlotTypeInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::put_slot_type::PutSlotTypeInput {
            name: self.name,
            description: self.description,
            enumeration_values: self.enumeration_values,
            checksum: self.checksum,
            value_selection_strategy: self.value_selection_strategy,
            create_version: self.create_version,
            parent_slot_type_signature: self.parent_slot_type_signature,
            slot_type_configurations: self.slot_type_configurations,
        })
    }
}
