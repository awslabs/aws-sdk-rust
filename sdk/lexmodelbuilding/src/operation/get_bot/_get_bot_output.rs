// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetBotOutput {
    /// <p>The name of the bot.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the bot.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>An array of <code>intent</code> objects. For more information, see <code>PutBot</code>.</p>
    pub intents: ::std::option::Option<::std::vec::Vec<crate::types::Intent>>,
    /// <p>Indicates whether the bot uses accuracy improvements. <code>true</code> indicates that the bot is using the improvements, otherwise, <code>false</code>.</p>
    pub enable_model_improvements: ::std::option::Option<bool>,
    /// <p>The score that determines where Amazon Lex inserts the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents in a <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html">PostContent</a> or <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html">PostText</a> response. <code>AMAZON.FallbackIntent</code> is inserted if the confidence score for all intents is below this value. <code>AMAZON.KendraSearchIntent</code> is only inserted if it is configured for the bot.</p>
    pub nlu_intent_confidence_threshold: ::std::option::Option<f64>,
    /// <p>The message Amazon Lex uses when it doesn't understand the user's request. For more information, see <code>PutBot</code>. </p>
    pub clarification_prompt: ::std::option::Option<crate::types::Prompt>,
    /// <p>The message that Amazon Lex returns when the user elects to end the conversation without completing it. For more information, see <code>PutBot</code>.</p>
    pub abort_statement: ::std::option::Option<crate::types::Statement>,
    /// <p>The status of the bot. </p>
    /// <p>When the status is <code>BUILDING</code> Amazon Lex is building the bot for testing and use.</p>
    /// <p>If the status of the bot is <code>READY_BASIC_TESTING</code>, you can test the bot using the exact utterances specified in the bot's intents. When the bot is ready for full testing or to run, the status is <code>READY</code>.</p>
    /// <p>If there was a problem with building the bot, the status is <code>FAILED</code> and the <code>failureReason</code> field explains why the bot did not build.</p>
    /// <p>If the bot was saved but not built, the status is <code>NOT_BUILT</code>.</p>
    pub status: ::std::option::Option<crate::types::Status>,
    /// <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex explains why it failed to build the bot.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The date that the bot was updated. When you create a resource, the creation date and last updated date are the same. </p>
    pub last_updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The date that the bot was created.</p>
    pub created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. For more information, see <code>PutBot</code>.</p>
    pub idle_session_ttl_in_seconds: ::std::option::Option<i32>,
    /// <p>The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user. For more information, see <code>PutBot</code>.</p>
    pub voice_id: ::std::option::Option<::std::string::String>,
    /// <p>Checksum of the bot used to identify a specific revision of the bot's <code>$LATEST</code> version.</p>
    pub checksum: ::std::option::Option<::std::string::String>,
    /// <p>The version of the bot. For a new bot, the version is always <code>$LATEST</code>.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p> The target locale for the bot. </p>
    pub locale: ::std::option::Option<crate::types::Locale>,
    /// <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.</p>
    /// <p>If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ.</a> </p>
    pub child_directed: ::std::option::Option<bool>,
    /// <p>Indicates whether user utterances should be sent to Amazon Comprehend for sentiment analysis.</p>
    pub detect_sentiment: ::std::option::Option<bool>,
    _request_id: Option<String>,
}
impl GetBotOutput {
    /// <p>The name of the bot.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the bot.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>An array of <code>intent</code> objects. For more information, see <code>PutBot</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.intents.is_none()`.
    pub fn intents(&self) -> &[crate::types::Intent] {
        self.intents.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether the bot uses accuracy improvements. <code>true</code> indicates that the bot is using the improvements, otherwise, <code>false</code>.</p>
    pub fn enable_model_improvements(&self) -> ::std::option::Option<bool> {
        self.enable_model_improvements
    }
    /// <p>The score that determines where Amazon Lex inserts the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents in a <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html">PostContent</a> or <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html">PostText</a> response. <code>AMAZON.FallbackIntent</code> is inserted if the confidence score for all intents is below this value. <code>AMAZON.KendraSearchIntent</code> is only inserted if it is configured for the bot.</p>
    pub fn nlu_intent_confidence_threshold(&self) -> ::std::option::Option<f64> {
        self.nlu_intent_confidence_threshold
    }
    /// <p>The message Amazon Lex uses when it doesn't understand the user's request. For more information, see <code>PutBot</code>. </p>
    pub fn clarification_prompt(&self) -> ::std::option::Option<&crate::types::Prompt> {
        self.clarification_prompt.as_ref()
    }
    /// <p>The message that Amazon Lex returns when the user elects to end the conversation without completing it. For more information, see <code>PutBot</code>.</p>
    pub fn abort_statement(&self) -> ::std::option::Option<&crate::types::Statement> {
        self.abort_statement.as_ref()
    }
    /// <p>The status of the bot. </p>
    /// <p>When the status is <code>BUILDING</code> Amazon Lex is building the bot for testing and use.</p>
    /// <p>If the status of the bot is <code>READY_BASIC_TESTING</code>, you can test the bot using the exact utterances specified in the bot's intents. When the bot is ready for full testing or to run, the status is <code>READY</code>.</p>
    /// <p>If there was a problem with building the bot, the status is <code>FAILED</code> and the <code>failureReason</code> field explains why the bot did not build.</p>
    /// <p>If the bot was saved but not built, the status is <code>NOT_BUILT</code>.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex explains why it failed to build the bot.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The date that the bot was updated. When you create a resource, the creation date and last updated date are the same. </p>
    pub fn last_updated_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_date.as_ref()
    }
    /// <p>The date that the bot was created.</p>
    pub fn created_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p>The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. For more information, see <code>PutBot</code>.</p>
    pub fn idle_session_ttl_in_seconds(&self) -> ::std::option::Option<i32> {
        self.idle_session_ttl_in_seconds
    }
    /// <p>The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user. For more information, see <code>PutBot</code>.</p>
    pub fn voice_id(&self) -> ::std::option::Option<&str> {
        self.voice_id.as_deref()
    }
    /// <p>Checksum of the bot used to identify a specific revision of the bot's <code>$LATEST</code> version.</p>
    pub fn checksum(&self) -> ::std::option::Option<&str> {
        self.checksum.as_deref()
    }
    /// <p>The version of the bot. For a new bot, the version is always <code>$LATEST</code>.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p> The target locale for the bot. </p>
    pub fn locale(&self) -> ::std::option::Option<&crate::types::Locale> {
        self.locale.as_ref()
    }
    /// <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.</p>
    /// <p>If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ.</a> </p>
    pub fn child_directed(&self) -> ::std::option::Option<bool> {
        self.child_directed
    }
    /// <p>Indicates whether user utterances should be sent to Amazon Comprehend for sentiment analysis.</p>
    pub fn detect_sentiment(&self) -> ::std::option::Option<bool> {
        self.detect_sentiment
    }
}
impl ::aws_http::request_id::RequestId for GetBotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetBotOutput {
    /// Creates a new builder-style object to manufacture [`GetBotOutput`](crate::operation::get_bot::GetBotOutput).
    pub fn builder() -> crate::operation::get_bot::builders::GetBotOutputBuilder {
        crate::operation::get_bot::builders::GetBotOutputBuilder::default()
    }
}

/// A builder for [`GetBotOutput`](crate::operation::get_bot::GetBotOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetBotOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) intents: ::std::option::Option<::std::vec::Vec<crate::types::Intent>>,
    pub(crate) enable_model_improvements: ::std::option::Option<bool>,
    pub(crate) nlu_intent_confidence_threshold: ::std::option::Option<f64>,
    pub(crate) clarification_prompt: ::std::option::Option<crate::types::Prompt>,
    pub(crate) abort_statement: ::std::option::Option<crate::types::Statement>,
    pub(crate) status: ::std::option::Option<crate::types::Status>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) last_updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) idle_session_ttl_in_seconds: ::std::option::Option<i32>,
    pub(crate) voice_id: ::std::option::Option<::std::string::String>,
    pub(crate) checksum: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) locale: ::std::option::Option<crate::types::Locale>,
    pub(crate) child_directed: ::std::option::Option<bool>,
    pub(crate) detect_sentiment: ::std::option::Option<bool>,
    _request_id: Option<String>,
}
impl GetBotOutputBuilder {
    /// <p>The name of the bot.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the bot.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the bot.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the bot.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the bot.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the bot.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `intents`.
    ///
    /// To override the contents of this collection use [`set_intents`](Self::set_intents).
    ///
    /// <p>An array of <code>intent</code> objects. For more information, see <code>PutBot</code>.</p>
    pub fn intents(mut self, input: crate::types::Intent) -> Self {
        let mut v = self.intents.unwrap_or_default();
        v.push(input);
        self.intents = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>intent</code> objects. For more information, see <code>PutBot</code>.</p>
    pub fn set_intents(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Intent>>) -> Self {
        self.intents = input;
        self
    }
    /// <p>An array of <code>intent</code> objects. For more information, see <code>PutBot</code>.</p>
    pub fn get_intents(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Intent>> {
        &self.intents
    }
    /// <p>Indicates whether the bot uses accuracy improvements. <code>true</code> indicates that the bot is using the improvements, otherwise, <code>false</code>.</p>
    pub fn enable_model_improvements(mut self, input: bool) -> Self {
        self.enable_model_improvements = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the bot uses accuracy improvements. <code>true</code> indicates that the bot is using the improvements, otherwise, <code>false</code>.</p>
    pub fn set_enable_model_improvements(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_model_improvements = input;
        self
    }
    /// <p>Indicates whether the bot uses accuracy improvements. <code>true</code> indicates that the bot is using the improvements, otherwise, <code>false</code>.</p>
    pub fn get_enable_model_improvements(&self) -> &::std::option::Option<bool> {
        &self.enable_model_improvements
    }
    /// <p>The score that determines where Amazon Lex inserts the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents in a <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html">PostContent</a> or <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html">PostText</a> response. <code>AMAZON.FallbackIntent</code> is inserted if the confidence score for all intents is below this value. <code>AMAZON.KendraSearchIntent</code> is only inserted if it is configured for the bot.</p>
    pub fn nlu_intent_confidence_threshold(mut self, input: f64) -> Self {
        self.nlu_intent_confidence_threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The score that determines where Amazon Lex inserts the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents in a <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html">PostContent</a> or <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html">PostText</a> response. <code>AMAZON.FallbackIntent</code> is inserted if the confidence score for all intents is below this value. <code>AMAZON.KendraSearchIntent</code> is only inserted if it is configured for the bot.</p>
    pub fn set_nlu_intent_confidence_threshold(mut self, input: ::std::option::Option<f64>) -> Self {
        self.nlu_intent_confidence_threshold = input;
        self
    }
    /// <p>The score that determines where Amazon Lex inserts the <code>AMAZON.FallbackIntent</code>, <code>AMAZON.KendraSearchIntent</code>, or both when returning alternative intents in a <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostContent.html">PostContent</a> or <a href="https://docs.aws.amazon.com/lex/latest/dg/API_runtime_PostText.html">PostText</a> response. <code>AMAZON.FallbackIntent</code> is inserted if the confidence score for all intents is below this value. <code>AMAZON.KendraSearchIntent</code> is only inserted if it is configured for the bot.</p>
    pub fn get_nlu_intent_confidence_threshold(&self) -> &::std::option::Option<f64> {
        &self.nlu_intent_confidence_threshold
    }
    /// <p>The message Amazon Lex uses when it doesn't understand the user's request. For more information, see <code>PutBot</code>. </p>
    pub fn clarification_prompt(mut self, input: crate::types::Prompt) -> Self {
        self.clarification_prompt = ::std::option::Option::Some(input);
        self
    }
    /// <p>The message Amazon Lex uses when it doesn't understand the user's request. For more information, see <code>PutBot</code>. </p>
    pub fn set_clarification_prompt(mut self, input: ::std::option::Option<crate::types::Prompt>) -> Self {
        self.clarification_prompt = input;
        self
    }
    /// <p>The message Amazon Lex uses when it doesn't understand the user's request. For more information, see <code>PutBot</code>. </p>
    pub fn get_clarification_prompt(&self) -> &::std::option::Option<crate::types::Prompt> {
        &self.clarification_prompt
    }
    /// <p>The message that Amazon Lex returns when the user elects to end the conversation without completing it. For more information, see <code>PutBot</code>.</p>
    pub fn abort_statement(mut self, input: crate::types::Statement) -> Self {
        self.abort_statement = ::std::option::Option::Some(input);
        self
    }
    /// <p>The message that Amazon Lex returns when the user elects to end the conversation without completing it. For more information, see <code>PutBot</code>.</p>
    pub fn set_abort_statement(mut self, input: ::std::option::Option<crate::types::Statement>) -> Self {
        self.abort_statement = input;
        self
    }
    /// <p>The message that Amazon Lex returns when the user elects to end the conversation without completing it. For more information, see <code>PutBot</code>.</p>
    pub fn get_abort_statement(&self) -> &::std::option::Option<crate::types::Statement> {
        &self.abort_statement
    }
    /// <p>The status of the bot. </p>
    /// <p>When the status is <code>BUILDING</code> Amazon Lex is building the bot for testing and use.</p>
    /// <p>If the status of the bot is <code>READY_BASIC_TESTING</code>, you can test the bot using the exact utterances specified in the bot's intents. When the bot is ready for full testing or to run, the status is <code>READY</code>.</p>
    /// <p>If there was a problem with building the bot, the status is <code>FAILED</code> and the <code>failureReason</code> field explains why the bot did not build.</p>
    /// <p>If the bot was saved but not built, the status is <code>NOT_BUILT</code>.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the bot. </p>
    /// <p>When the status is <code>BUILDING</code> Amazon Lex is building the bot for testing and use.</p>
    /// <p>If the status of the bot is <code>READY_BASIC_TESTING</code>, you can test the bot using the exact utterances specified in the bot's intents. When the bot is ready for full testing or to run, the status is <code>READY</code>.</p>
    /// <p>If there was a problem with building the bot, the status is <code>FAILED</code> and the <code>failureReason</code> field explains why the bot did not build.</p>
    /// <p>If the bot was saved but not built, the status is <code>NOT_BUILT</code>.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the bot. </p>
    /// <p>When the status is <code>BUILDING</code> Amazon Lex is building the bot for testing and use.</p>
    /// <p>If the status of the bot is <code>READY_BASIC_TESTING</code>, you can test the bot using the exact utterances specified in the bot's intents. When the bot is ready for full testing or to run, the status is <code>READY</code>.</p>
    /// <p>If there was a problem with building the bot, the status is <code>FAILED</code> and the <code>failureReason</code> field explains why the bot did not build.</p>
    /// <p>If the bot was saved but not built, the status is <code>NOT_BUILT</code>.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::Status> {
        &self.status
    }
    /// <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex explains why it failed to build the bot.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex explains why it failed to build the bot.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>If <code>status</code> is <code>FAILED</code>, Amazon Lex explains why it failed to build the bot.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The date that the bot was updated. When you create a resource, the creation date and last updated date are the same. </p>
    pub fn last_updated_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date that the bot was updated. When you create a resource, the creation date and last updated date are the same. </p>
    pub fn set_last_updated_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date = input;
        self
    }
    /// <p>The date that the bot was updated. When you create a resource, the creation date and last updated date are the same. </p>
    pub fn get_last_updated_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date
    }
    /// <p>The date that the bot was created.</p>
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date that the bot was created.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The date that the bot was created.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// <p>The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. For more information, see <code>PutBot</code>.</p>
    pub fn idle_session_ttl_in_seconds(mut self, input: i32) -> Self {
        self.idle_session_ttl_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. For more information, see <code>PutBot</code>.</p>
    pub fn set_idle_session_ttl_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.idle_session_ttl_in_seconds = input;
        self
    }
    /// <p>The maximum time in seconds that Amazon Lex retains the data gathered in a conversation. For more information, see <code>PutBot</code>.</p>
    pub fn get_idle_session_ttl_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.idle_session_ttl_in_seconds
    }
    /// <p>The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user. For more information, see <code>PutBot</code>.</p>
    pub fn voice_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.voice_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user. For more information, see <code>PutBot</code>.</p>
    pub fn set_voice_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.voice_id = input;
        self
    }
    /// <p>The Amazon Polly voice ID that Amazon Lex uses for voice interaction with the user. For more information, see <code>PutBot</code>.</p>
    pub fn get_voice_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.voice_id
    }
    /// <p>Checksum of the bot used to identify a specific revision of the bot's <code>$LATEST</code> version.</p>
    pub fn checksum(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.checksum = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Checksum of the bot used to identify a specific revision of the bot's <code>$LATEST</code> version.</p>
    pub fn set_checksum(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.checksum = input;
        self
    }
    /// <p>Checksum of the bot used to identify a specific revision of the bot's <code>$LATEST</code> version.</p>
    pub fn get_checksum(&self) -> &::std::option::Option<::std::string::String> {
        &self.checksum
    }
    /// <p>The version of the bot. For a new bot, the version is always <code>$LATEST</code>.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the bot. For a new bot, the version is always <code>$LATEST</code>.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the bot. For a new bot, the version is always <code>$LATEST</code>.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p> The target locale for the bot. </p>
    pub fn locale(mut self, input: crate::types::Locale) -> Self {
        self.locale = ::std::option::Option::Some(input);
        self
    }
    /// <p> The target locale for the bot. </p>
    pub fn set_locale(mut self, input: ::std::option::Option<crate::types::Locale>) -> Self {
        self.locale = input;
        self
    }
    /// <p> The target locale for the bot. </p>
    pub fn get_locale(&self) -> &::std::option::Option<crate::types::Locale> {
        &self.locale
    }
    /// <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.</p>
    /// <p>If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ.</a> </p>
    pub fn child_directed(mut self, input: bool) -> Self {
        self.child_directed = ::std::option::Option::Some(input);
        self
    }
    /// <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.</p>
    /// <p>If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ.</a> </p>
    pub fn set_child_directed(mut self, input: ::std::option::Option<bool>) -> Self {
        self.child_directed = input;
        self
    }
    /// <p>For each Amazon Lex bot created with the Amazon Lex Model Building Service, you must specify whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to the Children's Online Privacy Protection Act (COPPA) by specifying <code>true</code> or <code>false</code> in the <code>childDirected</code> field. By specifying <code>true</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. By specifying <code>false</code> in the <code>childDirected</code> field, you confirm that your use of Amazon Lex <b>is not</b> related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA. You may not specify a default value for the <code>childDirected</code> field that does not accurately reflect whether your use of Amazon Lex is related to a website, program, or other application that is directed or targeted, in whole or in part, to children under age 13 and subject to COPPA.</p>
    /// <p>If your use of Amazon Lex relates to a website, program, or other application that is directed in whole or in part, to children under age 13, you must obtain any required verifiable parental consent under COPPA. For information regarding the use of Amazon Lex in connection with websites, programs, or other applications that are directed or targeted, in whole or in part, to children under age 13, see the <a href="https://aws.amazon.com/lex/faqs#data-security">Amazon Lex FAQ.</a> </p>
    pub fn get_child_directed(&self) -> &::std::option::Option<bool> {
        &self.child_directed
    }
    /// <p>Indicates whether user utterances should be sent to Amazon Comprehend for sentiment analysis.</p>
    pub fn detect_sentiment(mut self, input: bool) -> Self {
        self.detect_sentiment = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether user utterances should be sent to Amazon Comprehend for sentiment analysis.</p>
    pub fn set_detect_sentiment(mut self, input: ::std::option::Option<bool>) -> Self {
        self.detect_sentiment = input;
        self
    }
    /// <p>Indicates whether user utterances should be sent to Amazon Comprehend for sentiment analysis.</p>
    pub fn get_detect_sentiment(&self) -> &::std::option::Option<bool> {
        &self.detect_sentiment
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetBotOutput`](crate::operation::get_bot::GetBotOutput).
    pub fn build(self) -> crate::operation::get_bot::GetBotOutput {
        crate::operation::get_bot::GetBotOutput {
            name: self.name,
            description: self.description,
            intents: self.intents,
            enable_model_improvements: self.enable_model_improvements,
            nlu_intent_confidence_threshold: self.nlu_intent_confidence_threshold,
            clarification_prompt: self.clarification_prompt,
            abort_statement: self.abort_statement,
            status: self.status,
            failure_reason: self.failure_reason,
            last_updated_date: self.last_updated_date,
            created_date: self.created_date,
            idle_session_ttl_in_seconds: self.idle_session_ttl_in_seconds,
            voice_id: self.voice_id,
            checksum: self.checksum,
            version: self.version,
            locale: self.locale,
            child_directed: self.child_directed,
            detect_sentiment: self.detect_sentiment,
            _request_id: self._request_id,
        }
    }
}
