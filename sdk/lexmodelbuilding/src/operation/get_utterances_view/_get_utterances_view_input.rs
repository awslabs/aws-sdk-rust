// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetUtterancesViewInput {
    /// <p>The name of the bot for which utterance information should be returned.</p>
    #[doc(hidden)]
    pub bot_name: std::option::Option<std::string::String>,
    /// <p>An array of bot versions for which utterance information should be returned. The limit is 5 versions per request.</p>
    #[doc(hidden)]
    pub bot_versions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>To return utterances that were recognized and handled, use <code>Detected</code>. To return utterances that were not recognized, use <code>Missed</code>.</p>
    #[doc(hidden)]
    pub status_type: std::option::Option<crate::types::StatusType>,
}
impl GetUtterancesViewInput {
    /// <p>The name of the bot for which utterance information should be returned.</p>
    pub fn bot_name(&self) -> std::option::Option<&str> {
        self.bot_name.as_deref()
    }
    /// <p>An array of bot versions for which utterance information should be returned. The limit is 5 versions per request.</p>
    pub fn bot_versions(&self) -> std::option::Option<&[std::string::String]> {
        self.bot_versions.as_deref()
    }
    /// <p>To return utterances that were recognized and handled, use <code>Detected</code>. To return utterances that were not recognized, use <code>Missed</code>.</p>
    pub fn status_type(&self) -> std::option::Option<&crate::types::StatusType> {
        self.status_type.as_ref()
    }
}
impl GetUtterancesViewInput {
    /// Creates a new builder-style object to manufacture [`GetUtterancesViewInput`](crate::operation::get_utterances_view::GetUtterancesViewInput).
    pub fn builder(
    ) -> crate::operation::get_utterances_view::builders::GetUtterancesViewInputBuilder {
        crate::operation::get_utterances_view::builders::GetUtterancesViewInputBuilder::default()
    }
}

/// A builder for [`GetUtterancesViewInput`](crate::operation::get_utterances_view::GetUtterancesViewInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetUtterancesViewInputBuilder {
    pub(crate) bot_name: std::option::Option<std::string::String>,
    pub(crate) bot_versions: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) status_type: std::option::Option<crate::types::StatusType>,
}
impl GetUtterancesViewInputBuilder {
    /// <p>The name of the bot for which utterance information should be returned.</p>
    pub fn bot_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_name = Some(input.into());
        self
    }
    /// <p>The name of the bot for which utterance information should be returned.</p>
    pub fn set_bot_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_name = input;
        self
    }
    /// Appends an item to `bot_versions`.
    ///
    /// To override the contents of this collection use [`set_bot_versions`](Self::set_bot_versions).
    ///
    /// <p>An array of bot versions for which utterance information should be returned. The limit is 5 versions per request.</p>
    pub fn bot_versions(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.bot_versions.unwrap_or_default();
        v.push(input.into());
        self.bot_versions = Some(v);
        self
    }
    /// <p>An array of bot versions for which utterance information should be returned. The limit is 5 versions per request.</p>
    pub fn set_bot_versions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.bot_versions = input;
        self
    }
    /// <p>To return utterances that were recognized and handled, use <code>Detected</code>. To return utterances that were not recognized, use <code>Missed</code>.</p>
    pub fn status_type(mut self, input: crate::types::StatusType) -> Self {
        self.status_type = Some(input);
        self
    }
    /// <p>To return utterances that were recognized and handled, use <code>Detected</code>. To return utterances that were not recognized, use <code>Missed</code>.</p>
    pub fn set_status_type(mut self, input: std::option::Option<crate::types::StatusType>) -> Self {
        self.status_type = input;
        self
    }
    /// Consumes the builder and constructs a [`GetUtterancesViewInput`](crate::operation::get_utterances_view::GetUtterancesViewInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_utterances_view::GetUtterancesViewInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_utterances_view::GetUtterancesViewInput {
                bot_name: self.bot_name,
                bot_versions: self.bot_versions,
                status_type: self.status_type,
            },
        )
    }
}
