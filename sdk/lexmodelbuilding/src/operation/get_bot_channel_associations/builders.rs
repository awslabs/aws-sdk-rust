// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_bot_channel_associations::_get_bot_channel_associations_output::GetBotChannelAssociationsOutputBuilder;

pub use crate::operation::get_bot_channel_associations::_get_bot_channel_associations_input::GetBotChannelAssociationsInputBuilder;

/// Fluent builder constructing a request to `GetBotChannelAssociations`.
///
/// <p> Returns a list of all of the channels associated with the specified bot. </p>
/// <p>The <code>GetBotChannelAssociations</code> operation requires permissions for the <code>lex:GetBotChannelAssociations</code> action.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetBotChannelAssociationsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::get_bot_channel_associations::builders::GetBotChannelAssociationsInputBuilder
            }
impl GetBotChannelAssociationsFluentBuilder {
    /// Creates a new `GetBotChannelAssociations`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_bot_channel_associations::GetBotChannelAssociations,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_bot_channel_associations::GetBotChannelAssociationsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_bot_channel_associations::GetBotChannelAssociationsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_bot_channel_associations::GetBotChannelAssociationsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::get_bot_channel_associations::paginator::GetBotChannelAssociationsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::get_bot_channel_associations::paginator::GetBotChannelAssociationsPaginator
    {
        crate::operation::get_bot_channel_associations::paginator::GetBotChannelAssociationsPaginator::new(self.handle, self.inner)
    }
    /// <p>The name of the Amazon Lex bot in the association.</p>
    pub fn bot_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.bot_name(input.into());
        self
    }
    /// <p>The name of the Amazon Lex bot in the association.</p>
    pub fn set_bot_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_bot_name(input);
        self
    }
    /// <p>An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.</p>
    pub fn bot_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.bot_alias(input.into());
        self
    }
    /// <p>An alias pointing to the specific version of the Amazon Lex bot to which this association is being made.</p>
    pub fn set_bot_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_bot_alias(input);
        self
    }
    /// <p>A pagination token for fetching the next page of associations. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of associations, specify the pagination token in the next request. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A pagination token for fetching the next page of associations. If the response to this call is truncated, Amazon Lex returns a pagination token in the response. To fetch the next page of associations, specify the pagination token in the next request. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of associations to return in the response. The default is 50. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of associations to return in the response. The default is 50. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>Substring to match in channel association names. An association will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz." To return all bot channel associations, use a hyphen ("-") as the <code>nameContains</code> parameter.</p>
    pub fn name_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_contains(input.into());
        self
    }
    /// <p>Substring to match in channel association names. An association will be returned if any part of its name matches the substring. For example, "xyz" matches both "xyzabc" and "abcxyz." To return all bot channel associations, use a hyphen ("-") as the <code>nameContains</code> parameter.</p>
    pub fn set_name_contains(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_contains(input);
        self
    }
}
