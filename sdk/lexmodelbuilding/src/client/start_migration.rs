// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StartMigration`](crate::operation::start_migration::builders::StartMigrationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`v1_bot_name(impl Into<String>)`](crate::operation::start_migration::builders::StartMigrationFluentBuilder::v1_bot_name) / [`set_v1_bot_name(Option<String>)`](crate::operation::start_migration::builders::StartMigrationFluentBuilder::set_v1_bot_name): <p>The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.</p>
    ///   - [`v1_bot_version(impl Into<String>)`](crate::operation::start_migration::builders::StartMigrationFluentBuilder::v1_bot_version) / [`set_v1_bot_version(Option<String>)`](crate::operation::start_migration::builders::StartMigrationFluentBuilder::set_v1_bot_version): <p>The version of the bot to migrate to Amazon Lex V2. You can migrate the <code>$LATEST</code> version as well as any numbered version.</p>
    ///   - [`v2_bot_name(impl Into<String>)`](crate::operation::start_migration::builders::StartMigrationFluentBuilder::v2_bot_name) / [`set_v2_bot_name(Option<String>)`](crate::operation::start_migration::builders::StartMigrationFluentBuilder::set_v2_bot_name): <p>The name of the Amazon Lex V2 bot that you are migrating the Amazon Lex V1 bot to. </p>  <ul>   <li> <p>If the Amazon Lex V2 bot doesn't exist, you must use the <code>CREATE_NEW</code> migration strategy.</p> </li>   <li> <p>If the Amazon Lex V2 bot exists, you must use the <code>UPDATE_EXISTING</code> migration strategy to change the contents of the Amazon Lex V2 bot.</p> </li>  </ul>
    ///   - [`v2_bot_role(impl Into<String>)`](crate::operation::start_migration::builders::StartMigrationFluentBuilder::v2_bot_role) / [`set_v2_bot_role(Option<String>)`](crate::operation::start_migration::builders::StartMigrationFluentBuilder::set_v2_bot_role): <p>The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.</p>
    ///   - [`migration_strategy(MigrationStrategy)`](crate::operation::start_migration::builders::StartMigrationFluentBuilder::migration_strategy) / [`set_migration_strategy(Option<MigrationStrategy>)`](crate::operation::start_migration::builders::StartMigrationFluentBuilder::set_migration_strategy): <p>The strategy used to conduct the migration.</p>  <ul>   <li> <p> <code>CREATE_NEW</code> - Creates a new Amazon Lex V2 bot and migrates the Amazon Lex V1 bot to the new bot.</p> </li>   <li> <p> <code>UPDATE_EXISTING</code> - Overwrites the existing Amazon Lex V2 bot metadata and the locale being migrated. It doesn't change any other locales in the Amazon Lex V2 bot. If the locale doesn't exist, a new locale is created in the Amazon Lex V2 bot.</p> </li>  </ul>
    /// - On success, responds with [`StartMigrationOutput`](crate::operation::start_migration::StartMigrationOutput) with field(s):
    ///   - [`v1_bot_name(Option<String>)`](crate::operation::start_migration::StartMigrationOutput::v1_bot_name): <p>The name of the Amazon Lex V1 bot that you are migrating to Amazon Lex V2.</p>
    ///   - [`v1_bot_version(Option<String>)`](crate::operation::start_migration::StartMigrationOutput::v1_bot_version): <p>The version of the bot to migrate to Amazon Lex V2. </p>
    ///   - [`v1_bot_locale(Option<Locale>)`](crate::operation::start_migration::StartMigrationOutput::v1_bot_locale): <p>The locale used for the Amazon Lex V1 bot. </p>
    ///   - [`v2_bot_id(Option<String>)`](crate::operation::start_migration::StartMigrationOutput::v2_bot_id): <p>The unique identifier for the Amazon Lex V2 bot. </p>
    ///   - [`v2_bot_role(Option<String>)`](crate::operation::start_migration::StartMigrationOutput::v2_bot_role): <p>The IAM role that Amazon Lex uses to run the Amazon Lex V2 bot.</p>
    ///   - [`migration_id(Option<String>)`](crate::operation::start_migration::StartMigrationOutput::migration_id): <p>The unique identifier that Amazon Lex assigned to the migration.</p>
    ///   - [`migration_strategy(Option<MigrationStrategy>)`](crate::operation::start_migration::StartMigrationOutput::migration_strategy): <p>The strategy used to conduct the migration.</p>
    ///   - [`migration_timestamp(Option<DateTime>)`](crate::operation::start_migration::StartMigrationOutput::migration_timestamp): <p>The date and time that the migration started.</p>
    /// - On failure, responds with [`SdkError<StartMigrationError>`](crate::operation::start_migration::StartMigrationError)
    pub fn start_migration(
        &self,
    ) -> crate::operation::start_migration::builders::StartMigrationFluentBuilder {
        crate::operation::start_migration::builders::StartMigrationFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
