// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_intent_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_intent::PutIntentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.checksum {
        object.key("checksum").string(var_1.as_str());
    }
    if let Some(var_2) = &input.conclusion_statement {
        #[allow(unused_mut)]
        let mut object_3 = object.key("conclusionStatement").start_object();
        crate::protocol_serde::shape_statement::ser_statement(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.confirmation_prompt {
        #[allow(unused_mut)]
        let mut object_5 = object.key("confirmationPrompt").start_object();
        crate::protocol_serde::shape_prompt::ser_prompt(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.create_version {
        object.key("createVersion").boolean(*var_6);
    }
    if let Some(var_7) = &input.description {
        object.key("description").string(var_7.as_str());
    }
    if let Some(var_8) = &input.dialog_code_hook {
        #[allow(unused_mut)]
        let mut object_9 = object.key("dialogCodeHook").start_object();
        crate::protocol_serde::shape_code_hook::ser_code_hook(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.follow_up_prompt {
        #[allow(unused_mut)]
        let mut object_11 = object.key("followUpPrompt").start_object();
        crate::protocol_serde::shape_follow_up_prompt::ser_follow_up_prompt(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.fulfillment_activity {
        #[allow(unused_mut)]
        let mut object_13 = object.key("fulfillmentActivity").start_object();
        crate::protocol_serde::shape_fulfillment_activity::ser_fulfillment_activity(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if let Some(var_14) = &input.input_contexts {
        let mut array_15 = object.key("inputContexts").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_input_context::ser_input_context(
                    &mut object_17,
                    item_16,
                )?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.kendra_configuration {
        #[allow(unused_mut)]
        let mut object_19 = object.key("kendraConfiguration").start_object();
        crate::protocol_serde::shape_kendra_configuration::ser_kendra_configuration(
            &mut object_19,
            var_18,
        )?;
        object_19.finish();
    }
    if let Some(var_20) = &input.output_contexts {
        let mut array_21 = object.key("outputContexts").start_array();
        for item_22 in var_20 {
            {
                #[allow(unused_mut)]
                let mut object_23 = array_21.value().start_object();
                crate::protocol_serde::shape_output_context::ser_output_context(
                    &mut object_23,
                    item_22,
                )?;
                object_23.finish();
            }
        }
        array_21.finish();
    }
    if let Some(var_24) = &input.parent_intent_signature {
        object.key("parentIntentSignature").string(var_24.as_str());
    }
    if let Some(var_25) = &input.rejection_statement {
        #[allow(unused_mut)]
        let mut object_26 = object.key("rejectionStatement").start_object();
        crate::protocol_serde::shape_statement::ser_statement(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.sample_utterances {
        let mut array_28 = object.key("sampleUtterances").start_array();
        for item_29 in var_27 {
            {
                array_28.value().string(item_29.as_str());
            }
        }
        array_28.finish();
    }
    if let Some(var_30) = &input.slots {
        let mut array_31 = object.key("slots").start_array();
        for item_32 in var_30 {
            {
                #[allow(unused_mut)]
                let mut object_33 = array_31.value().start_object();
                crate::protocol_serde::shape_slot::ser_slot(&mut object_33, item_32)?;
                object_33.finish();
            }
        }
        array_31.finish();
    }
    Ok(())
}
