// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_bot_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_bot::PutBotInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.abort_statement {
        #[allow(unused_mut)]
        let mut object_2 = object.key("abortStatement").start_object();
        crate::protocol_serde::shape_statement::ser_statement(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.checksum {
        object.key("checksum").string(var_3.as_str());
    }
    if let Some(var_4) = &input.child_directed {
        object.key("childDirected").boolean(*var_4);
    }
    if let Some(var_5) = &input.clarification_prompt {
        #[allow(unused_mut)]
        let mut object_6 = object.key("clarificationPrompt").start_object();
        crate::protocol_serde::shape_prompt::ser_prompt(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.create_version {
        object.key("createVersion").boolean(*var_7);
    }
    if let Some(var_8) = &input.description {
        object.key("description").string(var_8.as_str());
    }
    if let Some(var_9) = &input.detect_sentiment {
        object.key("detectSentiment").boolean(*var_9);
    }
    if let Some(var_10) = &input.enable_model_improvements {
        object.key("enableModelImprovements").boolean(*var_10);
    }
    if let Some(var_11) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.intents {
        let mut array_13 = object.key("intents").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_intent::ser_intent(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.locale {
        object.key("locale").string(var_16.as_str());
    }
    if let Some(var_17) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::Float((*var_17).into()),
        );
    }
    if let Some(var_18) = &input.process_behavior {
        object.key("processBehavior").string(var_18.as_str());
    }
    if let Some(var_19) = &input.tags {
        let mut array_20 = object.key("tags").start_array();
        for item_21 in var_19 {
            {
                #[allow(unused_mut)]
                let mut object_22 = array_20.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_22, item_21)?;
                object_22.finish();
            }
        }
        array_20.finish();
    }
    if let Some(var_23) = &input.voice_id {
        object.key("voiceId").string(var_23.as_str());
    }
    Ok(())
}
