// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_slot_type_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_slot_type::PutSlotTypeInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.checksum {
        object.key("checksum").string(var_1.as_str());
    }
    if let Some(var_2) = &input.create_version {
        object.key("createVersion").boolean(*var_2);
    }
    if let Some(var_3) = &input.description {
        object.key("description").string(var_3.as_str());
    }
    if let Some(var_4) = &input.enumeration_values {
        let mut array_5 = object.key("enumerationValues").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_enumeration_value::ser_enumeration_value(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.parent_slot_type_signature {
        object.key("parentSlotTypeSignature").string(var_8.as_str());
    }
    if let Some(var_9) = &input.slot_type_configurations {
        let mut array_10 = object.key("slotTypeConfigurations").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_slot_type_configuration::ser_slot_type_configuration(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.value_selection_strategy {
        object.key("valueSelectionStrategy").string(var_13.as_str());
    }
    Ok(())
}
