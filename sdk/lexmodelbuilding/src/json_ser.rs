// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_create_bot_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateBotVersionInput,
) {
    if let Some(var_1) = &input.checksum {
        object.key("checksum").string(var_1);
    }
}

pub fn serialize_structure_create_intent_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateIntentVersionInput,
) {
    if let Some(var_2) = &input.checksum {
        object.key("checksum").string(var_2);
    }
}

pub fn serialize_structure_create_slot_type_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSlotTypeVersionInput,
) {
    if let Some(var_3) = &input.checksum {
        object.key("checksum").string(var_3);
    }
}

pub fn serialize_structure_put_bot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutBotInput,
) {
    if let Some(var_4) = &input.abort_statement {
        let mut object_5 = object.key("abortStatement").start_object();
        crate::json_ser::serialize_structure_statement(&mut object_5, var_4);
        object_5.finish();
    }
    if let Some(var_6) = &input.checksum {
        object.key("checksum").string(var_6);
    }
    if let Some(var_7) = &input.child_directed {
        object.key("childDirected").boolean(*var_7);
    }
    if let Some(var_8) = &input.clarification_prompt {
        let mut object_9 = object.key("clarificationPrompt").start_object();
        crate::json_ser::serialize_structure_prompt(&mut object_9, var_8);
        object_9.finish();
    }
    if let Some(var_10) = &input.create_version {
        object.key("createVersion").boolean(*var_10);
    }
    if let Some(var_11) = &input.description {
        object.key("description").string(var_11);
    }
    if let Some(var_12) = &input.detect_sentiment {
        object.key("detectSentiment").boolean(*var_12);
    }
    if let Some(var_13) = &input.enable_model_improvements {
        object.key("enableModelImprovements").boolean(*var_13);
    }
    if let Some(var_14) = &input.idle_session_ttl_in_seconds {
        object.key("idleSessionTTLInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_14).into()),
        );
    }
    if let Some(var_15) = &input.intents {
        let mut array_16 = object.key("intents").start_array();
        for item_17 in var_15 {
            {
                let mut object_18 = array_16.value().start_object();
                crate::json_ser::serialize_structure_intent(&mut object_18, item_17);
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if let Some(var_19) = &input.locale {
        object.key("locale").string(var_19.as_str());
    }
    if let Some(var_20) = &input.nlu_intent_confidence_threshold {
        object.key("nluIntentConfidenceThreshold").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::Float((*var_20).into()),
        );
    }
    if let Some(var_21) = &input.process_behavior {
        object.key("processBehavior").string(var_21.as_str());
    }
    if let Some(var_22) = &input.tags {
        let mut array_23 = object.key("tags").start_array();
        for item_24 in var_22 {
            {
                let mut object_25 = array_23.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_25, item_24);
                object_25.finish();
            }
        }
        array_23.finish();
    }
    if let Some(var_26) = &input.voice_id {
        object.key("voiceId").string(var_26);
    }
}

pub fn serialize_structure_put_bot_alias_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutBotAliasInput,
) {
    if let Some(var_27) = &input.bot_version {
        object.key("botVersion").string(var_27);
    }
    if let Some(var_28) = &input.checksum {
        object.key("checksum").string(var_28);
    }
    if let Some(var_29) = &input.conversation_logs {
        let mut object_30 = object.key("conversationLogs").start_object();
        crate::json_ser::serialize_structure_conversation_logs_request(&mut object_30, var_29);
        object_30.finish();
    }
    if let Some(var_31) = &input.description {
        object.key("description").string(var_31);
    }
    if let Some(var_32) = &input.tags {
        let mut array_33 = object.key("tags").start_array();
        for item_34 in var_32 {
            {
                let mut object_35 = array_33.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_35, item_34);
                object_35.finish();
            }
        }
        array_33.finish();
    }
}

pub fn serialize_structure_put_intent_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutIntentInput,
) {
    if let Some(var_36) = &input.checksum {
        object.key("checksum").string(var_36);
    }
    if let Some(var_37) = &input.conclusion_statement {
        let mut object_38 = object.key("conclusionStatement").start_object();
        crate::json_ser::serialize_structure_statement(&mut object_38, var_37);
        object_38.finish();
    }
    if let Some(var_39) = &input.confirmation_prompt {
        let mut object_40 = object.key("confirmationPrompt").start_object();
        crate::json_ser::serialize_structure_prompt(&mut object_40, var_39);
        object_40.finish();
    }
    if let Some(var_41) = &input.create_version {
        object.key("createVersion").boolean(*var_41);
    }
    if let Some(var_42) = &input.description {
        object.key("description").string(var_42);
    }
    if let Some(var_43) = &input.dialog_code_hook {
        let mut object_44 = object.key("dialogCodeHook").start_object();
        crate::json_ser::serialize_structure_code_hook(&mut object_44, var_43);
        object_44.finish();
    }
    if let Some(var_45) = &input.follow_up_prompt {
        let mut object_46 = object.key("followUpPrompt").start_object();
        crate::json_ser::serialize_structure_follow_up_prompt(&mut object_46, var_45);
        object_46.finish();
    }
    if let Some(var_47) = &input.fulfillment_activity {
        let mut object_48 = object.key("fulfillmentActivity").start_object();
        crate::json_ser::serialize_structure_fulfillment_activity(&mut object_48, var_47);
        object_48.finish();
    }
    if let Some(var_49) = &input.input_contexts {
        let mut array_50 = object.key("inputContexts").start_array();
        for item_51 in var_49 {
            {
                let mut object_52 = array_50.value().start_object();
                crate::json_ser::serialize_structure_input_context(&mut object_52, item_51);
                object_52.finish();
            }
        }
        array_50.finish();
    }
    if let Some(var_53) = &input.kendra_configuration {
        let mut object_54 = object.key("kendraConfiguration").start_object();
        crate::json_ser::serialize_structure_kendra_configuration(&mut object_54, var_53);
        object_54.finish();
    }
    if let Some(var_55) = &input.output_contexts {
        let mut array_56 = object.key("outputContexts").start_array();
        for item_57 in var_55 {
            {
                let mut object_58 = array_56.value().start_object();
                crate::json_ser::serialize_structure_output_context(&mut object_58, item_57);
                object_58.finish();
            }
        }
        array_56.finish();
    }
    if let Some(var_59) = &input.parent_intent_signature {
        object.key("parentIntentSignature").string(var_59);
    }
    if let Some(var_60) = &input.rejection_statement {
        let mut object_61 = object.key("rejectionStatement").start_object();
        crate::json_ser::serialize_structure_statement(&mut object_61, var_60);
        object_61.finish();
    }
    if let Some(var_62) = &input.sample_utterances {
        let mut array_63 = object.key("sampleUtterances").start_array();
        for item_64 in var_62 {
            {
                array_63.value().string(item_64);
            }
        }
        array_63.finish();
    }
    if let Some(var_65) = &input.slots {
        let mut array_66 = object.key("slots").start_array();
        for item_67 in var_65 {
            {
                let mut object_68 = array_66.value().start_object();
                crate::json_ser::serialize_structure_slot(&mut object_68, item_67);
                object_68.finish();
            }
        }
        array_66.finish();
    }
}

pub fn serialize_structure_put_slot_type_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PutSlotTypeInput,
) {
    if let Some(var_69) = &input.checksum {
        object.key("checksum").string(var_69);
    }
    if let Some(var_70) = &input.create_version {
        object.key("createVersion").boolean(*var_70);
    }
    if let Some(var_71) = &input.description {
        object.key("description").string(var_71);
    }
    if let Some(var_72) = &input.enumeration_values {
        let mut array_73 = object.key("enumerationValues").start_array();
        for item_74 in var_72 {
            {
                let mut object_75 = array_73.value().start_object();
                crate::json_ser::serialize_structure_enumeration_value(&mut object_75, item_74);
                object_75.finish();
            }
        }
        array_73.finish();
    }
    if let Some(var_76) = &input.parent_slot_type_signature {
        object.key("parentSlotTypeSignature").string(var_76);
    }
    if let Some(var_77) = &input.slot_type_configurations {
        let mut array_78 = object.key("slotTypeConfigurations").start_array();
        for item_79 in var_77 {
            {
                let mut object_80 = array_78.value().start_object();
                crate::json_ser::serialize_structure_slot_type_configuration(
                    &mut object_80,
                    item_79,
                );
                object_80.finish();
            }
        }
        array_78.finish();
    }
    if let Some(var_81) = &input.value_selection_strategy {
        object.key("valueSelectionStrategy").string(var_81.as_str());
    }
}

pub fn serialize_structure_start_import_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartImportInput,
) {
    if let Some(var_82) = &input.merge_strategy {
        object.key("mergeStrategy").string(var_82.as_str());
    }
    if let Some(var_83) = &input.payload {
        object
            .key("payload")
            .string_unchecked(&smithy_types::base64::encode(var_83));
    }
    if let Some(var_84) = &input.resource_type {
        object.key("resourceType").string(var_84.as_str());
    }
    if let Some(var_85) = &input.tags {
        let mut array_86 = object.key("tags").start_array();
        for item_87 in var_85 {
            {
                let mut object_88 = array_86.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_88, item_87);
                object_88.finish();
            }
        }
        array_86.finish();
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_89) = &input.tags {
        let mut array_90 = object.key("tags").start_array();
        for item_91 in var_89 {
            {
                let mut object_92 = array_90.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_92, item_91);
                object_92.finish();
            }
        }
        array_90.finish();
    }
}

pub fn serialize_structure_statement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Statement,
) {
    if let Some(var_93) = &input.messages {
        let mut array_94 = object.key("messages").start_array();
        for item_95 in var_93 {
            {
                let mut object_96 = array_94.value().start_object();
                crate::json_ser::serialize_structure_message(&mut object_96, item_95);
                object_96.finish();
            }
        }
        array_94.finish();
    }
    if let Some(var_97) = &input.response_card {
        object.key("responseCard").string(var_97);
    }
}

pub fn serialize_structure_prompt(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Prompt,
) {
    if let Some(var_98) = &input.messages {
        let mut array_99 = object.key("messages").start_array();
        for item_100 in var_98 {
            {
                let mut object_101 = array_99.value().start_object();
                crate::json_ser::serialize_structure_message(&mut object_101, item_100);
                object_101.finish();
            }
        }
        array_99.finish();
    }
    if let Some(var_102) = &input.max_attempts {
        object.key("maxAttempts").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_102).into()),
        );
    }
    if let Some(var_103) = &input.response_card {
        object.key("responseCard").string(var_103);
    }
}

pub fn serialize_structure_intent(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Intent,
) {
    if let Some(var_104) = &input.intent_name {
        object.key("intentName").string(var_104);
    }
    if let Some(var_105) = &input.intent_version {
        object.key("intentVersion").string(var_105);
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_106) = &input.key {
        object.key("key").string(var_106);
    }
    if let Some(var_107) = &input.value {
        object.key("value").string(var_107);
    }
}

pub fn serialize_structure_conversation_logs_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConversationLogsRequest,
) {
    if let Some(var_108) = &input.log_settings {
        let mut array_109 = object.key("logSettings").start_array();
        for item_110 in var_108 {
            {
                let mut object_111 = array_109.value().start_object();
                crate::json_ser::serialize_structure_log_settings_request(
                    &mut object_111,
                    item_110,
                );
                object_111.finish();
            }
        }
        array_109.finish();
    }
    if let Some(var_112) = &input.iam_role_arn {
        object.key("iamRoleArn").string(var_112);
    }
}

pub fn serialize_structure_code_hook(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeHook,
) {
    if let Some(var_113) = &input.uri {
        object.key("uri").string(var_113);
    }
    if let Some(var_114) = &input.message_version {
        object.key("messageVersion").string(var_114);
    }
}

pub fn serialize_structure_follow_up_prompt(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FollowUpPrompt,
) {
    if let Some(var_115) = &input.prompt {
        let mut object_116 = object.key("prompt").start_object();
        crate::json_ser::serialize_structure_prompt(&mut object_116, var_115);
        object_116.finish();
    }
    if let Some(var_117) = &input.rejection_statement {
        let mut object_118 = object.key("rejectionStatement").start_object();
        crate::json_ser::serialize_structure_statement(&mut object_118, var_117);
        object_118.finish();
    }
}

pub fn serialize_structure_fulfillment_activity(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FulfillmentActivity,
) {
    if let Some(var_119) = &input.r#type {
        object.key("type").string(var_119.as_str());
    }
    if let Some(var_120) = &input.code_hook {
        let mut object_121 = object.key("codeHook").start_object();
        crate::json_ser::serialize_structure_code_hook(&mut object_121, var_120);
        object_121.finish();
    }
}

pub fn serialize_structure_input_context(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputContext,
) {
    if let Some(var_122) = &input.name {
        object.key("name").string(var_122);
    }
}

pub fn serialize_structure_kendra_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KendraConfiguration,
) {
    if let Some(var_123) = &input.kendra_index {
        object.key("kendraIndex").string(var_123);
    }
    if let Some(var_124) = &input.query_filter_string {
        object.key("queryFilterString").string(var_124);
    }
    if let Some(var_125) = &input.role {
        object.key("role").string(var_125);
    }
}

pub fn serialize_structure_output_context(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputContext,
) {
    if let Some(var_126) = &input.name {
        object.key("name").string(var_126);
    }
    if let Some(var_127) = &input.time_to_live_in_seconds {
        object.key("timeToLiveInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_127).into()),
        );
    }
    if let Some(var_128) = &input.turns_to_live {
        object.key("turnsToLive").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_128).into()),
        );
    }
}

pub fn serialize_structure_slot(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Slot,
) {
    if let Some(var_129) = &input.name {
        object.key("name").string(var_129);
    }
    if let Some(var_130) = &input.description {
        object.key("description").string(var_130);
    }
    if let Some(var_131) = &input.slot_constraint {
        object.key("slotConstraint").string(var_131.as_str());
    }
    if let Some(var_132) = &input.slot_type {
        object.key("slotType").string(var_132);
    }
    if let Some(var_133) = &input.slot_type_version {
        object.key("slotTypeVersion").string(var_133);
    }
    if let Some(var_134) = &input.value_elicitation_prompt {
        let mut object_135 = object.key("valueElicitationPrompt").start_object();
        crate::json_ser::serialize_structure_prompt(&mut object_135, var_134);
        object_135.finish();
    }
    if let Some(var_136) = &input.priority {
        object.key("priority").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_136).into()),
        );
    }
    if let Some(var_137) = &input.sample_utterances {
        let mut array_138 = object.key("sampleUtterances").start_array();
        for item_139 in var_137 {
            {
                array_138.value().string(item_139);
            }
        }
        array_138.finish();
    }
    if let Some(var_140) = &input.response_card {
        object.key("responseCard").string(var_140);
    }
    if let Some(var_141) = &input.obfuscation_setting {
        object.key("obfuscationSetting").string(var_141.as_str());
    }
    if let Some(var_142) = &input.default_value_spec {
        let mut object_143 = object.key("defaultValueSpec").start_object();
        crate::json_ser::serialize_structure_slot_default_value_spec(&mut object_143, var_142);
        object_143.finish();
    }
}

pub fn serialize_structure_enumeration_value(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EnumerationValue,
) {
    if let Some(var_144) = &input.value {
        object.key("value").string(var_144);
    }
    if let Some(var_145) = &input.synonyms {
        let mut array_146 = object.key("synonyms").start_array();
        for item_147 in var_145 {
            {
                array_146.value().string(item_147);
            }
        }
        array_146.finish();
    }
}

pub fn serialize_structure_slot_type_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeConfiguration,
) {
    if let Some(var_148) = &input.regex_configuration {
        let mut object_149 = object.key("regexConfiguration").start_object();
        crate::json_ser::serialize_structure_slot_type_regex_configuration(
            &mut object_149,
            var_148,
        );
        object_149.finish();
    }
}

pub fn serialize_structure_message(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Message,
) {
    if let Some(var_150) = &input.content_type {
        object.key("contentType").string(var_150.as_str());
    }
    if let Some(var_151) = &input.content {
        object.key("content").string(var_151);
    }
    if let Some(var_152) = &input.group_number {
        object.key("groupNumber").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_152).into()),
        );
    }
}

pub fn serialize_structure_log_settings_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogSettingsRequest,
) {
    if let Some(var_153) = &input.log_type {
        object.key("logType").string(var_153.as_str());
    }
    if let Some(var_154) = &input.destination {
        object.key("destination").string(var_154.as_str());
    }
    if let Some(var_155) = &input.kms_key_arn {
        object.key("kmsKeyArn").string(var_155);
    }
    if let Some(var_156) = &input.resource_arn {
        object.key("resourceArn").string(var_156);
    }
}

pub fn serialize_structure_slot_default_value_spec(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotDefaultValueSpec,
) {
    if let Some(var_157) = &input.default_value_list {
        let mut array_158 = object.key("defaultValueList").start_array();
        for item_159 in var_157 {
            {
                let mut object_160 = array_158.value().start_object();
                crate::json_ser::serialize_structure_slot_default_value(&mut object_160, item_159);
                object_160.finish();
            }
        }
        array_158.finish();
    }
}

pub fn serialize_structure_slot_type_regex_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotTypeRegexConfiguration,
) {
    if let Some(var_161) = &input.pattern {
        object.key("pattern").string(var_161);
    }
}

pub fn serialize_structure_slot_default_value(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SlotDefaultValue,
) {
    if let Some(var_162) = &input.default_value {
        object.key("defaultValue").string(var_162);
    }
}
