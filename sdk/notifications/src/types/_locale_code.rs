// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `LocaleCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let localecode = unimplemented!();
/// match localecode {
///     LocaleCode::DeDe => { /* ... */ },
///     LocaleCode::EnCa => { /* ... */ },
///     LocaleCode::EnUk => { /* ... */ },
///     LocaleCode::EnUs => { /* ... */ },
///     LocaleCode::EsEs => { /* ... */ },
///     LocaleCode::FrCa => { /* ... */ },
///     LocaleCode::FrFr => { /* ... */ },
///     LocaleCode::IdId => { /* ... */ },
///     LocaleCode::ItIt => { /* ... */ },
///     LocaleCode::JaJp => { /* ... */ },
///     LocaleCode::KoKr => { /* ... */ },
///     LocaleCode::PtBr => { /* ... */ },
///     LocaleCode::TrTr => { /* ... */ },
///     LocaleCode::ZhCn => { /* ... */ },
///     LocaleCode::ZhTw => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `localecode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `LocaleCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `LocaleCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `LocaleCode::NewFeature` is defined.
/// Specifically, when `localecode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `LocaleCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum LocaleCode {
    /// German (Germany)
    DeDe,
    /// English (Canada)
    EnCa,
    /// English (United Kingdom)
    EnUk,
    /// English (United States). This is the default locale.
    EnUs,
    /// Spanish (Spain)
    EsEs,
    /// French (Canada)
    FrCa,
    /// French (France)
    FrFr,
    /// Bahasa Indonesian (Indonesia)
    IdId,
    /// Italian (Italy)
    ItIt,
    /// Japanese (Japan)
    JaJp,
    /// Korean (Korea)
    KoKr,
    /// Portuguese (Brazil)
    PtBr,
    /// Turkish (Turkey)
    TrTr,
    /// Chinese (China)
    ZhCn,
    /// Chinese (Taiwan)
    ZhTw,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for LocaleCode {
    fn from(s: &str) -> Self {
        match s {
            "de_DE" => LocaleCode::DeDe,
            "en_CA" => LocaleCode::EnCa,
            "en_UK" => LocaleCode::EnUk,
            "en_US" => LocaleCode::EnUs,
            "es_ES" => LocaleCode::EsEs,
            "fr_CA" => LocaleCode::FrCa,
            "fr_FR" => LocaleCode::FrFr,
            "id_ID" => LocaleCode::IdId,
            "it_IT" => LocaleCode::ItIt,
            "ja_JP" => LocaleCode::JaJp,
            "ko_KR" => LocaleCode::KoKr,
            "pt_BR" => LocaleCode::PtBr,
            "tr_TR" => LocaleCode::TrTr,
            "zh_CN" => LocaleCode::ZhCn,
            "zh_TW" => LocaleCode::ZhTw,
            other => LocaleCode::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for LocaleCode {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(LocaleCode::from(s))
    }
}
impl LocaleCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            LocaleCode::DeDe => "de_DE",
            LocaleCode::EnCa => "en_CA",
            LocaleCode::EnUk => "en_UK",
            LocaleCode::EnUs => "en_US",
            LocaleCode::EsEs => "es_ES",
            LocaleCode::FrCa => "fr_CA",
            LocaleCode::FrFr => "fr_FR",
            LocaleCode::IdId => "id_ID",
            LocaleCode::ItIt => "it_IT",
            LocaleCode::JaJp => "ja_JP",
            LocaleCode::KoKr => "ko_KR",
            LocaleCode::PtBr => "pt_BR",
            LocaleCode::TrTr => "tr_TR",
            LocaleCode::ZhCn => "zh_CN",
            LocaleCode::ZhTw => "zh_TW",
            LocaleCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "de_DE", "en_CA", "en_UK", "en_US", "es_ES", "fr_CA", "fr_FR", "id_ID", "it_IT", "ja_JP", "ko_KR", "pt_BR", "tr_TR", "zh_CN", "zh_TW",
        ]
    }
}
impl ::std::convert::AsRef<str> for LocaleCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl LocaleCode {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for LocaleCode {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            LocaleCode::DeDe => write!(f, "de_DE"),
            LocaleCode::EnCa => write!(f, "en_CA"),
            LocaleCode::EnUk => write!(f, "en_UK"),
            LocaleCode::EnUs => write!(f, "en_US"),
            LocaleCode::EsEs => write!(f, "es_ES"),
            LocaleCode::FrCa => write!(f, "fr_CA"),
            LocaleCode::FrFr => write!(f, "fr_FR"),
            LocaleCode::IdId => write!(f, "id_ID"),
            LocaleCode::ItIt => write!(f, "it_IT"),
            LocaleCode::JaJp => write!(f, "ja_JP"),
            LocaleCode::KoKr => write!(f, "ko_KR"),
            LocaleCode::PtBr => write!(f, "pt_BR"),
            LocaleCode::TrTr => write!(f, "tr_TR"),
            LocaleCode::ZhCn => write!(f, "zh_CN"),
            LocaleCode::ZhTw => write!(f, "zh_TW"),
            LocaleCode::Unknown(value) => write!(f, "{value}"),
        }
    }
}
