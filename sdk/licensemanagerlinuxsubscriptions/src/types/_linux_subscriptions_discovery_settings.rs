// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Lists the settings defined for discovering Linux subscriptions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LinuxSubscriptionsDiscoverySettings {
    /// <p>The Regions in which to discover data for Linux subscriptions.</p>
    pub source_regions: ::std::vec::Vec<::std::string::String>,
    /// <p>Details if you have enabled resource discovery across your accounts in Organizations.</p>
    pub organization_integration: crate::types::OrganizationIntegration,
}
impl LinuxSubscriptionsDiscoverySettings {
    /// <p>The Regions in which to discover data for Linux subscriptions.</p>
    pub fn source_regions(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.source_regions.deref()
    }
    /// <p>Details if you have enabled resource discovery across your accounts in Organizations.</p>
    pub fn organization_integration(&self) -> &crate::types::OrganizationIntegration {
        &self.organization_integration
    }
}
impl LinuxSubscriptionsDiscoverySettings {
    /// Creates a new builder-style object to manufacture [`LinuxSubscriptionsDiscoverySettings`](crate::types::LinuxSubscriptionsDiscoverySettings).
    pub fn builder() -> crate::types::builders::LinuxSubscriptionsDiscoverySettingsBuilder {
        crate::types::builders::LinuxSubscriptionsDiscoverySettingsBuilder::default()
    }
}

/// A builder for [`LinuxSubscriptionsDiscoverySettings`](crate::types::LinuxSubscriptionsDiscoverySettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LinuxSubscriptionsDiscoverySettingsBuilder {
    pub(crate) source_regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) organization_integration: ::std::option::Option<crate::types::OrganizationIntegration>,
}
impl LinuxSubscriptionsDiscoverySettingsBuilder {
    /// Appends an item to `source_regions`.
    ///
    /// To override the contents of this collection use [`set_source_regions`](Self::set_source_regions).
    ///
    /// <p>The Regions in which to discover data for Linux subscriptions.</p>
    pub fn source_regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.source_regions.unwrap_or_default();
        v.push(input.into());
        self.source_regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Regions in which to discover data for Linux subscriptions.</p>
    pub fn set_source_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.source_regions = input;
        self
    }
    /// <p>The Regions in which to discover data for Linux subscriptions.</p>
    pub fn get_source_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.source_regions
    }
    /// <p>Details if you have enabled resource discovery across your accounts in Organizations.</p>
    /// This field is required.
    pub fn organization_integration(mut self, input: crate::types::OrganizationIntegration) -> Self {
        self.organization_integration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details if you have enabled resource discovery across your accounts in Organizations.</p>
    pub fn set_organization_integration(mut self, input: ::std::option::Option<crate::types::OrganizationIntegration>) -> Self {
        self.organization_integration = input;
        self
    }
    /// <p>Details if you have enabled resource discovery across your accounts in Organizations.</p>
    pub fn get_organization_integration(&self) -> &::std::option::Option<crate::types::OrganizationIntegration> {
        &self.organization_integration
    }
    /// Consumes the builder and constructs a [`LinuxSubscriptionsDiscoverySettings`](crate::types::LinuxSubscriptionsDiscoverySettings).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_regions`](crate::types::builders::LinuxSubscriptionsDiscoverySettingsBuilder::source_regions)
    /// - [`organization_integration`](crate::types::builders::LinuxSubscriptionsDiscoverySettingsBuilder::organization_integration)
    pub fn build(self) -> ::std::result::Result<crate::types::LinuxSubscriptionsDiscoverySettings, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::LinuxSubscriptionsDiscoverySettings {
            source_regions: self.source_regions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_regions",
                    "source_regions was not specified but it is required when building LinuxSubscriptionsDiscoverySettings",
                )
            })?,
            organization_integration: self.organization_integration.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "organization_integration",
                    "organization_integration was not specified but it is required when building LinuxSubscriptionsDiscoverySettings",
                )
            })?,
        })
    }
}
