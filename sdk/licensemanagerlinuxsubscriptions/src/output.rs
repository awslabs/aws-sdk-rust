// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateServiceSettingsOutput {
    /// <p>Lists if discovery has been enabled for Linux subscriptions.</p>
    #[doc(hidden)]
    pub linux_subscriptions_discovery:
        std::option::Option<crate::model::LinuxSubscriptionsDiscovery>,
    /// <p>The settings defined for Linux subscriptions discovery. The settings include if Organizations integration has been enabled, and which Regions data will be aggregated from.</p>
    #[doc(hidden)]
    pub linux_subscriptions_discovery_settings:
        std::option::Option<crate::model::LinuxSubscriptionsDiscoverySettings>,
    /// <p>Indicates the status of Linux subscriptions settings being applied.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::Status>,
    /// <p>A message which details the Linux subscriptions service settings current status.</p>
    #[doc(hidden)]
    pub status_message:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The Region in which License Manager displays the aggregated data for Linux subscriptions.</p>
    #[doc(hidden)]
    pub home_regions: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl UpdateServiceSettingsOutput {
    /// <p>Lists if discovery has been enabled for Linux subscriptions.</p>
    pub fn linux_subscriptions_discovery(
        &self,
    ) -> std::option::Option<&crate::model::LinuxSubscriptionsDiscovery> {
        self.linux_subscriptions_discovery.as_ref()
    }
    /// <p>The settings defined for Linux subscriptions discovery. The settings include if Organizations integration has been enabled, and which Regions data will be aggregated from.</p>
    pub fn linux_subscriptions_discovery_settings(
        &self,
    ) -> std::option::Option<&crate::model::LinuxSubscriptionsDiscoverySettings> {
        self.linux_subscriptions_discovery_settings.as_ref()
    }
    /// <p>Indicates the status of Linux subscriptions settings being applied.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::Status> {
        self.status.as_ref()
    }
    /// <p>A message which details the Linux subscriptions service settings current status.</p>
    pub fn status_message(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.status_message.as_ref()
    }
    /// <p>The Region in which License Manager displays the aggregated data for Linux subscriptions.</p>
    pub fn home_regions(&self) -> std::option::Option<&[std::string::String]> {
        self.home_regions.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateServiceSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`UpdateServiceSettingsOutput`](crate::output::UpdateServiceSettingsOutput).
pub mod update_service_settings_output {

    /// A builder for [`UpdateServiceSettingsOutput`](crate::output::UpdateServiceSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) linux_subscriptions_discovery:
            std::option::Option<crate::model::LinuxSubscriptionsDiscovery>,
        pub(crate) linux_subscriptions_discovery_settings:
            std::option::Option<crate::model::LinuxSubscriptionsDiscoverySettings>,
        pub(crate) status: std::option::Option<crate::model::Status>,
        pub(crate) status_message: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        pub(crate) home_regions: std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Lists if discovery has been enabled for Linux subscriptions.</p>
        pub fn linux_subscriptions_discovery(
            mut self,
            input: crate::model::LinuxSubscriptionsDiscovery,
        ) -> Self {
            self.linux_subscriptions_discovery = Some(input);
            self
        }
        /// <p>Lists if discovery has been enabled for Linux subscriptions.</p>
        pub fn set_linux_subscriptions_discovery(
            mut self,
            input: std::option::Option<crate::model::LinuxSubscriptionsDiscovery>,
        ) -> Self {
            self.linux_subscriptions_discovery = input;
            self
        }
        /// <p>The settings defined for Linux subscriptions discovery. The settings include if Organizations integration has been enabled, and which Regions data will be aggregated from.</p>
        pub fn linux_subscriptions_discovery_settings(
            mut self,
            input: crate::model::LinuxSubscriptionsDiscoverySettings,
        ) -> Self {
            self.linux_subscriptions_discovery_settings = Some(input);
            self
        }
        /// <p>The settings defined for Linux subscriptions discovery. The settings include if Organizations integration has been enabled, and which Regions data will be aggregated from.</p>
        pub fn set_linux_subscriptions_discovery_settings(
            mut self,
            input: std::option::Option<crate::model::LinuxSubscriptionsDiscoverySettings>,
        ) -> Self {
            self.linux_subscriptions_discovery_settings = input;
            self
        }
        /// <p>Indicates the status of Linux subscriptions settings being applied.</p>
        pub fn status(mut self, input: crate::model::Status) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>Indicates the status of Linux subscriptions settings being applied.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::Status>) -> Self {
            self.status = input;
            self
        }
        /// Adds a key-value pair to `status_message`.
        ///
        /// To override the contents of this collection use [`set_status_message`](Self::set_status_message).
        ///
        /// <p>A message which details the Linux subscriptions service settings current status.</p>
        pub fn status_message(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.status_message.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.status_message = Some(hash_map);
            self
        }
        /// <p>A message which details the Linux subscriptions service settings current status.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// Appends an item to `home_regions`.
        ///
        /// To override the contents of this collection use [`set_home_regions`](Self::set_home_regions).
        ///
        /// <p>The Region in which License Manager displays the aggregated data for Linux subscriptions.</p>
        pub fn home_regions(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.home_regions.unwrap_or_default();
            v.push(input.into());
            self.home_regions = Some(v);
            self
        }
        /// <p>The Region in which License Manager displays the aggregated data for Linux subscriptions.</p>
        pub fn set_home_regions(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.home_regions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateServiceSettingsOutput`](crate::output::UpdateServiceSettingsOutput).
        pub fn build(self) -> crate::output::UpdateServiceSettingsOutput {
            crate::output::UpdateServiceSettingsOutput {
                linux_subscriptions_discovery: self.linux_subscriptions_discovery,
                linux_subscriptions_discovery_settings: self.linux_subscriptions_discovery_settings,
                status: self.status,
                status_message: self.status_message,
                home_regions: self.home_regions,
                _request_id: self._request_id,
            }
        }
    }
}
impl UpdateServiceSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateServiceSettingsOutput`](crate::output::UpdateServiceSettingsOutput).
    pub fn builder() -> crate::output::update_service_settings_output::Builder {
        crate::output::update_service_settings_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListLinuxSubscriptionsOutput {
    /// <p>An array that contains subscription objects.</p>
    #[doc(hidden)]
    pub subscriptions: std::option::Option<std::vec::Vec<crate::model::Subscription>>,
    /// <p>Token for the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListLinuxSubscriptionsOutput {
    /// <p>An array that contains subscription objects.</p>
    pub fn subscriptions(&self) -> std::option::Option<&[crate::model::Subscription]> {
        self.subscriptions.as_deref()
    }
    /// <p>Token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListLinuxSubscriptionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListLinuxSubscriptionsOutput`](crate::output::ListLinuxSubscriptionsOutput).
pub mod list_linux_subscriptions_output {

    /// A builder for [`ListLinuxSubscriptionsOutput`](crate::output::ListLinuxSubscriptionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subscriptions: std::option::Option<std::vec::Vec<crate::model::Subscription>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `subscriptions`.
        ///
        /// To override the contents of this collection use [`set_subscriptions`](Self::set_subscriptions).
        ///
        /// <p>An array that contains subscription objects.</p>
        pub fn subscriptions(mut self, input: crate::model::Subscription) -> Self {
            let mut v = self.subscriptions.unwrap_or_default();
            v.push(input);
            self.subscriptions = Some(v);
            self
        }
        /// <p>An array that contains subscription objects.</p>
        pub fn set_subscriptions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Subscription>>,
        ) -> Self {
            self.subscriptions = input;
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListLinuxSubscriptionsOutput`](crate::output::ListLinuxSubscriptionsOutput).
        pub fn build(self) -> crate::output::ListLinuxSubscriptionsOutput {
            crate::output::ListLinuxSubscriptionsOutput {
                subscriptions: self.subscriptions,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListLinuxSubscriptionsOutput {
    /// Creates a new builder-style object to manufacture [`ListLinuxSubscriptionsOutput`](crate::output::ListLinuxSubscriptionsOutput).
    pub fn builder() -> crate::output::list_linux_subscriptions_output::Builder {
        crate::output::list_linux_subscriptions_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListLinuxSubscriptionInstancesOutput {
    /// <p>An array that contains instance objects.</p>
    #[doc(hidden)]
    pub instances: std::option::Option<std::vec::Vec<crate::model::Instance>>,
    /// <p>Token for the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListLinuxSubscriptionInstancesOutput {
    /// <p>An array that contains instance objects.</p>
    pub fn instances(&self) -> std::option::Option<&[crate::model::Instance]> {
        self.instances.as_deref()
    }
    /// <p>Token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListLinuxSubscriptionInstancesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`ListLinuxSubscriptionInstancesOutput`](crate::output::ListLinuxSubscriptionInstancesOutput).
pub mod list_linux_subscription_instances_output {

    /// A builder for [`ListLinuxSubscriptionInstancesOutput`](crate::output::ListLinuxSubscriptionInstancesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) instances: std::option::Option<std::vec::Vec<crate::model::Instance>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `instances`.
        ///
        /// To override the contents of this collection use [`set_instances`](Self::set_instances).
        ///
        /// <p>An array that contains instance objects.</p>
        pub fn instances(mut self, input: crate::model::Instance) -> Self {
            let mut v = self.instances.unwrap_or_default();
            v.push(input);
            self.instances = Some(v);
            self
        }
        /// <p>An array that contains instance objects.</p>
        pub fn set_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Instance>>,
        ) -> Self {
            self.instances = input;
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListLinuxSubscriptionInstancesOutput`](crate::output::ListLinuxSubscriptionInstancesOutput).
        pub fn build(self) -> crate::output::ListLinuxSubscriptionInstancesOutput {
            crate::output::ListLinuxSubscriptionInstancesOutput {
                instances: self.instances,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}
impl ListLinuxSubscriptionInstancesOutput {
    /// Creates a new builder-style object to manufacture [`ListLinuxSubscriptionInstancesOutput`](crate::output::ListLinuxSubscriptionInstancesOutput).
    pub fn builder() -> crate::output::list_linux_subscription_instances_output::Builder {
        crate::output::list_linux_subscription_instances_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetServiceSettingsOutput {
    /// <p>Lists if discovery has been enabled for Linux subscriptions.</p>
    #[doc(hidden)]
    pub linux_subscriptions_discovery:
        std::option::Option<crate::model::LinuxSubscriptionsDiscovery>,
    /// <p>Lists the settings defined for Linux subscriptions discovery. The settings include if Organizations integration has been enabled, and which Regions data will be aggregated from.</p>
    #[doc(hidden)]
    pub linux_subscriptions_discovery_settings:
        std::option::Option<crate::model::LinuxSubscriptionsDiscoverySettings>,
    /// <p>Indicates the status of Linux subscriptions settings being applied.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::model::Status>,
    /// <p>A message which details the Linux subscriptions service settings current status.</p>
    #[doc(hidden)]
    pub status_message:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The Region in which License Manager displays the aggregated data for Linux subscriptions.</p>
    #[doc(hidden)]
    pub home_regions: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl GetServiceSettingsOutput {
    /// <p>Lists if discovery has been enabled for Linux subscriptions.</p>
    pub fn linux_subscriptions_discovery(
        &self,
    ) -> std::option::Option<&crate::model::LinuxSubscriptionsDiscovery> {
        self.linux_subscriptions_discovery.as_ref()
    }
    /// <p>Lists the settings defined for Linux subscriptions discovery. The settings include if Organizations integration has been enabled, and which Regions data will be aggregated from.</p>
    pub fn linux_subscriptions_discovery_settings(
        &self,
    ) -> std::option::Option<&crate::model::LinuxSubscriptionsDiscoverySettings> {
        self.linux_subscriptions_discovery_settings.as_ref()
    }
    /// <p>Indicates the status of Linux subscriptions settings being applied.</p>
    pub fn status(&self) -> std::option::Option<&crate::model::Status> {
        self.status.as_ref()
    }
    /// <p>A message which details the Linux subscriptions service settings current status.</p>
    pub fn status_message(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.status_message.as_ref()
    }
    /// <p>The Region in which License Manager displays the aggregated data for Linux subscriptions.</p>
    pub fn home_regions(&self) -> std::option::Option<&[std::string::String]> {
        self.home_regions.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetServiceSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
/// See [`GetServiceSettingsOutput`](crate::output::GetServiceSettingsOutput).
pub mod get_service_settings_output {

    /// A builder for [`GetServiceSettingsOutput`](crate::output::GetServiceSettingsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) linux_subscriptions_discovery:
            std::option::Option<crate::model::LinuxSubscriptionsDiscovery>,
        pub(crate) linux_subscriptions_discovery_settings:
            std::option::Option<crate::model::LinuxSubscriptionsDiscoverySettings>,
        pub(crate) status: std::option::Option<crate::model::Status>,
        pub(crate) status_message: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
        pub(crate) home_regions: std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Lists if discovery has been enabled for Linux subscriptions.</p>
        pub fn linux_subscriptions_discovery(
            mut self,
            input: crate::model::LinuxSubscriptionsDiscovery,
        ) -> Self {
            self.linux_subscriptions_discovery = Some(input);
            self
        }
        /// <p>Lists if discovery has been enabled for Linux subscriptions.</p>
        pub fn set_linux_subscriptions_discovery(
            mut self,
            input: std::option::Option<crate::model::LinuxSubscriptionsDiscovery>,
        ) -> Self {
            self.linux_subscriptions_discovery = input;
            self
        }
        /// <p>Lists the settings defined for Linux subscriptions discovery. The settings include if Organizations integration has been enabled, and which Regions data will be aggregated from.</p>
        pub fn linux_subscriptions_discovery_settings(
            mut self,
            input: crate::model::LinuxSubscriptionsDiscoverySettings,
        ) -> Self {
            self.linux_subscriptions_discovery_settings = Some(input);
            self
        }
        /// <p>Lists the settings defined for Linux subscriptions discovery. The settings include if Organizations integration has been enabled, and which Regions data will be aggregated from.</p>
        pub fn set_linux_subscriptions_discovery_settings(
            mut self,
            input: std::option::Option<crate::model::LinuxSubscriptionsDiscoverySettings>,
        ) -> Self {
            self.linux_subscriptions_discovery_settings = input;
            self
        }
        /// <p>Indicates the status of Linux subscriptions settings being applied.</p>
        pub fn status(mut self, input: crate::model::Status) -> Self {
            self.status = Some(input);
            self
        }
        /// <p>Indicates the status of Linux subscriptions settings being applied.</p>
        pub fn set_status(mut self, input: std::option::Option<crate::model::Status>) -> Self {
            self.status = input;
            self
        }
        /// Adds a key-value pair to `status_message`.
        ///
        /// To override the contents of this collection use [`set_status_message`](Self::set_status_message).
        ///
        /// <p>A message which details the Linux subscriptions service settings current status.</p>
        pub fn status_message(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            let mut hash_map = self.status_message.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.status_message = Some(hash_map);
            self
        }
        /// <p>A message which details the Linux subscriptions service settings current status.</p>
        pub fn set_status_message(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.status_message = input;
            self
        }
        /// Appends an item to `home_regions`.
        ///
        /// To override the contents of this collection use [`set_home_regions`](Self::set_home_regions).
        ///
        /// <p>The Region in which License Manager displays the aggregated data for Linux subscriptions.</p>
        pub fn home_regions(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.home_regions.unwrap_or_default();
            v.push(input.into());
            self.home_regions = Some(v);
            self
        }
        /// <p>The Region in which License Manager displays the aggregated data for Linux subscriptions.</p>
        pub fn set_home_regions(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.home_regions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`GetServiceSettingsOutput`](crate::output::GetServiceSettingsOutput).
        pub fn build(self) -> crate::output::GetServiceSettingsOutput {
            crate::output::GetServiceSettingsOutput {
                linux_subscriptions_discovery: self.linux_subscriptions_discovery,
                linux_subscriptions_discovery_settings: self.linux_subscriptions_discovery_settings,
                status: self.status,
                status_message: self.status_message,
                home_regions: self.home_regions,
                _request_id: self._request_id,
            }
        }
    }
}
impl GetServiceSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetServiceSettingsOutput`](crate::output::GetServiceSettingsOutput).
    pub fn builder() -> crate::output::get_service_settings_output::Builder {
        crate::output::get_service_settings_output::Builder::default()
    }
}
