// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `GetServiceSettings`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_service_settings`](crate::client::fluent_builders::GetServiceSettings).
///
/// `ParseStrictResponse` impl for `GetServiceSettings`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetServiceSettings {
    _private: (),
}
impl GetServiceSettings {
    /// Creates a new builder-style object to manufacture [`GetServiceSettingsInput`](crate::input::GetServiceSettingsInput).
    pub fn builder() -> crate::input::get_service_settings_input::Builder {
        crate::input::get_service_settings_input::Builder::default()
    }
    /// Creates a new `GetServiceSettings` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetServiceSettings {
    type Output = std::result::Result<
        crate::output::GetServiceSettingsOutput,
        crate::error::GetServiceSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_service_settings::de_get_service_settings_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_service_settings::de_get_service_settings_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListLinuxSubscriptionInstances`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_linux_subscription_instances`](crate::client::fluent_builders::ListLinuxSubscriptionInstances).
///
/// `ParseStrictResponse` impl for `ListLinuxSubscriptionInstances`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListLinuxSubscriptionInstances {
    _private: (),
}
impl ListLinuxSubscriptionInstances {
    /// Creates a new builder-style object to manufacture [`ListLinuxSubscriptionInstancesInput`](crate::input::ListLinuxSubscriptionInstancesInput).
    pub fn builder() -> crate::input::list_linux_subscription_instances_input::Builder {
        crate::input::list_linux_subscription_instances_input::Builder::default()
    }
    /// Creates a new `ListLinuxSubscriptionInstances` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListLinuxSubscriptionInstances {
    type Output = std::result::Result<
        crate::output::ListLinuxSubscriptionInstancesOutput,
        crate::error::ListLinuxSubscriptionInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_linux_subscription_instances::de_list_linux_subscription_instances_http_error(response)
        } else {
            crate::protocol_serde::shape_list_linux_subscription_instances::de_list_linux_subscription_instances_http_response(response)
        }
    }
}

/// Operation shape for `ListLinuxSubscriptions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_linux_subscriptions`](crate::client::fluent_builders::ListLinuxSubscriptions).
///
/// `ParseStrictResponse` impl for `ListLinuxSubscriptions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListLinuxSubscriptions {
    _private: (),
}
impl ListLinuxSubscriptions {
    /// Creates a new builder-style object to manufacture [`ListLinuxSubscriptionsInput`](crate::input::ListLinuxSubscriptionsInput).
    pub fn builder() -> crate::input::list_linux_subscriptions_input::Builder {
        crate::input::list_linux_subscriptions_input::Builder::default()
    }
    /// Creates a new `ListLinuxSubscriptions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListLinuxSubscriptions {
    type Output = std::result::Result<
        crate::output::ListLinuxSubscriptionsOutput,
        crate::error::ListLinuxSubscriptionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_linux_subscriptions::de_list_linux_subscriptions_http_error(response)
        } else {
            crate::protocol_serde::shape_list_linux_subscriptions::de_list_linux_subscriptions_http_response(response)
        }
    }
}

/// Operation shape for `UpdateServiceSettings`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_service_settings`](crate::client::fluent_builders::UpdateServiceSettings).
///
/// `ParseStrictResponse` impl for `UpdateServiceSettings`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateServiceSettings {
    _private: (),
}
impl UpdateServiceSettings {
    /// Creates a new builder-style object to manufacture [`UpdateServiceSettingsInput`](crate::input::UpdateServiceSettingsInput).
    pub fn builder() -> crate::input::update_service_settings_input::Builder {
        crate::input::update_service_settings_input::Builder::default()
    }
    /// Creates a new `UpdateServiceSettings` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateServiceSettings {
    type Output = std::result::Result<
        crate::output::UpdateServiceSettingsOutput,
        crate::error::UpdateServiceSettingsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_service_settings::de_update_service_settings_http_error(response)
        } else {
            crate::protocol_serde::shape_update_service_settings::de_update_service_settings_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
