// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetServiceSettingsOutput {
    /// <p>Lists if discovery has been enabled for Linux subscriptions.</p>
    #[doc(hidden)]
    pub linux_subscriptions_discovery:
        std::option::Option<crate::types::LinuxSubscriptionsDiscovery>,
    /// <p>Lists the settings defined for Linux subscriptions discovery. The settings include if Organizations integration has been enabled, and which Regions data will be aggregated from.</p>
    #[doc(hidden)]
    pub linux_subscriptions_discovery_settings:
        std::option::Option<crate::types::LinuxSubscriptionsDiscoverySettings>,
    /// <p>Indicates the status of Linux subscriptions settings being applied.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::Status>,
    /// <p>A message which details the Linux subscriptions service settings current status.</p>
    #[doc(hidden)]
    pub status_message:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The Region in which License Manager displays the aggregated data for Linux subscriptions.</p>
    #[doc(hidden)]
    pub home_regions: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl GetServiceSettingsOutput {
    /// <p>Lists if discovery has been enabled for Linux subscriptions.</p>
    pub fn linux_subscriptions_discovery(
        &self,
    ) -> std::option::Option<&crate::types::LinuxSubscriptionsDiscovery> {
        self.linux_subscriptions_discovery.as_ref()
    }
    /// <p>Lists the settings defined for Linux subscriptions discovery. The settings include if Organizations integration has been enabled, and which Regions data will be aggregated from.</p>
    pub fn linux_subscriptions_discovery_settings(
        &self,
    ) -> std::option::Option<&crate::types::LinuxSubscriptionsDiscoverySettings> {
        self.linux_subscriptions_discovery_settings.as_ref()
    }
    /// <p>Indicates the status of Linux subscriptions settings being applied.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::Status> {
        self.status.as_ref()
    }
    /// <p>A message which details the Linux subscriptions service settings current status.</p>
    pub fn status_message(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.status_message.as_ref()
    }
    /// <p>The Region in which License Manager displays the aggregated data for Linux subscriptions.</p>
    pub fn home_regions(&self) -> std::option::Option<&[std::string::String]> {
        self.home_regions.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetServiceSettingsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetServiceSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetServiceSettingsOutput`](crate::operation::get_service_settings::GetServiceSettingsOutput).
    pub fn builder(
    ) -> crate::operation::get_service_settings::builders::GetServiceSettingsOutputBuilder {
        crate::operation::get_service_settings::builders::GetServiceSettingsOutputBuilder::default()
    }
}

/// A builder for [`GetServiceSettingsOutput`](crate::operation::get_service_settings::GetServiceSettingsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetServiceSettingsOutputBuilder {
    pub(crate) linux_subscriptions_discovery:
        std::option::Option<crate::types::LinuxSubscriptionsDiscovery>,
    pub(crate) linux_subscriptions_discovery_settings:
        std::option::Option<crate::types::LinuxSubscriptionsDiscoverySettings>,
    pub(crate) status: std::option::Option<crate::types::Status>,
    pub(crate) status_message:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) home_regions: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl GetServiceSettingsOutputBuilder {
    /// <p>Lists if discovery has been enabled for Linux subscriptions.</p>
    pub fn linux_subscriptions_discovery(
        mut self,
        input: crate::types::LinuxSubscriptionsDiscovery,
    ) -> Self {
        self.linux_subscriptions_discovery = Some(input);
        self
    }
    /// <p>Lists if discovery has been enabled for Linux subscriptions.</p>
    pub fn set_linux_subscriptions_discovery(
        mut self,
        input: std::option::Option<crate::types::LinuxSubscriptionsDiscovery>,
    ) -> Self {
        self.linux_subscriptions_discovery = input;
        self
    }
    /// <p>Lists the settings defined for Linux subscriptions discovery. The settings include if Organizations integration has been enabled, and which Regions data will be aggregated from.</p>
    pub fn linux_subscriptions_discovery_settings(
        mut self,
        input: crate::types::LinuxSubscriptionsDiscoverySettings,
    ) -> Self {
        self.linux_subscriptions_discovery_settings = Some(input);
        self
    }
    /// <p>Lists the settings defined for Linux subscriptions discovery. The settings include if Organizations integration has been enabled, and which Regions data will be aggregated from.</p>
    pub fn set_linux_subscriptions_discovery_settings(
        mut self,
        input: std::option::Option<crate::types::LinuxSubscriptionsDiscoverySettings>,
    ) -> Self {
        self.linux_subscriptions_discovery_settings = input;
        self
    }
    /// <p>Indicates the status of Linux subscriptions settings being applied.</p>
    pub fn status(mut self, input: crate::types::Status) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Indicates the status of Linux subscriptions settings being applied.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::Status>) -> Self {
        self.status = input;
        self
    }
    /// Adds a key-value pair to `status_message`.
    ///
    /// To override the contents of this collection use [`set_status_message`](Self::set_status_message).
    ///
    /// <p>A message which details the Linux subscriptions service settings current status.</p>
    pub fn status_message(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.status_message.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.status_message = Some(hash_map);
        self
    }
    /// <p>A message which details the Linux subscriptions service settings current status.</p>
    pub fn set_status_message(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.status_message = input;
        self
    }
    /// Appends an item to `home_regions`.
    ///
    /// To override the contents of this collection use [`set_home_regions`](Self::set_home_regions).
    ///
    /// <p>The Region in which License Manager displays the aggregated data for Linux subscriptions.</p>
    pub fn home_regions(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.home_regions.unwrap_or_default();
        v.push(input.into());
        self.home_regions = Some(v);
        self
    }
    /// <p>The Region in which License Manager displays the aggregated data for Linux subscriptions.</p>
    pub fn set_home_regions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.home_regions = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetServiceSettingsOutput`](crate::operation::get_service_settings::GetServiceSettingsOutput).
    pub fn build(self) -> crate::operation::get_service_settings::GetServiceSettingsOutput {
        crate::operation::get_service_settings::GetServiceSettingsOutput {
            linux_subscriptions_discovery: self.linux_subscriptions_discovery,
            linux_subscriptions_discovery_settings: self.linux_subscriptions_discovery_settings,
            status: self.status,
            status_message: self.status_message,
            home_regions: self.home_regions,
            _request_id: self._request_id,
        }
    }
}
