// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// NextToken length limit is half of ddb accepted limit. Increase this limit if parameters in request increases.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListLinuxSubscriptionInstancesInput {
    /// <p>An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify. For example, you can filter by the name of <code>AmiID</code> with an optional operator to see subscriptions that match, partially match, or don't match a certain Amazon Machine Image (AMI) ID.</p>
    /// <p>The valid names for this filter are:</p>
    /// <ul>
    /// <li> <p> <code>AmiID</code> </p> </li>
    /// <li> <p> <code>InstanceID</code> </p> </li>
    /// <li> <p> <code>AccountID</code> </p> </li>
    /// <li> <p> <code>Status</code> </p> </li>
    /// <li> <p> <code>Region</code> </p> </li>
    /// <li> <p> <code>UsageOperation</code> </p> </li>
    /// <li> <p> <code>ProductCode</code> </p> </li>
    /// <li> <p> <code>InstanceType</code> </p> </li>
    /// </ul>
    /// <p>The valid Operators for this filter are:</p>
    /// <ul>
    /// <li> <p> <code>contains</code> </p> </li>
    /// <li> <p> <code>equals</code> </p> </li>
    /// <li> <p> <code>Notequal</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    /// <p>Maximum number of results to return in a single call.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>Token for the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListLinuxSubscriptionInstancesInput {
    /// <p>An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify. For example, you can filter by the name of <code>AmiID</code> with an optional operator to see subscriptions that match, partially match, or don't match a certain Amazon Machine Image (AMI) ID.</p>
    /// <p>The valid names for this filter are:</p>
    /// <ul>
    /// <li> <p> <code>AmiID</code> </p> </li>
    /// <li> <p> <code>InstanceID</code> </p> </li>
    /// <li> <p> <code>AccountID</code> </p> </li>
    /// <li> <p> <code>Status</code> </p> </li>
    /// <li> <p> <code>Region</code> </p> </li>
    /// <li> <p> <code>UsageOperation</code> </p> </li>
    /// <li> <p> <code>ProductCode</code> </p> </li>
    /// <li> <p> <code>InstanceType</code> </p> </li>
    /// </ul>
    /// <p>The valid Operators for this filter are:</p>
    /// <ul>
    /// <li> <p> <code>contains</code> </p> </li>
    /// <li> <p> <code>equals</code> </p> </li>
    /// <li> <p> <code>Notequal</code> </p> </li>
    /// </ul>
    pub fn filters(&self) -> std::option::Option<&[crate::types::Filter]> {
        self.filters.as_deref()
    }
    /// <p>Maximum number of results to return in a single call.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>Token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListLinuxSubscriptionInstancesInput {
    /// Creates a new builder-style object to manufacture [`ListLinuxSubscriptionInstancesInput`](crate::operation::list_linux_subscription_instances::ListLinuxSubscriptionInstancesInput).
    pub fn builder() -> crate::operation::list_linux_subscription_instances::builders::ListLinuxSubscriptionInstancesInputBuilder{
        crate::operation::list_linux_subscription_instances::builders::ListLinuxSubscriptionInstancesInputBuilder::default()
    }
}

/// A builder for [`ListLinuxSubscriptionInstancesInput`](crate::operation::list_linux_subscription_instances::ListLinuxSubscriptionInstancesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListLinuxSubscriptionInstancesInputBuilder {
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListLinuxSubscriptionInstancesInputBuilder {
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify. For example, you can filter by the name of <code>AmiID</code> with an optional operator to see subscriptions that match, partially match, or don't match a certain Amazon Machine Image (AMI) ID.</p>
    /// <p>The valid names for this filter are:</p>
    /// <ul>
    /// <li> <p> <code>AmiID</code> </p> </li>
    /// <li> <p> <code>InstanceID</code> </p> </li>
    /// <li> <p> <code>AccountID</code> </p> </li>
    /// <li> <p> <code>Status</code> </p> </li>
    /// <li> <p> <code>Region</code> </p> </li>
    /// <li> <p> <code>UsageOperation</code> </p> </li>
    /// <li> <p> <code>ProductCode</code> </p> </li>
    /// <li> <p> <code>InstanceType</code> </p> </li>
    /// </ul>
    /// <p>The valid Operators for this filter are:</p>
    /// <ul>
    /// <li> <p> <code>contains</code> </p> </li>
    /// <li> <p> <code>equals</code> </p> </li>
    /// <li> <p> <code>Notequal</code> </p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>An array of structures that you can use to filter the results to those that match one or more sets of key-value pairs that you specify. For example, you can filter by the name of <code>AmiID</code> with an optional operator to see subscriptions that match, partially match, or don't match a certain Amazon Machine Image (AMI) ID.</p>
    /// <p>The valid names for this filter are:</p>
    /// <ul>
    /// <li> <p> <code>AmiID</code> </p> </li>
    /// <li> <p> <code>InstanceID</code> </p> </li>
    /// <li> <p> <code>AccountID</code> </p> </li>
    /// <li> <p> <code>Status</code> </p> </li>
    /// <li> <p> <code>Region</code> </p> </li>
    /// <li> <p> <code>UsageOperation</code> </p> </li>
    /// <li> <p> <code>ProductCode</code> </p> </li>
    /// <li> <p> <code>InstanceType</code> </p> </li>
    /// </ul>
    /// <p>The valid Operators for this filter are:</p>
    /// <ul>
    /// <li> <p> <code>contains</code> </p> </li>
    /// <li> <p> <code>equals</code> </p> </li>
    /// <li> <p> <code>Notequal</code> </p> </li>
    /// </ul>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>Maximum number of results to return in a single call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>Maximum number of results to return in a single call.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Token for the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>Token for the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListLinuxSubscriptionInstancesInput`](crate::operation::list_linux_subscription_instances::ListLinuxSubscriptionInstancesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_linux_subscription_instances::ListLinuxSubscriptionInstancesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_linux_subscription_instances::ListLinuxSubscriptionInstancesInput {
                filters: self.filters
                ,
                max_results: self.max_results
                ,
                next_token: self.next_token
                ,
            }
        )
    }
}
