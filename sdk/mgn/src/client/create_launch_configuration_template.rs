// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateLaunchConfigurationTemplate`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`post_launch_actions(PostLaunchActions)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::post_launch_actions) / [`set_post_launch_actions(Option<PostLaunchActions>)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::set_post_launch_actions): <p>Launch configuration template post launch actions.</p>
    ///   - [`enable_map_auto_tagging(bool)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::enable_map_auto_tagging) / [`set_enable_map_auto_tagging(Option<bool>)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::set_enable_map_auto_tagging): <p>Enable map auto tagging.</p>
    ///   - [`map_auto_tagging_mpe_id(impl Into<String>)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::map_auto_tagging_mpe_id) / [`set_map_auto_tagging_mpe_id(Option<String>)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::set_map_auto_tagging_mpe_id): <p>Launch configuration template map auto tagging MPE ID.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::set_tags): <p>Request to associate tags during creation of a Launch Configuration Template.</p>
    ///   - [`launch_disposition(LaunchDisposition)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::launch_disposition) / [`set_launch_disposition(Option<LaunchDisposition>)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::set_launch_disposition): <p>Launch disposition.</p>
    ///   - [`target_instance_type_right_sizing_method(TargetInstanceTypeRightSizingMethod)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::target_instance_type_right_sizing_method) / [`set_target_instance_type_right_sizing_method(Option<TargetInstanceTypeRightSizingMethod>)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::set_target_instance_type_right_sizing_method): <p>Target instance type right-sizing method.</p>
    ///   - [`copy_private_ip(bool)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::copy_private_ip) / [`set_copy_private_ip(Option<bool>)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::set_copy_private_ip): <p>Copy private Ip.</p>
    ///   - [`associate_public_ip_address(bool)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::associate_public_ip_address) / [`set_associate_public_ip_address(Option<bool>)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::set_associate_public_ip_address): <p>Associate public Ip address.</p>
    ///   - [`copy_tags(bool)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::copy_tags) / [`set_copy_tags(Option<bool>)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::set_copy_tags): <p>Copy tags.</p>
    ///   - [`licensing(Licensing)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::licensing) / [`set_licensing(Option<Licensing>)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::set_licensing): <p>Configure Licensing.</p>
    ///   - [`boot_mode(BootMode)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::boot_mode) / [`set_boot_mode(Option<BootMode>)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::set_boot_mode): <p>Launch configuration template boot mode.</p>
    ///   - [`small_volume_max_size(i64)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::small_volume_max_size) / [`set_small_volume_max_size(i64)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::set_small_volume_max_size): <p>Small volume maximum size.</p>
    ///   - [`small_volume_conf(LaunchTemplateDiskConf)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::small_volume_conf) / [`set_small_volume_conf(Option<LaunchTemplateDiskConf>)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::set_small_volume_conf): <p>Small volume config.</p>
    ///   - [`large_volume_conf(LaunchTemplateDiskConf)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::large_volume_conf) / [`set_large_volume_conf(Option<LaunchTemplateDiskConf>)`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate::set_large_volume_conf): <p>Large volume config.</p>
    /// - On success, responds with [`CreateLaunchConfigurationTemplateOutput`](crate::output::CreateLaunchConfigurationTemplateOutput) with field(s):
    ///   - [`launch_configuration_template_id(Option<String>)`](crate::output::CreateLaunchConfigurationTemplateOutput::launch_configuration_template_id): <p>ID of the Launch Configuration Template.</p>
    ///   - [`arn(Option<String>)`](crate::output::CreateLaunchConfigurationTemplateOutput::arn): <p>ARN of the Launch Configuration Template.</p>
    ///   - [`post_launch_actions(Option<PostLaunchActions>)`](crate::output::CreateLaunchConfigurationTemplateOutput::post_launch_actions): <p>Post Launch Actions of the Launch Configuration Template.</p>
    ///   - [`enable_map_auto_tagging(Option<bool>)`](crate::output::CreateLaunchConfigurationTemplateOutput::enable_map_auto_tagging): <p>Enable map auto tagging.</p>
    ///   - [`map_auto_tagging_mpe_id(Option<String>)`](crate::output::CreateLaunchConfigurationTemplateOutput::map_auto_tagging_mpe_id): <p>Launch configuration template map auto tagging MPE ID.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::CreateLaunchConfigurationTemplateOutput::tags): <p>Tags of the Launch Configuration Template.</p>
    ///   - [`ec2_launch_template_id(Option<String>)`](crate::output::CreateLaunchConfigurationTemplateOutput::ec2_launch_template_id): <p>EC2 launch template ID.</p>
    ///   - [`launch_disposition(Option<LaunchDisposition>)`](crate::output::CreateLaunchConfigurationTemplateOutput::launch_disposition): <p>Launch disposition.</p>
    ///   - [`target_instance_type_right_sizing_method(Option<TargetInstanceTypeRightSizingMethod>)`](crate::output::CreateLaunchConfigurationTemplateOutput::target_instance_type_right_sizing_method): <p>Target instance type right-sizing method.</p>
    ///   - [`copy_private_ip(Option<bool>)`](crate::output::CreateLaunchConfigurationTemplateOutput::copy_private_ip): <p>Copy private Ip.</p>
    ///   - [`associate_public_ip_address(Option<bool>)`](crate::output::CreateLaunchConfigurationTemplateOutput::associate_public_ip_address): <p>Associate public Ip address.</p>
    ///   - [`copy_tags(Option<bool>)`](crate::output::CreateLaunchConfigurationTemplateOutput::copy_tags): <p>Copy tags.</p>
    ///   - [`licensing(Option<Licensing>)`](crate::output::CreateLaunchConfigurationTemplateOutput::licensing): <p>Configure Licensing.</p>
    ///   - [`boot_mode(Option<BootMode>)`](crate::output::CreateLaunchConfigurationTemplateOutput::boot_mode): <p>Launch configuration template boot mode.</p>
    ///   - [`small_volume_max_size(i64)`](crate::output::CreateLaunchConfigurationTemplateOutput::small_volume_max_size): <p>Small volume maximum size.</p>
    ///   - [`small_volume_conf(Option<LaunchTemplateDiskConf>)`](crate::output::CreateLaunchConfigurationTemplateOutput::small_volume_conf): <p>Small volume config.</p>
    ///   - [`large_volume_conf(Option<LaunchTemplateDiskConf>)`](crate::output::CreateLaunchConfigurationTemplateOutput::large_volume_conf): <p>Large volume config.</p>
    /// - On failure, responds with [`SdkError<CreateLaunchConfigurationTemplateError>`](crate::error::CreateLaunchConfigurationTemplateError)
    pub fn create_launch_configuration_template(
        &self,
    ) -> crate::client::fluent_builders::CreateLaunchConfigurationTemplate {
        crate::client::fluent_builders::CreateLaunchConfigurationTemplate::new(self.handle.clone())
    }
}
