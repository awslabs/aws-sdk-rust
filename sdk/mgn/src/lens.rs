// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_job_log_items_output_next_token(
    input: &crate::output::DescribeJobLogItemsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_jobs_output_next_token(
    input: &crate::output::DescribeJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_launch_configuration_templates_output_next_token(
    input: &crate::output::DescribeLaunchConfigurationTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_replication_configuration_templates_output_next_token(
    input: &crate::output::DescribeReplicationConfigurationTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_source_servers_output_next_token(
    input: &crate::output::DescribeSourceServersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_vcenter_clients_output_next_token(
    input: &crate::output::DescribeVcenterClientsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_applications_output_next_token(
    input: &crate::output::ListApplicationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_source_server_actions_output_next_token(
    input: &crate::output::ListSourceServerActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_template_actions_output_next_token(
    input: &crate::output::ListTemplateActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_waves_output_next_token(
    input: &crate::output::ListWavesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_job_log_items_output_items(
    input: crate::output::DescribeJobLogItemsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::JobLog>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_jobs_output_items(
    input: crate::output::DescribeJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Job>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_launch_configuration_templates_output_items(
    input: crate::output::DescribeLaunchConfigurationTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::LaunchConfigurationTemplate>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_replication_configuration_templates_output_items(
    input: crate::output::DescribeReplicationConfigurationTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ReplicationConfigurationTemplate>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_source_servers_output_items(
    input: crate::output::DescribeSourceServersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SourceServer>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_vcenter_clients_output_items(
    input: crate::output::DescribeVcenterClientsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::VcenterClient>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_applications_output_items(
    input: crate::output::ListApplicationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Application>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_source_server_actions_output_items(
    input: crate::output::ListSourceServerActionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SourceServerActionDocument>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_template_actions_output_items(
    input: crate::output::ListTemplateActionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TemplateActionDocument>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_waves_output_items(
    input: crate::output::ListWavesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Wave>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
