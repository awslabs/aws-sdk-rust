// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_job_log_items_output_next_token(
    input: &crate::operation::describe_job_log_items::DescribeJobLogItemsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_jobs_output_next_token(
    input: &crate::operation::describe_jobs::DescribeJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_launch_configuration_templates_output_next_token(
    input: &crate::operation::describe_launch_configuration_templates::DescribeLaunchConfigurationTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_replication_configuration_templates_output_next_token(
    input: &crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_source_servers_output_next_token(
    input: &crate::operation::describe_source_servers::DescribeSourceServersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_describe_vcenter_clients_output_next_token(
    input: &crate::operation::describe_vcenter_clients::DescribeVcenterClientsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_applications_output_next_token(
    input: &crate::operation::list_applications::ListApplicationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_source_server_actions_output_next_token(
    input: &crate::operation::list_source_server_actions::ListSourceServerActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_template_actions_output_next_token(
    input: &crate::operation::list_template_actions::ListTemplateActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_waves_output_next_token(
    input: &crate::operation::list_waves::ListWavesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_job_log_items_output_items(
    input: crate::operation::describe_job_log_items::DescribeJobLogItemsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::JobLog>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_jobs_output_items(
    input: crate::operation::describe_jobs::DescribeJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Job>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_launch_configuration_templates_output_items(
    input: crate::operation::describe_launch_configuration_templates::DescribeLaunchConfigurationTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::LaunchConfigurationTemplate>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_replication_configuration_templates_output_items(
    input: crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ReplicationConfigurationTemplate>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_source_servers_output_items(
    input: crate::operation::describe_source_servers::DescribeSourceServersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SourceServer>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_describe_vcenter_clients_output_items(
    input: crate::operation::describe_vcenter_clients::DescribeVcenterClientsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::VcenterClient>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_applications_output_items(
    input: crate::operation::list_applications::ListApplicationsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Application>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_source_server_actions_output_items(
    input: crate::operation::list_source_server_actions::ListSourceServerActionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::SourceServerActionDocument>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_template_actions_output_items(
    input: crate::operation::list_template_actions::ListTemplateActionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::TemplateActionDocument>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_waves_output_items(
    input: crate::operation::list_waves::ListWavesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Wave>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
