// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_template_action_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_template_action::PutTemplateActionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.action_id {
        object.key("actionID").string(var_1.as_str());
    }
    if let Some(var_2) = &input.action_name {
        object.key("actionName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.active {
        object.key("active").boolean(*var_3);
    }
    if let Some(var_4) = &input.category {
        object.key("category").string(var_4.as_str());
    }
    if let Some(var_5) = &input.description {
        object.key("description").string(var_5.as_str());
    }
    if let Some(var_6) = &input.document_identifier {
        object.key("documentIdentifier").string(var_6.as_str());
    }
    if let Some(var_7) = &input.document_version {
        object.key("documentVersion").string(var_7.as_str());
    }
    if let Some(var_8) = &input.external_parameters {
        #[allow(unused_mut)]
        let mut object_9 = object.key("externalParameters").start_object();
        for (key_10, value_11) in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_12 = object_9.key(key_10.as_str()).start_object();
                crate::protocol_serde::shape_ssm_external_parameter::ser_ssm_external_parameter(&mut object_12, value_11)?;
                object_12.finish();
            }
        }
        object_9.finish();
    }
    if let Some(var_13) = &input.launch_configuration_template_id {
        object.key("launchConfigurationTemplateID").string(var_13.as_str());
    }
    if let Some(var_14) = &input.must_succeed_for_cutover {
        object.key("mustSucceedForCutover").boolean(*var_14);
    }
    if let Some(var_15) = &input.operating_system {
        object.key("operatingSystem").string(var_15.as_str());
    }
    if let Some(var_16) = &input.order {
        object.key("order").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_18 = object.key("parameters").start_object();
        for (key_19, value_20) in var_17 {
            {
                let mut array_21 = object_18.key(key_19.as_str()).start_array();
                for item_22 in value_20 {
                    {
                        #[allow(unused_mut)]
                        let mut object_23 = array_21.value().start_object();
                        crate::protocol_serde::shape_ssm_parameter_store_parameter::ser_ssm_parameter_store_parameter(&mut object_23, item_22)?;
                        object_23.finish();
                    }
                }
                array_21.finish();
            }
        }
        object_18.finish();
    }
    if let Some(var_24) = &input.timeout_seconds {
        object.key("timeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_24).into()),
        );
    }
    Ok(())
}
