// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_ssm_document(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SsmDocument,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.action_name {
        object.key("actionName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.ssm_document_name {
        object.key("ssmDocumentName").string(var_2.as_str());
    }
    if input.timeout_seconds != 0 {
        object.key("timeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.timeout_seconds).into()),
        );
    }
    if let Some(var_3) = &input.must_succeed_for_cutover {
        object.key("mustSucceedForCutover").boolean(*var_3);
    }
    if let Some(var_4) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_5 = object.key("parameters").start_object();
        for (key_6, value_7) in var_4 {
            {
                let mut array_8 = object_5.key(key_6.as_str()).start_array();
                for item_9 in value_7 {
                    {
                        #[allow(unused_mut)]
                        let mut object_10 = array_8.value().start_object();
                        crate::protocol_serde::shape_ssm_parameter_store_parameter::ser_ssm_parameter_store_parameter(&mut object_10, item_9)?;
                        object_10.finish();
                    }
                }
                array_8.finish();
            }
        }
        object_5.finish();
    }
    Ok(())
}

pub(crate) fn de_ssm_document<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::SsmDocument>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SsmDocumentBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "actionName" => {
                                builder = builder.set_action_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ssmDocumentName" => {
                                builder = builder.set_ssm_document_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "timeoutSeconds" => {
                                builder = builder.set_timeout_seconds(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "mustSucceedForCutover" => {
                                builder = builder.set_must_succeed_for_cutover(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "parameters" => {
                                builder = builder.set_parameters(
                                    crate::protocol_serde::shape_ssm_document_parameters::de_ssm_document_parameters(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
