// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_ssm_document(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SsmDocument,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("actionName").string(input.action_name.as_str());
    }
    {
        object.key("ssmDocumentName").string(input.ssm_document_name.as_str());
    }
    if input.timeout_seconds != 0 {
        object.key("timeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.timeout_seconds).into()),
        );
    }
    if let Some(var_1) = &input.must_succeed_for_cutover {
        object.key("mustSucceedForCutover").boolean(*var_1);
    }
    if let Some(var_2) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_3 = object.key("parameters").start_object();
        for (key_4, value_5) in var_2 {
            {
                let mut array_6 = object_3.key(key_4.as_str()).start_array();
                for item_7 in value_5 {
                    {
                        #[allow(unused_mut)]
                        let mut object_8 = array_6.value().start_object();
                        crate::protocol_serde::shape_ssm_parameter_store_parameter::ser_ssm_parameter_store_parameter(&mut object_8, item_7)?;
                        object_8.finish();
                    }
                }
                array_6.finish();
            }
        }
        object_3.finish();
    }
    if let Some(var_9) = &input.external_parameters {
        #[allow(unused_mut)]
        let mut object_10 = object.key("externalParameters").start_object();
        for (key_11, value_12) in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_13 = object_10.key(key_11.as_str()).start_object();
                crate::protocol_serde::shape_ssm_external_parameter::ser_ssm_external_parameter(&mut object_13, value_12)?;
                object_13.finish();
            }
        }
        object_10.finish();
    }
    Ok(())
}

pub(crate) fn de_ssm_document<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::SsmDocument>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SsmDocumentBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "actionName" => {
                            builder = builder.set_action_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ssmDocumentName" => {
                            builder = builder.set_ssm_document_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "timeoutSeconds" => {
                            builder = builder.set_timeout_seconds(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "mustSucceedForCutover" => {
                            builder =
                                builder.set_must_succeed_for_cutover(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "parameters" => {
                            builder =
                                builder.set_parameters(crate::protocol_serde::shape_ssm_document_parameters::de_ssm_document_parameters(tokens)?);
                        }
                        "externalParameters" => {
                            builder = builder.set_external_parameters(
                                crate::protocol_serde::shape_ssm_document_external_parameters::de_ssm_document_external_parameters(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::ssm_document_correct_errors(builder).build().map_err(|err| {
                ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err)
            })?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
