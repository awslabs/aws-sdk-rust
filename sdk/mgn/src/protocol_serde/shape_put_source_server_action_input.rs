// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_source_server_action_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_source_server_action::PutSourceServerActionInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.action_id {
        object.key("actionID").string(var_1.as_str());
    }
    if let Some(var_2) = &input.action_name {
        object.key("actionName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.active {
        object.key("active").boolean(*var_3);
    }
    if let Some(var_4) = &input.document_identifier {
        object.key("documentIdentifier").string(var_4.as_str());
    }
    if let Some(var_5) = &input.document_version {
        object.key("documentVersion").string(var_5.as_str());
    }
    if let Some(var_6) = &input.must_succeed_for_cutover {
        object.key("mustSucceedForCutover").boolean(*var_6);
    }
    {
        object.key("order").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.order).into()),
        );
    }
    if let Some(var_7) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_8 = object.key("parameters").start_object();
        for (key_9, value_10) in var_7 {
            {
                let mut array_11 = object_8.key(key_9.as_str()).start_array();
                for item_12 in value_10 {
                    {
                        #[allow(unused_mut)]
                        let mut object_13 = array_11.value().start_object();
                        crate::protocol_serde::shape_ssm_parameter_store_parameter::ser_ssm_parameter_store_parameter(&mut object_13, item_12)?;
                        object_13.finish();
                    }
                }
                array_11.finish();
            }
        }
        object_8.finish();
    }
    if let Some(var_14) = &input.source_server_id {
        object.key("sourceServerID").string(var_14.as_str());
    }
    if input.timeout_seconds != 0 {
        object.key("timeoutSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.timeout_seconds).into()),
        );
    }
    Ok(())
}
