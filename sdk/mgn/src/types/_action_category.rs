// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ActionCategory`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let actioncategory = unimplemented!();
/// match actioncategory {
///     ActionCategory::Backup => { /* ... */ },
///     ActionCategory::Configuration => { /* ... */ },
///     ActionCategory::DisasterRecovery => { /* ... */ },
///     ActionCategory::LicenseAndSubscription => { /* ... */ },
///     ActionCategory::Networking => { /* ... */ },
///     ActionCategory::Observability => { /* ... */ },
///     ActionCategory::OperatingSystem => { /* ... */ },
///     ActionCategory::Other => { /* ... */ },
///     ActionCategory::Refactoring => { /* ... */ },
///     ActionCategory::Security => { /* ... */ },
///     ActionCategory::Validation => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `actioncategory` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ActionCategory::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ActionCategory::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ActionCategory::NewFeature` is defined.
/// Specifically, when `actioncategory` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ActionCategory::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum ActionCategory {
    #[allow(missing_docs)] // documentation missing in model
    Backup,
    #[allow(missing_docs)] // documentation missing in model
    Configuration,
    #[allow(missing_docs)] // documentation missing in model
    DisasterRecovery,
    #[allow(missing_docs)] // documentation missing in model
    LicenseAndSubscription,
    #[allow(missing_docs)] // documentation missing in model
    Networking,
    #[allow(missing_docs)] // documentation missing in model
    Observability,
    #[allow(missing_docs)] // documentation missing in model
    OperatingSystem,
    #[allow(missing_docs)] // documentation missing in model
    Other,
    #[allow(missing_docs)] // documentation missing in model
    Refactoring,
    #[allow(missing_docs)] // documentation missing in model
    Security,
    #[allow(missing_docs)] // documentation missing in model
    Validation,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ActionCategory {
    fn from(s: &str) -> Self {
        match s {
            "BACKUP" => ActionCategory::Backup,
            "CONFIGURATION" => ActionCategory::Configuration,
            "DISASTER_RECOVERY" => ActionCategory::DisasterRecovery,
            "LICENSE_AND_SUBSCRIPTION" => ActionCategory::LicenseAndSubscription,
            "NETWORKING" => ActionCategory::Networking,
            "OBSERVABILITY" => ActionCategory::Observability,
            "OPERATING_SYSTEM" => ActionCategory::OperatingSystem,
            "OTHER" => ActionCategory::Other,
            "REFACTORING" => ActionCategory::Refactoring,
            "SECURITY" => ActionCategory::Security,
            "VALIDATION" => ActionCategory::Validation,
            other => ActionCategory::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for ActionCategory {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ActionCategory::from(s))
    }
}
impl ActionCategory {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ActionCategory::Backup => "BACKUP",
            ActionCategory::Configuration => "CONFIGURATION",
            ActionCategory::DisasterRecovery => "DISASTER_RECOVERY",
            ActionCategory::LicenseAndSubscription => "LICENSE_AND_SUBSCRIPTION",
            ActionCategory::Networking => "NETWORKING",
            ActionCategory::Observability => "OBSERVABILITY",
            ActionCategory::OperatingSystem => "OPERATING_SYSTEM",
            ActionCategory::Other => "OTHER",
            ActionCategory::Refactoring => "REFACTORING",
            ActionCategory::Security => "SECURITY",
            ActionCategory::Validation => "VALIDATION",
            ActionCategory::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BACKUP",
            "CONFIGURATION",
            "DISASTER_RECOVERY",
            "LICENSE_AND_SUBSCRIPTION",
            "NETWORKING",
            "OBSERVABILITY",
            "OPERATING_SYSTEM",
            "OTHER",
            "REFACTORING",
            "SECURITY",
            "VALIDATION",
        ]
    }
}
impl ::std::convert::AsRef<str> for ActionCategory {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ActionCategory {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ActionCategory {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ActionCategory::Backup => write!(f, "BACKUP"),
            ActionCategory::Configuration => write!(f, "CONFIGURATION"),
            ActionCategory::DisasterRecovery => write!(f, "DISASTER_RECOVERY"),
            ActionCategory::LicenseAndSubscription => write!(f, "LICENSE_AND_SUBSCRIPTION"),
            ActionCategory::Networking => write!(f, "NETWORKING"),
            ActionCategory::Observability => write!(f, "OBSERVABILITY"),
            ActionCategory::OperatingSystem => write!(f, "OPERATING_SYSTEM"),
            ActionCategory::Other => write!(f, "OTHER"),
            ActionCategory::Refactoring => write!(f, "REFACTORING"),
            ActionCategory::Security => write!(f, "SECURITY"),
            ActionCategory::Validation => write!(f, "VALIDATION"),
            ActionCategory::Unknown(value) => write!(f, "{value}"),
        }
    }
}
