// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Post Launch Actions to executed on the Test or Cutover instance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PostLaunchActions {
    /// <p>Deployment type in which AWS Systems Manager Documents will be executed.</p>
    pub deployment: ::std::option::Option<crate::types::PostLaunchActionsDeploymentType>,
    /// <p>AWS Systems Manager Command's logs S3 log bucket.</p>
    pub s3_log_bucket: ::std::option::Option<::std::string::String>,
    /// <p>AWS Systems Manager Command's logs S3 output key prefix.</p>
    pub s3_output_key_prefix: ::std::option::Option<::std::string::String>,
    /// <p>AWS Systems Manager Command's CloudWatch log group name.</p>
    pub cloud_watch_log_group_name: ::std::option::Option<::std::string::String>,
    /// <p>AWS Systems Manager Documents.</p>
    pub ssm_documents: ::std::option::Option<::std::vec::Vec<crate::types::SsmDocument>>,
}
impl PostLaunchActions {
    /// <p>Deployment type in which AWS Systems Manager Documents will be executed.</p>
    pub fn deployment(&self) -> ::std::option::Option<&crate::types::PostLaunchActionsDeploymentType> {
        self.deployment.as_ref()
    }
    /// <p>AWS Systems Manager Command's logs S3 log bucket.</p>
    pub fn s3_log_bucket(&self) -> ::std::option::Option<&str> {
        self.s3_log_bucket.as_deref()
    }
    /// <p>AWS Systems Manager Command's logs S3 output key prefix.</p>
    pub fn s3_output_key_prefix(&self) -> ::std::option::Option<&str> {
        self.s3_output_key_prefix.as_deref()
    }
    /// <p>AWS Systems Manager Command's CloudWatch log group name.</p>
    pub fn cloud_watch_log_group_name(&self) -> ::std::option::Option<&str> {
        self.cloud_watch_log_group_name.as_deref()
    }
    /// <p>AWS Systems Manager Documents.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ssm_documents.is_none()`.
    pub fn ssm_documents(&self) -> &[crate::types::SsmDocument] {
        self.ssm_documents.as_deref().unwrap_or_default()
    }
}
impl PostLaunchActions {
    /// Creates a new builder-style object to manufacture [`PostLaunchActions`](crate::types::PostLaunchActions).
    pub fn builder() -> crate::types::builders::PostLaunchActionsBuilder {
        crate::types::builders::PostLaunchActionsBuilder::default()
    }
}

/// A builder for [`PostLaunchActions`](crate::types::PostLaunchActions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PostLaunchActionsBuilder {
    pub(crate) deployment: ::std::option::Option<crate::types::PostLaunchActionsDeploymentType>,
    pub(crate) s3_log_bucket: ::std::option::Option<::std::string::String>,
    pub(crate) s3_output_key_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) cloud_watch_log_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) ssm_documents: ::std::option::Option<::std::vec::Vec<crate::types::SsmDocument>>,
}
impl PostLaunchActionsBuilder {
    /// <p>Deployment type in which AWS Systems Manager Documents will be executed.</p>
    pub fn deployment(mut self, input: crate::types::PostLaunchActionsDeploymentType) -> Self {
        self.deployment = ::std::option::Option::Some(input);
        self
    }
    /// <p>Deployment type in which AWS Systems Manager Documents will be executed.</p>
    pub fn set_deployment(mut self, input: ::std::option::Option<crate::types::PostLaunchActionsDeploymentType>) -> Self {
        self.deployment = input;
        self
    }
    /// <p>Deployment type in which AWS Systems Manager Documents will be executed.</p>
    pub fn get_deployment(&self) -> &::std::option::Option<crate::types::PostLaunchActionsDeploymentType> {
        &self.deployment
    }
    /// <p>AWS Systems Manager Command's logs S3 log bucket.</p>
    pub fn s3_log_bucket(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_log_bucket = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>AWS Systems Manager Command's logs S3 log bucket.</p>
    pub fn set_s3_log_bucket(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_log_bucket = input;
        self
    }
    /// <p>AWS Systems Manager Command's logs S3 log bucket.</p>
    pub fn get_s3_log_bucket(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_log_bucket
    }
    /// <p>AWS Systems Manager Command's logs S3 output key prefix.</p>
    pub fn s3_output_key_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_output_key_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>AWS Systems Manager Command's logs S3 output key prefix.</p>
    pub fn set_s3_output_key_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_output_key_prefix = input;
        self
    }
    /// <p>AWS Systems Manager Command's logs S3 output key prefix.</p>
    pub fn get_s3_output_key_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_output_key_prefix
    }
    /// <p>AWS Systems Manager Command's CloudWatch log group name.</p>
    pub fn cloud_watch_log_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_watch_log_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>AWS Systems Manager Command's CloudWatch log group name.</p>
    pub fn set_cloud_watch_log_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_watch_log_group_name = input;
        self
    }
    /// <p>AWS Systems Manager Command's CloudWatch log group name.</p>
    pub fn get_cloud_watch_log_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_watch_log_group_name
    }
    /// Appends an item to `ssm_documents`.
    ///
    /// To override the contents of this collection use [`set_ssm_documents`](Self::set_ssm_documents).
    ///
    /// <p>AWS Systems Manager Documents.</p>
    pub fn ssm_documents(mut self, input: crate::types::SsmDocument) -> Self {
        let mut v = self.ssm_documents.unwrap_or_default();
        v.push(input);
        self.ssm_documents = ::std::option::Option::Some(v);
        self
    }
    /// <p>AWS Systems Manager Documents.</p>
    pub fn set_ssm_documents(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SsmDocument>>) -> Self {
        self.ssm_documents = input;
        self
    }
    /// <p>AWS Systems Manager Documents.</p>
    pub fn get_ssm_documents(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SsmDocument>> {
        &self.ssm_documents
    }
    /// Consumes the builder and constructs a [`PostLaunchActions`](crate::types::PostLaunchActions).
    pub fn build(self) -> crate::types::PostLaunchActions {
        crate::types::PostLaunchActions {
            deployment: self.deployment,
            s3_log_bucket: self.s3_log_bucket,
            s3_output_key_prefix: self.s3_output_key_prefix,
            cloud_watch_log_group_name: self.cloud_watch_log_group_name,
            ssm_documents: self.ssm_documents,
        }
    }
}
