// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The disk identifier.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Disk {
    /// <p>The disk or device name.</p>
    #[doc(hidden)]
    pub device_name: std::option::Option<std::string::String>,
    /// <p>The amount of storage on the disk in bytes.</p>
    #[doc(hidden)]
    pub bytes: i64,
}
impl Disk {
    /// <p>The disk or device name.</p>
    pub fn device_name(&self) -> std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>The amount of storage on the disk in bytes.</p>
    pub fn bytes(&self) -> i64 {
        self.bytes
    }
}
impl Disk {
    /// Creates a new builder-style object to manufacture [`Disk`](crate::types::Disk).
    pub fn builder() -> crate::types::builders::DiskBuilder {
        crate::types::builders::DiskBuilder::default()
    }
}

/// A builder for [`Disk`](crate::types::Disk).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DiskBuilder {
    pub(crate) device_name: std::option::Option<std::string::String>,
    pub(crate) bytes: std::option::Option<i64>,
}
impl DiskBuilder {
    /// <p>The disk or device name.</p>
    pub fn device_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_name = Some(input.into());
        self
    }
    /// <p>The disk or device name.</p>
    pub fn set_device_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>The amount of storage on the disk in bytes.</p>
    pub fn bytes(mut self, input: i64) -> Self {
        self.bytes = Some(input);
        self
    }
    /// <p>The amount of storage on the disk in bytes.</p>
    pub fn set_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.bytes = input;
        self
    }
    /// Consumes the builder and constructs a [`Disk`](crate::types::Disk).
    pub fn build(self) -> crate::types::Disk {
        crate::types::Disk {
            device_name: self.device_name,
            bytes: self.bytes.unwrap_or_default(),
        }
    }
}
