// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Replication Configuration replicated disk.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReplicationConfigurationReplicatedDisk {
    /// <p>Replication Configuration replicated disk device name.</p>
    #[doc(hidden)]
    pub device_name: std::option::Option<std::string::String>,
    /// <p>Replication Configuration replicated disk boot disk.</p>
    #[doc(hidden)]
    pub is_boot_disk: std::option::Option<bool>,
    /// <p>Replication Configuration replicated disk staging disk type.</p>
    #[doc(hidden)]
    pub staging_disk_type:
        std::option::Option<crate::types::ReplicationConfigurationReplicatedDiskStagingDiskType>,
    /// <p>Replication Configuration replicated disk IOPs.</p>
    #[doc(hidden)]
    pub iops: i64,
    /// <p>Replication Configuration replicated disk throughput.</p>
    #[doc(hidden)]
    pub throughput: i64,
}
impl ReplicationConfigurationReplicatedDisk {
    /// <p>Replication Configuration replicated disk device name.</p>
    pub fn device_name(&self) -> std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>Replication Configuration replicated disk boot disk.</p>
    pub fn is_boot_disk(&self) -> std::option::Option<bool> {
        self.is_boot_disk
    }
    /// <p>Replication Configuration replicated disk staging disk type.</p>
    pub fn staging_disk_type(
        &self,
    ) -> std::option::Option<&crate::types::ReplicationConfigurationReplicatedDiskStagingDiskType>
    {
        self.staging_disk_type.as_ref()
    }
    /// <p>Replication Configuration replicated disk IOPs.</p>
    pub fn iops(&self) -> i64 {
        self.iops
    }
    /// <p>Replication Configuration replicated disk throughput.</p>
    pub fn throughput(&self) -> i64 {
        self.throughput
    }
}
impl ReplicationConfigurationReplicatedDisk {
    /// Creates a new builder-style object to manufacture [`ReplicationConfigurationReplicatedDisk`](crate::types::ReplicationConfigurationReplicatedDisk).
    pub fn builder() -> crate::types::builders::ReplicationConfigurationReplicatedDiskBuilder {
        crate::types::builders::ReplicationConfigurationReplicatedDiskBuilder::default()
    }
}

/// A builder for [`ReplicationConfigurationReplicatedDisk`](crate::types::ReplicationConfigurationReplicatedDisk).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReplicationConfigurationReplicatedDiskBuilder {
    pub(crate) device_name: std::option::Option<std::string::String>,
    pub(crate) is_boot_disk: std::option::Option<bool>,
    pub(crate) staging_disk_type:
        std::option::Option<crate::types::ReplicationConfigurationReplicatedDiskStagingDiskType>,
    pub(crate) iops: std::option::Option<i64>,
    pub(crate) throughput: std::option::Option<i64>,
}
impl ReplicationConfigurationReplicatedDiskBuilder {
    /// <p>Replication Configuration replicated disk device name.</p>
    pub fn device_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_name = Some(input.into());
        self
    }
    /// <p>Replication Configuration replicated disk device name.</p>
    pub fn set_device_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>Replication Configuration replicated disk boot disk.</p>
    pub fn is_boot_disk(mut self, input: bool) -> Self {
        self.is_boot_disk = Some(input);
        self
    }
    /// <p>Replication Configuration replicated disk boot disk.</p>
    pub fn set_is_boot_disk(mut self, input: std::option::Option<bool>) -> Self {
        self.is_boot_disk = input;
        self
    }
    /// <p>Replication Configuration replicated disk staging disk type.</p>
    pub fn staging_disk_type(
        mut self,
        input: crate::types::ReplicationConfigurationReplicatedDiskStagingDiskType,
    ) -> Self {
        self.staging_disk_type = Some(input);
        self
    }
    /// <p>Replication Configuration replicated disk staging disk type.</p>
    pub fn set_staging_disk_type(
        mut self,
        input: std::option::Option<
            crate::types::ReplicationConfigurationReplicatedDiskStagingDiskType,
        >,
    ) -> Self {
        self.staging_disk_type = input;
        self
    }
    /// <p>Replication Configuration replicated disk IOPs.</p>
    pub fn iops(mut self, input: i64) -> Self {
        self.iops = Some(input);
        self
    }
    /// <p>Replication Configuration replicated disk IOPs.</p>
    pub fn set_iops(mut self, input: std::option::Option<i64>) -> Self {
        self.iops = input;
        self
    }
    /// <p>Replication Configuration replicated disk throughput.</p>
    pub fn throughput(mut self, input: i64) -> Self {
        self.throughput = Some(input);
        self
    }
    /// <p>Replication Configuration replicated disk throughput.</p>
    pub fn set_throughput(mut self, input: std::option::Option<i64>) -> Self {
        self.throughput = input;
        self
    }
    /// Consumes the builder and constructs a [`ReplicationConfigurationReplicatedDisk`](crate::types::ReplicationConfigurationReplicatedDisk).
    pub fn build(self) -> crate::types::ReplicationConfigurationReplicatedDisk {
        crate::types::ReplicationConfigurationReplicatedDisk {
            device_name: self.device_name,
            is_boot_disk: self.is_boot_disk,
            staging_disk_type: self.staging_disk_type,
            iops: self.iops.unwrap_or_default(),
            throughput: self.throughput.unwrap_or_default(),
        }
    }
}
