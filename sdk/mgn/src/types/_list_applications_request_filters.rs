// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Applications list filters.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListApplicationsRequestFilters {
    /// <p>Filter applications list by application ID.</p>
    #[doc(hidden)]
    pub application_i_ds: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Filter applications list by archival status.</p>
    #[doc(hidden)]
    pub is_archived: std::option::Option<bool>,
    /// <p>Filter applications list by wave ID.</p>
    #[doc(hidden)]
    pub wave_i_ds: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ListApplicationsRequestFilters {
    /// <p>Filter applications list by application ID.</p>
    pub fn application_i_ds(&self) -> std::option::Option<&[std::string::String]> {
        self.application_i_ds.as_deref()
    }
    /// <p>Filter applications list by archival status.</p>
    pub fn is_archived(&self) -> std::option::Option<bool> {
        self.is_archived
    }
    /// <p>Filter applications list by wave ID.</p>
    pub fn wave_i_ds(&self) -> std::option::Option<&[std::string::String]> {
        self.wave_i_ds.as_deref()
    }
}
impl ListApplicationsRequestFilters {
    /// Creates a new builder-style object to manufacture [`ListApplicationsRequestFilters`](crate::types::ListApplicationsRequestFilters).
    pub fn builder() -> crate::types::builders::ListApplicationsRequestFiltersBuilder {
        crate::types::builders::ListApplicationsRequestFiltersBuilder::default()
    }
}

/// A builder for [`ListApplicationsRequestFilters`](crate::types::ListApplicationsRequestFilters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListApplicationsRequestFiltersBuilder {
    pub(crate) application_i_ds: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) is_archived: std::option::Option<bool>,
    pub(crate) wave_i_ds: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ListApplicationsRequestFiltersBuilder {
    /// Appends an item to `application_i_ds`.
    ///
    /// To override the contents of this collection use [`set_application_i_ds`](Self::set_application_i_ds).
    ///
    /// <p>Filter applications list by application ID.</p>
    pub fn application_i_ds(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.application_i_ds.unwrap_or_default();
        v.push(input.into());
        self.application_i_ds = Some(v);
        self
    }
    /// <p>Filter applications list by application ID.</p>
    pub fn set_application_i_ds(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.application_i_ds = input;
        self
    }
    /// <p>Filter applications list by archival status.</p>
    pub fn is_archived(mut self, input: bool) -> Self {
        self.is_archived = Some(input);
        self
    }
    /// <p>Filter applications list by archival status.</p>
    pub fn set_is_archived(mut self, input: std::option::Option<bool>) -> Self {
        self.is_archived = input;
        self
    }
    /// Appends an item to `wave_i_ds`.
    ///
    /// To override the contents of this collection use [`set_wave_i_ds`](Self::set_wave_i_ds).
    ///
    /// <p>Filter applications list by wave ID.</p>
    pub fn wave_i_ds(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.wave_i_ds.unwrap_or_default();
        v.push(input.into());
        self.wave_i_ds = Some(v);
        self
    }
    /// <p>Filter applications list by wave ID.</p>
    pub fn set_wave_i_ds(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.wave_i_ds = input;
        self
    }
    /// Consumes the builder and constructs a [`ListApplicationsRequestFilters`](crate::types::ListApplicationsRequestFilters).
    pub fn build(self) -> crate::types::ListApplicationsRequestFilters {
        crate::types::ListApplicationsRequestFilters {
            application_i_ds: self.application_i_ds,
            is_archived: self.is_archived,
            wave_i_ds: self.wave_i_ds,
        }
    }
}
