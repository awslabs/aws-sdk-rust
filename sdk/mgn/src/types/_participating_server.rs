// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Server participating in Job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParticipatingServer {
    /// <p>Participating server Source Server ID.</p>
    pub source_server_id: ::std::string::String,
    /// <p>Participating server launch status.</p>
    pub launch_status: ::std::option::Option<crate::types::LaunchStatus>,
    /// <p>Participating server's launched ec2 instance ID.</p>
    pub launched_ec2_instance_id: ::std::option::Option<::std::string::String>,
    /// <p>Participating server's Post Launch Actions Status.</p>
    pub post_launch_actions_status: ::std::option::Option<crate::types::PostLaunchActionsStatus>,
}
impl ParticipatingServer {
    /// <p>Participating server Source Server ID.</p>
    pub fn source_server_id(&self) -> &str {
        use std::ops::Deref;
        self.source_server_id.deref()
    }
    /// <p>Participating server launch status.</p>
    pub fn launch_status(&self) -> ::std::option::Option<&crate::types::LaunchStatus> {
        self.launch_status.as_ref()
    }
    /// <p>Participating server's launched ec2 instance ID.</p>
    pub fn launched_ec2_instance_id(&self) -> ::std::option::Option<&str> {
        self.launched_ec2_instance_id.as_deref()
    }
    /// <p>Participating server's Post Launch Actions Status.</p>
    pub fn post_launch_actions_status(&self) -> ::std::option::Option<&crate::types::PostLaunchActionsStatus> {
        self.post_launch_actions_status.as_ref()
    }
}
impl ParticipatingServer {
    /// Creates a new builder-style object to manufacture [`ParticipatingServer`](crate::types::ParticipatingServer).
    pub fn builder() -> crate::types::builders::ParticipatingServerBuilder {
        crate::types::builders::ParticipatingServerBuilder::default()
    }
}

/// A builder for [`ParticipatingServer`](crate::types::ParticipatingServer).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ParticipatingServerBuilder {
    pub(crate) source_server_id: ::std::option::Option<::std::string::String>,
    pub(crate) launch_status: ::std::option::Option<crate::types::LaunchStatus>,
    pub(crate) launched_ec2_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) post_launch_actions_status: ::std::option::Option<crate::types::PostLaunchActionsStatus>,
}
impl ParticipatingServerBuilder {
    /// <p>Participating server Source Server ID.</p>
    /// This field is required.
    pub fn source_server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Participating server Source Server ID.</p>
    pub fn set_source_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_server_id = input;
        self
    }
    /// <p>Participating server Source Server ID.</p>
    pub fn get_source_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_server_id
    }
    /// <p>Participating server launch status.</p>
    pub fn launch_status(mut self, input: crate::types::LaunchStatus) -> Self {
        self.launch_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Participating server launch status.</p>
    pub fn set_launch_status(mut self, input: ::std::option::Option<crate::types::LaunchStatus>) -> Self {
        self.launch_status = input;
        self
    }
    /// <p>Participating server launch status.</p>
    pub fn get_launch_status(&self) -> &::std::option::Option<crate::types::LaunchStatus> {
        &self.launch_status
    }
    /// <p>Participating server's launched ec2 instance ID.</p>
    pub fn launched_ec2_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.launched_ec2_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Participating server's launched ec2 instance ID.</p>
    pub fn set_launched_ec2_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.launched_ec2_instance_id = input;
        self
    }
    /// <p>Participating server's launched ec2 instance ID.</p>
    pub fn get_launched_ec2_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.launched_ec2_instance_id
    }
    /// <p>Participating server's Post Launch Actions Status.</p>
    pub fn post_launch_actions_status(mut self, input: crate::types::PostLaunchActionsStatus) -> Self {
        self.post_launch_actions_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Participating server's Post Launch Actions Status.</p>
    pub fn set_post_launch_actions_status(mut self, input: ::std::option::Option<crate::types::PostLaunchActionsStatus>) -> Self {
        self.post_launch_actions_status = input;
        self
    }
    /// <p>Participating server's Post Launch Actions Status.</p>
    pub fn get_post_launch_actions_status(&self) -> &::std::option::Option<crate::types::PostLaunchActionsStatus> {
        &self.post_launch_actions_status
    }
    /// Consumes the builder and constructs a [`ParticipatingServer`](crate::types::ParticipatingServer).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_server_id`](crate::types::builders::ParticipatingServerBuilder::source_server_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ParticipatingServer, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ParticipatingServer {
            source_server_id: self.source_server_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_server_id",
                    "source_server_id was not specified but it is required when building ParticipatingServer",
                )
            })?,
            launch_status: self.launch_status,
            launched_ec2_instance_id: self.launched_ec2_instance_id,
            post_launch_actions_status: self.post_launch_actions_status,
        })
    }
}
