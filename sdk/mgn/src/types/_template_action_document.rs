// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TemplateActionDocument {
    /// <p>Template post migration custom action ID.</p>
    #[doc(hidden)]
    pub action_id: std::option::Option<std::string::String>,
    /// <p>Template post migration custom action name.</p>
    #[doc(hidden)]
    pub action_name: std::option::Option<std::string::String>,
    /// <p>Template post migration custom action document identifier.</p>
    #[doc(hidden)]
    pub document_identifier: std::option::Option<std::string::String>,
    /// <p>Template post migration custom action order.</p>
    #[doc(hidden)]
    pub order: i32,
    /// <p>Template post migration custom action document version.</p>
    #[doc(hidden)]
    pub document_version: std::option::Option<std::string::String>,
    /// <p>Template post migration custom action active status.</p>
    #[doc(hidden)]
    pub active: std::option::Option<bool>,
    /// <p>Template post migration custom action timeout in seconds.</p>
    #[doc(hidden)]
    pub timeout_seconds: i32,
    /// <p>Template post migration custom action must succeed for cutover.</p>
    #[doc(hidden)]
    pub must_succeed_for_cutover: std::option::Option<bool>,
    /// <p>Template post migration custom action parameters.</p>
    #[doc(hidden)]
    pub parameters: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            std::vec::Vec<crate::types::SsmParameterStoreParameter>,
        >,
    >,
    /// <p>Operating system eligible for this template post migration custom action.</p>
    #[doc(hidden)]
    pub operating_system: std::option::Option<std::string::String>,
}
impl TemplateActionDocument {
    /// <p>Template post migration custom action ID.</p>
    pub fn action_id(&self) -> std::option::Option<&str> {
        self.action_id.as_deref()
    }
    /// <p>Template post migration custom action name.</p>
    pub fn action_name(&self) -> std::option::Option<&str> {
        self.action_name.as_deref()
    }
    /// <p>Template post migration custom action document identifier.</p>
    pub fn document_identifier(&self) -> std::option::Option<&str> {
        self.document_identifier.as_deref()
    }
    /// <p>Template post migration custom action order.</p>
    pub fn order(&self) -> i32 {
        self.order
    }
    /// <p>Template post migration custom action document version.</p>
    pub fn document_version(&self) -> std::option::Option<&str> {
        self.document_version.as_deref()
    }
    /// <p>Template post migration custom action active status.</p>
    pub fn active(&self) -> std::option::Option<bool> {
        self.active
    }
    /// <p>Template post migration custom action timeout in seconds.</p>
    pub fn timeout_seconds(&self) -> i32 {
        self.timeout_seconds
    }
    /// <p>Template post migration custom action must succeed for cutover.</p>
    pub fn must_succeed_for_cutover(&self) -> std::option::Option<bool> {
        self.must_succeed_for_cutover
    }
    /// <p>Template post migration custom action parameters.</p>
    pub fn parameters(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            std::string::String,
            std::vec::Vec<crate::types::SsmParameterStoreParameter>,
        >,
    > {
        self.parameters.as_ref()
    }
    /// <p>Operating system eligible for this template post migration custom action.</p>
    pub fn operating_system(&self) -> std::option::Option<&str> {
        self.operating_system.as_deref()
    }
}
impl TemplateActionDocument {
    /// Creates a new builder-style object to manufacture [`TemplateActionDocument`](crate::types::TemplateActionDocument).
    pub fn builder() -> crate::types::builders::TemplateActionDocumentBuilder {
        crate::types::builders::TemplateActionDocumentBuilder::default()
    }
}

/// A builder for [`TemplateActionDocument`](crate::types::TemplateActionDocument).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TemplateActionDocumentBuilder {
    pub(crate) action_id: std::option::Option<std::string::String>,
    pub(crate) action_name: std::option::Option<std::string::String>,
    pub(crate) document_identifier: std::option::Option<std::string::String>,
    pub(crate) order: std::option::Option<i32>,
    pub(crate) document_version: std::option::Option<std::string::String>,
    pub(crate) active: std::option::Option<bool>,
    pub(crate) timeout_seconds: std::option::Option<i32>,
    pub(crate) must_succeed_for_cutover: std::option::Option<bool>,
    pub(crate) parameters: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            std::vec::Vec<crate::types::SsmParameterStoreParameter>,
        >,
    >,
    pub(crate) operating_system: std::option::Option<std::string::String>,
}
impl TemplateActionDocumentBuilder {
    /// <p>Template post migration custom action ID.</p>
    pub fn action_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.action_id = Some(input.into());
        self
    }
    /// <p>Template post migration custom action ID.</p>
    pub fn set_action_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.action_id = input;
        self
    }
    /// <p>Template post migration custom action name.</p>
    pub fn action_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.action_name = Some(input.into());
        self
    }
    /// <p>Template post migration custom action name.</p>
    pub fn set_action_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.action_name = input;
        self
    }
    /// <p>Template post migration custom action document identifier.</p>
    pub fn document_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.document_identifier = Some(input.into());
        self
    }
    /// <p>Template post migration custom action document identifier.</p>
    pub fn set_document_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.document_identifier = input;
        self
    }
    /// <p>Template post migration custom action order.</p>
    pub fn order(mut self, input: i32) -> Self {
        self.order = Some(input);
        self
    }
    /// <p>Template post migration custom action order.</p>
    pub fn set_order(mut self, input: std::option::Option<i32>) -> Self {
        self.order = input;
        self
    }
    /// <p>Template post migration custom action document version.</p>
    pub fn document_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.document_version = Some(input.into());
        self
    }
    /// <p>Template post migration custom action document version.</p>
    pub fn set_document_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.document_version = input;
        self
    }
    /// <p>Template post migration custom action active status.</p>
    pub fn active(mut self, input: bool) -> Self {
        self.active = Some(input);
        self
    }
    /// <p>Template post migration custom action active status.</p>
    pub fn set_active(mut self, input: std::option::Option<bool>) -> Self {
        self.active = input;
        self
    }
    /// <p>Template post migration custom action timeout in seconds.</p>
    pub fn timeout_seconds(mut self, input: i32) -> Self {
        self.timeout_seconds = Some(input);
        self
    }
    /// <p>Template post migration custom action timeout in seconds.</p>
    pub fn set_timeout_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.timeout_seconds = input;
        self
    }
    /// <p>Template post migration custom action must succeed for cutover.</p>
    pub fn must_succeed_for_cutover(mut self, input: bool) -> Self {
        self.must_succeed_for_cutover = Some(input);
        self
    }
    /// <p>Template post migration custom action must succeed for cutover.</p>
    pub fn set_must_succeed_for_cutover(mut self, input: std::option::Option<bool>) -> Self {
        self.must_succeed_for_cutover = input;
        self
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>Template post migration custom action parameters.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<crate::types::SsmParameterStoreParameter>,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.parameters = Some(hash_map);
        self
    }
    /// <p>Template post migration custom action parameters.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                std::vec::Vec<crate::types::SsmParameterStoreParameter>,
            >,
        >,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// <p>Operating system eligible for this template post migration custom action.</p>
    pub fn operating_system(mut self, input: impl Into<std::string::String>) -> Self {
        self.operating_system = Some(input.into());
        self
    }
    /// <p>Operating system eligible for this template post migration custom action.</p>
    pub fn set_operating_system(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.operating_system = input;
        self
    }
    /// Consumes the builder and constructs a [`TemplateActionDocument`](crate::types::TemplateActionDocument).
    pub fn build(self) -> crate::types::TemplateActionDocument {
        crate::types::TemplateActionDocument {
            action_id: self.action_id,
            action_name: self.action_name,
            document_identifier: self.document_identifier,
            order: self.order.unwrap_or_default(),
            document_version: self.document_version,
            active: self.active,
            timeout_seconds: self.timeout_seconds.unwrap_or_default(),
            must_succeed_for_cutover: self.must_succeed_for_cutover,
            parameters: self.parameters,
            operating_system: self.operating_system,
        }
    }
}
