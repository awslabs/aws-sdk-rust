// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Application aggregated status.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApplicationAggregatedStatus {
    /// <p>Application aggregated status last update dateTime.</p>
    #[doc(hidden)]
    pub last_update_date_time: std::option::Option<std::string::String>,
    /// <p>Application aggregated status health status.</p>
    #[doc(hidden)]
    pub health_status: std::option::Option<crate::types::ApplicationHealthStatus>,
    /// <p>Application aggregated status progress status.</p>
    #[doc(hidden)]
    pub progress_status: std::option::Option<crate::types::ApplicationProgressStatus>,
    /// <p>Application aggregated status total source servers amount.</p>
    #[doc(hidden)]
    pub total_source_servers: i64,
}
impl ApplicationAggregatedStatus {
    /// <p>Application aggregated status last update dateTime.</p>
    pub fn last_update_date_time(&self) -> std::option::Option<&str> {
        self.last_update_date_time.as_deref()
    }
    /// <p>Application aggregated status health status.</p>
    pub fn health_status(&self) -> std::option::Option<&crate::types::ApplicationHealthStatus> {
        self.health_status.as_ref()
    }
    /// <p>Application aggregated status progress status.</p>
    pub fn progress_status(&self) -> std::option::Option<&crate::types::ApplicationProgressStatus> {
        self.progress_status.as_ref()
    }
    /// <p>Application aggregated status total source servers amount.</p>
    pub fn total_source_servers(&self) -> i64 {
        self.total_source_servers
    }
}
impl ApplicationAggregatedStatus {
    /// Creates a new builder-style object to manufacture [`ApplicationAggregatedStatus`](crate::types::ApplicationAggregatedStatus).
    pub fn builder() -> crate::types::builders::ApplicationAggregatedStatusBuilder {
        crate::types::builders::ApplicationAggregatedStatusBuilder::default()
    }
}

/// A builder for [`ApplicationAggregatedStatus`](crate::types::ApplicationAggregatedStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApplicationAggregatedStatusBuilder {
    pub(crate) last_update_date_time: std::option::Option<std::string::String>,
    pub(crate) health_status: std::option::Option<crate::types::ApplicationHealthStatus>,
    pub(crate) progress_status: std::option::Option<crate::types::ApplicationProgressStatus>,
    pub(crate) total_source_servers: std::option::Option<i64>,
}
impl ApplicationAggregatedStatusBuilder {
    /// <p>Application aggregated status last update dateTime.</p>
    pub fn last_update_date_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_update_date_time = Some(input.into());
        self
    }
    /// <p>Application aggregated status last update dateTime.</p>
    pub fn set_last_update_date_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_update_date_time = input;
        self
    }
    /// <p>Application aggregated status health status.</p>
    pub fn health_status(mut self, input: crate::types::ApplicationHealthStatus) -> Self {
        self.health_status = Some(input);
        self
    }
    /// <p>Application aggregated status health status.</p>
    pub fn set_health_status(
        mut self,
        input: std::option::Option<crate::types::ApplicationHealthStatus>,
    ) -> Self {
        self.health_status = input;
        self
    }
    /// <p>Application aggregated status progress status.</p>
    pub fn progress_status(mut self, input: crate::types::ApplicationProgressStatus) -> Self {
        self.progress_status = Some(input);
        self
    }
    /// <p>Application aggregated status progress status.</p>
    pub fn set_progress_status(
        mut self,
        input: std::option::Option<crate::types::ApplicationProgressStatus>,
    ) -> Self {
        self.progress_status = input;
        self
    }
    /// <p>Application aggregated status total source servers amount.</p>
    pub fn total_source_servers(mut self, input: i64) -> Self {
        self.total_source_servers = Some(input);
        self
    }
    /// <p>Application aggregated status total source servers amount.</p>
    pub fn set_total_source_servers(mut self, input: std::option::Option<i64>) -> Self {
        self.total_source_servers = input;
        self
    }
    /// Consumes the builder and constructs a [`ApplicationAggregatedStatus`](crate::types::ApplicationAggregatedStatus).
    pub fn build(self) -> crate::types::ApplicationAggregatedStatus {
        crate::types::ApplicationAggregatedStatus {
            last_update_date_time: self.last_update_date_time,
            health_status: self.health_status,
            progress_status: self.progress_status,
            total_source_servers: self.total_source_servers.unwrap_or_default(),
        }
    }
}
