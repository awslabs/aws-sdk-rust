// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Application {
    /// <p>Application ID.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>Application ARN.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>Application name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Application description.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Application archival status.</p>
    #[doc(hidden)]
    pub is_archived: std::option::Option<bool>,
    /// <p>Application aggregated status.</p>
    #[doc(hidden)]
    pub application_aggregated_status:
        std::option::Option<crate::types::ApplicationAggregatedStatus>,
    /// <p>Application creation dateTime.</p>
    #[doc(hidden)]
    pub creation_date_time: std::option::Option<std::string::String>,
    /// <p>Application last modified dateTime.</p>
    #[doc(hidden)]
    pub last_modified_date_time: std::option::Option<std::string::String>,
    /// <p>Application tags.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Application wave ID.</p>
    #[doc(hidden)]
    pub wave_id: std::option::Option<std::string::String>,
}
impl Application {
    /// <p>Application ID.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>Application ARN.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Application name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Application description.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Application archival status.</p>
    pub fn is_archived(&self) -> std::option::Option<bool> {
        self.is_archived
    }
    /// <p>Application aggregated status.</p>
    pub fn application_aggregated_status(
        &self,
    ) -> std::option::Option<&crate::types::ApplicationAggregatedStatus> {
        self.application_aggregated_status.as_ref()
    }
    /// <p>Application creation dateTime.</p>
    pub fn creation_date_time(&self) -> std::option::Option<&str> {
        self.creation_date_time.as_deref()
    }
    /// <p>Application last modified dateTime.</p>
    pub fn last_modified_date_time(&self) -> std::option::Option<&str> {
        self.last_modified_date_time.as_deref()
    }
    /// <p>Application tags.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>Application wave ID.</p>
    pub fn wave_id(&self) -> std::option::Option<&str> {
        self.wave_id.as_deref()
    }
}
impl std::fmt::Debug for Application {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Application");
        formatter.field("application_id", &self.application_id);
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("is_archived", &self.is_archived);
        formatter.field(
            "application_aggregated_status",
            &self.application_aggregated_status,
        );
        formatter.field("creation_date_time", &self.creation_date_time);
        formatter.field("last_modified_date_time", &self.last_modified_date_time);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("wave_id", &self.wave_id);
        formatter.finish()
    }
}
impl Application {
    /// Creates a new builder-style object to manufacture [`Application`](crate::types::Application).
    pub fn builder() -> crate::types::builders::ApplicationBuilder {
        crate::types::builders::ApplicationBuilder::default()
    }
}

/// A builder for [`Application`](crate::types::Application).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ApplicationBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) is_archived: std::option::Option<bool>,
    pub(crate) application_aggregated_status:
        std::option::Option<crate::types::ApplicationAggregatedStatus>,
    pub(crate) creation_date_time: std::option::Option<std::string::String>,
    pub(crate) last_modified_date_time: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) wave_id: std::option::Option<std::string::String>,
}
impl ApplicationBuilder {
    /// <p>Application ID.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>Application ID.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>Application ARN.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>Application ARN.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Application name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Application name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Application description.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>Application description.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Application archival status.</p>
    pub fn is_archived(mut self, input: bool) -> Self {
        self.is_archived = Some(input);
        self
    }
    /// <p>Application archival status.</p>
    pub fn set_is_archived(mut self, input: std::option::Option<bool>) -> Self {
        self.is_archived = input;
        self
    }
    /// <p>Application aggregated status.</p>
    pub fn application_aggregated_status(
        mut self,
        input: crate::types::ApplicationAggregatedStatus,
    ) -> Self {
        self.application_aggregated_status = Some(input);
        self
    }
    /// <p>Application aggregated status.</p>
    pub fn set_application_aggregated_status(
        mut self,
        input: std::option::Option<crate::types::ApplicationAggregatedStatus>,
    ) -> Self {
        self.application_aggregated_status = input;
        self
    }
    /// <p>Application creation dateTime.</p>
    pub fn creation_date_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.creation_date_time = Some(input.into());
        self
    }
    /// <p>Application creation dateTime.</p>
    pub fn set_creation_date_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.creation_date_time = input;
        self
    }
    /// <p>Application last modified dateTime.</p>
    pub fn last_modified_date_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_modified_date_time = Some(input.into());
        self
    }
    /// <p>Application last modified dateTime.</p>
    pub fn set_last_modified_date_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_modified_date_time = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Application tags.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Application tags.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>Application wave ID.</p>
    pub fn wave_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.wave_id = Some(input.into());
        self
    }
    /// <p>Application wave ID.</p>
    pub fn set_wave_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.wave_id = input;
        self
    }
    /// Consumes the builder and constructs a [`Application`](crate::types::Application).
    pub fn build(self) -> crate::types::Application {
        crate::types::Application {
            application_id: self.application_id,
            arn: self.arn,
            name: self.name,
            description: self.description,
            is_archived: self.is_archived,
            application_aggregated_status: self.application_aggregated_status,
            creation_date_time: self.creation_date_time,
            last_modified_date_time: self.last_modified_date_time,
            tags: self.tags,
            wave_id: self.wave_id,
        }
    }
}
impl std::fmt::Debug for ApplicationBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ApplicationBuilder");
        formatter.field("application_id", &self.application_id);
        formatter.field("arn", &self.arn);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("is_archived", &self.is_archived);
        formatter.field(
            "application_aggregated_status",
            &self.application_aggregated_status,
        );
        formatter.field("creation_date_time", &self.creation_date_time);
        formatter.field("last_modified_date_time", &self.last_modified_date_time);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("wave_id", &self.wave_id);
        formatter.finish()
    }
}
