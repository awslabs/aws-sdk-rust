// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Data replication initiation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataReplicationInitiation {
    /// <p>Request to query data initiation start date and time.</p>
    pub start_date_time: ::std::option::Option<::std::string::String>,
    /// <p>Request to query next data initiation date and time.</p>
    pub next_attempt_date_time: ::std::option::Option<::std::string::String>,
    /// <p>Request to query data initiation steps.</p>
    pub steps: ::std::option::Option<::std::vec::Vec<crate::types::DataReplicationInitiationStep>>,
}
impl DataReplicationInitiation {
    /// <p>Request to query data initiation start date and time.</p>
    pub fn start_date_time(&self) -> ::std::option::Option<&str> {
        self.start_date_time.as_deref()
    }
    /// <p>Request to query next data initiation date and time.</p>
    pub fn next_attempt_date_time(&self) -> ::std::option::Option<&str> {
        self.next_attempt_date_time.as_deref()
    }
    /// <p>Request to query data initiation steps.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.steps.is_none()`.
    pub fn steps(&self) -> &[crate::types::DataReplicationInitiationStep] {
        self.steps.as_deref().unwrap_or_default()
    }
}
impl DataReplicationInitiation {
    /// Creates a new builder-style object to manufacture [`DataReplicationInitiation`](crate::types::DataReplicationInitiation).
    pub fn builder() -> crate::types::builders::DataReplicationInitiationBuilder {
        crate::types::builders::DataReplicationInitiationBuilder::default()
    }
}

/// A builder for [`DataReplicationInitiation`](crate::types::DataReplicationInitiation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataReplicationInitiationBuilder {
    pub(crate) start_date_time: ::std::option::Option<::std::string::String>,
    pub(crate) next_attempt_date_time: ::std::option::Option<::std::string::String>,
    pub(crate) steps: ::std::option::Option<::std::vec::Vec<crate::types::DataReplicationInitiationStep>>,
}
impl DataReplicationInitiationBuilder {
    /// <p>Request to query data initiation start date and time.</p>
    pub fn start_date_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.start_date_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Request to query data initiation start date and time.</p>
    pub fn set_start_date_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.start_date_time = input;
        self
    }
    /// <p>Request to query data initiation start date and time.</p>
    pub fn get_start_date_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.start_date_time
    }
    /// <p>Request to query next data initiation date and time.</p>
    pub fn next_attempt_date_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_attempt_date_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Request to query next data initiation date and time.</p>
    pub fn set_next_attempt_date_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_attempt_date_time = input;
        self
    }
    /// <p>Request to query next data initiation date and time.</p>
    pub fn get_next_attempt_date_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_attempt_date_time
    }
    /// Appends an item to `steps`.
    ///
    /// To override the contents of this collection use [`set_steps`](Self::set_steps).
    ///
    /// <p>Request to query data initiation steps.</p>
    pub fn steps(mut self, input: crate::types::DataReplicationInitiationStep) -> Self {
        let mut v = self.steps.unwrap_or_default();
        v.push(input);
        self.steps = ::std::option::Option::Some(v);
        self
    }
    /// <p>Request to query data initiation steps.</p>
    pub fn set_steps(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataReplicationInitiationStep>>) -> Self {
        self.steps = input;
        self
    }
    /// <p>Request to query data initiation steps.</p>
    pub fn get_steps(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataReplicationInitiationStep>> {
        &self.steps
    }
    /// Consumes the builder and constructs a [`DataReplicationInitiation`](crate::types::DataReplicationInitiation).
    pub fn build(self) -> crate::types::DataReplicationInitiation {
        crate::types::DataReplicationInitiation {
            start_date_time: self.start_date_time,
            next_attempt_date_time: self.next_attempt_date_time,
            steps: self.steps,
        }
    }
}
