// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Job log.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobLog {
    /// <p>Job log event date and time.</p>
    #[doc(hidden)]
    pub log_date_time: std::option::Option<std::string::String>,
    /// <p>Job log event.</p>
    #[doc(hidden)]
    pub event: std::option::Option<crate::types::JobLogEvent>,
    /// <p>Job event data</p>
    #[doc(hidden)]
    pub event_data: std::option::Option<crate::types::JobLogEventData>,
}
impl JobLog {
    /// <p>Job log event date and time.</p>
    pub fn log_date_time(&self) -> std::option::Option<&str> {
        self.log_date_time.as_deref()
    }
    /// <p>Job log event.</p>
    pub fn event(&self) -> std::option::Option<&crate::types::JobLogEvent> {
        self.event.as_ref()
    }
    /// <p>Job event data</p>
    pub fn event_data(&self) -> std::option::Option<&crate::types::JobLogEventData> {
        self.event_data.as_ref()
    }
}
impl JobLog {
    /// Creates a new builder-style object to manufacture [`JobLog`](crate::types::JobLog).
    pub fn builder() -> crate::types::builders::JobLogBuilder {
        crate::types::builders::JobLogBuilder::default()
    }
}

/// A builder for [`JobLog`](crate::types::JobLog).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobLogBuilder {
    pub(crate) log_date_time: std::option::Option<std::string::String>,
    pub(crate) event: std::option::Option<crate::types::JobLogEvent>,
    pub(crate) event_data: std::option::Option<crate::types::JobLogEventData>,
}
impl JobLogBuilder {
    /// <p>Job log event date and time.</p>
    pub fn log_date_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_date_time = Some(input.into());
        self
    }
    /// <p>Job log event date and time.</p>
    pub fn set_log_date_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_date_time = input;
        self
    }
    /// <p>Job log event.</p>
    pub fn event(mut self, input: crate::types::JobLogEvent) -> Self {
        self.event = Some(input);
        self
    }
    /// <p>Job log event.</p>
    pub fn set_event(mut self, input: std::option::Option<crate::types::JobLogEvent>) -> Self {
        self.event = input;
        self
    }
    /// <p>Job event data</p>
    pub fn event_data(mut self, input: crate::types::JobLogEventData) -> Self {
        self.event_data = Some(input);
        self
    }
    /// <p>Job event data</p>
    pub fn set_event_data(
        mut self,
        input: std::option::Option<crate::types::JobLogEventData>,
    ) -> Self {
        self.event_data = input;
        self
    }
    /// Consumes the builder and constructs a [`JobLog`](crate::types::JobLog).
    pub fn build(self) -> crate::types::JobLog {
        crate::types::JobLog {
            log_date_time: self.log_date_time,
            event: self.event,
            event_data: self.event_data,
        }
    }
}
