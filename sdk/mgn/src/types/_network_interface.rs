// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Network interface.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NetworkInterface {
    /// <p>Network interface Mac address.</p>
    #[doc(hidden)]
    pub mac_address: std::option::Option<std::string::String>,
    /// <p>Network interface IPs.</p>
    #[doc(hidden)]
    pub ips: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Network interface primary IP.</p>
    #[doc(hidden)]
    pub is_primary: std::option::Option<bool>,
}
impl NetworkInterface {
    /// <p>Network interface Mac address.</p>
    pub fn mac_address(&self) -> std::option::Option<&str> {
        self.mac_address.as_deref()
    }
    /// <p>Network interface IPs.</p>
    pub fn ips(&self) -> std::option::Option<&[std::string::String]> {
        self.ips.as_deref()
    }
    /// <p>Network interface primary IP.</p>
    pub fn is_primary(&self) -> std::option::Option<bool> {
        self.is_primary
    }
}
impl NetworkInterface {
    /// Creates a new builder-style object to manufacture [`NetworkInterface`](crate::types::NetworkInterface).
    pub fn builder() -> crate::types::builders::NetworkInterfaceBuilder {
        crate::types::builders::NetworkInterfaceBuilder::default()
    }
}

/// A builder for [`NetworkInterface`](crate::types::NetworkInterface).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NetworkInterfaceBuilder {
    pub(crate) mac_address: std::option::Option<std::string::String>,
    pub(crate) ips: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) is_primary: std::option::Option<bool>,
}
impl NetworkInterfaceBuilder {
    /// <p>Network interface Mac address.</p>
    pub fn mac_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.mac_address = Some(input.into());
        self
    }
    /// <p>Network interface Mac address.</p>
    pub fn set_mac_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mac_address = input;
        self
    }
    /// Appends an item to `ips`.
    ///
    /// To override the contents of this collection use [`set_ips`](Self::set_ips).
    ///
    /// <p>Network interface IPs.</p>
    pub fn ips(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.ips.unwrap_or_default();
        v.push(input.into());
        self.ips = Some(v);
        self
    }
    /// <p>Network interface IPs.</p>
    pub fn set_ips(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.ips = input;
        self
    }
    /// <p>Network interface primary IP.</p>
    pub fn is_primary(mut self, input: bool) -> Self {
        self.is_primary = Some(input);
        self
    }
    /// <p>Network interface primary IP.</p>
    pub fn set_is_primary(mut self, input: std::option::Option<bool>) -> Self {
        self.is_primary = input;
        self
    }
    /// Consumes the builder and constructs a [`NetworkInterface`](crate::types::NetworkInterface).
    pub fn build(self) -> crate::types::NetworkInterface {
        crate::types::NetworkInterface {
            mac_address: self.mac_address,
            ips: self.ips,
            is_primary: self.is_primary,
        }
    }
}
