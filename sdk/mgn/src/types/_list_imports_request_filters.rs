// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>List imports request filters.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListImportsRequestFilters {
    /// <p>List imports request filters import IDs.</p>
    pub import_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ListImportsRequestFilters {
    /// <p>List imports request filters import IDs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.import_ids.is_none()`.
    pub fn import_ids(&self) -> &[::std::string::String] {
        self.import_ids.as_deref().unwrap_or_default()
    }
}
impl ListImportsRequestFilters {
    /// Creates a new builder-style object to manufacture [`ListImportsRequestFilters`](crate::types::ListImportsRequestFilters).
    pub fn builder() -> crate::types::builders::ListImportsRequestFiltersBuilder {
        crate::types::builders::ListImportsRequestFiltersBuilder::default()
    }
}

/// A builder for [`ListImportsRequestFilters`](crate::types::ListImportsRequestFilters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListImportsRequestFiltersBuilder {
    pub(crate) import_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ListImportsRequestFiltersBuilder {
    /// Appends an item to `import_ids`.
    ///
    /// To override the contents of this collection use [`set_import_ids`](Self::set_import_ids).
    ///
    /// <p>List imports request filters import IDs.</p>
    pub fn import_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.import_ids.unwrap_or_default();
        v.push(input.into());
        self.import_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>List imports request filters import IDs.</p>
    pub fn set_import_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.import_ids = input;
        self
    }
    /// <p>List imports request filters import IDs.</p>
    pub fn get_import_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.import_ids
    }
    /// Consumes the builder and constructs a [`ListImportsRequestFilters`](crate::types::ListImportsRequestFilters).
    pub fn build(self) -> crate::types::ListImportsRequestFilters {
        crate::types::ListImportsRequestFilters { import_ids: self.import_ids }
    }
}
