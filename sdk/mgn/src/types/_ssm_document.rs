// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>AWS Systems Manager Document.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SsmDocument {
    /// <p>User-friendly name for the AWS Systems Manager Document.</p>
    pub action_name: ::std::string::String,
    /// <p>AWS Systems Manager Document name or full ARN.</p>
    pub ssm_document_name: ::std::string::String,
    /// <p>AWS Systems Manager Document timeout seconds.</p>
    pub timeout_seconds: i32,
    /// <p>If true, Cutover will not be enabled if the document has failed.</p>
    pub must_succeed_for_cutover: ::std::option::Option<bool>,
    /// <p>AWS Systems Manager Document parameters.</p>
    pub parameters:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::SsmParameterStoreParameter>>>,
    /// <p>AWS Systems Manager Document external parameters.</p>
    pub external_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SsmExternalParameter>>,
}
impl SsmDocument {
    /// <p>User-friendly name for the AWS Systems Manager Document.</p>
    pub fn action_name(&self) -> &str {
        use std::ops::Deref;
        self.action_name.deref()
    }
    /// <p>AWS Systems Manager Document name or full ARN.</p>
    pub fn ssm_document_name(&self) -> &str {
        use std::ops::Deref;
        self.ssm_document_name.deref()
    }
    /// <p>AWS Systems Manager Document timeout seconds.</p>
    pub fn timeout_seconds(&self) -> i32 {
        self.timeout_seconds
    }
    /// <p>If true, Cutover will not be enabled if the document has failed.</p>
    pub fn must_succeed_for_cutover(&self) -> ::std::option::Option<bool> {
        self.must_succeed_for_cutover
    }
    /// <p>AWS Systems Manager Document parameters.</p>
    pub fn parameters(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::SsmParameterStoreParameter>>> {
        self.parameters.as_ref()
    }
    /// <p>AWS Systems Manager Document external parameters.</p>
    pub fn external_parameters(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::SsmExternalParameter>> {
        self.external_parameters.as_ref()
    }
}
impl SsmDocument {
    /// Creates a new builder-style object to manufacture [`SsmDocument`](crate::types::SsmDocument).
    pub fn builder() -> crate::types::builders::SsmDocumentBuilder {
        crate::types::builders::SsmDocumentBuilder::default()
    }
}

/// A builder for [`SsmDocument`](crate::types::SsmDocument).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SsmDocumentBuilder {
    pub(crate) action_name: ::std::option::Option<::std::string::String>,
    pub(crate) ssm_document_name: ::std::option::Option<::std::string::String>,
    pub(crate) timeout_seconds: ::std::option::Option<i32>,
    pub(crate) must_succeed_for_cutover: ::std::option::Option<bool>,
    pub(crate) parameters:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::SsmParameterStoreParameter>>>,
    pub(crate) external_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SsmExternalParameter>>,
}
impl SsmDocumentBuilder {
    /// <p>User-friendly name for the AWS Systems Manager Document.</p>
    /// This field is required.
    pub fn action_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>User-friendly name for the AWS Systems Manager Document.</p>
    pub fn set_action_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_name = input;
        self
    }
    /// <p>User-friendly name for the AWS Systems Manager Document.</p>
    pub fn get_action_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_name
    }
    /// <p>AWS Systems Manager Document name or full ARN.</p>
    /// This field is required.
    pub fn ssm_document_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ssm_document_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>AWS Systems Manager Document name or full ARN.</p>
    pub fn set_ssm_document_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ssm_document_name = input;
        self
    }
    /// <p>AWS Systems Manager Document name or full ARN.</p>
    pub fn get_ssm_document_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.ssm_document_name
    }
    /// <p>AWS Systems Manager Document timeout seconds.</p>
    pub fn timeout_seconds(mut self, input: i32) -> Self {
        self.timeout_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>AWS Systems Manager Document timeout seconds.</p>
    pub fn set_timeout_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timeout_seconds = input;
        self
    }
    /// <p>AWS Systems Manager Document timeout seconds.</p>
    pub fn get_timeout_seconds(&self) -> &::std::option::Option<i32> {
        &self.timeout_seconds
    }
    /// <p>If true, Cutover will not be enabled if the document has failed.</p>
    pub fn must_succeed_for_cutover(mut self, input: bool) -> Self {
        self.must_succeed_for_cutover = ::std::option::Option::Some(input);
        self
    }
    /// <p>If true, Cutover will not be enabled if the document has failed.</p>
    pub fn set_must_succeed_for_cutover(mut self, input: ::std::option::Option<bool>) -> Self {
        self.must_succeed_for_cutover = input;
        self
    }
    /// <p>If true, Cutover will not be enabled if the document has failed.</p>
    pub fn get_must_succeed_for_cutover(&self) -> &::std::option::Option<bool> {
        &self.must_succeed_for_cutover
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>AWS Systems Manager Document parameters.</p>
    pub fn parameters(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: ::std::vec::Vec<crate::types::SsmParameterStoreParameter>,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>AWS Systems Manager Document parameters.</p>
    pub fn set_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::SsmParameterStoreParameter>>>,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// <p>AWS Systems Manager Document parameters.</p>
    pub fn get_parameters(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::SsmParameterStoreParameter>>> {
        &self.parameters
    }
    /// Adds a key-value pair to `external_parameters`.
    ///
    /// To override the contents of this collection use [`set_external_parameters`](Self::set_external_parameters).
    ///
    /// <p>AWS Systems Manager Document external parameters.</p>
    pub fn external_parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::SsmExternalParameter) -> Self {
        let mut hash_map = self.external_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.external_parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>AWS Systems Manager Document external parameters.</p>
    pub fn set_external_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SsmExternalParameter>>,
    ) -> Self {
        self.external_parameters = input;
        self
    }
    /// <p>AWS Systems Manager Document external parameters.</p>
    pub fn get_external_parameters(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SsmExternalParameter>> {
        &self.external_parameters
    }
    /// Consumes the builder and constructs a [`SsmDocument`](crate::types::SsmDocument).
    /// This method will fail if any of the following fields are not set:
    /// - [`action_name`](crate::types::builders::SsmDocumentBuilder::action_name)
    /// - [`ssm_document_name`](crate::types::builders::SsmDocumentBuilder::ssm_document_name)
    pub fn build(self) -> ::std::result::Result<crate::types::SsmDocument, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SsmDocument {
            action_name: self.action_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "action_name",
                    "action_name was not specified but it is required when building SsmDocument",
                )
            })?,
            ssm_document_name: self.ssm_document_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ssm_document_name",
                    "ssm_document_name was not specified but it is required when building SsmDocument",
                )
            })?,
            timeout_seconds: self.timeout_seconds.unwrap_or_default(),
            must_succeed_for_cutover: self.must_succeed_for_cutover,
            parameters: self.parameters,
            external_parameters: self.external_parameters,
        })
    }
}
