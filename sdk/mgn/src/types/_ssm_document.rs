// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>AWS Systems Manager Document.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SsmDocument {
    /// <p>User-friendly name for the AWS Systems Manager Document.</p>
    #[doc(hidden)]
    pub action_name: std::option::Option<std::string::String>,
    /// <p>AWS Systems Manager Document name or full ARN.</p>
    #[doc(hidden)]
    pub ssm_document_name: std::option::Option<std::string::String>,
    /// <p>AWS Systems Manager Document timeout seconds.</p>
    #[doc(hidden)]
    pub timeout_seconds: i32,
    /// <p>If true, Cutover will not be enabled if the document has failed.</p>
    #[doc(hidden)]
    pub must_succeed_for_cutover: std::option::Option<bool>,
    /// <p>AWS Systems Manager Document parameters.</p>
    #[doc(hidden)]
    pub parameters: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            std::vec::Vec<crate::types::SsmParameterStoreParameter>,
        >,
    >,
}
impl SsmDocument {
    /// <p>User-friendly name for the AWS Systems Manager Document.</p>
    pub fn action_name(&self) -> std::option::Option<&str> {
        self.action_name.as_deref()
    }
    /// <p>AWS Systems Manager Document name or full ARN.</p>
    pub fn ssm_document_name(&self) -> std::option::Option<&str> {
        self.ssm_document_name.as_deref()
    }
    /// <p>AWS Systems Manager Document timeout seconds.</p>
    pub fn timeout_seconds(&self) -> i32 {
        self.timeout_seconds
    }
    /// <p>If true, Cutover will not be enabled if the document has failed.</p>
    pub fn must_succeed_for_cutover(&self) -> std::option::Option<bool> {
        self.must_succeed_for_cutover
    }
    /// <p>AWS Systems Manager Document parameters.</p>
    pub fn parameters(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            std::string::String,
            std::vec::Vec<crate::types::SsmParameterStoreParameter>,
        >,
    > {
        self.parameters.as_ref()
    }
}
impl SsmDocument {
    /// Creates a new builder-style object to manufacture [`SsmDocument`](crate::types::SsmDocument).
    pub fn builder() -> crate::types::builders::SsmDocumentBuilder {
        crate::types::builders::SsmDocumentBuilder::default()
    }
}

/// A builder for [`SsmDocument`](crate::types::SsmDocument).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SsmDocumentBuilder {
    pub(crate) action_name: std::option::Option<std::string::String>,
    pub(crate) ssm_document_name: std::option::Option<std::string::String>,
    pub(crate) timeout_seconds: std::option::Option<i32>,
    pub(crate) must_succeed_for_cutover: std::option::Option<bool>,
    pub(crate) parameters: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            std::vec::Vec<crate::types::SsmParameterStoreParameter>,
        >,
    >,
}
impl SsmDocumentBuilder {
    /// <p>User-friendly name for the AWS Systems Manager Document.</p>
    pub fn action_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.action_name = Some(input.into());
        self
    }
    /// <p>User-friendly name for the AWS Systems Manager Document.</p>
    pub fn set_action_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.action_name = input;
        self
    }
    /// <p>AWS Systems Manager Document name or full ARN.</p>
    pub fn ssm_document_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.ssm_document_name = Some(input.into());
        self
    }
    /// <p>AWS Systems Manager Document name or full ARN.</p>
    pub fn set_ssm_document_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ssm_document_name = input;
        self
    }
    /// <p>AWS Systems Manager Document timeout seconds.</p>
    pub fn timeout_seconds(mut self, input: i32) -> Self {
        self.timeout_seconds = Some(input);
        self
    }
    /// <p>AWS Systems Manager Document timeout seconds.</p>
    pub fn set_timeout_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.timeout_seconds = input;
        self
    }
    /// <p>If true, Cutover will not be enabled if the document has failed.</p>
    pub fn must_succeed_for_cutover(mut self, input: bool) -> Self {
        self.must_succeed_for_cutover = Some(input);
        self
    }
    /// <p>If true, Cutover will not be enabled if the document has failed.</p>
    pub fn set_must_succeed_for_cutover(mut self, input: std::option::Option<bool>) -> Self {
        self.must_succeed_for_cutover = input;
        self
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>AWS Systems Manager Document parameters.</p>
    pub fn parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<crate::types::SsmParameterStoreParameter>,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.parameters = Some(hash_map);
        self
    }
    /// <p>AWS Systems Manager Document parameters.</p>
    pub fn set_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                std::vec::Vec<crate::types::SsmParameterStoreParameter>,
            >,
        >,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// Consumes the builder and constructs a [`SsmDocument`](crate::types::SsmDocument).
    pub fn build(self) -> crate::types::SsmDocument {
        crate::types::SsmDocument {
            action_name: self.action_name,
            ssm_document_name: self.ssm_document_name,
            timeout_seconds: self.timeout_seconds.unwrap_or_default(),
            must_succeed_for_cutover: self.must_succeed_for_cutover,
            parameters: self.parameters,
        }
    }
}
