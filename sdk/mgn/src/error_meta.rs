// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>Operating denied due to a file permission or access check error.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The request could not be completed due to a conflict with the current state of the target resource.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The server encountered an unexpected condition that prevented it from fulfilling the request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>Resource not found exception.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request could not be completed because its exceeded the service quota.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>Reached throttling quota exception.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>Uninitialized account exception.</p>
    UninitializedAccountException(crate::types::error::UninitializedAccountException),
    /// <p>Validate exception.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UninitializedAccountException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::archive_application::ArchiveApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::archive_application::ArchiveApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::archive_application::ArchiveApplicationError> for Error {
    fn from(err: crate::operation::archive_application::ArchiveApplicationError) -> Self {
        match err {
            crate::operation::archive_application::ArchiveApplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::archive_application::ArchiveApplicationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::archive_application::ArchiveApplicationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::archive_application::ArchiveApplicationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::archive_application::ArchiveApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::archive_wave::ArchiveWaveError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::archive_wave::ArchiveWaveError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::archive_wave::ArchiveWaveError> for Error {
    fn from(err: crate::operation::archive_wave::ArchiveWaveError) -> Self {
        match err {
            crate::operation::archive_wave::ArchiveWaveError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::archive_wave::ArchiveWaveError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::archive_wave::ArchiveWaveError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::archive_wave::ArchiveWaveError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::archive_wave::ArchiveWaveError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_applications::AssociateApplicationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_applications::AssociateApplicationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_applications::AssociateApplicationsError> for Error {
    fn from(err: crate::operation::associate_applications::AssociateApplicationsError) -> Self {
        match err {
            crate::operation::associate_applications::AssociateApplicationsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_applications::AssociateApplicationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_applications::AssociateApplicationsError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::associate_applications::AssociateApplicationsError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::associate_applications::AssociateApplicationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_source_servers::AssociateSourceServersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_source_servers::AssociateSourceServersError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_source_servers::AssociateSourceServersError> for Error {
    fn from(err: crate::operation::associate_source_servers::AssociateSourceServersError) -> Self {
        match err {
            crate::operation::associate_source_servers::AssociateSourceServersError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_source_servers::AssociateSourceServersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_source_servers::AssociateSourceServersError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::associate_source_servers::AssociateSourceServersError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::associate_source_servers::AssociateSourceServersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::change_server_life_cycle_state::ChangeServerLifeCycleStateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::change_server_life_cycle_state::ChangeServerLifeCycleStateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::change_server_life_cycle_state::ChangeServerLifeCycleStateError> for Error {
    fn from(err: crate::operation::change_server_life_cycle_state::ChangeServerLifeCycleStateError) -> Self {
        match err {
            crate::operation::change_server_life_cycle_state::ChangeServerLifeCycleStateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::change_server_life_cycle_state::ChangeServerLifeCycleStateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::change_server_life_cycle_state::ChangeServerLifeCycleStateError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::change_server_life_cycle_state::ChangeServerLifeCycleStateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::change_server_life_cycle_state::ChangeServerLifeCycleStateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_application::CreateApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_application::CreateApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_application::CreateApplicationError> for Error {
    fn from(err: crate::operation::create_application::CreateApplicationError) -> Self {
        match err {
            crate::operation::create_application::CreateApplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_application::CreateApplicationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_application::CreateApplicationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::create_application::CreateApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_connector::CreateConnectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_connector::CreateConnectorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_connector::CreateConnectorError> for Error {
    fn from(err: crate::operation::create_connector::CreateConnectorError) -> Self {
        match err {
            crate::operation::create_connector::CreateConnectorError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::create_connector::CreateConnectorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_connector::CreateConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateError> for Error {
    fn from(err: crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateError) -> Self {
        match err {
            crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError> for Error {
    fn from(err: crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError) -> Self {
        match err {
            crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_wave::CreateWaveError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_wave::CreateWaveError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_wave::CreateWaveError> for Error {
    fn from(err: crate::operation::create_wave::CreateWaveError) -> Self {
        match err {
            crate::operation::create_wave::CreateWaveError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_wave::CreateWaveError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_wave::CreateWaveError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::create_wave::CreateWaveError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_application::DeleteApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_application::DeleteApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_application::DeleteApplicationError> for Error {
    fn from(err: crate::operation::delete_application::DeleteApplicationError) -> Self {
        match err {
            crate::operation::delete_application::DeleteApplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_application::DeleteApplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_application::DeleteApplicationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::delete_application::DeleteApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_connector::DeleteConnectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_connector::DeleteConnectorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_connector::DeleteConnectorError> for Error {
    fn from(err: crate::operation::delete_connector::DeleteConnectorError) -> Self {
        match err {
            crate::operation::delete_connector::DeleteConnectorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_connector::DeleteConnectorError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::delete_connector::DeleteConnectorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_connector::DeleteConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_job::DeleteJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_job::DeleteJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_job::DeleteJobError> for Error {
    fn from(err: crate::operation::delete_job::DeleteJobError) -> Self {
        match err {
            crate::operation::delete_job::DeleteJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_job::DeleteJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_job::DeleteJobError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::delete_job::DeleteJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_launch_configuration_template::DeleteLaunchConfigurationTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_launch_configuration_template::DeleteLaunchConfigurationTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_launch_configuration_template::DeleteLaunchConfigurationTemplateError> for Error {
    fn from(err: crate::operation::delete_launch_configuration_template::DeleteLaunchConfigurationTemplateError) -> Self {
        match err {
            crate::operation::delete_launch_configuration_template::DeleteLaunchConfigurationTemplateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_launch_configuration_template::DeleteLaunchConfigurationTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_launch_configuration_template::DeleteLaunchConfigurationTemplateError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::delete_launch_configuration_template::DeleteLaunchConfigurationTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError> for Error {
    fn from(err: crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError) -> Self {
        match err {
            crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_source_server::DeleteSourceServerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_source_server::DeleteSourceServerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_source_server::DeleteSourceServerError> for Error {
    fn from(err: crate::operation::delete_source_server::DeleteSourceServerError) -> Self {
        match err {
            crate::operation::delete_source_server::DeleteSourceServerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_source_server::DeleteSourceServerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_source_server::DeleteSourceServerError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::delete_source_server::DeleteSourceServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_vcenter_client::DeleteVcenterClientError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_vcenter_client::DeleteVcenterClientError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_vcenter_client::DeleteVcenterClientError> for Error {
    fn from(err: crate::operation::delete_vcenter_client::DeleteVcenterClientError) -> Self {
        match err {
            crate::operation::delete_vcenter_client::DeleteVcenterClientError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_vcenter_client::DeleteVcenterClientError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::delete_vcenter_client::DeleteVcenterClientError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_vcenter_client::DeleteVcenterClientError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_wave::DeleteWaveError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_wave::DeleteWaveError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_wave::DeleteWaveError> for Error {
    fn from(err: crate::operation::delete_wave::DeleteWaveError) -> Self {
        match err {
            crate::operation::delete_wave::DeleteWaveError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_wave::DeleteWaveError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_wave::DeleteWaveError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::delete_wave::DeleteWaveError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_job_log_items::DescribeJobLogItemsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_job_log_items::DescribeJobLogItemsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_job_log_items::DescribeJobLogItemsError> for Error {
    fn from(err: crate::operation::describe_job_log_items::DescribeJobLogItemsError) -> Self {
        match err {
            crate::operation::describe_job_log_items::DescribeJobLogItemsError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::describe_job_log_items::DescribeJobLogItemsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_job_log_items::DescribeJobLogItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_jobs::DescribeJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_jobs::DescribeJobsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_jobs::DescribeJobsError> for Error {
    fn from(err: crate::operation::describe_jobs::DescribeJobsError) -> Self {
        match err {
            crate::operation::describe_jobs::DescribeJobsError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::describe_jobs::DescribeJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_jobs::DescribeJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_launch_configuration_templates::DescribeLaunchConfigurationTemplatesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_launch_configuration_templates::DescribeLaunchConfigurationTemplatesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_launch_configuration_templates::DescribeLaunchConfigurationTemplatesError> for Error {
    fn from(err: crate::operation::describe_launch_configuration_templates::DescribeLaunchConfigurationTemplatesError) -> Self {
        match err {
            crate::operation::describe_launch_configuration_templates::DescribeLaunchConfigurationTemplatesError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_launch_configuration_templates::DescribeLaunchConfigurationTemplatesError::UninitializedAccountException(
                inner,
            ) => Error::UninitializedAccountException(inner),
            crate::operation::describe_launch_configuration_templates::DescribeLaunchConfigurationTemplatesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_launch_configuration_templates::DescribeLaunchConfigurationTemplatesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError> for Error {
    fn from(err: crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError) -> Self {
        match err {
            crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_source_servers::DescribeSourceServersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_source_servers::DescribeSourceServersError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_source_servers::DescribeSourceServersError> for Error {
    fn from(err: crate::operation::describe_source_servers::DescribeSourceServersError) -> Self {
        match err {
            crate::operation::describe_source_servers::DescribeSourceServersError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::describe_source_servers::DescribeSourceServersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_source_servers::DescribeSourceServersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_vcenter_clients::DescribeVcenterClientsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_vcenter_clients::DescribeVcenterClientsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_vcenter_clients::DescribeVcenterClientsError> for Error {
    fn from(err: crate::operation::describe_vcenter_clients::DescribeVcenterClientsError) -> Self {
        match err {
            crate::operation::describe_vcenter_clients::DescribeVcenterClientsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_vcenter_clients::DescribeVcenterClientsError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::describe_vcenter_clients::DescribeVcenterClientsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_vcenter_clients::DescribeVcenterClientsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_applications::DisassociateApplicationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_applications::DisassociateApplicationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_applications::DisassociateApplicationsError> for Error {
    fn from(err: crate::operation::disassociate_applications::DisassociateApplicationsError) -> Self {
        match err {
            crate::operation::disassociate_applications::DisassociateApplicationsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disassociate_applications::DisassociateApplicationsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_applications::DisassociateApplicationsError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::disassociate_applications::DisassociateApplicationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_source_servers::DisassociateSourceServersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_source_servers::DisassociateSourceServersError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_source_servers::DisassociateSourceServersError> for Error {
    fn from(err: crate::operation::disassociate_source_servers::DisassociateSourceServersError) -> Self {
        match err {
            crate::operation::disassociate_source_servers::DisassociateSourceServersError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::disassociate_source_servers::DisassociateSourceServersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_source_servers::DisassociateSourceServersError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::disassociate_source_servers::DisassociateSourceServersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disconnect_from_service::DisconnectFromServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disconnect_from_service::DisconnectFromServiceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disconnect_from_service::DisconnectFromServiceError> for Error {
    fn from(err: crate::operation::disconnect_from_service::DisconnectFromServiceError) -> Self {
        match err {
            crate::operation::disconnect_from_service::DisconnectFromServiceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disconnect_from_service::DisconnectFromServiceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disconnect_from_service::DisconnectFromServiceError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::disconnect_from_service::DisconnectFromServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::finalize_cutover::FinalizeCutoverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::finalize_cutover::FinalizeCutoverError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::finalize_cutover::FinalizeCutoverError> for Error {
    fn from(err: crate::operation::finalize_cutover::FinalizeCutoverError) -> Self {
        match err {
            crate::operation::finalize_cutover::FinalizeCutoverError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::finalize_cutover::FinalizeCutoverError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::finalize_cutover::FinalizeCutoverError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::finalize_cutover::FinalizeCutoverError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::finalize_cutover::FinalizeCutoverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_launch_configuration::GetLaunchConfigurationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_launch_configuration::GetLaunchConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_launch_configuration::GetLaunchConfigurationError> for Error {
    fn from(err: crate::operation::get_launch_configuration::GetLaunchConfigurationError) -> Self {
        match err {
            crate::operation::get_launch_configuration::GetLaunchConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_launch_configuration::GetLaunchConfigurationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::get_launch_configuration::GetLaunchConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_replication_configuration::GetReplicationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_replication_configuration::GetReplicationConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_replication_configuration::GetReplicationConfigurationError> for Error {
    fn from(err: crate::operation::get_replication_configuration::GetReplicationConfigurationError) -> Self {
        match err {
            crate::operation::get_replication_configuration::GetReplicationConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_replication_configuration::GetReplicationConfigurationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::get_replication_configuration::GetReplicationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::initialize_service::InitializeServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::initialize_service::InitializeServiceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::initialize_service::InitializeServiceError> for Error {
    fn from(err: crate::operation::initialize_service::InitializeServiceError) -> Self {
        match err {
            crate::operation::initialize_service::InitializeServiceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::initialize_service::InitializeServiceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::initialize_service::InitializeServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_applications::ListApplicationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_applications::ListApplicationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_applications::ListApplicationsError> for Error {
    fn from(err: crate::operation::list_applications::ListApplicationsError) -> Self {
        match err {
            crate::operation::list_applications::ListApplicationsError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::list_applications::ListApplicationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_connectors::ListConnectorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_connectors::ListConnectorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_connectors::ListConnectorsError> for Error {
    fn from(err: crate::operation::list_connectors::ListConnectorsError) -> Self {
        match err {
            crate::operation::list_connectors::ListConnectorsError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::list_connectors::ListConnectorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_connectors::ListConnectorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_export_errors::ListExportErrorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_export_errors::ListExportErrorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_export_errors::ListExportErrorsError> for Error {
    fn from(err: crate::operation::list_export_errors::ListExportErrorsError) -> Self {
        match err {
            crate::operation::list_export_errors::ListExportErrorsError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::list_export_errors::ListExportErrorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_export_errors::ListExportErrorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_exports::ListExportsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_exports::ListExportsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_exports::ListExportsError> for Error {
    fn from(err: crate::operation::list_exports::ListExportsError) -> Self {
        match err {
            crate::operation::list_exports::ListExportsError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::list_exports::ListExportsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_import_errors::ListImportErrorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_import_errors::ListImportErrorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_import_errors::ListImportErrorsError> for Error {
    fn from(err: crate::operation::list_import_errors::ListImportErrorsError) -> Self {
        match err {
            crate::operation::list_import_errors::ListImportErrorsError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::list_import_errors::ListImportErrorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_import_errors::ListImportErrorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_imports::ListImportsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_imports::ListImportsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_imports::ListImportsError> for Error {
    fn from(err: crate::operation::list_imports::ListImportsError) -> Self {
        match err {
            crate::operation::list_imports::ListImportsError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::list_imports::ListImportsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_imports::ListImportsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_managed_accounts::ListManagedAccountsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_managed_accounts::ListManagedAccountsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_managed_accounts::ListManagedAccountsError> for Error {
    fn from(err: crate::operation::list_managed_accounts::ListManagedAccountsError) -> Self {
        match err {
            crate::operation::list_managed_accounts::ListManagedAccountsError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::list_managed_accounts::ListManagedAccountsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_managed_accounts::ListManagedAccountsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_source_server_actions::ListSourceServerActionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_source_server_actions::ListSourceServerActionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_source_server_actions::ListSourceServerActionsError> for Error {
    fn from(err: crate::operation::list_source_server_actions::ListSourceServerActionsError) -> Self {
        match err {
            crate::operation::list_source_server_actions::ListSourceServerActionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_source_server_actions::ListSourceServerActionsError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::list_source_server_actions::ListSourceServerActionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_template_actions::ListTemplateActionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_template_actions::ListTemplateActionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_template_actions::ListTemplateActionsError> for Error {
    fn from(err: crate::operation::list_template_actions::ListTemplateActionsError) -> Self {
        match err {
            crate::operation::list_template_actions::ListTemplateActionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_template_actions::ListTemplateActionsError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::list_template_actions::ListTemplateActionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_waves::ListWavesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_waves::ListWavesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_waves::ListWavesError> for Error {
    fn from(err: crate::operation::list_waves::ListWavesError) -> Self {
        match err {
            crate::operation::list_waves::ListWavesError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::list_waves::ListWavesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::mark_as_archived::MarkAsArchivedError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::mark_as_archived::MarkAsArchivedError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::mark_as_archived::MarkAsArchivedError> for Error {
    fn from(err: crate::operation::mark_as_archived::MarkAsArchivedError) -> Self {
        match err {
            crate::operation::mark_as_archived::MarkAsArchivedError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::mark_as_archived::MarkAsArchivedError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::mark_as_archived::MarkAsArchivedError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::mark_as_archived::MarkAsArchivedError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::pause_replication::PauseReplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::pause_replication::PauseReplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::pause_replication::PauseReplicationError> for Error {
    fn from(err: crate::operation::pause_replication::PauseReplicationError) -> Self {
        match err {
            crate::operation::pause_replication::PauseReplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::pause_replication::PauseReplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::pause_replication::PauseReplicationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::pause_replication::PauseReplicationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::pause_replication::PauseReplicationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::pause_replication::PauseReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_source_server_action::PutSourceServerActionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_source_server_action::PutSourceServerActionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_source_server_action::PutSourceServerActionError> for Error {
    fn from(err: crate::operation::put_source_server_action::PutSourceServerActionError) -> Self {
        match err {
            crate::operation::put_source_server_action::PutSourceServerActionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_source_server_action::PutSourceServerActionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_source_server_action::PutSourceServerActionError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::put_source_server_action::PutSourceServerActionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_source_server_action::PutSourceServerActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_template_action::PutTemplateActionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_template_action::PutTemplateActionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_template_action::PutTemplateActionError> for Error {
    fn from(err: crate::operation::put_template_action::PutTemplateActionError) -> Self {
        match err {
            crate::operation::put_template_action::PutTemplateActionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_template_action::PutTemplateActionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_template_action::PutTemplateActionError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::put_template_action::PutTemplateActionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_template_action::PutTemplateActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_source_server_action::RemoveSourceServerActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_source_server_action::RemoveSourceServerActionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_source_server_action::RemoveSourceServerActionError> for Error {
    fn from(err: crate::operation::remove_source_server_action::RemoveSourceServerActionError) -> Self {
        match err {
            crate::operation::remove_source_server_action::RemoveSourceServerActionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::remove_source_server_action::RemoveSourceServerActionError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::remove_source_server_action::RemoveSourceServerActionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::remove_source_server_action::RemoveSourceServerActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_template_action::RemoveTemplateActionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_template_action::RemoveTemplateActionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_template_action::RemoveTemplateActionError> for Error {
    fn from(err: crate::operation::remove_template_action::RemoveTemplateActionError) -> Self {
        match err {
            crate::operation::remove_template_action::RemoveTemplateActionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::remove_template_action::RemoveTemplateActionError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::remove_template_action::RemoveTemplateActionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::remove_template_action::RemoveTemplateActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::resume_replication::ResumeReplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::resume_replication::ResumeReplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::resume_replication::ResumeReplicationError> for Error {
    fn from(err: crate::operation::resume_replication::ResumeReplicationError) -> Self {
        match err {
            crate::operation::resume_replication::ResumeReplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::resume_replication::ResumeReplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::resume_replication::ResumeReplicationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::resume_replication::ResumeReplicationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::resume_replication::ResumeReplicationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::resume_replication::ResumeReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::retry_data_replication::RetryDataReplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::retry_data_replication::RetryDataReplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::retry_data_replication::RetryDataReplicationError> for Error {
    fn from(err: crate::operation::retry_data_replication::RetryDataReplicationError) -> Self {
        match err {
            crate::operation::retry_data_replication::RetryDataReplicationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::retry_data_replication::RetryDataReplicationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::retry_data_replication::RetryDataReplicationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::retry_data_replication::RetryDataReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_cutover::StartCutoverError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_cutover::StartCutoverError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_cutover::StartCutoverError> for Error {
    fn from(err: crate::operation::start_cutover::StartCutoverError) -> Self {
        match err {
            crate::operation::start_cutover::StartCutoverError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_cutover::StartCutoverError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::start_cutover::StartCutoverError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_cutover::StartCutoverError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_export::StartExportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_export::StartExportError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_export::StartExportError> for Error {
    fn from(err: crate::operation::start_export::StartExportError) -> Self {
        match err {
            crate::operation::start_export::StartExportError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_export::StartExportError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::start_export::StartExportError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_export::StartExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_import::StartImportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_import::StartImportError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_import::StartImportError> for Error {
    fn from(err: crate::operation::start_import::StartImportError) -> Self {
        match err {
            crate::operation::start_import::StartImportError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_import::StartImportError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_import::StartImportError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_import::StartImportError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::start_import::StartImportError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_import::StartImportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_replication::StartReplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_replication::StartReplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_replication::StartReplicationError> for Error {
    fn from(err: crate::operation::start_replication::StartReplicationError) -> Self {
        match err {
            crate::operation::start_replication::StartReplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_replication::StartReplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_replication::StartReplicationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_replication::StartReplicationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::start_replication::StartReplicationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_replication::StartReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_test::StartTestError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_test::StartTestError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_test::StartTestError> for Error {
    fn from(err: crate::operation::start_test::StartTestError) -> Self {
        match err {
            crate::operation::start_test::StartTestError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_test::StartTestError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::start_test::StartTestError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_test::StartTestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_replication::StopReplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_replication::StopReplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_replication::StopReplicationError> for Error {
    fn from(err: crate::operation::stop_replication::StopReplicationError) -> Self {
        match err {
            crate::operation::stop_replication::StopReplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::stop_replication::StopReplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::stop_replication::StopReplicationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::stop_replication::StopReplicationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::stop_replication::StopReplicationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::stop_replication::StopReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::terminate_target_instances::TerminateTargetInstancesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::terminate_target_instances::TerminateTargetInstancesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::terminate_target_instances::TerminateTargetInstancesError> for Error {
    fn from(err: crate::operation::terminate_target_instances::TerminateTargetInstancesError) -> Self {
        match err {
            crate::operation::terminate_target_instances::TerminateTargetInstancesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::terminate_target_instances::TerminateTargetInstancesError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::terminate_target_instances::TerminateTargetInstancesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::terminate_target_instances::TerminateTargetInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::unarchive_application::UnarchiveApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::unarchive_application::UnarchiveApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::unarchive_application::UnarchiveApplicationError> for Error {
    fn from(err: crate::operation::unarchive_application::UnarchiveApplicationError) -> Self {
        match err {
            crate::operation::unarchive_application::UnarchiveApplicationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::unarchive_application::UnarchiveApplicationError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::unarchive_application::UnarchiveApplicationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::unarchive_application::UnarchiveApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::unarchive_wave::UnarchiveWaveError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::unarchive_wave::UnarchiveWaveError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::unarchive_wave::UnarchiveWaveError> for Error {
    fn from(err: crate::operation::unarchive_wave::UnarchiveWaveError) -> Self {
        match err {
            crate::operation::unarchive_wave::UnarchiveWaveError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::unarchive_wave::UnarchiveWaveError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::unarchive_wave::UnarchiveWaveError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::unarchive_wave::UnarchiveWaveError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_application::UpdateApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_application::UpdateApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_application::UpdateApplicationError> for Error {
    fn from(err: crate::operation::update_application::UpdateApplicationError) -> Self {
        match err {
            crate::operation::update_application::UpdateApplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_application::UpdateApplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_application::UpdateApplicationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::update_application::UpdateApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_connector::UpdateConnectorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_connector::UpdateConnectorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_connector::UpdateConnectorError> for Error {
    fn from(err: crate::operation::update_connector::UpdateConnectorError) -> Self {
        match err {
            crate::operation::update_connector::UpdateConnectorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_connector::UpdateConnectorError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::update_connector::UpdateConnectorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_connector::UpdateConnectorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_launch_configuration::UpdateLaunchConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_launch_configuration::UpdateLaunchConfigurationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_launch_configuration::UpdateLaunchConfigurationError> for Error {
    fn from(err: crate::operation::update_launch_configuration::UpdateLaunchConfigurationError) -> Self {
        match err {
            crate::operation::update_launch_configuration::UpdateLaunchConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_launch_configuration::UpdateLaunchConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_launch_configuration::UpdateLaunchConfigurationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::update_launch_configuration::UpdateLaunchConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_launch_configuration::UpdateLaunchConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateError> for Error {
    fn from(err: crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateError) -> Self {
        match err {
            crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_replication_configuration::UpdateReplicationConfigurationError> for Error {
    fn from(err: crate::operation::update_replication_configuration::UpdateReplicationConfigurationError) -> Self {
        match err {
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError> for Error {
    fn from(err: crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError) -> Self {
        match err {
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_source_server::UpdateSourceServerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_source_server::UpdateSourceServerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_source_server::UpdateSourceServerError> for Error {
    fn from(err: crate::operation::update_source_server::UpdateSourceServerError) -> Self {
        match err {
            crate::operation::update_source_server::UpdateSourceServerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_source_server::UpdateSourceServerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_source_server::UpdateSourceServerError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::update_source_server::UpdateSourceServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_source_server_replication_type::UpdateSourceServerReplicationTypeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_source_server_replication_type::UpdateSourceServerReplicationTypeError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_source_server_replication_type::UpdateSourceServerReplicationTypeError> for Error {
    fn from(err: crate::operation::update_source_server_replication_type::UpdateSourceServerReplicationTypeError) -> Self {
        match err {
            crate::operation::update_source_server_replication_type::UpdateSourceServerReplicationTypeError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_source_server_replication_type::UpdateSourceServerReplicationTypeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_source_server_replication_type::UpdateSourceServerReplicationTypeError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::update_source_server_replication_type::UpdateSourceServerReplicationTypeError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_source_server_replication_type::UpdateSourceServerReplicationTypeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_wave::UpdateWaveError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_wave::UpdateWaveError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_wave::UpdateWaveError> for Error {
    fn from(err: crate::operation::update_wave::UpdateWaveError) -> Self {
        match err {
            crate::operation::update_wave::UpdateWaveError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_wave::UpdateWaveError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_wave::UpdateWaveError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::update_wave::UpdateWaveError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::UninitializedAccountException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UninitializedAccountException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
