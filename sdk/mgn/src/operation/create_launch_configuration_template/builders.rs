// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_launch_configuration_template::_create_launch_configuration_template_output::CreateLaunchConfigurationTemplateOutputBuilder;

pub use crate::operation::create_launch_configuration_template::_create_launch_configuration_template_input::CreateLaunchConfigurationTemplateInputBuilder;

impl crate::operation::create_launch_configuration_template::builders::CreateLaunchConfigurationTemplateInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_launch_configuration_template();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateLaunchConfigurationTemplate`.
///
/// <p>Creates a new Launch Configuration Template.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateLaunchConfigurationTemplateFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_launch_configuration_template::builders::CreateLaunchConfigurationTemplateInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateOutput,
        crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateError,
    > for CreateLaunchConfigurationTemplateFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateOutput,
            crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateLaunchConfigurationTemplateFluentBuilder {
    /// Creates a new `CreateLaunchConfigurationTemplate`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateLaunchConfigurationTemplate as a reference.
    pub fn as_input(&self) -> &crate::operation::create_launch_configuration_template::builders::CreateLaunchConfigurationTemplateInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplate::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplate::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateOutput,
        crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Launch configuration template post launch actions.</p>
    pub fn post_launch_actions(mut self, input: crate::types::PostLaunchActions) -> Self {
        self.inner = self.inner.post_launch_actions(input);
        self
    }
    /// <p>Launch configuration template post launch actions.</p>
    pub fn set_post_launch_actions(mut self, input: ::std::option::Option<crate::types::PostLaunchActions>) -> Self {
        self.inner = self.inner.set_post_launch_actions(input);
        self
    }
    /// <p>Launch configuration template post launch actions.</p>
    pub fn get_post_launch_actions(&self) -> &::std::option::Option<crate::types::PostLaunchActions> {
        self.inner.get_post_launch_actions()
    }
    /// <p>Enable map auto tagging.</p>
    pub fn enable_map_auto_tagging(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_map_auto_tagging(input);
        self
    }
    /// <p>Enable map auto tagging.</p>
    pub fn set_enable_map_auto_tagging(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_map_auto_tagging(input);
        self
    }
    /// <p>Enable map auto tagging.</p>
    pub fn get_enable_map_auto_tagging(&self) -> &::std::option::Option<bool> {
        self.inner.get_enable_map_auto_tagging()
    }
    /// <p>Launch configuration template map auto tagging MPE ID.</p>
    pub fn map_auto_tagging_mpe_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.map_auto_tagging_mpe_id(input.into());
        self
    }
    /// <p>Launch configuration template map auto tagging MPE ID.</p>
    pub fn set_map_auto_tagging_mpe_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_map_auto_tagging_mpe_id(input);
        self
    }
    /// <p>Launch configuration template map auto tagging MPE ID.</p>
    pub fn get_map_auto_tagging_mpe_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_map_auto_tagging_mpe_id()
    }
    ///
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Request to associate tags during creation of a Launch Configuration Template.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>Request to associate tags during creation of a Launch Configuration Template.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Request to associate tags during creation of a Launch Configuration Template.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_tags()
    }
    /// <p>Launch disposition.</p>
    pub fn launch_disposition(mut self, input: crate::types::LaunchDisposition) -> Self {
        self.inner = self.inner.launch_disposition(input);
        self
    }
    /// <p>Launch disposition.</p>
    pub fn set_launch_disposition(mut self, input: ::std::option::Option<crate::types::LaunchDisposition>) -> Self {
        self.inner = self.inner.set_launch_disposition(input);
        self
    }
    /// <p>Launch disposition.</p>
    pub fn get_launch_disposition(&self) -> &::std::option::Option<crate::types::LaunchDisposition> {
        self.inner.get_launch_disposition()
    }
    /// <p>Target instance type right-sizing method.</p>
    pub fn target_instance_type_right_sizing_method(mut self, input: crate::types::TargetInstanceTypeRightSizingMethod) -> Self {
        self.inner = self.inner.target_instance_type_right_sizing_method(input);
        self
    }
    /// <p>Target instance type right-sizing method.</p>
    pub fn set_target_instance_type_right_sizing_method(
        mut self,
        input: ::std::option::Option<crate::types::TargetInstanceTypeRightSizingMethod>,
    ) -> Self {
        self.inner = self.inner.set_target_instance_type_right_sizing_method(input);
        self
    }
    /// <p>Target instance type right-sizing method.</p>
    pub fn get_target_instance_type_right_sizing_method(&self) -> &::std::option::Option<crate::types::TargetInstanceTypeRightSizingMethod> {
        self.inner.get_target_instance_type_right_sizing_method()
    }
    /// <p>Copy private Ip.</p>
    pub fn copy_private_ip(mut self, input: bool) -> Self {
        self.inner = self.inner.copy_private_ip(input);
        self
    }
    /// <p>Copy private Ip.</p>
    pub fn set_copy_private_ip(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_copy_private_ip(input);
        self
    }
    /// <p>Copy private Ip.</p>
    pub fn get_copy_private_ip(&self) -> &::std::option::Option<bool> {
        self.inner.get_copy_private_ip()
    }
    /// <p>Associate public Ip address.</p>
    pub fn associate_public_ip_address(mut self, input: bool) -> Self {
        self.inner = self.inner.associate_public_ip_address(input);
        self
    }
    /// <p>Associate public Ip address.</p>
    pub fn set_associate_public_ip_address(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_associate_public_ip_address(input);
        self
    }
    /// <p>Associate public Ip address.</p>
    pub fn get_associate_public_ip_address(&self) -> &::std::option::Option<bool> {
        self.inner.get_associate_public_ip_address()
    }
    /// <p>Copy tags.</p>
    pub fn copy_tags(mut self, input: bool) -> Self {
        self.inner = self.inner.copy_tags(input);
        self
    }
    /// <p>Copy tags.</p>
    pub fn set_copy_tags(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_copy_tags(input);
        self
    }
    /// <p>Copy tags.</p>
    pub fn get_copy_tags(&self) -> &::std::option::Option<bool> {
        self.inner.get_copy_tags()
    }
    /// <p>Configure Licensing.</p>
    pub fn licensing(mut self, input: crate::types::Licensing) -> Self {
        self.inner = self.inner.licensing(input);
        self
    }
    /// <p>Configure Licensing.</p>
    pub fn set_licensing(mut self, input: ::std::option::Option<crate::types::Licensing>) -> Self {
        self.inner = self.inner.set_licensing(input);
        self
    }
    /// <p>Configure Licensing.</p>
    pub fn get_licensing(&self) -> &::std::option::Option<crate::types::Licensing> {
        self.inner.get_licensing()
    }
    /// <p>Launch configuration template boot mode.</p>
    pub fn boot_mode(mut self, input: crate::types::BootMode) -> Self {
        self.inner = self.inner.boot_mode(input);
        self
    }
    /// <p>Launch configuration template boot mode.</p>
    pub fn set_boot_mode(mut self, input: ::std::option::Option<crate::types::BootMode>) -> Self {
        self.inner = self.inner.set_boot_mode(input);
        self
    }
    /// <p>Launch configuration template boot mode.</p>
    pub fn get_boot_mode(&self) -> &::std::option::Option<crate::types::BootMode> {
        self.inner.get_boot_mode()
    }
    /// <p>Small volume maximum size.</p>
    pub fn small_volume_max_size(mut self, input: i64) -> Self {
        self.inner = self.inner.small_volume_max_size(input);
        self
    }
    /// <p>Small volume maximum size.</p>
    pub fn set_small_volume_max_size(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_small_volume_max_size(input);
        self
    }
    /// <p>Small volume maximum size.</p>
    pub fn get_small_volume_max_size(&self) -> &::std::option::Option<i64> {
        self.inner.get_small_volume_max_size()
    }
    /// <p>Small volume config.</p>
    pub fn small_volume_conf(mut self, input: crate::types::LaunchTemplateDiskConf) -> Self {
        self.inner = self.inner.small_volume_conf(input);
        self
    }
    /// <p>Small volume config.</p>
    pub fn set_small_volume_conf(mut self, input: ::std::option::Option<crate::types::LaunchTemplateDiskConf>) -> Self {
        self.inner = self.inner.set_small_volume_conf(input);
        self
    }
    /// <p>Small volume config.</p>
    pub fn get_small_volume_conf(&self) -> &::std::option::Option<crate::types::LaunchTemplateDiskConf> {
        self.inner.get_small_volume_conf()
    }
    /// <p>Large volume config.</p>
    pub fn large_volume_conf(mut self, input: crate::types::LaunchTemplateDiskConf) -> Self {
        self.inner = self.inner.large_volume_conf(input);
        self
    }
    /// <p>Large volume config.</p>
    pub fn set_large_volume_conf(mut self, input: ::std::option::Option<crate::types::LaunchTemplateDiskConf>) -> Self {
        self.inner = self.inner.set_large_volume_conf(input);
        self
    }
    /// <p>Large volume config.</p>
    pub fn get_large_volume_conf(&self) -> &::std::option::Option<crate::types::LaunchTemplateDiskConf> {
        self.inner.get_large_volume_conf()
    }
}
