// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateLaunchConfigurationTemplateInput {
    /// <p>Launch configuration template post launch actions.</p>
    pub post_launch_actions: ::std::option::Option<crate::types::PostLaunchActions>,
    /// <p>Enable map auto tagging.</p>
    pub enable_map_auto_tagging: ::std::option::Option<bool>,
    /// <p>Launch configuration template map auto tagging MPE ID.</p>
    pub map_auto_tagging_mpe_id: ::std::option::Option<::std::string::String>,
    /// <p>Request to associate tags during creation of a Launch Configuration Template.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Launch disposition.</p>
    pub launch_disposition: ::std::option::Option<crate::types::LaunchDisposition>,
    /// <p>Target instance type right-sizing method.</p>
    pub target_instance_type_right_sizing_method: ::std::option::Option<crate::types::TargetInstanceTypeRightSizingMethod>,
    /// <p>Copy private Ip.</p>
    pub copy_private_ip: ::std::option::Option<bool>,
    /// <p>Associate public Ip address.</p>
    pub associate_public_ip_address: ::std::option::Option<bool>,
    /// <p>Copy tags.</p>
    pub copy_tags: ::std::option::Option<bool>,
    /// <p>Configure Licensing.</p>
    pub licensing: ::std::option::Option<crate::types::Licensing>,
    /// <p>Launch configuration template boot mode.</p>
    pub boot_mode: ::std::option::Option<crate::types::BootMode>,
    /// <p>Small volume maximum size.</p>
    pub small_volume_max_size: ::std::option::Option<i64>,
    /// <p>Small volume config.</p>
    pub small_volume_conf: ::std::option::Option<crate::types::LaunchTemplateDiskConf>,
    /// <p>Large volume config.</p>
    pub large_volume_conf: ::std::option::Option<crate::types::LaunchTemplateDiskConf>,
}
impl CreateLaunchConfigurationTemplateInput {
    /// <p>Launch configuration template post launch actions.</p>
    pub fn post_launch_actions(&self) -> ::std::option::Option<&crate::types::PostLaunchActions> {
        self.post_launch_actions.as_ref()
    }
    /// <p>Enable map auto tagging.</p>
    pub fn enable_map_auto_tagging(&self) -> ::std::option::Option<bool> {
        self.enable_map_auto_tagging
    }
    /// <p>Launch configuration template map auto tagging MPE ID.</p>
    pub fn map_auto_tagging_mpe_id(&self) -> ::std::option::Option<&str> {
        self.map_auto_tagging_mpe_id.as_deref()
    }
    /// <p>Request to associate tags during creation of a Launch Configuration Template.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>Launch disposition.</p>
    pub fn launch_disposition(&self) -> ::std::option::Option<&crate::types::LaunchDisposition> {
        self.launch_disposition.as_ref()
    }
    /// <p>Target instance type right-sizing method.</p>
    pub fn target_instance_type_right_sizing_method(&self) -> ::std::option::Option<&crate::types::TargetInstanceTypeRightSizingMethod> {
        self.target_instance_type_right_sizing_method.as_ref()
    }
    /// <p>Copy private Ip.</p>
    pub fn copy_private_ip(&self) -> ::std::option::Option<bool> {
        self.copy_private_ip
    }
    /// <p>Associate public Ip address.</p>
    pub fn associate_public_ip_address(&self) -> ::std::option::Option<bool> {
        self.associate_public_ip_address
    }
    /// <p>Copy tags.</p>
    pub fn copy_tags(&self) -> ::std::option::Option<bool> {
        self.copy_tags
    }
    /// <p>Configure Licensing.</p>
    pub fn licensing(&self) -> ::std::option::Option<&crate::types::Licensing> {
        self.licensing.as_ref()
    }
    /// <p>Launch configuration template boot mode.</p>
    pub fn boot_mode(&self) -> ::std::option::Option<&crate::types::BootMode> {
        self.boot_mode.as_ref()
    }
    /// <p>Small volume maximum size.</p>
    pub fn small_volume_max_size(&self) -> ::std::option::Option<i64> {
        self.small_volume_max_size
    }
    /// <p>Small volume config.</p>
    pub fn small_volume_conf(&self) -> ::std::option::Option<&crate::types::LaunchTemplateDiskConf> {
        self.small_volume_conf.as_ref()
    }
    /// <p>Large volume config.</p>
    pub fn large_volume_conf(&self) -> ::std::option::Option<&crate::types::LaunchTemplateDiskConf> {
        self.large_volume_conf.as_ref()
    }
}
impl ::std::fmt::Debug for CreateLaunchConfigurationTemplateInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLaunchConfigurationTemplateInput");
        formatter.field("post_launch_actions", &self.post_launch_actions);
        formatter.field("enable_map_auto_tagging", &self.enable_map_auto_tagging);
        formatter.field("map_auto_tagging_mpe_id", &self.map_auto_tagging_mpe_id);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("launch_disposition", &self.launch_disposition);
        formatter.field("target_instance_type_right_sizing_method", &self.target_instance_type_right_sizing_method);
        formatter.field("copy_private_ip", &self.copy_private_ip);
        formatter.field("associate_public_ip_address", &self.associate_public_ip_address);
        formatter.field("copy_tags", &self.copy_tags);
        formatter.field("licensing", &self.licensing);
        formatter.field("boot_mode", &self.boot_mode);
        formatter.field("small_volume_max_size", &self.small_volume_max_size);
        formatter.field("small_volume_conf", &self.small_volume_conf);
        formatter.field("large_volume_conf", &self.large_volume_conf);
        formatter.finish()
    }
}
impl CreateLaunchConfigurationTemplateInput {
    /// Creates a new builder-style object to manufacture [`CreateLaunchConfigurationTemplateInput`](crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateInput).
    pub fn builder() -> crate::operation::create_launch_configuration_template::builders::CreateLaunchConfigurationTemplateInputBuilder {
        crate::operation::create_launch_configuration_template::builders::CreateLaunchConfigurationTemplateInputBuilder::default()
    }
}

/// A builder for [`CreateLaunchConfigurationTemplateInput`](crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateLaunchConfigurationTemplateInputBuilder {
    pub(crate) post_launch_actions: ::std::option::Option<crate::types::PostLaunchActions>,
    pub(crate) enable_map_auto_tagging: ::std::option::Option<bool>,
    pub(crate) map_auto_tagging_mpe_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) launch_disposition: ::std::option::Option<crate::types::LaunchDisposition>,
    pub(crate) target_instance_type_right_sizing_method: ::std::option::Option<crate::types::TargetInstanceTypeRightSizingMethod>,
    pub(crate) copy_private_ip: ::std::option::Option<bool>,
    pub(crate) associate_public_ip_address: ::std::option::Option<bool>,
    pub(crate) copy_tags: ::std::option::Option<bool>,
    pub(crate) licensing: ::std::option::Option<crate::types::Licensing>,
    pub(crate) boot_mode: ::std::option::Option<crate::types::BootMode>,
    pub(crate) small_volume_max_size: ::std::option::Option<i64>,
    pub(crate) small_volume_conf: ::std::option::Option<crate::types::LaunchTemplateDiskConf>,
    pub(crate) large_volume_conf: ::std::option::Option<crate::types::LaunchTemplateDiskConf>,
}
impl CreateLaunchConfigurationTemplateInputBuilder {
    /// <p>Launch configuration template post launch actions.</p>
    pub fn post_launch_actions(mut self, input: crate::types::PostLaunchActions) -> Self {
        self.post_launch_actions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Launch configuration template post launch actions.</p>
    pub fn set_post_launch_actions(mut self, input: ::std::option::Option<crate::types::PostLaunchActions>) -> Self {
        self.post_launch_actions = input;
        self
    }
    /// <p>Launch configuration template post launch actions.</p>
    pub fn get_post_launch_actions(&self) -> &::std::option::Option<crate::types::PostLaunchActions> {
        &self.post_launch_actions
    }
    /// <p>Enable map auto tagging.</p>
    pub fn enable_map_auto_tagging(mut self, input: bool) -> Self {
        self.enable_map_auto_tagging = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enable map auto tagging.</p>
    pub fn set_enable_map_auto_tagging(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_map_auto_tagging = input;
        self
    }
    /// <p>Enable map auto tagging.</p>
    pub fn get_enable_map_auto_tagging(&self) -> &::std::option::Option<bool> {
        &self.enable_map_auto_tagging
    }
    /// <p>Launch configuration template map auto tagging MPE ID.</p>
    pub fn map_auto_tagging_mpe_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.map_auto_tagging_mpe_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Launch configuration template map auto tagging MPE ID.</p>
    pub fn set_map_auto_tagging_mpe_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.map_auto_tagging_mpe_id = input;
        self
    }
    /// <p>Launch configuration template map auto tagging MPE ID.</p>
    pub fn get_map_auto_tagging_mpe_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.map_auto_tagging_mpe_id
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Request to associate tags during creation of a Launch Configuration Template.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Request to associate tags during creation of a Launch Configuration Template.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Request to associate tags during creation of a Launch Configuration Template.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>Launch disposition.</p>
    pub fn launch_disposition(mut self, input: crate::types::LaunchDisposition) -> Self {
        self.launch_disposition = ::std::option::Option::Some(input);
        self
    }
    /// <p>Launch disposition.</p>
    pub fn set_launch_disposition(mut self, input: ::std::option::Option<crate::types::LaunchDisposition>) -> Self {
        self.launch_disposition = input;
        self
    }
    /// <p>Launch disposition.</p>
    pub fn get_launch_disposition(&self) -> &::std::option::Option<crate::types::LaunchDisposition> {
        &self.launch_disposition
    }
    /// <p>Target instance type right-sizing method.</p>
    pub fn target_instance_type_right_sizing_method(mut self, input: crate::types::TargetInstanceTypeRightSizingMethod) -> Self {
        self.target_instance_type_right_sizing_method = ::std::option::Option::Some(input);
        self
    }
    /// <p>Target instance type right-sizing method.</p>
    pub fn set_target_instance_type_right_sizing_method(
        mut self,
        input: ::std::option::Option<crate::types::TargetInstanceTypeRightSizingMethod>,
    ) -> Self {
        self.target_instance_type_right_sizing_method = input;
        self
    }
    /// <p>Target instance type right-sizing method.</p>
    pub fn get_target_instance_type_right_sizing_method(&self) -> &::std::option::Option<crate::types::TargetInstanceTypeRightSizingMethod> {
        &self.target_instance_type_right_sizing_method
    }
    /// <p>Copy private Ip.</p>
    pub fn copy_private_ip(mut self, input: bool) -> Self {
        self.copy_private_ip = ::std::option::Option::Some(input);
        self
    }
    /// <p>Copy private Ip.</p>
    pub fn set_copy_private_ip(mut self, input: ::std::option::Option<bool>) -> Self {
        self.copy_private_ip = input;
        self
    }
    /// <p>Copy private Ip.</p>
    pub fn get_copy_private_ip(&self) -> &::std::option::Option<bool> {
        &self.copy_private_ip
    }
    /// <p>Associate public Ip address.</p>
    pub fn associate_public_ip_address(mut self, input: bool) -> Self {
        self.associate_public_ip_address = ::std::option::Option::Some(input);
        self
    }
    /// <p>Associate public Ip address.</p>
    pub fn set_associate_public_ip_address(mut self, input: ::std::option::Option<bool>) -> Self {
        self.associate_public_ip_address = input;
        self
    }
    /// <p>Associate public Ip address.</p>
    pub fn get_associate_public_ip_address(&self) -> &::std::option::Option<bool> {
        &self.associate_public_ip_address
    }
    /// <p>Copy tags.</p>
    pub fn copy_tags(mut self, input: bool) -> Self {
        self.copy_tags = ::std::option::Option::Some(input);
        self
    }
    /// <p>Copy tags.</p>
    pub fn set_copy_tags(mut self, input: ::std::option::Option<bool>) -> Self {
        self.copy_tags = input;
        self
    }
    /// <p>Copy tags.</p>
    pub fn get_copy_tags(&self) -> &::std::option::Option<bool> {
        &self.copy_tags
    }
    /// <p>Configure Licensing.</p>
    pub fn licensing(mut self, input: crate::types::Licensing) -> Self {
        self.licensing = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configure Licensing.</p>
    pub fn set_licensing(mut self, input: ::std::option::Option<crate::types::Licensing>) -> Self {
        self.licensing = input;
        self
    }
    /// <p>Configure Licensing.</p>
    pub fn get_licensing(&self) -> &::std::option::Option<crate::types::Licensing> {
        &self.licensing
    }
    /// <p>Launch configuration template boot mode.</p>
    pub fn boot_mode(mut self, input: crate::types::BootMode) -> Self {
        self.boot_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Launch configuration template boot mode.</p>
    pub fn set_boot_mode(mut self, input: ::std::option::Option<crate::types::BootMode>) -> Self {
        self.boot_mode = input;
        self
    }
    /// <p>Launch configuration template boot mode.</p>
    pub fn get_boot_mode(&self) -> &::std::option::Option<crate::types::BootMode> {
        &self.boot_mode
    }
    /// <p>Small volume maximum size.</p>
    pub fn small_volume_max_size(mut self, input: i64) -> Self {
        self.small_volume_max_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>Small volume maximum size.</p>
    pub fn set_small_volume_max_size(mut self, input: ::std::option::Option<i64>) -> Self {
        self.small_volume_max_size = input;
        self
    }
    /// <p>Small volume maximum size.</p>
    pub fn get_small_volume_max_size(&self) -> &::std::option::Option<i64> {
        &self.small_volume_max_size
    }
    /// <p>Small volume config.</p>
    pub fn small_volume_conf(mut self, input: crate::types::LaunchTemplateDiskConf) -> Self {
        self.small_volume_conf = ::std::option::Option::Some(input);
        self
    }
    /// <p>Small volume config.</p>
    pub fn set_small_volume_conf(mut self, input: ::std::option::Option<crate::types::LaunchTemplateDiskConf>) -> Self {
        self.small_volume_conf = input;
        self
    }
    /// <p>Small volume config.</p>
    pub fn get_small_volume_conf(&self) -> &::std::option::Option<crate::types::LaunchTemplateDiskConf> {
        &self.small_volume_conf
    }
    /// <p>Large volume config.</p>
    pub fn large_volume_conf(mut self, input: crate::types::LaunchTemplateDiskConf) -> Self {
        self.large_volume_conf = ::std::option::Option::Some(input);
        self
    }
    /// <p>Large volume config.</p>
    pub fn set_large_volume_conf(mut self, input: ::std::option::Option<crate::types::LaunchTemplateDiskConf>) -> Self {
        self.large_volume_conf = input;
        self
    }
    /// <p>Large volume config.</p>
    pub fn get_large_volume_conf(&self) -> &::std::option::Option<crate::types::LaunchTemplateDiskConf> {
        &self.large_volume_conf
    }
    /// Consumes the builder and constructs a [`CreateLaunchConfigurationTemplateInput`](crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_launch_configuration_template::CreateLaunchConfigurationTemplateInput {
                post_launch_actions: self.post_launch_actions,
                enable_map_auto_tagging: self.enable_map_auto_tagging,
                map_auto_tagging_mpe_id: self.map_auto_tagging_mpe_id,
                tags: self.tags,
                launch_disposition: self.launch_disposition,
                target_instance_type_right_sizing_method: self.target_instance_type_right_sizing_method,
                copy_private_ip: self.copy_private_ip,
                associate_public_ip_address: self.associate_public_ip_address,
                copy_tags: self.copy_tags,
                licensing: self.licensing,
                boot_mode: self.boot_mode,
                small_volume_max_size: self.small_volume_max_size,
                small_volume_conf: self.small_volume_conf,
                large_volume_conf: self.large_volume_conf,
            },
        )
    }
}
impl ::std::fmt::Debug for CreateLaunchConfigurationTemplateInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLaunchConfigurationTemplateInputBuilder");
        formatter.field("post_launch_actions", &self.post_launch_actions);
        formatter.field("enable_map_auto_tagging", &self.enable_map_auto_tagging);
        formatter.field("map_auto_tagging_mpe_id", &self.map_auto_tagging_mpe_id);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("launch_disposition", &self.launch_disposition);
        formatter.field("target_instance_type_right_sizing_method", &self.target_instance_type_right_sizing_method);
        formatter.field("copy_private_ip", &self.copy_private_ip);
        formatter.field("associate_public_ip_address", &self.associate_public_ip_address);
        formatter.field("copy_tags", &self.copy_tags);
        formatter.field("licensing", &self.licensing);
        formatter.field("boot_mode", &self.boot_mode);
        formatter.field("small_volume_max_size", &self.small_volume_max_size);
        formatter.field("small_volume_conf", &self.small_volume_conf);
        formatter.field("large_volume_conf", &self.large_volume_conf);
        formatter.finish()
    }
}
