// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::retry_data_replication::_retry_data_replication_output::RetryDataReplicationOutputBuilder;

pub use crate::operation::retry_data_replication::_retry_data_replication_input::RetryDataReplicationInputBuilder;

/// Fluent builder constructing a request to `RetryDataReplication`.
///
/// <p>Causes the data replication initiation sequence to begin immediately upon next Handshake for specified SourceServer IDs, regardless of when the previous initiation started. This command will not work if the SourceServer is not stalled or is in a DISCONNECTED or STOPPED state.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RetryDataReplicationFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::retry_data_replication::builders::RetryDataReplicationInputBuilder,
}
impl RetryDataReplicationFluentBuilder {
    /// Creates a new `RetryDataReplication`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::retry_data_replication::RetryDataReplication,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::retry_data_replication::RetryDataReplicationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::retry_data_replication::RetryDataReplicationOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::retry_data_replication::RetryDataReplicationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Retry data replication for Source Server ID.</p>
    pub fn source_server_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_server_id(input.into());
        self
    }
    /// <p>Retry data replication for Source Server ID.</p>
    pub fn set_source_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_server_id(input);
        self
    }
}
