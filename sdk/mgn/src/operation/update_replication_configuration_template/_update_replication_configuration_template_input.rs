// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateReplicationConfigurationTemplateInput {
    /// <p>Update replication configuration template template ID request.</p>
    #[doc(hidden)]
    pub replication_configuration_template_id: std::option::Option<std::string::String>,
    /// <p>Update replication configuration template ARN request.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>Update replication configuration template Staging Area subnet ID request.</p>
    #[doc(hidden)]
    pub staging_area_subnet_id: std::option::Option<std::string::String>,
    /// <p>Update replication configuration template associate default Application Migration Service Security group request.</p>
    #[doc(hidden)]
    pub associate_default_security_group: std::option::Option<bool>,
    /// <p>Update replication configuration template Replication Server Security groups IDs request.</p>
    #[doc(hidden)]
    pub replication_servers_security_groups_i_ds:
        std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Update replication configuration template Replication Server instance type request.</p>
    #[doc(hidden)]
    pub replication_server_instance_type: std::option::Option<std::string::String>,
    /// <p>Update replication configuration template use dedicated Replication Server request.</p>
    #[doc(hidden)]
    pub use_dedicated_replication_server: std::option::Option<bool>,
    /// <p>Update replication configuration template use default large Staging Disk type request.</p>
    #[doc(hidden)]
    pub default_large_staging_disk_type:
        std::option::Option<crate::types::ReplicationConfigurationDefaultLargeStagingDiskType>,
    /// <p>Update replication configuration template EBS encryption request.</p>
    #[doc(hidden)]
    pub ebs_encryption: std::option::Option<crate::types::ReplicationConfigurationEbsEncryption>,
    /// <p>Update replication configuration template EBS encryption key ARN request.</p>
    #[doc(hidden)]
    pub ebs_encryption_key_arn: std::option::Option<std::string::String>,
    /// <p>Update replication configuration template bandwidth throttling request.</p>
    #[doc(hidden)]
    pub bandwidth_throttling: i64,
    /// <p>Update replication configuration template data plane routing request.</p>
    #[doc(hidden)]
    pub data_plane_routing:
        std::option::Option<crate::types::ReplicationConfigurationDataPlaneRouting>,
    /// <p>Update replication configuration template create Public IP request.</p>
    #[doc(hidden)]
    pub create_public_ip: std::option::Option<bool>,
    /// <p>Update replication configuration template Staging Area Tags request.</p>
    #[doc(hidden)]
    pub staging_area_tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl UpdateReplicationConfigurationTemplateInput {
    /// <p>Update replication configuration template template ID request.</p>
    pub fn replication_configuration_template_id(&self) -> std::option::Option<&str> {
        self.replication_configuration_template_id.as_deref()
    }
    /// <p>Update replication configuration template ARN request.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Update replication configuration template Staging Area subnet ID request.</p>
    pub fn staging_area_subnet_id(&self) -> std::option::Option<&str> {
        self.staging_area_subnet_id.as_deref()
    }
    /// <p>Update replication configuration template associate default Application Migration Service Security group request.</p>
    pub fn associate_default_security_group(&self) -> std::option::Option<bool> {
        self.associate_default_security_group
    }
    /// <p>Update replication configuration template Replication Server Security groups IDs request.</p>
    pub fn replication_servers_security_groups_i_ds(
        &self,
    ) -> std::option::Option<&[std::string::String]> {
        self.replication_servers_security_groups_i_ds.as_deref()
    }
    /// <p>Update replication configuration template Replication Server instance type request.</p>
    pub fn replication_server_instance_type(&self) -> std::option::Option<&str> {
        self.replication_server_instance_type.as_deref()
    }
    /// <p>Update replication configuration template use dedicated Replication Server request.</p>
    pub fn use_dedicated_replication_server(&self) -> std::option::Option<bool> {
        self.use_dedicated_replication_server
    }
    /// <p>Update replication configuration template use default large Staging Disk type request.</p>
    pub fn default_large_staging_disk_type(
        &self,
    ) -> std::option::Option<&crate::types::ReplicationConfigurationDefaultLargeStagingDiskType>
    {
        self.default_large_staging_disk_type.as_ref()
    }
    /// <p>Update replication configuration template EBS encryption request.</p>
    pub fn ebs_encryption(
        &self,
    ) -> std::option::Option<&crate::types::ReplicationConfigurationEbsEncryption> {
        self.ebs_encryption.as_ref()
    }
    /// <p>Update replication configuration template EBS encryption key ARN request.</p>
    pub fn ebs_encryption_key_arn(&self) -> std::option::Option<&str> {
        self.ebs_encryption_key_arn.as_deref()
    }
    /// <p>Update replication configuration template bandwidth throttling request.</p>
    pub fn bandwidth_throttling(&self) -> i64 {
        self.bandwidth_throttling
    }
    /// <p>Update replication configuration template data plane routing request.</p>
    pub fn data_plane_routing(
        &self,
    ) -> std::option::Option<&crate::types::ReplicationConfigurationDataPlaneRouting> {
        self.data_plane_routing.as_ref()
    }
    /// <p>Update replication configuration template create Public IP request.</p>
    pub fn create_public_ip(&self) -> std::option::Option<bool> {
        self.create_public_ip
    }
    /// <p>Update replication configuration template Staging Area Tags request.</p>
    pub fn staging_area_tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.staging_area_tags.as_ref()
    }
}
impl std::fmt::Debug for UpdateReplicationConfigurationTemplateInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateReplicationConfigurationTemplateInput");
        formatter.field(
            "replication_configuration_template_id",
            &self.replication_configuration_template_id,
        );
        formatter.field("arn", &self.arn);
        formatter.field("staging_area_subnet_id", &self.staging_area_subnet_id);
        formatter.field(
            "associate_default_security_group",
            &self.associate_default_security_group,
        );
        formatter.field(
            "replication_servers_security_groups_i_ds",
            &self.replication_servers_security_groups_i_ds,
        );
        formatter.field(
            "replication_server_instance_type",
            &self.replication_server_instance_type,
        );
        formatter.field(
            "use_dedicated_replication_server",
            &self.use_dedicated_replication_server,
        );
        formatter.field(
            "default_large_staging_disk_type",
            &self.default_large_staging_disk_type,
        );
        formatter.field("ebs_encryption", &self.ebs_encryption);
        formatter.field("ebs_encryption_key_arn", &self.ebs_encryption_key_arn);
        formatter.field("bandwidth_throttling", &self.bandwidth_throttling);
        formatter.field("data_plane_routing", &self.data_plane_routing);
        formatter.field("create_public_ip", &self.create_public_ip);
        formatter.field("staging_area_tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateReplicationConfigurationTemplateInput {
    /// Creates a new builder-style object to manufacture [`UpdateReplicationConfigurationTemplateInput`](crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateInput).
    pub fn builder() -> crate::operation::update_replication_configuration_template::builders::UpdateReplicationConfigurationTemplateInputBuilder{
        crate::operation::update_replication_configuration_template::builders::UpdateReplicationConfigurationTemplateInputBuilder::default()
    }
}

/// A builder for [`UpdateReplicationConfigurationTemplateInput`](crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UpdateReplicationConfigurationTemplateInputBuilder {
    pub(crate) replication_configuration_template_id: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) staging_area_subnet_id: std::option::Option<std::string::String>,
    pub(crate) associate_default_security_group: std::option::Option<bool>,
    pub(crate) replication_servers_security_groups_i_ds:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) replication_server_instance_type: std::option::Option<std::string::String>,
    pub(crate) use_dedicated_replication_server: std::option::Option<bool>,
    pub(crate) default_large_staging_disk_type:
        std::option::Option<crate::types::ReplicationConfigurationDefaultLargeStagingDiskType>,
    pub(crate) ebs_encryption:
        std::option::Option<crate::types::ReplicationConfigurationEbsEncryption>,
    pub(crate) ebs_encryption_key_arn: std::option::Option<std::string::String>,
    pub(crate) bandwidth_throttling: std::option::Option<i64>,
    pub(crate) data_plane_routing:
        std::option::Option<crate::types::ReplicationConfigurationDataPlaneRouting>,
    pub(crate) create_public_ip: std::option::Option<bool>,
    pub(crate) staging_area_tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl UpdateReplicationConfigurationTemplateInputBuilder {
    /// <p>Update replication configuration template template ID request.</p>
    pub fn replication_configuration_template_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.replication_configuration_template_id = Some(input.into());
        self
    }
    /// <p>Update replication configuration template template ID request.</p>
    pub fn set_replication_configuration_template_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.replication_configuration_template_id = input;
        self
    }
    /// <p>Update replication configuration template ARN request.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>Update replication configuration template ARN request.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>Update replication configuration template Staging Area subnet ID request.</p>
    pub fn staging_area_subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.staging_area_subnet_id = Some(input.into());
        self
    }
    /// <p>Update replication configuration template Staging Area subnet ID request.</p>
    pub fn set_staging_area_subnet_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.staging_area_subnet_id = input;
        self
    }
    /// <p>Update replication configuration template associate default Application Migration Service Security group request.</p>
    pub fn associate_default_security_group(mut self, input: bool) -> Self {
        self.associate_default_security_group = Some(input);
        self
    }
    /// <p>Update replication configuration template associate default Application Migration Service Security group request.</p>
    pub fn set_associate_default_security_group(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.associate_default_security_group = input;
        self
    }
    /// Appends an item to `replication_servers_security_groups_i_ds`.
    ///
    /// To override the contents of this collection use [`set_replication_servers_security_groups_i_ds`](Self::set_replication_servers_security_groups_i_ds).
    ///
    /// <p>Update replication configuration template Replication Server Security groups IDs request.</p>
    pub fn replication_servers_security_groups_i_ds(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        let mut v = self
            .replication_servers_security_groups_i_ds
            .unwrap_or_default();
        v.push(input.into());
        self.replication_servers_security_groups_i_ds = Some(v);
        self
    }
    /// <p>Update replication configuration template Replication Server Security groups IDs request.</p>
    pub fn set_replication_servers_security_groups_i_ds(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.replication_servers_security_groups_i_ds = input;
        self
    }
    /// <p>Update replication configuration template Replication Server instance type request.</p>
    pub fn replication_server_instance_type(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.replication_server_instance_type = Some(input.into());
        self
    }
    /// <p>Update replication configuration template Replication Server instance type request.</p>
    pub fn set_replication_server_instance_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.replication_server_instance_type = input;
        self
    }
    /// <p>Update replication configuration template use dedicated Replication Server request.</p>
    pub fn use_dedicated_replication_server(mut self, input: bool) -> Self {
        self.use_dedicated_replication_server = Some(input);
        self
    }
    /// <p>Update replication configuration template use dedicated Replication Server request.</p>
    pub fn set_use_dedicated_replication_server(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.use_dedicated_replication_server = input;
        self
    }
    /// <p>Update replication configuration template use default large Staging Disk type request.</p>
    pub fn default_large_staging_disk_type(
        mut self,
        input: crate::types::ReplicationConfigurationDefaultLargeStagingDiskType,
    ) -> Self {
        self.default_large_staging_disk_type = Some(input);
        self
    }
    /// <p>Update replication configuration template use default large Staging Disk type request.</p>
    pub fn set_default_large_staging_disk_type(
        mut self,
        input: std::option::Option<
            crate::types::ReplicationConfigurationDefaultLargeStagingDiskType,
        >,
    ) -> Self {
        self.default_large_staging_disk_type = input;
        self
    }
    /// <p>Update replication configuration template EBS encryption request.</p>
    pub fn ebs_encryption(
        mut self,
        input: crate::types::ReplicationConfigurationEbsEncryption,
    ) -> Self {
        self.ebs_encryption = Some(input);
        self
    }
    /// <p>Update replication configuration template EBS encryption request.</p>
    pub fn set_ebs_encryption(
        mut self,
        input: std::option::Option<crate::types::ReplicationConfigurationEbsEncryption>,
    ) -> Self {
        self.ebs_encryption = input;
        self
    }
    /// <p>Update replication configuration template EBS encryption key ARN request.</p>
    pub fn ebs_encryption_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.ebs_encryption_key_arn = Some(input.into());
        self
    }
    /// <p>Update replication configuration template EBS encryption key ARN request.</p>
    pub fn set_ebs_encryption_key_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ebs_encryption_key_arn = input;
        self
    }
    /// <p>Update replication configuration template bandwidth throttling request.</p>
    pub fn bandwidth_throttling(mut self, input: i64) -> Self {
        self.bandwidth_throttling = Some(input);
        self
    }
    /// <p>Update replication configuration template bandwidth throttling request.</p>
    pub fn set_bandwidth_throttling(mut self, input: std::option::Option<i64>) -> Self {
        self.bandwidth_throttling = input;
        self
    }
    /// <p>Update replication configuration template data plane routing request.</p>
    pub fn data_plane_routing(
        mut self,
        input: crate::types::ReplicationConfigurationDataPlaneRouting,
    ) -> Self {
        self.data_plane_routing = Some(input);
        self
    }
    /// <p>Update replication configuration template data plane routing request.</p>
    pub fn set_data_plane_routing(
        mut self,
        input: std::option::Option<crate::types::ReplicationConfigurationDataPlaneRouting>,
    ) -> Self {
        self.data_plane_routing = input;
        self
    }
    /// <p>Update replication configuration template create Public IP request.</p>
    pub fn create_public_ip(mut self, input: bool) -> Self {
        self.create_public_ip = Some(input);
        self
    }
    /// <p>Update replication configuration template create Public IP request.</p>
    pub fn set_create_public_ip(mut self, input: std::option::Option<bool>) -> Self {
        self.create_public_ip = input;
        self
    }
    /// Adds a key-value pair to `staging_area_tags`.
    ///
    /// To override the contents of this collection use [`set_staging_area_tags`](Self::set_staging_area_tags).
    ///
    /// <p>Update replication configuration template Staging Area Tags request.</p>
    pub fn staging_area_tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.staging_area_tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.staging_area_tags = Some(hash_map);
        self
    }
    /// <p>Update replication configuration template Staging Area Tags request.</p>
    pub fn set_staging_area_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.staging_area_tags = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateReplicationConfigurationTemplateInput`](crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateInput).
    pub fn build(self) -> Result<crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateInput {
                replication_configuration_template_id: self.replication_configuration_template_id
                ,
                arn: self.arn
                ,
                staging_area_subnet_id: self.staging_area_subnet_id
                ,
                associate_default_security_group: self.associate_default_security_group
                ,
                replication_servers_security_groups_i_ds: self.replication_servers_security_groups_i_ds
                ,
                replication_server_instance_type: self.replication_server_instance_type
                ,
                use_dedicated_replication_server: self.use_dedicated_replication_server
                ,
                default_large_staging_disk_type: self.default_large_staging_disk_type
                ,
                ebs_encryption: self.ebs_encryption
                ,
                ebs_encryption_key_arn: self.ebs_encryption_key_arn
                ,
                bandwidth_throttling: self.bandwidth_throttling
                    .unwrap_or_default()
                ,
                data_plane_routing: self.data_plane_routing
                ,
                create_public_ip: self.create_public_ip
                ,
                staging_area_tags: self.staging_area_tags
                ,
            }
        )
    }
}
impl std::fmt::Debug for UpdateReplicationConfigurationTemplateInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateReplicationConfigurationTemplateInputBuilder");
        formatter.field(
            "replication_configuration_template_id",
            &self.replication_configuration_template_id,
        );
        formatter.field("arn", &self.arn);
        formatter.field("staging_area_subnet_id", &self.staging_area_subnet_id);
        formatter.field(
            "associate_default_security_group",
            &self.associate_default_security_group,
        );
        formatter.field(
            "replication_servers_security_groups_i_ds",
            &self.replication_servers_security_groups_i_ds,
        );
        formatter.field(
            "replication_server_instance_type",
            &self.replication_server_instance_type,
        );
        formatter.field(
            "use_dedicated_replication_server",
            &self.use_dedicated_replication_server,
        );
        formatter.field(
            "default_large_staging_disk_type",
            &self.default_large_staging_disk_type,
        );
        formatter.field("ebs_encryption", &self.ebs_encryption);
        formatter.field("ebs_encryption_key_arn", &self.ebs_encryption_key_arn);
        formatter.field("bandwidth_throttling", &self.bandwidth_throttling);
        formatter.field("data_plane_routing", &self.data_plane_routing);
        formatter.field("create_public_ip", &self.create_public_ip);
        formatter.field("staging_area_tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
