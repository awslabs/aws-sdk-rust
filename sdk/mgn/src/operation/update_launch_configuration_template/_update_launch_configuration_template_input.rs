// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateLaunchConfigurationTemplateInput {
    /// <p>Launch Configuration Template ID.</p>
    #[doc(hidden)]
    pub launch_configuration_template_id: std::option::Option<std::string::String>,
    /// <p>Post Launch Action to execute on the Test or Cutover instance.</p>
    #[doc(hidden)]
    pub post_launch_actions: std::option::Option<crate::types::PostLaunchActions>,
    /// <p>Enable map auto tagging.</p>
    #[doc(hidden)]
    pub enable_map_auto_tagging: std::option::Option<bool>,
    /// <p>Launch configuration template map auto tagging MPE ID.</p>
    #[doc(hidden)]
    pub map_auto_tagging_mpe_id: std::option::Option<std::string::String>,
    /// <p>Launch disposition.</p>
    #[doc(hidden)]
    pub launch_disposition: std::option::Option<crate::types::LaunchDisposition>,
    /// <p>Target instance type right-sizing method.</p>
    #[doc(hidden)]
    pub target_instance_type_right_sizing_method:
        std::option::Option<crate::types::TargetInstanceTypeRightSizingMethod>,
    /// <p>Copy private Ip.</p>
    #[doc(hidden)]
    pub copy_private_ip: std::option::Option<bool>,
    /// <p>Associate public Ip address.</p>
    #[doc(hidden)]
    pub associate_public_ip_address: std::option::Option<bool>,
    /// <p>Copy tags.</p>
    #[doc(hidden)]
    pub copy_tags: std::option::Option<bool>,
    /// <p>Configure Licensing.</p>
    #[doc(hidden)]
    pub licensing: std::option::Option<crate::types::Licensing>,
    /// <p>Launch configuration template boot mode.</p>
    #[doc(hidden)]
    pub boot_mode: std::option::Option<crate::types::BootMode>,
    /// <p>Small volume maximum size.</p>
    #[doc(hidden)]
    pub small_volume_max_size: i64,
    /// <p>Small volume config.</p>
    #[doc(hidden)]
    pub small_volume_conf: std::option::Option<crate::types::LaunchTemplateDiskConf>,
    /// <p>Large volume config.</p>
    #[doc(hidden)]
    pub large_volume_conf: std::option::Option<crate::types::LaunchTemplateDiskConf>,
}
impl UpdateLaunchConfigurationTemplateInput {
    /// <p>Launch Configuration Template ID.</p>
    pub fn launch_configuration_template_id(&self) -> std::option::Option<&str> {
        self.launch_configuration_template_id.as_deref()
    }
    /// <p>Post Launch Action to execute on the Test or Cutover instance.</p>
    pub fn post_launch_actions(&self) -> std::option::Option<&crate::types::PostLaunchActions> {
        self.post_launch_actions.as_ref()
    }
    /// <p>Enable map auto tagging.</p>
    pub fn enable_map_auto_tagging(&self) -> std::option::Option<bool> {
        self.enable_map_auto_tagging
    }
    /// <p>Launch configuration template map auto tagging MPE ID.</p>
    pub fn map_auto_tagging_mpe_id(&self) -> std::option::Option<&str> {
        self.map_auto_tagging_mpe_id.as_deref()
    }
    /// <p>Launch disposition.</p>
    pub fn launch_disposition(&self) -> std::option::Option<&crate::types::LaunchDisposition> {
        self.launch_disposition.as_ref()
    }
    /// <p>Target instance type right-sizing method.</p>
    pub fn target_instance_type_right_sizing_method(
        &self,
    ) -> std::option::Option<&crate::types::TargetInstanceTypeRightSizingMethod> {
        self.target_instance_type_right_sizing_method.as_ref()
    }
    /// <p>Copy private Ip.</p>
    pub fn copy_private_ip(&self) -> std::option::Option<bool> {
        self.copy_private_ip
    }
    /// <p>Associate public Ip address.</p>
    pub fn associate_public_ip_address(&self) -> std::option::Option<bool> {
        self.associate_public_ip_address
    }
    /// <p>Copy tags.</p>
    pub fn copy_tags(&self) -> std::option::Option<bool> {
        self.copy_tags
    }
    /// <p>Configure Licensing.</p>
    pub fn licensing(&self) -> std::option::Option<&crate::types::Licensing> {
        self.licensing.as_ref()
    }
    /// <p>Launch configuration template boot mode.</p>
    pub fn boot_mode(&self) -> std::option::Option<&crate::types::BootMode> {
        self.boot_mode.as_ref()
    }
    /// <p>Small volume maximum size.</p>
    pub fn small_volume_max_size(&self) -> i64 {
        self.small_volume_max_size
    }
    /// <p>Small volume config.</p>
    pub fn small_volume_conf(&self) -> std::option::Option<&crate::types::LaunchTemplateDiskConf> {
        self.small_volume_conf.as_ref()
    }
    /// <p>Large volume config.</p>
    pub fn large_volume_conf(&self) -> std::option::Option<&crate::types::LaunchTemplateDiskConf> {
        self.large_volume_conf.as_ref()
    }
}
impl UpdateLaunchConfigurationTemplateInput {
    /// Creates a new builder-style object to manufacture [`UpdateLaunchConfigurationTemplateInput`](crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateInput).
    pub fn builder() -> crate::operation::update_launch_configuration_template::builders::UpdateLaunchConfigurationTemplateInputBuilder{
        crate::operation::update_launch_configuration_template::builders::UpdateLaunchConfigurationTemplateInputBuilder::default()
    }
}

/// A builder for [`UpdateLaunchConfigurationTemplateInput`](crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateLaunchConfigurationTemplateInputBuilder {
    pub(crate) launch_configuration_template_id: std::option::Option<std::string::String>,
    pub(crate) post_launch_actions: std::option::Option<crate::types::PostLaunchActions>,
    pub(crate) enable_map_auto_tagging: std::option::Option<bool>,
    pub(crate) map_auto_tagging_mpe_id: std::option::Option<std::string::String>,
    pub(crate) launch_disposition: std::option::Option<crate::types::LaunchDisposition>,
    pub(crate) target_instance_type_right_sizing_method:
        std::option::Option<crate::types::TargetInstanceTypeRightSizingMethod>,
    pub(crate) copy_private_ip: std::option::Option<bool>,
    pub(crate) associate_public_ip_address: std::option::Option<bool>,
    pub(crate) copy_tags: std::option::Option<bool>,
    pub(crate) licensing: std::option::Option<crate::types::Licensing>,
    pub(crate) boot_mode: std::option::Option<crate::types::BootMode>,
    pub(crate) small_volume_max_size: std::option::Option<i64>,
    pub(crate) small_volume_conf: std::option::Option<crate::types::LaunchTemplateDiskConf>,
    pub(crate) large_volume_conf: std::option::Option<crate::types::LaunchTemplateDiskConf>,
}
impl UpdateLaunchConfigurationTemplateInputBuilder {
    /// <p>Launch Configuration Template ID.</p>
    pub fn launch_configuration_template_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.launch_configuration_template_id = Some(input.into());
        self
    }
    /// <p>Launch Configuration Template ID.</p>
    pub fn set_launch_configuration_template_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.launch_configuration_template_id = input;
        self
    }
    /// <p>Post Launch Action to execute on the Test or Cutover instance.</p>
    pub fn post_launch_actions(mut self, input: crate::types::PostLaunchActions) -> Self {
        self.post_launch_actions = Some(input);
        self
    }
    /// <p>Post Launch Action to execute on the Test or Cutover instance.</p>
    pub fn set_post_launch_actions(
        mut self,
        input: std::option::Option<crate::types::PostLaunchActions>,
    ) -> Self {
        self.post_launch_actions = input;
        self
    }
    /// <p>Enable map auto tagging.</p>
    pub fn enable_map_auto_tagging(mut self, input: bool) -> Self {
        self.enable_map_auto_tagging = Some(input);
        self
    }
    /// <p>Enable map auto tagging.</p>
    pub fn set_enable_map_auto_tagging(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_map_auto_tagging = input;
        self
    }
    /// <p>Launch configuration template map auto tagging MPE ID.</p>
    pub fn map_auto_tagging_mpe_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.map_auto_tagging_mpe_id = Some(input.into());
        self
    }
    /// <p>Launch configuration template map auto tagging MPE ID.</p>
    pub fn set_map_auto_tagging_mpe_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.map_auto_tagging_mpe_id = input;
        self
    }
    /// <p>Launch disposition.</p>
    pub fn launch_disposition(mut self, input: crate::types::LaunchDisposition) -> Self {
        self.launch_disposition = Some(input);
        self
    }
    /// <p>Launch disposition.</p>
    pub fn set_launch_disposition(
        mut self,
        input: std::option::Option<crate::types::LaunchDisposition>,
    ) -> Self {
        self.launch_disposition = input;
        self
    }
    /// <p>Target instance type right-sizing method.</p>
    pub fn target_instance_type_right_sizing_method(
        mut self,
        input: crate::types::TargetInstanceTypeRightSizingMethod,
    ) -> Self {
        self.target_instance_type_right_sizing_method = Some(input);
        self
    }
    /// <p>Target instance type right-sizing method.</p>
    pub fn set_target_instance_type_right_sizing_method(
        mut self,
        input: std::option::Option<crate::types::TargetInstanceTypeRightSizingMethod>,
    ) -> Self {
        self.target_instance_type_right_sizing_method = input;
        self
    }
    /// <p>Copy private Ip.</p>
    pub fn copy_private_ip(mut self, input: bool) -> Self {
        self.copy_private_ip = Some(input);
        self
    }
    /// <p>Copy private Ip.</p>
    pub fn set_copy_private_ip(mut self, input: std::option::Option<bool>) -> Self {
        self.copy_private_ip = input;
        self
    }
    /// <p>Associate public Ip address.</p>
    pub fn associate_public_ip_address(mut self, input: bool) -> Self {
        self.associate_public_ip_address = Some(input);
        self
    }
    /// <p>Associate public Ip address.</p>
    pub fn set_associate_public_ip_address(mut self, input: std::option::Option<bool>) -> Self {
        self.associate_public_ip_address = input;
        self
    }
    /// <p>Copy tags.</p>
    pub fn copy_tags(mut self, input: bool) -> Self {
        self.copy_tags = Some(input);
        self
    }
    /// <p>Copy tags.</p>
    pub fn set_copy_tags(mut self, input: std::option::Option<bool>) -> Self {
        self.copy_tags = input;
        self
    }
    /// <p>Configure Licensing.</p>
    pub fn licensing(mut self, input: crate::types::Licensing) -> Self {
        self.licensing = Some(input);
        self
    }
    /// <p>Configure Licensing.</p>
    pub fn set_licensing(mut self, input: std::option::Option<crate::types::Licensing>) -> Self {
        self.licensing = input;
        self
    }
    /// <p>Launch configuration template boot mode.</p>
    pub fn boot_mode(mut self, input: crate::types::BootMode) -> Self {
        self.boot_mode = Some(input);
        self
    }
    /// <p>Launch configuration template boot mode.</p>
    pub fn set_boot_mode(mut self, input: std::option::Option<crate::types::BootMode>) -> Self {
        self.boot_mode = input;
        self
    }
    /// <p>Small volume maximum size.</p>
    pub fn small_volume_max_size(mut self, input: i64) -> Self {
        self.small_volume_max_size = Some(input);
        self
    }
    /// <p>Small volume maximum size.</p>
    pub fn set_small_volume_max_size(mut self, input: std::option::Option<i64>) -> Self {
        self.small_volume_max_size = input;
        self
    }
    /// <p>Small volume config.</p>
    pub fn small_volume_conf(mut self, input: crate::types::LaunchTemplateDiskConf) -> Self {
        self.small_volume_conf = Some(input);
        self
    }
    /// <p>Small volume config.</p>
    pub fn set_small_volume_conf(
        mut self,
        input: std::option::Option<crate::types::LaunchTemplateDiskConf>,
    ) -> Self {
        self.small_volume_conf = input;
        self
    }
    /// <p>Large volume config.</p>
    pub fn large_volume_conf(mut self, input: crate::types::LaunchTemplateDiskConf) -> Self {
        self.large_volume_conf = Some(input);
        self
    }
    /// <p>Large volume config.</p>
    pub fn set_large_volume_conf(
        mut self,
        input: std::option::Option<crate::types::LaunchTemplateDiskConf>,
    ) -> Self {
        self.large_volume_conf = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateLaunchConfigurationTemplateInput`](crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateInput).
    pub fn build(self) -> Result<crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateInput {
                launch_configuration_template_id: self.launch_configuration_template_id
                ,
                post_launch_actions: self.post_launch_actions
                ,
                enable_map_auto_tagging: self.enable_map_auto_tagging
                ,
                map_auto_tagging_mpe_id: self.map_auto_tagging_mpe_id
                ,
                launch_disposition: self.launch_disposition
                ,
                target_instance_type_right_sizing_method: self.target_instance_type_right_sizing_method
                ,
                copy_private_ip: self.copy_private_ip
                ,
                associate_public_ip_address: self.associate_public_ip_address
                ,
                copy_tags: self.copy_tags
                ,
                licensing: self.licensing
                ,
                boot_mode: self.boot_mode
                ,
                small_volume_max_size: self.small_volume_max_size
                    .unwrap_or_default()
                ,
                small_volume_conf: self.small_volume_conf
                ,
                large_volume_conf: self.large_volume_conf
                ,
            }
        )
    }
}
