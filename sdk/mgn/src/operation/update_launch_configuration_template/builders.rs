// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_launch_configuration_template::_update_launch_configuration_template_output::UpdateLaunchConfigurationTemplateOutputBuilder;

pub use crate::operation::update_launch_configuration_template::_update_launch_configuration_template_input::UpdateLaunchConfigurationTemplateInputBuilder;

/// Fluent builder constructing a request to `UpdateLaunchConfigurationTemplate`.
///
/// <p>Updates an existing Launch Configuration Template by ID.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateLaunchConfigurationTemplateFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_launch_configuration_template::builders::UpdateLaunchConfigurationTemplateInputBuilder
            }
impl UpdateLaunchConfigurationTemplateFluentBuilder {
    /// Creates a new `UpdateLaunchConfigurationTemplate`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplate, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateOutput, aws_smithy_http::result::SdkError<crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Launch Configuration Template ID.</p>
    pub fn launch_configuration_template_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.launch_configuration_template_id(input.into());
        self
    }
    /// <p>Launch Configuration Template ID.</p>
    pub fn set_launch_configuration_template_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_launch_configuration_template_id(input);
        self
    }
    /// <p>Post Launch Action to execute on the Test or Cutover instance.</p>
    pub fn post_launch_actions(mut self, input: crate::types::PostLaunchActions) -> Self {
        self.inner = self.inner.post_launch_actions(input);
        self
    }
    /// <p>Post Launch Action to execute on the Test or Cutover instance.</p>
    pub fn set_post_launch_actions(
        mut self,
        input: std::option::Option<crate::types::PostLaunchActions>,
    ) -> Self {
        self.inner = self.inner.set_post_launch_actions(input);
        self
    }
    /// <p>Enable map auto tagging.</p>
    pub fn enable_map_auto_tagging(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_map_auto_tagging(input);
        self
    }
    /// <p>Enable map auto tagging.</p>
    pub fn set_enable_map_auto_tagging(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_map_auto_tagging(input);
        self
    }
    /// <p>Launch configuration template map auto tagging MPE ID.</p>
    pub fn map_auto_tagging_mpe_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.map_auto_tagging_mpe_id(input.into());
        self
    }
    /// <p>Launch configuration template map auto tagging MPE ID.</p>
    pub fn set_map_auto_tagging_mpe_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_map_auto_tagging_mpe_id(input);
        self
    }
    /// <p>Launch disposition.</p>
    pub fn launch_disposition(mut self, input: crate::types::LaunchDisposition) -> Self {
        self.inner = self.inner.launch_disposition(input);
        self
    }
    /// <p>Launch disposition.</p>
    pub fn set_launch_disposition(
        mut self,
        input: std::option::Option<crate::types::LaunchDisposition>,
    ) -> Self {
        self.inner = self.inner.set_launch_disposition(input);
        self
    }
    /// <p>Target instance type right-sizing method.</p>
    pub fn target_instance_type_right_sizing_method(
        mut self,
        input: crate::types::TargetInstanceTypeRightSizingMethod,
    ) -> Self {
        self.inner = self.inner.target_instance_type_right_sizing_method(input);
        self
    }
    /// <p>Target instance type right-sizing method.</p>
    pub fn set_target_instance_type_right_sizing_method(
        mut self,
        input: std::option::Option<crate::types::TargetInstanceTypeRightSizingMethod>,
    ) -> Self {
        self.inner = self
            .inner
            .set_target_instance_type_right_sizing_method(input);
        self
    }
    /// <p>Copy private Ip.</p>
    pub fn copy_private_ip(mut self, input: bool) -> Self {
        self.inner = self.inner.copy_private_ip(input);
        self
    }
    /// <p>Copy private Ip.</p>
    pub fn set_copy_private_ip(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_copy_private_ip(input);
        self
    }
    /// <p>Associate public Ip address.</p>
    pub fn associate_public_ip_address(mut self, input: bool) -> Self {
        self.inner = self.inner.associate_public_ip_address(input);
        self
    }
    /// <p>Associate public Ip address.</p>
    pub fn set_associate_public_ip_address(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_associate_public_ip_address(input);
        self
    }
    /// <p>Copy tags.</p>
    pub fn copy_tags(mut self, input: bool) -> Self {
        self.inner = self.inner.copy_tags(input);
        self
    }
    /// <p>Copy tags.</p>
    pub fn set_copy_tags(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_copy_tags(input);
        self
    }
    /// <p>Configure Licensing.</p>
    pub fn licensing(mut self, input: crate::types::Licensing) -> Self {
        self.inner = self.inner.licensing(input);
        self
    }
    /// <p>Configure Licensing.</p>
    pub fn set_licensing(mut self, input: std::option::Option<crate::types::Licensing>) -> Self {
        self.inner = self.inner.set_licensing(input);
        self
    }
    /// <p>Launch configuration template boot mode.</p>
    pub fn boot_mode(mut self, input: crate::types::BootMode) -> Self {
        self.inner = self.inner.boot_mode(input);
        self
    }
    /// <p>Launch configuration template boot mode.</p>
    pub fn set_boot_mode(mut self, input: std::option::Option<crate::types::BootMode>) -> Self {
        self.inner = self.inner.set_boot_mode(input);
        self
    }
    /// <p>Small volume maximum size.</p>
    pub fn small_volume_max_size(mut self, input: i64) -> Self {
        self.inner = self.inner.small_volume_max_size(input);
        self
    }
    /// <p>Small volume maximum size.</p>
    pub fn set_small_volume_max_size(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_small_volume_max_size(input);
        self
    }
    /// <p>Small volume config.</p>
    pub fn small_volume_conf(mut self, input: crate::types::LaunchTemplateDiskConf) -> Self {
        self.inner = self.inner.small_volume_conf(input);
        self
    }
    /// <p>Small volume config.</p>
    pub fn set_small_volume_conf(
        mut self,
        input: std::option::Option<crate::types::LaunchTemplateDiskConf>,
    ) -> Self {
        self.inner = self.inner.set_small_volume_conf(input);
        self
    }
    /// <p>Large volume config.</p>
    pub fn large_volume_conf(mut self, input: crate::types::LaunchTemplateDiskConf) -> Self {
        self.inner = self.inner.large_volume_conf(input);
        self
    }
    /// <p>Large volume config.</p>
    pub fn set_large_volume_conf(
        mut self,
        input: std::option::Option<crate::types::LaunchTemplateDiskConf>,
    ) -> Self {
        self.inner = self.inner.set_large_volume_conf(input);
        self
    }
}
