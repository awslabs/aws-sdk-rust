// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateLaunchConfigurationOutput {
    /// <p>Launch configuration Source Server ID.</p>
    #[doc(hidden)]
    pub source_server_id: std::option::Option<std::string::String>,
    /// <p>Launch configuration name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Launch configuration EC2 Launch template ID.</p>
    #[doc(hidden)]
    pub ec2_launch_template_id: std::option::Option<std::string::String>,
    /// <p>Launch disposition for launch configuration.</p>
    #[doc(hidden)]
    pub launch_disposition: std::option::Option<crate::types::LaunchDisposition>,
    /// <p>Launch configuration Target instance type right sizing method.</p>
    #[doc(hidden)]
    pub target_instance_type_right_sizing_method:
        std::option::Option<crate::types::TargetInstanceTypeRightSizingMethod>,
    /// <p>Copy Private IP during Launch Configuration.</p>
    #[doc(hidden)]
    pub copy_private_ip: std::option::Option<bool>,
    /// <p>Copy Tags during Launch Configuration.</p>
    #[doc(hidden)]
    pub copy_tags: std::option::Option<bool>,
    /// <p>Launch configuration OS licensing.</p>
    #[doc(hidden)]
    pub licensing: std::option::Option<crate::types::Licensing>,
    /// <p>Launch configuration boot mode.</p>
    #[doc(hidden)]
    pub boot_mode: std::option::Option<crate::types::BootMode>,
    /// <p>Post Launch Actions to executed on the Test or Cutover instance.</p>
    #[doc(hidden)]
    pub post_launch_actions: std::option::Option<crate::types::PostLaunchActions>,
    /// <p>Enable map auto tagging.</p>
    #[doc(hidden)]
    pub enable_map_auto_tagging: std::option::Option<bool>,
    /// <p>Map auto tagging MPE ID.</p>
    #[doc(hidden)]
    pub map_auto_tagging_mpe_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateLaunchConfigurationOutput {
    /// <p>Launch configuration Source Server ID.</p>
    pub fn source_server_id(&self) -> std::option::Option<&str> {
        self.source_server_id.as_deref()
    }
    /// <p>Launch configuration name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Launch configuration EC2 Launch template ID.</p>
    pub fn ec2_launch_template_id(&self) -> std::option::Option<&str> {
        self.ec2_launch_template_id.as_deref()
    }
    /// <p>Launch disposition for launch configuration.</p>
    pub fn launch_disposition(&self) -> std::option::Option<&crate::types::LaunchDisposition> {
        self.launch_disposition.as_ref()
    }
    /// <p>Launch configuration Target instance type right sizing method.</p>
    pub fn target_instance_type_right_sizing_method(
        &self,
    ) -> std::option::Option<&crate::types::TargetInstanceTypeRightSizingMethod> {
        self.target_instance_type_right_sizing_method.as_ref()
    }
    /// <p>Copy Private IP during Launch Configuration.</p>
    pub fn copy_private_ip(&self) -> std::option::Option<bool> {
        self.copy_private_ip
    }
    /// <p>Copy Tags during Launch Configuration.</p>
    pub fn copy_tags(&self) -> std::option::Option<bool> {
        self.copy_tags
    }
    /// <p>Launch configuration OS licensing.</p>
    pub fn licensing(&self) -> std::option::Option<&crate::types::Licensing> {
        self.licensing.as_ref()
    }
    /// <p>Launch configuration boot mode.</p>
    pub fn boot_mode(&self) -> std::option::Option<&crate::types::BootMode> {
        self.boot_mode.as_ref()
    }
    /// <p>Post Launch Actions to executed on the Test or Cutover instance.</p>
    pub fn post_launch_actions(&self) -> std::option::Option<&crate::types::PostLaunchActions> {
        self.post_launch_actions.as_ref()
    }
    /// <p>Enable map auto tagging.</p>
    pub fn enable_map_auto_tagging(&self) -> std::option::Option<bool> {
        self.enable_map_auto_tagging
    }
    /// <p>Map auto tagging MPE ID.</p>
    pub fn map_auto_tagging_mpe_id(&self) -> std::option::Option<&str> {
        self.map_auto_tagging_mpe_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateLaunchConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateLaunchConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateLaunchConfigurationOutput`](crate::operation::update_launch_configuration::UpdateLaunchConfigurationOutput).
    pub fn builder() -> crate::operation::update_launch_configuration::builders::UpdateLaunchConfigurationOutputBuilder{
        crate::operation::update_launch_configuration::builders::UpdateLaunchConfigurationOutputBuilder::default()
    }
}

/// A builder for [`UpdateLaunchConfigurationOutput`](crate::operation::update_launch_configuration::UpdateLaunchConfigurationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateLaunchConfigurationOutputBuilder {
    pub(crate) source_server_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) ec2_launch_template_id: std::option::Option<std::string::String>,
    pub(crate) launch_disposition: std::option::Option<crate::types::LaunchDisposition>,
    pub(crate) target_instance_type_right_sizing_method:
        std::option::Option<crate::types::TargetInstanceTypeRightSizingMethod>,
    pub(crate) copy_private_ip: std::option::Option<bool>,
    pub(crate) copy_tags: std::option::Option<bool>,
    pub(crate) licensing: std::option::Option<crate::types::Licensing>,
    pub(crate) boot_mode: std::option::Option<crate::types::BootMode>,
    pub(crate) post_launch_actions: std::option::Option<crate::types::PostLaunchActions>,
    pub(crate) enable_map_auto_tagging: std::option::Option<bool>,
    pub(crate) map_auto_tagging_mpe_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateLaunchConfigurationOutputBuilder {
    /// <p>Launch configuration Source Server ID.</p>
    pub fn source_server_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_server_id = Some(input.into());
        self
    }
    /// <p>Launch configuration Source Server ID.</p>
    pub fn set_source_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_server_id = input;
        self
    }
    /// <p>Launch configuration name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Launch configuration name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Launch configuration EC2 Launch template ID.</p>
    pub fn ec2_launch_template_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ec2_launch_template_id = Some(input.into());
        self
    }
    /// <p>Launch configuration EC2 Launch template ID.</p>
    pub fn set_ec2_launch_template_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ec2_launch_template_id = input;
        self
    }
    /// <p>Launch disposition for launch configuration.</p>
    pub fn launch_disposition(mut self, input: crate::types::LaunchDisposition) -> Self {
        self.launch_disposition = Some(input);
        self
    }
    /// <p>Launch disposition for launch configuration.</p>
    pub fn set_launch_disposition(
        mut self,
        input: std::option::Option<crate::types::LaunchDisposition>,
    ) -> Self {
        self.launch_disposition = input;
        self
    }
    /// <p>Launch configuration Target instance type right sizing method.</p>
    pub fn target_instance_type_right_sizing_method(
        mut self,
        input: crate::types::TargetInstanceTypeRightSizingMethod,
    ) -> Self {
        self.target_instance_type_right_sizing_method = Some(input);
        self
    }
    /// <p>Launch configuration Target instance type right sizing method.</p>
    pub fn set_target_instance_type_right_sizing_method(
        mut self,
        input: std::option::Option<crate::types::TargetInstanceTypeRightSizingMethod>,
    ) -> Self {
        self.target_instance_type_right_sizing_method = input;
        self
    }
    /// <p>Copy Private IP during Launch Configuration.</p>
    pub fn copy_private_ip(mut self, input: bool) -> Self {
        self.copy_private_ip = Some(input);
        self
    }
    /// <p>Copy Private IP during Launch Configuration.</p>
    pub fn set_copy_private_ip(mut self, input: std::option::Option<bool>) -> Self {
        self.copy_private_ip = input;
        self
    }
    /// <p>Copy Tags during Launch Configuration.</p>
    pub fn copy_tags(mut self, input: bool) -> Self {
        self.copy_tags = Some(input);
        self
    }
    /// <p>Copy Tags during Launch Configuration.</p>
    pub fn set_copy_tags(mut self, input: std::option::Option<bool>) -> Self {
        self.copy_tags = input;
        self
    }
    /// <p>Launch configuration OS licensing.</p>
    pub fn licensing(mut self, input: crate::types::Licensing) -> Self {
        self.licensing = Some(input);
        self
    }
    /// <p>Launch configuration OS licensing.</p>
    pub fn set_licensing(mut self, input: std::option::Option<crate::types::Licensing>) -> Self {
        self.licensing = input;
        self
    }
    /// <p>Launch configuration boot mode.</p>
    pub fn boot_mode(mut self, input: crate::types::BootMode) -> Self {
        self.boot_mode = Some(input);
        self
    }
    /// <p>Launch configuration boot mode.</p>
    pub fn set_boot_mode(mut self, input: std::option::Option<crate::types::BootMode>) -> Self {
        self.boot_mode = input;
        self
    }
    /// <p>Post Launch Actions to executed on the Test or Cutover instance.</p>
    pub fn post_launch_actions(mut self, input: crate::types::PostLaunchActions) -> Self {
        self.post_launch_actions = Some(input);
        self
    }
    /// <p>Post Launch Actions to executed on the Test or Cutover instance.</p>
    pub fn set_post_launch_actions(
        mut self,
        input: std::option::Option<crate::types::PostLaunchActions>,
    ) -> Self {
        self.post_launch_actions = input;
        self
    }
    /// <p>Enable map auto tagging.</p>
    pub fn enable_map_auto_tagging(mut self, input: bool) -> Self {
        self.enable_map_auto_tagging = Some(input);
        self
    }
    /// <p>Enable map auto tagging.</p>
    pub fn set_enable_map_auto_tagging(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_map_auto_tagging = input;
        self
    }
    /// <p>Map auto tagging MPE ID.</p>
    pub fn map_auto_tagging_mpe_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.map_auto_tagging_mpe_id = Some(input.into());
        self
    }
    /// <p>Map auto tagging MPE ID.</p>
    pub fn set_map_auto_tagging_mpe_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.map_auto_tagging_mpe_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateLaunchConfigurationOutput`](crate::operation::update_launch_configuration::UpdateLaunchConfigurationOutput).
    pub fn build(
        self,
    ) -> crate::operation::update_launch_configuration::UpdateLaunchConfigurationOutput {
        crate::operation::update_launch_configuration::UpdateLaunchConfigurationOutput {
            source_server_id: self.source_server_id,
            name: self.name,
            ec2_launch_template_id: self.ec2_launch_template_id,
            launch_disposition: self.launch_disposition,
            target_instance_type_right_sizing_method: self.target_instance_type_right_sizing_method,
            copy_private_ip: self.copy_private_ip,
            copy_tags: self.copy_tags,
            licensing: self.licensing,
            boot_mode: self.boot_mode,
            post_launch_actions: self.post_launch_actions,
            enable_map_auto_tagging: self.enable_map_auto_tagging,
            map_auto_tagging_mpe_id: self.map_auto_tagging_mpe_id,
            _request_id: self._request_id,
        }
    }
}
