// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_launch_configuration::_update_launch_configuration_output::UpdateLaunchConfigurationOutputBuilder;

pub use crate::operation::update_launch_configuration::_update_launch_configuration_input::UpdateLaunchConfigurationInputBuilder;

/// Fluent builder constructing a request to `UpdateLaunchConfiguration`.
///
/// <p>Updates multiple LaunchConfigurations by Source Server ID.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateLaunchConfigurationFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_launch_configuration::builders::UpdateLaunchConfigurationInputBuilder
            }
impl UpdateLaunchConfigurationFluentBuilder {
    /// Creates a new `UpdateLaunchConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_launch_configuration::UpdateLaunchConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_launch_configuration::UpdateLaunchConfigurationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_launch_configuration::UpdateLaunchConfigurationOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_launch_configuration::UpdateLaunchConfigurationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Update Launch configuration by Source Server ID request.</p>
    pub fn source_server_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source_server_id(input.into());
        self
    }
    /// <p>Update Launch configuration by Source Server ID request.</p>
    pub fn set_source_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source_server_id(input);
        self
    }
    /// <p>Update Launch configuration name request.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>Update Launch configuration name request.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>Update Launch configuration launch disposition request.</p>
    pub fn launch_disposition(mut self, input: crate::types::LaunchDisposition) -> Self {
        self.inner = self.inner.launch_disposition(input);
        self
    }
    /// <p>Update Launch configuration launch disposition request.</p>
    pub fn set_launch_disposition(
        mut self,
        input: std::option::Option<crate::types::LaunchDisposition>,
    ) -> Self {
        self.inner = self.inner.set_launch_disposition(input);
        self
    }
    /// <p>Update Launch configuration Target instance right sizing request.</p>
    pub fn target_instance_type_right_sizing_method(
        mut self,
        input: crate::types::TargetInstanceTypeRightSizingMethod,
    ) -> Self {
        self.inner = self.inner.target_instance_type_right_sizing_method(input);
        self
    }
    /// <p>Update Launch configuration Target instance right sizing request.</p>
    pub fn set_target_instance_type_right_sizing_method(
        mut self,
        input: std::option::Option<crate::types::TargetInstanceTypeRightSizingMethod>,
    ) -> Self {
        self.inner = self
            .inner
            .set_target_instance_type_right_sizing_method(input);
        self
    }
    /// <p>Update Launch configuration copy Private IP request.</p>
    pub fn copy_private_ip(mut self, input: bool) -> Self {
        self.inner = self.inner.copy_private_ip(input);
        self
    }
    /// <p>Update Launch configuration copy Private IP request.</p>
    pub fn set_copy_private_ip(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_copy_private_ip(input);
        self
    }
    /// <p>Update Launch configuration copy Tags request.</p>
    pub fn copy_tags(mut self, input: bool) -> Self {
        self.inner = self.inner.copy_tags(input);
        self
    }
    /// <p>Update Launch configuration copy Tags request.</p>
    pub fn set_copy_tags(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_copy_tags(input);
        self
    }
    /// <p>Update Launch configuration licensing request.</p>
    pub fn licensing(mut self, input: crate::types::Licensing) -> Self {
        self.inner = self.inner.licensing(input);
        self
    }
    /// <p>Update Launch configuration licensing request.</p>
    pub fn set_licensing(mut self, input: std::option::Option<crate::types::Licensing>) -> Self {
        self.inner = self.inner.set_licensing(input);
        self
    }
    /// <p>Update Launch configuration boot mode request.</p>
    pub fn boot_mode(mut self, input: crate::types::BootMode) -> Self {
        self.inner = self.inner.boot_mode(input);
        self
    }
    /// <p>Update Launch configuration boot mode request.</p>
    pub fn set_boot_mode(mut self, input: std::option::Option<crate::types::BootMode>) -> Self {
        self.inner = self.inner.set_boot_mode(input);
        self
    }
    /// <p>Post Launch Actions to executed on the Test or Cutover instance.</p>
    pub fn post_launch_actions(mut self, input: crate::types::PostLaunchActions) -> Self {
        self.inner = self.inner.post_launch_actions(input);
        self
    }
    /// <p>Post Launch Actions to executed on the Test or Cutover instance.</p>
    pub fn set_post_launch_actions(
        mut self,
        input: std::option::Option<crate::types::PostLaunchActions>,
    ) -> Self {
        self.inner = self.inner.set_post_launch_actions(input);
        self
    }
    /// <p>Enable map auto tagging.</p>
    pub fn enable_map_auto_tagging(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_map_auto_tagging(input);
        self
    }
    /// <p>Enable map auto tagging.</p>
    pub fn set_enable_map_auto_tagging(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_map_auto_tagging(input);
        self
    }
    /// <p>Launch configuration map auto tagging MPE ID.</p>
    pub fn map_auto_tagging_mpe_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.map_auto_tagging_mpe_id(input.into());
        self
    }
    /// <p>Launch configuration map auto tagging MPE ID.</p>
    pub fn set_map_auto_tagging_mpe_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_map_auto_tagging_mpe_id(input);
        self
    }
}
