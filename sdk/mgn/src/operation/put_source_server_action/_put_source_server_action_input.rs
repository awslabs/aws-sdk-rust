// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutSourceServerActionInput {
    /// <p>Source server ID.</p>
    pub source_server_id: ::std::option::Option<::std::string::String>,
    /// <p>Source server post migration custom action name.</p>
    pub action_name: ::std::option::Option<::std::string::String>,
    /// <p>Source server post migration custom action document identifier.</p>
    pub document_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Source server post migration custom action order.</p>
    pub order: ::std::option::Option<i32>,
    /// <p>Source server post migration custom action ID.</p>
    pub action_id: ::std::option::Option<::std::string::String>,
    /// <p>Source server post migration custom action document version.</p>
    pub document_version: ::std::option::Option<::std::string::String>,
    /// <p>Source server post migration custom action active status.</p>
    pub active: ::std::option::Option<bool>,
    /// <p>Source server post migration custom action timeout in seconds.</p>
    pub timeout_seconds: ::std::option::Option<i32>,
    /// <p>Source server post migration custom action must succeed for cutover.</p>
    pub must_succeed_for_cutover: ::std::option::Option<bool>,
    /// <p>Source server post migration custom action parameters.</p>
    pub parameters:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::SsmParameterStoreParameter>>>,
    /// <p>Source server post migration custom action external parameters.</p>
    pub external_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SsmExternalParameter>>,
    /// <p>Source server post migration custom action description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Source server post migration custom action category.</p>
    pub category: ::std::option::Option<crate::types::ActionCategory>,
    /// <p>Source server post migration custom account ID.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
}
impl PutSourceServerActionInput {
    /// <p>Source server ID.</p>
    pub fn source_server_id(&self) -> ::std::option::Option<&str> {
        self.source_server_id.as_deref()
    }
    /// <p>Source server post migration custom action name.</p>
    pub fn action_name(&self) -> ::std::option::Option<&str> {
        self.action_name.as_deref()
    }
    /// <p>Source server post migration custom action document identifier.</p>
    pub fn document_identifier(&self) -> ::std::option::Option<&str> {
        self.document_identifier.as_deref()
    }
    /// <p>Source server post migration custom action order.</p>
    pub fn order(&self) -> ::std::option::Option<i32> {
        self.order
    }
    /// <p>Source server post migration custom action ID.</p>
    pub fn action_id(&self) -> ::std::option::Option<&str> {
        self.action_id.as_deref()
    }
    /// <p>Source server post migration custom action document version.</p>
    pub fn document_version(&self) -> ::std::option::Option<&str> {
        self.document_version.as_deref()
    }
    /// <p>Source server post migration custom action active status.</p>
    pub fn active(&self) -> ::std::option::Option<bool> {
        self.active
    }
    /// <p>Source server post migration custom action timeout in seconds.</p>
    pub fn timeout_seconds(&self) -> ::std::option::Option<i32> {
        self.timeout_seconds
    }
    /// <p>Source server post migration custom action must succeed for cutover.</p>
    pub fn must_succeed_for_cutover(&self) -> ::std::option::Option<bool> {
        self.must_succeed_for_cutover
    }
    /// <p>Source server post migration custom action parameters.</p>
    pub fn parameters(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::SsmParameterStoreParameter>>> {
        self.parameters.as_ref()
    }
    /// <p>Source server post migration custom action external parameters.</p>
    pub fn external_parameters(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, crate::types::SsmExternalParameter>> {
        self.external_parameters.as_ref()
    }
    /// <p>Source server post migration custom action description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Source server post migration custom action category.</p>
    pub fn category(&self) -> ::std::option::Option<&crate::types::ActionCategory> {
        self.category.as_ref()
    }
    /// <p>Source server post migration custom account ID.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
}
impl PutSourceServerActionInput {
    /// Creates a new builder-style object to manufacture [`PutSourceServerActionInput`](crate::operation::put_source_server_action::PutSourceServerActionInput).
    pub fn builder() -> crate::operation::put_source_server_action::builders::PutSourceServerActionInputBuilder {
        crate::operation::put_source_server_action::builders::PutSourceServerActionInputBuilder::default()
    }
}

/// A builder for [`PutSourceServerActionInput`](crate::operation::put_source_server_action::PutSourceServerActionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutSourceServerActionInputBuilder {
    pub(crate) source_server_id: ::std::option::Option<::std::string::String>,
    pub(crate) action_name: ::std::option::Option<::std::string::String>,
    pub(crate) document_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) order: ::std::option::Option<i32>,
    pub(crate) action_id: ::std::option::Option<::std::string::String>,
    pub(crate) document_version: ::std::option::Option<::std::string::String>,
    pub(crate) active: ::std::option::Option<bool>,
    pub(crate) timeout_seconds: ::std::option::Option<i32>,
    pub(crate) must_succeed_for_cutover: ::std::option::Option<bool>,
    pub(crate) parameters:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::SsmParameterStoreParameter>>>,
    pub(crate) external_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SsmExternalParameter>>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) category: ::std::option::Option<crate::types::ActionCategory>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
}
impl PutSourceServerActionInputBuilder {
    /// <p>Source server ID.</p>
    /// This field is required.
    pub fn source_server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source server ID.</p>
    pub fn set_source_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_server_id = input;
        self
    }
    /// <p>Source server ID.</p>
    pub fn get_source_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_server_id
    }
    /// <p>Source server post migration custom action name.</p>
    /// This field is required.
    pub fn action_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source server post migration custom action name.</p>
    pub fn set_action_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_name = input;
        self
    }
    /// <p>Source server post migration custom action name.</p>
    pub fn get_action_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_name
    }
    /// <p>Source server post migration custom action document identifier.</p>
    /// This field is required.
    pub fn document_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source server post migration custom action document identifier.</p>
    pub fn set_document_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_identifier = input;
        self
    }
    /// <p>Source server post migration custom action document identifier.</p>
    pub fn get_document_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_identifier
    }
    /// <p>Source server post migration custom action order.</p>
    /// This field is required.
    pub fn order(mut self, input: i32) -> Self {
        self.order = ::std::option::Option::Some(input);
        self
    }
    /// <p>Source server post migration custom action order.</p>
    pub fn set_order(mut self, input: ::std::option::Option<i32>) -> Self {
        self.order = input;
        self
    }
    /// <p>Source server post migration custom action order.</p>
    pub fn get_order(&self) -> &::std::option::Option<i32> {
        &self.order
    }
    /// <p>Source server post migration custom action ID.</p>
    /// This field is required.
    pub fn action_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source server post migration custom action ID.</p>
    pub fn set_action_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_id = input;
        self
    }
    /// <p>Source server post migration custom action ID.</p>
    pub fn get_action_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_id
    }
    /// <p>Source server post migration custom action document version.</p>
    pub fn document_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.document_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source server post migration custom action document version.</p>
    pub fn set_document_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.document_version = input;
        self
    }
    /// <p>Source server post migration custom action document version.</p>
    pub fn get_document_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.document_version
    }
    /// <p>Source server post migration custom action active status.</p>
    pub fn active(mut self, input: bool) -> Self {
        self.active = ::std::option::Option::Some(input);
        self
    }
    /// <p>Source server post migration custom action active status.</p>
    pub fn set_active(mut self, input: ::std::option::Option<bool>) -> Self {
        self.active = input;
        self
    }
    /// <p>Source server post migration custom action active status.</p>
    pub fn get_active(&self) -> &::std::option::Option<bool> {
        &self.active
    }
    /// <p>Source server post migration custom action timeout in seconds.</p>
    pub fn timeout_seconds(mut self, input: i32) -> Self {
        self.timeout_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>Source server post migration custom action timeout in seconds.</p>
    pub fn set_timeout_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timeout_seconds = input;
        self
    }
    /// <p>Source server post migration custom action timeout in seconds.</p>
    pub fn get_timeout_seconds(&self) -> &::std::option::Option<i32> {
        &self.timeout_seconds
    }
    /// <p>Source server post migration custom action must succeed for cutover.</p>
    pub fn must_succeed_for_cutover(mut self, input: bool) -> Self {
        self.must_succeed_for_cutover = ::std::option::Option::Some(input);
        self
    }
    /// <p>Source server post migration custom action must succeed for cutover.</p>
    pub fn set_must_succeed_for_cutover(mut self, input: ::std::option::Option<bool>) -> Self {
        self.must_succeed_for_cutover = input;
        self
    }
    /// <p>Source server post migration custom action must succeed for cutover.</p>
    pub fn get_must_succeed_for_cutover(&self) -> &::std::option::Option<bool> {
        &self.must_succeed_for_cutover
    }
    /// Adds a key-value pair to `parameters`.
    ///
    /// To override the contents of this collection use [`set_parameters`](Self::set_parameters).
    ///
    /// <p>Source server post migration custom action parameters.</p>
    pub fn parameters(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: ::std::vec::Vec<crate::types::SsmParameterStoreParameter>,
    ) -> Self {
        let mut hash_map = self.parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Source server post migration custom action parameters.</p>
    pub fn set_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::SsmParameterStoreParameter>>>,
    ) -> Self {
        self.parameters = input;
        self
    }
    /// <p>Source server post migration custom action parameters.</p>
    pub fn get_parameters(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<crate::types::SsmParameterStoreParameter>>> {
        &self.parameters
    }
    /// Adds a key-value pair to `external_parameters`.
    ///
    /// To override the contents of this collection use [`set_external_parameters`](Self::set_external_parameters).
    ///
    /// <p>Source server post migration custom action external parameters.</p>
    pub fn external_parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: crate::types::SsmExternalParameter) -> Self {
        let mut hash_map = self.external_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.external_parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Source server post migration custom action external parameters.</p>
    pub fn set_external_parameters(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SsmExternalParameter>>,
    ) -> Self {
        self.external_parameters = input;
        self
    }
    /// <p>Source server post migration custom action external parameters.</p>
    pub fn get_external_parameters(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, crate::types::SsmExternalParameter>> {
        &self.external_parameters
    }
    /// <p>Source server post migration custom action description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source server post migration custom action description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Source server post migration custom action description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Source server post migration custom action category.</p>
    pub fn category(mut self, input: crate::types::ActionCategory) -> Self {
        self.category = ::std::option::Option::Some(input);
        self
    }
    /// <p>Source server post migration custom action category.</p>
    pub fn set_category(mut self, input: ::std::option::Option<crate::types::ActionCategory>) -> Self {
        self.category = input;
        self
    }
    /// <p>Source server post migration custom action category.</p>
    pub fn get_category(&self) -> &::std::option::Option<crate::types::ActionCategory> {
        &self.category
    }
    /// <p>Source server post migration custom account ID.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Source server post migration custom account ID.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>Source server post migration custom account ID.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// Consumes the builder and constructs a [`PutSourceServerActionInput`](crate::operation::put_source_server_action::PutSourceServerActionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_source_server_action::PutSourceServerActionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::put_source_server_action::PutSourceServerActionInput {
            source_server_id: self.source_server_id,
            action_name: self.action_name,
            document_identifier: self.document_identifier,
            order: self.order,
            action_id: self.action_id,
            document_version: self.document_version,
            active: self.active,
            timeout_seconds: self.timeout_seconds,
            must_succeed_for_cutover: self.must_succeed_for_cutover,
            parameters: self.parameters,
            external_parameters: self.external_parameters,
            description: self.description,
            category: self.category,
            account_id: self.account_id,
        })
    }
}
