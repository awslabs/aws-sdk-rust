// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_change_server_life_cycle_state_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ChangeServerLifeCycleStateInput,
) {
    if let Some(var_1) = &input.life_cycle {
        let mut object_2 = object.key("lifeCycle").start_object();
        crate::json_ser::serialize_structure_change_server_life_cycle_state_source_server_lifecycle(
            &mut object_2,
            var_1,
        );
        object_2.finish();
    }
    if let Some(var_3) = &input.source_server_id {
        object.key("sourceServerID").string(var_3);
    }
}

pub fn serialize_structure_create_replication_configuration_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateReplicationConfigurationTemplateInput,
) {
    if let Some(var_4) = &input.associate_default_security_group {
        object.key("associateDefaultSecurityGroup").boolean(*var_4);
    }
    {
        object.key("bandwidthThrottling").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.bandwidth_throttling).into()),
        );
    }
    if let Some(var_5) = &input.create_public_ip {
        object.key("createPublicIP").boolean(*var_5);
    }
    if let Some(var_6) = &input.data_plane_routing {
        object.key("dataPlaneRouting").string(var_6.as_str());
    }
    if let Some(var_7) = &input.default_large_staging_disk_type {
        object
            .key("defaultLargeStagingDiskType")
            .string(var_7.as_str());
    }
    if let Some(var_8) = &input.ebs_encryption {
        object.key("ebsEncryption").string(var_8.as_str());
    }
    if let Some(var_9) = &input.ebs_encryption_key_arn {
        object.key("ebsEncryptionKeyArn").string(var_9);
    }
    if let Some(var_10) = &input.replication_server_instance_type {
        object.key("replicationServerInstanceType").string(var_10);
    }
    if let Some(var_11) = &input.replication_servers_security_groups_i_ds {
        let mut array_12 = object
            .key("replicationServersSecurityGroupsIDs")
            .start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13);
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.staging_area_subnet_id {
        object.key("stagingAreaSubnetId").string(var_14);
    }
    if let Some(var_15) = &input.staging_area_tags {
        let mut object_16 = object.key("stagingAreaTags").start_object();
        for (key_17, value_18) in var_15 {
            {
                object_16.key(key_17).string(value_18);
            }
        }
        object_16.finish();
    }
    if let Some(var_19) = &input.tags {
        let mut object_20 = object.key("tags").start_object();
        for (key_21, value_22) in var_19 {
            {
                object_20.key(key_21).string(value_22);
            }
        }
        object_20.finish();
    }
    if let Some(var_23) = &input.use_dedicated_replication_server {
        object.key("useDedicatedReplicationServer").boolean(*var_23);
    }
}

pub fn serialize_structure_delete_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteJobInput,
) {
    if let Some(var_24) = &input.job_id {
        object.key("jobID").string(var_24);
    }
}

pub fn serialize_structure_delete_replication_configuration_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteReplicationConfigurationTemplateInput,
) {
    if let Some(var_25) = &input.replication_configuration_template_id {
        object
            .key("replicationConfigurationTemplateID")
            .string(var_25);
    }
}

pub fn serialize_structure_delete_source_server_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSourceServerInput,
) {
    if let Some(var_26) = &input.source_server_id {
        object.key("sourceServerID").string(var_26);
    }
}

pub fn serialize_structure_describe_job_log_items_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobLogItemsInput,
) {
    if let Some(var_27) = &input.job_id {
        object.key("jobID").string(var_27);
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_28) = &input.next_token {
        object.key("nextToken").string(var_28);
    }
}

pub fn serialize_structure_describe_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeJobsInput,
) {
    if let Some(var_29) = &input.filters {
        let mut object_30 = object.key("filters").start_object();
        crate::json_ser::serialize_structure_describe_jobs_request_filters(&mut object_30, var_29);
        object_30.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_31) = &input.next_token {
        object.key("nextToken").string(var_31);
    }
}

pub fn serialize_structure_describe_replication_configuration_templates_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeReplicationConfigurationTemplatesInput,
) {
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_32) = &input.next_token {
        object.key("nextToken").string(var_32);
    }
    if let Some(var_33) = &input.replication_configuration_template_i_ds {
        let mut array_34 = object
            .key("replicationConfigurationTemplateIDs")
            .start_array();
        for item_35 in var_33 {
            {
                array_34.value().string(item_35);
            }
        }
        array_34.finish();
    }
}

pub fn serialize_structure_describe_source_servers_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSourceServersInput,
) {
    if let Some(var_36) = &input.filters {
        let mut object_37 = object.key("filters").start_object();
        crate::json_ser::serialize_structure_describe_source_servers_request_filters(
            &mut object_37,
            var_36,
        );
        object_37.finish();
    }
    if input.max_results != 0 {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_results).into()),
        );
    }
    if let Some(var_38) = &input.next_token {
        object.key("nextToken").string(var_38);
    }
}

pub fn serialize_structure_disconnect_from_service_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisconnectFromServiceInput,
) {
    if let Some(var_39) = &input.source_server_id {
        object.key("sourceServerID").string(var_39);
    }
}

pub fn serialize_structure_finalize_cutover_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::FinalizeCutoverInput,
) {
    if let Some(var_40) = &input.source_server_id {
        object.key("sourceServerID").string(var_40);
    }
}

pub fn serialize_structure_get_launch_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLaunchConfigurationInput,
) {
    if let Some(var_41) = &input.source_server_id {
        object.key("sourceServerID").string(var_41);
    }
}

pub fn serialize_structure_get_replication_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetReplicationConfigurationInput,
) {
    if let Some(var_42) = &input.source_server_id {
        object.key("sourceServerID").string(var_42);
    }
}

pub fn serialize_structure_mark_as_archived_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::MarkAsArchivedInput,
) {
    if let Some(var_43) = &input.source_server_id {
        object.key("sourceServerID").string(var_43);
    }
}

pub fn serialize_structure_retry_data_replication_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RetryDataReplicationInput,
) {
    if let Some(var_44) = &input.source_server_id {
        object.key("sourceServerID").string(var_44);
    }
}

pub fn serialize_structure_start_cutover_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartCutoverInput,
) {
    if let Some(var_45) = &input.source_server_i_ds {
        let mut array_46 = object.key("sourceServerIDs").start_array();
        for item_47 in var_45 {
            {
                array_46.value().string(item_47);
            }
        }
        array_46.finish();
    }
    if let Some(var_48) = &input.tags {
        let mut object_49 = object.key("tags").start_object();
        for (key_50, value_51) in var_48 {
            {
                object_49.key(key_50).string(value_51);
            }
        }
        object_49.finish();
    }
}

pub fn serialize_structure_start_test_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartTestInput,
) {
    if let Some(var_52) = &input.source_server_i_ds {
        let mut array_53 = object.key("sourceServerIDs").start_array();
        for item_54 in var_52 {
            {
                array_53.value().string(item_54);
            }
        }
        array_53.finish();
    }
    if let Some(var_55) = &input.tags {
        let mut object_56 = object.key("tags").start_object();
        for (key_57, value_58) in var_55 {
            {
                object_56.key(key_57).string(value_58);
            }
        }
        object_56.finish();
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_59) = &input.tags {
        let mut object_60 = object.key("tags").start_object();
        for (key_61, value_62) in var_59 {
            {
                object_60.key(key_61).string(value_62);
            }
        }
        object_60.finish();
    }
}

pub fn serialize_structure_terminate_target_instances_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TerminateTargetInstancesInput,
) {
    if let Some(var_63) = &input.source_server_i_ds {
        let mut array_64 = object.key("sourceServerIDs").start_array();
        for item_65 in var_63 {
            {
                array_64.value().string(item_65);
            }
        }
        array_64.finish();
    }
    if let Some(var_66) = &input.tags {
        let mut object_67 = object.key("tags").start_object();
        for (key_68, value_69) in var_66 {
            {
                object_67.key(key_68).string(value_69);
            }
        }
        object_67.finish();
    }
}

pub fn serialize_structure_update_launch_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLaunchConfigurationInput,
) {
    if let Some(var_70) = &input.copy_private_ip {
        object.key("copyPrivateIp").boolean(*var_70);
    }
    if let Some(var_71) = &input.copy_tags {
        object.key("copyTags").boolean(*var_71);
    }
    if let Some(var_72) = &input.launch_disposition {
        object.key("launchDisposition").string(var_72.as_str());
    }
    if let Some(var_73) = &input.licensing {
        let mut object_74 = object.key("licensing").start_object();
        crate::json_ser::serialize_structure_licensing(&mut object_74, var_73);
        object_74.finish();
    }
    if let Some(var_75) = &input.name {
        object.key("name").string(var_75);
    }
    if let Some(var_76) = &input.source_server_id {
        object.key("sourceServerID").string(var_76);
    }
    if let Some(var_77) = &input.target_instance_type_right_sizing_method {
        object
            .key("targetInstanceTypeRightSizingMethod")
            .string(var_77.as_str());
    }
}

pub fn serialize_structure_update_replication_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateReplicationConfigurationInput,
) {
    if let Some(var_78) = &input.associate_default_security_group {
        object.key("associateDefaultSecurityGroup").boolean(*var_78);
    }
    if input.bandwidth_throttling != 0 {
        object.key("bandwidthThrottling").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.bandwidth_throttling).into()),
        );
    }
    if let Some(var_79) = &input.create_public_ip {
        object.key("createPublicIP").boolean(*var_79);
    }
    if let Some(var_80) = &input.data_plane_routing {
        object.key("dataPlaneRouting").string(var_80.as_str());
    }
    if let Some(var_81) = &input.default_large_staging_disk_type {
        object
            .key("defaultLargeStagingDiskType")
            .string(var_81.as_str());
    }
    if let Some(var_82) = &input.ebs_encryption {
        object.key("ebsEncryption").string(var_82.as_str());
    }
    if let Some(var_83) = &input.ebs_encryption_key_arn {
        object.key("ebsEncryptionKeyArn").string(var_83);
    }
    if let Some(var_84) = &input.name {
        object.key("name").string(var_84);
    }
    if let Some(var_85) = &input.replicated_disks {
        let mut array_86 = object.key("replicatedDisks").start_array();
        for item_87 in var_85 {
            {
                let mut object_88 = array_86.value().start_object();
                crate::json_ser::serialize_structure_replication_configuration_replicated_disk(
                    &mut object_88,
                    item_87,
                );
                object_88.finish();
            }
        }
        array_86.finish();
    }
    if let Some(var_89) = &input.replication_server_instance_type {
        object.key("replicationServerInstanceType").string(var_89);
    }
    if let Some(var_90) = &input.replication_servers_security_groups_i_ds {
        let mut array_91 = object
            .key("replicationServersSecurityGroupsIDs")
            .start_array();
        for item_92 in var_90 {
            {
                array_91.value().string(item_92);
            }
        }
        array_91.finish();
    }
    if let Some(var_93) = &input.source_server_id {
        object.key("sourceServerID").string(var_93);
    }
    if let Some(var_94) = &input.staging_area_subnet_id {
        object.key("stagingAreaSubnetId").string(var_94);
    }
    if let Some(var_95) = &input.staging_area_tags {
        let mut object_96 = object.key("stagingAreaTags").start_object();
        for (key_97, value_98) in var_95 {
            {
                object_96.key(key_97).string(value_98);
            }
        }
        object_96.finish();
    }
    if let Some(var_99) = &input.use_dedicated_replication_server {
        object.key("useDedicatedReplicationServer").boolean(*var_99);
    }
}

pub fn serialize_structure_update_replication_configuration_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateReplicationConfigurationTemplateInput,
) {
    if let Some(var_100) = &input.arn {
        object.key("arn").string(var_100);
    }
    if let Some(var_101) = &input.associate_default_security_group {
        object
            .key("associateDefaultSecurityGroup")
            .boolean(*var_101);
    }
    if input.bandwidth_throttling != 0 {
        object.key("bandwidthThrottling").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.bandwidth_throttling).into()),
        );
    }
    if let Some(var_102) = &input.create_public_ip {
        object.key("createPublicIP").boolean(*var_102);
    }
    if let Some(var_103) = &input.data_plane_routing {
        object.key("dataPlaneRouting").string(var_103.as_str());
    }
    if let Some(var_104) = &input.default_large_staging_disk_type {
        object
            .key("defaultLargeStagingDiskType")
            .string(var_104.as_str());
    }
    if let Some(var_105) = &input.ebs_encryption {
        object.key("ebsEncryption").string(var_105.as_str());
    }
    if let Some(var_106) = &input.ebs_encryption_key_arn {
        object.key("ebsEncryptionKeyArn").string(var_106);
    }
    if let Some(var_107) = &input.replication_configuration_template_id {
        object
            .key("replicationConfigurationTemplateID")
            .string(var_107);
    }
    if let Some(var_108) = &input.replication_server_instance_type {
        object.key("replicationServerInstanceType").string(var_108);
    }
    if let Some(var_109) = &input.replication_servers_security_groups_i_ds {
        let mut array_110 = object
            .key("replicationServersSecurityGroupsIDs")
            .start_array();
        for item_111 in var_109 {
            {
                array_110.value().string(item_111);
            }
        }
        array_110.finish();
    }
    if let Some(var_112) = &input.staging_area_subnet_id {
        object.key("stagingAreaSubnetId").string(var_112);
    }
    if let Some(var_113) = &input.staging_area_tags {
        let mut object_114 = object.key("stagingAreaTags").start_object();
        for (key_115, value_116) in var_113 {
            {
                object_114.key(key_115).string(value_116);
            }
        }
        object_114.finish();
    }
    if let Some(var_117) = &input.use_dedicated_replication_server {
        object
            .key("useDedicatedReplicationServer")
            .boolean(*var_117);
    }
}

pub fn serialize_structure_change_server_life_cycle_state_source_server_lifecycle(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ChangeServerLifeCycleStateSourceServerLifecycle,
) {
    if let Some(var_118) = &input.state {
        object.key("state").string(var_118.as_str());
    }
}

pub fn serialize_structure_describe_jobs_request_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DescribeJobsRequestFilters,
) {
    if let Some(var_119) = &input.job_i_ds {
        let mut array_120 = object.key("jobIDs").start_array();
        for item_121 in var_119 {
            {
                array_120.value().string(item_121);
            }
        }
        array_120.finish();
    }
    if let Some(var_122) = &input.from_date {
        object.key("fromDate").string(var_122);
    }
    if let Some(var_123) = &input.to_date {
        object.key("toDate").string(var_123);
    }
}

pub fn serialize_structure_describe_source_servers_request_filters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DescribeSourceServersRequestFilters,
) {
    if let Some(var_124) = &input.source_server_i_ds {
        let mut array_125 = object.key("sourceServerIDs").start_array();
        for item_126 in var_124 {
            {
                array_125.value().string(item_126);
            }
        }
        array_125.finish();
    }
    if let Some(var_127) = &input.is_archived {
        object.key("isArchived").boolean(*var_127);
    }
}

pub fn serialize_structure_licensing(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Licensing,
) {
    if let Some(var_128) = &input.os_byol {
        object.key("osByol").boolean(*var_128);
    }
}

pub fn serialize_structure_replication_configuration_replicated_disk(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReplicationConfigurationReplicatedDisk,
) {
    if let Some(var_129) = &input.device_name {
        object.key("deviceName").string(var_129);
    }
    if let Some(var_130) = &input.is_boot_disk {
        object.key("isBootDisk").boolean(*var_130);
    }
    if let Some(var_131) = &input.staging_disk_type {
        object.key("stagingDiskType").string(var_131.as_str());
    }
    if input.iops != 0 {
        object.key("iops").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.iops).into()),
        );
    }
}
