// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `ArchiveApplication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`archive_application`](crate::client::fluent_builders::ArchiveApplication).
///
/// `ParseStrictResponse` impl for `ArchiveApplication`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ArchiveApplication {
    _private: (),
}
impl ArchiveApplication {
    /// Creates a new builder-style object to manufacture [`ArchiveApplicationInput`](crate::input::ArchiveApplicationInput).
    pub fn builder() -> crate::input::archive_application_input::Builder {
        crate::input::archive_application_input::Builder::default()
    }
    /// Creates a new `ArchiveApplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ArchiveApplication {
    type Output = std::result::Result<
        crate::output::ArchiveApplicationOutput,
        crate::error::ArchiveApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_archive_application::de_archive_application_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_archive_application::de_archive_application_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ArchiveWave`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`archive_wave`](crate::client::fluent_builders::ArchiveWave).
///
/// `ParseStrictResponse` impl for `ArchiveWave`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ArchiveWave {
    _private: (),
}
impl ArchiveWave {
    /// Creates a new builder-style object to manufacture [`ArchiveWaveInput`](crate::input::ArchiveWaveInput).
    pub fn builder() -> crate::input::archive_wave_input::Builder {
        crate::input::archive_wave_input::Builder::default()
    }
    /// Creates a new `ArchiveWave` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ArchiveWave {
    type Output =
        std::result::Result<crate::output::ArchiveWaveOutput, crate::error::ArchiveWaveError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_archive_wave::de_archive_wave_http_error(response)
        } else {
            crate::protocol_serde::shape_archive_wave::de_archive_wave_http_response(response)
        }
    }
}

/// Operation shape for `AssociateApplications`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`associate_applications`](crate::client::fluent_builders::AssociateApplications).
///
/// `ParseStrictResponse` impl for `AssociateApplications`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AssociateApplications {
    _private: (),
}
impl AssociateApplications {
    /// Creates a new builder-style object to manufacture [`AssociateApplicationsInput`](crate::input::AssociateApplicationsInput).
    pub fn builder() -> crate::input::associate_applications_input::Builder {
        crate::input::associate_applications_input::Builder::default()
    }
    /// Creates a new `AssociateApplications` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AssociateApplications {
    type Output = std::result::Result<
        crate::output::AssociateApplicationsOutput,
        crate::error::AssociateApplicationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_associate_applications::de_associate_applications_http_error(response)
        } else {
            crate::protocol_serde::shape_associate_applications::de_associate_applications_http_response(response)
        }
    }
}

/// Operation shape for `AssociateSourceServers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`associate_source_servers`](crate::client::fluent_builders::AssociateSourceServers).
///
/// `ParseStrictResponse` impl for `AssociateSourceServers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AssociateSourceServers {
    _private: (),
}
impl AssociateSourceServers {
    /// Creates a new builder-style object to manufacture [`AssociateSourceServersInput`](crate::input::AssociateSourceServersInput).
    pub fn builder() -> crate::input::associate_source_servers_input::Builder {
        crate::input::associate_source_servers_input::Builder::default()
    }
    /// Creates a new `AssociateSourceServers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AssociateSourceServers {
    type Output = std::result::Result<
        crate::output::AssociateSourceServersOutput,
        crate::error::AssociateSourceServersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_associate_source_servers::de_associate_source_servers_http_error(response)
        } else {
            crate::protocol_serde::shape_associate_source_servers::de_associate_source_servers_http_response(response)
        }
    }
}

/// Operation shape for `ChangeServerLifeCycleState`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`change_server_life_cycle_state`](crate::client::fluent_builders::ChangeServerLifeCycleState).
///
/// `ParseStrictResponse` impl for `ChangeServerLifeCycleState`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ChangeServerLifeCycleState {
    _private: (),
}
impl ChangeServerLifeCycleState {
    /// Creates a new builder-style object to manufacture [`ChangeServerLifeCycleStateInput`](crate::input::ChangeServerLifeCycleStateInput).
    pub fn builder() -> crate::input::change_server_life_cycle_state_input::Builder {
        crate::input::change_server_life_cycle_state_input::Builder::default()
    }
    /// Creates a new `ChangeServerLifeCycleState` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ChangeServerLifeCycleState {
    type Output = std::result::Result<
        crate::output::ChangeServerLifeCycleStateOutput,
        crate::error::ChangeServerLifeCycleStateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_change_server_life_cycle_state::de_change_server_life_cycle_state_http_error(response)
        } else {
            crate::protocol_serde::shape_change_server_life_cycle_state::de_change_server_life_cycle_state_http_response(response)
        }
    }
}

/// Operation shape for `CreateApplication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_application`](crate::client::fluent_builders::CreateApplication).
///
/// `ParseStrictResponse` impl for `CreateApplication`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateApplication {
    _private: (),
}
impl CreateApplication {
    /// Creates a new builder-style object to manufacture [`CreateApplicationInput`](crate::input::CreateApplicationInput).
    pub fn builder() -> crate::input::create_application_input::Builder {
        crate::input::create_application_input::Builder::default()
    }
    /// Creates a new `CreateApplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateApplication {
    type Output = std::result::Result<
        crate::output::CreateApplicationOutput,
        crate::error::CreateApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_application::de_create_application_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_application::de_create_application_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateLaunchConfigurationTemplate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_launch_configuration_template`](crate::client::fluent_builders::CreateLaunchConfigurationTemplate).
///
/// `ParseStrictResponse` impl for `CreateLaunchConfigurationTemplate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateLaunchConfigurationTemplate {
    _private: (),
}
impl CreateLaunchConfigurationTemplate {
    /// Creates a new builder-style object to manufacture [`CreateLaunchConfigurationTemplateInput`](crate::input::CreateLaunchConfigurationTemplateInput).
    pub fn builder() -> crate::input::create_launch_configuration_template_input::Builder {
        crate::input::create_launch_configuration_template_input::Builder::default()
    }
    /// Creates a new `CreateLaunchConfigurationTemplate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateLaunchConfigurationTemplate {
    type Output = std::result::Result<
        crate::output::CreateLaunchConfigurationTemplateOutput,
        crate::error::CreateLaunchConfigurationTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_launch_configuration_template::de_create_launch_configuration_template_http_error(response)
        } else {
            crate::protocol_serde::shape_create_launch_configuration_template::de_create_launch_configuration_template_http_response(response)
        }
    }
}

/// Operation shape for `CreateReplicationConfigurationTemplate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_replication_configuration_template`](crate::client::fluent_builders::CreateReplicationConfigurationTemplate).
///
/// `ParseStrictResponse` impl for `CreateReplicationConfigurationTemplate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateReplicationConfigurationTemplate {
    _private: (),
}
impl CreateReplicationConfigurationTemplate {
    /// Creates a new builder-style object to manufacture [`CreateReplicationConfigurationTemplateInput`](crate::input::CreateReplicationConfigurationTemplateInput).
    pub fn builder() -> crate::input::create_replication_configuration_template_input::Builder {
        crate::input::create_replication_configuration_template_input::Builder::default()
    }
    /// Creates a new `CreateReplicationConfigurationTemplate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateReplicationConfigurationTemplate {
    type Output = std::result::Result<
        crate::output::CreateReplicationConfigurationTemplateOutput,
        crate::error::CreateReplicationConfigurationTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_replication_configuration_template::de_create_replication_configuration_template_http_error(response)
        } else {
            crate::protocol_serde::shape_create_replication_configuration_template::de_create_replication_configuration_template_http_response(response)
        }
    }
}

/// Operation shape for `CreateWave`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_wave`](crate::client::fluent_builders::CreateWave).
///
/// `ParseStrictResponse` impl for `CreateWave`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateWave {
    _private: (),
}
impl CreateWave {
    /// Creates a new builder-style object to manufacture [`CreateWaveInput`](crate::input::CreateWaveInput).
    pub fn builder() -> crate::input::create_wave_input::Builder {
        crate::input::create_wave_input::Builder::default()
    }
    /// Creates a new `CreateWave` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateWave {
    type Output =
        std::result::Result<crate::output::CreateWaveOutput, crate::error::CreateWaveError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_wave::de_create_wave_http_error(response)
        } else {
            crate::protocol_serde::shape_create_wave::de_create_wave_http_response(response)
        }
    }
}

/// Operation shape for `DeleteApplication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_application`](crate::client::fluent_builders::DeleteApplication).
///
/// `ParseStrictResponse` impl for `DeleteApplication`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteApplication {
    _private: (),
}
impl DeleteApplication {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationInput`](crate::input::DeleteApplicationInput).
    pub fn builder() -> crate::input::delete_application_input::Builder {
        crate::input::delete_application_input::Builder::default()
    }
    /// Creates a new `DeleteApplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteApplication {
    type Output = std::result::Result<
        crate::output::DeleteApplicationOutput,
        crate::error::DeleteApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_application::de_delete_application_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_application::de_delete_application_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_job`](crate::client::fluent_builders::DeleteJob).
///
/// `ParseStrictResponse` impl for `DeleteJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteJob {
    _private: (),
}
impl DeleteJob {
    /// Creates a new builder-style object to manufacture [`DeleteJobInput`](crate::input::DeleteJobInput).
    pub fn builder() -> crate::input::delete_job_input::Builder {
        crate::input::delete_job_input::Builder::default()
    }
    /// Creates a new `DeleteJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteJob {
    type Output = std::result::Result<crate::output::DeleteJobOutput, crate::error::DeleteJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_job::de_delete_job_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_job::de_delete_job_http_response(response)
        }
    }
}

/// Operation shape for `DeleteLaunchConfigurationTemplate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_launch_configuration_template`](crate::client::fluent_builders::DeleteLaunchConfigurationTemplate).
///
/// `ParseStrictResponse` impl for `DeleteLaunchConfigurationTemplate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteLaunchConfigurationTemplate {
    _private: (),
}
impl DeleteLaunchConfigurationTemplate {
    /// Creates a new builder-style object to manufacture [`DeleteLaunchConfigurationTemplateInput`](crate::input::DeleteLaunchConfigurationTemplateInput).
    pub fn builder() -> crate::input::delete_launch_configuration_template_input::Builder {
        crate::input::delete_launch_configuration_template_input::Builder::default()
    }
    /// Creates a new `DeleteLaunchConfigurationTemplate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteLaunchConfigurationTemplate {
    type Output = std::result::Result<
        crate::output::DeleteLaunchConfigurationTemplateOutput,
        crate::error::DeleteLaunchConfigurationTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_launch_configuration_template::de_delete_launch_configuration_template_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_launch_configuration_template::de_delete_launch_configuration_template_http_response(response)
        }
    }
}

/// Operation shape for `DeleteReplicationConfigurationTemplate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_replication_configuration_template`](crate::client::fluent_builders::DeleteReplicationConfigurationTemplate).
///
/// `ParseStrictResponse` impl for `DeleteReplicationConfigurationTemplate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteReplicationConfigurationTemplate {
    _private: (),
}
impl DeleteReplicationConfigurationTemplate {
    /// Creates a new builder-style object to manufacture [`DeleteReplicationConfigurationTemplateInput`](crate::input::DeleteReplicationConfigurationTemplateInput).
    pub fn builder() -> crate::input::delete_replication_configuration_template_input::Builder {
        crate::input::delete_replication_configuration_template_input::Builder::default()
    }
    /// Creates a new `DeleteReplicationConfigurationTemplate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteReplicationConfigurationTemplate {
    type Output = std::result::Result<
        crate::output::DeleteReplicationConfigurationTemplateOutput,
        crate::error::DeleteReplicationConfigurationTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_replication_configuration_template::de_delete_replication_configuration_template_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_replication_configuration_template::de_delete_replication_configuration_template_http_response(response)
        }
    }
}

/// Operation shape for `DeleteSourceServer`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_source_server`](crate::client::fluent_builders::DeleteSourceServer).
///
/// `ParseStrictResponse` impl for `DeleteSourceServer`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteSourceServer {
    _private: (),
}
impl DeleteSourceServer {
    /// Creates a new builder-style object to manufacture [`DeleteSourceServerInput`](crate::input::DeleteSourceServerInput).
    pub fn builder() -> crate::input::delete_source_server_input::Builder {
        crate::input::delete_source_server_input::Builder::default()
    }
    /// Creates a new `DeleteSourceServer` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteSourceServer {
    type Output = std::result::Result<
        crate::output::DeleteSourceServerOutput,
        crate::error::DeleteSourceServerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_source_server::de_delete_source_server_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_source_server::de_delete_source_server_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteVcenterClient`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_vcenter_client`](crate::client::fluent_builders::DeleteVcenterClient).
///
/// `ParseStrictResponse` impl for `DeleteVcenterClient`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteVcenterClient {
    _private: (),
}
impl DeleteVcenterClient {
    /// Creates a new builder-style object to manufacture [`DeleteVcenterClientInput`](crate::input::DeleteVcenterClientInput).
    pub fn builder() -> crate::input::delete_vcenter_client_input::Builder {
        crate::input::delete_vcenter_client_input::Builder::default()
    }
    /// Creates a new `DeleteVcenterClient` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteVcenterClient {
    type Output = std::result::Result<
        crate::output::DeleteVcenterClientOutput,
        crate::error::DeleteVcenterClientError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_vcenter_client::de_delete_vcenter_client_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_vcenter_client::de_delete_vcenter_client_http_response(response)
        }
    }
}

/// Operation shape for `DeleteWave`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_wave`](crate::client::fluent_builders::DeleteWave).
///
/// `ParseStrictResponse` impl for `DeleteWave`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteWave {
    _private: (),
}
impl DeleteWave {
    /// Creates a new builder-style object to manufacture [`DeleteWaveInput`](crate::input::DeleteWaveInput).
    pub fn builder() -> crate::input::delete_wave_input::Builder {
        crate::input::delete_wave_input::Builder::default()
    }
    /// Creates a new `DeleteWave` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteWave {
    type Output =
        std::result::Result<crate::output::DeleteWaveOutput, crate::error::DeleteWaveError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_wave::de_delete_wave_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_wave::de_delete_wave_http_response(response)
        }
    }
}

/// Operation shape for `DescribeJobLogItems`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_job_log_items`](crate::client::fluent_builders::DescribeJobLogItems).
///
/// `ParseStrictResponse` impl for `DescribeJobLogItems`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeJobLogItems {
    _private: (),
}
impl DescribeJobLogItems {
    /// Creates a new builder-style object to manufacture [`DescribeJobLogItemsInput`](crate::input::DescribeJobLogItemsInput).
    pub fn builder() -> crate::input::describe_job_log_items_input::Builder {
        crate::input::describe_job_log_items_input::Builder::default()
    }
    /// Creates a new `DescribeJobLogItems` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeJobLogItems {
    type Output = std::result::Result<
        crate::output::DescribeJobLogItemsOutput,
        crate::error::DescribeJobLogItemsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_job_log_items::de_describe_job_log_items_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_job_log_items::de_describe_job_log_items_http_response(response)
        }
    }
}

/// Operation shape for `DescribeJobs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_jobs`](crate::client::fluent_builders::DescribeJobs).
///
/// `ParseStrictResponse` impl for `DescribeJobs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeJobs {
    _private: (),
}
impl DescribeJobs {
    /// Creates a new builder-style object to manufacture [`DescribeJobsInput`](crate::input::DescribeJobsInput).
    pub fn builder() -> crate::input::describe_jobs_input::Builder {
        crate::input::describe_jobs_input::Builder::default()
    }
    /// Creates a new `DescribeJobs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeJobs {
    type Output =
        std::result::Result<crate::output::DescribeJobsOutput, crate::error::DescribeJobsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_jobs::de_describe_jobs_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_jobs::de_describe_jobs_http_response(response)
        }
    }
}

/// Operation shape for `DescribeLaunchConfigurationTemplates`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_launch_configuration_templates`](crate::client::fluent_builders::DescribeLaunchConfigurationTemplates).
///
/// `ParseStrictResponse` impl for `DescribeLaunchConfigurationTemplates`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeLaunchConfigurationTemplates {
    _private: (),
}
impl DescribeLaunchConfigurationTemplates {
    /// Creates a new builder-style object to manufacture [`DescribeLaunchConfigurationTemplatesInput`](crate::input::DescribeLaunchConfigurationTemplatesInput).
    pub fn builder() -> crate::input::describe_launch_configuration_templates_input::Builder {
        crate::input::describe_launch_configuration_templates_input::Builder::default()
    }
    /// Creates a new `DescribeLaunchConfigurationTemplates` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLaunchConfigurationTemplates {
    type Output = std::result::Result<
        crate::output::DescribeLaunchConfigurationTemplatesOutput,
        crate::error::DescribeLaunchConfigurationTemplatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_launch_configuration_templates::de_describe_launch_configuration_templates_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_launch_configuration_templates::de_describe_launch_configuration_templates_http_response(response)
        }
    }
}

/// Operation shape for `DescribeReplicationConfigurationTemplates`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_replication_configuration_templates`](crate::client::fluent_builders::DescribeReplicationConfigurationTemplates).
///
/// `ParseStrictResponse` impl for `DescribeReplicationConfigurationTemplates`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeReplicationConfigurationTemplates {
    _private: (),
}
impl DescribeReplicationConfigurationTemplates {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationConfigurationTemplatesInput`](crate::input::DescribeReplicationConfigurationTemplatesInput).
    pub fn builder() -> crate::input::describe_replication_configuration_templates_input::Builder {
        crate::input::describe_replication_configuration_templates_input::Builder::default()
    }
    /// Creates a new `DescribeReplicationConfigurationTemplates` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeReplicationConfigurationTemplates {
    type Output = std::result::Result<
        crate::output::DescribeReplicationConfigurationTemplatesOutput,
        crate::error::DescribeReplicationConfigurationTemplatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_replication_configuration_templates::de_describe_replication_configuration_templates_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_replication_configuration_templates::de_describe_replication_configuration_templates_http_response(response)
        }
    }
}

/// Operation shape for `DescribeSourceServers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_source_servers`](crate::client::fluent_builders::DescribeSourceServers).
///
/// `ParseStrictResponse` impl for `DescribeSourceServers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeSourceServers {
    _private: (),
}
impl DescribeSourceServers {
    /// Creates a new builder-style object to manufacture [`DescribeSourceServersInput`](crate::input::DescribeSourceServersInput).
    pub fn builder() -> crate::input::describe_source_servers_input::Builder {
        crate::input::describe_source_servers_input::Builder::default()
    }
    /// Creates a new `DescribeSourceServers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeSourceServers {
    type Output = std::result::Result<
        crate::output::DescribeSourceServersOutput,
        crate::error::DescribeSourceServersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_source_servers::de_describe_source_servers_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_source_servers::de_describe_source_servers_http_response(response)
        }
    }
}

/// Operation shape for `DescribeVcenterClients`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_vcenter_clients`](crate::client::fluent_builders::DescribeVcenterClients).
///
/// `ParseStrictResponse` impl for `DescribeVcenterClients`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeVcenterClients {
    _private: (),
}
impl DescribeVcenterClients {
    /// Creates a new builder-style object to manufacture [`DescribeVcenterClientsInput`](crate::input::DescribeVcenterClientsInput).
    pub fn builder() -> crate::input::describe_vcenter_clients_input::Builder {
        crate::input::describe_vcenter_clients_input::Builder::default()
    }
    /// Creates a new `DescribeVcenterClients` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeVcenterClients {
    type Output = std::result::Result<
        crate::output::DescribeVcenterClientsOutput,
        crate::error::DescribeVcenterClientsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_vcenter_clients::de_describe_vcenter_clients_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_vcenter_clients::de_describe_vcenter_clients_http_response(response)
        }
    }
}

/// Operation shape for `DisassociateApplications`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disassociate_applications`](crate::client::fluent_builders::DisassociateApplications).
///
/// `ParseStrictResponse` impl for `DisassociateApplications`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisassociateApplications {
    _private: (),
}
impl DisassociateApplications {
    /// Creates a new builder-style object to manufacture [`DisassociateApplicationsInput`](crate::input::DisassociateApplicationsInput).
    pub fn builder() -> crate::input::disassociate_applications_input::Builder {
        crate::input::disassociate_applications_input::Builder::default()
    }
    /// Creates a new `DisassociateApplications` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisassociateApplications {
    type Output = std::result::Result<
        crate::output::DisassociateApplicationsOutput,
        crate::error::DisassociateApplicationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disassociate_applications::de_disassociate_applications_http_error(response)
        } else {
            crate::protocol_serde::shape_disassociate_applications::de_disassociate_applications_http_response(response)
        }
    }
}

/// Operation shape for `DisassociateSourceServers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disassociate_source_servers`](crate::client::fluent_builders::DisassociateSourceServers).
///
/// `ParseStrictResponse` impl for `DisassociateSourceServers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisassociateSourceServers {
    _private: (),
}
impl DisassociateSourceServers {
    /// Creates a new builder-style object to manufacture [`DisassociateSourceServersInput`](crate::input::DisassociateSourceServersInput).
    pub fn builder() -> crate::input::disassociate_source_servers_input::Builder {
        crate::input::disassociate_source_servers_input::Builder::default()
    }
    /// Creates a new `DisassociateSourceServers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisassociateSourceServers {
    type Output = std::result::Result<
        crate::output::DisassociateSourceServersOutput,
        crate::error::DisassociateSourceServersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disassociate_source_servers::de_disassociate_source_servers_http_error(response)
        } else {
            crate::protocol_serde::shape_disassociate_source_servers::de_disassociate_source_servers_http_response(response)
        }
    }
}

/// Operation shape for `DisconnectFromService`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disconnect_from_service`](crate::client::fluent_builders::DisconnectFromService).
///
/// `ParseStrictResponse` impl for `DisconnectFromService`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisconnectFromService {
    _private: (),
}
impl DisconnectFromService {
    /// Creates a new builder-style object to manufacture [`DisconnectFromServiceInput`](crate::input::DisconnectFromServiceInput).
    pub fn builder() -> crate::input::disconnect_from_service_input::Builder {
        crate::input::disconnect_from_service_input::Builder::default()
    }
    /// Creates a new `DisconnectFromService` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisconnectFromService {
    type Output = std::result::Result<
        crate::output::DisconnectFromServiceOutput,
        crate::error::DisconnectFromServiceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disconnect_from_service::de_disconnect_from_service_http_error(response)
        } else {
            crate::protocol_serde::shape_disconnect_from_service::de_disconnect_from_service_http_response(response)
        }
    }
}

/// Operation shape for `FinalizeCutover`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`finalize_cutover`](crate::client::fluent_builders::FinalizeCutover).
///
/// `ParseStrictResponse` impl for `FinalizeCutover`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct FinalizeCutover {
    _private: (),
}
impl FinalizeCutover {
    /// Creates a new builder-style object to manufacture [`FinalizeCutoverInput`](crate::input::FinalizeCutoverInput).
    pub fn builder() -> crate::input::finalize_cutover_input::Builder {
        crate::input::finalize_cutover_input::Builder::default()
    }
    /// Creates a new `FinalizeCutover` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for FinalizeCutover {
    type Output = std::result::Result<
        crate::output::FinalizeCutoverOutput,
        crate::error::FinalizeCutoverError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_finalize_cutover::de_finalize_cutover_http_error(response)
        } else {
            crate::protocol_serde::shape_finalize_cutover::de_finalize_cutover_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetLaunchConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_launch_configuration`](crate::client::fluent_builders::GetLaunchConfiguration).
///
/// `ParseStrictResponse` impl for `GetLaunchConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetLaunchConfiguration {
    _private: (),
}
impl GetLaunchConfiguration {
    /// Creates a new builder-style object to manufacture [`GetLaunchConfigurationInput`](crate::input::GetLaunchConfigurationInput).
    pub fn builder() -> crate::input::get_launch_configuration_input::Builder {
        crate::input::get_launch_configuration_input::Builder::default()
    }
    /// Creates a new `GetLaunchConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetLaunchConfiguration {
    type Output = std::result::Result<
        crate::output::GetLaunchConfigurationOutput,
        crate::error::GetLaunchConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_launch_configuration::de_get_launch_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_get_launch_configuration::de_get_launch_configuration_http_response(response)
        }
    }
}

/// Operation shape for `GetReplicationConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_replication_configuration`](crate::client::fluent_builders::GetReplicationConfiguration).
///
/// `ParseStrictResponse` impl for `GetReplicationConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetReplicationConfiguration {
    _private: (),
}
impl GetReplicationConfiguration {
    /// Creates a new builder-style object to manufacture [`GetReplicationConfigurationInput`](crate::input::GetReplicationConfigurationInput).
    pub fn builder() -> crate::input::get_replication_configuration_input::Builder {
        crate::input::get_replication_configuration_input::Builder::default()
    }
    /// Creates a new `GetReplicationConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetReplicationConfiguration {
    type Output = std::result::Result<
        crate::output::GetReplicationConfigurationOutput,
        crate::error::GetReplicationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_replication_configuration::de_get_replication_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_get_replication_configuration::de_get_replication_configuration_http_response(response)
        }
    }
}

/// Operation shape for `InitializeService`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`initialize_service`](crate::client::fluent_builders::InitializeService).
///
/// `ParseStrictResponse` impl for `InitializeService`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct InitializeService {
    _private: (),
}
impl InitializeService {
    /// Creates a new builder-style object to manufacture [`InitializeServiceInput`](crate::input::InitializeServiceInput).
    pub fn builder() -> crate::input::initialize_service_input::Builder {
        crate::input::initialize_service_input::Builder::default()
    }
    /// Creates a new `InitializeService` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for InitializeService {
    type Output = std::result::Result<
        crate::output::InitializeServiceOutput,
        crate::error::InitializeServiceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_initialize_service::de_initialize_service_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_initialize_service::de_initialize_service_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListApplications`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_applications`](crate::client::fluent_builders::ListApplications).
///
/// `ParseStrictResponse` impl for `ListApplications`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListApplications {
    _private: (),
}
impl ListApplications {
    /// Creates a new builder-style object to manufacture [`ListApplicationsInput`](crate::input::ListApplicationsInput).
    pub fn builder() -> crate::input::list_applications_input::Builder {
        crate::input::list_applications_input::Builder::default()
    }
    /// Creates a new `ListApplications` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListApplications {
    type Output = std::result::Result<
        crate::output::ListApplicationsOutput,
        crate::error::ListApplicationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_applications::de_list_applications_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_applications::de_list_applications_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListSourceServerActions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_source_server_actions`](crate::client::fluent_builders::ListSourceServerActions).
///
/// `ParseStrictResponse` impl for `ListSourceServerActions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListSourceServerActions {
    _private: (),
}
impl ListSourceServerActions {
    /// Creates a new builder-style object to manufacture [`ListSourceServerActionsInput`](crate::input::ListSourceServerActionsInput).
    pub fn builder() -> crate::input::list_source_server_actions_input::Builder {
        crate::input::list_source_server_actions_input::Builder::default()
    }
    /// Creates a new `ListSourceServerActions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListSourceServerActions {
    type Output = std::result::Result<
        crate::output::ListSourceServerActionsOutput,
        crate::error::ListSourceServerActionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_source_server_actions::de_list_source_server_actions_http_error(response)
        } else {
            crate::protocol_serde::shape_list_source_server_actions::de_list_source_server_actions_http_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `ListTemplateActions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_template_actions`](crate::client::fluent_builders::ListTemplateActions).
///
/// `ParseStrictResponse` impl for `ListTemplateActions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTemplateActions {
    _private: (),
}
impl ListTemplateActions {
    /// Creates a new builder-style object to manufacture [`ListTemplateActionsInput`](crate::input::ListTemplateActionsInput).
    pub fn builder() -> crate::input::list_template_actions_input::Builder {
        crate::input::list_template_actions_input::Builder::default()
    }
    /// Creates a new `ListTemplateActions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTemplateActions {
    type Output = std::result::Result<
        crate::output::ListTemplateActionsOutput,
        crate::error::ListTemplateActionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_template_actions::de_list_template_actions_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_template_actions::de_list_template_actions_http_response(response)
        }
    }
}

/// Operation shape for `ListWaves`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_waves`](crate::client::fluent_builders::ListWaves).
///
/// `ParseStrictResponse` impl for `ListWaves`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListWaves {
    _private: (),
}
impl ListWaves {
    /// Creates a new builder-style object to manufacture [`ListWavesInput`](crate::input::ListWavesInput).
    pub fn builder() -> crate::input::list_waves_input::Builder {
        crate::input::list_waves_input::Builder::default()
    }
    /// Creates a new `ListWaves` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListWaves {
    type Output = std::result::Result<crate::output::ListWavesOutput, crate::error::ListWavesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_waves::de_list_waves_http_error(response)
        } else {
            crate::protocol_serde::shape_list_waves::de_list_waves_http_response(response)
        }
    }
}

/// Operation shape for `MarkAsArchived`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`mark_as_archived`](crate::client::fluent_builders::MarkAsArchived).
///
/// `ParseStrictResponse` impl for `MarkAsArchived`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct MarkAsArchived {
    _private: (),
}
impl MarkAsArchived {
    /// Creates a new builder-style object to manufacture [`MarkAsArchivedInput`](crate::input::MarkAsArchivedInput).
    pub fn builder() -> crate::input::mark_as_archived_input::Builder {
        crate::input::mark_as_archived_input::Builder::default()
    }
    /// Creates a new `MarkAsArchived` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for MarkAsArchived {
    type Output =
        std::result::Result<crate::output::MarkAsArchivedOutput, crate::error::MarkAsArchivedError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_mark_as_archived::de_mark_as_archived_http_error(response)
        } else {
            crate::protocol_serde::shape_mark_as_archived::de_mark_as_archived_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `PutSourceServerAction`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_source_server_action`](crate::client::fluent_builders::PutSourceServerAction).
///
/// `ParseStrictResponse` impl for `PutSourceServerAction`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutSourceServerAction {
    _private: (),
}
impl PutSourceServerAction {
    /// Creates a new builder-style object to manufacture [`PutSourceServerActionInput`](crate::input::PutSourceServerActionInput).
    pub fn builder() -> crate::input::put_source_server_action_input::Builder {
        crate::input::put_source_server_action_input::Builder::default()
    }
    /// Creates a new `PutSourceServerAction` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutSourceServerAction {
    type Output = std::result::Result<
        crate::output::PutSourceServerActionOutput,
        crate::error::PutSourceServerActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_source_server_action::de_put_source_server_action_http_error(response)
        } else {
            crate::protocol_serde::shape_put_source_server_action::de_put_source_server_action_http_response(response)
        }
    }
}

/// Operation shape for `PutTemplateAction`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_template_action`](crate::client::fluent_builders::PutTemplateAction).
///
/// `ParseStrictResponse` impl for `PutTemplateAction`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutTemplateAction {
    _private: (),
}
impl PutTemplateAction {
    /// Creates a new builder-style object to manufacture [`PutTemplateActionInput`](crate::input::PutTemplateActionInput).
    pub fn builder() -> crate::input::put_template_action_input::Builder {
        crate::input::put_template_action_input::Builder::default()
    }
    /// Creates a new `PutTemplateAction` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutTemplateAction {
    type Output = std::result::Result<
        crate::output::PutTemplateActionOutput,
        crate::error::PutTemplateActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_template_action::de_put_template_action_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_put_template_action::de_put_template_action_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `RemoveSourceServerAction`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`remove_source_server_action`](crate::client::fluent_builders::RemoveSourceServerAction).
///
/// `ParseStrictResponse` impl for `RemoveSourceServerAction`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RemoveSourceServerAction {
    _private: (),
}
impl RemoveSourceServerAction {
    /// Creates a new builder-style object to manufacture [`RemoveSourceServerActionInput`](crate::input::RemoveSourceServerActionInput).
    pub fn builder() -> crate::input::remove_source_server_action_input::Builder {
        crate::input::remove_source_server_action_input::Builder::default()
    }
    /// Creates a new `RemoveSourceServerAction` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RemoveSourceServerAction {
    type Output = std::result::Result<
        crate::output::RemoveSourceServerActionOutput,
        crate::error::RemoveSourceServerActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_remove_source_server_action::de_remove_source_server_action_http_error(response)
        } else {
            crate::protocol_serde::shape_remove_source_server_action::de_remove_source_server_action_http_response(response)
        }
    }
}

/// Operation shape for `RemoveTemplateAction`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`remove_template_action`](crate::client::fluent_builders::RemoveTemplateAction).
///
/// `ParseStrictResponse` impl for `RemoveTemplateAction`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RemoveTemplateAction {
    _private: (),
}
impl RemoveTemplateAction {
    /// Creates a new builder-style object to manufacture [`RemoveTemplateActionInput`](crate::input::RemoveTemplateActionInput).
    pub fn builder() -> crate::input::remove_template_action_input::Builder {
        crate::input::remove_template_action_input::Builder::default()
    }
    /// Creates a new `RemoveTemplateAction` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RemoveTemplateAction {
    type Output = std::result::Result<
        crate::output::RemoveTemplateActionOutput,
        crate::error::RemoveTemplateActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_remove_template_action::de_remove_template_action_http_error(response)
        } else {
            crate::protocol_serde::shape_remove_template_action::de_remove_template_action_http_response(response)
        }
    }
}

/// Operation shape for `RetryDataReplication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`retry_data_replication`](crate::client::fluent_builders::RetryDataReplication).
///
/// `ParseStrictResponse` impl for `RetryDataReplication`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RetryDataReplication {
    _private: (),
}
impl RetryDataReplication {
    /// Creates a new builder-style object to manufacture [`RetryDataReplicationInput`](crate::input::RetryDataReplicationInput).
    pub fn builder() -> crate::input::retry_data_replication_input::Builder {
        crate::input::retry_data_replication_input::Builder::default()
    }
    /// Creates a new `RetryDataReplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RetryDataReplication {
    type Output = std::result::Result<
        crate::output::RetryDataReplicationOutput,
        crate::error::RetryDataReplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_retry_data_replication::de_retry_data_replication_http_error(response)
        } else {
            crate::protocol_serde::shape_retry_data_replication::de_retry_data_replication_http_response(response)
        }
    }
}

/// Operation shape for `StartCutover`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_cutover`](crate::client::fluent_builders::StartCutover).
///
/// `ParseStrictResponse` impl for `StartCutover`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartCutover {
    _private: (),
}
impl StartCutover {
    /// Creates a new builder-style object to manufacture [`StartCutoverInput`](crate::input::StartCutoverInput).
    pub fn builder() -> crate::input::start_cutover_input::Builder {
        crate::input::start_cutover_input::Builder::default()
    }
    /// Creates a new `StartCutover` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartCutover {
    type Output =
        std::result::Result<crate::output::StartCutoverOutput, crate::error::StartCutoverError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_start_cutover::de_start_cutover_http_error(response)
        } else {
            crate::protocol_serde::shape_start_cutover::de_start_cutover_http_response(response)
        }
    }
}

/// Operation shape for `StartReplication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_replication`](crate::client::fluent_builders::StartReplication).
///
/// `ParseStrictResponse` impl for `StartReplication`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartReplication {
    _private: (),
}
impl StartReplication {
    /// Creates a new builder-style object to manufacture [`StartReplicationInput`](crate::input::StartReplicationInput).
    pub fn builder() -> crate::input::start_replication_input::Builder {
        crate::input::start_replication_input::Builder::default()
    }
    /// Creates a new `StartReplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartReplication {
    type Output = std::result::Result<
        crate::output::StartReplicationOutput,
        crate::error::StartReplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_replication::de_start_replication_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_start_replication::de_start_replication_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `StartTest`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_test`](crate::client::fluent_builders::StartTest).
///
/// `ParseStrictResponse` impl for `StartTest`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartTest {
    _private: (),
}
impl StartTest {
    /// Creates a new builder-style object to manufacture [`StartTestInput`](crate::input::StartTestInput).
    pub fn builder() -> crate::input::start_test_input::Builder {
        crate::input::start_test_input::Builder::default()
    }
    /// Creates a new `StartTest` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartTest {
    type Output = std::result::Result<crate::output::StartTestOutput, crate::error::StartTestError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_start_test::de_start_test_http_error(response)
        } else {
            crate::protocol_serde::shape_start_test::de_start_test_http_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `TerminateTargetInstances`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`terminate_target_instances`](crate::client::fluent_builders::TerminateTargetInstances).
///
/// `ParseStrictResponse` impl for `TerminateTargetInstances`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TerminateTargetInstances {
    _private: (),
}
impl TerminateTargetInstances {
    /// Creates a new builder-style object to manufacture [`TerminateTargetInstancesInput`](crate::input::TerminateTargetInstancesInput).
    pub fn builder() -> crate::input::terminate_target_instances_input::Builder {
        crate::input::terminate_target_instances_input::Builder::default()
    }
    /// Creates a new `TerminateTargetInstances` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TerminateTargetInstances {
    type Output = std::result::Result<
        crate::output::TerminateTargetInstancesOutput,
        crate::error::TerminateTargetInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_terminate_target_instances::de_terminate_target_instances_http_error(response)
        } else {
            crate::protocol_serde::shape_terminate_target_instances::de_terminate_target_instances_http_response(response)
        }
    }
}

/// Operation shape for `UnarchiveApplication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`unarchive_application`](crate::client::fluent_builders::UnarchiveApplication).
///
/// `ParseStrictResponse` impl for `UnarchiveApplication`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UnarchiveApplication {
    _private: (),
}
impl UnarchiveApplication {
    /// Creates a new builder-style object to manufacture [`UnarchiveApplicationInput`](crate::input::UnarchiveApplicationInput).
    pub fn builder() -> crate::input::unarchive_application_input::Builder {
        crate::input::unarchive_application_input::Builder::default()
    }
    /// Creates a new `UnarchiveApplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UnarchiveApplication {
    type Output = std::result::Result<
        crate::output::UnarchiveApplicationOutput,
        crate::error::UnarchiveApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_unarchive_application::de_unarchive_application_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_unarchive_application::de_unarchive_application_http_response(response)
        }
    }
}

/// Operation shape for `UnarchiveWave`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`unarchive_wave`](crate::client::fluent_builders::UnarchiveWave).
///
/// `ParseStrictResponse` impl for `UnarchiveWave`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UnarchiveWave {
    _private: (),
}
impl UnarchiveWave {
    /// Creates a new builder-style object to manufacture [`UnarchiveWaveInput`](crate::input::UnarchiveWaveInput).
    pub fn builder() -> crate::input::unarchive_wave_input::Builder {
        crate::input::unarchive_wave_input::Builder::default()
    }
    /// Creates a new `UnarchiveWave` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UnarchiveWave {
    type Output =
        std::result::Result<crate::output::UnarchiveWaveOutput, crate::error::UnarchiveWaveError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_unarchive_wave::de_unarchive_wave_http_error(response)
        } else {
            crate::protocol_serde::shape_unarchive_wave::de_unarchive_wave_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateApplication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_application`](crate::client::fluent_builders::UpdateApplication).
///
/// `ParseStrictResponse` impl for `UpdateApplication`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateApplication {
    _private: (),
}
impl UpdateApplication {
    /// Creates a new builder-style object to manufacture [`UpdateApplicationInput`](crate::input::UpdateApplicationInput).
    pub fn builder() -> crate::input::update_application_input::Builder {
        crate::input::update_application_input::Builder::default()
    }
    /// Creates a new `UpdateApplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateApplication {
    type Output = std::result::Result<
        crate::output::UpdateApplicationOutput,
        crate::error::UpdateApplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_application::de_update_application_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_application::de_update_application_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateLaunchConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_launch_configuration`](crate::client::fluent_builders::UpdateLaunchConfiguration).
///
/// `ParseStrictResponse` impl for `UpdateLaunchConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateLaunchConfiguration {
    _private: (),
}
impl UpdateLaunchConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateLaunchConfigurationInput`](crate::input::UpdateLaunchConfigurationInput).
    pub fn builder() -> crate::input::update_launch_configuration_input::Builder {
        crate::input::update_launch_configuration_input::Builder::default()
    }
    /// Creates a new `UpdateLaunchConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateLaunchConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateLaunchConfigurationOutput,
        crate::error::UpdateLaunchConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_launch_configuration::de_update_launch_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_update_launch_configuration::de_update_launch_configuration_http_response(response)
        }
    }
}

/// Operation shape for `UpdateLaunchConfigurationTemplate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_launch_configuration_template`](crate::client::fluent_builders::UpdateLaunchConfigurationTemplate).
///
/// `ParseStrictResponse` impl for `UpdateLaunchConfigurationTemplate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateLaunchConfigurationTemplate {
    _private: (),
}
impl UpdateLaunchConfigurationTemplate {
    /// Creates a new builder-style object to manufacture [`UpdateLaunchConfigurationTemplateInput`](crate::input::UpdateLaunchConfigurationTemplateInput).
    pub fn builder() -> crate::input::update_launch_configuration_template_input::Builder {
        crate::input::update_launch_configuration_template_input::Builder::default()
    }
    /// Creates a new `UpdateLaunchConfigurationTemplate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateLaunchConfigurationTemplate {
    type Output = std::result::Result<
        crate::output::UpdateLaunchConfigurationTemplateOutput,
        crate::error::UpdateLaunchConfigurationTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_launch_configuration_template::de_update_launch_configuration_template_http_error(response)
        } else {
            crate::protocol_serde::shape_update_launch_configuration_template::de_update_launch_configuration_template_http_response(response)
        }
    }
}

/// Operation shape for `UpdateReplicationConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_replication_configuration`](crate::client::fluent_builders::UpdateReplicationConfiguration).
///
/// `ParseStrictResponse` impl for `UpdateReplicationConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateReplicationConfiguration {
    _private: (),
}
impl UpdateReplicationConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateReplicationConfigurationInput`](crate::input::UpdateReplicationConfigurationInput).
    pub fn builder() -> crate::input::update_replication_configuration_input::Builder {
        crate::input::update_replication_configuration_input::Builder::default()
    }
    /// Creates a new `UpdateReplicationConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateReplicationConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateReplicationConfigurationOutput,
        crate::error::UpdateReplicationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_replication_configuration::de_update_replication_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_update_replication_configuration::de_update_replication_configuration_http_response(response)
        }
    }
}

/// Operation shape for `UpdateReplicationConfigurationTemplate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_replication_configuration_template`](crate::client::fluent_builders::UpdateReplicationConfigurationTemplate).
///
/// `ParseStrictResponse` impl for `UpdateReplicationConfigurationTemplate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateReplicationConfigurationTemplate {
    _private: (),
}
impl UpdateReplicationConfigurationTemplate {
    /// Creates a new builder-style object to manufacture [`UpdateReplicationConfigurationTemplateInput`](crate::input::UpdateReplicationConfigurationTemplateInput).
    pub fn builder() -> crate::input::update_replication_configuration_template_input::Builder {
        crate::input::update_replication_configuration_template_input::Builder::default()
    }
    /// Creates a new `UpdateReplicationConfigurationTemplate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateReplicationConfigurationTemplate {
    type Output = std::result::Result<
        crate::output::UpdateReplicationConfigurationTemplateOutput,
        crate::error::UpdateReplicationConfigurationTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_replication_configuration_template::de_update_replication_configuration_template_http_error(response)
        } else {
            crate::protocol_serde::shape_update_replication_configuration_template::de_update_replication_configuration_template_http_response(response)
        }
    }
}

/// Operation shape for `UpdateSourceServerReplicationType`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_source_server_replication_type`](crate::client::fluent_builders::UpdateSourceServerReplicationType).
///
/// `ParseStrictResponse` impl for `UpdateSourceServerReplicationType`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateSourceServerReplicationType {
    _private: (),
}
impl UpdateSourceServerReplicationType {
    /// Creates a new builder-style object to manufacture [`UpdateSourceServerReplicationTypeInput`](crate::input::UpdateSourceServerReplicationTypeInput).
    pub fn builder() -> crate::input::update_source_server_replication_type_input::Builder {
        crate::input::update_source_server_replication_type_input::Builder::default()
    }
    /// Creates a new `UpdateSourceServerReplicationType` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateSourceServerReplicationType {
    type Output = std::result::Result<
        crate::output::UpdateSourceServerReplicationTypeOutput,
        crate::error::UpdateSourceServerReplicationTypeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_source_server_replication_type::de_update_source_server_replication_type_http_error(response)
        } else {
            crate::protocol_serde::shape_update_source_server_replication_type::de_update_source_server_replication_type_http_response(response)
        }
    }
}

/// Operation shape for `UpdateWave`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_wave`](crate::client::fluent_builders::UpdateWave).
///
/// `ParseStrictResponse` impl for `UpdateWave`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateWave {
    _private: (),
}
impl UpdateWave {
    /// Creates a new builder-style object to manufacture [`UpdateWaveInput`](crate::input::UpdateWaveInput).
    pub fn builder() -> crate::input::update_wave_input::Builder {
        crate::input::update_wave_input::Builder::default()
    }
    /// Creates a new `UpdateWave` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateWave {
    type Output =
        std::result::Result<crate::output::UpdateWaveOutput, crate::error::UpdateWaveError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_wave::de_update_wave_http_error(response)
        } else {
            crate::protocol_serde::shape_update_wave::de_update_wave_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
