// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The filters applied to Data Store query.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DatastoreFilter {
    /// <p>Allows the user to filter Data Store results by name.</p>
    #[doc(hidden)]
    pub datastore_name: std::option::Option<std::string::String>,
    /// <p>Allows the user to filter Data Store results by status.</p>
    #[doc(hidden)]
    pub datastore_status: std::option::Option<crate::types::DatastoreStatus>,
    /// <p>A filter that allows the user to set cutoff dates for records. All Data Stores created before the specified date will be included in the results. </p>
    #[doc(hidden)]
    pub created_before: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A filter that allows the user to set cutoff dates for records. All Data Stores created after the specified date will be included in the results.</p>
    #[doc(hidden)]
    pub created_after: std::option::Option<aws_smithy_types::DateTime>,
}
impl DatastoreFilter {
    /// <p>Allows the user to filter Data Store results by name.</p>
    pub fn datastore_name(&self) -> std::option::Option<&str> {
        self.datastore_name.as_deref()
    }
    /// <p>Allows the user to filter Data Store results by status.</p>
    pub fn datastore_status(&self) -> std::option::Option<&crate::types::DatastoreStatus> {
        self.datastore_status.as_ref()
    }
    /// <p>A filter that allows the user to set cutoff dates for records. All Data Stores created before the specified date will be included in the results. </p>
    pub fn created_before(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_before.as_ref()
    }
    /// <p>A filter that allows the user to set cutoff dates for records. All Data Stores created after the specified date will be included in the results.</p>
    pub fn created_after(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_after.as_ref()
    }
}
impl DatastoreFilter {
    /// Creates a new builder-style object to manufacture [`DatastoreFilter`](crate::types::DatastoreFilter).
    pub fn builder() -> crate::types::builders::DatastoreFilterBuilder {
        crate::types::builders::DatastoreFilterBuilder::default()
    }
}

/// A builder for [`DatastoreFilter`](crate::types::DatastoreFilter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DatastoreFilterBuilder {
    pub(crate) datastore_name: std::option::Option<std::string::String>,
    pub(crate) datastore_status: std::option::Option<crate::types::DatastoreStatus>,
    pub(crate) created_before: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) created_after: std::option::Option<aws_smithy_types::DateTime>,
}
impl DatastoreFilterBuilder {
    /// <p>Allows the user to filter Data Store results by name.</p>
    pub fn datastore_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.datastore_name = Some(input.into());
        self
    }
    /// <p>Allows the user to filter Data Store results by name.</p>
    pub fn set_datastore_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.datastore_name = input;
        self
    }
    /// <p>Allows the user to filter Data Store results by status.</p>
    pub fn datastore_status(mut self, input: crate::types::DatastoreStatus) -> Self {
        self.datastore_status = Some(input);
        self
    }
    /// <p>Allows the user to filter Data Store results by status.</p>
    pub fn set_datastore_status(
        mut self,
        input: std::option::Option<crate::types::DatastoreStatus>,
    ) -> Self {
        self.datastore_status = input;
        self
    }
    /// <p>A filter that allows the user to set cutoff dates for records. All Data Stores created before the specified date will be included in the results. </p>
    pub fn created_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_before = Some(input);
        self
    }
    /// <p>A filter that allows the user to set cutoff dates for records. All Data Stores created before the specified date will be included in the results. </p>
    pub fn set_created_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_before = input;
        self
    }
    /// <p>A filter that allows the user to set cutoff dates for records. All Data Stores created after the specified date will be included in the results.</p>
    pub fn created_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_after = Some(input);
        self
    }
    /// <p>A filter that allows the user to set cutoff dates for records. All Data Stores created after the specified date will be included in the results.</p>
    pub fn set_created_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_after = input;
        self
    }
    /// Consumes the builder and constructs a [`DatastoreFilter`](crate::types::DatastoreFilter).
    pub fn build(self) -> crate::types::DatastoreFilter {
        crate::types::DatastoreFilter {
            datastore_name: self.datastore_name,
            datastore_status: self.datastore_status,
            created_before: self.created_before,
            created_after: self.created_after,
        }
    }
}
