// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The properties of a FHIR export job, including the ID, ARN, name, and the status of the job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExportJobProperties {
    /// <p>The AWS generated ID for an export job.</p>
    pub job_id: ::std::string::String,
    /// <p>The user generated name for an export job.</p>
    pub job_name: ::std::option::Option<::std::string::String>,
    /// <p>The status of a FHIR export job. Possible statuses are SUBMITTED, IN_PROGRESS, COMPLETED, or FAILED.</p>
    pub job_status: crate::types::JobStatus,
    /// <p>The time an export job was initiated.</p>
    pub submit_time: ::aws_smithy_types::DateTime,
    /// <p>The time an export job completed.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The AWS generated ID for the data store from which files are being exported for an export job.</p>
    pub datastore_id: ::std::string::String,
    /// <p>The output data configuration that was supplied when the export job was created.</p>
    pub output_data_config: ::std::option::Option<crate::types::OutputDataConfig>,
    /// <p>The Amazon Resource Name used during the initiation of the job.</p>
    pub data_access_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>An explanation of any errors that may have occurred during the export job.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl ExportJobProperties {
    /// <p>The AWS generated ID for an export job.</p>
    pub fn job_id(&self) -> &str {
        use std::ops::Deref;
        self.job_id.deref()
    }
    /// <p>The user generated name for an export job.</p>
    pub fn job_name(&self) -> ::std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The status of a FHIR export job. Possible statuses are SUBMITTED, IN_PROGRESS, COMPLETED, or FAILED.</p>
    pub fn job_status(&self) -> &crate::types::JobStatus {
        &self.job_status
    }
    /// <p>The time an export job was initiated.</p>
    pub fn submit_time(&self) -> &::aws_smithy_types::DateTime {
        &self.submit_time
    }
    /// <p>The time an export job completed.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The AWS generated ID for the data store from which files are being exported for an export job.</p>
    pub fn datastore_id(&self) -> &str {
        use std::ops::Deref;
        self.datastore_id.deref()
    }
    /// <p>The output data configuration that was supplied when the export job was created.</p>
    pub fn output_data_config(&self) -> ::std::option::Option<&crate::types::OutputDataConfig> {
        self.output_data_config.as_ref()
    }
    /// <p>The Amazon Resource Name used during the initiation of the job.</p>
    pub fn data_access_role_arn(&self) -> ::std::option::Option<&str> {
        self.data_access_role_arn.as_deref()
    }
    /// <p>An explanation of any errors that may have occurred during the export job.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl ExportJobProperties {
    /// Creates a new builder-style object to manufacture [`ExportJobProperties`](crate::types::ExportJobProperties).
    pub fn builder() -> crate::types::builders::ExportJobPropertiesBuilder {
        crate::types::builders::ExportJobPropertiesBuilder::default()
    }
}

/// A builder for [`ExportJobProperties`](crate::types::ExportJobProperties).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExportJobPropertiesBuilder {
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) job_status: ::std::option::Option<crate::types::JobStatus>,
    pub(crate) submit_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) datastore_id: ::std::option::Option<::std::string::String>,
    pub(crate) output_data_config: ::std::option::Option<crate::types::OutputDataConfig>,
    pub(crate) data_access_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl ExportJobPropertiesBuilder {
    /// <p>The AWS generated ID for an export job.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS generated ID for an export job.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The AWS generated ID for an export job.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The user generated name for an export job.</p>
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user generated name for an export job.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The user generated name for an export job.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p>The status of a FHIR export job. Possible statuses are SUBMITTED, IN_PROGRESS, COMPLETED, or FAILED.</p>
    /// This field is required.
    pub fn job_status(mut self, input: crate::types::JobStatus) -> Self {
        self.job_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of a FHIR export job. Possible statuses are SUBMITTED, IN_PROGRESS, COMPLETED, or FAILED.</p>
    pub fn set_job_status(mut self, input: ::std::option::Option<crate::types::JobStatus>) -> Self {
        self.job_status = input;
        self
    }
    /// <p>The status of a FHIR export job. Possible statuses are SUBMITTED, IN_PROGRESS, COMPLETED, or FAILED.</p>
    pub fn get_job_status(&self) -> &::std::option::Option<crate::types::JobStatus> {
        &self.job_status
    }
    /// <p>The time an export job was initiated.</p>
    /// This field is required.
    pub fn submit_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.submit_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time an export job was initiated.</p>
    pub fn set_submit_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.submit_time = input;
        self
    }
    /// <p>The time an export job was initiated.</p>
    pub fn get_submit_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.submit_time
    }
    /// <p>The time an export job completed.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time an export job completed.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The time an export job completed.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The AWS generated ID for the data store from which files are being exported for an export job.</p>
    /// This field is required.
    pub fn datastore_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.datastore_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS generated ID for the data store from which files are being exported for an export job.</p>
    pub fn set_datastore_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.datastore_id = input;
        self
    }
    /// <p>The AWS generated ID for the data store from which files are being exported for an export job.</p>
    pub fn get_datastore_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.datastore_id
    }
    /// <p>The output data configuration that was supplied when the export job was created.</p>
    /// This field is required.
    pub fn output_data_config(mut self, input: crate::types::OutputDataConfig) -> Self {
        self.output_data_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The output data configuration that was supplied when the export job was created.</p>
    pub fn set_output_data_config(mut self, input: ::std::option::Option<crate::types::OutputDataConfig>) -> Self {
        self.output_data_config = input;
        self
    }
    /// <p>The output data configuration that was supplied when the export job was created.</p>
    pub fn get_output_data_config(&self) -> &::std::option::Option<crate::types::OutputDataConfig> {
        &self.output_data_config
    }
    /// <p>The Amazon Resource Name used during the initiation of the job.</p>
    pub fn data_access_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_access_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name used during the initiation of the job.</p>
    pub fn set_data_access_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_access_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name used during the initiation of the job.</p>
    pub fn get_data_access_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_access_role_arn
    }
    /// <p>An explanation of any errors that may have occurred during the export job.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An explanation of any errors that may have occurred during the export job.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>An explanation of any errors that may have occurred during the export job.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`ExportJobProperties`](crate::types::ExportJobProperties).
    /// This method will fail if any of the following fields are not set:
    /// - [`job_id`](crate::types::builders::ExportJobPropertiesBuilder::job_id)
    /// - [`job_status`](crate::types::builders::ExportJobPropertiesBuilder::job_status)
    /// - [`submit_time`](crate::types::builders::ExportJobPropertiesBuilder::submit_time)
    /// - [`datastore_id`](crate::types::builders::ExportJobPropertiesBuilder::datastore_id)
    pub fn build(self) -> ::std::result::Result<crate::types::ExportJobProperties, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExportJobProperties {
            job_id: self.job_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_id",
                    "job_id was not specified but it is required when building ExportJobProperties",
                )
            })?,
            job_name: self.job_name,
            job_status: self.job_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_status",
                    "job_status was not specified but it is required when building ExportJobProperties",
                )
            })?,
            submit_time: self.submit_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "submit_time",
                    "submit_time was not specified but it is required when building ExportJobProperties",
                )
            })?,
            end_time: self.end_time,
            datastore_id: self.datastore_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "datastore_id",
                    "datastore_id was not specified but it is required when building ExportJobProperties",
                )
            })?,
            output_data_config: self.output_data_config,
            data_access_role_arn: self.data_access_role_arn,
            message: self.message,
        })
    }
}
