// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Displays the properties of the Data Store, including the ID, Arn, name, and the status of the Data Store.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DatastoreProperties {
    /// <p>The AWS-generated ID number for the Data Store.</p>
    #[doc(hidden)]
    pub datastore_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name used in the creation of the Data Store.</p>
    #[doc(hidden)]
    pub datastore_arn: std::option::Option<std::string::String>,
    /// <p>The user-generated name for the Data Store.</p>
    #[doc(hidden)]
    pub datastore_name: std::option::Option<std::string::String>,
    /// <p>The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.</p>
    #[doc(hidden)]
    pub datastore_status: std::option::Option<crate::types::DatastoreStatus>,
    /// <p>The time that a Data Store was created. </p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The FHIR version. Only R4 version data is supported.</p>
    #[doc(hidden)]
    pub datastore_type_version: std::option::Option<crate::types::FhirVersion>,
    /// <p>The AWS endpoint for the Data Store. Each Data Store will have it's own endpoint with Data Store ID in the endpoint URL.</p>
    #[doc(hidden)]
    pub datastore_endpoint: std::option::Option<std::string::String>,
    /// <p> The server-side encryption key configuration for a customer provided encryption key (CMK). </p>
    #[doc(hidden)]
    pub sse_configuration: std::option::Option<crate::types::SseConfiguration>,
    /// <p>The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.</p>
    #[doc(hidden)]
    pub preload_data_config: std::option::Option<crate::types::PreloadDataConfig>,
}
impl DatastoreProperties {
    /// <p>The AWS-generated ID number for the Data Store.</p>
    pub fn datastore_id(&self) -> std::option::Option<&str> {
        self.datastore_id.as_deref()
    }
    /// <p>The Amazon Resource Name used in the creation of the Data Store.</p>
    pub fn datastore_arn(&self) -> std::option::Option<&str> {
        self.datastore_arn.as_deref()
    }
    /// <p>The user-generated name for the Data Store.</p>
    pub fn datastore_name(&self) -> std::option::Option<&str> {
        self.datastore_name.as_deref()
    }
    /// <p>The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.</p>
    pub fn datastore_status(&self) -> std::option::Option<&crate::types::DatastoreStatus> {
        self.datastore_status.as_ref()
    }
    /// <p>The time that a Data Store was created. </p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The FHIR version. Only R4 version data is supported.</p>
    pub fn datastore_type_version(&self) -> std::option::Option<&crate::types::FhirVersion> {
        self.datastore_type_version.as_ref()
    }
    /// <p>The AWS endpoint for the Data Store. Each Data Store will have it's own endpoint with Data Store ID in the endpoint URL.</p>
    pub fn datastore_endpoint(&self) -> std::option::Option<&str> {
        self.datastore_endpoint.as_deref()
    }
    /// <p> The server-side encryption key configuration for a customer provided encryption key (CMK). </p>
    pub fn sse_configuration(&self) -> std::option::Option<&crate::types::SseConfiguration> {
        self.sse_configuration.as_ref()
    }
    /// <p>The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.</p>
    pub fn preload_data_config(&self) -> std::option::Option<&crate::types::PreloadDataConfig> {
        self.preload_data_config.as_ref()
    }
}
impl DatastoreProperties {
    /// Creates a new builder-style object to manufacture [`DatastoreProperties`](crate::types::DatastoreProperties).
    pub fn builder() -> crate::types::builders::DatastorePropertiesBuilder {
        crate::types::builders::DatastorePropertiesBuilder::default()
    }
}

/// A builder for [`DatastoreProperties`](crate::types::DatastoreProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DatastorePropertiesBuilder {
    pub(crate) datastore_id: std::option::Option<std::string::String>,
    pub(crate) datastore_arn: std::option::Option<std::string::String>,
    pub(crate) datastore_name: std::option::Option<std::string::String>,
    pub(crate) datastore_status: std::option::Option<crate::types::DatastoreStatus>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) datastore_type_version: std::option::Option<crate::types::FhirVersion>,
    pub(crate) datastore_endpoint: std::option::Option<std::string::String>,
    pub(crate) sse_configuration: std::option::Option<crate::types::SseConfiguration>,
    pub(crate) preload_data_config: std::option::Option<crate::types::PreloadDataConfig>,
}
impl DatastorePropertiesBuilder {
    /// <p>The AWS-generated ID number for the Data Store.</p>
    pub fn datastore_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.datastore_id = Some(input.into());
        self
    }
    /// <p>The AWS-generated ID number for the Data Store.</p>
    pub fn set_datastore_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.datastore_id = input;
        self
    }
    /// <p>The Amazon Resource Name used in the creation of the Data Store.</p>
    pub fn datastore_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.datastore_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name used in the creation of the Data Store.</p>
    pub fn set_datastore_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.datastore_arn = input;
        self
    }
    /// <p>The user-generated name for the Data Store.</p>
    pub fn datastore_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.datastore_name = Some(input.into());
        self
    }
    /// <p>The user-generated name for the Data Store.</p>
    pub fn set_datastore_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.datastore_name = input;
        self
    }
    /// <p>The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.</p>
    pub fn datastore_status(mut self, input: crate::types::DatastoreStatus) -> Self {
        self.datastore_status = Some(input);
        self
    }
    /// <p>The status of the Data Store. Possible statuses are 'CREATING', 'ACTIVE', 'DELETING', or 'DELETED'.</p>
    pub fn set_datastore_status(
        mut self,
        input: std::option::Option<crate::types::DatastoreStatus>,
    ) -> Self {
        self.datastore_status = input;
        self
    }
    /// <p>The time that a Data Store was created. </p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The time that a Data Store was created. </p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The FHIR version. Only R4 version data is supported.</p>
    pub fn datastore_type_version(mut self, input: crate::types::FhirVersion) -> Self {
        self.datastore_type_version = Some(input);
        self
    }
    /// <p>The FHIR version. Only R4 version data is supported.</p>
    pub fn set_datastore_type_version(
        mut self,
        input: std::option::Option<crate::types::FhirVersion>,
    ) -> Self {
        self.datastore_type_version = input;
        self
    }
    /// <p>The AWS endpoint for the Data Store. Each Data Store will have it's own endpoint with Data Store ID in the endpoint URL.</p>
    pub fn datastore_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.datastore_endpoint = Some(input.into());
        self
    }
    /// <p>The AWS endpoint for the Data Store. Each Data Store will have it's own endpoint with Data Store ID in the endpoint URL.</p>
    pub fn set_datastore_endpoint(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.datastore_endpoint = input;
        self
    }
    /// <p> The server-side encryption key configuration for a customer provided encryption key (CMK). </p>
    pub fn sse_configuration(mut self, input: crate::types::SseConfiguration) -> Self {
        self.sse_configuration = Some(input);
        self
    }
    /// <p> The server-side encryption key configuration for a customer provided encryption key (CMK). </p>
    pub fn set_sse_configuration(
        mut self,
        input: std::option::Option<crate::types::SseConfiguration>,
    ) -> Self {
        self.sse_configuration = input;
        self
    }
    /// <p>The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.</p>
    pub fn preload_data_config(mut self, input: crate::types::PreloadDataConfig) -> Self {
        self.preload_data_config = Some(input);
        self
    }
    /// <p>The preloaded data configuration for the Data Store. Only data preloaded from Synthea is supported.</p>
    pub fn set_preload_data_config(
        mut self,
        input: std::option::Option<crate::types::PreloadDataConfig>,
    ) -> Self {
        self.preload_data_config = input;
        self
    }
    /// Consumes the builder and constructs a [`DatastoreProperties`](crate::types::DatastoreProperties).
    pub fn build(self) -> crate::types::DatastoreProperties {
        crate::types::DatastoreProperties {
            datastore_id: self.datastore_id,
            datastore_arn: self.datastore_arn,
            datastore_name: self.datastore_name,
            datastore_status: self.datastore_status,
            created_at: self.created_at,
            datastore_type_version: self.datastore_type_version,
            datastore_endpoint: self.datastore_endpoint,
            sse_configuration: self.sse_configuration,
            preload_data_config: self.preload_data_config,
        }
    }
}
