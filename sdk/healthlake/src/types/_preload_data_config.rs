// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The input properties for the preloaded Data Store. Only data preloaded from Synthea is supported.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PreloadDataConfig {
    /// <p>The type of preloaded data. Only Synthea preloaded data is supported.</p>
    #[doc(hidden)]
    pub preload_data_type: std::option::Option<crate::types::PreloadDataType>,
}
impl PreloadDataConfig {
    /// <p>The type of preloaded data. Only Synthea preloaded data is supported.</p>
    pub fn preload_data_type(&self) -> std::option::Option<&crate::types::PreloadDataType> {
        self.preload_data_type.as_ref()
    }
}
impl PreloadDataConfig {
    /// Creates a new builder-style object to manufacture [`PreloadDataConfig`](crate::types::PreloadDataConfig).
    pub fn builder() -> crate::types::builders::PreloadDataConfigBuilder {
        crate::types::builders::PreloadDataConfigBuilder::default()
    }
}

/// A builder for [`PreloadDataConfig`](crate::types::PreloadDataConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PreloadDataConfigBuilder {
    pub(crate) preload_data_type: std::option::Option<crate::types::PreloadDataType>,
}
impl PreloadDataConfigBuilder {
    /// <p>The type of preloaded data. Only Synthea preloaded data is supported.</p>
    pub fn preload_data_type(mut self, input: crate::types::PreloadDataType) -> Self {
        self.preload_data_type = Some(input);
        self
    }
    /// <p>The type of preloaded data. Only Synthea preloaded data is supported.</p>
    pub fn set_preload_data_type(
        mut self,
        input: std::option::Option<crate::types::PreloadDataType>,
    ) -> Self {
        self.preload_data_type = input;
        self
    }
    /// Consumes the builder and constructs a [`PreloadDataConfig`](crate::types::PreloadDataConfig).
    pub fn build(self) -> crate::types::PreloadDataConfig {
        crate::types::PreloadDataConfig {
            preload_data_type: self.preload_data_type,
        }
    }
}
