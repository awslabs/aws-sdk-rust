// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> The customer-managed-key(CMK) used when creating a Data Store. If a customer owned key is not specified, an AWS owned key will be used for encryption. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct KmsEncryptionConfig {
    /// <p> The type of customer-managed-key(CMK) used for encyrption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs. </p>
    #[doc(hidden)]
    pub cmk_type: std::option::Option<crate::types::CmkType>,
    /// <p> The KMS encryption key id/alias used to encrypt the Data Store contents at rest. </p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
}
impl KmsEncryptionConfig {
    /// <p> The type of customer-managed-key(CMK) used for encyrption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs. </p>
    pub fn cmk_type(&self) -> std::option::Option<&crate::types::CmkType> {
        self.cmk_type.as_ref()
    }
    /// <p> The KMS encryption key id/alias used to encrypt the Data Store contents at rest. </p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl KmsEncryptionConfig {
    /// Creates a new builder-style object to manufacture [`KmsEncryptionConfig`](crate::types::KmsEncryptionConfig).
    pub fn builder() -> crate::types::builders::KmsEncryptionConfigBuilder {
        crate::types::builders::KmsEncryptionConfigBuilder::default()
    }
}

/// A builder for [`KmsEncryptionConfig`](crate::types::KmsEncryptionConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct KmsEncryptionConfigBuilder {
    pub(crate) cmk_type: std::option::Option<crate::types::CmkType>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
}
impl KmsEncryptionConfigBuilder {
    /// <p> The type of customer-managed-key(CMK) used for encyrption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs. </p>
    pub fn cmk_type(mut self, input: crate::types::CmkType) -> Self {
        self.cmk_type = Some(input);
        self
    }
    /// <p> The type of customer-managed-key(CMK) used for encyrption. The two types of supported CMKs are customer owned CMKs and AWS owned CMKs. </p>
    pub fn set_cmk_type(mut self, input: std::option::Option<crate::types::CmkType>) -> Self {
        self.cmk_type = input;
        self
    }
    /// <p> The KMS encryption key id/alias used to encrypt the Data Store contents at rest. </p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p> The KMS encryption key id/alias used to encrypt the Data Store contents at rest. </p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// Consumes the builder and constructs a [`KmsEncryptionConfig`](crate::types::KmsEncryptionConfig).
    pub fn build(self) -> crate::types::KmsEncryptionConfig {
        crate::types::KmsEncryptionConfig {
            cmk_type: self.cmk_type,
            kms_key_id: self.kms_key_id,
        }
    }
}
