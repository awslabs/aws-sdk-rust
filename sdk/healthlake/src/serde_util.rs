// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_fhir_datastore_output_correct_errors(
    mut builder: crate::operation::create_fhir_datastore::builders::CreateFhirDatastoreOutputBuilder,
) -> crate::operation::create_fhir_datastore::builders::CreateFhirDatastoreOutputBuilder {
    if builder.datastore_id.is_none() {
        builder.datastore_id = Some(Default::default())
    }
    if builder.datastore_arn.is_none() {
        builder.datastore_arn = Some(Default::default())
    }
    if builder.datastore_status.is_none() {
        builder.datastore_status = "no value was set".parse::<crate::types::DatastoreStatus>().ok()
    }
    if builder.datastore_endpoint.is_none() {
        builder.datastore_endpoint = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_fhir_datastore_output_correct_errors(
    mut builder: crate::operation::delete_fhir_datastore::builders::DeleteFhirDatastoreOutputBuilder,
) -> crate::operation::delete_fhir_datastore::builders::DeleteFhirDatastoreOutputBuilder {
    if builder.datastore_id.is_none() {
        builder.datastore_id = Some(Default::default())
    }
    if builder.datastore_arn.is_none() {
        builder.datastore_arn = Some(Default::default())
    }
    if builder.datastore_status.is_none() {
        builder.datastore_status = "no value was set".parse::<crate::types::DatastoreStatus>().ok()
    }
    if builder.datastore_endpoint.is_none() {
        builder.datastore_endpoint = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_fhir_datastore_output_correct_errors(
    mut builder: crate::operation::describe_fhir_datastore::builders::DescribeFhirDatastoreOutputBuilder,
) -> crate::operation::describe_fhir_datastore::builders::DescribeFhirDatastoreOutputBuilder {
    if builder.datastore_properties.is_none() {
        builder.datastore_properties = {
            let builder = crate::types::builders::DatastorePropertiesBuilder::default();
            crate::serde_util::datastore_properties_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_fhir_export_job_output_correct_errors(
    mut builder: crate::operation::describe_fhir_export_job::builders::DescribeFhirExportJobOutputBuilder,
) -> crate::operation::describe_fhir_export_job::builders::DescribeFhirExportJobOutputBuilder {
    if builder.export_job_properties.is_none() {
        builder.export_job_properties = {
            let builder = crate::types::builders::ExportJobPropertiesBuilder::default();
            crate::serde_util::export_job_properties_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_fhir_import_job_output_correct_errors(
    mut builder: crate::operation::describe_fhir_import_job::builders::DescribeFhirImportJobOutputBuilder,
) -> crate::operation::describe_fhir_import_job::builders::DescribeFhirImportJobOutputBuilder {
    if builder.import_job_properties.is_none() {
        builder.import_job_properties = {
            let builder = crate::types::builders::ImportJobPropertiesBuilder::default();
            crate::serde_util::import_job_properties_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_fhir_datastores_output_correct_errors(
    mut builder: crate::operation::list_fhir_datastores::builders::ListFhirDatastoresOutputBuilder,
) -> crate::operation::list_fhir_datastores::builders::ListFhirDatastoresOutputBuilder {
    if builder.datastore_properties_list.is_none() {
        builder.datastore_properties_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_fhir_export_jobs_output_correct_errors(
    mut builder: crate::operation::list_fhir_export_jobs::builders::ListFhirExportJobsOutputBuilder,
) -> crate::operation::list_fhir_export_jobs::builders::ListFhirExportJobsOutputBuilder {
    if builder.export_job_properties_list.is_none() {
        builder.export_job_properties_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_fhir_import_jobs_output_correct_errors(
    mut builder: crate::operation::list_fhir_import_jobs::builders::ListFhirImportJobsOutputBuilder,
) -> crate::operation::list_fhir_import_jobs::builders::ListFhirImportJobsOutputBuilder {
    if builder.import_job_properties_list.is_none() {
        builder.import_job_properties_list = Some(Default::default())
    }
    builder
}

pub(crate) fn start_fhir_export_job_output_correct_errors(
    mut builder: crate::operation::start_fhir_export_job::builders::StartFhirExportJobOutputBuilder,
) -> crate::operation::start_fhir_export_job::builders::StartFhirExportJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.job_status.is_none() {
        builder.job_status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    builder
}

pub(crate) fn start_fhir_import_job_output_correct_errors(
    mut builder: crate::operation::start_fhir_import_job::builders::StartFhirImportJobOutputBuilder,
) -> crate::operation::start_fhir_import_job::builders::StartFhirImportJobOutputBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.job_status.is_none() {
        builder.job_status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    builder
}

pub(crate) fn datastore_properties_correct_errors(
    mut builder: crate::types::builders::DatastorePropertiesBuilder,
) -> crate::types::builders::DatastorePropertiesBuilder {
    if builder.datastore_id.is_none() {
        builder.datastore_id = Some(Default::default())
    }
    if builder.datastore_arn.is_none() {
        builder.datastore_arn = Some(Default::default())
    }
    if builder.datastore_status.is_none() {
        builder.datastore_status = "no value was set".parse::<crate::types::DatastoreStatus>().ok()
    }
    if builder.datastore_type_version.is_none() {
        builder.datastore_type_version = "no value was set".parse::<crate::types::FhirVersion>().ok()
    }
    if builder.datastore_endpoint.is_none() {
        builder.datastore_endpoint = Some(Default::default())
    }
    builder
}

pub(crate) fn export_job_properties_correct_errors(
    mut builder: crate::types::builders::ExportJobPropertiesBuilder,
) -> crate::types::builders::ExportJobPropertiesBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.job_status.is_none() {
        builder.job_status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.submit_time.is_none() {
        builder.submit_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.datastore_id.is_none() {
        builder.datastore_id = Some(Default::default())
    }
    if builder.output_data_config.is_none() {
        builder.output_data_config = Some(crate::types::OutputDataConfig::Unknown)
    }
    builder
}

pub(crate) fn import_job_properties_correct_errors(
    mut builder: crate::types::builders::ImportJobPropertiesBuilder,
) -> crate::types::builders::ImportJobPropertiesBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    if builder.job_status.is_none() {
        builder.job_status = "no value was set".parse::<crate::types::JobStatus>().ok()
    }
    if builder.submit_time.is_none() {
        builder.submit_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.datastore_id.is_none() {
        builder.datastore_id = Some(Default::default())
    }
    if builder.input_data_config.is_none() {
        builder.input_data_config = Some(crate::types::InputDataConfig::Unknown)
    }
    builder
}

pub(crate) fn identity_provider_configuration_correct_errors(
    mut builder: crate::types::builders::IdentityProviderConfigurationBuilder,
) -> crate::types::builders::IdentityProviderConfigurationBuilder {
    if builder.authorization_strategy.is_none() {
        builder.authorization_strategy = "no value was set".parse::<crate::types::AuthorizationStrategy>().ok()
    }
    builder
}

pub(crate) fn preload_data_config_correct_errors(
    mut builder: crate::types::builders::PreloadDataConfigBuilder,
) -> crate::types::builders::PreloadDataConfigBuilder {
    if builder.preload_data_type.is_none() {
        builder.preload_data_type = "no value was set".parse::<crate::types::PreloadDataType>().ok()
    }
    builder
}

pub(crate) fn sse_configuration_correct_errors(
    mut builder: crate::types::builders::SseConfigurationBuilder,
) -> crate::types::builders::SseConfigurationBuilder {
    if builder.kms_encryption_config.is_none() {
        builder.kms_encryption_config = {
            let builder = crate::types::builders::KmsEncryptionConfigBuilder::default();
            crate::serde_util::kms_encryption_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn kms_encryption_config_correct_errors(
    mut builder: crate::types::builders::KmsEncryptionConfigBuilder,
) -> crate::types::builders::KmsEncryptionConfigBuilder {
    if builder.cmk_type.is_none() {
        builder.cmk_type = "no value was set".parse::<crate::types::CmkType>().ok()
    }
    builder
}

pub(crate) fn s3_configuration_correct_errors(
    mut builder: crate::types::builders::S3ConfigurationBuilder,
) -> crate::types::builders::S3ConfigurationBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    if builder.kms_key_id.is_none() {
        builder.kms_key_id = Some(Default::default())
    }
    builder
}
