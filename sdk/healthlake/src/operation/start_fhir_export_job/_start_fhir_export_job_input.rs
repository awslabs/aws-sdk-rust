// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartFhirExportJobInput {
    /// <p>The user generated name for an export job.</p>
    #[doc(hidden)]
    pub job_name: std::option::Option<std::string::String>,
    /// <p>The output data configuration that was supplied when the export job was created.</p>
    #[doc(hidden)]
    pub output_data_config: std::option::Option<crate::types::OutputDataConfig>,
    /// <p>The AWS generated ID for the Data Store from which files are being exported for an export job.</p>
    #[doc(hidden)]
    pub datastore_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name used during the initiation of the job.</p>
    #[doc(hidden)]
    pub data_access_role_arn: std::option::Option<std::string::String>,
    /// <p>An optional user provided token used for ensuring idempotency.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl StartFhirExportJobInput {
    /// <p>The user generated name for an export job.</p>
    pub fn job_name(&self) -> std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The output data configuration that was supplied when the export job was created.</p>
    pub fn output_data_config(&self) -> std::option::Option<&crate::types::OutputDataConfig> {
        self.output_data_config.as_ref()
    }
    /// <p>The AWS generated ID for the Data Store from which files are being exported for an export job.</p>
    pub fn datastore_id(&self) -> std::option::Option<&str> {
        self.datastore_id.as_deref()
    }
    /// <p>The Amazon Resource Name used during the initiation of the job.</p>
    pub fn data_access_role_arn(&self) -> std::option::Option<&str> {
        self.data_access_role_arn.as_deref()
    }
    /// <p>An optional user provided token used for ensuring idempotency.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl StartFhirExportJobInput {
    /// Creates a new builder-style object to manufacture [`StartFhirExportJobInput`](crate::operation::start_fhir_export_job::StartFhirExportJobInput).
    pub fn builder(
    ) -> crate::operation::start_fhir_export_job::builders::StartFhirExportJobInputBuilder {
        crate::operation::start_fhir_export_job::builders::StartFhirExportJobInputBuilder::default()
    }
}

/// A builder for [`StartFhirExportJobInput`](crate::operation::start_fhir_export_job::StartFhirExportJobInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartFhirExportJobInputBuilder {
    pub(crate) job_name: std::option::Option<std::string::String>,
    pub(crate) output_data_config: std::option::Option<crate::types::OutputDataConfig>,
    pub(crate) datastore_id: std::option::Option<std::string::String>,
    pub(crate) data_access_role_arn: std::option::Option<std::string::String>,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl StartFhirExportJobInputBuilder {
    /// <p>The user generated name for an export job.</p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_name = Some(input.into());
        self
    }
    /// <p>The user generated name for an export job.</p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The output data configuration that was supplied when the export job was created.</p>
    pub fn output_data_config(mut self, input: crate::types::OutputDataConfig) -> Self {
        self.output_data_config = Some(input);
        self
    }
    /// <p>The output data configuration that was supplied when the export job was created.</p>
    pub fn set_output_data_config(
        mut self,
        input: std::option::Option<crate::types::OutputDataConfig>,
    ) -> Self {
        self.output_data_config = input;
        self
    }
    /// <p>The AWS generated ID for the Data Store from which files are being exported for an export job.</p>
    pub fn datastore_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.datastore_id = Some(input.into());
        self
    }
    /// <p>The AWS generated ID for the Data Store from which files are being exported for an export job.</p>
    pub fn set_datastore_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.datastore_id = input;
        self
    }
    /// <p>The Amazon Resource Name used during the initiation of the job.</p>
    pub fn data_access_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_access_role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name used during the initiation of the job.</p>
    pub fn set_data_access_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.data_access_role_arn = input;
        self
    }
    /// <p>An optional user provided token used for ensuring idempotency.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>An optional user provided token used for ensuring idempotency.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`StartFhirExportJobInput`](crate::operation::start_fhir_export_job::StartFhirExportJobInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_fhir_export_job::StartFhirExportJobInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::start_fhir_export_job::StartFhirExportJobInput {
                job_name: self.job_name,
                output_data_config: self.output_data_config,
                datastore_id: self.datastore_id,
                data_access_role_arn: self.data_access_role_arn,
                client_token: self.client_token,
            },
        )
    }
}
