// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartFhirExportJobOutput {
    /// <p>The AWS generated ID for an export job.</p>
    pub job_id: ::std::string::String,
    /// <p>The status of a FHIR export job. Possible statuses are SUBMITTED, IN_PROGRESS, COMPLETED, or FAILED.</p>
    pub job_status: crate::types::JobStatus,
    /// <p>The AWS generated ID for the data store from which files are being exported for an export job.</p>
    pub datastore_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartFhirExportJobOutput {
    /// <p>The AWS generated ID for an export job.</p>
    pub fn job_id(&self) -> &str {
        use std::ops::Deref;
        self.job_id.deref()
    }
    /// <p>The status of a FHIR export job. Possible statuses are SUBMITTED, IN_PROGRESS, COMPLETED, or FAILED.</p>
    pub fn job_status(&self) -> &crate::types::JobStatus {
        &self.job_status
    }
    /// <p>The AWS generated ID for the data store from which files are being exported for an export job.</p>
    pub fn datastore_id(&self) -> ::std::option::Option<&str> {
        self.datastore_id.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for StartFhirExportJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartFhirExportJobOutput {
    /// Creates a new builder-style object to manufacture [`StartFhirExportJobOutput`](crate::operation::start_fhir_export_job::StartFhirExportJobOutput).
    pub fn builder() -> crate::operation::start_fhir_export_job::builders::StartFhirExportJobOutputBuilder {
        crate::operation::start_fhir_export_job::builders::StartFhirExportJobOutputBuilder::default()
    }
}

/// A builder for [`StartFhirExportJobOutput`](crate::operation::start_fhir_export_job::StartFhirExportJobOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartFhirExportJobOutputBuilder {
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) job_status: ::std::option::Option<crate::types::JobStatus>,
    pub(crate) datastore_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl StartFhirExportJobOutputBuilder {
    /// <p>The AWS generated ID for an export job.</p>
    /// This field is required.
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS generated ID for an export job.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The AWS generated ID for an export job.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The status of a FHIR export job. Possible statuses are SUBMITTED, IN_PROGRESS, COMPLETED, or FAILED.</p>
    /// This field is required.
    pub fn job_status(mut self, input: crate::types::JobStatus) -> Self {
        self.job_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of a FHIR export job. Possible statuses are SUBMITTED, IN_PROGRESS, COMPLETED, or FAILED.</p>
    pub fn set_job_status(mut self, input: ::std::option::Option<crate::types::JobStatus>) -> Self {
        self.job_status = input;
        self
    }
    /// <p>The status of a FHIR export job. Possible statuses are SUBMITTED, IN_PROGRESS, COMPLETED, or FAILED.</p>
    pub fn get_job_status(&self) -> &::std::option::Option<crate::types::JobStatus> {
        &self.job_status
    }
    /// <p>The AWS generated ID for the data store from which files are being exported for an export job.</p>
    pub fn datastore_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.datastore_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS generated ID for the data store from which files are being exported for an export job.</p>
    pub fn set_datastore_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.datastore_id = input;
        self
    }
    /// <p>The AWS generated ID for the data store from which files are being exported for an export job.</p>
    pub fn get_datastore_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.datastore_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartFhirExportJobOutput`](crate::operation::start_fhir_export_job::StartFhirExportJobOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`job_id`](crate::operation::start_fhir_export_job::builders::StartFhirExportJobOutputBuilder::job_id)
    /// - [`job_status`](crate::operation::start_fhir_export_job::builders::StartFhirExportJobOutputBuilder::job_status)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_fhir_export_job::StartFhirExportJobOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::start_fhir_export_job::StartFhirExportJobOutput {
            job_id: self.job_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_id",
                    "job_id was not specified but it is required when building StartFhirExportJobOutput",
                )
            })?,
            job_status: self.job_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "job_status",
                    "job_status was not specified but it is required when building StartFhirExportJobOutput",
                )
            })?,
            datastore_id: self.datastore_id,
            _request_id: self._request_id,
        })
    }
}
