// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_fhir_datastore::_create_fhir_datastore_output::CreateFhirDatastoreOutputBuilder;

pub use crate::operation::create_fhir_datastore::_create_fhir_datastore_input::CreateFhirDatastoreInputBuilder;

impl crate::operation::create_fhir_datastore::builders::CreateFhirDatastoreInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_fhir_datastore::CreateFhirDatastoreOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_fhir_datastore::CreateFHIRDatastoreError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_fhir_datastore();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateFHIRDatastore`.
///
/// <p>Creates a data store that can ingest and export FHIR formatted data.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateFHIRDatastoreFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_fhir_datastore::builders::CreateFhirDatastoreInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_fhir_datastore::CreateFhirDatastoreOutput,
        crate::operation::create_fhir_datastore::CreateFHIRDatastoreError,
    > for CreateFHIRDatastoreFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_fhir_datastore::CreateFhirDatastoreOutput,
            crate::operation::create_fhir_datastore::CreateFHIRDatastoreError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateFHIRDatastoreFluentBuilder {
    /// Creates a new `CreateFHIRDatastore`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateFHIRDatastore as a reference.
    pub fn as_input(&self) -> &crate::operation::create_fhir_datastore::builders::CreateFhirDatastoreInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_fhir_datastore::CreateFhirDatastoreOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_fhir_datastore::CreateFHIRDatastoreError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_fhir_datastore::CreateFHIRDatastore::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_fhir_datastore::CreateFHIRDatastore::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_fhir_datastore::CreateFhirDatastoreOutput,
        crate::operation::create_fhir_datastore::CreateFHIRDatastoreError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The user generated name for the data store.</p>
    pub fn datastore_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.datastore_name(input.into());
        self
    }
    /// <p>The user generated name for the data store.</p>
    pub fn set_datastore_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_datastore_name(input);
        self
    }
    /// <p>The user generated name for the data store.</p>
    pub fn get_datastore_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_datastore_name()
    }
    /// <p>The FHIR version of the data store. The only supported version is R4.</p>
    pub fn datastore_type_version(mut self, input: crate::types::FhirVersion) -> Self {
        self.inner = self.inner.datastore_type_version(input);
        self
    }
    /// <p>The FHIR version of the data store. The only supported version is R4.</p>
    pub fn set_datastore_type_version(mut self, input: ::std::option::Option<crate::types::FhirVersion>) -> Self {
        self.inner = self.inner.set_datastore_type_version(input);
        self
    }
    /// <p>The FHIR version of the data store. The only supported version is R4.</p>
    pub fn get_datastore_type_version(&self) -> &::std::option::Option<crate::types::FhirVersion> {
        self.inner.get_datastore_type_version()
    }
    /// <p>The server-side encryption key configuration for a customer provided encryption key specified for creating a data store.</p>
    pub fn sse_configuration(mut self, input: crate::types::SseConfiguration) -> Self {
        self.inner = self.inner.sse_configuration(input);
        self
    }
    /// <p>The server-side encryption key configuration for a customer provided encryption key specified for creating a data store.</p>
    pub fn set_sse_configuration(mut self, input: ::std::option::Option<crate::types::SseConfiguration>) -> Self {
        self.inner = self.inner.set_sse_configuration(input);
        self
    }
    /// <p>The server-side encryption key configuration for a customer provided encryption key specified for creating a data store.</p>
    pub fn get_sse_configuration(&self) -> &::std::option::Option<crate::types::SseConfiguration> {
        self.inner.get_sse_configuration()
    }
    /// <p>Optional parameter to preload data upon creation of the data store. Currently, the only supported preloaded data is synthetic data generated from Synthea.</p>
    pub fn preload_data_config(mut self, input: crate::types::PreloadDataConfig) -> Self {
        self.inner = self.inner.preload_data_config(input);
        self
    }
    /// <p>Optional parameter to preload data upon creation of the data store. Currently, the only supported preloaded data is synthetic data generated from Synthea.</p>
    pub fn set_preload_data_config(mut self, input: ::std::option::Option<crate::types::PreloadDataConfig>) -> Self {
        self.inner = self.inner.set_preload_data_config(input);
        self
    }
    /// <p>Optional parameter to preload data upon creation of the data store. Currently, the only supported preloaded data is synthetic data generated from Synthea.</p>
    pub fn get_preload_data_config(&self) -> &::std::option::Option<crate::types::PreloadDataConfig> {
        self.inner.get_preload_data_config()
    }
    /// <p>Optional user provided token used for ensuring idempotency.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Optional user provided token used for ensuring idempotency.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>Optional user provided token used for ensuring idempotency.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    ///
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Resource tags that are applied to a data store when it is created.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Resource tags that are applied to a data store when it is created.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Resource tags that are applied to a data store when it is created.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
    /// <p>The configuration of the identity provider that you want to use for your data store.</p>
    pub fn identity_provider_configuration(mut self, input: crate::types::IdentityProviderConfiguration) -> Self {
        self.inner = self.inner.identity_provider_configuration(input);
        self
    }
    /// <p>The configuration of the identity provider that you want to use for your data store.</p>
    pub fn set_identity_provider_configuration(mut self, input: ::std::option::Option<crate::types::IdentityProviderConfiguration>) -> Self {
        self.inner = self.inner.set_identity_provider_configuration(input);
        self
    }
    /// <p>The configuration of the identity provider that you want to use for your data store.</p>
    pub fn get_identity_provider_configuration(&self) -> &::std::option::Option<crate::types::IdentityProviderConfiguration> {
        self.inner.get_identity_provider_configuration()
    }
}
