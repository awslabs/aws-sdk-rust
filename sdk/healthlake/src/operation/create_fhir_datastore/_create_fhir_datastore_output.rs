// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateFhirDatastoreOutput {
    /// <p>The AWS-generated data store id. This id is in the output from the initial data store creation call.</p>
    pub datastore_id: ::std::string::String,
    /// <p>The data store ARN is generated during the creation of the data store and can be found in the output from the initial data store creation call.</p>
    pub datastore_arn: ::std::string::String,
    /// <p>The status of the FHIR data store.</p>
    pub datastore_status: crate::types::DatastoreStatus,
    /// <p>The AWS endpoint for the created data store.</p>
    pub datastore_endpoint: ::std::string::String,
    _request_id: Option<String>,
}
impl CreateFhirDatastoreOutput {
    /// <p>The AWS-generated data store id. This id is in the output from the initial data store creation call.</p>
    pub fn datastore_id(&self) -> &str {
        use std::ops::Deref;
        self.datastore_id.deref()
    }
    /// <p>The data store ARN is generated during the creation of the data store and can be found in the output from the initial data store creation call.</p>
    pub fn datastore_arn(&self) -> &str {
        use std::ops::Deref;
        self.datastore_arn.deref()
    }
    /// <p>The status of the FHIR data store.</p>
    pub fn datastore_status(&self) -> &crate::types::DatastoreStatus {
        &self.datastore_status
    }
    /// <p>The AWS endpoint for the created data store.</p>
    pub fn datastore_endpoint(&self) -> &str {
        use std::ops::Deref;
        self.datastore_endpoint.deref()
    }
}
impl ::aws_http::request_id::RequestId for CreateFhirDatastoreOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateFhirDatastoreOutput {
    /// Creates a new builder-style object to manufacture [`CreateFhirDatastoreOutput`](crate::operation::create_fhir_datastore::CreateFhirDatastoreOutput).
    pub fn builder() -> crate::operation::create_fhir_datastore::builders::CreateFhirDatastoreOutputBuilder {
        crate::operation::create_fhir_datastore::builders::CreateFhirDatastoreOutputBuilder::default()
    }
}

/// A builder for [`CreateFhirDatastoreOutput`](crate::operation::create_fhir_datastore::CreateFhirDatastoreOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateFhirDatastoreOutputBuilder {
    pub(crate) datastore_id: ::std::option::Option<::std::string::String>,
    pub(crate) datastore_arn: ::std::option::Option<::std::string::String>,
    pub(crate) datastore_status: ::std::option::Option<crate::types::DatastoreStatus>,
    pub(crate) datastore_endpoint: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl CreateFhirDatastoreOutputBuilder {
    /// <p>The AWS-generated data store id. This id is in the output from the initial data store creation call.</p>
    /// This field is required.
    pub fn datastore_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.datastore_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS-generated data store id. This id is in the output from the initial data store creation call.</p>
    pub fn set_datastore_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.datastore_id = input;
        self
    }
    /// <p>The AWS-generated data store id. This id is in the output from the initial data store creation call.</p>
    pub fn get_datastore_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.datastore_id
    }
    /// <p>The data store ARN is generated during the creation of the data store and can be found in the output from the initial data store creation call.</p>
    /// This field is required.
    pub fn datastore_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.datastore_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data store ARN is generated during the creation of the data store and can be found in the output from the initial data store creation call.</p>
    pub fn set_datastore_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.datastore_arn = input;
        self
    }
    /// <p>The data store ARN is generated during the creation of the data store and can be found in the output from the initial data store creation call.</p>
    pub fn get_datastore_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.datastore_arn
    }
    /// <p>The status of the FHIR data store.</p>
    /// This field is required.
    pub fn datastore_status(mut self, input: crate::types::DatastoreStatus) -> Self {
        self.datastore_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the FHIR data store.</p>
    pub fn set_datastore_status(mut self, input: ::std::option::Option<crate::types::DatastoreStatus>) -> Self {
        self.datastore_status = input;
        self
    }
    /// <p>The status of the FHIR data store.</p>
    pub fn get_datastore_status(&self) -> &::std::option::Option<crate::types::DatastoreStatus> {
        &self.datastore_status
    }
    /// <p>The AWS endpoint for the created data store.</p>
    /// This field is required.
    pub fn datastore_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.datastore_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS endpoint for the created data store.</p>
    pub fn set_datastore_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.datastore_endpoint = input;
        self
    }
    /// <p>The AWS endpoint for the created data store.</p>
    pub fn get_datastore_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.datastore_endpoint
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateFhirDatastoreOutput`](crate::operation::create_fhir_datastore::CreateFhirDatastoreOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`datastore_id`](crate::operation::create_fhir_datastore::builders::CreateFhirDatastoreOutputBuilder::datastore_id)
    /// - [`datastore_arn`](crate::operation::create_fhir_datastore::builders::CreateFhirDatastoreOutputBuilder::datastore_arn)
    /// - [`datastore_status`](crate::operation::create_fhir_datastore::builders::CreateFhirDatastoreOutputBuilder::datastore_status)
    /// - [`datastore_endpoint`](crate::operation::create_fhir_datastore::builders::CreateFhirDatastoreOutputBuilder::datastore_endpoint)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_fhir_datastore::CreateFhirDatastoreOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_fhir_datastore::CreateFhirDatastoreOutput {
            datastore_id: self.datastore_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "datastore_id",
                    "datastore_id was not specified but it is required when building CreateFhirDatastoreOutput",
                )
            })?,
            datastore_arn: self.datastore_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "datastore_arn",
                    "datastore_arn was not specified but it is required when building CreateFhirDatastoreOutput",
                )
            })?,
            datastore_status: self.datastore_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "datastore_status",
                    "datastore_status was not specified but it is required when building CreateFhirDatastoreOutput",
                )
            })?,
            datastore_endpoint: self.datastore_endpoint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "datastore_endpoint",
                    "datastore_endpoint was not specified but it is required when building CreateFhirDatastoreOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
