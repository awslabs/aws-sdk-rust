// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateFhirDatastoreInput {
    /// <p>The user generated name for the data store.</p>
    pub datastore_name: ::std::option::Option<::std::string::String>,
    /// <p>The FHIR version of the data store. The only supported version is R4.</p>
    pub datastore_type_version: ::std::option::Option<crate::types::FhirVersion>,
    /// <p> The server-side encryption key configuration for a customer provided encryption key specified for creating a data store. </p>
    pub sse_configuration: ::std::option::Option<crate::types::SseConfiguration>,
    /// <p>Optional parameter to preload data upon creation of the data store. Currently, the only supported preloaded data is synthetic data generated from Synthea.</p>
    pub preload_data_config: ::std::option::Option<crate::types::PreloadDataConfig>,
    /// <p>Optional user provided token used for ensuring idempotency.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p> Resource tags that are applied to a data store when it is created. </p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The configuration of the identity provider that you want to use for your data store.</p>
    pub identity_provider_configuration: ::std::option::Option<crate::types::IdentityProviderConfiguration>,
}
impl CreateFhirDatastoreInput {
    /// <p>The user generated name for the data store.</p>
    pub fn datastore_name(&self) -> ::std::option::Option<&str> {
        self.datastore_name.as_deref()
    }
    /// <p>The FHIR version of the data store. The only supported version is R4.</p>
    pub fn datastore_type_version(&self) -> ::std::option::Option<&crate::types::FhirVersion> {
        self.datastore_type_version.as_ref()
    }
    /// <p> The server-side encryption key configuration for a customer provided encryption key specified for creating a data store. </p>
    pub fn sse_configuration(&self) -> ::std::option::Option<&crate::types::SseConfiguration> {
        self.sse_configuration.as_ref()
    }
    /// <p>Optional parameter to preload data upon creation of the data store. Currently, the only supported preloaded data is synthetic data generated from Synthea.</p>
    pub fn preload_data_config(&self) -> ::std::option::Option<&crate::types::PreloadDataConfig> {
        self.preload_data_config.as_ref()
    }
    /// <p>Optional user provided token used for ensuring idempotency.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p> Resource tags that are applied to a data store when it is created. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The configuration of the identity provider that you want to use for your data store.</p>
    pub fn identity_provider_configuration(&self) -> ::std::option::Option<&crate::types::IdentityProviderConfiguration> {
        self.identity_provider_configuration.as_ref()
    }
}
impl CreateFhirDatastoreInput {
    /// Creates a new builder-style object to manufacture [`CreateFhirDatastoreInput`](crate::operation::create_fhir_datastore::CreateFhirDatastoreInput).
    pub fn builder() -> crate::operation::create_fhir_datastore::builders::CreateFhirDatastoreInputBuilder {
        crate::operation::create_fhir_datastore::builders::CreateFhirDatastoreInputBuilder::default()
    }
}

/// A builder for [`CreateFhirDatastoreInput`](crate::operation::create_fhir_datastore::CreateFhirDatastoreInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateFhirDatastoreInputBuilder {
    pub(crate) datastore_name: ::std::option::Option<::std::string::String>,
    pub(crate) datastore_type_version: ::std::option::Option<crate::types::FhirVersion>,
    pub(crate) sse_configuration: ::std::option::Option<crate::types::SseConfiguration>,
    pub(crate) preload_data_config: ::std::option::Option<crate::types::PreloadDataConfig>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) identity_provider_configuration: ::std::option::Option<crate::types::IdentityProviderConfiguration>,
}
impl CreateFhirDatastoreInputBuilder {
    /// <p>The user generated name for the data store.</p>
    pub fn datastore_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.datastore_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user generated name for the data store.</p>
    pub fn set_datastore_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.datastore_name = input;
        self
    }
    /// <p>The user generated name for the data store.</p>
    pub fn get_datastore_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.datastore_name
    }
    /// <p>The FHIR version of the data store. The only supported version is R4.</p>
    /// This field is required.
    pub fn datastore_type_version(mut self, input: crate::types::FhirVersion) -> Self {
        self.datastore_type_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The FHIR version of the data store. The only supported version is R4.</p>
    pub fn set_datastore_type_version(mut self, input: ::std::option::Option<crate::types::FhirVersion>) -> Self {
        self.datastore_type_version = input;
        self
    }
    /// <p>The FHIR version of the data store. The only supported version is R4.</p>
    pub fn get_datastore_type_version(&self) -> &::std::option::Option<crate::types::FhirVersion> {
        &self.datastore_type_version
    }
    /// <p> The server-side encryption key configuration for a customer provided encryption key specified for creating a data store. </p>
    pub fn sse_configuration(mut self, input: crate::types::SseConfiguration) -> Self {
        self.sse_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p> The server-side encryption key configuration for a customer provided encryption key specified for creating a data store. </p>
    pub fn set_sse_configuration(mut self, input: ::std::option::Option<crate::types::SseConfiguration>) -> Self {
        self.sse_configuration = input;
        self
    }
    /// <p> The server-side encryption key configuration for a customer provided encryption key specified for creating a data store. </p>
    pub fn get_sse_configuration(&self) -> &::std::option::Option<crate::types::SseConfiguration> {
        &self.sse_configuration
    }
    /// <p>Optional parameter to preload data upon creation of the data store. Currently, the only supported preloaded data is synthetic data generated from Synthea.</p>
    pub fn preload_data_config(mut self, input: crate::types::PreloadDataConfig) -> Self {
        self.preload_data_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Optional parameter to preload data upon creation of the data store. Currently, the only supported preloaded data is synthetic data generated from Synthea.</p>
    pub fn set_preload_data_config(mut self, input: ::std::option::Option<crate::types::PreloadDataConfig>) -> Self {
        self.preload_data_config = input;
        self
    }
    /// <p>Optional parameter to preload data upon creation of the data store. Currently, the only supported preloaded data is synthetic data generated from Synthea.</p>
    pub fn get_preload_data_config(&self) -> &::std::option::Option<crate::types::PreloadDataConfig> {
        &self.preload_data_config
    }
    /// <p>Optional user provided token used for ensuring idempotency.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional user provided token used for ensuring idempotency.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Optional user provided token used for ensuring idempotency.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> Resource tags that are applied to a data store when it is created. </p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p> Resource tags that are applied to a data store when it is created. </p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p> Resource tags that are applied to a data store when it is created. </p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The configuration of the identity provider that you want to use for your data store.</p>
    pub fn identity_provider_configuration(mut self, input: crate::types::IdentityProviderConfiguration) -> Self {
        self.identity_provider_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the identity provider that you want to use for your data store.</p>
    pub fn set_identity_provider_configuration(mut self, input: ::std::option::Option<crate::types::IdentityProviderConfiguration>) -> Self {
        self.identity_provider_configuration = input;
        self
    }
    /// <p>The configuration of the identity provider that you want to use for your data store.</p>
    pub fn get_identity_provider_configuration(&self) -> &::std::option::Option<crate::types::IdentityProviderConfiguration> {
        &self.identity_provider_configuration
    }
    /// Consumes the builder and constructs a [`CreateFhirDatastoreInput`](crate::operation::create_fhir_datastore::CreateFhirDatastoreInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_fhir_datastore::CreateFhirDatastoreInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_fhir_datastore::CreateFhirDatastoreInput {
            datastore_name: self.datastore_name,
            datastore_type_version: self.datastore_type_version,
            sse_configuration: self.sse_configuration,
            preload_data_config: self.preload_data_config,
            client_token: self.client_token,
            tags: self.tags,
            identity_provider_configuration: self.identity_provider_configuration,
        })
    }
}
