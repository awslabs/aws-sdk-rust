// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListFhirImportJobsInput {
    /// <p> This parameter limits the response to the import job with the specified data store ID. </p>
    pub datastore_id: ::std::option::Option<::std::string::String>,
    /// <p> A pagination token used to identify the next page of results to return for a ListFHIRImportJobs query. </p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p> This parameter limits the number of results returned for a ListFHIRImportJobs to a maximum quantity specified by the user. </p>
    pub max_results: ::std::option::Option<i32>,
    /// <p> This parameter limits the response to the import job with the specified job name. </p>
    pub job_name: ::std::option::Option<::std::string::String>,
    /// <p> This parameter limits the response to the import job with the specified job status. </p>
    pub job_status: ::std::option::Option<crate::types::JobStatus>,
    /// <p> This parameter limits the response to FHIR import jobs submitted before a user specified date. </p>
    pub submitted_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> This parameter limits the response to FHIR import jobs submitted after a user specified date. </p>
    pub submitted_after: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ListFhirImportJobsInput {
    /// <p> This parameter limits the response to the import job with the specified data store ID. </p>
    pub fn datastore_id(&self) -> ::std::option::Option<&str> {
        self.datastore_id.as_deref()
    }
    /// <p> A pagination token used to identify the next page of results to return for a ListFHIRImportJobs query. </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p> This parameter limits the number of results returned for a ListFHIRImportJobs to a maximum quantity specified by the user. </p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p> This parameter limits the response to the import job with the specified job name. </p>
    pub fn job_name(&self) -> ::std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p> This parameter limits the response to the import job with the specified job status. </p>
    pub fn job_status(&self) -> ::std::option::Option<&crate::types::JobStatus> {
        self.job_status.as_ref()
    }
    /// <p> This parameter limits the response to FHIR import jobs submitted before a user specified date. </p>
    pub fn submitted_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.submitted_before.as_ref()
    }
    /// <p> This parameter limits the response to FHIR import jobs submitted after a user specified date. </p>
    pub fn submitted_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.submitted_after.as_ref()
    }
}
impl ListFhirImportJobsInput {
    /// Creates a new builder-style object to manufacture [`ListFhirImportJobsInput`](crate::operation::list_fhir_import_jobs::ListFhirImportJobsInput).
    pub fn builder() -> crate::operation::list_fhir_import_jobs::builders::ListFhirImportJobsInputBuilder {
        crate::operation::list_fhir_import_jobs::builders::ListFhirImportJobsInputBuilder::default()
    }
}

/// A builder for [`ListFhirImportJobsInput`](crate::operation::list_fhir_import_jobs::ListFhirImportJobsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListFhirImportJobsInputBuilder {
    pub(crate) datastore_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) job_name: ::std::option::Option<::std::string::String>,
    pub(crate) job_status: ::std::option::Option<crate::types::JobStatus>,
    pub(crate) submitted_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) submitted_after: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ListFhirImportJobsInputBuilder {
    /// <p> This parameter limits the response to the import job with the specified data store ID. </p>
    /// This field is required.
    pub fn datastore_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.datastore_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> This parameter limits the response to the import job with the specified data store ID. </p>
    pub fn set_datastore_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.datastore_id = input;
        self
    }
    /// <p> This parameter limits the response to the import job with the specified data store ID. </p>
    pub fn get_datastore_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.datastore_id
    }
    /// <p> A pagination token used to identify the next page of results to return for a ListFHIRImportJobs query. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A pagination token used to identify the next page of results to return for a ListFHIRImportJobs query. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p> A pagination token used to identify the next page of results to return for a ListFHIRImportJobs query. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p> This parameter limits the number of results returned for a ListFHIRImportJobs to a maximum quantity specified by the user. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p> This parameter limits the number of results returned for a ListFHIRImportJobs to a maximum quantity specified by the user. </p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p> This parameter limits the number of results returned for a ListFHIRImportJobs to a maximum quantity specified by the user. </p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p> This parameter limits the response to the import job with the specified job name. </p>
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> This parameter limits the response to the import job with the specified job name. </p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p> This parameter limits the response to the import job with the specified job name. </p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_name
    }
    /// <p> This parameter limits the response to the import job with the specified job status. </p>
    pub fn job_status(mut self, input: crate::types::JobStatus) -> Self {
        self.job_status = ::std::option::Option::Some(input);
        self
    }
    /// <p> This parameter limits the response to the import job with the specified job status. </p>
    pub fn set_job_status(mut self, input: ::std::option::Option<crate::types::JobStatus>) -> Self {
        self.job_status = input;
        self
    }
    /// <p> This parameter limits the response to the import job with the specified job status. </p>
    pub fn get_job_status(&self) -> &::std::option::Option<crate::types::JobStatus> {
        &self.job_status
    }
    /// <p> This parameter limits the response to FHIR import jobs submitted before a user specified date. </p>
    pub fn submitted_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.submitted_before = ::std::option::Option::Some(input);
        self
    }
    /// <p> This parameter limits the response to FHIR import jobs submitted before a user specified date. </p>
    pub fn set_submitted_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.submitted_before = input;
        self
    }
    /// <p> This parameter limits the response to FHIR import jobs submitted before a user specified date. </p>
    pub fn get_submitted_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.submitted_before
    }
    /// <p> This parameter limits the response to FHIR import jobs submitted after a user specified date. </p>
    pub fn submitted_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.submitted_after = ::std::option::Option::Some(input);
        self
    }
    /// <p> This parameter limits the response to FHIR import jobs submitted after a user specified date. </p>
    pub fn set_submitted_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.submitted_after = input;
        self
    }
    /// <p> This parameter limits the response to FHIR import jobs submitted after a user specified date. </p>
    pub fn get_submitted_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.submitted_after
    }
    /// Consumes the builder and constructs a [`ListFhirImportJobsInput`](crate::operation::list_fhir_import_jobs::ListFhirImportJobsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_fhir_import_jobs::ListFhirImportJobsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_fhir_import_jobs::ListFhirImportJobsInput {
            datastore_id: self.datastore_id,
            next_token: self.next_token,
            max_results: self.max_results,
            job_name: self.job_name,
            job_status: self.job_status,
            submitted_before: self.submitted_before,
            submitted_after: self.submitted_after,
        })
    }
}
