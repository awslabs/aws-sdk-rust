// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListFHIRDatastores`](crate::client::fluent_builders::ListFHIRDatastores) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListFHIRDatastores::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`filter(DatastoreFilter)`](crate::client::fluent_builders::ListFHIRDatastores::filter) / [`set_filter(Option<DatastoreFilter>)`](crate::client::fluent_builders::ListFHIRDatastores::set_filter): <p>Lists all filters associated with a FHIR Data Store request.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListFHIRDatastores::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListFHIRDatastores::set_next_token): <p>Fetches the next page of Data Stores when results are paginated.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListFHIRDatastores::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListFHIRDatastores::set_max_results): <p>The maximum number of Data Stores returned in a single page of a ListFHIRDatastoresRequest call.</p>
    /// - On success, responds with [`ListFhirDatastoresOutput`](crate::output::ListFhirDatastoresOutput) with field(s):
    ///   - [`datastore_properties_list(Option<Vec<DatastoreProperties>>)`](crate::output::ListFhirDatastoresOutput::datastore_properties_list): <p>All properties associated with the listed Data Stores.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListFhirDatastoresOutput::next_token): <p>Pagination token that can be used to retrieve the next page of results.</p>
    /// - On failure, responds with [`SdkError<ListFHIRDatastoresError>`](crate::error::ListFHIRDatastoresError)
    pub fn list_fhir_datastores(&self) -> crate::client::fluent_builders::ListFHIRDatastores {
        crate::client::fluent_builders::ListFHIRDatastores::new(self.handle.clone())
    }
}
