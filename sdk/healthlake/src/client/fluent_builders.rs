// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Fluent builder constructing a request to `CreateFHIRDatastore`.
///
/// <p>Creates a Data Store that can ingest and export FHIR formatted data.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateFHIRDatastore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_fhir_datastore_input::Builder,
}
impl CreateFHIRDatastore {
    /// Creates a new `CreateFHIRDatastore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateFHIRDatastore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateFHIRDatastoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateFhirDatastoreOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateFHIRDatastoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The user generated name for the Data Store.</p>
    pub fn datastore_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.datastore_name(input.into());
        self
    }
    /// <p>The user generated name for the Data Store.</p>
    pub fn set_datastore_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_datastore_name(input);
        self
    }
    /// <p>The FHIR version of the Data Store. The only supported version is R4.</p>
    pub fn datastore_type_version(mut self, input: crate::model::FhirVersion) -> Self {
        self.inner = self.inner.datastore_type_version(input);
        self
    }
    /// <p>The FHIR version of the Data Store. The only supported version is R4.</p>
    pub fn set_datastore_type_version(
        mut self,
        input: std::option::Option<crate::model::FhirVersion>,
    ) -> Self {
        self.inner = self.inner.set_datastore_type_version(input);
        self
    }
    /// <p> The server-side encryption key configuration for a customer provided encryption key specified for creating a Data Store. </p>
    pub fn sse_configuration(mut self, input: crate::model::SseConfiguration) -> Self {
        self.inner = self.inner.sse_configuration(input);
        self
    }
    /// <p> The server-side encryption key configuration for a customer provided encryption key specified for creating a Data Store. </p>
    pub fn set_sse_configuration(
        mut self,
        input: std::option::Option<crate::model::SseConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_sse_configuration(input);
        self
    }
    /// <p>Optional parameter to preload data upon creation of the Data Store. Currently, the only supported preloaded data is synthetic data generated from Synthea.</p>
    pub fn preload_data_config(mut self, input: crate::model::PreloadDataConfig) -> Self {
        self.inner = self.inner.preload_data_config(input);
        self
    }
    /// <p>Optional parameter to preload data upon creation of the Data Store. Currently, the only supported preloaded data is synthetic data generated from Synthea.</p>
    pub fn set_preload_data_config(
        mut self,
        input: std::option::Option<crate::model::PreloadDataConfig>,
    ) -> Self {
        self.inner = self.inner.set_preload_data_config(input);
        self
    }
    /// <p>Optional user provided token used for ensuring idempotency.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Optional user provided token used for ensuring idempotency.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> Resource tags that are applied to a Data Store when it is created. </p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p> Resource tags that are applied to a Data Store when it is created. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteFHIRDatastore`.
///
/// <p>Deletes a Data Store. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteFHIRDatastore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_fhir_datastore_input::Builder,
}
impl DeleteFHIRDatastore {
    /// Creates a new `DeleteFHIRDatastore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteFHIRDatastore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteFHIRDatastoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteFhirDatastoreOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteFHIRDatastoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The AWS-generated ID for the Data Store to be deleted.</p>
    pub fn datastore_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.datastore_id(input.into());
        self
    }
    /// <p> The AWS-generated ID for the Data Store to be deleted.</p>
    pub fn set_datastore_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_datastore_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeFHIRDatastore`.
///
/// <p>Gets the properties associated with the FHIR Data Store, including the Data Store ID, Data Store ARN, Data Store name, Data Store status, created at, Data Store type version, and Data Store endpoint.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFHIRDatastore {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_fhir_datastore_input::Builder,
}
impl DescribeFHIRDatastore {
    /// Creates a new `DescribeFHIRDatastore`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeFHIRDatastore,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeFHIRDatastoreError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeFhirDatastoreOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeFHIRDatastoreError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The AWS-generated Data Store id. This is part of the ‘CreateFHIRDatastore’ output.</p>
    pub fn datastore_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.datastore_id(input.into());
        self
    }
    /// <p>The AWS-generated Data Store id. This is part of the ‘CreateFHIRDatastore’ output.</p>
    pub fn set_datastore_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_datastore_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeFHIRExportJob`.
///
/// <p>Displays the properties of a FHIR export job, including the ID, ARN, name, and the status of the job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFHIRExportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_fhir_export_job_input::Builder,
}
impl DescribeFHIRExportJob {
    /// Creates a new `DescribeFHIRExportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeFHIRExportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeFHIRExportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeFhirExportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeFHIRExportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The AWS generated ID for the Data Store from which files are being exported from for an export job.</p>
    pub fn datastore_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.datastore_id(input.into());
        self
    }
    /// <p>The AWS generated ID for the Data Store from which files are being exported from for an export job.</p>
    pub fn set_datastore_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_datastore_id(input);
        self
    }
    /// <p>The AWS generated ID for an export job.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p>The AWS generated ID for an export job.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeFHIRImportJob`.
///
/// <p>Displays the properties of a FHIR import job, including the ID, ARN, name, and the status of the job. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeFHIRImportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_fhir_import_job_input::Builder,
}
impl DescribeFHIRImportJob {
    /// Creates a new `DescribeFHIRImportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeFHIRImportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeFHIRImportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeFhirImportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeFHIRImportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The AWS-generated ID of the Data Store.</p>
    pub fn datastore_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.datastore_id(input.into());
        self
    }
    /// <p>The AWS-generated ID of the Data Store.</p>
    pub fn set_datastore_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_datastore_id(input);
        self
    }
    /// <p>The AWS-generated job ID.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_id(input.into());
        self
    }
    /// <p>The AWS-generated job ID.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_id(input);
        self
    }
}

/// Fluent builder constructing a request to `ListFHIRDatastores`.
///
/// <p>Lists all FHIR Data Stores that are in the user’s account, regardless of Data Store status.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListFHIRDatastores {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_fhir_datastores_input::Builder,
}
impl ListFHIRDatastores {
    /// Creates a new `ListFHIRDatastores`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListFHIRDatastores,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListFHIRDatastoresError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListFhirDatastoresOutput,
        aws_smithy_http::result::SdkError<crate::error::ListFHIRDatastoresError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListFhirDatastoresPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListFhirDatastoresPaginator {
        crate::paginator::ListFhirDatastoresPaginator::new(self.handle, self.inner)
    }
    /// <p>Lists all filters associated with a FHIR Data Store request.</p>
    pub fn filter(mut self, input: crate::model::DatastoreFilter) -> Self {
        self.inner = self.inner.filter(input);
        self
    }
    /// <p>Lists all filters associated with a FHIR Data Store request.</p>
    pub fn set_filter(mut self, input: std::option::Option<crate::model::DatastoreFilter>) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
    /// <p>Fetches the next page of Data Stores when results are paginated.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Fetches the next page of Data Stores when results are paginated.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of Data Stores returned in a single page of a ListFHIRDatastoresRequest call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of Data Stores returned in a single page of a ListFHIRDatastoresRequest call.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}

/// Fluent builder constructing a request to `ListFHIRExportJobs`.
///
/// <p> Lists all FHIR export jobs associated with an account and their statuses. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListFHIRExportJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_fhir_export_jobs_input::Builder,
}
impl ListFHIRExportJobs {
    /// Creates a new `ListFHIRExportJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListFHIRExportJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListFHIRExportJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListFhirExportJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListFHIRExportJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListFhirExportJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListFhirExportJobsPaginator {
        crate::paginator::ListFhirExportJobsPaginator::new(self.handle, self.inner)
    }
    /// <p> This parameter limits the response to the export job with the specified Data Store ID. </p>
    pub fn datastore_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.datastore_id(input.into());
        self
    }
    /// <p> This parameter limits the response to the export job with the specified Data Store ID. </p>
    pub fn set_datastore_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_datastore_id(input);
        self
    }
    /// <p> A pagination token used to identify the next page of results to return for a ListFHIRExportJobs query. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> A pagination token used to identify the next page of results to return for a ListFHIRExportJobs query. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> This parameter limits the number of results returned for a ListFHIRExportJobs to a maximum quantity specified by the user. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> This parameter limits the number of results returned for a ListFHIRExportJobs to a maximum quantity specified by the user. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> This parameter limits the response to the export job with the specified job name. </p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_name(input.into());
        self
    }
    /// <p> This parameter limits the response to the export job with the specified job name. </p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_name(input);
        self
    }
    /// <p> This parameter limits the response to the export jobs with the specified job status. </p>
    pub fn job_status(mut self, input: crate::model::JobStatus) -> Self {
        self.inner = self.inner.job_status(input);
        self
    }
    /// <p> This parameter limits the response to the export jobs with the specified job status. </p>
    pub fn set_job_status(mut self, input: std::option::Option<crate::model::JobStatus>) -> Self {
        self.inner = self.inner.set_job_status(input);
        self
    }
    /// <p> This parameter limits the response to FHIR export jobs submitted before a user specified date. </p>
    pub fn submitted_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.submitted_before(input);
        self
    }
    /// <p> This parameter limits the response to FHIR export jobs submitted before a user specified date. </p>
    pub fn set_submitted_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_submitted_before(input);
        self
    }
    /// <p> This parameter limits the response to FHIR export jobs submitted after a user specified date. </p>
    pub fn submitted_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.submitted_after(input);
        self
    }
    /// <p> This parameter limits the response to FHIR export jobs submitted after a user specified date. </p>
    pub fn set_submitted_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_submitted_after(input);
        self
    }
}

/// Fluent builder constructing a request to `ListFHIRImportJobs`.
///
/// <p> Lists all FHIR import jobs associated with an account and their statuses. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListFHIRImportJobs {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_fhir_import_jobs_input::Builder,
}
impl ListFHIRImportJobs {
    /// Creates a new `ListFHIRImportJobs`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListFHIRImportJobs,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListFHIRImportJobsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListFhirImportJobsOutput,
        aws_smithy_http::result::SdkError<crate::error::ListFHIRImportJobsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::ListFhirImportJobsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::ListFhirImportJobsPaginator {
        crate::paginator::ListFhirImportJobsPaginator::new(self.handle, self.inner)
    }
    /// <p> This parameter limits the response to the import job with the specified Data Store ID. </p>
    pub fn datastore_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.datastore_id(input.into());
        self
    }
    /// <p> This parameter limits the response to the import job with the specified Data Store ID. </p>
    pub fn set_datastore_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_datastore_id(input);
        self
    }
    /// <p> A pagination token used to identify the next page of results to return for a ListFHIRImportJobs query. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> A pagination token used to identify the next page of results to return for a ListFHIRImportJobs query. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p> This parameter limits the number of results returned for a ListFHIRImportJobs to a maximum quantity specified by the user. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> This parameter limits the number of results returned for a ListFHIRImportJobs to a maximum quantity specified by the user. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> This parameter limits the response to the import job with the specified job name. </p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_name(input.into());
        self
    }
    /// <p> This parameter limits the response to the import job with the specified job name. </p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_name(input);
        self
    }
    /// <p> This parameter limits the response to the import job with the specified job status. </p>
    pub fn job_status(mut self, input: crate::model::JobStatus) -> Self {
        self.inner = self.inner.job_status(input);
        self
    }
    /// <p> This parameter limits the response to the import job with the specified job status. </p>
    pub fn set_job_status(mut self, input: std::option::Option<crate::model::JobStatus>) -> Self {
        self.inner = self.inner.set_job_status(input);
        self
    }
    /// <p> This parameter limits the response to FHIR import jobs submitted before a user specified date. </p>
    pub fn submitted_before(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.submitted_before(input);
        self
    }
    /// <p> This parameter limits the response to FHIR import jobs submitted before a user specified date. </p>
    pub fn set_submitted_before(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_submitted_before(input);
        self
    }
    /// <p> This parameter limits the response to FHIR import jobs submitted after a user specified date. </p>
    pub fn submitted_after(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.submitted_after(input);
        self
    }
    /// <p> This parameter limits the response to FHIR import jobs submitted after a user specified date. </p>
    pub fn set_submitted_after(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_submitted_after(input);
        self
    }
}

/// Fluent builder constructing a request to `ListTagsForResource`.
///
/// <p> Returns a list of all existing tags associated with a Data Store. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::list_tags_for_resource_input::Builder,
}
impl ListTagsForResource {
    /// Creates a new `ListTagsForResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ListTagsForResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ListTagsForResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The Amazon Resource Name(ARN) of the Data Store for which tags are being added. </p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name(ARN) of the Data Store for which tags are being added. </p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
}

/// Fluent builder constructing a request to `StartFHIRExportJob`.
///
/// <p>Begins a FHIR export job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartFHIRExportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_fhir_export_job_input::Builder,
}
impl StartFHIRExportJob {
    /// Creates a new `StartFHIRExportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartFHIRExportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartFHIRExportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartFhirExportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StartFHIRExportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The user generated name for an export job.</p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_name(input.into());
        self
    }
    /// <p>The user generated name for an export job.</p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_name(input);
        self
    }
    /// <p>The output data configuration that was supplied when the export job was created.</p>
    pub fn output_data_config(mut self, input: crate::model::OutputDataConfig) -> Self {
        self.inner = self.inner.output_data_config(input);
        self
    }
    /// <p>The output data configuration that was supplied when the export job was created.</p>
    pub fn set_output_data_config(
        mut self,
        input: std::option::Option<crate::model::OutputDataConfig>,
    ) -> Self {
        self.inner = self.inner.set_output_data_config(input);
        self
    }
    /// <p>The AWS generated ID for the Data Store from which files are being exported for an export job.</p>
    pub fn datastore_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.datastore_id(input.into());
        self
    }
    /// <p>The AWS generated ID for the Data Store from which files are being exported for an export job.</p>
    pub fn set_datastore_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_datastore_id(input);
        self
    }
    /// <p>The Amazon Resource Name used during the initiation of the job.</p>
    pub fn data_access_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.data_access_role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name used during the initiation of the job.</p>
    pub fn set_data_access_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_data_access_role_arn(input);
        self
    }
    /// <p>An optional user provided token used for ensuring idempotency.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>An optional user provided token used for ensuring idempotency.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
}

/// Fluent builder constructing a request to `StartFHIRImportJob`.
///
/// <p>Begins a FHIR Import job.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct StartFHIRImportJob {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::start_fhir_import_job_input::Builder,
}
impl StartFHIRImportJob {
    /// Creates a new `StartFHIRImportJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::StartFHIRImportJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::StartFHIRImportJobError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::StartFhirImportJobOutput,
        aws_smithy_http::result::SdkError<crate::error::StartFHIRImportJobError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the FHIR Import job in the StartFHIRImport job request.</p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.job_name(input.into());
        self
    }
    /// <p>The name of the FHIR Import job in the StartFHIRImport job request.</p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_job_name(input);
        self
    }
    /// <p>The input properties of the FHIR Import job in the StartFHIRImport job request.</p>
    pub fn input_data_config(mut self, input: crate::model::InputDataConfig) -> Self {
        self.inner = self.inner.input_data_config(input);
        self
    }
    /// <p>The input properties of the FHIR Import job in the StartFHIRImport job request.</p>
    pub fn set_input_data_config(
        mut self,
        input: std::option::Option<crate::model::InputDataConfig>,
    ) -> Self {
        self.inner = self.inner.set_input_data_config(input);
        self
    }
    /// <p>The output data configuration that was supplied when the export job was created.</p>
    pub fn job_output_data_config(mut self, input: crate::model::OutputDataConfig) -> Self {
        self.inner = self.inner.job_output_data_config(input);
        self
    }
    /// <p>The output data configuration that was supplied when the export job was created.</p>
    pub fn set_job_output_data_config(
        mut self,
        input: std::option::Option<crate::model::OutputDataConfig>,
    ) -> Self {
        self.inner = self.inner.set_job_output_data_config(input);
        self
    }
    /// <p>The AWS-generated Data Store ID.</p>
    pub fn datastore_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.datastore_id(input.into());
        self
    }
    /// <p>The AWS-generated Data Store ID.</p>
    pub fn set_datastore_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_datastore_id(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) that gives Amazon HealthLake access permission.</p>
    pub fn data_access_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.data_access_role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) that gives Amazon HealthLake access permission.</p>
    pub fn set_data_access_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_data_access_role_arn(input);
        self
    }
    /// <p>Optional user provided token used for ensuring idempotency.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Optional user provided token used for ensuring idempotency.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
}

/// Fluent builder constructing a request to `TagResource`.
///
/// <p> Adds a user specifed key and value tag to a Data Store. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::tag_resource_input::Builder,
}
impl TagResource {
    /// Creates a new `TagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::TagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::TagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The Amazon Resource Name(ARN)that gives Amazon HealthLake access to the Data Store which tags are being added to. </p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p> The Amazon Resource Name(ARN)that gives Amazon HealthLake access to the Data Store which tags are being added to. </p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p> The user specified key and value pair tags being added to a Data Store. </p>
    pub fn tags(mut self, input: crate::model::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p> The user specified key and value pair tags being added to a Data Store. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}

/// Fluent builder constructing a request to `UntagResource`.
///
/// <p> Removes tags from a Data Store. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::untag_resource_input::Builder,
}
impl UntagResource {
    /// Creates a new `UntagResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UntagResource,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UntagResourceOutput,
        aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> "The Amazon Resource Name(ARN) of the Data Store for which tags are being removed </p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p> "The Amazon Resource Name(ARN) of the Data Store for which tags are being removed </p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `TagKeys`.
    ///
    /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
    ///
    /// <p> The keys for the tags to be removed from the Healthlake Data Store. </p>
    pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.tag_keys(input.into());
        self
    }
    /// <p> The keys for the tags to be removed from the Healthlake Data Store. </p>
    pub fn set_tag_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_tag_keys(input);
        self
    }
}
