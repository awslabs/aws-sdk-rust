// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteFHIRDatastore`](crate::operation::delete_fhir_datastore::builders::DeleteFHIRDatastoreFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`datastore_id(impl Into<String>)`](crate::operation::delete_fhir_datastore::builders::DeleteFHIRDatastoreFluentBuilder::datastore_id) / [`set_datastore_id(Option<String>)`](crate::operation::delete_fhir_datastore::builders::DeleteFHIRDatastoreFluentBuilder::set_datastore_id): <p> The AWS-generated ID for the Data Store to be deleted.</p>
    /// - On success, responds with [`DeleteFhirDatastoreOutput`](crate::operation::delete_fhir_datastore::DeleteFhirDatastoreOutput) with field(s):
    ///   - [`datastore_id(Option<String>)`](crate::operation::delete_fhir_datastore::DeleteFhirDatastoreOutput::datastore_id): <p>The AWS-generated ID for the Data Store to be deleted.</p>
    ///   - [`datastore_arn(Option<String>)`](crate::operation::delete_fhir_datastore::DeleteFhirDatastoreOutput::datastore_arn): <p>The Amazon Resource Name (ARN) that gives Amazon HealthLake access permission.</p>
    ///   - [`datastore_status(Option<DatastoreStatus>)`](crate::operation::delete_fhir_datastore::DeleteFhirDatastoreOutput::datastore_status): <p>The status of the Data Store that the user has requested to be deleted. </p>
    ///   - [`datastore_endpoint(Option<String>)`](crate::operation::delete_fhir_datastore::DeleteFhirDatastoreOutput::datastore_endpoint): <p>The AWS endpoint for the Data Store the user has requested to be deleted.</p>
    /// - On failure, responds with [`SdkError<DeleteFHIRDatastoreError>`](crate::operation::delete_fhir_datastore::DeleteFHIRDatastoreError)
    pub fn delete_fhir_datastore(
        &self,
    ) -> crate::operation::delete_fhir_datastore::builders::DeleteFHIRDatastoreFluentBuilder {
        crate::operation::delete_fhir_datastore::builders::DeleteFHIRDatastoreFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
