// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AddPermission`](crate::operation::add_permission::builders::AddPermissionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`topic_arn(impl Into<String>)`](crate::operation::add_permission::builders::AddPermissionFluentBuilder::topic_arn) / [`set_topic_arn(Option<String>)`](crate::operation::add_permission::builders::AddPermissionFluentBuilder::set_topic_arn): <p>The ARN of the topic whose access control policy you wish to modify.</p>
    ///   - [`label(impl Into<String>)`](crate::operation::add_permission::builders::AddPermissionFluentBuilder::label) / [`set_label(Option<String>)`](crate::operation::add_permission::builders::AddPermissionFluentBuilder::set_label): <p>A unique identifier for the new policy statement.</p>
    ///   - [`aws_account_id(Vec<String>)`](crate::operation::add_permission::builders::AddPermissionFluentBuilder::aws_account_id) / [`set_aws_account_id(Option<Vec<String>>)`](crate::operation::add_permission::builders::AddPermissionFluentBuilder::set_aws_account_id): <p>The Amazon Web Services account IDs of the users (principals) who will be given access to the specified actions. The users must have Amazon Web Services account, but do not need to be signed up for this service.</p>
    ///   - [`action_name(Vec<String>)`](crate::operation::add_permission::builders::AddPermissionFluentBuilder::action_name) / [`set_action_name(Option<Vec<String>>)`](crate::operation::add_permission::builders::AddPermissionFluentBuilder::set_action_name): <p>The action you want to allow for the specified principal(s).</p>  <p>Valid values: Any Amazon SNS action name, for example <code>Publish</code>.</p>
    /// - On success, responds with [`AddPermissionOutput`](crate::operation::add_permission::AddPermissionOutput)
    /// - On failure, responds with [`SdkError<AddPermissionError>`](crate::operation::add_permission::AddPermissionError)
    pub fn add_permission(
        &self,
    ) -> crate::operation::add_permission::builders::AddPermissionFluentBuilder {
        crate::operation::add_permission::builders::AddPermissionFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
