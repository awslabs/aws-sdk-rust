// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_publish_batch_http_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::PublishBatchOutput, crate::error::PublishBatchError> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(response)
        .map_err(crate::error::PublishBatchError::unhandled)?;
    generic_builder = aws_http::request_id::apply_request_id(generic_builder, response.headers());
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::PublishBatchError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "AuthorizationError" => crate::error::PublishBatchError::AuthorizationErrorException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::authorization_error_exception::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_authorization_error_exception::de_authorization_error_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "BatchEntryIdsNotDistinct" => {
            crate::error::PublishBatchError::BatchEntryIdsNotDistinctException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::batch_entry_ids_not_distinct_exception::Builder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_batch_entry_ids_not_distinct_exception::de_batch_entry_ids_not_distinct_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "BatchRequestTooLong" => crate::error::PublishBatchError::BatchRequestTooLongException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::batch_request_too_long_exception::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_batch_request_too_long_exception::de_batch_request_too_long_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "EmptyBatchRequest" => crate::error::PublishBatchError::EmptyBatchRequestException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::empty_batch_request_exception::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_empty_batch_request_exception::de_empty_batch_request_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "EndpointDisabled" => crate::error::PublishBatchError::EndpointDisabledException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::endpoint_disabled_exception::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_endpoint_disabled_exception::de_endpoint_disabled_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InternalError" => crate::error::PublishBatchError::InternalErrorException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::internal_error_exception::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_internal_error_exception::de_internal_error_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidBatchEntryId" => crate::error::PublishBatchError::InvalidBatchEntryIdException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_batch_entry_id_exception::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_invalid_batch_entry_id_exception::de_invalid_batch_entry_id_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "InvalidParameter" => crate::error::PublishBatchError::InvalidParameterException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_exception::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_invalid_parameter_exception::de_invalid_parameter_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "ParameterValueInvalid" => {
            crate::error::PublishBatchError::InvalidParameterValueException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::invalid_parameter_value_exception::Builder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_invalid_parameter_value_exception::de_invalid_parameter_value_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "InvalidSecurity" => crate::error::PublishBatchError::InvalidSecurityException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_security_exception::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_invalid_security_exception::de_invalid_security_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "KMSAccessDenied" => crate::error::PublishBatchError::KmsAccessDeniedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::kms_access_denied_exception::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_kms_access_denied_exception::de_kms_access_denied_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "KMSDisabled" => crate::error::PublishBatchError::KmsDisabledException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::kms_disabled_exception::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_kms_disabled_exception::de_kms_disabled_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "KMSInvalidState" => crate::error::PublishBatchError::KmsInvalidStateException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::kms_invalid_state_exception::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_kms_invalid_state_exception::de_kms_invalid_state_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "KMSNotFound" => crate::error::PublishBatchError::KmsNotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::kms_not_found_exception::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_kms_not_found_exception::de_kms_not_found_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "KMSOptInRequired" => crate::error::PublishBatchError::KmsOptInRequired({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::kms_opt_in_required::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_kms_opt_in_required::de_kms_opt_in_required_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "KMSThrottling" => crate::error::PublishBatchError::KmsThrottlingException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::kms_throttling_exception::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_kms_throttling_exception::de_kms_throttling_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "NotFound" => crate::error::PublishBatchError::NotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::not_found_exception::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_not_found_exception::de_not_found_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        "PlatformApplicationDisabled" => {
            crate::error::PublishBatchError::PlatformApplicationDisabledException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::platform_application_disabled_exception::Builder::default();
                    let _ = response;
                    output = crate::protocol_serde::shape_platform_application_disabled_exception::de_platform_application_disabled_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "TooManyEntriesInBatchRequest" => {
            crate::error::PublishBatchError::TooManyEntriesInBatchRequestException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output =
                        crate::error::too_many_entries_in_batch_request_exception::Builder::default(
                        );
                    let _ = response;
                    output = crate::protocol_serde::shape_too_many_entries_in_batch_request_exception::de_too_many_entries_in_batch_request_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                    let output = output.meta(generic);
                    output.build()
                };
                if tmp.message.is_none() {
                    tmp.message = _error_message;
                }
                tmp
            })
        }
        "ValidationException" => crate::error::PublishBatchError::ValidationException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::error::validation_exception::Builder::default();
                let _ = response;
                output = crate::protocol_serde::shape_validation_exception::de_validation_exception_xml_err(response.body().as_ref(), output).map_err(crate::error::PublishBatchError::unhandled)?;
                let output = output.meta(generic);
                output.build()
            };
            if tmp.message.is_none() {
                tmp.message = _error_message;
            }
            tmp
        }),
        _ => crate::error::PublishBatchError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_publish_batch_http_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::PublishBatchOutput, crate::error::PublishBatchError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::publish_batch_output::Builder::default();
        let _ = response;
        output = crate::protocol_serde::shape_publish_batch::de_publish_batch(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::PublishBatchError::unhandled)?;
        output._set_request_id(
            aws_http::request_id::RequestId::request_id(response).map(str::to_string),
        );
        output.build()
    })
}

#[allow(unused_mut)]
pub fn de_publish_batch(
    inp: &[u8],
    mut builder: crate::output::publish_batch_output::Builder,
) -> Result<crate::output::publish_batch_output::Builder, aws_smithy_xml::decode::XmlDecodeError> {
    let mut doc = aws_smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    #[allow(unused_variables)]
    let start_el = decoder.start_el();
    if !(start_el.matches("PublishBatchResponse")) {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
            "invalid root, expected PublishBatchResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("PublishBatchResult")) {
            return Err(aws_smithy_xml::decode::XmlDecodeError::custom(format!(
                "invalid result, expected PublishBatchResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Successful") /* Successful com.amazonaws.sns.synthetic#PublishBatchOutput$Successful */ =>  {
                let var_1 =
                    Some(
                        crate::protocol_serde::shape_publish_batch_result_entry_list::de_publish_batch_result_entry_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_successful(var_1);
            }
            ,
            s if s.matches("Failed") /* Failed com.amazonaws.sns.synthetic#PublishBatchOutput$Failed */ =>  {
                let var_2 =
                    Some(
                        crate::protocol_serde::shape_batch_result_error_entry_list::de_batch_result_error_entry_list(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_failed(var_2);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(aws_smithy_xml::decode::XmlDecodeError::custom(
            "expected PublishBatchResult tag",
        ));
    };
    Ok(builder)
}
