// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(unused_mut)]
pub fn ser_publish_batch_request_entry(
    mut writer: aws_smithy_query::QueryValueWriter,
    input: &crate::types::PublishBatchRequestEntry,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("Id");
    if let Some(var_2) = &input.id {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Message");
    if let Some(var_4) = &input.message {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("Subject");
    if let Some(var_6) = &input.subject {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("MessageStructure");
    if let Some(var_8) = &input.message_structure {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("MessageAttributes");
    if let Some(var_10) = &input.message_attributes {
        let mut map_11 = scope_9.start_map(false, "Name", "Value");
        for (key_12, value_13) in var_10 {
            #[allow(unused_mut)]
            let mut entry_14 = map_11.entry(key_12);
            {
                crate::protocol_serde::shape_message_attribute_value::ser_message_attribute_value(
                    entry_14, value_13,
                )?;
            }
        }
        map_11.finish();
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("MessageDeduplicationId");
    if let Some(var_16) = &input.message_deduplication_id {
        scope_15.string(var_16);
    }
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("MessageGroupId");
    if let Some(var_18) = &input.message_group_id {
        scope_17.string(var_18);
    }
    Ok(())
}
