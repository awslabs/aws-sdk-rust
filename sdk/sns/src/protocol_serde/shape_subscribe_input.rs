// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_subscribe_input_input(
    input: &crate::operation::subscribe::SubscribeInput,
) -> Result<::aws_smithy_types::body::SdkBody, ::aws_smithy_types::error::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = ::aws_smithy_query::QueryWriter::new(&mut out, "Subscribe", "2010-03-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("TopicArn");
    if let Some(var_2) = &input.topic_arn {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("Protocol");
    if let Some(var_4) = &input.protocol {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("Endpoint");
    if let Some(var_6) = &input.endpoint {
        scope_5.string(var_6);
    }
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("Attributes");
    if let Some(var_8) = &input.attributes {
        let mut map_9 = scope_7.start_map(false, "key", "value");
        for (key_10, value_11) in var_8 {
            #[allow(unused_mut)]
            let mut entry_12 = map_9.entry(key_10);
            {
                entry_12.string(value_11);
            }
        }
        map_9.finish();
    }
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("ReturnSubscriptionArn");
    if let Some(var_14) = &input.return_subscription_arn {
        scope_13.boolean(*var_14);
    }
    writer.finish();
    Ok(::aws_smithy_types::body::SdkBody::from(out))
}
