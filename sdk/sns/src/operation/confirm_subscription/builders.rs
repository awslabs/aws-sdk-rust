// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::confirm_subscription::_confirm_subscription_output::ConfirmSubscriptionOutputBuilder;

pub use crate::operation::confirm_subscription::_confirm_subscription_input::ConfirmSubscriptionInputBuilder;

/// Fluent builder constructing a request to `ConfirmSubscription`.
///
/// <p>Verifies an endpoint owner's intent to receive messages by validating the token sent to the endpoint by an earlier <code>Subscribe</code> action. If the token is valid, the action creates a new subscription and returns its Amazon Resource Name (ARN). This call requires an AWS signature only when the <code>AuthenticateOnUnsubscribe</code> flag is set to "true".</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ConfirmSubscriptionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::confirm_subscription::builders::ConfirmSubscriptionInputBuilder,
}
impl ConfirmSubscriptionFluentBuilder {
    /// Creates a new `ConfirmSubscription`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::confirm_subscription::ConfirmSubscription,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::confirm_subscription::ConfirmSubscriptionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::confirm_subscription::ConfirmSubscriptionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::confirm_subscription::ConfirmSubscriptionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the topic for which you wish to confirm a subscription.</p>
    pub fn topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.topic_arn(input.into());
        self
    }
    /// <p>The ARN of the topic for which you wish to confirm a subscription.</p>
    pub fn set_topic_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_topic_arn(input);
        self
    }
    /// <p>Short-lived token sent to an endpoint during the <code>Subscribe</code> action.</p>
    pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.token(input.into());
        self
    }
    /// <p>Short-lived token sent to an endpoint during the <code>Subscribe</code> action.</p>
    pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_token(input);
        self
    }
    /// <p>Disallows unauthenticated unsubscribes of the subscription. If the value of this parameter is <code>true</code> and the request has an Amazon Web Services signature, then only the topic owner and the subscription owner can unsubscribe the endpoint. The unsubscribe action requires Amazon Web Services authentication. </p>
    pub fn authenticate_on_unsubscribe(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.authenticate_on_unsubscribe(input.into());
        self
    }
    /// <p>Disallows unauthenticated unsubscribes of the subscription. If the value of this parameter is <code>true</code> and the request has an Amazon Web Services signature, then only the topic owner and the subscription owner can unsubscribe the endpoint. The unsubscribe action requires Amazon Web Services authentication. </p>
    pub fn set_authenticate_on_unsubscribe(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_authenticate_on_unsubscribe(input);
        self
    }
}
