// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::verify_sms_sandbox_phone_number::_verify_sms_sandbox_phone_number_output::VerifySmsSandboxPhoneNumberOutputBuilder;

pub use crate::operation::verify_sms_sandbox_phone_number::_verify_sms_sandbox_phone_number_input::VerifySmsSandboxPhoneNumberInputBuilder;

/// Fluent builder constructing a request to `VerifySMSSandboxPhoneNumber`.
///
/// <p>Verifies a destination phone number with a one-time password (OTP) for the calling Amazon Web Services account.</p>
/// <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in the <i>Amazon SNS Developer Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct VerifySMSSandboxPhoneNumberFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::verify_sms_sandbox_phone_number::builders::VerifySmsSandboxPhoneNumberInputBuilder
            }
impl VerifySMSSandboxPhoneNumberFluentBuilder {
    /// Creates a new `VerifySMSSandboxPhoneNumber`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::verify_sms_sandbox_phone_number::VerifySMSSandboxPhoneNumber,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::verify_sms_sandbox_phone_number::VerifySMSSandboxPhoneNumberError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::verify_sms_sandbox_phone_number::VerifySmsSandboxPhoneNumberOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::verify_sms_sandbox_phone_number::VerifySMSSandboxPhoneNumberError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The destination phone number to verify.</p>
    pub fn phone_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.phone_number(input.into());
        self
    }
    /// <p>The destination phone number to verify.</p>
    pub fn set_phone_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_phone_number(input);
        self
    }
    /// <p>The OTP sent to the destination number from the <code>CreateSMSSandBoxPhoneNumber</code> call.</p>
    pub fn one_time_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.one_time_password(input.into());
        self
    }
    /// <p>The OTP sent to the destination number from the <code>CreateSMSSandBoxPhoneNumber</code> call.</p>
    pub fn set_one_time_password(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_one_time_password(input);
        self
    }
}
