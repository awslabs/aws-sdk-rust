// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::set_platform_application_attributes::_set_platform_application_attributes_output::SetPlatformApplicationAttributesOutputBuilder;

pub use crate::operation::set_platform_application_attributes::_set_platform_application_attributes_input::SetPlatformApplicationAttributesInputBuilder;

impl crate::operation::set_platform_application_attributes::builders::SetPlatformApplicationAttributesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.set_platform_application_attributes();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `SetPlatformApplicationAttributes`.
///
/// <p>Sets the attributes of the platform application object for the supported push notification services, such as APNS and GCM (Firebase Cloud Messaging). For more information, see <a href="https://docs.aws.amazon.com/sns/latest/dg/SNSMobilePush.html">Using Amazon SNS Mobile Push Notifications</a>. For information on configuring attributes for message delivery status, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-msg-status.html">Using Amazon SNS Application Attributes for Message Delivery Status</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct SetPlatformApplicationAttributesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::set_platform_application_attributes::builders::SetPlatformApplicationAttributesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributesOutput,
        crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributesError,
    > for SetPlatformApplicationAttributesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributesOutput,
            crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl SetPlatformApplicationAttributesFluentBuilder {
    /// Creates a new `SetPlatformApplicationAttributes`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the SetPlatformApplicationAttributes as a reference.
    pub fn as_input(&self) -> &crate::operation::set_platform_application_attributes::builders::SetPlatformApplicationAttributesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributes::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributes::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributesOutput,
        crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p><code>PlatformApplicationArn</code> for <code>SetPlatformApplicationAttributes</code> action.</p>
    pub fn platform_application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.platform_application_arn(input.into());
        self
    }
    /// <p><code>PlatformApplicationArn</code> for <code>SetPlatformApplicationAttributes</code> action.</p>
    pub fn set_platform_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_platform_application_arn(input);
        self
    }
    /// <p><code>PlatformApplicationArn</code> for <code>SetPlatformApplicationAttributes</code> action.</p>
    pub fn get_platform_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_platform_application_arn()
    }
    ///
    /// Adds a key-value pair to `Attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>A map of the platform application attributes. Attributes in this map include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>PlatformCredential</code> – The credential received from the notification service.</p>
    /// <ul>
    /// <li>
    /// <p>For ADM, <code>PlatformCredential</code>is client secret.</p></li>
    /// <li>
    /// <p>For Apple Services using certificate credentials, <code>PlatformCredential</code> is private key.</p></li>
    /// <li>
    /// <p>For Apple Services using token credentials, <code>PlatformCredential</code> is signing key.</p></li>
    /// <li>
    /// <p>For GCM (Firebase Cloud Messaging) using key credentials, there is no <code>PlatformPrincipal</code>. The <code>PlatformCredential</code> is <code>API key</code>.</p></li>
    /// <li>
    /// <p>For GCM (Firebase Cloud Messaging) using token credentials, there is no <code>PlatformPrincipal</code>. The <code>PlatformCredential</code> is a JSON formatted private key file. When using the Amazon Web Services CLI, the file must be in string format and special characters must be ignored. To format the file correctly, Amazon SNS recommends using the following command: <code>SERVICE_JSON=`jq @json &lt;&lt;&lt; cat service.json`</code>.</p></li>
    /// </ul></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>PlatformPrincipal</code> – The principal received from the notification service.</p>
    /// <ul>
    /// <li>
    /// <p>For ADM, <code>PlatformPrincipal</code>is client id.</p></li>
    /// <li>
    /// <p>For Apple Services using certificate credentials, <code>PlatformPrincipal</code> is SSL certificate.</p></li>
    /// <li>
    /// <p>For Apple Services using token credentials, <code>PlatformPrincipal</code> is signing key ID.</p></li>
    /// <li>
    /// <p>For GCM (Firebase Cloud Messaging), there is no <code>PlatformPrincipal</code>.</p></li>
    /// </ul></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>EventEndpointCreated</code> – Topic ARN to which <code>EndpointCreated</code> event notifications are sent.</p></li>
    /// <li>
    /// <p><code>EventEndpointDeleted</code> – Topic ARN to which <code>EndpointDeleted</code> event notifications are sent.</p></li>
    /// <li>
    /// <p><code>EventEndpointUpdated</code> – Topic ARN to which <code>EndpointUpdate</code> event notifications are sent.</p></li>
    /// <li>
    /// <p><code>EventDeliveryFailure</code> – Topic ARN to which <code>DeliveryFailure</code> event notifications are sent upon Direct Publish delivery failure (permanent) to one of the application's endpoints.</p></li>
    /// <li>
    /// <p><code>SuccessFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p></li>
    /// <li>
    /// <p><code>FailureFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p></li>
    /// <li>
    /// <p><code>SuccessFeedbackSampleRate</code> – Sample rate percentage (0-100) of successfully delivered messages.</p></li>
    /// </ul>
    /// <p>The following attributes only apply to <code>APNs</code> token-based authentication:</p>
    /// <ul>
    /// <li>
    /// <p><code>ApplePlatformTeamID</code> – The identifier that's assigned to your Apple developer account team.</p></li>
    /// <li>
    /// <p><code>ApplePlatformBundleID</code> – The bundle identifier that's assigned to your iOS app.</p></li>
    /// </ul>
    pub fn attributes(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.attributes(k.into(), v.into());
        self
    }
    /// <p>A map of the platform application attributes. Attributes in this map include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>PlatformCredential</code> – The credential received from the notification service.</p>
    /// <ul>
    /// <li>
    /// <p>For ADM, <code>PlatformCredential</code>is client secret.</p></li>
    /// <li>
    /// <p>For Apple Services using certificate credentials, <code>PlatformCredential</code> is private key.</p></li>
    /// <li>
    /// <p>For Apple Services using token credentials, <code>PlatformCredential</code> is signing key.</p></li>
    /// <li>
    /// <p>For GCM (Firebase Cloud Messaging) using key credentials, there is no <code>PlatformPrincipal</code>. The <code>PlatformCredential</code> is <code>API key</code>.</p></li>
    /// <li>
    /// <p>For GCM (Firebase Cloud Messaging) using token credentials, there is no <code>PlatformPrincipal</code>. The <code>PlatformCredential</code> is a JSON formatted private key file. When using the Amazon Web Services CLI, the file must be in string format and special characters must be ignored. To format the file correctly, Amazon SNS recommends using the following command: <code>SERVICE_JSON=`jq @json &lt;&lt;&lt; cat service.json`</code>.</p></li>
    /// </ul></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>PlatformPrincipal</code> – The principal received from the notification service.</p>
    /// <ul>
    /// <li>
    /// <p>For ADM, <code>PlatformPrincipal</code>is client id.</p></li>
    /// <li>
    /// <p>For Apple Services using certificate credentials, <code>PlatformPrincipal</code> is SSL certificate.</p></li>
    /// <li>
    /// <p>For Apple Services using token credentials, <code>PlatformPrincipal</code> is signing key ID.</p></li>
    /// <li>
    /// <p>For GCM (Firebase Cloud Messaging), there is no <code>PlatformPrincipal</code>.</p></li>
    /// </ul></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>EventEndpointCreated</code> – Topic ARN to which <code>EndpointCreated</code> event notifications are sent.</p></li>
    /// <li>
    /// <p><code>EventEndpointDeleted</code> – Topic ARN to which <code>EndpointDeleted</code> event notifications are sent.</p></li>
    /// <li>
    /// <p><code>EventEndpointUpdated</code> – Topic ARN to which <code>EndpointUpdate</code> event notifications are sent.</p></li>
    /// <li>
    /// <p><code>EventDeliveryFailure</code> – Topic ARN to which <code>DeliveryFailure</code> event notifications are sent upon Direct Publish delivery failure (permanent) to one of the application's endpoints.</p></li>
    /// <li>
    /// <p><code>SuccessFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p></li>
    /// <li>
    /// <p><code>FailureFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p></li>
    /// <li>
    /// <p><code>SuccessFeedbackSampleRate</code> – Sample rate percentage (0-100) of successfully delivered messages.</p></li>
    /// </ul>
    /// <p>The following attributes only apply to <code>APNs</code> token-based authentication:</p>
    /// <ul>
    /// <li>
    /// <p><code>ApplePlatformTeamID</code> – The identifier that's assigned to your Apple developer account team.</p></li>
    /// <li>
    /// <p><code>ApplePlatformBundleID</code> – The bundle identifier that's assigned to your iOS app.</p></li>
    /// </ul>
    pub fn set_attributes(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_attributes(input);
        self
    }
    /// <p>A map of the platform application attributes. Attributes in this map include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>PlatformCredential</code> – The credential received from the notification service.</p>
    /// <ul>
    /// <li>
    /// <p>For ADM, <code>PlatformCredential</code>is client secret.</p></li>
    /// <li>
    /// <p>For Apple Services using certificate credentials, <code>PlatformCredential</code> is private key.</p></li>
    /// <li>
    /// <p>For Apple Services using token credentials, <code>PlatformCredential</code> is signing key.</p></li>
    /// <li>
    /// <p>For GCM (Firebase Cloud Messaging) using key credentials, there is no <code>PlatformPrincipal</code>. The <code>PlatformCredential</code> is <code>API key</code>.</p></li>
    /// <li>
    /// <p>For GCM (Firebase Cloud Messaging) using token credentials, there is no <code>PlatformPrincipal</code>. The <code>PlatformCredential</code> is a JSON formatted private key file. When using the Amazon Web Services CLI, the file must be in string format and special characters must be ignored. To format the file correctly, Amazon SNS recommends using the following command: <code>SERVICE_JSON=`jq @json &lt;&lt;&lt; cat service.json`</code>.</p></li>
    /// </ul></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>PlatformPrincipal</code> – The principal received from the notification service.</p>
    /// <ul>
    /// <li>
    /// <p>For ADM, <code>PlatformPrincipal</code>is client id.</p></li>
    /// <li>
    /// <p>For Apple Services using certificate credentials, <code>PlatformPrincipal</code> is SSL certificate.</p></li>
    /// <li>
    /// <p>For Apple Services using token credentials, <code>PlatformPrincipal</code> is signing key ID.</p></li>
    /// <li>
    /// <p>For GCM (Firebase Cloud Messaging), there is no <code>PlatformPrincipal</code>.</p></li>
    /// </ul></li>
    /// </ul>
    /// <ul>
    /// <li>
    /// <p><code>EventEndpointCreated</code> – Topic ARN to which <code>EndpointCreated</code> event notifications are sent.</p></li>
    /// <li>
    /// <p><code>EventEndpointDeleted</code> – Topic ARN to which <code>EndpointDeleted</code> event notifications are sent.</p></li>
    /// <li>
    /// <p><code>EventEndpointUpdated</code> – Topic ARN to which <code>EndpointUpdate</code> event notifications are sent.</p></li>
    /// <li>
    /// <p><code>EventDeliveryFailure</code> – Topic ARN to which <code>DeliveryFailure</code> event notifications are sent upon Direct Publish delivery failure (permanent) to one of the application's endpoints.</p></li>
    /// <li>
    /// <p><code>SuccessFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p></li>
    /// <li>
    /// <p><code>FailureFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p></li>
    /// <li>
    /// <p><code>SuccessFeedbackSampleRate</code> – Sample rate percentage (0-100) of successfully delivered messages.</p></li>
    /// </ul>
    /// <p>The following attributes only apply to <code>APNs</code> token-based authentication:</p>
    /// <ul>
    /// <li>
    /// <p><code>ApplePlatformTeamID</code> – The identifier that's assigned to your Apple developer account team.</p></li>
    /// <li>
    /// <p><code>ApplePlatformBundleID</code> – The bundle identifier that's assigned to your iOS app.</p></li>
    /// </ul>
    pub fn get_attributes(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_attributes()
    }
}
