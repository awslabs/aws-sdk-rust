// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input for SetPlatformApplicationAttributes action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SetPlatformApplicationAttributesInput {
    /// <p>PlatformApplicationArn for SetPlatformApplicationAttributes action.</p>
    #[doc(hidden)]
    pub platform_application_arn: std::option::Option<std::string::String>,
    /// <p>A map of the platform application attributes. Attributes in this map include the following:</p>
    /// <ul>
    /// <li> <p> <code>PlatformCredential</code> – The credential received from the notification service.</p>
    /// <ul>
    /// <li> <p>For ADM, <code>PlatformCredential</code>is client secret.</p> </li>
    /// <li> <p>For Apple Services using certificate credentials, <code>PlatformCredential</code> is private key.</p> </li>
    /// <li> <p>For Apple Services using token credentials, <code>PlatformCredential</code> is signing key.</p> </li>
    /// <li> <p>For GCM (Firebase Cloud Messaging), <code>PlatformCredential</code> is API key. </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <ul>
    /// <li> <p> <code>PlatformPrincipal</code> – The principal received from the notification service.</p>
    /// <ul>
    /// <li> <p>For ADM, <code>PlatformPrincipal</code>is client id.</p> </li>
    /// <li> <p>For Apple Services using certificate credentials, <code>PlatformPrincipal</code> is SSL certificate.</p> </li>
    /// <li> <p>For Apple Services using token credentials, <code>PlatformPrincipal</code> is signing key ID.</p> </li>
    /// <li> <p>For GCM (Firebase Cloud Messaging), there is no <code>PlatformPrincipal</code>. </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <ul>
    /// <li> <p> <code>EventEndpointCreated</code> – Topic ARN to which <code>EndpointCreated</code> event notifications are sent.</p> </li>
    /// <li> <p> <code>EventEndpointDeleted</code> – Topic ARN to which <code>EndpointDeleted</code> event notifications are sent.</p> </li>
    /// <li> <p> <code>EventEndpointUpdated</code> – Topic ARN to which <code>EndpointUpdate</code> event notifications are sent.</p> </li>
    /// <li> <p> <code>EventDeliveryFailure</code> – Topic ARN to which <code>DeliveryFailure</code> event notifications are sent upon Direct Publish delivery failure (permanent) to one of the application's endpoints.</p> </li>
    /// <li> <p> <code>SuccessFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p> </li>
    /// <li> <p> <code>FailureFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p> </li>
    /// <li> <p> <code>SuccessFeedbackSampleRate</code> – Sample rate percentage (0-100) of successfully delivered messages.</p> </li>
    /// </ul>
    /// <p>The following attributes only apply to <code>APNs</code> token-based authentication:</p>
    /// <ul>
    /// <li> <p> <code>ApplePlatformTeamID</code> – The identifier that's assigned to your Apple developer account team.</p> </li>
    /// <li> <p> <code>ApplePlatformBundleID</code> – The bundle identifier that's assigned to your iOS app.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl SetPlatformApplicationAttributesInput {
    /// <p>PlatformApplicationArn for SetPlatformApplicationAttributes action.</p>
    pub fn platform_application_arn(&self) -> std::option::Option<&str> {
        self.platform_application_arn.as_deref()
    }
    /// <p>A map of the platform application attributes. Attributes in this map include the following:</p>
    /// <ul>
    /// <li> <p> <code>PlatformCredential</code> – The credential received from the notification service.</p>
    /// <ul>
    /// <li> <p>For ADM, <code>PlatformCredential</code>is client secret.</p> </li>
    /// <li> <p>For Apple Services using certificate credentials, <code>PlatformCredential</code> is private key.</p> </li>
    /// <li> <p>For Apple Services using token credentials, <code>PlatformCredential</code> is signing key.</p> </li>
    /// <li> <p>For GCM (Firebase Cloud Messaging), <code>PlatformCredential</code> is API key. </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <ul>
    /// <li> <p> <code>PlatformPrincipal</code> – The principal received from the notification service.</p>
    /// <ul>
    /// <li> <p>For ADM, <code>PlatformPrincipal</code>is client id.</p> </li>
    /// <li> <p>For Apple Services using certificate credentials, <code>PlatformPrincipal</code> is SSL certificate.</p> </li>
    /// <li> <p>For Apple Services using token credentials, <code>PlatformPrincipal</code> is signing key ID.</p> </li>
    /// <li> <p>For GCM (Firebase Cloud Messaging), there is no <code>PlatformPrincipal</code>. </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <ul>
    /// <li> <p> <code>EventEndpointCreated</code> – Topic ARN to which <code>EndpointCreated</code> event notifications are sent.</p> </li>
    /// <li> <p> <code>EventEndpointDeleted</code> – Topic ARN to which <code>EndpointDeleted</code> event notifications are sent.</p> </li>
    /// <li> <p> <code>EventEndpointUpdated</code> – Topic ARN to which <code>EndpointUpdate</code> event notifications are sent.</p> </li>
    /// <li> <p> <code>EventDeliveryFailure</code> – Topic ARN to which <code>DeliveryFailure</code> event notifications are sent upon Direct Publish delivery failure (permanent) to one of the application's endpoints.</p> </li>
    /// <li> <p> <code>SuccessFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p> </li>
    /// <li> <p> <code>FailureFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p> </li>
    /// <li> <p> <code>SuccessFeedbackSampleRate</code> – Sample rate percentage (0-100) of successfully delivered messages.</p> </li>
    /// </ul>
    /// <p>The following attributes only apply to <code>APNs</code> token-based authentication:</p>
    /// <ul>
    /// <li> <p> <code>ApplePlatformTeamID</code> – The identifier that's assigned to your Apple developer account team.</p> </li>
    /// <li> <p> <code>ApplePlatformBundleID</code> – The bundle identifier that's assigned to your iOS app.</p> </li>
    /// </ul>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
}
impl SetPlatformApplicationAttributesInput {
    /// Creates a new builder-style object to manufacture [`SetPlatformApplicationAttributesInput`](crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributesInput).
    pub fn builder() -> crate::operation::set_platform_application_attributes::builders::SetPlatformApplicationAttributesInputBuilder{
        crate::operation::set_platform_application_attributes::builders::SetPlatformApplicationAttributesInputBuilder::default()
    }
}

/// A builder for [`SetPlatformApplicationAttributesInput`](crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SetPlatformApplicationAttributesInputBuilder {
    pub(crate) platform_application_arn: std::option::Option<std::string::String>,
    pub(crate) attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl SetPlatformApplicationAttributesInputBuilder {
    /// <p>PlatformApplicationArn for SetPlatformApplicationAttributes action.</p>
    pub fn platform_application_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform_application_arn = Some(input.into());
        self
    }
    /// <p>PlatformApplicationArn for SetPlatformApplicationAttributes action.</p>
    pub fn set_platform_application_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.platform_application_arn = input;
        self
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>A map of the platform application attributes. Attributes in this map include the following:</p>
    /// <ul>
    /// <li> <p> <code>PlatformCredential</code> – The credential received from the notification service.</p>
    /// <ul>
    /// <li> <p>For ADM, <code>PlatformCredential</code>is client secret.</p> </li>
    /// <li> <p>For Apple Services using certificate credentials, <code>PlatformCredential</code> is private key.</p> </li>
    /// <li> <p>For Apple Services using token credentials, <code>PlatformCredential</code> is signing key.</p> </li>
    /// <li> <p>For GCM (Firebase Cloud Messaging), <code>PlatformCredential</code> is API key. </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <ul>
    /// <li> <p> <code>PlatformPrincipal</code> – The principal received from the notification service.</p>
    /// <ul>
    /// <li> <p>For ADM, <code>PlatformPrincipal</code>is client id.</p> </li>
    /// <li> <p>For Apple Services using certificate credentials, <code>PlatformPrincipal</code> is SSL certificate.</p> </li>
    /// <li> <p>For Apple Services using token credentials, <code>PlatformPrincipal</code> is signing key ID.</p> </li>
    /// <li> <p>For GCM (Firebase Cloud Messaging), there is no <code>PlatformPrincipal</code>. </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <ul>
    /// <li> <p> <code>EventEndpointCreated</code> – Topic ARN to which <code>EndpointCreated</code> event notifications are sent.</p> </li>
    /// <li> <p> <code>EventEndpointDeleted</code> – Topic ARN to which <code>EndpointDeleted</code> event notifications are sent.</p> </li>
    /// <li> <p> <code>EventEndpointUpdated</code> – Topic ARN to which <code>EndpointUpdate</code> event notifications are sent.</p> </li>
    /// <li> <p> <code>EventDeliveryFailure</code> – Topic ARN to which <code>DeliveryFailure</code> event notifications are sent upon Direct Publish delivery failure (permanent) to one of the application's endpoints.</p> </li>
    /// <li> <p> <code>SuccessFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p> </li>
    /// <li> <p> <code>FailureFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p> </li>
    /// <li> <p> <code>SuccessFeedbackSampleRate</code> – Sample rate percentage (0-100) of successfully delivered messages.</p> </li>
    /// </ul>
    /// <p>The following attributes only apply to <code>APNs</code> token-based authentication:</p>
    /// <ul>
    /// <li> <p> <code>ApplePlatformTeamID</code> – The identifier that's assigned to your Apple developer account team.</p> </li>
    /// <li> <p> <code>ApplePlatformBundleID</code> – The bundle identifier that's assigned to your iOS app.</p> </li>
    /// </ul>
    pub fn attributes(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = Some(hash_map);
        self
    }
    /// <p>A map of the platform application attributes. Attributes in this map include the following:</p>
    /// <ul>
    /// <li> <p> <code>PlatformCredential</code> – The credential received from the notification service.</p>
    /// <ul>
    /// <li> <p>For ADM, <code>PlatformCredential</code>is client secret.</p> </li>
    /// <li> <p>For Apple Services using certificate credentials, <code>PlatformCredential</code> is private key.</p> </li>
    /// <li> <p>For Apple Services using token credentials, <code>PlatformCredential</code> is signing key.</p> </li>
    /// <li> <p>For GCM (Firebase Cloud Messaging), <code>PlatformCredential</code> is API key. </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <ul>
    /// <li> <p> <code>PlatformPrincipal</code> – The principal received from the notification service.</p>
    /// <ul>
    /// <li> <p>For ADM, <code>PlatformPrincipal</code>is client id.</p> </li>
    /// <li> <p>For Apple Services using certificate credentials, <code>PlatformPrincipal</code> is SSL certificate.</p> </li>
    /// <li> <p>For Apple Services using token credentials, <code>PlatformPrincipal</code> is signing key ID.</p> </li>
    /// <li> <p>For GCM (Firebase Cloud Messaging), there is no <code>PlatformPrincipal</code>. </p> </li>
    /// </ul> </li>
    /// </ul>
    /// <ul>
    /// <li> <p> <code>EventEndpointCreated</code> – Topic ARN to which <code>EndpointCreated</code> event notifications are sent.</p> </li>
    /// <li> <p> <code>EventEndpointDeleted</code> – Topic ARN to which <code>EndpointDeleted</code> event notifications are sent.</p> </li>
    /// <li> <p> <code>EventEndpointUpdated</code> – Topic ARN to which <code>EndpointUpdate</code> event notifications are sent.</p> </li>
    /// <li> <p> <code>EventDeliveryFailure</code> – Topic ARN to which <code>DeliveryFailure</code> event notifications are sent upon Direct Publish delivery failure (permanent) to one of the application's endpoints.</p> </li>
    /// <li> <p> <code>SuccessFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p> </li>
    /// <li> <p> <code>FailureFeedbackRoleArn</code> – IAM role ARN used to give Amazon SNS write access to use CloudWatch Logs on your behalf.</p> </li>
    /// <li> <p> <code>SuccessFeedbackSampleRate</code> – Sample rate percentage (0-100) of successfully delivered messages.</p> </li>
    /// </ul>
    /// <p>The following attributes only apply to <code>APNs</code> token-based authentication:</p>
    /// <ul>
    /// <li> <p> <code>ApplePlatformTeamID</code> – The identifier that's assigned to your Apple developer account team.</p> </li>
    /// <li> <p> <code>ApplePlatformBundleID</code> – The bundle identifier that's assigned to your iOS app.</p> </li>
    /// </ul>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// Consumes the builder and constructs a [`SetPlatformApplicationAttributesInput`](crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributesInput).
    pub fn build(self) -> Result<crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributesInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::set_platform_application_attributes::SetPlatformApplicationAttributesInput {
                platform_application_arn: self.platform_application_arn
                ,
                attributes: self.attributes
                ,
            }
        )
    }
}
