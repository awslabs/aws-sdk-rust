// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_sms_sandbox_phone_number::_create_sms_sandbox_phone_number_output::CreateSmsSandboxPhoneNumberOutputBuilder;

pub use crate::operation::create_sms_sandbox_phone_number::_create_sms_sandbox_phone_number_input::CreateSmsSandboxPhoneNumberInputBuilder;

impl crate::operation::create_sms_sandbox_phone_number::builders::CreateSmsSandboxPhoneNumberInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_sms_sandbox_phone_number::CreateSmsSandboxPhoneNumberOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_sms_sandbox_phone_number::CreateSMSSandboxPhoneNumberError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_sms_sandbox_phone_number();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateSMSSandboxPhoneNumber`.
///
/// <p>Adds a destination phone number to an Amazon Web Services account in the SMS sandbox and sends a one-time password (OTP) to that phone number.</p>
/// <p>When you start using Amazon SNS to send SMS messages, your Amazon Web Services account is in the <i>SMS sandbox</i>. The SMS sandbox provides a safe environment for you to try Amazon SNS features without risking your reputation as an SMS sender. While your Amazon Web Services account is in the SMS sandbox, you can use all of the features of Amazon SNS. However, you can send SMS messages only to verified destination phone numbers. For more information, including how to move out of the sandbox to send messages without restrictions, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox.html">SMS sandbox</a> in the <i>Amazon SNS Developer Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateSMSSandboxPhoneNumberFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_sms_sandbox_phone_number::builders::CreateSmsSandboxPhoneNumberInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_sms_sandbox_phone_number::CreateSmsSandboxPhoneNumberOutput,
        crate::operation::create_sms_sandbox_phone_number::CreateSMSSandboxPhoneNumberError,
    > for CreateSMSSandboxPhoneNumberFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_sms_sandbox_phone_number::CreateSmsSandboxPhoneNumberOutput,
            crate::operation::create_sms_sandbox_phone_number::CreateSMSSandboxPhoneNumberError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateSMSSandboxPhoneNumberFluentBuilder {
    /// Creates a new `CreateSMSSandboxPhoneNumber`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateSMSSandboxPhoneNumber as a reference.
    pub fn as_input(&self) -> &crate::operation::create_sms_sandbox_phone_number::builders::CreateSmsSandboxPhoneNumberInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_sms_sandbox_phone_number::CreateSmsSandboxPhoneNumberOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_sms_sandbox_phone_number::CreateSMSSandboxPhoneNumberError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_sms_sandbox_phone_number::CreateSMSSandboxPhoneNumber::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_sms_sandbox_phone_number::CreateSMSSandboxPhoneNumber::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_sms_sandbox_phone_number::CreateSmsSandboxPhoneNumberOutput,
        crate::operation::create_sms_sandbox_phone_number::CreateSMSSandboxPhoneNumberError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The destination phone number to verify. On verification, Amazon SNS adds this phone number to the list of verified phone numbers that you can send SMS messages to.</p>
    pub fn phone_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.phone_number(input.into());
        self
    }
    /// <p>The destination phone number to verify. On verification, Amazon SNS adds this phone number to the list of verified phone numbers that you can send SMS messages to.</p>
    pub fn set_phone_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_phone_number(input);
        self
    }
    /// <p>The destination phone number to verify. On verification, Amazon SNS adds this phone number to the list of verified phone numbers that you can send SMS messages to.</p>
    pub fn get_phone_number(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_phone_number()
    }
    /// <p>The language to use for sending the OTP. The default value is <code>en-US</code>.</p>
    pub fn language_code(mut self, input: crate::types::LanguageCodeString) -> Self {
        self.inner = self.inner.language_code(input);
        self
    }
    /// <p>The language to use for sending the OTP. The default value is <code>en-US</code>.</p>
    pub fn set_language_code(mut self, input: ::std::option::Option<crate::types::LanguageCodeString>) -> Self {
        self.inner = self.inner.set_language_code(input);
        self
    }
    /// <p>The language to use for sending the OTP. The default value is <code>en-US</code>.</p>
    pub fn get_language_code(&self) -> &::std::option::Option<crate::types::LanguageCodeString> {
        self.inner.get_language_code()
    }
}
