// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::publish_batch::_publish_batch_output::PublishBatchOutputBuilder;

pub use crate::operation::publish_batch::_publish_batch_input::PublishBatchInputBuilder;

/// Fluent builder constructing a request to `PublishBatch`.
///
/// <p>Publishes up to ten messages to the specified topic. This is a batch version of <code>Publish</code>. For FIFO topics, multiple messages within a single batch are published in the order they are sent, and messages are deduplicated within the batch and across batches for 5 minutes.</p>
/// <p>The result of publishing each message is reported individually in the response. Because the batch request can result in a combination of successful and unsuccessful actions, you should check for batch errors even when the call returns an HTTP status code of <code>200</code>.</p>
/// <p>The maximum allowed individual message size and the maximum total payload size (the sum of the individual lengths of all of the batched messages) are both 256 KB (262,144 bytes). </p>
/// <p>Some actions take lists of parameters. These lists are specified using the <code>param.n</code> notation. Values of <code>n</code> are integers starting from 1. For example, a parameter list with two elements looks like this: </p>
/// <p>&amp;AttributeName.1=first</p>
/// <p>&amp;AttributeName.2=second</p>
/// <p>If you send a batch message to a topic, Amazon SNS publishes the batch message to each endpoint that is subscribed to the topic. The format of the batch message depends on the notification protocol for each subscribed endpoint.</p>
/// <p>When a <code>messageId</code> is returned, the batch message is saved and Amazon SNS immediately delivers the message to subscribers.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PublishBatchFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::publish_batch::builders::PublishBatchInputBuilder,
}
impl PublishBatchFluentBuilder {
    /// Creates a new `PublishBatch`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::publish_batch::PublishBatch,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::publish_batch::PublishBatchError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::publish_batch::PublishBatchOutput,
        aws_smithy_http::result::SdkError<crate::operation::publish_batch::PublishBatchError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon resource name (ARN) of the topic you want to batch publish to.</p>
    pub fn topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.topic_arn(input.into());
        self
    }
    /// <p>The Amazon resource name (ARN) of the topic you want to batch publish to.</p>
    pub fn set_topic_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_topic_arn(input);
        self
    }
    /// Appends an item to `PublishBatchRequestEntries`.
    ///
    /// To override the contents of this collection use [`set_publish_batch_request_entries`](Self::set_publish_batch_request_entries).
    ///
    /// <p>A list of <code>PublishBatch</code> request entries to be sent to the SNS topic.</p>
    pub fn publish_batch_request_entries(
        mut self,
        input: crate::types::PublishBatchRequestEntry,
    ) -> Self {
        self.inner = self.inner.publish_batch_request_entries(input);
        self
    }
    /// <p>A list of <code>PublishBatch</code> request entries to be sent to the SNS topic.</p>
    pub fn set_publish_batch_request_entries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PublishBatchRequestEntry>>,
    ) -> Self {
        self.inner = self.inner.set_publish_batch_request_entries(input);
        self
    }
}
