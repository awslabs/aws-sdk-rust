// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetSmsSandboxAccountStatusOutput {
    /// <p>Indicates whether the calling Amazon Web Services account is in the SMS sandbox.</p>
    pub is_in_sandbox: bool,
    _request_id: Option<String>,
}
impl GetSmsSandboxAccountStatusOutput {
    /// <p>Indicates whether the calling Amazon Web Services account is in the SMS sandbox.</p>
    pub fn is_in_sandbox(&self) -> bool {
        self.is_in_sandbox
    }
}
impl ::aws_http::request_id::RequestId for GetSmsSandboxAccountStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetSmsSandboxAccountStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetSmsSandboxAccountStatusOutput`](crate::operation::get_sms_sandbox_account_status::GetSmsSandboxAccountStatusOutput).
    pub fn builder() -> crate::operation::get_sms_sandbox_account_status::builders::GetSmsSandboxAccountStatusOutputBuilder {
        crate::operation::get_sms_sandbox_account_status::builders::GetSmsSandboxAccountStatusOutputBuilder::default()
    }
}

/// A builder for [`GetSmsSandboxAccountStatusOutput`](crate::operation::get_sms_sandbox_account_status::GetSmsSandboxAccountStatusOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetSmsSandboxAccountStatusOutputBuilder {
    pub(crate) is_in_sandbox: ::std::option::Option<bool>,
    _request_id: Option<String>,
}
impl GetSmsSandboxAccountStatusOutputBuilder {
    /// <p>Indicates whether the calling Amazon Web Services account is in the SMS sandbox.</p>
    /// This field is required.
    pub fn is_in_sandbox(mut self, input: bool) -> Self {
        self.is_in_sandbox = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the calling Amazon Web Services account is in the SMS sandbox.</p>
    pub fn set_is_in_sandbox(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_in_sandbox = input;
        self
    }
    /// <p>Indicates whether the calling Amazon Web Services account is in the SMS sandbox.</p>
    pub fn get_is_in_sandbox(&self) -> &::std::option::Option<bool> {
        &self.is_in_sandbox
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetSmsSandboxAccountStatusOutput`](crate::operation::get_sms_sandbox_account_status::GetSmsSandboxAccountStatusOutput).
    pub fn build(self) -> crate::operation::get_sms_sandbox_account_status::GetSmsSandboxAccountStatusOutput {
        crate::operation::get_sms_sandbox_account_status::GetSmsSandboxAccountStatusOutput {
            is_in_sandbox: self.is_in_sandbox.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
