// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Platform application object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PlatformApplication {
    /// <p>PlatformApplicationArn for platform application object.</p>
    #[doc(hidden)]
    pub platform_application_arn: std::option::Option<std::string::String>,
    /// <p>Attributes for platform application object.</p>
    #[doc(hidden)]
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl PlatformApplication {
    /// <p>PlatformApplicationArn for platform application object.</p>
    pub fn platform_application_arn(&self) -> std::option::Option<&str> {
        self.platform_application_arn.as_deref()
    }
    /// <p>Attributes for platform application object.</p>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
}
impl PlatformApplication {
    /// Creates a new builder-style object to manufacture [`PlatformApplication`](crate::types::PlatformApplication).
    pub fn builder() -> crate::types::builders::PlatformApplicationBuilder {
        crate::types::builders::PlatformApplicationBuilder::default()
    }
}

/// A builder for [`PlatformApplication`](crate::types::PlatformApplication).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PlatformApplicationBuilder {
    pub(crate) platform_application_arn: std::option::Option<std::string::String>,
    pub(crate) attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl PlatformApplicationBuilder {
    /// <p>PlatformApplicationArn for platform application object.</p>
    pub fn platform_application_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform_application_arn = Some(input.into());
        self
    }
    /// <p>PlatformApplicationArn for platform application object.</p>
    pub fn set_platform_application_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.platform_application_arn = input;
        self
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>Attributes for platform application object.</p>
    pub fn attributes(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = Some(hash_map);
        self
    }
    /// <p>Attributes for platform application object.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// Consumes the builder and constructs a [`PlatformApplication`](crate::types::PlatformApplication).
    pub fn build(self) -> crate::types::PlatformApplication {
        crate::types::PlatformApplication {
            platform_application_arn: self.platform_application_arn,
            attributes: self.attributes,
        }
    }
}
