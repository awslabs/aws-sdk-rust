// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_application::_create_application_output::CreateApplicationOutputBuilder;

pub use crate::operation::create_application::_create_application_input::CreateApplicationInputBuilder;

impl crate::operation::create_application::builders::CreateApplicationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_application::CreateApplicationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_application::CreateApplicationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_application();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateApplication`.
///
/// <p>Adds an application that is created from a resource group.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateApplicationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_application::builders::CreateApplicationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_application::CreateApplicationOutput,
        crate::operation::create_application::CreateApplicationError,
    > for CreateApplicationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_application::CreateApplicationOutput,
            crate::operation::create_application::CreateApplicationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateApplicationFluentBuilder {
    /// Creates a new `CreateApplication`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateApplication as a reference.
    pub fn as_input(&self) -> &crate::operation::create_application::builders::CreateApplicationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_application::CreateApplicationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_application::CreateApplicationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_application::CreateApplication::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_application::CreateApplication::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_application::CreateApplicationOutput,
        crate::operation::create_application::CreateApplicationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the resource group.</p>
    pub fn resource_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.resource_group_name(input.into());
        self
    }
    /// <p>The name of the resource group.</p>
    pub fn set_resource_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_resource_group_name(input);
        self
    }
    /// <p>The name of the resource group.</p>
    pub fn get_resource_group_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_resource_group_name()
    }
    /// <p>When set to <code>true</code>, creates opsItems for any problems detected on an application.</p>
    pub fn ops_center_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.ops_center_enabled(input);
        self
    }
    /// <p>When set to <code>true</code>, creates opsItems for any problems detected on an application.</p>
    pub fn set_ops_center_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_ops_center_enabled(input);
        self
    }
    /// <p>When set to <code>true</code>, creates opsItems for any problems detected on an application.</p>
    pub fn get_ops_center_enabled(&self) -> &::std::option::Option<bool> {
        self.inner.get_ops_center_enabled()
    }
    /// <p>Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as <code>instance terminated</code>, <code>failed deployment</code>, and others.</p>
    pub fn cwe_monitor_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.cwe_monitor_enabled(input);
        self
    }
    /// <p>Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as <code>instance terminated</code>, <code>failed deployment</code>, and others.</p>
    pub fn set_cwe_monitor_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_cwe_monitor_enabled(input);
        self
    }
    /// <p>Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as <code>instance terminated</code>, <code>failed deployment</code>, and others.</p>
    pub fn get_cwe_monitor_enabled(&self) -> &::std::option::Option<bool> {
        self.inner.get_cwe_monitor_enabled()
    }
    /// <p>The SNS topic provided to Application Insights that is associated to the created opsItem. Allows you to receive notifications for updates to the opsItem.</p>
    pub fn ops_item_sns_topic_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ops_item_sns_topic_arn(input.into());
        self
    }
    /// <p>The SNS topic provided to Application Insights that is associated to the created opsItem. Allows you to receive notifications for updates to the opsItem.</p>
    pub fn set_ops_item_sns_topic_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ops_item_sns_topic_arn(input);
        self
    }
    /// <p>The SNS topic provided to Application Insights that is associated to the created opsItem. Allows you to receive notifications for updates to the opsItem.</p>
    pub fn get_ops_item_sns_topic_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ops_item_sns_topic_arn()
    }
    ///
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>List of tags to add to the application. tag key (<code>Key</code>) and an associated tag value (<code>Value</code>). The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>List of tags to add to the application. tag key (<code>Key</code>) and an associated tag value (<code>Value</code>). The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>List of tags to add to the application. tag key (<code>Key</code>) and an associated tag value (<code>Value</code>). The maximum length of a tag key is 128 characters. The maximum length of a tag value is 256 characters.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
    /// <p>Indicates whether Application Insights automatically configures unmonitored resources in the resource group.</p>
    pub fn auto_config_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_config_enabled(input);
        self
    }
    /// <p>Indicates whether Application Insights automatically configures unmonitored resources in the resource group.</p>
    pub fn set_auto_config_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_config_enabled(input);
        self
    }
    /// <p>Indicates whether Application Insights automatically configures unmonitored resources in the resource group.</p>
    pub fn get_auto_config_enabled(&self) -> &::std::option::Option<bool> {
        self.inner.get_auto_config_enabled()
    }
    /// <p>Configures all of the resources in the resource group by applying the recommended configurations.</p>
    pub fn auto_create(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_create(input);
        self
    }
    /// <p>Configures all of the resources in the resource group by applying the recommended configurations.</p>
    pub fn set_auto_create(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_create(input);
        self
    }
    /// <p>Configures all of the resources in the resource group by applying the recommended configurations.</p>
    pub fn get_auto_create(&self) -> &::std::option::Option<bool> {
        self.inner.get_auto_create()
    }
    /// <p>Application Insights can create applications based on a resource group or on an account. To create an account-based application using all of the resources in the account, set this parameter to <code>ACCOUNT_BASED</code>.</p>
    pub fn grouping_type(mut self, input: crate::types::GroupingType) -> Self {
        self.inner = self.inner.grouping_type(input);
        self
    }
    /// <p>Application Insights can create applications based on a resource group or on an account. To create an account-based application using all of the resources in the account, set this parameter to <code>ACCOUNT_BASED</code>.</p>
    pub fn set_grouping_type(mut self, input: ::std::option::Option<crate::types::GroupingType>) -> Self {
        self.inner = self.inner.set_grouping_type(input);
        self
    }
    /// <p>Application Insights can create applications based on a resource group or on an account. To create an account-based application using all of the resources in the account, set this parameter to <code>ACCOUNT_BASED</code>.</p>
    pub fn get_grouping_type(&self) -> &::std::option::Option<crate::types::GroupingType> {
        self.inner.get_grouping_type()
    }
    /// <p>If set to true, the managed policies for SSM and CW will be attached to the instance roles if they are missing.</p>
    pub fn attach_missing_permission(mut self, input: bool) -> Self {
        self.inner = self.inner.attach_missing_permission(input);
        self
    }
    /// <p>If set to true, the managed policies for SSM and CW will be attached to the instance roles if they are missing.</p>
    pub fn set_attach_missing_permission(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_attach_missing_permission(input);
        self
    }
    /// <p>If set to true, the managed policies for SSM and CW will be attached to the instance roles if they are missing.</p>
    pub fn get_attach_missing_permission(&self) -> &::std::option::Option<bool> {
        self.inner.get_attach_missing_permission()
    }
}
