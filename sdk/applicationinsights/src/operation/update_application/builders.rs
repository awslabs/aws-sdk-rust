// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_application::_update_application_output::UpdateApplicationOutputBuilder;

pub use crate::operation::update_application::_update_application_input::UpdateApplicationInputBuilder;

/// Fluent builder constructing a request to `UpdateApplication`.
///
/// <p>Updates the application.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateApplicationFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_application::builders::UpdateApplicationInputBuilder,
}
impl UpdateApplicationFluentBuilder {
    /// Creates a new `UpdateApplication`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_application::UpdateApplication,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_application::UpdateApplicationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_application::UpdateApplicationOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_application::UpdateApplicationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the resource group.</p>
    pub fn resource_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_group_name(input.into());
        self
    }
    /// <p>The name of the resource group.</p>
    pub fn set_resource_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_resource_group_name(input);
        self
    }
    /// <p> When set to <code>true</code>, creates opsItems for any problems detected on an application. </p>
    pub fn ops_center_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.ops_center_enabled(input);
        self
    }
    /// <p> When set to <code>true</code>, creates opsItems for any problems detected on an application. </p>
    pub fn set_ops_center_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_ops_center_enabled(input);
        self
    }
    /// <p> Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as <code>instance terminated</code>, <code>failed deployment</code>, and others. </p>
    pub fn cwe_monitor_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.cwe_monitor_enabled(input);
        self
    }
    /// <p> Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as <code>instance terminated</code>, <code>failed deployment</code>, and others. </p>
    pub fn set_cwe_monitor_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_cwe_monitor_enabled(input);
        self
    }
    /// <p> The SNS topic provided to Application Insights that is associated to the created opsItem. Allows you to receive notifications for updates to the opsItem.</p>
    pub fn ops_item_sns_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ops_item_sns_topic_arn(input.into());
        self
    }
    /// <p> The SNS topic provided to Application Insights that is associated to the created opsItem. Allows you to receive notifications for updates to the opsItem.</p>
    pub fn set_ops_item_sns_topic_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_ops_item_sns_topic_arn(input);
        self
    }
    /// <p> Disassociates the SNS topic from the opsItem created for detected problems.</p>
    pub fn remove_sns_topic(mut self, input: bool) -> Self {
        self.inner = self.inner.remove_sns_topic(input);
        self
    }
    /// <p> Disassociates the SNS topic from the opsItem created for detected problems.</p>
    pub fn set_remove_sns_topic(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_remove_sns_topic(input);
        self
    }
    /// <p> Turns auto-configuration on or off. </p>
    pub fn auto_config_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_config_enabled(input);
        self
    }
    /// <p> Turns auto-configuration on or off. </p>
    pub fn set_auto_config_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_config_enabled(input);
        self
    }
}
