// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateLogPatternOutput {
    /// <p>The name of the resource group.</p>
    #[doc(hidden)]
    pub resource_group_name: std::option::Option<std::string::String>,
    /// <p>The successfully created log pattern.</p>
    #[doc(hidden)]
    pub log_pattern: std::option::Option<crate::types::LogPattern>,
    _request_id: Option<String>,
}
impl UpdateLogPatternOutput {
    /// <p>The name of the resource group.</p>
    pub fn resource_group_name(&self) -> std::option::Option<&str> {
        self.resource_group_name.as_deref()
    }
    /// <p>The successfully created log pattern.</p>
    pub fn log_pattern(&self) -> std::option::Option<&crate::types::LogPattern> {
        self.log_pattern.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateLogPatternOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateLogPatternOutput {
    /// Creates a new builder-style object to manufacture [`UpdateLogPatternOutput`](crate::operation::update_log_pattern::UpdateLogPatternOutput).
    pub fn builder() -> crate::operation::update_log_pattern::builders::UpdateLogPatternOutputBuilder
    {
        crate::operation::update_log_pattern::builders::UpdateLogPatternOutputBuilder::default()
    }
}

/// A builder for [`UpdateLogPatternOutput`](crate::operation::update_log_pattern::UpdateLogPatternOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateLogPatternOutputBuilder {
    pub(crate) resource_group_name: std::option::Option<std::string::String>,
    pub(crate) log_pattern: std::option::Option<crate::types::LogPattern>,
    _request_id: Option<String>,
}
impl UpdateLogPatternOutputBuilder {
    /// <p>The name of the resource group.</p>
    pub fn resource_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_group_name = Some(input.into());
        self
    }
    /// <p>The name of the resource group.</p>
    pub fn set_resource_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resource_group_name = input;
        self
    }
    /// <p>The successfully created log pattern.</p>
    pub fn log_pattern(mut self, input: crate::types::LogPattern) -> Self {
        self.log_pattern = Some(input);
        self
    }
    /// <p>The successfully created log pattern.</p>
    pub fn set_log_pattern(mut self, input: std::option::Option<crate::types::LogPattern>) -> Self {
        self.log_pattern = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateLogPatternOutput`](crate::operation::update_log_pattern::UpdateLogPatternOutput).
    pub fn build(self) -> crate::operation::update_log_pattern::UpdateLogPatternOutput {
        crate::operation::update_log_pattern::UpdateLogPatternOutput {
            resource_group_name: self.resource_group_name,
            log_pattern: self.log_pattern,
            _request_id: self._request_id,
        }
    }
}
