// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeComponentOutput {
    /// <p>Describes a standalone resource or similarly grouped resources that the application is made up of.</p>
    #[doc(hidden)]
    pub application_component: std::option::Option<crate::types::ApplicationComponent>,
    /// <p>The list of resource ARNs that belong to the component.</p>
    #[doc(hidden)]
    pub resource_list: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeComponentOutput {
    /// <p>Describes a standalone resource or similarly grouped resources that the application is made up of.</p>
    pub fn application_component(
        &self,
    ) -> std::option::Option<&crate::types::ApplicationComponent> {
        self.application_component.as_ref()
    }
    /// <p>The list of resource ARNs that belong to the component.</p>
    pub fn resource_list(&self) -> std::option::Option<&[std::string::String]> {
        self.resource_list.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeComponentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeComponentOutput {
    /// Creates a new builder-style object to manufacture [`DescribeComponentOutput`](crate::operation::describe_component::DescribeComponentOutput).
    pub fn builder(
    ) -> crate::operation::describe_component::builders::DescribeComponentOutputBuilder {
        crate::operation::describe_component::builders::DescribeComponentOutputBuilder::default()
    }
}

/// A builder for [`DescribeComponentOutput`](crate::operation::describe_component::DescribeComponentOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeComponentOutputBuilder {
    pub(crate) application_component: std::option::Option<crate::types::ApplicationComponent>,
    pub(crate) resource_list: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeComponentOutputBuilder {
    /// <p>Describes a standalone resource or similarly grouped resources that the application is made up of.</p>
    pub fn application_component(mut self, input: crate::types::ApplicationComponent) -> Self {
        self.application_component = Some(input);
        self
    }
    /// <p>Describes a standalone resource or similarly grouped resources that the application is made up of.</p>
    pub fn set_application_component(
        mut self,
        input: std::option::Option<crate::types::ApplicationComponent>,
    ) -> Self {
        self.application_component = input;
        self
    }
    /// Appends an item to `resource_list`.
    ///
    /// To override the contents of this collection use [`set_resource_list`](Self::set_resource_list).
    ///
    /// <p>The list of resource ARNs that belong to the component.</p>
    pub fn resource_list(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.resource_list.unwrap_or_default();
        v.push(input.into());
        self.resource_list = Some(v);
        self
    }
    /// <p>The list of resource ARNs that belong to the component.</p>
    pub fn set_resource_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.resource_list = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeComponentOutput`](crate::operation::describe_component::DescribeComponentOutput).
    pub fn build(self) -> crate::operation::describe_component::DescribeComponentOutput {
        crate::operation::describe_component::DescribeComponentOutput {
            application_component: self.application_component,
            resource_list: self.resource_list,
            _request_id: self._request_id,
        }
    }
}
