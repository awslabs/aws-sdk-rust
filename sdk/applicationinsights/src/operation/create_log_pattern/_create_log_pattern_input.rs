// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLogPatternInput {
    /// <p>The name of the resource group.</p>
    #[doc(hidden)]
    pub resource_group_name: std::option::Option<std::string::String>,
    /// <p>The name of the log pattern set.</p>
    #[doc(hidden)]
    pub pattern_set_name: std::option::Option<std::string::String>,
    /// <p>The name of the log pattern.</p>
    #[doc(hidden)]
    pub pattern_name: std::option::Option<std::string::String>,
    /// <p>The log pattern. The pattern must be DFA compatible. Patterns that utilize forward lookahead or backreference constructions are not supported.</p>
    #[doc(hidden)]
    pub pattern: std::option::Option<std::string::String>,
    /// <p>Rank of the log pattern. Must be a value between <code>1</code> and <code>1,000,000</code>. The patterns are sorted by rank, so we recommend that you set your highest priority patterns with the lowest rank. A pattern of rank <code>1</code> will be the first to get matched to a log line. A pattern of rank <code>1,000,000</code> will be last to get matched. When you configure custom log patterns from the console, a <code>Low</code> severity pattern translates to a <code>750,000</code> rank. A <code>Medium</code> severity pattern translates to a <code>500,000</code> rank. And a <code>High</code> severity pattern translates to a <code>250,000</code> rank. Rank values less than <code>1</code> or greater than <code>1,000,000</code> are reserved for AWS-provided patterns. </p>
    #[doc(hidden)]
    pub rank: i32,
}
impl CreateLogPatternInput {
    /// <p>The name of the resource group.</p>
    pub fn resource_group_name(&self) -> std::option::Option<&str> {
        self.resource_group_name.as_deref()
    }
    /// <p>The name of the log pattern set.</p>
    pub fn pattern_set_name(&self) -> std::option::Option<&str> {
        self.pattern_set_name.as_deref()
    }
    /// <p>The name of the log pattern.</p>
    pub fn pattern_name(&self) -> std::option::Option<&str> {
        self.pattern_name.as_deref()
    }
    /// <p>The log pattern. The pattern must be DFA compatible. Patterns that utilize forward lookahead or backreference constructions are not supported.</p>
    pub fn pattern(&self) -> std::option::Option<&str> {
        self.pattern.as_deref()
    }
    /// <p>Rank of the log pattern. Must be a value between <code>1</code> and <code>1,000,000</code>. The patterns are sorted by rank, so we recommend that you set your highest priority patterns with the lowest rank. A pattern of rank <code>1</code> will be the first to get matched to a log line. A pattern of rank <code>1,000,000</code> will be last to get matched. When you configure custom log patterns from the console, a <code>Low</code> severity pattern translates to a <code>750,000</code> rank. A <code>Medium</code> severity pattern translates to a <code>500,000</code> rank. And a <code>High</code> severity pattern translates to a <code>250,000</code> rank. Rank values less than <code>1</code> or greater than <code>1,000,000</code> are reserved for AWS-provided patterns. </p>
    pub fn rank(&self) -> i32 {
        self.rank
    }
}
impl CreateLogPatternInput {
    /// Creates a new builder-style object to manufacture [`CreateLogPatternInput`](crate::operation::create_log_pattern::CreateLogPatternInput).
    pub fn builder() -> crate::operation::create_log_pattern::builders::CreateLogPatternInputBuilder
    {
        crate::operation::create_log_pattern::builders::CreateLogPatternInputBuilder::default()
    }
}

/// A builder for [`CreateLogPatternInput`](crate::operation::create_log_pattern::CreateLogPatternInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateLogPatternInputBuilder {
    pub(crate) resource_group_name: std::option::Option<std::string::String>,
    pub(crate) pattern_set_name: std::option::Option<std::string::String>,
    pub(crate) pattern_name: std::option::Option<std::string::String>,
    pub(crate) pattern: std::option::Option<std::string::String>,
    pub(crate) rank: std::option::Option<i32>,
}
impl CreateLogPatternInputBuilder {
    /// <p>The name of the resource group.</p>
    pub fn resource_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_group_name = Some(input.into());
        self
    }
    /// <p>The name of the resource group.</p>
    pub fn set_resource_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resource_group_name = input;
        self
    }
    /// <p>The name of the log pattern set.</p>
    pub fn pattern_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.pattern_set_name = Some(input.into());
        self
    }
    /// <p>The name of the log pattern set.</p>
    pub fn set_pattern_set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pattern_set_name = input;
        self
    }
    /// <p>The name of the log pattern.</p>
    pub fn pattern_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.pattern_name = Some(input.into());
        self
    }
    /// <p>The name of the log pattern.</p>
    pub fn set_pattern_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pattern_name = input;
        self
    }
    /// <p>The log pattern. The pattern must be DFA compatible. Patterns that utilize forward lookahead or backreference constructions are not supported.</p>
    pub fn pattern(mut self, input: impl Into<std::string::String>) -> Self {
        self.pattern = Some(input.into());
        self
    }
    /// <p>The log pattern. The pattern must be DFA compatible. Patterns that utilize forward lookahead or backreference constructions are not supported.</p>
    pub fn set_pattern(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pattern = input;
        self
    }
    /// <p>Rank of the log pattern. Must be a value between <code>1</code> and <code>1,000,000</code>. The patterns are sorted by rank, so we recommend that you set your highest priority patterns with the lowest rank. A pattern of rank <code>1</code> will be the first to get matched to a log line. A pattern of rank <code>1,000,000</code> will be last to get matched. When you configure custom log patterns from the console, a <code>Low</code> severity pattern translates to a <code>750,000</code> rank. A <code>Medium</code> severity pattern translates to a <code>500,000</code> rank. And a <code>High</code> severity pattern translates to a <code>250,000</code> rank. Rank values less than <code>1</code> or greater than <code>1,000,000</code> are reserved for AWS-provided patterns. </p>
    pub fn rank(mut self, input: i32) -> Self {
        self.rank = Some(input);
        self
    }
    /// <p>Rank of the log pattern. Must be a value between <code>1</code> and <code>1,000,000</code>. The patterns are sorted by rank, so we recommend that you set your highest priority patterns with the lowest rank. A pattern of rank <code>1</code> will be the first to get matched to a log line. A pattern of rank <code>1,000,000</code> will be last to get matched. When you configure custom log patterns from the console, a <code>Low</code> severity pattern translates to a <code>750,000</code> rank. A <code>Medium</code> severity pattern translates to a <code>500,000</code> rank. And a <code>High</code> severity pattern translates to a <code>250,000</code> rank. Rank values less than <code>1</code> or greater than <code>1,000,000</code> are reserved for AWS-provided patterns. </p>
    pub fn set_rank(mut self, input: std::option::Option<i32>) -> Self {
        self.rank = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateLogPatternInput`](crate::operation::create_log_pattern::CreateLogPatternInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_log_pattern::CreateLogPatternInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_log_pattern::CreateLogPatternInput {
                resource_group_name: self.resource_group_name,
                pattern_set_name: self.pattern_set_name,
                pattern_name: self.pattern_name,
                pattern: self.pattern,
                rank: self.rank.unwrap_or_default(),
            },
        )
    }
}
