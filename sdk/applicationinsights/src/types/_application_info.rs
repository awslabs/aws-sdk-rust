// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the status of the application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApplicationInfo {
    /// <p>The name of the resource group used for the application.</p>
    #[doc(hidden)]
    pub resource_group_name: std::option::Option<std::string::String>,
    /// <p>The lifecycle of the application. </p>
    #[doc(hidden)]
    pub life_cycle: std::option::Option<std::string::String>,
    /// <p> The SNS topic provided to Application Insights that is associated to the created opsItems to receive SNS notifications for opsItem updates. </p>
    #[doc(hidden)]
    pub ops_item_sns_topic_arn: std::option::Option<std::string::String>,
    /// <p> Indicates whether Application Insights will create opsItems for any problem detected by Application Insights for an application. </p>
    #[doc(hidden)]
    pub ops_center_enabled: std::option::Option<bool>,
    /// <p> Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as <code>instance terminated</code>, <code>failed deployment</code>, and others. </p>
    #[doc(hidden)]
    pub cwe_monitor_enabled: std::option::Option<bool>,
    /// <p>The issues on the user side that block Application Insights from successfully monitoring an application. Example remarks include:</p>
    /// <ul>
    /// <li> <p>“Configuring application, detected 1 Errors, 3 Warnings”</p> </li>
    /// <li> <p>“Configuring application, detected 1 Unconfigured Components”</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub remarks: std::option::Option<std::string::String>,
    /// <p> Indicates whether auto-configuration is turned on for this application. </p>
    #[doc(hidden)]
    pub auto_config_enabled: std::option::Option<bool>,
    /// <p> The method used by Application Insights to onboard your resources. </p>
    #[doc(hidden)]
    pub discovery_type: std::option::Option<crate::types::DiscoveryType>,
}
impl ApplicationInfo {
    /// <p>The name of the resource group used for the application.</p>
    pub fn resource_group_name(&self) -> std::option::Option<&str> {
        self.resource_group_name.as_deref()
    }
    /// <p>The lifecycle of the application. </p>
    pub fn life_cycle(&self) -> std::option::Option<&str> {
        self.life_cycle.as_deref()
    }
    /// <p> The SNS topic provided to Application Insights that is associated to the created opsItems to receive SNS notifications for opsItem updates. </p>
    pub fn ops_item_sns_topic_arn(&self) -> std::option::Option<&str> {
        self.ops_item_sns_topic_arn.as_deref()
    }
    /// <p> Indicates whether Application Insights will create opsItems for any problem detected by Application Insights for an application. </p>
    pub fn ops_center_enabled(&self) -> std::option::Option<bool> {
        self.ops_center_enabled
    }
    /// <p> Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as <code>instance terminated</code>, <code>failed deployment</code>, and others. </p>
    pub fn cwe_monitor_enabled(&self) -> std::option::Option<bool> {
        self.cwe_monitor_enabled
    }
    /// <p>The issues on the user side that block Application Insights from successfully monitoring an application. Example remarks include:</p>
    /// <ul>
    /// <li> <p>“Configuring application, detected 1 Errors, 3 Warnings”</p> </li>
    /// <li> <p>“Configuring application, detected 1 Unconfigured Components”</p> </li>
    /// </ul>
    pub fn remarks(&self) -> std::option::Option<&str> {
        self.remarks.as_deref()
    }
    /// <p> Indicates whether auto-configuration is turned on for this application. </p>
    pub fn auto_config_enabled(&self) -> std::option::Option<bool> {
        self.auto_config_enabled
    }
    /// <p> The method used by Application Insights to onboard your resources. </p>
    pub fn discovery_type(&self) -> std::option::Option<&crate::types::DiscoveryType> {
        self.discovery_type.as_ref()
    }
}
impl ApplicationInfo {
    /// Creates a new builder-style object to manufacture [`ApplicationInfo`](crate::types::ApplicationInfo).
    pub fn builder() -> crate::types::builders::ApplicationInfoBuilder {
        crate::types::builders::ApplicationInfoBuilder::default()
    }
}

/// A builder for [`ApplicationInfo`](crate::types::ApplicationInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApplicationInfoBuilder {
    pub(crate) resource_group_name: std::option::Option<std::string::String>,
    pub(crate) life_cycle: std::option::Option<std::string::String>,
    pub(crate) ops_item_sns_topic_arn: std::option::Option<std::string::String>,
    pub(crate) ops_center_enabled: std::option::Option<bool>,
    pub(crate) cwe_monitor_enabled: std::option::Option<bool>,
    pub(crate) remarks: std::option::Option<std::string::String>,
    pub(crate) auto_config_enabled: std::option::Option<bool>,
    pub(crate) discovery_type: std::option::Option<crate::types::DiscoveryType>,
}
impl ApplicationInfoBuilder {
    /// <p>The name of the resource group used for the application.</p>
    pub fn resource_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_group_name = Some(input.into());
        self
    }
    /// <p>The name of the resource group used for the application.</p>
    pub fn set_resource_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resource_group_name = input;
        self
    }
    /// <p>The lifecycle of the application. </p>
    pub fn life_cycle(mut self, input: impl Into<std::string::String>) -> Self {
        self.life_cycle = Some(input.into());
        self
    }
    /// <p>The lifecycle of the application. </p>
    pub fn set_life_cycle(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.life_cycle = input;
        self
    }
    /// <p> The SNS topic provided to Application Insights that is associated to the created opsItems to receive SNS notifications for opsItem updates. </p>
    pub fn ops_item_sns_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.ops_item_sns_topic_arn = Some(input.into());
        self
    }
    /// <p> The SNS topic provided to Application Insights that is associated to the created opsItems to receive SNS notifications for opsItem updates. </p>
    pub fn set_ops_item_sns_topic_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ops_item_sns_topic_arn = input;
        self
    }
    /// <p> Indicates whether Application Insights will create opsItems for any problem detected by Application Insights for an application. </p>
    pub fn ops_center_enabled(mut self, input: bool) -> Self {
        self.ops_center_enabled = Some(input);
        self
    }
    /// <p> Indicates whether Application Insights will create opsItems for any problem detected by Application Insights for an application. </p>
    pub fn set_ops_center_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.ops_center_enabled = input;
        self
    }
    /// <p> Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as <code>instance terminated</code>, <code>failed deployment</code>, and others. </p>
    pub fn cwe_monitor_enabled(mut self, input: bool) -> Self {
        self.cwe_monitor_enabled = Some(input);
        self
    }
    /// <p> Indicates whether Application Insights can listen to CloudWatch events for the application resources, such as <code>instance terminated</code>, <code>failed deployment</code>, and others. </p>
    pub fn set_cwe_monitor_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.cwe_monitor_enabled = input;
        self
    }
    /// <p>The issues on the user side that block Application Insights from successfully monitoring an application. Example remarks include:</p>
    /// <ul>
    /// <li> <p>“Configuring application, detected 1 Errors, 3 Warnings”</p> </li>
    /// <li> <p>“Configuring application, detected 1 Unconfigured Components”</p> </li>
    /// </ul>
    pub fn remarks(mut self, input: impl Into<std::string::String>) -> Self {
        self.remarks = Some(input.into());
        self
    }
    /// <p>The issues on the user side that block Application Insights from successfully monitoring an application. Example remarks include:</p>
    /// <ul>
    /// <li> <p>“Configuring application, detected 1 Errors, 3 Warnings”</p> </li>
    /// <li> <p>“Configuring application, detected 1 Unconfigured Components”</p> </li>
    /// </ul>
    pub fn set_remarks(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.remarks = input;
        self
    }
    /// <p> Indicates whether auto-configuration is turned on for this application. </p>
    pub fn auto_config_enabled(mut self, input: bool) -> Self {
        self.auto_config_enabled = Some(input);
        self
    }
    /// <p> Indicates whether auto-configuration is turned on for this application. </p>
    pub fn set_auto_config_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.auto_config_enabled = input;
        self
    }
    /// <p> The method used by Application Insights to onboard your resources. </p>
    pub fn discovery_type(mut self, input: crate::types::DiscoveryType) -> Self {
        self.discovery_type = Some(input);
        self
    }
    /// <p> The method used by Application Insights to onboard your resources. </p>
    pub fn set_discovery_type(
        mut self,
        input: std::option::Option<crate::types::DiscoveryType>,
    ) -> Self {
        self.discovery_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ApplicationInfo`](crate::types::ApplicationInfo).
    pub fn build(self) -> crate::types::ApplicationInfo {
        crate::types::ApplicationInfo {
            resource_group_name: self.resource_group_name,
            life_cycle: self.life_cycle,
            ops_item_sns_topic_arn: self.ops_item_sns_topic_arn,
            ops_center_enabled: self.ops_center_enabled,
            cwe_monitor_enabled: self.cwe_monitor_enabled,
            remarks: self.remarks,
            auto_config_enabled: self.auto_config_enabled,
            discovery_type: self.discovery_type,
        }
    }
}
