// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) mod shape_create_application;

pub fn parse_http_error_metadata(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    aws_smithy_types::error::metadata::Builder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    crate::json_errors::parse_error_metadata(response.body(), response.headers())
}

pub(crate) mod shape_create_component;

pub(crate) mod shape_create_log_pattern;

pub(crate) mod shape_delete_application;

pub(crate) mod shape_delete_component;

pub(crate) mod shape_delete_log_pattern;

pub(crate) mod shape_describe_application;

pub(crate) mod shape_describe_component;

pub(crate) mod shape_describe_component_configuration;

pub(crate) mod shape_describe_component_configuration_recommendation;

pub(crate) mod shape_describe_log_pattern;

pub(crate) mod shape_describe_observation;

pub(crate) mod shape_describe_problem;

pub(crate) mod shape_describe_problem_observations;

pub(crate) mod shape_list_applications;

pub(crate) mod shape_list_components;

pub(crate) mod shape_list_configuration_history;

pub(crate) mod shape_list_log_pattern_sets;

pub(crate) mod shape_list_log_patterns;

pub(crate) mod shape_list_problems;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_application;

pub(crate) mod shape_update_component;

pub(crate) mod shape_update_component_configuration;

pub(crate) mod shape_update_log_pattern;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_bad_request_exception;

pub(crate) mod shape_create_application_input;

pub(crate) mod shape_create_component_input;

pub(crate) mod shape_create_log_pattern_input;

pub(crate) mod shape_delete_application_input;

pub(crate) mod shape_delete_component_input;

pub(crate) mod shape_delete_log_pattern_input;

pub(crate) mod shape_describe_application_input;

pub(crate) mod shape_describe_component_configuration_input;

pub(crate) mod shape_describe_component_configuration_recommendation_input;

pub(crate) mod shape_describe_component_input;

pub(crate) mod shape_describe_log_pattern_input;

pub(crate) mod shape_describe_observation_input;

pub(crate) mod shape_describe_problem_input;

pub(crate) mod shape_describe_problem_observations_input;

pub(crate) mod shape_internal_server_exception;

pub(crate) mod shape_list_applications_input;

pub(crate) mod shape_list_components_input;

pub(crate) mod shape_list_configuration_history_input;

pub(crate) mod shape_list_log_pattern_sets_input;

pub(crate) mod shape_list_log_patterns_input;

pub(crate) mod shape_list_problems_input;

pub(crate) mod shape_list_tags_for_resource_input;

pub(crate) mod shape_resource_in_use_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_tags_already_exist_exception;

pub(crate) mod shape_too_many_tags_exception;

pub(crate) mod shape_untag_resource_input;

pub(crate) mod shape_update_application_input;

pub(crate) mod shape_update_component_configuration_input;

pub(crate) mod shape_update_component_input;

pub(crate) mod shape_update_log_pattern_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_application_component;

pub(crate) mod shape_application_component_list;

pub(crate) mod shape_application_info;

pub(crate) mod shape_application_info_list;

pub(crate) mod shape_configuration_event_list;

pub(crate) mod shape_log_pattern;

pub(crate) mod shape_log_pattern_list;

pub(crate) mod shape_log_pattern_set_list;

pub(crate) mod shape_observation;

pub(crate) mod shape_problem;

pub(crate) mod shape_problem_list;

pub(crate) mod shape_related_observations;

pub(crate) mod shape_resource_list;

pub(crate) mod shape_tag;

pub(crate) mod shape_tag_list;

pub(crate) mod shape_configuration_event;

pub(crate) mod shape_detected_workload;

pub(crate) mod shape_feedback;

pub(crate) mod shape_observation_list;

pub(crate) mod shape_workload_meta_data;
