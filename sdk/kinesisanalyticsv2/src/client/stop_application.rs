// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`StopApplication`](crate::operation::stop_application::builders::StopApplicationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::operation::stop_application::builders::StopApplicationFluentBuilder::application_name) / [`set_application_name(Option<String>)`](crate::operation::stop_application::builders::StopApplicationFluentBuilder::set_application_name): <p>The name of the running application to stop.</p>
    ///   - [`force(bool)`](crate::operation::stop_application::builders::StopApplicationFluentBuilder::force) / [`set_force(Option<bool>)`](crate::operation::stop_application::builders::StopApplicationFluentBuilder::set_force): <p>Set to <code>true</code> to force the application to stop. If you set <code>Force</code> to <code>true</code>, Kinesis Data Analytics stops the application without taking a snapshot. </p> <note>   <p>Force-stopping your application may lead to data loss or duplication. To prevent data loss or duplicate processing of data during application restarts, we recommend you to take frequent snapshots of your application.</p>  </note>  <p>You can only force stop a Flink-based Kinesis Data Analytics application. You can't force stop a SQL-based Kinesis Data Analytics application.</p>  <p>The application must be in the <code>STARTING</code>, <code>UPDATING</code>, <code>STOPPING</code>, <code>AUTOSCALING</code>, or <code>RUNNING</code> status. </p>
    /// - On success, responds with [`StopApplicationOutput`](crate::operation::stop_application::StopApplicationOutput)
    /// - On failure, responds with [`SdkError<StopApplicationError>`](crate::operation::stop_application::StopApplicationError)
    pub fn stop_application(
        &self,
    ) -> crate::operation::stop_application::builders::StopApplicationFluentBuilder {
        crate::operation::stop_application::builders::StopApplicationFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
