// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateApplication`](crate::client::fluent_builders::CreateApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::CreateApplication::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::CreateApplication::set_application_name): <p>The name of your application (for example, <code>sample-app</code>).</p>
    ///   - [`application_description(impl Into<String>)`](crate::client::fluent_builders::CreateApplication::application_description) / [`set_application_description(Option<String>)`](crate::client::fluent_builders::CreateApplication::set_application_description): <p>A summary description of the application.</p>
    ///   - [`runtime_environment(RuntimeEnvironment)`](crate::client::fluent_builders::CreateApplication::runtime_environment) / [`set_runtime_environment(Option<RuntimeEnvironment>)`](crate::client::fluent_builders::CreateApplication::set_runtime_environment): <p>The runtime environment for the application.</p>
    ///   - [`service_execution_role(impl Into<String>)`](crate::client::fluent_builders::CreateApplication::service_execution_role) / [`set_service_execution_role(Option<String>)`](crate::client::fluent_builders::CreateApplication::set_service_execution_role): <p>The IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external resources.</p>
    ///   - [`application_configuration(ApplicationConfiguration)`](crate::client::fluent_builders::CreateApplication::application_configuration) / [`set_application_configuration(Option<ApplicationConfiguration>)`](crate::client::fluent_builders::CreateApplication::set_application_configuration): <p>Use this parameter to configure the application.</p>
    ///   - [`cloud_watch_logging_options(Vec<CloudWatchLoggingOption>)`](crate::client::fluent_builders::CreateApplication::cloud_watch_logging_options) / [`set_cloud_watch_logging_options(Option<Vec<CloudWatchLoggingOption>>)`](crate::client::fluent_builders::CreateApplication::set_cloud_watch_logging_options): <p>Use this parameter to configure an Amazon CloudWatch log stream to monitor application configuration errors. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateApplication::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateApplication::set_tags): <p>A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-tagging.html">Using Tagging</a>.</p>
    ///   - [`application_mode(ApplicationMode)`](crate::client::fluent_builders::CreateApplication::application_mode) / [`set_application_mode(Option<ApplicationMode>)`](crate::client::fluent_builders::CreateApplication::set_application_mode): <p>Use the <code>STREAMING</code> mode to create a Kinesis Data Analytics For Flink application. To create a Kinesis Data Analytics Studio notebook, use the <code>INTERACTIVE</code> mode.</p>
    /// - On success, responds with [`CreateApplicationOutput`](crate::output::CreateApplicationOutput) with field(s):
    ///   - [`application_detail(Option<ApplicationDetail>)`](crate::output::CreateApplicationOutput::application_detail): <p>In response to your <code>CreateApplication</code> request, Kinesis Data Analytics returns a response with details of the application it created.</p>
    /// - On failure, responds with [`SdkError<CreateApplicationError>`](crate::error::CreateApplicationError)
    pub fn create_application(&self) -> crate::client::fluent_builders::CreateApplication {
        crate::client::fluent_builders::CreateApplication::new(self.handle.clone())
    }
}
