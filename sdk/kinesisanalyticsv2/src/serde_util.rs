// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_application_output_correct_errors(
    mut builder: crate::operation::create_application::builders::CreateApplicationOutputBuilder,
) -> crate::operation::create_application::builders::CreateApplicationOutputBuilder {
    if builder.application_detail.is_none() {
        builder.application_detail = {
            let builder = crate::types::builders::ApplicationDetailBuilder::default();
            crate::serde_util::application_detail_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_application_output_correct_errors(
    mut builder: crate::operation::describe_application::builders::DescribeApplicationOutputBuilder,
) -> crate::operation::describe_application::builders::DescribeApplicationOutputBuilder {
    if builder.application_detail.is_none() {
        builder.application_detail = {
            let builder = crate::types::builders::ApplicationDetailBuilder::default();
            crate::serde_util::application_detail_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_application_snapshot_output_correct_errors(
    mut builder: crate::operation::describe_application_snapshot::builders::DescribeApplicationSnapshotOutputBuilder,
) -> crate::operation::describe_application_snapshot::builders::DescribeApplicationSnapshotOutputBuilder {
    if builder.snapshot_details.is_none() {
        builder.snapshot_details = {
            let builder = crate::types::builders::SnapshotDetailsBuilder::default();
            crate::serde_util::snapshot_details_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_applications_output_correct_errors(
    mut builder: crate::operation::list_applications::builders::ListApplicationsOutputBuilder,
) -> crate::operation::list_applications::builders::ListApplicationsOutputBuilder {
    if builder.application_summaries.is_none() {
        builder.application_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn rollback_application_output_correct_errors(
    mut builder: crate::operation::rollback_application::builders::RollbackApplicationOutputBuilder,
) -> crate::operation::rollback_application::builders::RollbackApplicationOutputBuilder {
    if builder.application_detail.is_none() {
        builder.application_detail = {
            let builder = crate::types::builders::ApplicationDetailBuilder::default();
            crate::serde_util::application_detail_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_application_output_correct_errors(
    mut builder: crate::operation::update_application::builders::UpdateApplicationOutputBuilder,
) -> crate::operation::update_application::builders::UpdateApplicationOutputBuilder {
    if builder.application_detail.is_none() {
        builder.application_detail = {
            let builder = crate::types::builders::ApplicationDetailBuilder::default();
            crate::serde_util::application_detail_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn application_detail_correct_errors(
    mut builder: crate::types::builders::ApplicationDetailBuilder,
) -> crate::types::builders::ApplicationDetailBuilder {
    if builder.application_arn.is_none() {
        builder.application_arn = Some(Default::default())
    }
    if builder.application_name.is_none() {
        builder.application_name = Some(Default::default())
    }
    if builder.runtime_environment.is_none() {
        builder.runtime_environment = "no value was set".parse::<crate::types::RuntimeEnvironment>().ok()
    }
    if builder.application_status.is_none() {
        builder.application_status = "no value was set".parse::<crate::types::ApplicationStatus>().ok()
    }
    if builder.application_version_id.is_none() {
        builder.application_version_id = Some(Default::default())
    }
    builder
}

pub(crate) fn snapshot_details_correct_errors(
    mut builder: crate::types::builders::SnapshotDetailsBuilder,
) -> crate::types::builders::SnapshotDetailsBuilder {
    if builder.snapshot_name.is_none() {
        builder.snapshot_name = Some(Default::default())
    }
    if builder.snapshot_status.is_none() {
        builder.snapshot_status = "no value was set".parse::<crate::types::SnapshotStatus>().ok()
    }
    if builder.application_version_id.is_none() {
        builder.application_version_id = Some(Default::default())
    }
    builder
}

pub(crate) fn application_maintenance_configuration_description_correct_errors(
    mut builder: crate::types::builders::ApplicationMaintenanceConfigurationDescriptionBuilder,
) -> crate::types::builders::ApplicationMaintenanceConfigurationDescriptionBuilder {
    if builder.application_maintenance_window_start_time.is_none() {
        builder.application_maintenance_window_start_time = Some(Default::default())
    }
    if builder.application_maintenance_window_end_time.is_none() {
        builder.application_maintenance_window_end_time = Some(Default::default())
    }
    builder
}

pub(crate) fn source_schema_correct_errors(mut builder: crate::types::builders::SourceSchemaBuilder) -> crate::types::builders::SourceSchemaBuilder {
    if builder.record_format.is_none() {
        builder.record_format = {
            let builder = crate::types::builders::RecordFormatBuilder::default();
            crate::serde_util::record_format_correct_errors(builder).build().ok()
        }
    }
    if builder.record_columns.is_none() {
        builder.record_columns = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_configuration_description_correct_errors(
    mut builder: crate::types::builders::VpcConfigurationDescriptionBuilder,
) -> crate::types::builders::VpcConfigurationDescriptionBuilder {
    if builder.vpc_configuration_id.is_none() {
        builder.vpc_configuration_id = Some(Default::default())
    }
    if builder.vpc_id.is_none() {
        builder.vpc_id = Some(Default::default())
    }
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn application_summary_correct_errors(
    mut builder: crate::types::builders::ApplicationSummaryBuilder,
) -> crate::types::builders::ApplicationSummaryBuilder {
    if builder.application_name.is_none() {
        builder.application_name = Some(Default::default())
    }
    if builder.application_arn.is_none() {
        builder.application_arn = Some(Default::default())
    }
    if builder.application_status.is_none() {
        builder.application_status = "no value was set".parse::<crate::types::ApplicationStatus>().ok()
    }
    if builder.application_version_id.is_none() {
        builder.application_version_id = Some(Default::default())
    }
    if builder.runtime_environment.is_none() {
        builder.runtime_environment = "no value was set".parse::<crate::types::RuntimeEnvironment>().ok()
    }
    builder
}

pub(crate) fn application_version_summary_correct_errors(
    mut builder: crate::types::builders::ApplicationVersionSummaryBuilder,
) -> crate::types::builders::ApplicationVersionSummaryBuilder {
    if builder.application_version_id.is_none() {
        builder.application_version_id = Some(Default::default())
    }
    if builder.application_status.is_none() {
        builder.application_status = "no value was set".parse::<crate::types::ApplicationStatus>().ok()
    }
    builder
}

pub(crate) fn cloud_watch_logging_option_description_correct_errors(
    mut builder: crate::types::builders::CloudWatchLoggingOptionDescriptionBuilder,
) -> crate::types::builders::CloudWatchLoggingOptionDescriptionBuilder {
    if builder.log_stream_arn.is_none() {
        builder.log_stream_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn input_lambda_processor_description_correct_errors(
    mut builder: crate::types::builders::InputLambdaProcessorDescriptionBuilder,
) -> crate::types::builders::InputLambdaProcessorDescriptionBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn record_format_correct_errors(mut builder: crate::types::builders::RecordFormatBuilder) -> crate::types::builders::RecordFormatBuilder {
    if builder.record_format_type.is_none() {
        builder.record_format_type = "no value was set".parse::<crate::types::RecordFormatType>().ok()
    }
    builder
}

pub(crate) fn reference_data_source_description_correct_errors(
    mut builder: crate::types::builders::ReferenceDataSourceDescriptionBuilder,
) -> crate::types::builders::ReferenceDataSourceDescriptionBuilder {
    if builder.reference_id.is_none() {
        builder.reference_id = Some(Default::default())
    }
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.s3_reference_data_source_description.is_none() {
        builder.s3_reference_data_source_description = {
            let builder = crate::types::builders::S3ReferenceDataSourceDescriptionBuilder::default();
            crate::serde_util::s3_reference_data_source_description_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn application_code_configuration_description_correct_errors(
    mut builder: crate::types::builders::ApplicationCodeConfigurationDescriptionBuilder,
) -> crate::types::builders::ApplicationCodeConfigurationDescriptionBuilder {
    if builder.code_content_type.is_none() {
        builder.code_content_type = "no value was set".parse::<crate::types::CodeContentType>().ok()
    }
    builder
}

pub(crate) fn application_snapshot_configuration_description_correct_errors(
    mut builder: crate::types::builders::ApplicationSnapshotConfigurationDescriptionBuilder,
) -> crate::types::builders::ApplicationSnapshotConfigurationDescriptionBuilder {
    if builder.snapshots_enabled.is_none() {
        builder.snapshots_enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn destination_schema_correct_errors(
    mut builder: crate::types::builders::DestinationSchemaBuilder,
) -> crate::types::builders::DestinationSchemaBuilder {
    if builder.record_format_type.is_none() {
        builder.record_format_type = "no value was set".parse::<crate::types::RecordFormatType>().ok()
    }
    builder
}

pub(crate) fn kinesis_firehose_input_description_correct_errors(
    mut builder: crate::types::builders::KinesisFirehoseInputDescriptionBuilder,
) -> crate::types::builders::KinesisFirehoseInputDescriptionBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn kinesis_firehose_output_description_correct_errors(
    mut builder: crate::types::builders::KinesisFirehoseOutputDescriptionBuilder,
) -> crate::types::builders::KinesisFirehoseOutputDescriptionBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn kinesis_streams_input_description_correct_errors(
    mut builder: crate::types::builders::KinesisStreamsInputDescriptionBuilder,
) -> crate::types::builders::KinesisStreamsInputDescriptionBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn kinesis_streams_output_description_correct_errors(
    mut builder: crate::types::builders::KinesisStreamsOutputDescriptionBuilder,
) -> crate::types::builders::KinesisStreamsOutputDescriptionBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn lambda_output_description_correct_errors(
    mut builder: crate::types::builders::LambdaOutputDescriptionBuilder,
) -> crate::types::builders::LambdaOutputDescriptionBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn record_column_correct_errors(mut builder: crate::types::builders::RecordColumnBuilder) -> crate::types::builders::RecordColumnBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.sql_type.is_none() {
        builder.sql_type = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_reference_data_source_description_correct_errors(
    mut builder: crate::types::builders::S3ReferenceDataSourceDescriptionBuilder,
) -> crate::types::builders::S3ReferenceDataSourceDescriptionBuilder {
    if builder.bucket_arn.is_none() {
        builder.bucket_arn = Some(Default::default())
    }
    if builder.file_key.is_none() {
        builder.file_key = Some(Default::default())
    }
    builder
}

pub(crate) fn zeppelin_application_configuration_description_correct_errors(
    mut builder: crate::types::builders::ZeppelinApplicationConfigurationDescriptionBuilder,
) -> crate::types::builders::ZeppelinApplicationConfigurationDescriptionBuilder {
    if builder.monitoring_configuration_description.is_none() {
        builder.monitoring_configuration_description = {
            let builder = crate::types::builders::ZeppelinMonitoringConfigurationDescriptionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn application_restore_configuration_correct_errors(
    mut builder: crate::types::builders::ApplicationRestoreConfigurationBuilder,
) -> crate::types::builders::ApplicationRestoreConfigurationBuilder {
    if builder.application_restore_type.is_none() {
        builder.application_restore_type = "no value was set".parse::<crate::types::ApplicationRestoreType>().ok()
    }
    builder
}

pub(crate) fn catalog_configuration_description_correct_errors(
    mut builder: crate::types::builders::CatalogConfigurationDescriptionBuilder,
) -> crate::types::builders::CatalogConfigurationDescriptionBuilder {
    if builder.glue_data_catalog_configuration_description.is_none() {
        builder.glue_data_catalog_configuration_description = {
            let builder = crate::types::builders::GlueDataCatalogConfigurationDescriptionBuilder::default();
            crate::serde_util::glue_data_catalog_configuration_description_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn csv_mapping_parameters_correct_errors(
    mut builder: crate::types::builders::CsvMappingParametersBuilder,
) -> crate::types::builders::CsvMappingParametersBuilder {
    if builder.record_row_delimiter.is_none() {
        builder.record_row_delimiter = Some(Default::default())
    }
    if builder.record_column_delimiter.is_none() {
        builder.record_column_delimiter = Some(Default::default())
    }
    builder
}

pub(crate) fn deploy_as_application_configuration_description_correct_errors(
    mut builder: crate::types::builders::DeployAsApplicationConfigurationDescriptionBuilder,
) -> crate::types::builders::DeployAsApplicationConfigurationDescriptionBuilder {
    if builder.s3_content_location_description.is_none() {
        builder.s3_content_location_description = {
            let builder = crate::types::builders::S3ContentBaseLocationDescriptionBuilder::default();
            crate::serde_util::s3_content_base_location_description_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn json_mapping_parameters_correct_errors(
    mut builder: crate::types::builders::JsonMappingParametersBuilder,
) -> crate::types::builders::JsonMappingParametersBuilder {
    if builder.record_row_path.is_none() {
        builder.record_row_path = Some(Default::default())
    }
    builder
}

pub(crate) fn glue_data_catalog_configuration_description_correct_errors(
    mut builder: crate::types::builders::GlueDataCatalogConfigurationDescriptionBuilder,
) -> crate::types::builders::GlueDataCatalogConfigurationDescriptionBuilder {
    if builder.database_arn.is_none() {
        builder.database_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn property_group_correct_errors(
    mut builder: crate::types::builders::PropertyGroupBuilder,
) -> crate::types::builders::PropertyGroupBuilder {
    if builder.property_group_id.is_none() {
        builder.property_group_id = Some(Default::default())
    }
    if builder.property_map.is_none() {
        builder.property_map = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_application_code_location_description_correct_errors(
    mut builder: crate::types::builders::S3ApplicationCodeLocationDescriptionBuilder,
) -> crate::types::builders::S3ApplicationCodeLocationDescriptionBuilder {
    if builder.bucket_arn.is_none() {
        builder.bucket_arn = Some(Default::default())
    }
    if builder.file_key.is_none() {
        builder.file_key = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_content_base_location_description_correct_errors(
    mut builder: crate::types::builders::S3ContentBaseLocationDescriptionBuilder,
) -> crate::types::builders::S3ContentBaseLocationDescriptionBuilder {
    if builder.bucket_arn.is_none() {
        builder.bucket_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn maven_reference_correct_errors(
    mut builder: crate::types::builders::MavenReferenceBuilder,
) -> crate::types::builders::MavenReferenceBuilder {
    if builder.group_id.is_none() {
        builder.group_id = Some(Default::default())
    }
    if builder.artifact_id.is_none() {
        builder.artifact_id = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_content_location_correct_errors(
    mut builder: crate::types::builders::S3ContentLocationBuilder,
) -> crate::types::builders::S3ContentLocationBuilder {
    if builder.bucket_arn.is_none() {
        builder.bucket_arn = Some(Default::default())
    }
    if builder.file_key.is_none() {
        builder.file_key = Some(Default::default())
    }
    builder
}
