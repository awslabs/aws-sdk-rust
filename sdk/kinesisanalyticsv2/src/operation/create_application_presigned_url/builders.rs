// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_application_presigned_url::_create_application_presigned_url_output::CreateApplicationPresignedUrlOutputBuilder;

pub use crate::operation::create_application_presigned_url::_create_application_presigned_url_input::CreateApplicationPresignedUrlInputBuilder;

/// Fluent builder constructing a request to `CreateApplicationPresignedUrl`.
///
/// <p>Creates and returns a URL that you can use to connect to an application's extension.</p>
/// <p>The IAM role or user used to call this API defines the permissions to access the extension. After the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request that attempts to connect to the extension. </p>
/// <p>You control the amount of time that the URL will be valid using the <code>SessionExpirationDurationInSeconds</code> parameter. If you do not provide this parameter, the returned URL is valid for twelve hours.</p> <note>
/// <p>The URL that you get from a call to CreateApplicationPresignedUrl must be used within 3 minutes to be valid. If you first try to use the URL after the 3-minute limit expires, the service returns an HTTP 403 Forbidden error.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateApplicationPresignedUrlFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_application_presigned_url::builders::CreateApplicationPresignedUrlInputBuilder
            }
impl CreateApplicationPresignedUrlFluentBuilder {
    /// Creates a new `CreateApplicationPresignedUrl`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_application_presigned_url::CreateApplicationPresignedUrl,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_application_presigned_url::CreateApplicationPresignedUrlError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_application_presigned_url::CreateApplicationPresignedUrlOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_application_presigned_url::CreateApplicationPresignedUrlError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the application.</p>
    pub fn application_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.application_name(input.into());
        self
    }
    /// <p>The name of the application.</p>
    pub fn set_application_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_application_name(input);
        self
    }
    /// <p>The type of the extension for which to create and return a URL. Currently, the only valid extension URL type is <code>FLINK_DASHBOARD_URL</code>. </p>
    pub fn url_type(mut self, input: crate::types::UrlType) -> Self {
        self.inner = self.inner.url_type(input);
        self
    }
    /// <p>The type of the extension for which to create and return a URL. Currently, the only valid extension URL type is <code>FLINK_DASHBOARD_URL</code>. </p>
    pub fn set_url_type(mut self, input: std::option::Option<crate::types::UrlType>) -> Self {
        self.inner = self.inner.set_url_type(input);
        self
    }
    /// <p>The duration in seconds for which the returned URL will be valid.</p>
    pub fn session_expiration_duration_in_seconds(mut self, input: i64) -> Self {
        self.inner = self.inner.session_expiration_duration_in_seconds(input);
        self
    }
    /// <p>The duration in seconds for which the returned URL will be valid.</p>
    pub fn set_session_expiration_duration_in_seconds(
        mut self,
        input: std::option::Option<i64>,
    ) -> Self {
        self.inner = self.inner.set_session_expiration_duration_in_seconds(input);
        self
    }
}
