// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::discover_input_schema::_discover_input_schema_output::DiscoverInputSchemaOutputBuilder;

pub use crate::operation::discover_input_schema::_discover_input_schema_input::DiscoverInputSchemaInputBuilder;

/// Fluent builder constructing a request to `DiscoverInputSchema`.
///
/// <p>Infers a schema for a SQL-based Kinesis Data Analytics application by evaluating sample records on the specified streaming source (Kinesis data stream or Kinesis Data Firehose delivery stream) or Amazon S3 object. In the response, the operation returns the inferred schema and also the sample records that the operation used to infer the schema.</p>
/// <p> You can use the inferred schema when configuring a streaming source for your application. When you create an application using the Kinesis Data Analytics console, the console uses this operation to infer a schema and show it in the console user interface. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DiscoverInputSchemaFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::discover_input_schema::builders::DiscoverInputSchemaInputBuilder,
}
impl DiscoverInputSchemaFluentBuilder {
    /// Creates a new `DiscoverInputSchema`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::discover_input_schema::DiscoverInputSchema,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::discover_input_schema::DiscoverInputSchemaError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::discover_input_schema::DiscoverInputSchemaOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::discover_input_schema::DiscoverInputSchemaError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the streaming source.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the streaming source.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// <p>The ARN of the role that is used to access the streaming source.</p>
    pub fn service_execution_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.service_execution_role(input.into());
        self
    }
    /// <p>The ARN of the role that is used to access the streaming source.</p>
    pub fn set_service_execution_role(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_service_execution_role(input);
        self
    }
    /// <p>The point at which you want Kinesis Data Analytics to start reading records from the specified streaming source discovery purposes.</p>
    pub fn input_starting_position_configuration(
        mut self,
        input: crate::types::InputStartingPositionConfiguration,
    ) -> Self {
        self.inner = self.inner.input_starting_position_configuration(input);
        self
    }
    /// <p>The point at which you want Kinesis Data Analytics to start reading records from the specified streaming source discovery purposes.</p>
    pub fn set_input_starting_position_configuration(
        mut self,
        input: std::option::Option<crate::types::InputStartingPositionConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_input_starting_position_configuration(input);
        self
    }
    /// <p>Specify this parameter to discover a schema from data in an Amazon S3 object.</p>
    pub fn s3_configuration(mut self, input: crate::types::S3Configuration) -> Self {
        self.inner = self.inner.s3_configuration(input);
        self
    }
    /// <p>Specify this parameter to discover a schema from data in an Amazon S3 object.</p>
    pub fn set_s3_configuration(
        mut self,
        input: std::option::Option<crate::types::S3Configuration>,
    ) -> Self {
        self.inner = self.inner.set_s3_configuration(input);
        self
    }
    /// <p>The <code>InputProcessingConfiguration</code> to use to preprocess the records before discovering the schema of the records.</p>
    pub fn input_processing_configuration(
        mut self,
        input: crate::types::InputProcessingConfiguration,
    ) -> Self {
        self.inner = self.inner.input_processing_configuration(input);
        self
    }
    /// <p>The <code>InputProcessingConfiguration</code> to use to preprocess the records before discovering the schema of the records.</p>
    pub fn set_input_processing_configuration(
        mut self,
        input: std::option::Option<crate::types::InputProcessingConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_input_processing_configuration(input);
        self
    }
}
