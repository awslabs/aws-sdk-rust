// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddApplicationOutputInput {
    /// <p>The name of the application to which you want to add the output configuration.</p>
    #[doc(hidden)]
    pub application_name: std::option::Option<std::string::String>,
    /// <p>The version of the application to which you want to add the output configuration. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    #[doc(hidden)]
    pub current_application_version_id: std::option::Option<i64>,
    /// <p>An array of objects, each describing one output configuration. In the output configuration, you specify the name of an in-application stream, a destination (that is, a Kinesis data stream, a Kinesis Data Firehose delivery stream, or an Amazon Lambda function), and record the formation to use when writing to the destination.</p>
    #[doc(hidden)]
    pub output: std::option::Option<crate::types::Output>,
}
impl AddApplicationOutputInput {
    /// <p>The name of the application to which you want to add the output configuration.</p>
    pub fn application_name(&self) -> std::option::Option<&str> {
        self.application_name.as_deref()
    }
    /// <p>The version of the application to which you want to add the output configuration. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    pub fn current_application_version_id(&self) -> std::option::Option<i64> {
        self.current_application_version_id
    }
    /// <p>An array of objects, each describing one output configuration. In the output configuration, you specify the name of an in-application stream, a destination (that is, a Kinesis data stream, a Kinesis Data Firehose delivery stream, or an Amazon Lambda function), and record the formation to use when writing to the destination.</p>
    pub fn output(&self) -> std::option::Option<&crate::types::Output> {
        self.output.as_ref()
    }
}
impl AddApplicationOutputInput {
    /// Creates a new builder-style object to manufacture [`AddApplicationOutputInput`](crate::operation::add_application_output::AddApplicationOutputInput).
    pub fn builder(
    ) -> crate::operation::add_application_output::builders::AddApplicationOutputInputBuilder {
        crate::operation::add_application_output::builders::AddApplicationOutputInputBuilder::default()
    }
}

/// A builder for [`AddApplicationOutputInput`](crate::operation::add_application_output::AddApplicationOutputInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AddApplicationOutputInputBuilder {
    pub(crate) application_name: std::option::Option<std::string::String>,
    pub(crate) current_application_version_id: std::option::Option<i64>,
    pub(crate) output: std::option::Option<crate::types::Output>,
}
impl AddApplicationOutputInputBuilder {
    /// <p>The name of the application to which you want to add the output configuration.</p>
    pub fn application_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_name = Some(input.into());
        self
    }
    /// <p>The name of the application to which you want to add the output configuration.</p>
    pub fn set_application_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_name = input;
        self
    }
    /// <p>The version of the application to which you want to add the output configuration. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    pub fn current_application_version_id(mut self, input: i64) -> Self {
        self.current_application_version_id = Some(input);
        self
    }
    /// <p>The version of the application to which you want to add the output configuration. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    pub fn set_current_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
        self.current_application_version_id = input;
        self
    }
    /// <p>An array of objects, each describing one output configuration. In the output configuration, you specify the name of an in-application stream, a destination (that is, a Kinesis data stream, a Kinesis Data Firehose delivery stream, or an Amazon Lambda function), and record the formation to use when writing to the destination.</p>
    pub fn output(mut self, input: crate::types::Output) -> Self {
        self.output = Some(input);
        self
    }
    /// <p>An array of objects, each describing one output configuration. In the output configuration, you specify the name of an in-application stream, a destination (that is, a Kinesis data stream, a Kinesis Data Firehose delivery stream, or an Amazon Lambda function), and record the formation to use when writing to the destination.</p>
    pub fn set_output(mut self, input: std::option::Option<crate::types::Output>) -> Self {
        self.output = input;
        self
    }
    /// Consumes the builder and constructs a [`AddApplicationOutputInput`](crate::operation::add_application_output::AddApplicationOutputInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::add_application_output::AddApplicationOutputInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::add_application_output::AddApplicationOutputInput {
                application_name: self.application_name,
                current_application_version_id: self.current_application_version_id,
                output: self.output,
            },
        )
    }
}
