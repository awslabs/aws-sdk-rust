// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteApplicationInputProcessingConfigurationInput {
    /// <p>The name of the application.</p>
    #[doc(hidden)]
    pub application_name: std::option::Option<std::string::String>,
    /// <p>The application version. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    #[doc(hidden)]
    pub current_application_version_id: std::option::Option<i64>,
    /// <p>The ID of the input configuration from which to delete the input processing configuration. You can get a list of the input IDs for an application by using the <code>DescribeApplication</code> operation.</p>
    #[doc(hidden)]
    pub input_id: std::option::Option<std::string::String>,
}
impl DeleteApplicationInputProcessingConfigurationInput {
    /// <p>The name of the application.</p>
    pub fn application_name(&self) -> std::option::Option<&str> {
        self.application_name.as_deref()
    }
    /// <p>The application version. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    pub fn current_application_version_id(&self) -> std::option::Option<i64> {
        self.current_application_version_id
    }
    /// <p>The ID of the input configuration from which to delete the input processing configuration. You can get a list of the input IDs for an application by using the <code>DescribeApplication</code> operation.</p>
    pub fn input_id(&self) -> std::option::Option<&str> {
        self.input_id.as_deref()
    }
}
impl DeleteApplicationInputProcessingConfigurationInput {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationInputProcessingConfigurationInput`](crate::operation::delete_application_input_processing_configuration::DeleteApplicationInputProcessingConfigurationInput).
    pub fn builder() -> crate::operation::delete_application_input_processing_configuration::builders::DeleteApplicationInputProcessingConfigurationInputBuilder{
        crate::operation::delete_application_input_processing_configuration::builders::DeleteApplicationInputProcessingConfigurationInputBuilder::default()
    }
}

/// A builder for [`DeleteApplicationInputProcessingConfigurationInput`](crate::operation::delete_application_input_processing_configuration::DeleteApplicationInputProcessingConfigurationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteApplicationInputProcessingConfigurationInputBuilder {
    pub(crate) application_name: std::option::Option<std::string::String>,
    pub(crate) current_application_version_id: std::option::Option<i64>,
    pub(crate) input_id: std::option::Option<std::string::String>,
}
impl DeleteApplicationInputProcessingConfigurationInputBuilder {
    /// <p>The name of the application.</p>
    pub fn application_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_name = Some(input.into());
        self
    }
    /// <p>The name of the application.</p>
    pub fn set_application_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_name = input;
        self
    }
    /// <p>The application version. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    pub fn current_application_version_id(mut self, input: i64) -> Self {
        self.current_application_version_id = Some(input);
        self
    }
    /// <p>The application version. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    pub fn set_current_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
        self.current_application_version_id = input;
        self
    }
    /// <p>The ID of the input configuration from which to delete the input processing configuration. You can get a list of the input IDs for an application by using the <code>DescribeApplication</code> operation.</p>
    pub fn input_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.input_id = Some(input.into());
        self
    }
    /// <p>The ID of the input configuration from which to delete the input processing configuration. You can get a list of the input IDs for an application by using the <code>DescribeApplication</code> operation.</p>
    pub fn set_input_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.input_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteApplicationInputProcessingConfigurationInput`](crate::operation::delete_application_input_processing_configuration::DeleteApplicationInputProcessingConfigurationInput).
    pub fn build(self) -> Result<crate::operation::delete_application_input_processing_configuration::DeleteApplicationInputProcessingConfigurationInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::delete_application_input_processing_configuration::DeleteApplicationInputProcessingConfigurationInput {
                application_name: self.application_name
                ,
                current_application_version_id: self.current_application_version_id
                ,
                input_id: self.input_id
                ,
            }
        )
    }
}
