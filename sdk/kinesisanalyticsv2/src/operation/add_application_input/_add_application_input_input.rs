// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddApplicationInputInput {
    /// <p>The name of your existing application to which you want to add the streaming source.</p>
    #[doc(hidden)]
    pub application_name: std::option::Option<std::string::String>,
    /// <p>The current version of your application. You must provide the <code>ApplicationVersionID</code> or the <code>ConditionalToken</code>.You can use the <code>DescribeApplication</code> operation to find the current application version.</p>
    #[doc(hidden)]
    pub current_application_version_id: std::option::Option<i64>,
    /// <p>The <code>Input</code> to add.</p>
    #[doc(hidden)]
    pub input: std::option::Option<crate::types::Input>,
}
impl AddApplicationInputInput {
    /// <p>The name of your existing application to which you want to add the streaming source.</p>
    pub fn application_name(&self) -> std::option::Option<&str> {
        self.application_name.as_deref()
    }
    /// <p>The current version of your application. You must provide the <code>ApplicationVersionID</code> or the <code>ConditionalToken</code>.You can use the <code>DescribeApplication</code> operation to find the current application version.</p>
    pub fn current_application_version_id(&self) -> std::option::Option<i64> {
        self.current_application_version_id
    }
    /// <p>The <code>Input</code> to add.</p>
    pub fn input(&self) -> std::option::Option<&crate::types::Input> {
        self.input.as_ref()
    }
}
impl AddApplicationInputInput {
    /// Creates a new builder-style object to manufacture [`AddApplicationInputInput`](crate::operation::add_application_input::AddApplicationInputInput).
    pub fn builder(
    ) -> crate::operation::add_application_input::builders::AddApplicationInputInputBuilder {
        crate::operation::add_application_input::builders::AddApplicationInputInputBuilder::default(
        )
    }
}

/// A builder for [`AddApplicationInputInput`](crate::operation::add_application_input::AddApplicationInputInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AddApplicationInputInputBuilder {
    pub(crate) application_name: std::option::Option<std::string::String>,
    pub(crate) current_application_version_id: std::option::Option<i64>,
    pub(crate) input: std::option::Option<crate::types::Input>,
}
impl AddApplicationInputInputBuilder {
    /// <p>The name of your existing application to which you want to add the streaming source.</p>
    pub fn application_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_name = Some(input.into());
        self
    }
    /// <p>The name of your existing application to which you want to add the streaming source.</p>
    pub fn set_application_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_name = input;
        self
    }
    /// <p>The current version of your application. You must provide the <code>ApplicationVersionID</code> or the <code>ConditionalToken</code>.You can use the <code>DescribeApplication</code> operation to find the current application version.</p>
    pub fn current_application_version_id(mut self, input: i64) -> Self {
        self.current_application_version_id = Some(input);
        self
    }
    /// <p>The current version of your application. You must provide the <code>ApplicationVersionID</code> or the <code>ConditionalToken</code>.You can use the <code>DescribeApplication</code> operation to find the current application version.</p>
    pub fn set_current_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
        self.current_application_version_id = input;
        self
    }
    /// <p>The <code>Input</code> to add.</p>
    pub fn input(mut self, input: crate::types::Input) -> Self {
        self.input = Some(input);
        self
    }
    /// <p>The <code>Input</code> to add.</p>
    pub fn set_input(mut self, input: std::option::Option<crate::types::Input>) -> Self {
        self.input = input;
        self
    }
    /// Consumes the builder and constructs a [`AddApplicationInputInput`](crate::operation::add_application_input::AddApplicationInputInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::add_application_input::AddApplicationInputInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::add_application_input::AddApplicationInputInput {
                application_name: self.application_name,
                current_application_version_id: self.current_application_version_id,
                input: self.input,
            },
        )
    }
}
