// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteApplicationOutputInput {
    /// <p>The application name.</p>
    #[doc(hidden)]
    pub application_name: std::option::Option<std::string::String>,
    /// <p>The application version. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    #[doc(hidden)]
    pub current_application_version_id: std::option::Option<i64>,
    /// <p>The ID of the configuration to delete. Each output configuration that is added to the application (either when the application is created or later) using the <code>AddApplicationOutput</code> operation has a unique ID. You need to provide the ID to uniquely identify the output configuration that you want to delete from the application configuration. You can use the <code>DescribeApplication</code> operation to get the specific <code>OutputId</code>. </p>
    #[doc(hidden)]
    pub output_id: std::option::Option<std::string::String>,
}
impl DeleteApplicationOutputInput {
    /// <p>The application name.</p>
    pub fn application_name(&self) -> std::option::Option<&str> {
        self.application_name.as_deref()
    }
    /// <p>The application version. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    pub fn current_application_version_id(&self) -> std::option::Option<i64> {
        self.current_application_version_id
    }
    /// <p>The ID of the configuration to delete. Each output configuration that is added to the application (either when the application is created or later) using the <code>AddApplicationOutput</code> operation has a unique ID. You need to provide the ID to uniquely identify the output configuration that you want to delete from the application configuration. You can use the <code>DescribeApplication</code> operation to get the specific <code>OutputId</code>. </p>
    pub fn output_id(&self) -> std::option::Option<&str> {
        self.output_id.as_deref()
    }
}
impl DeleteApplicationOutputInput {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationOutputInput`](crate::operation::delete_application_output::DeleteApplicationOutputInput).
    pub fn builder(
    ) -> crate::operation::delete_application_output::builders::DeleteApplicationOutputInputBuilder
    {
        crate::operation::delete_application_output::builders::DeleteApplicationOutputInputBuilder::default()
    }
}

/// A builder for [`DeleteApplicationOutputInput`](crate::operation::delete_application_output::DeleteApplicationOutputInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteApplicationOutputInputBuilder {
    pub(crate) application_name: std::option::Option<std::string::String>,
    pub(crate) current_application_version_id: std::option::Option<i64>,
    pub(crate) output_id: std::option::Option<std::string::String>,
}
impl DeleteApplicationOutputInputBuilder {
    /// <p>The application name.</p>
    pub fn application_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_name = Some(input.into());
        self
    }
    /// <p>The application name.</p>
    pub fn set_application_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_name = input;
        self
    }
    /// <p>The application version. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    pub fn current_application_version_id(mut self, input: i64) -> Self {
        self.current_application_version_id = Some(input);
        self
    }
    /// <p>The application version. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    pub fn set_current_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
        self.current_application_version_id = input;
        self
    }
    /// <p>The ID of the configuration to delete. Each output configuration that is added to the application (either when the application is created or later) using the <code>AddApplicationOutput</code> operation has a unique ID. You need to provide the ID to uniquely identify the output configuration that you want to delete from the application configuration. You can use the <code>DescribeApplication</code> operation to get the specific <code>OutputId</code>. </p>
    pub fn output_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.output_id = Some(input.into());
        self
    }
    /// <p>The ID of the configuration to delete. Each output configuration that is added to the application (either when the application is created or later) using the <code>AddApplicationOutput</code> operation has a unique ID. You need to provide the ID to uniquely identify the output configuration that you want to delete from the application configuration. You can use the <code>DescribeApplication</code> operation to get the specific <code>OutputId</code>. </p>
    pub fn set_output_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.output_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteApplicationOutputInput`](crate::operation::delete_application_output::DeleteApplicationOutputInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_application_output::DeleteApplicationOutputInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::delete_application_output::DeleteApplicationOutputInput {
                application_name: self.application_name,
                current_application_version_id: self.current_application_version_id,
                output_id: self.output_id,
            },
        )
    }
}
