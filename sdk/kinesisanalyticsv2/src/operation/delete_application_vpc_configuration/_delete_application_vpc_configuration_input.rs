// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteApplicationVpcConfigurationInput {
    /// <p>The name of an existing application.</p>
    #[doc(hidden)]
    pub application_name: std::option::Option<std::string::String>,
    /// <p>The current application version ID. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You can retrieve the application version ID using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    #[doc(hidden)]
    pub current_application_version_id: std::option::Option<i64>,
    /// <p>The ID of the VPC configuration to delete.</p>
    #[doc(hidden)]
    pub vpc_configuration_id: std::option::Option<std::string::String>,
    /// <p>A value you use to implement strong concurrency for application updates. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You get the application's current <code>ConditionalToken</code> using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    #[doc(hidden)]
    pub conditional_token: std::option::Option<std::string::String>,
}
impl DeleteApplicationVpcConfigurationInput {
    /// <p>The name of an existing application.</p>
    pub fn application_name(&self) -> std::option::Option<&str> {
        self.application_name.as_deref()
    }
    /// <p>The current application version ID. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You can retrieve the application version ID using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    pub fn current_application_version_id(&self) -> std::option::Option<i64> {
        self.current_application_version_id
    }
    /// <p>The ID of the VPC configuration to delete.</p>
    pub fn vpc_configuration_id(&self) -> std::option::Option<&str> {
        self.vpc_configuration_id.as_deref()
    }
    /// <p>A value you use to implement strong concurrency for application updates. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You get the application's current <code>ConditionalToken</code> using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    pub fn conditional_token(&self) -> std::option::Option<&str> {
        self.conditional_token.as_deref()
    }
}
impl DeleteApplicationVpcConfigurationInput {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationVpcConfigurationInput`](crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationInput).
    pub fn builder() -> crate::operation::delete_application_vpc_configuration::builders::DeleteApplicationVpcConfigurationInputBuilder{
        crate::operation::delete_application_vpc_configuration::builders::DeleteApplicationVpcConfigurationInputBuilder::default()
    }
}

/// A builder for [`DeleteApplicationVpcConfigurationInput`](crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteApplicationVpcConfigurationInputBuilder {
    pub(crate) application_name: std::option::Option<std::string::String>,
    pub(crate) current_application_version_id: std::option::Option<i64>,
    pub(crate) vpc_configuration_id: std::option::Option<std::string::String>,
    pub(crate) conditional_token: std::option::Option<std::string::String>,
}
impl DeleteApplicationVpcConfigurationInputBuilder {
    /// <p>The name of an existing application.</p>
    pub fn application_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_name = Some(input.into());
        self
    }
    /// <p>The name of an existing application.</p>
    pub fn set_application_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_name = input;
        self
    }
    /// <p>The current application version ID. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You can retrieve the application version ID using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    pub fn current_application_version_id(mut self, input: i64) -> Self {
        self.current_application_version_id = Some(input);
        self
    }
    /// <p>The current application version ID. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You can retrieve the application version ID using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    pub fn set_current_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
        self.current_application_version_id = input;
        self
    }
    /// <p>The ID of the VPC configuration to delete.</p>
    pub fn vpc_configuration_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_configuration_id = Some(input.into());
        self
    }
    /// <p>The ID of the VPC configuration to delete.</p>
    pub fn set_vpc_configuration_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.vpc_configuration_id = input;
        self
    }
    /// <p>A value you use to implement strong concurrency for application updates. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You get the application's current <code>ConditionalToken</code> using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    pub fn conditional_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.conditional_token = Some(input.into());
        self
    }
    /// <p>A value you use to implement strong concurrency for application updates. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You get the application's current <code>ConditionalToken</code> using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    pub fn set_conditional_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.conditional_token = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteApplicationVpcConfigurationInput`](crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationInput).
    pub fn build(self) -> Result<crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationInput {
                application_name: self.application_name
                ,
                current_application_version_id: self.current_application_version_id
                ,
                vpc_configuration_id: self.vpc_configuration_id
                ,
                conditional_token: self.conditional_token
                ,
            }
        )
    }
}
