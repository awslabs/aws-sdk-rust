// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateApplicationInput {
    /// <p>The name of your application (for example, <code>sample-app</code>).</p>
    pub application_name: ::std::option::Option<::std::string::String>,
    /// <p>A summary description of the application.</p>
    pub application_description: ::std::option::Option<::std::string::String>,
    /// <p>The runtime environment for the application.</p>
    pub runtime_environment: ::std::option::Option<crate::types::RuntimeEnvironment>,
    /// <p>The IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external resources.</p>
    pub service_execution_role: ::std::option::Option<::std::string::String>,
    /// <p>Use this parameter to configure the application.</p>
    pub application_configuration: ::std::option::Option<crate::types::ApplicationConfiguration>,
    /// <p>Use this parameter to configure an Amazon CloudWatch log stream to monitor application configuration errors. </p>
    pub cloud_watch_logging_options: ::std::option::Option<::std::vec::Vec<crate::types::CloudWatchLoggingOption>>,
    /// <p>A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-tagging.html">Using Tagging</a>.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Use the <code>STREAMING</code> mode to create a Kinesis Data Analytics For Flink application. To create a Kinesis Data Analytics Studio notebook, use the <code>INTERACTIVE</code> mode.</p>
    pub application_mode: ::std::option::Option<crate::types::ApplicationMode>,
}
impl CreateApplicationInput {
    /// <p>The name of your application (for example, <code>sample-app</code>).</p>
    pub fn application_name(&self) -> ::std::option::Option<&str> {
        self.application_name.as_deref()
    }
    /// <p>A summary description of the application.</p>
    pub fn application_description(&self) -> ::std::option::Option<&str> {
        self.application_description.as_deref()
    }
    /// <p>The runtime environment for the application.</p>
    pub fn runtime_environment(&self) -> ::std::option::Option<&crate::types::RuntimeEnvironment> {
        self.runtime_environment.as_ref()
    }
    /// <p>The IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external resources.</p>
    pub fn service_execution_role(&self) -> ::std::option::Option<&str> {
        self.service_execution_role.as_deref()
    }
    /// <p>Use this parameter to configure the application.</p>
    pub fn application_configuration(&self) -> ::std::option::Option<&crate::types::ApplicationConfiguration> {
        self.application_configuration.as_ref()
    }
    /// <p>Use this parameter to configure an Amazon CloudWatch log stream to monitor application configuration errors. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.cloud_watch_logging_options.is_none()`.
    pub fn cloud_watch_logging_options(&self) -> &[crate::types::CloudWatchLoggingOption] {
        self.cloud_watch_logging_options.as_deref().unwrap_or_default()
    }
    /// <p>A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-tagging.html">Using Tagging</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Use the <code>STREAMING</code> mode to create a Kinesis Data Analytics For Flink application. To create a Kinesis Data Analytics Studio notebook, use the <code>INTERACTIVE</code> mode.</p>
    pub fn application_mode(&self) -> ::std::option::Option<&crate::types::ApplicationMode> {
        self.application_mode.as_ref()
    }
}
impl CreateApplicationInput {
    /// Creates a new builder-style object to manufacture [`CreateApplicationInput`](crate::operation::create_application::CreateApplicationInput).
    pub fn builder() -> crate::operation::create_application::builders::CreateApplicationInputBuilder {
        crate::operation::create_application::builders::CreateApplicationInputBuilder::default()
    }
}

/// A builder for [`CreateApplicationInput`](crate::operation::create_application::CreateApplicationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateApplicationInputBuilder {
    pub(crate) application_name: ::std::option::Option<::std::string::String>,
    pub(crate) application_description: ::std::option::Option<::std::string::String>,
    pub(crate) runtime_environment: ::std::option::Option<crate::types::RuntimeEnvironment>,
    pub(crate) service_execution_role: ::std::option::Option<::std::string::String>,
    pub(crate) application_configuration: ::std::option::Option<crate::types::ApplicationConfiguration>,
    pub(crate) cloud_watch_logging_options: ::std::option::Option<::std::vec::Vec<crate::types::CloudWatchLoggingOption>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) application_mode: ::std::option::Option<crate::types::ApplicationMode>,
}
impl CreateApplicationInputBuilder {
    /// <p>The name of your application (for example, <code>sample-app</code>).</p>
    /// This field is required.
    pub fn application_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of your application (for example, <code>sample-app</code>).</p>
    pub fn set_application_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_name = input;
        self
    }
    /// <p>The name of your application (for example, <code>sample-app</code>).</p>
    pub fn get_application_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_name
    }
    /// <p>A summary description of the application.</p>
    pub fn application_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A summary description of the application.</p>
    pub fn set_application_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_description = input;
        self
    }
    /// <p>A summary description of the application.</p>
    pub fn get_application_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_description
    }
    /// <p>The runtime environment for the application.</p>
    /// This field is required.
    pub fn runtime_environment(mut self, input: crate::types::RuntimeEnvironment) -> Self {
        self.runtime_environment = ::std::option::Option::Some(input);
        self
    }
    /// <p>The runtime environment for the application.</p>
    pub fn set_runtime_environment(mut self, input: ::std::option::Option<crate::types::RuntimeEnvironment>) -> Self {
        self.runtime_environment = input;
        self
    }
    /// <p>The runtime environment for the application.</p>
    pub fn get_runtime_environment(&self) -> &::std::option::Option<crate::types::RuntimeEnvironment> {
        &self.runtime_environment
    }
    /// <p>The IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external resources.</p>
    /// This field is required.
    pub fn service_execution_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.service_execution_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external resources.</p>
    pub fn set_service_execution_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.service_execution_role = input;
        self
    }
    /// <p>The IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external resources.</p>
    pub fn get_service_execution_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.service_execution_role
    }
    /// <p>Use this parameter to configure the application.</p>
    pub fn application_configuration(mut self, input: crate::types::ApplicationConfiguration) -> Self {
        self.application_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use this parameter to configure the application.</p>
    pub fn set_application_configuration(mut self, input: ::std::option::Option<crate::types::ApplicationConfiguration>) -> Self {
        self.application_configuration = input;
        self
    }
    /// <p>Use this parameter to configure the application.</p>
    pub fn get_application_configuration(&self) -> &::std::option::Option<crate::types::ApplicationConfiguration> {
        &self.application_configuration
    }
    /// Appends an item to `cloud_watch_logging_options`.
    ///
    /// To override the contents of this collection use [`set_cloud_watch_logging_options`](Self::set_cloud_watch_logging_options).
    ///
    /// <p>Use this parameter to configure an Amazon CloudWatch log stream to monitor application configuration errors. </p>
    pub fn cloud_watch_logging_options(mut self, input: crate::types::CloudWatchLoggingOption) -> Self {
        let mut v = self.cloud_watch_logging_options.unwrap_or_default();
        v.push(input);
        self.cloud_watch_logging_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>Use this parameter to configure an Amazon CloudWatch log stream to monitor application configuration errors. </p>
    pub fn set_cloud_watch_logging_options(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::CloudWatchLoggingOption>>) -> Self {
        self.cloud_watch_logging_options = input;
        self
    }
    /// <p>Use this parameter to configure an Amazon CloudWatch log stream to monitor application configuration errors. </p>
    pub fn get_cloud_watch_logging_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CloudWatchLoggingOption>> {
        &self.cloud_watch_logging_options
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-tagging.html">Using Tagging</a>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-tagging.html">Using Tagging</a>.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-tagging.html">Using Tagging</a>.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Use the <code>STREAMING</code> mode to create a Kinesis Data Analytics For Flink application. To create a Kinesis Data Analytics Studio notebook, use the <code>INTERACTIVE</code> mode.</p>
    pub fn application_mode(mut self, input: crate::types::ApplicationMode) -> Self {
        self.application_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>Use the <code>STREAMING</code> mode to create a Kinesis Data Analytics For Flink application. To create a Kinesis Data Analytics Studio notebook, use the <code>INTERACTIVE</code> mode.</p>
    pub fn set_application_mode(mut self, input: ::std::option::Option<crate::types::ApplicationMode>) -> Self {
        self.application_mode = input;
        self
    }
    /// <p>Use the <code>STREAMING</code> mode to create a Kinesis Data Analytics For Flink application. To create a Kinesis Data Analytics Studio notebook, use the <code>INTERACTIVE</code> mode.</p>
    pub fn get_application_mode(&self) -> &::std::option::Option<crate::types::ApplicationMode> {
        &self.application_mode
    }
    /// Consumes the builder and constructs a [`CreateApplicationInput`](crate::operation::create_application::CreateApplicationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_application::CreateApplicationInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_application::CreateApplicationInput {
            application_name: self.application_name,
            application_description: self.application_description,
            runtime_environment: self.runtime_environment,
            service_execution_role: self.service_execution_role,
            application_configuration: self.application_configuration,
            cloud_watch_logging_options: self.cloud_watch_logging_options,
            tags: self.tags,
            application_mode: self.application_mode,
        })
    }
}
