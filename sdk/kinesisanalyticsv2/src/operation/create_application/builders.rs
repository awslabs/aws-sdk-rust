// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_application::_create_application_output::CreateApplicationOutputBuilder;

pub use crate::operation::create_application::_create_application_input::CreateApplicationInputBuilder;

/// Fluent builder constructing a request to `CreateApplication`.
///
/// <p>Creates a Kinesis Data Analytics application. For information about creating a Kinesis Data Analytics application, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/java/getting-started.html">Creating an Application</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateApplicationFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_application::builders::CreateApplicationInputBuilder,
}
impl CreateApplicationFluentBuilder {
    /// Creates a new `CreateApplication`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_application::CreateApplication,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_application::CreateApplicationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_application::CreateApplicationOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_application::CreateApplicationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of your application (for example, <code>sample-app</code>).</p>
    pub fn application_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.application_name(input.into());
        self
    }
    /// <p>The name of your application (for example, <code>sample-app</code>).</p>
    pub fn set_application_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_application_name(input);
        self
    }
    /// <p>A summary description of the application.</p>
    pub fn application_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.application_description(input.into());
        self
    }
    /// <p>A summary description of the application.</p>
    pub fn set_application_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_application_description(input);
        self
    }
    /// <p>The runtime environment for the application.</p>
    pub fn runtime_environment(mut self, input: crate::types::RuntimeEnvironment) -> Self {
        self.inner = self.inner.runtime_environment(input);
        self
    }
    /// <p>The runtime environment for the application.</p>
    pub fn set_runtime_environment(
        mut self,
        input: std::option::Option<crate::types::RuntimeEnvironment>,
    ) -> Self {
        self.inner = self.inner.set_runtime_environment(input);
        self
    }
    /// <p>The IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external resources.</p>
    pub fn service_execution_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.service_execution_role(input.into());
        self
    }
    /// <p>The IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external resources.</p>
    pub fn set_service_execution_role(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_service_execution_role(input);
        self
    }
    /// <p>Use this parameter to configure the application.</p>
    pub fn application_configuration(
        mut self,
        input: crate::types::ApplicationConfiguration,
    ) -> Self {
        self.inner = self.inner.application_configuration(input);
        self
    }
    /// <p>Use this parameter to configure the application.</p>
    pub fn set_application_configuration(
        mut self,
        input: std::option::Option<crate::types::ApplicationConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_application_configuration(input);
        self
    }
    /// Appends an item to `CloudWatchLoggingOptions`.
    ///
    /// To override the contents of this collection use [`set_cloud_watch_logging_options`](Self::set_cloud_watch_logging_options).
    ///
    /// <p>Use this parameter to configure an Amazon CloudWatch log stream to monitor application configuration errors. </p>
    pub fn cloud_watch_logging_options(
        mut self,
        input: crate::types::CloudWatchLoggingOption,
    ) -> Self {
        self.inner = self.inner.cloud_watch_logging_options(input);
        self
    }
    /// <p>Use this parameter to configure an Amazon CloudWatch log stream to monitor application configuration errors. </p>
    pub fn set_cloud_watch_logging_options(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CloudWatchLoggingOption>>,
    ) -> Self {
        self.inner = self.inner.set_cloud_watch_logging_options(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-tagging.html">Using Tagging</a>.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-tagging.html">Using Tagging</a>.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Use the <code>STREAMING</code> mode to create a Kinesis Data Analytics For Flink application. To create a Kinesis Data Analytics Studio notebook, use the <code>INTERACTIVE</code> mode.</p>
    pub fn application_mode(mut self, input: crate::types::ApplicationMode) -> Self {
        self.inner = self.inner.application_mode(input);
        self
    }
    /// <p>Use the <code>STREAMING</code> mode to create a Kinesis Data Analytics For Flink application. To create a Kinesis Data Analytics Studio notebook, use the <code>INTERACTIVE</code> mode.</p>
    pub fn set_application_mode(
        mut self,
        input: std::option::Option<crate::types::ApplicationMode>,
    ) -> Self {
        self.inner = self.inner.set_application_mode(input);
        self
    }
}
