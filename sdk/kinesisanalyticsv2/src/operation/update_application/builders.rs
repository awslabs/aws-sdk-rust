// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_application::_update_application_output::UpdateApplicationOutputBuilder;

pub use crate::operation::update_application::_update_application_input::UpdateApplicationInputBuilder;

impl crate::operation::update_application::builders::UpdateApplicationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_application::UpdateApplicationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_application::UpdateApplicationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_application();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateApplication`.
///
/// <p>Updates an existing Managed Service for Apache Flink application. Using this operation, you can update application code, input configuration, and output configuration.</p>
/// <p>Managed Service for Apache Flink updates the <code>ApplicationVersionId</code> each time you update your application.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateApplicationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_application::builders::UpdateApplicationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_application::UpdateApplicationOutput,
        crate::operation::update_application::UpdateApplicationError,
    > for UpdateApplicationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_application::UpdateApplicationOutput,
            crate::operation::update_application::UpdateApplicationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateApplicationFluentBuilder {
    /// Creates a new `UpdateApplication`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateApplication as a reference.
    pub fn as_input(&self) -> &crate::operation::update_application::builders::UpdateApplicationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_application::UpdateApplicationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_application::UpdateApplicationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_application::UpdateApplication::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_application::UpdateApplication::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_application::UpdateApplicationOutput,
        crate::operation::update_application::UpdateApplicationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the application to update.</p>
    pub fn application_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.application_name(input.into());
        self
    }
    /// <p>The name of the application to update.</p>
    pub fn set_application_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_application_name(input);
        self
    }
    /// <p>The name of the application to update.</p>
    pub fn get_application_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_application_name()
    }
    /// <p>The current application version ID. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>.You can retrieve the application version ID using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    pub fn current_application_version_id(mut self, input: i64) -> Self {
        self.inner = self.inner.current_application_version_id(input);
        self
    }
    /// <p>The current application version ID. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>.You can retrieve the application version ID using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    pub fn set_current_application_version_id(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_current_application_version_id(input);
        self
    }
    /// <p>The current application version ID. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>.You can retrieve the application version ID using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    pub fn get_current_application_version_id(&self) -> &::std::option::Option<i64> {
        self.inner.get_current_application_version_id()
    }
    /// <p>Describes application configuration updates.</p>
    pub fn application_configuration_update(mut self, input: crate::types::ApplicationConfigurationUpdate) -> Self {
        self.inner = self.inner.application_configuration_update(input);
        self
    }
    /// <p>Describes application configuration updates.</p>
    pub fn set_application_configuration_update(mut self, input: ::std::option::Option<crate::types::ApplicationConfigurationUpdate>) -> Self {
        self.inner = self.inner.set_application_configuration_update(input);
        self
    }
    /// <p>Describes application configuration updates.</p>
    pub fn get_application_configuration_update(&self) -> &::std::option::Option<crate::types::ApplicationConfigurationUpdate> {
        self.inner.get_application_configuration_update()
    }
    /// <p>Describes updates to the service execution role.</p>
    pub fn service_execution_role_update(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.service_execution_role_update(input.into());
        self
    }
    /// <p>Describes updates to the service execution role.</p>
    pub fn set_service_execution_role_update(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_service_execution_role_update(input);
        self
    }
    /// <p>Describes updates to the service execution role.</p>
    pub fn get_service_execution_role_update(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_service_execution_role_update()
    }
    /// <p>Describes updates to the application's starting parameters.</p>
    pub fn run_configuration_update(mut self, input: crate::types::RunConfigurationUpdate) -> Self {
        self.inner = self.inner.run_configuration_update(input);
        self
    }
    /// <p>Describes updates to the application's starting parameters.</p>
    pub fn set_run_configuration_update(mut self, input: ::std::option::Option<crate::types::RunConfigurationUpdate>) -> Self {
        self.inner = self.inner.set_run_configuration_update(input);
        self
    }
    /// <p>Describes updates to the application's starting parameters.</p>
    pub fn get_run_configuration_update(&self) -> &::std::option::Option<crate::types::RunConfigurationUpdate> {
        self.inner.get_run_configuration_update()
    }
    ///
    /// Appends an item to `CloudWatchLoggingOptionUpdates`.
    ///
    /// To override the contents of this collection use [`set_cloud_watch_logging_option_updates`](Self::set_cloud_watch_logging_option_updates).
    ///
    /// <p>Describes application Amazon CloudWatch logging option updates. You can only update existing CloudWatch logging options with this action. To add a new CloudWatch logging option, use <code>AddApplicationCloudWatchLoggingOption</code>.</p>
    pub fn cloud_watch_logging_option_updates(mut self, input: crate::types::CloudWatchLoggingOptionUpdate) -> Self {
        self.inner = self.inner.cloud_watch_logging_option_updates(input);
        self
    }
    /// <p>Describes application Amazon CloudWatch logging option updates. You can only update existing CloudWatch logging options with this action. To add a new CloudWatch logging option, use <code>AddApplicationCloudWatchLoggingOption</code>.</p>
    pub fn set_cloud_watch_logging_option_updates(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::CloudWatchLoggingOptionUpdate>>,
    ) -> Self {
        self.inner = self.inner.set_cloud_watch_logging_option_updates(input);
        self
    }
    /// <p>Describes application Amazon CloudWatch logging option updates. You can only update existing CloudWatch logging options with this action. To add a new CloudWatch logging option, use <code>AddApplicationCloudWatchLoggingOption</code>.</p>
    pub fn get_cloud_watch_logging_option_updates(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CloudWatchLoggingOptionUpdate>> {
        self.inner.get_cloud_watch_logging_option_updates()
    }
    /// <p>A value you use to implement strong concurrency for application updates. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You get the application's current <code>ConditionalToken</code> using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    pub fn conditional_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.conditional_token(input.into());
        self
    }
    /// <p>A value you use to implement strong concurrency for application updates. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You get the application's current <code>ConditionalToken</code> using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    pub fn set_conditional_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_conditional_token(input);
        self
    }
    /// <p>A value you use to implement strong concurrency for application updates. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You get the application's current <code>ConditionalToken</code> using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    pub fn get_conditional_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_conditional_token()
    }
    /// <p>Updates the Managed Service for Apache Flink runtime environment used to run your code. To avoid issues you must:</p>
    /// <ul>
    /// <li>
    /// <p>Ensure your new jar and dependencies are compatible with the new runtime selected.</p></li>
    /// <li>
    /// <p>Ensure your new code's state is compatible with the snapshot from which your application will start</p></li>
    /// </ul>
    pub fn runtime_environment_update(mut self, input: crate::types::RuntimeEnvironment) -> Self {
        self.inner = self.inner.runtime_environment_update(input);
        self
    }
    /// <p>Updates the Managed Service for Apache Flink runtime environment used to run your code. To avoid issues you must:</p>
    /// <ul>
    /// <li>
    /// <p>Ensure your new jar and dependencies are compatible with the new runtime selected.</p></li>
    /// <li>
    /// <p>Ensure your new code's state is compatible with the snapshot from which your application will start</p></li>
    /// </ul>
    pub fn set_runtime_environment_update(mut self, input: ::std::option::Option<crate::types::RuntimeEnvironment>) -> Self {
        self.inner = self.inner.set_runtime_environment_update(input);
        self
    }
    /// <p>Updates the Managed Service for Apache Flink runtime environment used to run your code. To avoid issues you must:</p>
    /// <ul>
    /// <li>
    /// <p>Ensure your new jar and dependencies are compatible with the new runtime selected.</p></li>
    /// <li>
    /// <p>Ensure your new code's state is compatible with the snapshot from which your application will start</p></li>
    /// </ul>
    pub fn get_runtime_environment_update(&self) -> &::std::option::Option<crate::types::RuntimeEnvironment> {
        self.inner.get_runtime_environment_update()
    }
}
