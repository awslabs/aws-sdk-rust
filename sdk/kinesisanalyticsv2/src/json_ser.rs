// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_add_application_cloud_watch_logging_option_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddApplicationCloudWatchLoggingOptionInput,
) {
    if let Some(var_1) = &input.application_name {
        object.key("ApplicationName").string(var_1);
    }
    if let Some(var_2) = &input.current_application_version_id {
        object.key("CurrentApplicationVersionId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.cloud_watch_logging_option {
        let mut object_4 = object.key("CloudWatchLoggingOption").start_object();
        crate::json_ser::serialize_structure_cloud_watch_logging_option(&mut object_4, var_3);
        object_4.finish();
    }
    if let Some(var_5) = &input.conditional_token {
        object.key("ConditionalToken").string(var_5);
    }
}

pub fn serialize_structure_add_application_input_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddApplicationInputInput,
) {
    if let Some(var_6) = &input.application_name {
        object.key("ApplicationName").string(var_6);
    }
    if let Some(var_7) = &input.current_application_version_id {
        object.key("CurrentApplicationVersionId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.input {
        let mut object_9 = object.key("Input").start_object();
        crate::json_ser::serialize_structure_input(&mut object_9, var_8);
        object_9.finish();
    }
}

pub fn serialize_structure_add_application_input_processing_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddApplicationInputProcessingConfigurationInput,
) {
    if let Some(var_10) = &input.application_name {
        object.key("ApplicationName").string(var_10);
    }
    if let Some(var_11) = &input.current_application_version_id {
        object.key("CurrentApplicationVersionId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_11).into()),
        );
    }
    if let Some(var_12) = &input.input_id {
        object.key("InputId").string(var_12);
    }
    if let Some(var_13) = &input.input_processing_configuration {
        let mut object_14 = object.key("InputProcessingConfiguration").start_object();
        crate::json_ser::serialize_structure_input_processing_configuration(&mut object_14, var_13);
        object_14.finish();
    }
}

pub fn serialize_structure_add_application_output_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddApplicationOutputInput,
) {
    if let Some(var_15) = &input.application_name {
        object.key("ApplicationName").string(var_15);
    }
    if let Some(var_16) = &input.current_application_version_id {
        object.key("CurrentApplicationVersionId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_16).into()),
        );
    }
    if let Some(var_17) = &input.output {
        let mut object_18 = object.key("Output").start_object();
        crate::json_ser::serialize_structure_output(&mut object_18, var_17);
        object_18.finish();
    }
}

pub fn serialize_structure_add_application_reference_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddApplicationReferenceDataSourceInput,
) {
    if let Some(var_19) = &input.application_name {
        object.key("ApplicationName").string(var_19);
    }
    if let Some(var_20) = &input.current_application_version_id {
        object.key("CurrentApplicationVersionId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_20).into()),
        );
    }
    if let Some(var_21) = &input.reference_data_source {
        let mut object_22 = object.key("ReferenceDataSource").start_object();
        crate::json_ser::serialize_structure_reference_data_source(&mut object_22, var_21);
        object_22.finish();
    }
}

pub fn serialize_structure_add_application_vpc_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddApplicationVpcConfigurationInput,
) {
    if let Some(var_23) = &input.application_name {
        object.key("ApplicationName").string(var_23);
    }
    if let Some(var_24) = &input.current_application_version_id {
        object.key("CurrentApplicationVersionId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_24).into()),
        );
    }
    if let Some(var_25) = &input.vpc_configuration {
        let mut object_26 = object.key("VpcConfiguration").start_object();
        crate::json_ser::serialize_structure_vpc_configuration(&mut object_26, var_25);
        object_26.finish();
    }
    if let Some(var_27) = &input.conditional_token {
        object.key("ConditionalToken").string(var_27);
    }
}

pub fn serialize_structure_create_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateApplicationInput,
) {
    if let Some(var_28) = &input.application_name {
        object.key("ApplicationName").string(var_28);
    }
    if let Some(var_29) = &input.application_description {
        object.key("ApplicationDescription").string(var_29);
    }
    if let Some(var_30) = &input.runtime_environment {
        object.key("RuntimeEnvironment").string(var_30.as_str());
    }
    if let Some(var_31) = &input.service_execution_role {
        object.key("ServiceExecutionRole").string(var_31);
    }
    if let Some(var_32) = &input.application_configuration {
        let mut object_33 = object.key("ApplicationConfiguration").start_object();
        crate::json_ser::serialize_structure_application_configuration(&mut object_33, var_32);
        object_33.finish();
    }
    if let Some(var_34) = &input.cloud_watch_logging_options {
        let mut array_35 = object.key("CloudWatchLoggingOptions").start_array();
        for item_36 in var_34 {
            {
                let mut object_37 = array_35.value().start_object();
                crate::json_ser::serialize_structure_cloud_watch_logging_option(
                    &mut object_37,
                    item_36,
                );
                object_37.finish();
            }
        }
        array_35.finish();
    }
    if let Some(var_38) = &input.tags {
        let mut array_39 = object.key("Tags").start_array();
        for item_40 in var_38 {
            {
                let mut object_41 = array_39.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_41, item_40);
                object_41.finish();
            }
        }
        array_39.finish();
    }
    if let Some(var_42) = &input.application_mode {
        object.key("ApplicationMode").string(var_42.as_str());
    }
}

pub fn serialize_structure_create_application_presigned_url_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateApplicationPresignedUrlInput,
) {
    if let Some(var_43) = &input.application_name {
        object.key("ApplicationName").string(var_43);
    }
    if let Some(var_44) = &input.url_type {
        object.key("UrlType").string(var_44.as_str());
    }
    if let Some(var_45) = &input.session_expiration_duration_in_seconds {
        object.key("SessionExpirationDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_45).into()),
        );
    }
}

pub fn serialize_structure_create_application_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateApplicationSnapshotInput,
) {
    if let Some(var_46) = &input.application_name {
        object.key("ApplicationName").string(var_46);
    }
    if let Some(var_47) = &input.snapshot_name {
        object.key("SnapshotName").string(var_47);
    }
}

pub fn serialize_structure_delete_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteApplicationInput,
) {
    if let Some(var_48) = &input.application_name {
        object.key("ApplicationName").string(var_48);
    }
    if let Some(var_49) = &input.create_timestamp {
        object
            .key("CreateTimestamp")
            .instant(var_49, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_delete_application_cloud_watch_logging_option_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteApplicationCloudWatchLoggingOptionInput,
) {
    if let Some(var_50) = &input.application_name {
        object.key("ApplicationName").string(var_50);
    }
    if let Some(var_51) = &input.current_application_version_id {
        object.key("CurrentApplicationVersionId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_51).into()),
        );
    }
    if let Some(var_52) = &input.cloud_watch_logging_option_id {
        object.key("CloudWatchLoggingOptionId").string(var_52);
    }
    if let Some(var_53) = &input.conditional_token {
        object.key("ConditionalToken").string(var_53);
    }
}

pub fn serialize_structure_delete_application_input_processing_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteApplicationInputProcessingConfigurationInput,
) {
    if let Some(var_54) = &input.application_name {
        object.key("ApplicationName").string(var_54);
    }
    if let Some(var_55) = &input.current_application_version_id {
        object.key("CurrentApplicationVersionId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_55).into()),
        );
    }
    if let Some(var_56) = &input.input_id {
        object.key("InputId").string(var_56);
    }
}

pub fn serialize_structure_delete_application_reference_data_source_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteApplicationReferenceDataSourceInput,
) {
    if let Some(var_57) = &input.application_name {
        object.key("ApplicationName").string(var_57);
    }
    if let Some(var_58) = &input.current_application_version_id {
        object.key("CurrentApplicationVersionId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_58).into()),
        );
    }
    if let Some(var_59) = &input.reference_id {
        object.key("ReferenceId").string(var_59);
    }
}

pub fn serialize_structure_delete_application_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteApplicationSnapshotInput,
) {
    if let Some(var_60) = &input.application_name {
        object.key("ApplicationName").string(var_60);
    }
    if let Some(var_61) = &input.snapshot_name {
        object.key("SnapshotName").string(var_61);
    }
    if let Some(var_62) = &input.snapshot_creation_timestamp {
        object
            .key("SnapshotCreationTimestamp")
            .instant(var_62, smithy_types::instant::Format::EpochSeconds);
    }
}

pub fn serialize_structure_delete_application_vpc_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteApplicationVpcConfigurationInput,
) {
    if let Some(var_63) = &input.application_name {
        object.key("ApplicationName").string(var_63);
    }
    if let Some(var_64) = &input.current_application_version_id {
        object.key("CurrentApplicationVersionId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_64).into()),
        );
    }
    if let Some(var_65) = &input.vpc_configuration_id {
        object.key("VpcConfigurationId").string(var_65);
    }
    if let Some(var_66) = &input.conditional_token {
        object.key("ConditionalToken").string(var_66);
    }
}

pub fn serialize_structure_describe_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeApplicationInput,
) {
    if let Some(var_67) = &input.application_name {
        object.key("ApplicationName").string(var_67);
    }
    if let Some(var_68) = &input.include_additional_details {
        object.key("IncludeAdditionalDetails").boolean(*var_68);
    }
}

pub fn serialize_structure_describe_application_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeApplicationSnapshotInput,
) {
    if let Some(var_69) = &input.application_name {
        object.key("ApplicationName").string(var_69);
    }
    if let Some(var_70) = &input.snapshot_name {
        object.key("SnapshotName").string(var_70);
    }
}

pub fn serialize_structure_describe_application_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeApplicationVersionInput,
) {
    if let Some(var_71) = &input.application_name {
        object.key("ApplicationName").string(var_71);
    }
    if let Some(var_72) = &input.application_version_id {
        object.key("ApplicationVersionId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_72).into()),
        );
    }
}

pub fn serialize_structure_discover_input_schema_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DiscoverInputSchemaInput,
) {
    if let Some(var_73) = &input.resource_arn {
        object.key("ResourceARN").string(var_73);
    }
    if let Some(var_74) = &input.service_execution_role {
        object.key("ServiceExecutionRole").string(var_74);
    }
    if let Some(var_75) = &input.input_starting_position_configuration {
        let mut object_76 = object
            .key("InputStartingPositionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_input_starting_position_configuration(
            &mut object_76,
            var_75,
        );
        object_76.finish();
    }
    if let Some(var_77) = &input.s3_configuration {
        let mut object_78 = object.key("S3Configuration").start_object();
        crate::json_ser::serialize_structure_s3_configuration(&mut object_78, var_77);
        object_78.finish();
    }
    if let Some(var_79) = &input.input_processing_configuration {
        let mut object_80 = object.key("InputProcessingConfiguration").start_object();
        crate::json_ser::serialize_structure_input_processing_configuration(&mut object_80, var_79);
        object_80.finish();
    }
}

pub fn serialize_structure_list_applications_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListApplicationsInput,
) {
    if let Some(var_81) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_81).into()),
        );
    }
    if let Some(var_82) = &input.next_token {
        object.key("NextToken").string(var_82);
    }
}

pub fn serialize_structure_list_application_snapshots_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListApplicationSnapshotsInput,
) {
    if let Some(var_83) = &input.application_name {
        object.key("ApplicationName").string(var_83);
    }
    if let Some(var_84) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_84).into()),
        );
    }
    if let Some(var_85) = &input.next_token {
        object.key("NextToken").string(var_85);
    }
}

pub fn serialize_structure_list_application_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListApplicationVersionsInput,
) {
    if let Some(var_86) = &input.application_name {
        object.key("ApplicationName").string(var_86);
    }
    if let Some(var_87) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_87).into()),
        );
    }
    if let Some(var_88) = &input.next_token {
        object.key("NextToken").string(var_88);
    }
}

pub fn serialize_structure_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_89) = &input.resource_arn {
        object.key("ResourceARN").string(var_89);
    }
}

pub fn serialize_structure_rollback_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RollbackApplicationInput,
) {
    if let Some(var_90) = &input.application_name {
        object.key("ApplicationName").string(var_90);
    }
    if let Some(var_91) = &input.current_application_version_id {
        object.key("CurrentApplicationVersionId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_91).into()),
        );
    }
}

pub fn serialize_structure_start_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartApplicationInput,
) {
    if let Some(var_92) = &input.application_name {
        object.key("ApplicationName").string(var_92);
    }
    if let Some(var_93) = &input.run_configuration {
        let mut object_94 = object.key("RunConfiguration").start_object();
        crate::json_ser::serialize_structure_run_configuration(&mut object_94, var_93);
        object_94.finish();
    }
}

pub fn serialize_structure_stop_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StopApplicationInput,
) {
    if let Some(var_95) = &input.application_name {
        object.key("ApplicationName").string(var_95);
    }
    if let Some(var_96) = &input.force {
        object.key("Force").boolean(*var_96);
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_97) = &input.resource_arn {
        object.key("ResourceARN").string(var_97);
    }
    if let Some(var_98) = &input.tags {
        let mut array_99 = object.key("Tags").start_array();
        for item_100 in var_98 {
            {
                let mut object_101 = array_99.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_101, item_100);
                object_101.finish();
            }
        }
        array_99.finish();
    }
}

pub fn serialize_structure_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_102) = &input.resource_arn {
        object.key("ResourceARN").string(var_102);
    }
    if let Some(var_103) = &input.tag_keys {
        let mut array_104 = object.key("TagKeys").start_array();
        for item_105 in var_103 {
            {
                array_104.value().string(item_105);
            }
        }
        array_104.finish();
    }
}

pub fn serialize_structure_update_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateApplicationInput,
) {
    if let Some(var_106) = &input.application_name {
        object.key("ApplicationName").string(var_106);
    }
    if let Some(var_107) = &input.current_application_version_id {
        object.key("CurrentApplicationVersionId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_107).into()),
        );
    }
    if let Some(var_108) = &input.application_configuration_update {
        let mut object_109 = object.key("ApplicationConfigurationUpdate").start_object();
        crate::json_ser::serialize_structure_application_configuration_update(
            &mut object_109,
            var_108,
        );
        object_109.finish();
    }
    if let Some(var_110) = &input.service_execution_role_update {
        object.key("ServiceExecutionRoleUpdate").string(var_110);
    }
    if let Some(var_111) = &input.run_configuration_update {
        let mut object_112 = object.key("RunConfigurationUpdate").start_object();
        crate::json_ser::serialize_structure_run_configuration_update(&mut object_112, var_111);
        object_112.finish();
    }
    if let Some(var_113) = &input.cloud_watch_logging_option_updates {
        let mut array_114 = object.key("CloudWatchLoggingOptionUpdates").start_array();
        for item_115 in var_113 {
            {
                let mut object_116 = array_114.value().start_object();
                crate::json_ser::serialize_structure_cloud_watch_logging_option_update(
                    &mut object_116,
                    item_115,
                );
                object_116.finish();
            }
        }
        array_114.finish();
    }
    if let Some(var_117) = &input.conditional_token {
        object.key("ConditionalToken").string(var_117);
    }
}

pub fn serialize_structure_update_application_maintenance_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateApplicationMaintenanceConfigurationInput,
) {
    if let Some(var_118) = &input.application_name {
        object.key("ApplicationName").string(var_118);
    }
    if let Some(var_119) = &input.application_maintenance_configuration_update {
        let mut object_120 = object
            .key("ApplicationMaintenanceConfigurationUpdate")
            .start_object();
        crate::json_ser::serialize_structure_application_maintenance_configuration_update(
            &mut object_120,
            var_119,
        );
        object_120.finish();
    }
}

pub fn serialize_structure_cloud_watch_logging_option(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchLoggingOption,
) {
    if let Some(var_121) = &input.log_stream_arn {
        object.key("LogStreamARN").string(var_121);
    }
}

pub fn serialize_structure_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Input,
) {
    if let Some(var_122) = &input.name_prefix {
        object.key("NamePrefix").string(var_122);
    }
    if let Some(var_123) = &input.input_processing_configuration {
        let mut object_124 = object.key("InputProcessingConfiguration").start_object();
        crate::json_ser::serialize_structure_input_processing_configuration(
            &mut object_124,
            var_123,
        );
        object_124.finish();
    }
    if let Some(var_125) = &input.kinesis_streams_input {
        let mut object_126 = object.key("KinesisStreamsInput").start_object();
        crate::json_ser::serialize_structure_kinesis_streams_input(&mut object_126, var_125);
        object_126.finish();
    }
    if let Some(var_127) = &input.kinesis_firehose_input {
        let mut object_128 = object.key("KinesisFirehoseInput").start_object();
        crate::json_ser::serialize_structure_kinesis_firehose_input(&mut object_128, var_127);
        object_128.finish();
    }
    if let Some(var_129) = &input.input_parallelism {
        let mut object_130 = object.key("InputParallelism").start_object();
        crate::json_ser::serialize_structure_input_parallelism(&mut object_130, var_129);
        object_130.finish();
    }
    if let Some(var_131) = &input.input_schema {
        let mut object_132 = object.key("InputSchema").start_object();
        crate::json_ser::serialize_structure_source_schema(&mut object_132, var_131);
        object_132.finish();
    }
}

pub fn serialize_structure_input_processing_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputProcessingConfiguration,
) {
    if let Some(var_133) = &input.input_lambda_processor {
        let mut object_134 = object.key("InputLambdaProcessor").start_object();
        crate::json_ser::serialize_structure_input_lambda_processor(&mut object_134, var_133);
        object_134.finish();
    }
}

pub fn serialize_structure_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Output,
) {
    if let Some(var_135) = &input.name {
        object.key("Name").string(var_135);
    }
    if let Some(var_136) = &input.kinesis_streams_output {
        let mut object_137 = object.key("KinesisStreamsOutput").start_object();
        crate::json_ser::serialize_structure_kinesis_streams_output(&mut object_137, var_136);
        object_137.finish();
    }
    if let Some(var_138) = &input.kinesis_firehose_output {
        let mut object_139 = object.key("KinesisFirehoseOutput").start_object();
        crate::json_ser::serialize_structure_kinesis_firehose_output(&mut object_139, var_138);
        object_139.finish();
    }
    if let Some(var_140) = &input.lambda_output {
        let mut object_141 = object.key("LambdaOutput").start_object();
        crate::json_ser::serialize_structure_lambda_output(&mut object_141, var_140);
        object_141.finish();
    }
    if let Some(var_142) = &input.destination_schema {
        let mut object_143 = object.key("DestinationSchema").start_object();
        crate::json_ser::serialize_structure_destination_schema(&mut object_143, var_142);
        object_143.finish();
    }
}

pub fn serialize_structure_reference_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReferenceDataSource,
) {
    if let Some(var_144) = &input.table_name {
        object.key("TableName").string(var_144);
    }
    if let Some(var_145) = &input.s3_reference_data_source {
        let mut object_146 = object.key("S3ReferenceDataSource").start_object();
        crate::json_ser::serialize_structure_s3_reference_data_source(&mut object_146, var_145);
        object_146.finish();
    }
    if let Some(var_147) = &input.reference_schema {
        let mut object_148 = object.key("ReferenceSchema").start_object();
        crate::json_ser::serialize_structure_source_schema(&mut object_148, var_147);
        object_148.finish();
    }
}

pub fn serialize_structure_vpc_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfiguration,
) {
    if let Some(var_149) = &input.subnet_ids {
        let mut array_150 = object.key("SubnetIds").start_array();
        for item_151 in var_149 {
            {
                array_150.value().string(item_151);
            }
        }
        array_150.finish();
    }
    if let Some(var_152) = &input.security_group_ids {
        let mut array_153 = object.key("SecurityGroupIds").start_array();
        for item_154 in var_152 {
            {
                array_153.value().string(item_154);
            }
        }
        array_153.finish();
    }
}

pub fn serialize_structure_application_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApplicationConfiguration,
) {
    if let Some(var_155) = &input.sql_application_configuration {
        let mut object_156 = object.key("SqlApplicationConfiguration").start_object();
        crate::json_ser::serialize_structure_sql_application_configuration(
            &mut object_156,
            var_155,
        );
        object_156.finish();
    }
    if let Some(var_157) = &input.flink_application_configuration {
        let mut object_158 = object.key("FlinkApplicationConfiguration").start_object();
        crate::json_ser::serialize_structure_flink_application_configuration(
            &mut object_158,
            var_157,
        );
        object_158.finish();
    }
    if let Some(var_159) = &input.environment_properties {
        let mut object_160 = object.key("EnvironmentProperties").start_object();
        crate::json_ser::serialize_structure_environment_properties(&mut object_160, var_159);
        object_160.finish();
    }
    if let Some(var_161) = &input.application_code_configuration {
        let mut object_162 = object.key("ApplicationCodeConfiguration").start_object();
        crate::json_ser::serialize_structure_application_code_configuration(
            &mut object_162,
            var_161,
        );
        object_162.finish();
    }
    if let Some(var_163) = &input.application_snapshot_configuration {
        let mut object_164 = object
            .key("ApplicationSnapshotConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_application_snapshot_configuration(
            &mut object_164,
            var_163,
        );
        object_164.finish();
    }
    if let Some(var_165) = &input.vpc_configurations {
        let mut array_166 = object.key("VpcConfigurations").start_array();
        for item_167 in var_165 {
            {
                let mut object_168 = array_166.value().start_object();
                crate::json_ser::serialize_structure_vpc_configuration(&mut object_168, item_167);
                object_168.finish();
            }
        }
        array_166.finish();
    }
    if let Some(var_169) = &input.zeppelin_application_configuration {
        let mut object_170 = object
            .key("ZeppelinApplicationConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_zeppelin_application_configuration(
            &mut object_170,
            var_169,
        );
        object_170.finish();
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_171) = &input.key {
        object.key("Key").string(var_171);
    }
    if let Some(var_172) = &input.value {
        object.key("Value").string(var_172);
    }
}

pub fn serialize_structure_input_starting_position_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputStartingPositionConfiguration,
) {
    if let Some(var_173) = &input.input_starting_position {
        object.key("InputStartingPosition").string(var_173.as_str());
    }
}

pub fn serialize_structure_s3_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Configuration,
) {
    if let Some(var_174) = &input.bucket_arn {
        object.key("BucketARN").string(var_174);
    }
    if let Some(var_175) = &input.file_key {
        object.key("FileKey").string(var_175);
    }
}

pub fn serialize_structure_run_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RunConfiguration,
) {
    if let Some(var_176) = &input.flink_run_configuration {
        let mut object_177 = object.key("FlinkRunConfiguration").start_object();
        crate::json_ser::serialize_structure_flink_run_configuration(&mut object_177, var_176);
        object_177.finish();
    }
    if let Some(var_178) = &input.sql_run_configurations {
        let mut array_179 = object.key("SqlRunConfigurations").start_array();
        for item_180 in var_178 {
            {
                let mut object_181 = array_179.value().start_object();
                crate::json_ser::serialize_structure_sql_run_configuration(
                    &mut object_181,
                    item_180,
                );
                object_181.finish();
            }
        }
        array_179.finish();
    }
    if let Some(var_182) = &input.application_restore_configuration {
        let mut object_183 = object.key("ApplicationRestoreConfiguration").start_object();
        crate::json_ser::serialize_structure_application_restore_configuration(
            &mut object_183,
            var_182,
        );
        object_183.finish();
    }
}

pub fn serialize_structure_application_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApplicationConfigurationUpdate,
) {
    if let Some(var_184) = &input.sql_application_configuration_update {
        let mut object_185 = object
            .key("SqlApplicationConfigurationUpdate")
            .start_object();
        crate::json_ser::serialize_structure_sql_application_configuration_update(
            &mut object_185,
            var_184,
        );
        object_185.finish();
    }
    if let Some(var_186) = &input.application_code_configuration_update {
        let mut object_187 = object
            .key("ApplicationCodeConfigurationUpdate")
            .start_object();
        crate::json_ser::serialize_structure_application_code_configuration_update(
            &mut object_187,
            var_186,
        );
        object_187.finish();
    }
    if let Some(var_188) = &input.flink_application_configuration_update {
        let mut object_189 = object
            .key("FlinkApplicationConfigurationUpdate")
            .start_object();
        crate::json_ser::serialize_structure_flink_application_configuration_update(
            &mut object_189,
            var_188,
        );
        object_189.finish();
    }
    if let Some(var_190) = &input.environment_property_updates {
        let mut object_191 = object.key("EnvironmentPropertyUpdates").start_object();
        crate::json_ser::serialize_structure_environment_property_updates(&mut object_191, var_190);
        object_191.finish();
    }
    if let Some(var_192) = &input.application_snapshot_configuration_update {
        let mut object_193 = object
            .key("ApplicationSnapshotConfigurationUpdate")
            .start_object();
        crate::json_ser::serialize_structure_application_snapshot_configuration_update(
            &mut object_193,
            var_192,
        );
        object_193.finish();
    }
    if let Some(var_194) = &input.vpc_configuration_updates {
        let mut array_195 = object.key("VpcConfigurationUpdates").start_array();
        for item_196 in var_194 {
            {
                let mut object_197 = array_195.value().start_object();
                crate::json_ser::serialize_structure_vpc_configuration_update(
                    &mut object_197,
                    item_196,
                );
                object_197.finish();
            }
        }
        array_195.finish();
    }
    if let Some(var_198) = &input.zeppelin_application_configuration_update {
        let mut object_199 = object
            .key("ZeppelinApplicationConfigurationUpdate")
            .start_object();
        crate::json_ser::serialize_structure_zeppelin_application_configuration_update(
            &mut object_199,
            var_198,
        );
        object_199.finish();
    }
}

pub fn serialize_structure_run_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RunConfigurationUpdate,
) {
    if let Some(var_200) = &input.flink_run_configuration {
        let mut object_201 = object.key("FlinkRunConfiguration").start_object();
        crate::json_ser::serialize_structure_flink_run_configuration(&mut object_201, var_200);
        object_201.finish();
    }
    if let Some(var_202) = &input.application_restore_configuration {
        let mut object_203 = object.key("ApplicationRestoreConfiguration").start_object();
        crate::json_ser::serialize_structure_application_restore_configuration(
            &mut object_203,
            var_202,
        );
        object_203.finish();
    }
}

pub fn serialize_structure_cloud_watch_logging_option_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CloudWatchLoggingOptionUpdate,
) {
    if let Some(var_204) = &input.cloud_watch_logging_option_id {
        object.key("CloudWatchLoggingOptionId").string(var_204);
    }
    if let Some(var_205) = &input.log_stream_arn_update {
        object.key("LogStreamARNUpdate").string(var_205);
    }
}

pub fn serialize_structure_application_maintenance_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApplicationMaintenanceConfigurationUpdate,
) {
    if let Some(var_206) = &input.application_maintenance_window_start_time_update {
        object
            .key("ApplicationMaintenanceWindowStartTimeUpdate")
            .string(var_206);
    }
}

pub fn serialize_structure_kinesis_streams_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisStreamsInput,
) {
    if let Some(var_207) = &input.resource_arn {
        object.key("ResourceARN").string(var_207);
    }
}

pub fn serialize_structure_kinesis_firehose_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisFirehoseInput,
) {
    if let Some(var_208) = &input.resource_arn {
        object.key("ResourceARN").string(var_208);
    }
}

pub fn serialize_structure_input_parallelism(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputParallelism,
) {
    if let Some(var_209) = &input.count {
        object.key("Count").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_209).into()),
        );
    }
}

pub fn serialize_structure_source_schema(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceSchema,
) {
    if let Some(var_210) = &input.record_format {
        let mut object_211 = object.key("RecordFormat").start_object();
        crate::json_ser::serialize_structure_record_format(&mut object_211, var_210);
        object_211.finish();
    }
    if let Some(var_212) = &input.record_encoding {
        object.key("RecordEncoding").string(var_212);
    }
    if let Some(var_213) = &input.record_columns {
        let mut array_214 = object.key("RecordColumns").start_array();
        for item_215 in var_213 {
            {
                let mut object_216 = array_214.value().start_object();
                crate::json_ser::serialize_structure_record_column(&mut object_216, item_215);
                object_216.finish();
            }
        }
        array_214.finish();
    }
}

pub fn serialize_structure_input_lambda_processor(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputLambdaProcessor,
) {
    if let Some(var_217) = &input.resource_arn {
        object.key("ResourceARN").string(var_217);
    }
}

pub fn serialize_structure_kinesis_streams_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisStreamsOutput,
) {
    if let Some(var_218) = &input.resource_arn {
        object.key("ResourceARN").string(var_218);
    }
}

pub fn serialize_structure_kinesis_firehose_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisFirehoseOutput,
) {
    if let Some(var_219) = &input.resource_arn {
        object.key("ResourceARN").string(var_219);
    }
}

pub fn serialize_structure_lambda_output(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaOutput,
) {
    if let Some(var_220) = &input.resource_arn {
        object.key("ResourceARN").string(var_220);
    }
}

pub fn serialize_structure_destination_schema(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DestinationSchema,
) {
    if let Some(var_221) = &input.record_format_type {
        object.key("RecordFormatType").string(var_221.as_str());
    }
}

pub fn serialize_structure_s3_reference_data_source(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3ReferenceDataSource,
) {
    if let Some(var_222) = &input.bucket_arn {
        object.key("BucketARN").string(var_222);
    }
    if let Some(var_223) = &input.file_key {
        object.key("FileKey").string(var_223);
    }
}

pub fn serialize_structure_sql_application_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlApplicationConfiguration,
) {
    if let Some(var_224) = &input.inputs {
        let mut array_225 = object.key("Inputs").start_array();
        for item_226 in var_224 {
            {
                let mut object_227 = array_225.value().start_object();
                crate::json_ser::serialize_structure_input(&mut object_227, item_226);
                object_227.finish();
            }
        }
        array_225.finish();
    }
    if let Some(var_228) = &input.outputs {
        let mut array_229 = object.key("Outputs").start_array();
        for item_230 in var_228 {
            {
                let mut object_231 = array_229.value().start_object();
                crate::json_ser::serialize_structure_output(&mut object_231, item_230);
                object_231.finish();
            }
        }
        array_229.finish();
    }
    if let Some(var_232) = &input.reference_data_sources {
        let mut array_233 = object.key("ReferenceDataSources").start_array();
        for item_234 in var_232 {
            {
                let mut object_235 = array_233.value().start_object();
                crate::json_ser::serialize_structure_reference_data_source(
                    &mut object_235,
                    item_234,
                );
                object_235.finish();
            }
        }
        array_233.finish();
    }
}

pub fn serialize_structure_flink_application_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FlinkApplicationConfiguration,
) {
    if let Some(var_236) = &input.checkpoint_configuration {
        let mut object_237 = object.key("CheckpointConfiguration").start_object();
        crate::json_ser::serialize_structure_checkpoint_configuration(&mut object_237, var_236);
        object_237.finish();
    }
    if let Some(var_238) = &input.monitoring_configuration {
        let mut object_239 = object.key("MonitoringConfiguration").start_object();
        crate::json_ser::serialize_structure_monitoring_configuration(&mut object_239, var_238);
        object_239.finish();
    }
    if let Some(var_240) = &input.parallelism_configuration {
        let mut object_241 = object.key("ParallelismConfiguration").start_object();
        crate::json_ser::serialize_structure_parallelism_configuration(&mut object_241, var_240);
        object_241.finish();
    }
}

pub fn serialize_structure_environment_properties(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EnvironmentProperties,
) {
    if let Some(var_242) = &input.property_groups {
        let mut array_243 = object.key("PropertyGroups").start_array();
        for item_244 in var_242 {
            {
                let mut object_245 = array_243.value().start_object();
                crate::json_ser::serialize_structure_property_group(&mut object_245, item_244);
                object_245.finish();
            }
        }
        array_243.finish();
    }
}

pub fn serialize_structure_application_code_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApplicationCodeConfiguration,
) {
    if let Some(var_246) = &input.code_content {
        let mut object_247 = object.key("CodeContent").start_object();
        crate::json_ser::serialize_structure_code_content(&mut object_247, var_246);
        object_247.finish();
    }
    if let Some(var_248) = &input.code_content_type {
        object.key("CodeContentType").string(var_248.as_str());
    }
}

pub fn serialize_structure_application_snapshot_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApplicationSnapshotConfiguration,
) {
    if let Some(var_249) = &input.snapshots_enabled {
        object.key("SnapshotsEnabled").boolean(*var_249);
    }
}

pub fn serialize_structure_zeppelin_application_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ZeppelinApplicationConfiguration,
) {
    if let Some(var_250) = &input.monitoring_configuration {
        let mut object_251 = object.key("MonitoringConfiguration").start_object();
        crate::json_ser::serialize_structure_zeppelin_monitoring_configuration(
            &mut object_251,
            var_250,
        );
        object_251.finish();
    }
    if let Some(var_252) = &input.catalog_configuration {
        let mut object_253 = object.key("CatalogConfiguration").start_object();
        crate::json_ser::serialize_structure_catalog_configuration(&mut object_253, var_252);
        object_253.finish();
    }
    if let Some(var_254) = &input.deploy_as_application_configuration {
        let mut object_255 = object
            .key("DeployAsApplicationConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_deploy_as_application_configuration(
            &mut object_255,
            var_254,
        );
        object_255.finish();
    }
    if let Some(var_256) = &input.custom_artifacts_configuration {
        let mut array_257 = object.key("CustomArtifactsConfiguration").start_array();
        for item_258 in var_256 {
            {
                let mut object_259 = array_257.value().start_object();
                crate::json_ser::serialize_structure_custom_artifact_configuration(
                    &mut object_259,
                    item_258,
                );
                object_259.finish();
            }
        }
        array_257.finish();
    }
}

pub fn serialize_structure_flink_run_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FlinkRunConfiguration,
) {
    if let Some(var_260) = &input.allow_non_restored_state {
        object.key("AllowNonRestoredState").boolean(*var_260);
    }
}

pub fn serialize_structure_sql_run_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlRunConfiguration,
) {
    if let Some(var_261) = &input.input_id {
        object.key("InputId").string(var_261);
    }
    if let Some(var_262) = &input.input_starting_position_configuration {
        let mut object_263 = object
            .key("InputStartingPositionConfiguration")
            .start_object();
        crate::json_ser::serialize_structure_input_starting_position_configuration(
            &mut object_263,
            var_262,
        );
        object_263.finish();
    }
}

pub fn serialize_structure_application_restore_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApplicationRestoreConfiguration,
) {
    if let Some(var_264) = &input.application_restore_type {
        object
            .key("ApplicationRestoreType")
            .string(var_264.as_str());
    }
    if let Some(var_265) = &input.snapshot_name {
        object.key("SnapshotName").string(var_265);
    }
}

pub fn serialize_structure_sql_application_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SqlApplicationConfigurationUpdate,
) {
    if let Some(var_266) = &input.input_updates {
        let mut array_267 = object.key("InputUpdates").start_array();
        for item_268 in var_266 {
            {
                let mut object_269 = array_267.value().start_object();
                crate::json_ser::serialize_structure_input_update(&mut object_269, item_268);
                object_269.finish();
            }
        }
        array_267.finish();
    }
    if let Some(var_270) = &input.output_updates {
        let mut array_271 = object.key("OutputUpdates").start_array();
        for item_272 in var_270 {
            {
                let mut object_273 = array_271.value().start_object();
                crate::json_ser::serialize_structure_output_update(&mut object_273, item_272);
                object_273.finish();
            }
        }
        array_271.finish();
    }
    if let Some(var_274) = &input.reference_data_source_updates {
        let mut array_275 = object.key("ReferenceDataSourceUpdates").start_array();
        for item_276 in var_274 {
            {
                let mut object_277 = array_275.value().start_object();
                crate::json_ser::serialize_structure_reference_data_source_update(
                    &mut object_277,
                    item_276,
                );
                object_277.finish();
            }
        }
        array_275.finish();
    }
}

pub fn serialize_structure_application_code_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApplicationCodeConfigurationUpdate,
) {
    if let Some(var_278) = &input.code_content_type_update {
        object.key("CodeContentTypeUpdate").string(var_278.as_str());
    }
    if let Some(var_279) = &input.code_content_update {
        let mut object_280 = object.key("CodeContentUpdate").start_object();
        crate::json_ser::serialize_structure_code_content_update(&mut object_280, var_279);
        object_280.finish();
    }
}

pub fn serialize_structure_flink_application_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FlinkApplicationConfigurationUpdate,
) {
    if let Some(var_281) = &input.checkpoint_configuration_update {
        let mut object_282 = object.key("CheckpointConfigurationUpdate").start_object();
        crate::json_ser::serialize_structure_checkpoint_configuration_update(
            &mut object_282,
            var_281,
        );
        object_282.finish();
    }
    if let Some(var_283) = &input.monitoring_configuration_update {
        let mut object_284 = object.key("MonitoringConfigurationUpdate").start_object();
        crate::json_ser::serialize_structure_monitoring_configuration_update(
            &mut object_284,
            var_283,
        );
        object_284.finish();
    }
    if let Some(var_285) = &input.parallelism_configuration_update {
        let mut object_286 = object.key("ParallelismConfigurationUpdate").start_object();
        crate::json_ser::serialize_structure_parallelism_configuration_update(
            &mut object_286,
            var_285,
        );
        object_286.finish();
    }
}

pub fn serialize_structure_environment_property_updates(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EnvironmentPropertyUpdates,
) {
    if let Some(var_287) = &input.property_groups {
        let mut array_288 = object.key("PropertyGroups").start_array();
        for item_289 in var_287 {
            {
                let mut object_290 = array_288.value().start_object();
                crate::json_ser::serialize_structure_property_group(&mut object_290, item_289);
                object_290.finish();
            }
        }
        array_288.finish();
    }
}

pub fn serialize_structure_application_snapshot_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ApplicationSnapshotConfigurationUpdate,
) {
    if let Some(var_291) = &input.snapshots_enabled_update {
        object.key("SnapshotsEnabledUpdate").boolean(*var_291);
    }
}

pub fn serialize_structure_vpc_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfigurationUpdate,
) {
    if let Some(var_292) = &input.vpc_configuration_id {
        object.key("VpcConfigurationId").string(var_292);
    }
    if let Some(var_293) = &input.subnet_id_updates {
        let mut array_294 = object.key("SubnetIdUpdates").start_array();
        for item_295 in var_293 {
            {
                array_294.value().string(item_295);
            }
        }
        array_294.finish();
    }
    if let Some(var_296) = &input.security_group_id_updates {
        let mut array_297 = object.key("SecurityGroupIdUpdates").start_array();
        for item_298 in var_296 {
            {
                array_297.value().string(item_298);
            }
        }
        array_297.finish();
    }
}

pub fn serialize_structure_zeppelin_application_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ZeppelinApplicationConfigurationUpdate,
) {
    if let Some(var_299) = &input.monitoring_configuration_update {
        let mut object_300 = object.key("MonitoringConfigurationUpdate").start_object();
        crate::json_ser::serialize_structure_zeppelin_monitoring_configuration_update(
            &mut object_300,
            var_299,
        );
        object_300.finish();
    }
    if let Some(var_301) = &input.catalog_configuration_update {
        let mut object_302 = object.key("CatalogConfigurationUpdate").start_object();
        crate::json_ser::serialize_structure_catalog_configuration_update(&mut object_302, var_301);
        object_302.finish();
    }
    if let Some(var_303) = &input.deploy_as_application_configuration_update {
        let mut object_304 = object
            .key("DeployAsApplicationConfigurationUpdate")
            .start_object();
        crate::json_ser::serialize_structure_deploy_as_application_configuration_update(
            &mut object_304,
            var_303,
        );
        object_304.finish();
    }
    if let Some(var_305) = &input.custom_artifacts_configuration_update {
        let mut array_306 = object
            .key("CustomArtifactsConfigurationUpdate")
            .start_array();
        for item_307 in var_305 {
            {
                let mut object_308 = array_306.value().start_object();
                crate::json_ser::serialize_structure_custom_artifact_configuration(
                    &mut object_308,
                    item_307,
                );
                object_308.finish();
            }
        }
        array_306.finish();
    }
}

pub fn serialize_structure_record_format(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecordFormat,
) {
    if let Some(var_309) = &input.record_format_type {
        object.key("RecordFormatType").string(var_309.as_str());
    }
    if let Some(var_310) = &input.mapping_parameters {
        let mut object_311 = object.key("MappingParameters").start_object();
        crate::json_ser::serialize_structure_mapping_parameters(&mut object_311, var_310);
        object_311.finish();
    }
}

pub fn serialize_structure_record_column(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RecordColumn,
) {
    if let Some(var_312) = &input.name {
        object.key("Name").string(var_312);
    }
    if let Some(var_313) = &input.mapping {
        object.key("Mapping").string(var_313);
    }
    if let Some(var_314) = &input.sql_type {
        object.key("SqlType").string(var_314);
    }
}

pub fn serialize_structure_checkpoint_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CheckpointConfiguration,
) {
    if let Some(var_315) = &input.configuration_type {
        object.key("ConfigurationType").string(var_315.as_str());
    }
    if let Some(var_316) = &input.checkpointing_enabled {
        object.key("CheckpointingEnabled").boolean(*var_316);
    }
    if let Some(var_317) = &input.checkpoint_interval {
        object.key("CheckpointInterval").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_317).into()),
        );
    }
    if let Some(var_318) = &input.min_pause_between_checkpoints {
        object.key("MinPauseBetweenCheckpoints").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_318).into()),
        );
    }
}

pub fn serialize_structure_monitoring_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringConfiguration,
) {
    if let Some(var_319) = &input.configuration_type {
        object.key("ConfigurationType").string(var_319.as_str());
    }
    if let Some(var_320) = &input.metrics_level {
        object.key("MetricsLevel").string(var_320.as_str());
    }
    if let Some(var_321) = &input.log_level {
        object.key("LogLevel").string(var_321.as_str());
    }
}

pub fn serialize_structure_parallelism_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParallelismConfiguration,
) {
    if let Some(var_322) = &input.configuration_type {
        object.key("ConfigurationType").string(var_322.as_str());
    }
    if let Some(var_323) = &input.parallelism {
        object.key("Parallelism").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_323).into()),
        );
    }
    if let Some(var_324) = &input.parallelism_per_kpu {
        object.key("ParallelismPerKPU").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_324).into()),
        );
    }
    if let Some(var_325) = &input.auto_scaling_enabled {
        object.key("AutoScalingEnabled").boolean(*var_325);
    }
}

pub fn serialize_structure_property_group(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PropertyGroup,
) {
    if let Some(var_326) = &input.property_group_id {
        object.key("PropertyGroupId").string(var_326);
    }
    if let Some(var_327) = &input.property_map {
        let mut object_328 = object.key("PropertyMap").start_object();
        for (key_329, value_330) in var_327 {
            {
                object_328.key(key_329).string(value_330);
            }
        }
        object_328.finish();
    }
}

pub fn serialize_structure_code_content(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeContent,
) {
    if let Some(var_331) = &input.text_content {
        object.key("TextContent").string(var_331);
    }
    if let Some(var_332) = &input.zip_file_content {
        object
            .key("ZipFileContent")
            .string_unchecked(&smithy_types::base64::encode(var_332));
    }
    if let Some(var_333) = &input.s3_content_location {
        let mut object_334 = object.key("S3ContentLocation").start_object();
        crate::json_ser::serialize_structure_s3_content_location(&mut object_334, var_333);
        object_334.finish();
    }
}

pub fn serialize_structure_zeppelin_monitoring_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ZeppelinMonitoringConfiguration,
) {
    if let Some(var_335) = &input.log_level {
        object.key("LogLevel").string(var_335.as_str());
    }
}

pub fn serialize_structure_catalog_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogConfiguration,
) {
    if let Some(var_336) = &input.glue_data_catalog_configuration {
        let mut object_337 = object.key("GlueDataCatalogConfiguration").start_object();
        crate::json_ser::serialize_structure_glue_data_catalog_configuration(
            &mut object_337,
            var_336,
        );
        object_337.finish();
    }
}

pub fn serialize_structure_deploy_as_application_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeployAsApplicationConfiguration,
) {
    if let Some(var_338) = &input.s3_content_location {
        let mut object_339 = object.key("S3ContentLocation").start_object();
        crate::json_ser::serialize_structure_s3_content_base_location(&mut object_339, var_338);
        object_339.finish();
    }
}

pub fn serialize_structure_custom_artifact_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CustomArtifactConfiguration,
) {
    if let Some(var_340) = &input.artifact_type {
        object.key("ArtifactType").string(var_340.as_str());
    }
    if let Some(var_341) = &input.s3_content_location {
        let mut object_342 = object.key("S3ContentLocation").start_object();
        crate::json_ser::serialize_structure_s3_content_location(&mut object_342, var_341);
        object_342.finish();
    }
    if let Some(var_343) = &input.maven_reference {
        let mut object_344 = object.key("MavenReference").start_object();
        crate::json_ser::serialize_structure_maven_reference(&mut object_344, var_343);
        object_344.finish();
    }
}

pub fn serialize_structure_input_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputUpdate,
) {
    if let Some(var_345) = &input.input_id {
        object.key("InputId").string(var_345);
    }
    if let Some(var_346) = &input.name_prefix_update {
        object.key("NamePrefixUpdate").string(var_346);
    }
    if let Some(var_347) = &input.input_processing_configuration_update {
        let mut object_348 = object
            .key("InputProcessingConfigurationUpdate")
            .start_object();
        crate::json_ser::serialize_structure_input_processing_configuration_update(
            &mut object_348,
            var_347,
        );
        object_348.finish();
    }
    if let Some(var_349) = &input.kinesis_streams_input_update {
        let mut object_350 = object.key("KinesisStreamsInputUpdate").start_object();
        crate::json_ser::serialize_structure_kinesis_streams_input_update(&mut object_350, var_349);
        object_350.finish();
    }
    if let Some(var_351) = &input.kinesis_firehose_input_update {
        let mut object_352 = object.key("KinesisFirehoseInputUpdate").start_object();
        crate::json_ser::serialize_structure_kinesis_firehose_input_update(
            &mut object_352,
            var_351,
        );
        object_352.finish();
    }
    if let Some(var_353) = &input.input_schema_update {
        let mut object_354 = object.key("InputSchemaUpdate").start_object();
        crate::json_ser::serialize_structure_input_schema_update(&mut object_354, var_353);
        object_354.finish();
    }
    if let Some(var_355) = &input.input_parallelism_update {
        let mut object_356 = object.key("InputParallelismUpdate").start_object();
        crate::json_ser::serialize_structure_input_parallelism_update(&mut object_356, var_355);
        object_356.finish();
    }
}

pub fn serialize_structure_output_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputUpdate,
) {
    if let Some(var_357) = &input.output_id {
        object.key("OutputId").string(var_357);
    }
    if let Some(var_358) = &input.name_update {
        object.key("NameUpdate").string(var_358);
    }
    if let Some(var_359) = &input.kinesis_streams_output_update {
        let mut object_360 = object.key("KinesisStreamsOutputUpdate").start_object();
        crate::json_ser::serialize_structure_kinesis_streams_output_update(
            &mut object_360,
            var_359,
        );
        object_360.finish();
    }
    if let Some(var_361) = &input.kinesis_firehose_output_update {
        let mut object_362 = object.key("KinesisFirehoseOutputUpdate").start_object();
        crate::json_ser::serialize_structure_kinesis_firehose_output_update(
            &mut object_362,
            var_361,
        );
        object_362.finish();
    }
    if let Some(var_363) = &input.lambda_output_update {
        let mut object_364 = object.key("LambdaOutputUpdate").start_object();
        crate::json_ser::serialize_structure_lambda_output_update(&mut object_364, var_363);
        object_364.finish();
    }
    if let Some(var_365) = &input.destination_schema_update {
        let mut object_366 = object.key("DestinationSchemaUpdate").start_object();
        crate::json_ser::serialize_structure_destination_schema(&mut object_366, var_365);
        object_366.finish();
    }
}

pub fn serialize_structure_reference_data_source_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReferenceDataSourceUpdate,
) {
    if let Some(var_367) = &input.reference_id {
        object.key("ReferenceId").string(var_367);
    }
    if let Some(var_368) = &input.table_name_update {
        object.key("TableNameUpdate").string(var_368);
    }
    if let Some(var_369) = &input.s3_reference_data_source_update {
        let mut object_370 = object.key("S3ReferenceDataSourceUpdate").start_object();
        crate::json_ser::serialize_structure_s3_reference_data_source_update(
            &mut object_370,
            var_369,
        );
        object_370.finish();
    }
    if let Some(var_371) = &input.reference_schema_update {
        let mut object_372 = object.key("ReferenceSchemaUpdate").start_object();
        crate::json_ser::serialize_structure_source_schema(&mut object_372, var_371);
        object_372.finish();
    }
}

pub fn serialize_structure_code_content_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeContentUpdate,
) {
    if let Some(var_373) = &input.text_content_update {
        object.key("TextContentUpdate").string(var_373);
    }
    if let Some(var_374) = &input.zip_file_content_update {
        object
            .key("ZipFileContentUpdate")
            .string_unchecked(&smithy_types::base64::encode(var_374));
    }
    if let Some(var_375) = &input.s3_content_location_update {
        let mut object_376 = object.key("S3ContentLocationUpdate").start_object();
        crate::json_ser::serialize_structure_s3_content_location_update(&mut object_376, var_375);
        object_376.finish();
    }
}

pub fn serialize_structure_checkpoint_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CheckpointConfigurationUpdate,
) {
    if let Some(var_377) = &input.configuration_type_update {
        object
            .key("ConfigurationTypeUpdate")
            .string(var_377.as_str());
    }
    if let Some(var_378) = &input.checkpointing_enabled_update {
        object.key("CheckpointingEnabledUpdate").boolean(*var_378);
    }
    if let Some(var_379) = &input.checkpoint_interval_update {
        object.key("CheckpointIntervalUpdate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_379).into()),
        );
    }
    if let Some(var_380) = &input.min_pause_between_checkpoints_update {
        object.key("MinPauseBetweenCheckpointsUpdate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_380).into()),
        );
    }
}

pub fn serialize_structure_monitoring_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MonitoringConfigurationUpdate,
) {
    if let Some(var_381) = &input.configuration_type_update {
        object
            .key("ConfigurationTypeUpdate")
            .string(var_381.as_str());
    }
    if let Some(var_382) = &input.metrics_level_update {
        object.key("MetricsLevelUpdate").string(var_382.as_str());
    }
    if let Some(var_383) = &input.log_level_update {
        object.key("LogLevelUpdate").string(var_383.as_str());
    }
}

pub fn serialize_structure_parallelism_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ParallelismConfigurationUpdate,
) {
    if let Some(var_384) = &input.configuration_type_update {
        object
            .key("ConfigurationTypeUpdate")
            .string(var_384.as_str());
    }
    if let Some(var_385) = &input.parallelism_update {
        object.key("ParallelismUpdate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_385).into()),
        );
    }
    if let Some(var_386) = &input.parallelism_per_kpu_update {
        object.key("ParallelismPerKPUUpdate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_386).into()),
        );
    }
    if let Some(var_387) = &input.auto_scaling_enabled_update {
        object.key("AutoScalingEnabledUpdate").boolean(*var_387);
    }
}

pub fn serialize_structure_zeppelin_monitoring_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ZeppelinMonitoringConfigurationUpdate,
) {
    if let Some(var_388) = &input.log_level_update {
        object.key("LogLevelUpdate").string(var_388.as_str());
    }
}

pub fn serialize_structure_catalog_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CatalogConfigurationUpdate,
) {
    if let Some(var_389) = &input.glue_data_catalog_configuration_update {
        let mut object_390 = object
            .key("GlueDataCatalogConfigurationUpdate")
            .start_object();
        crate::json_ser::serialize_structure_glue_data_catalog_configuration_update(
            &mut object_390,
            var_389,
        );
        object_390.finish();
    }
}

pub fn serialize_structure_deploy_as_application_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeployAsApplicationConfigurationUpdate,
) {
    if let Some(var_391) = &input.s3_content_location_update {
        let mut object_392 = object.key("S3ContentLocationUpdate").start_object();
        crate::json_ser::serialize_structure_s3_content_base_location_update(
            &mut object_392,
            var_391,
        );
        object_392.finish();
    }
}

pub fn serialize_structure_mapping_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MappingParameters,
) {
    if let Some(var_393) = &input.json_mapping_parameters {
        let mut object_394 = object.key("JSONMappingParameters").start_object();
        crate::json_ser::serialize_structure_json_mapping_parameters(&mut object_394, var_393);
        object_394.finish();
    }
    if let Some(var_395) = &input.csv_mapping_parameters {
        let mut object_396 = object.key("CSVMappingParameters").start_object();
        crate::json_ser::serialize_structure_csv_mapping_parameters(&mut object_396, var_395);
        object_396.finish();
    }
}

pub fn serialize_structure_s3_content_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3ContentLocation,
) {
    if let Some(var_397) = &input.bucket_arn {
        object.key("BucketARN").string(var_397);
    }
    if let Some(var_398) = &input.file_key {
        object.key("FileKey").string(var_398);
    }
    if let Some(var_399) = &input.object_version {
        object.key("ObjectVersion").string(var_399);
    }
}

pub fn serialize_structure_glue_data_catalog_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlueDataCatalogConfiguration,
) {
    if let Some(var_400) = &input.database_arn {
        object.key("DatabaseARN").string(var_400);
    }
}

pub fn serialize_structure_s3_content_base_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3ContentBaseLocation,
) {
    if let Some(var_401) = &input.bucket_arn {
        object.key("BucketARN").string(var_401);
    }
    if let Some(var_402) = &input.base_path {
        object.key("BasePath").string(var_402);
    }
}

pub fn serialize_structure_maven_reference(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::MavenReference,
) {
    if let Some(var_403) = &input.group_id {
        object.key("GroupId").string(var_403);
    }
    if let Some(var_404) = &input.artifact_id {
        object.key("ArtifactId").string(var_404);
    }
    if let Some(var_405) = &input.version {
        object.key("Version").string(var_405);
    }
}

pub fn serialize_structure_input_processing_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputProcessingConfigurationUpdate,
) {
    if let Some(var_406) = &input.input_lambda_processor_update {
        let mut object_407 = object.key("InputLambdaProcessorUpdate").start_object();
        crate::json_ser::serialize_structure_input_lambda_processor_update(
            &mut object_407,
            var_406,
        );
        object_407.finish();
    }
}

pub fn serialize_structure_kinesis_streams_input_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisStreamsInputUpdate,
) {
    if let Some(var_408) = &input.resource_arn_update {
        object.key("ResourceARNUpdate").string(var_408);
    }
}

pub fn serialize_structure_kinesis_firehose_input_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisFirehoseInputUpdate,
) {
    if let Some(var_409) = &input.resource_arn_update {
        object.key("ResourceARNUpdate").string(var_409);
    }
}

pub fn serialize_structure_input_schema_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputSchemaUpdate,
) {
    if let Some(var_410) = &input.record_format_update {
        let mut object_411 = object.key("RecordFormatUpdate").start_object();
        crate::json_ser::serialize_structure_record_format(&mut object_411, var_410);
        object_411.finish();
    }
    if let Some(var_412) = &input.record_encoding_update {
        object.key("RecordEncodingUpdate").string(var_412);
    }
    if let Some(var_413) = &input.record_column_updates {
        let mut array_414 = object.key("RecordColumnUpdates").start_array();
        for item_415 in var_413 {
            {
                let mut object_416 = array_414.value().start_object();
                crate::json_ser::serialize_structure_record_column(&mut object_416, item_415);
                object_416.finish();
            }
        }
        array_414.finish();
    }
}

pub fn serialize_structure_input_parallelism_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputParallelismUpdate,
) {
    if let Some(var_417) = &input.count_update {
        object.key("CountUpdate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_417).into()),
        );
    }
}

pub fn serialize_structure_kinesis_streams_output_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisStreamsOutputUpdate,
) {
    if let Some(var_418) = &input.resource_arn_update {
        object.key("ResourceARNUpdate").string(var_418);
    }
}

pub fn serialize_structure_kinesis_firehose_output_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KinesisFirehoseOutputUpdate,
) {
    if let Some(var_419) = &input.resource_arn_update {
        object.key("ResourceARNUpdate").string(var_419);
    }
}

pub fn serialize_structure_lambda_output_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LambdaOutputUpdate,
) {
    if let Some(var_420) = &input.resource_arn_update {
        object.key("ResourceARNUpdate").string(var_420);
    }
}

pub fn serialize_structure_s3_reference_data_source_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3ReferenceDataSourceUpdate,
) {
    if let Some(var_421) = &input.bucket_arn_update {
        object.key("BucketARNUpdate").string(var_421);
    }
    if let Some(var_422) = &input.file_key_update {
        object.key("FileKeyUpdate").string(var_422);
    }
}

pub fn serialize_structure_s3_content_location_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3ContentLocationUpdate,
) {
    if let Some(var_423) = &input.bucket_arn_update {
        object.key("BucketARNUpdate").string(var_423);
    }
    if let Some(var_424) = &input.file_key_update {
        object.key("FileKeyUpdate").string(var_424);
    }
    if let Some(var_425) = &input.object_version_update {
        object.key("ObjectVersionUpdate").string(var_425);
    }
}

pub fn serialize_structure_glue_data_catalog_configuration_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::GlueDataCatalogConfigurationUpdate,
) {
    if let Some(var_426) = &input.database_arn_update {
        object.key("DatabaseARNUpdate").string(var_426);
    }
}

pub fn serialize_structure_s3_content_base_location_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3ContentBaseLocationUpdate,
) {
    if let Some(var_427) = &input.bucket_arn_update {
        object.key("BucketARNUpdate").string(var_427);
    }
    if let Some(var_428) = &input.base_path_update {
        object.key("BasePathUpdate").string(var_428);
    }
}

pub fn serialize_structure_json_mapping_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::JsonMappingParameters,
) {
    if let Some(var_429) = &input.record_row_path {
        object.key("RecordRowPath").string(var_429);
    }
}

pub fn serialize_structure_csv_mapping_parameters(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CsvMappingParameters,
) {
    if let Some(var_430) = &input.record_row_delimiter {
        object.key("RecordRowDelimiter").string(var_430);
    }
    if let Some(var_431) = &input.record_column_delimiter {
        object.key("RecordColumnDelimiter").string(var_431);
    }
}

pub fn serialize_structure_input_lambda_processor_update(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InputLambdaProcessorUpdate,
) {
    if let Some(var_432) = &input.resource_arn_update {
        object.key("ResourceARNUpdate").string(var_432);
    }
}
