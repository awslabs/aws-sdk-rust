// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateApplicationMaintenanceConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    #[doc(hidden)]
    pub application_arn: std::option::Option<std::string::String>,
    /// <p>The application maintenance configuration description after the update.</p>
    #[doc(hidden)]
    pub application_maintenance_configuration_description:
        std::option::Option<crate::model::ApplicationMaintenanceConfigurationDescription>,
    _request_id: Option<String>,
}
impl UpdateApplicationMaintenanceConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn application_arn(&self) -> std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The application maintenance configuration description after the update.</p>
    pub fn application_maintenance_configuration_description(
        &self,
    ) -> std::option::Option<&crate::model::ApplicationMaintenanceConfigurationDescription> {
        self.application_maintenance_configuration_description
            .as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateApplicationMaintenanceConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateApplicationMaintenanceConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateApplicationMaintenanceConfigurationOutput`](crate::output::UpdateApplicationMaintenanceConfigurationOutput).
    pub fn builder() -> crate::output::update_application_maintenance_configuration_output::Builder
    {
        crate::output::update_application_maintenance_configuration_output::Builder::default()
    }
}

/// See [`UpdateApplicationMaintenanceConfigurationOutput`](crate::output::UpdateApplicationMaintenanceConfigurationOutput).
pub mod update_application_maintenance_configuration_output {

    /// A builder for [`UpdateApplicationMaintenanceConfigurationOutput`](crate::output::UpdateApplicationMaintenanceConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_arn: std::option::Option<std::string::String>,
        pub(crate) application_maintenance_configuration_description:
            std::option::Option<crate::model::ApplicationMaintenanceConfigurationDescription>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the application.</p>
        pub fn application_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.application_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the application.</p>
        pub fn set_application_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.application_arn = input;
            self
        }
        /// <p>The application maintenance configuration description after the update.</p>
        pub fn application_maintenance_configuration_description(
            mut self,
            input: crate::model::ApplicationMaintenanceConfigurationDescription,
        ) -> Self {
            self.application_maintenance_configuration_description = Some(input);
            self
        }
        /// <p>The application maintenance configuration description after the update.</p>
        pub fn set_application_maintenance_configuration_description(
            mut self,
            input: std::option::Option<
                crate::model::ApplicationMaintenanceConfigurationDescription,
            >,
        ) -> Self {
            self.application_maintenance_configuration_description = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateApplicationMaintenanceConfigurationOutput`](crate::output::UpdateApplicationMaintenanceConfigurationOutput).
        pub fn build(self) -> crate::output::UpdateApplicationMaintenanceConfigurationOutput {
            crate::output::UpdateApplicationMaintenanceConfigurationOutput {
                application_arn: self.application_arn,
                application_maintenance_configuration_description: self
                    .application_maintenance_configuration_description,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateApplicationOutput {
    /// <p>Describes application updates.</p>
    #[doc(hidden)]
    pub application_detail: std::option::Option<crate::model::ApplicationDetail>,
    _request_id: Option<String>,
}
impl UpdateApplicationOutput {
    /// <p>Describes application updates.</p>
    pub fn application_detail(&self) -> std::option::Option<&crate::model::ApplicationDetail> {
        self.application_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateApplicationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateApplicationOutput`](crate::output::UpdateApplicationOutput).
    pub fn builder() -> crate::output::update_application_output::Builder {
        crate::output::update_application_output::Builder::default()
    }
}

/// See [`UpdateApplicationOutput`](crate::output::UpdateApplicationOutput).
pub mod update_application_output {

    /// A builder for [`UpdateApplicationOutput`](crate::output::UpdateApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_detail: std::option::Option<crate::model::ApplicationDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Describes application updates.</p>
        pub fn application_detail(mut self, input: crate::model::ApplicationDetail) -> Self {
            self.application_detail = Some(input);
            self
        }
        /// <p>Describes application updates.</p>
        pub fn set_application_detail(
            mut self,
            input: std::option::Option<crate::model::ApplicationDetail>,
        ) -> Self {
            self.application_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateApplicationOutput`](crate::output::UpdateApplicationOutput).
        pub fn build(self) -> crate::output::UpdateApplicationOutput {
            crate::output::UpdateApplicationOutput {
                application_detail: self.application_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StopApplicationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StopApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StopApplicationOutput {
    /// Creates a new builder-style object to manufacture [`StopApplicationOutput`](crate::output::StopApplicationOutput).
    pub fn builder() -> crate::output::stop_application_output::Builder {
        crate::output::stop_application_output::Builder::default()
    }
}

/// See [`StopApplicationOutput`](crate::output::StopApplicationOutput).
pub mod stop_application_output {

    /// A builder for [`StopApplicationOutput`](crate::output::StopApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StopApplicationOutput`](crate::output::StopApplicationOutput).
        pub fn build(self) -> crate::output::StopApplicationOutput {
            crate::output::StopApplicationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartApplicationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for StartApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartApplicationOutput {
    /// Creates a new builder-style object to manufacture [`StartApplicationOutput`](crate::output::StartApplicationOutput).
    pub fn builder() -> crate::output::start_application_output::Builder {
        crate::output::start_application_output::Builder::default()
    }
}

/// See [`StartApplicationOutput`](crate::output::StartApplicationOutput).
pub mod start_application_output {

    /// A builder for [`StartApplicationOutput`](crate::output::StartApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartApplicationOutput`](crate::output::StartApplicationOutput).
        pub fn build(self) -> crate::output::StartApplicationOutput {
            crate::output::StartApplicationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RollbackApplicationOutput {
    /// <p>Describes the application, including the application Amazon Resource Name (ARN), status, latest version, and input and output configurations.</p>
    #[doc(hidden)]
    pub application_detail: std::option::Option<crate::model::ApplicationDetail>,
    _request_id: Option<String>,
}
impl RollbackApplicationOutput {
    /// <p>Describes the application, including the application Amazon Resource Name (ARN), status, latest version, and input and output configurations.</p>
    pub fn application_detail(&self) -> std::option::Option<&crate::model::ApplicationDetail> {
        self.application_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for RollbackApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RollbackApplicationOutput {
    /// Creates a new builder-style object to manufacture [`RollbackApplicationOutput`](crate::output::RollbackApplicationOutput).
    pub fn builder() -> crate::output::rollback_application_output::Builder {
        crate::output::rollback_application_output::Builder::default()
    }
}

/// See [`RollbackApplicationOutput`](crate::output::RollbackApplicationOutput).
pub mod rollback_application_output {

    /// A builder for [`RollbackApplicationOutput`](crate::output::RollbackApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_detail: std::option::Option<crate::model::ApplicationDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Describes the application, including the application Amazon Resource Name (ARN), status, latest version, and input and output configurations.</p>
        pub fn application_detail(mut self, input: crate::model::ApplicationDetail) -> Self {
            self.application_detail = Some(input);
            self
        }
        /// <p>Describes the application, including the application Amazon Resource Name (ARN), status, latest version, and input and output configurations.</p>
        pub fn set_application_detail(
            mut self,
            input: std::option::Option<crate::model::ApplicationDetail>,
        ) -> Self {
            self.application_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`RollbackApplicationOutput`](crate::output::RollbackApplicationOutput).
        pub fn build(self) -> crate::output::RollbackApplicationOutput {
            crate::output::RollbackApplicationOutput {
                application_detail: self.application_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>The key-value tags assigned to the application.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>The key-value tags assigned to the application.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The key-value tags assigned to the application.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>The key-value tags assigned to the application.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListApplicationVersionsOutput {
    /// <p>A list of the application versions and the associated configuration summaries. The list includes application versions that were rolled back.</p>
    /// <p>To get the complete description of a specific application version, invoke the <code>DescribeApplicationVersion</code> operation.</p>
    #[doc(hidden)]
    pub application_version_summaries:
        std::option::Option<std::vec::Vec<crate::model::ApplicationVersionSummary>>,
    /// <p>The pagination token for the next set of results, or <code>null</code> if there are no additional results. To retrieve the next set of items, pass this token into a subsequent invocation of this operation. For more information about pagination, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/pagination.html">Using the Amazon Command Line Interface's Pagination Options</a>.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListApplicationVersionsOutput {
    /// <p>A list of the application versions and the associated configuration summaries. The list includes application versions that were rolled back.</p>
    /// <p>To get the complete description of a specific application version, invoke the <code>DescribeApplicationVersion</code> operation.</p>
    pub fn application_version_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::ApplicationVersionSummary]> {
        self.application_version_summaries.as_deref()
    }
    /// <p>The pagination token for the next set of results, or <code>null</code> if there are no additional results. To retrieve the next set of items, pass this token into a subsequent invocation of this operation. For more information about pagination, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/pagination.html">Using the Amazon Command Line Interface's Pagination Options</a>.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListApplicationVersionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListApplicationVersionsOutput {
    /// Creates a new builder-style object to manufacture [`ListApplicationVersionsOutput`](crate::output::ListApplicationVersionsOutput).
    pub fn builder() -> crate::output::list_application_versions_output::Builder {
        crate::output::list_application_versions_output::Builder::default()
    }
}

/// See [`ListApplicationVersionsOutput`](crate::output::ListApplicationVersionsOutput).
pub mod list_application_versions_output {

    /// A builder for [`ListApplicationVersionsOutput`](crate::output::ListApplicationVersionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_version_summaries:
            std::option::Option<std::vec::Vec<crate::model::ApplicationVersionSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `application_version_summaries`.
        ///
        /// To override the contents of this collection use [`set_application_version_summaries`](Self::set_application_version_summaries).
        ///
        /// <p>A list of the application versions and the associated configuration summaries. The list includes application versions that were rolled back.</p>
        /// <p>To get the complete description of a specific application version, invoke the <code>DescribeApplicationVersion</code> operation.</p>
        pub fn application_version_summaries(
            mut self,
            input: crate::model::ApplicationVersionSummary,
        ) -> Self {
            let mut v = self.application_version_summaries.unwrap_or_default();
            v.push(input);
            self.application_version_summaries = Some(v);
            self
        }
        /// <p>A list of the application versions and the associated configuration summaries. The list includes application versions that were rolled back.</p>
        /// <p>To get the complete description of a specific application version, invoke the <code>DescribeApplicationVersion</code> operation.</p>
        pub fn set_application_version_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ApplicationVersionSummary>>,
        ) -> Self {
            self.application_version_summaries = input;
            self
        }
        /// <p>The pagination token for the next set of results, or <code>null</code> if there are no additional results. To retrieve the next set of items, pass this token into a subsequent invocation of this operation. For more information about pagination, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/pagination.html">Using the Amazon Command Line Interface's Pagination Options</a>.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token for the next set of results, or <code>null</code> if there are no additional results. To retrieve the next set of items, pass this token into a subsequent invocation of this operation. For more information about pagination, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/pagination.html">Using the Amazon Command Line Interface's Pagination Options</a>.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListApplicationVersionsOutput`](crate::output::ListApplicationVersionsOutput).
        pub fn build(self) -> crate::output::ListApplicationVersionsOutput {
            crate::output::ListApplicationVersionsOutput {
                application_version_summaries: self.application_version_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListApplicationSnapshotsOutput {
    /// <p>A collection of objects containing information about the application snapshots.</p>
    #[doc(hidden)]
    pub snapshot_summaries: std::option::Option<std::vec::Vec<crate::model::SnapshotDetails>>,
    /// <p>The token for the next set of results, or <code>null</code> if there are no additional results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListApplicationSnapshotsOutput {
    /// <p>A collection of objects containing information about the application snapshots.</p>
    pub fn snapshot_summaries(&self) -> std::option::Option<&[crate::model::SnapshotDetails]> {
        self.snapshot_summaries.as_deref()
    }
    /// <p>The token for the next set of results, or <code>null</code> if there are no additional results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListApplicationSnapshotsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListApplicationSnapshotsOutput {
    /// Creates a new builder-style object to manufacture [`ListApplicationSnapshotsOutput`](crate::output::ListApplicationSnapshotsOutput).
    pub fn builder() -> crate::output::list_application_snapshots_output::Builder {
        crate::output::list_application_snapshots_output::Builder::default()
    }
}

/// See [`ListApplicationSnapshotsOutput`](crate::output::ListApplicationSnapshotsOutput).
pub mod list_application_snapshots_output {

    /// A builder for [`ListApplicationSnapshotsOutput`](crate::output::ListApplicationSnapshotsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) snapshot_summaries:
            std::option::Option<std::vec::Vec<crate::model::SnapshotDetails>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `snapshot_summaries`.
        ///
        /// To override the contents of this collection use [`set_snapshot_summaries`](Self::set_snapshot_summaries).
        ///
        /// <p>A collection of objects containing information about the application snapshots.</p>
        pub fn snapshot_summaries(mut self, input: crate::model::SnapshotDetails) -> Self {
            let mut v = self.snapshot_summaries.unwrap_or_default();
            v.push(input);
            self.snapshot_summaries = Some(v);
            self
        }
        /// <p>A collection of objects containing information about the application snapshots.</p>
        pub fn set_snapshot_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SnapshotDetails>>,
        ) -> Self {
            self.snapshot_summaries = input;
            self
        }
        /// <p>The token for the next set of results, or <code>null</code> if there are no additional results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token for the next set of results, or <code>null</code> if there are no additional results.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListApplicationSnapshotsOutput`](crate::output::ListApplicationSnapshotsOutput).
        pub fn build(self) -> crate::output::ListApplicationSnapshotsOutput {
            crate::output::ListApplicationSnapshotsOutput {
                snapshot_summaries: self.snapshot_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListApplicationsOutput {
    /// <p>A list of <code>ApplicationSummary</code> objects.</p>
    #[doc(hidden)]
    pub application_summaries: std::option::Option<std::vec::Vec<crate::model::ApplicationSummary>>,
    /// <p>The pagination token for the next set of results, or <code>null</code> if there are no additional results. Pass this token into a subsequent command to retrieve the next set of items For more information about pagination, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/pagination.html">Using the Amazon Command Line Interface's Pagination Options</a>.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListApplicationsOutput {
    /// <p>A list of <code>ApplicationSummary</code> objects.</p>
    pub fn application_summaries(
        &self,
    ) -> std::option::Option<&[crate::model::ApplicationSummary]> {
        self.application_summaries.as_deref()
    }
    /// <p>The pagination token for the next set of results, or <code>null</code> if there are no additional results. Pass this token into a subsequent command to retrieve the next set of items For more information about pagination, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/pagination.html">Using the Amazon Command Line Interface's Pagination Options</a>.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListApplicationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListApplicationsOutput {
    /// Creates a new builder-style object to manufacture [`ListApplicationsOutput`](crate::output::ListApplicationsOutput).
    pub fn builder() -> crate::output::list_applications_output::Builder {
        crate::output::list_applications_output::Builder::default()
    }
}

/// See [`ListApplicationsOutput`](crate::output::ListApplicationsOutput).
pub mod list_applications_output {

    /// A builder for [`ListApplicationsOutput`](crate::output::ListApplicationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_summaries:
            std::option::Option<std::vec::Vec<crate::model::ApplicationSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `application_summaries`.
        ///
        /// To override the contents of this collection use [`set_application_summaries`](Self::set_application_summaries).
        ///
        /// <p>A list of <code>ApplicationSummary</code> objects.</p>
        pub fn application_summaries(mut self, input: crate::model::ApplicationSummary) -> Self {
            let mut v = self.application_summaries.unwrap_or_default();
            v.push(input);
            self.application_summaries = Some(v);
            self
        }
        /// <p>A list of <code>ApplicationSummary</code> objects.</p>
        pub fn set_application_summaries(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ApplicationSummary>>,
        ) -> Self {
            self.application_summaries = input;
            self
        }
        /// <p>The pagination token for the next set of results, or <code>null</code> if there are no additional results. Pass this token into a subsequent command to retrieve the next set of items For more information about pagination, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/pagination.html">Using the Amazon Command Line Interface's Pagination Options</a>.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The pagination token for the next set of results, or <code>null</code> if there are no additional results. Pass this token into a subsequent command to retrieve the next set of items For more information about pagination, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/pagination.html">Using the Amazon Command Line Interface's Pagination Options</a>.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListApplicationsOutput`](crate::output::ListApplicationsOutput).
        pub fn build(self) -> crate::output::ListApplicationsOutput {
            crate::output::ListApplicationsOutput {
                application_summaries: self.application_summaries,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DiscoverInputSchemaOutput {
    /// <p>The schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.</p>
    #[doc(hidden)]
    pub input_schema: std::option::Option<crate::model::SourceSchema>,
    /// <p>An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).</p>
    #[doc(hidden)]
    pub parsed_input_records:
        std::option::Option<std::vec::Vec<std::vec::Vec<std::string::String>>>,
    /// <p>The stream data that was modified by the processor specified in the <code>InputProcessingConfiguration</code> parameter.</p>
    #[doc(hidden)]
    pub processed_input_records: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The raw stream data that was sampled to infer the schema.</p>
    #[doc(hidden)]
    pub raw_input_records: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl DiscoverInputSchemaOutput {
    /// <p>The schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.</p>
    pub fn input_schema(&self) -> std::option::Option<&crate::model::SourceSchema> {
        self.input_schema.as_ref()
    }
    /// <p>An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).</p>
    pub fn parsed_input_records(
        &self,
    ) -> std::option::Option<&[std::vec::Vec<std::string::String>]> {
        self.parsed_input_records.as_deref()
    }
    /// <p>The stream data that was modified by the processor specified in the <code>InputProcessingConfiguration</code> parameter.</p>
    pub fn processed_input_records(&self) -> std::option::Option<&[std::string::String]> {
        self.processed_input_records.as_deref()
    }
    /// <p>The raw stream data that was sampled to infer the schema.</p>
    pub fn raw_input_records(&self) -> std::option::Option<&[std::string::String]> {
        self.raw_input_records.as_deref()
    }
}
impl aws_http::request_id::RequestId for DiscoverInputSchemaOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DiscoverInputSchemaOutput {
    /// Creates a new builder-style object to manufacture [`DiscoverInputSchemaOutput`](crate::output::DiscoverInputSchemaOutput).
    pub fn builder() -> crate::output::discover_input_schema_output::Builder {
        crate::output::discover_input_schema_output::Builder::default()
    }
}

/// See [`DiscoverInputSchemaOutput`](crate::output::DiscoverInputSchemaOutput).
pub mod discover_input_schema_output {

    /// A builder for [`DiscoverInputSchemaOutput`](crate::output::DiscoverInputSchemaOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) input_schema: std::option::Option<crate::model::SourceSchema>,
        pub(crate) parsed_input_records:
            std::option::Option<std::vec::Vec<std::vec::Vec<std::string::String>>>,
        pub(crate) processed_input_records: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) raw_input_records: std::option::Option<std::vec::Vec<std::string::String>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.</p>
        pub fn input_schema(mut self, input: crate::model::SourceSchema) -> Self {
            self.input_schema = Some(input);
            self
        }
        /// <p>The schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.</p>
        pub fn set_input_schema(
            mut self,
            input: std::option::Option<crate::model::SourceSchema>,
        ) -> Self {
            self.input_schema = input;
            self
        }
        /// Appends an item to `parsed_input_records`.
        ///
        /// To override the contents of this collection use [`set_parsed_input_records`](Self::set_parsed_input_records).
        ///
        /// <p>An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).</p>
        pub fn parsed_input_records(mut self, input: std::vec::Vec<std::string::String>) -> Self {
            let mut v = self.parsed_input_records.unwrap_or_default();
            v.push(input);
            self.parsed_input_records = Some(v);
            self
        }
        /// <p>An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).</p>
        pub fn set_parsed_input_records(
            mut self,
            input: std::option::Option<std::vec::Vec<std::vec::Vec<std::string::String>>>,
        ) -> Self {
            self.parsed_input_records = input;
            self
        }
        /// Appends an item to `processed_input_records`.
        ///
        /// To override the contents of this collection use [`set_processed_input_records`](Self::set_processed_input_records).
        ///
        /// <p>The stream data that was modified by the processor specified in the <code>InputProcessingConfiguration</code> parameter.</p>
        pub fn processed_input_records(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.processed_input_records.unwrap_or_default();
            v.push(input.into());
            self.processed_input_records = Some(v);
            self
        }
        /// <p>The stream data that was modified by the processor specified in the <code>InputProcessingConfiguration</code> parameter.</p>
        pub fn set_processed_input_records(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.processed_input_records = input;
            self
        }
        /// Appends an item to `raw_input_records`.
        ///
        /// To override the contents of this collection use [`set_raw_input_records`](Self::set_raw_input_records).
        ///
        /// <p>The raw stream data that was sampled to infer the schema.</p>
        pub fn raw_input_records(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.raw_input_records.unwrap_or_default();
            v.push(input.into());
            self.raw_input_records = Some(v);
            self
        }
        /// <p>The raw stream data that was sampled to infer the schema.</p>
        pub fn set_raw_input_records(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.raw_input_records = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DiscoverInputSchemaOutput`](crate::output::DiscoverInputSchemaOutput).
        pub fn build(self) -> crate::output::DiscoverInputSchemaOutput {
            crate::output::DiscoverInputSchemaOutput {
                input_schema: self.input_schema,
                parsed_input_records: self.parsed_input_records,
                processed_input_records: self.processed_input_records,
                raw_input_records: self.raw_input_records,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeApplicationVersionOutput {
    /// <p>Describes the application, including the application Amazon Resource Name (ARN), status, latest version, and input and output configurations.</p>
    #[doc(hidden)]
    pub application_version_detail: std::option::Option<crate::model::ApplicationDetail>,
    _request_id: Option<String>,
}
impl DescribeApplicationVersionOutput {
    /// <p>Describes the application, including the application Amazon Resource Name (ARN), status, latest version, and input and output configurations.</p>
    pub fn application_version_detail(
        &self,
    ) -> std::option::Option<&crate::model::ApplicationDetail> {
        self.application_version_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeApplicationVersionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeApplicationVersionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeApplicationVersionOutput`](crate::output::DescribeApplicationVersionOutput).
    pub fn builder() -> crate::output::describe_application_version_output::Builder {
        crate::output::describe_application_version_output::Builder::default()
    }
}

/// See [`DescribeApplicationVersionOutput`](crate::output::DescribeApplicationVersionOutput).
pub mod describe_application_version_output {

    /// A builder for [`DescribeApplicationVersionOutput`](crate::output::DescribeApplicationVersionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_version_detail: std::option::Option<crate::model::ApplicationDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Describes the application, including the application Amazon Resource Name (ARN), status, latest version, and input and output configurations.</p>
        pub fn application_version_detail(
            mut self,
            input: crate::model::ApplicationDetail,
        ) -> Self {
            self.application_version_detail = Some(input);
            self
        }
        /// <p>Describes the application, including the application Amazon Resource Name (ARN), status, latest version, and input and output configurations.</p>
        pub fn set_application_version_detail(
            mut self,
            input: std::option::Option<crate::model::ApplicationDetail>,
        ) -> Self {
            self.application_version_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeApplicationVersionOutput`](crate::output::DescribeApplicationVersionOutput).
        pub fn build(self) -> crate::output::DescribeApplicationVersionOutput {
            crate::output::DescribeApplicationVersionOutput {
                application_version_detail: self.application_version_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeApplicationSnapshotOutput {
    /// <p>An object containing information about the application snapshot.</p>
    #[doc(hidden)]
    pub snapshot_details: std::option::Option<crate::model::SnapshotDetails>,
    _request_id: Option<String>,
}
impl DescribeApplicationSnapshotOutput {
    /// <p>An object containing information about the application snapshot.</p>
    pub fn snapshot_details(&self) -> std::option::Option<&crate::model::SnapshotDetails> {
        self.snapshot_details.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeApplicationSnapshotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeApplicationSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`DescribeApplicationSnapshotOutput`](crate::output::DescribeApplicationSnapshotOutput).
    pub fn builder() -> crate::output::describe_application_snapshot_output::Builder {
        crate::output::describe_application_snapshot_output::Builder::default()
    }
}

/// See [`DescribeApplicationSnapshotOutput`](crate::output::DescribeApplicationSnapshotOutput).
pub mod describe_application_snapshot_output {

    /// A builder for [`DescribeApplicationSnapshotOutput`](crate::output::DescribeApplicationSnapshotOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) snapshot_details: std::option::Option<crate::model::SnapshotDetails>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>An object containing information about the application snapshot.</p>
        pub fn snapshot_details(mut self, input: crate::model::SnapshotDetails) -> Self {
            self.snapshot_details = Some(input);
            self
        }
        /// <p>An object containing information about the application snapshot.</p>
        pub fn set_snapshot_details(
            mut self,
            input: std::option::Option<crate::model::SnapshotDetails>,
        ) -> Self {
            self.snapshot_details = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeApplicationSnapshotOutput`](crate::output::DescribeApplicationSnapshotOutput).
        pub fn build(self) -> crate::output::DescribeApplicationSnapshotOutput {
            crate::output::DescribeApplicationSnapshotOutput {
                snapshot_details: self.snapshot_details,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeApplicationOutput {
    /// <p>Provides a description of the application, such as the application's Amazon Resource Name (ARN), status, and latest version.</p>
    #[doc(hidden)]
    pub application_detail: std::option::Option<crate::model::ApplicationDetail>,
    _request_id: Option<String>,
}
impl DescribeApplicationOutput {
    /// <p>Provides a description of the application, such as the application's Amazon Resource Name (ARN), status, and latest version.</p>
    pub fn application_detail(&self) -> std::option::Option<&crate::model::ApplicationDetail> {
        self.application_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeApplicationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeApplicationOutput`](crate::output::DescribeApplicationOutput).
    pub fn builder() -> crate::output::describe_application_output::Builder {
        crate::output::describe_application_output::Builder::default()
    }
}

/// See [`DescribeApplicationOutput`](crate::output::DescribeApplicationOutput).
pub mod describe_application_output {

    /// A builder for [`DescribeApplicationOutput`](crate::output::DescribeApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_detail: std::option::Option<crate::model::ApplicationDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>Provides a description of the application, such as the application's Amazon Resource Name (ARN), status, and latest version.</p>
        pub fn application_detail(mut self, input: crate::model::ApplicationDetail) -> Self {
            self.application_detail = Some(input);
            self
        }
        /// <p>Provides a description of the application, such as the application's Amazon Resource Name (ARN), status, and latest version.</p>
        pub fn set_application_detail(
            mut self,
            input: std::option::Option<crate::model::ApplicationDetail>,
        ) -> Self {
            self.application_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeApplicationOutput`](crate::output::DescribeApplicationOutput).
        pub fn build(self) -> crate::output::DescribeApplicationOutput {
            crate::output::DescribeApplicationOutput {
                application_detail: self.application_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteApplicationVpcConfigurationOutput {
    /// <p>The ARN of the Kinesis Data Analytics application.</p>
    #[doc(hidden)]
    pub application_arn: std::option::Option<std::string::String>,
    /// <p>The updated version ID of the application.</p>
    #[doc(hidden)]
    pub application_version_id: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DeleteApplicationVpcConfigurationOutput {
    /// <p>The ARN of the Kinesis Data Analytics application.</p>
    pub fn application_arn(&self) -> std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The updated version ID of the application.</p>
    pub fn application_version_id(&self) -> std::option::Option<i64> {
        self.application_version_id
    }
}
impl aws_http::request_id::RequestId for DeleteApplicationVpcConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteApplicationVpcConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationVpcConfigurationOutput`](crate::output::DeleteApplicationVpcConfigurationOutput).
    pub fn builder() -> crate::output::delete_application_vpc_configuration_output::Builder {
        crate::output::delete_application_vpc_configuration_output::Builder::default()
    }
}

/// See [`DeleteApplicationVpcConfigurationOutput`](crate::output::DeleteApplicationVpcConfigurationOutput).
pub mod delete_application_vpc_configuration_output {

    /// A builder for [`DeleteApplicationVpcConfigurationOutput`](crate::output::DeleteApplicationVpcConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_arn: std::option::Option<std::string::String>,
        pub(crate) application_version_id: std::option::Option<i64>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the Kinesis Data Analytics application.</p>
        pub fn application_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.application_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the Kinesis Data Analytics application.</p>
        pub fn set_application_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.application_arn = input;
            self
        }
        /// <p>The updated version ID of the application.</p>
        pub fn application_version_id(mut self, input: i64) -> Self {
            self.application_version_id = Some(input);
            self
        }
        /// <p>The updated version ID of the application.</p>
        pub fn set_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
            self.application_version_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteApplicationVpcConfigurationOutput`](crate::output::DeleteApplicationVpcConfigurationOutput).
        pub fn build(self) -> crate::output::DeleteApplicationVpcConfigurationOutput {
            crate::output::DeleteApplicationVpcConfigurationOutput {
                application_arn: self.application_arn,
                application_version_id: self.application_version_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteApplicationSnapshotOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteApplicationSnapshotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteApplicationSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationSnapshotOutput`](crate::output::DeleteApplicationSnapshotOutput).
    pub fn builder() -> crate::output::delete_application_snapshot_output::Builder {
        crate::output::delete_application_snapshot_output::Builder::default()
    }
}

/// See [`DeleteApplicationSnapshotOutput`](crate::output::DeleteApplicationSnapshotOutput).
pub mod delete_application_snapshot_output {

    /// A builder for [`DeleteApplicationSnapshotOutput`](crate::output::DeleteApplicationSnapshotOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteApplicationSnapshotOutput`](crate::output::DeleteApplicationSnapshotOutput).
        pub fn build(self) -> crate::output::DeleteApplicationSnapshotOutput {
            crate::output::DeleteApplicationSnapshotOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteApplicationReferenceDataSourceOutput {
    /// <p>The application Amazon Resource Name (ARN).</p>
    #[doc(hidden)]
    pub application_arn: std::option::Option<std::string::String>,
    /// <p>The updated version ID of the application.</p>
    #[doc(hidden)]
    pub application_version_id: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DeleteApplicationReferenceDataSourceOutput {
    /// <p>The application Amazon Resource Name (ARN).</p>
    pub fn application_arn(&self) -> std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The updated version ID of the application.</p>
    pub fn application_version_id(&self) -> std::option::Option<i64> {
        self.application_version_id
    }
}
impl aws_http::request_id::RequestId for DeleteApplicationReferenceDataSourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteApplicationReferenceDataSourceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationReferenceDataSourceOutput`](crate::output::DeleteApplicationReferenceDataSourceOutput).
    pub fn builder() -> crate::output::delete_application_reference_data_source_output::Builder {
        crate::output::delete_application_reference_data_source_output::Builder::default()
    }
}

/// See [`DeleteApplicationReferenceDataSourceOutput`](crate::output::DeleteApplicationReferenceDataSourceOutput).
pub mod delete_application_reference_data_source_output {

    /// A builder for [`DeleteApplicationReferenceDataSourceOutput`](crate::output::DeleteApplicationReferenceDataSourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_arn: std::option::Option<std::string::String>,
        pub(crate) application_version_id: std::option::Option<i64>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The application Amazon Resource Name (ARN).</p>
        pub fn application_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.application_arn = Some(input.into());
            self
        }
        /// <p>The application Amazon Resource Name (ARN).</p>
        pub fn set_application_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.application_arn = input;
            self
        }
        /// <p>The updated version ID of the application.</p>
        pub fn application_version_id(mut self, input: i64) -> Self {
            self.application_version_id = Some(input);
            self
        }
        /// <p>The updated version ID of the application.</p>
        pub fn set_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
            self.application_version_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteApplicationReferenceDataSourceOutput`](crate::output::DeleteApplicationReferenceDataSourceOutput).
        pub fn build(self) -> crate::output::DeleteApplicationReferenceDataSourceOutput {
            crate::output::DeleteApplicationReferenceDataSourceOutput {
                application_arn: self.application_arn,
                application_version_id: self.application_version_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteApplicationOutputOutput {
    /// <p>The application Amazon Resource Name (ARN).</p>
    #[doc(hidden)]
    pub application_arn: std::option::Option<std::string::String>,
    /// <p>The current application version ID.</p>
    #[doc(hidden)]
    pub application_version_id: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DeleteApplicationOutputOutput {
    /// <p>The application Amazon Resource Name (ARN).</p>
    pub fn application_arn(&self) -> std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The current application version ID.</p>
    pub fn application_version_id(&self) -> std::option::Option<i64> {
        self.application_version_id
    }
}
impl aws_http::request_id::RequestId for DeleteApplicationOutputOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteApplicationOutputOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationOutputOutput`](crate::output::DeleteApplicationOutputOutput).
    pub fn builder() -> crate::output::delete_application_output_output::Builder {
        crate::output::delete_application_output_output::Builder::default()
    }
}

/// See [`DeleteApplicationOutputOutput`](crate::output::DeleteApplicationOutputOutput).
pub mod delete_application_output_output {

    /// A builder for [`DeleteApplicationOutputOutput`](crate::output::DeleteApplicationOutputOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_arn: std::option::Option<std::string::String>,
        pub(crate) application_version_id: std::option::Option<i64>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The application Amazon Resource Name (ARN).</p>
        pub fn application_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.application_arn = Some(input.into());
            self
        }
        /// <p>The application Amazon Resource Name (ARN).</p>
        pub fn set_application_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.application_arn = input;
            self
        }
        /// <p>The current application version ID.</p>
        pub fn application_version_id(mut self, input: i64) -> Self {
            self.application_version_id = Some(input);
            self
        }
        /// <p>The current application version ID.</p>
        pub fn set_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
            self.application_version_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteApplicationOutputOutput`](crate::output::DeleteApplicationOutputOutput).
        pub fn build(self) -> crate::output::DeleteApplicationOutputOutput {
            crate::output::DeleteApplicationOutputOutput {
                application_arn: self.application_arn,
                application_version_id: self.application_version_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteApplicationInputProcessingConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    #[doc(hidden)]
    pub application_arn: std::option::Option<std::string::String>,
    /// <p>The current application version ID.</p>
    #[doc(hidden)]
    pub application_version_id: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DeleteApplicationInputProcessingConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn application_arn(&self) -> std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The current application version ID.</p>
    pub fn application_version_id(&self) -> std::option::Option<i64> {
        self.application_version_id
    }
}
impl aws_http::request_id::RequestId for DeleteApplicationInputProcessingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteApplicationInputProcessingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationInputProcessingConfigurationOutput`](crate::output::DeleteApplicationInputProcessingConfigurationOutput).
    pub fn builder(
    ) -> crate::output::delete_application_input_processing_configuration_output::Builder {
        crate::output::delete_application_input_processing_configuration_output::Builder::default()
    }
}

/// See [`DeleteApplicationInputProcessingConfigurationOutput`](crate::output::DeleteApplicationInputProcessingConfigurationOutput).
pub mod delete_application_input_processing_configuration_output {

    /// A builder for [`DeleteApplicationInputProcessingConfigurationOutput`](crate::output::DeleteApplicationInputProcessingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_arn: std::option::Option<std::string::String>,
        pub(crate) application_version_id: std::option::Option<i64>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the application.</p>
        pub fn application_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.application_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the application.</p>
        pub fn set_application_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.application_arn = input;
            self
        }
        /// <p>The current application version ID.</p>
        pub fn application_version_id(mut self, input: i64) -> Self {
            self.application_version_id = Some(input);
            self
        }
        /// <p>The current application version ID.</p>
        pub fn set_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
            self.application_version_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteApplicationInputProcessingConfigurationOutput`](crate::output::DeleteApplicationInputProcessingConfigurationOutput).
        pub fn build(self) -> crate::output::DeleteApplicationInputProcessingConfigurationOutput {
            crate::output::DeleteApplicationInputProcessingConfigurationOutput {
                application_arn: self.application_arn,
                application_version_id: self.application_version_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteApplicationCloudWatchLoggingOptionOutput {
    /// <p>The application's Amazon Resource Name (ARN).</p>
    #[doc(hidden)]
    pub application_arn: std::option::Option<std::string::String>,
    /// <p>The version ID of the application. Kinesis Data Analytics updates the <code>ApplicationVersionId</code> each time you change the CloudWatch logging options.</p>
    #[doc(hidden)]
    pub application_version_id: std::option::Option<i64>,
    /// <p>The descriptions of the remaining CloudWatch logging options for the application.</p>
    #[doc(hidden)]
    pub cloud_watch_logging_option_descriptions:
        std::option::Option<std::vec::Vec<crate::model::CloudWatchLoggingOptionDescription>>,
    _request_id: Option<String>,
}
impl DeleteApplicationCloudWatchLoggingOptionOutput {
    /// <p>The application's Amazon Resource Name (ARN).</p>
    pub fn application_arn(&self) -> std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The version ID of the application. Kinesis Data Analytics updates the <code>ApplicationVersionId</code> each time you change the CloudWatch logging options.</p>
    pub fn application_version_id(&self) -> std::option::Option<i64> {
        self.application_version_id
    }
    /// <p>The descriptions of the remaining CloudWatch logging options for the application.</p>
    pub fn cloud_watch_logging_option_descriptions(
        &self,
    ) -> std::option::Option<&[crate::model::CloudWatchLoggingOptionDescription]> {
        self.cloud_watch_logging_option_descriptions.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteApplicationCloudWatchLoggingOptionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteApplicationCloudWatchLoggingOptionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationCloudWatchLoggingOptionOutput`](crate::output::DeleteApplicationCloudWatchLoggingOptionOutput).
    pub fn builder() -> crate::output::delete_application_cloud_watch_logging_option_output::Builder
    {
        crate::output::delete_application_cloud_watch_logging_option_output::Builder::default()
    }
}

/// See [`DeleteApplicationCloudWatchLoggingOptionOutput`](crate::output::DeleteApplicationCloudWatchLoggingOptionOutput).
pub mod delete_application_cloud_watch_logging_option_output {

    /// A builder for [`DeleteApplicationCloudWatchLoggingOptionOutput`](crate::output::DeleteApplicationCloudWatchLoggingOptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_arn: std::option::Option<std::string::String>,
        pub(crate) application_version_id: std::option::Option<i64>,
        pub(crate) cloud_watch_logging_option_descriptions:
            std::option::Option<std::vec::Vec<crate::model::CloudWatchLoggingOptionDescription>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The application's Amazon Resource Name (ARN).</p>
        pub fn application_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.application_arn = Some(input.into());
            self
        }
        /// <p>The application's Amazon Resource Name (ARN).</p>
        pub fn set_application_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.application_arn = input;
            self
        }
        /// <p>The version ID of the application. Kinesis Data Analytics updates the <code>ApplicationVersionId</code> each time you change the CloudWatch logging options.</p>
        pub fn application_version_id(mut self, input: i64) -> Self {
            self.application_version_id = Some(input);
            self
        }
        /// <p>The version ID of the application. Kinesis Data Analytics updates the <code>ApplicationVersionId</code> each time you change the CloudWatch logging options.</p>
        pub fn set_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
            self.application_version_id = input;
            self
        }
        /// Appends an item to `cloud_watch_logging_option_descriptions`.
        ///
        /// To override the contents of this collection use [`set_cloud_watch_logging_option_descriptions`](Self::set_cloud_watch_logging_option_descriptions).
        ///
        /// <p>The descriptions of the remaining CloudWatch logging options for the application.</p>
        pub fn cloud_watch_logging_option_descriptions(
            mut self,
            input: crate::model::CloudWatchLoggingOptionDescription,
        ) -> Self {
            let mut v = self
                .cloud_watch_logging_option_descriptions
                .unwrap_or_default();
            v.push(input);
            self.cloud_watch_logging_option_descriptions = Some(v);
            self
        }
        /// <p>The descriptions of the remaining CloudWatch logging options for the application.</p>
        pub fn set_cloud_watch_logging_option_descriptions(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::CloudWatchLoggingOptionDescription>,
            >,
        ) -> Self {
            self.cloud_watch_logging_option_descriptions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteApplicationCloudWatchLoggingOptionOutput`](crate::output::DeleteApplicationCloudWatchLoggingOptionOutput).
        pub fn build(self) -> crate::output::DeleteApplicationCloudWatchLoggingOptionOutput {
            crate::output::DeleteApplicationCloudWatchLoggingOptionOutput {
                application_arn: self.application_arn,
                application_version_id: self.application_version_id,
                cloud_watch_logging_option_descriptions: self
                    .cloud_watch_logging_option_descriptions,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteApplicationOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for DeleteApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteApplicationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteApplicationOutput`](crate::output::DeleteApplicationOutput).
    pub fn builder() -> crate::output::delete_application_output::Builder {
        crate::output::delete_application_output::Builder::default()
    }
}

/// See [`DeleteApplicationOutput`](crate::output::DeleteApplicationOutput).
pub mod delete_application_output {

    /// A builder for [`DeleteApplicationOutput`](crate::output::DeleteApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteApplicationOutput`](crate::output::DeleteApplicationOutput).
        pub fn build(self) -> crate::output::DeleteApplicationOutput {
            crate::output::DeleteApplicationOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateApplicationSnapshotOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for CreateApplicationSnapshotOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateApplicationSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`CreateApplicationSnapshotOutput`](crate::output::CreateApplicationSnapshotOutput).
    pub fn builder() -> crate::output::create_application_snapshot_output::Builder {
        crate::output::create_application_snapshot_output::Builder::default()
    }
}

/// See [`CreateApplicationSnapshotOutput`](crate::output::CreateApplicationSnapshotOutput).
pub mod create_application_snapshot_output {

    /// A builder for [`CreateApplicationSnapshotOutput`](crate::output::CreateApplicationSnapshotOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateApplicationSnapshotOutput`](crate::output::CreateApplicationSnapshotOutput).
        pub fn build(self) -> crate::output::CreateApplicationSnapshotOutput {
            crate::output::CreateApplicationSnapshotOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateApplicationPresignedUrlOutput {
    /// <p>The URL of the extension.</p>
    #[doc(hidden)]
    pub authorized_url: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateApplicationPresignedUrlOutput {
    /// <p>The URL of the extension.</p>
    pub fn authorized_url(&self) -> std::option::Option<&str> {
        self.authorized_url.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateApplicationPresignedUrlOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateApplicationPresignedUrlOutput {
    /// Creates a new builder-style object to manufacture [`CreateApplicationPresignedUrlOutput`](crate::output::CreateApplicationPresignedUrlOutput).
    pub fn builder() -> crate::output::create_application_presigned_url_output::Builder {
        crate::output::create_application_presigned_url_output::Builder::default()
    }
}

/// See [`CreateApplicationPresignedUrlOutput`](crate::output::CreateApplicationPresignedUrlOutput).
pub mod create_application_presigned_url_output {

    /// A builder for [`CreateApplicationPresignedUrlOutput`](crate::output::CreateApplicationPresignedUrlOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) authorized_url: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The URL of the extension.</p>
        pub fn authorized_url(mut self, input: impl Into<std::string::String>) -> Self {
            self.authorized_url = Some(input.into());
            self
        }
        /// <p>The URL of the extension.</p>
        pub fn set_authorized_url(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.authorized_url = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateApplicationPresignedUrlOutput`](crate::output::CreateApplicationPresignedUrlOutput).
        pub fn build(self) -> crate::output::CreateApplicationPresignedUrlOutput {
            crate::output::CreateApplicationPresignedUrlOutput {
                authorized_url: self.authorized_url,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateApplicationOutput {
    /// <p>In response to your <code>CreateApplication</code> request, Kinesis Data Analytics returns a response with details of the application it created.</p>
    #[doc(hidden)]
    pub application_detail: std::option::Option<crate::model::ApplicationDetail>,
    _request_id: Option<String>,
}
impl CreateApplicationOutput {
    /// <p>In response to your <code>CreateApplication</code> request, Kinesis Data Analytics returns a response with details of the application it created.</p>
    pub fn application_detail(&self) -> std::option::Option<&crate::model::ApplicationDetail> {
        self.application_detail.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateApplicationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateApplicationOutput {
    /// Creates a new builder-style object to manufacture [`CreateApplicationOutput`](crate::output::CreateApplicationOutput).
    pub fn builder() -> crate::output::create_application_output::Builder {
        crate::output::create_application_output::Builder::default()
    }
}

/// See [`CreateApplicationOutput`](crate::output::CreateApplicationOutput).
pub mod create_application_output {

    /// A builder for [`CreateApplicationOutput`](crate::output::CreateApplicationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_detail: std::option::Option<crate::model::ApplicationDetail>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>In response to your <code>CreateApplication</code> request, Kinesis Data Analytics returns a response with details of the application it created.</p>
        pub fn application_detail(mut self, input: crate::model::ApplicationDetail) -> Self {
            self.application_detail = Some(input);
            self
        }
        /// <p>In response to your <code>CreateApplication</code> request, Kinesis Data Analytics returns a response with details of the application it created.</p>
        pub fn set_application_detail(
            mut self,
            input: std::option::Option<crate::model::ApplicationDetail>,
        ) -> Self {
            self.application_detail = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateApplicationOutput`](crate::output::CreateApplicationOutput).
        pub fn build(self) -> crate::output::CreateApplicationOutput {
            crate::output::CreateApplicationOutput {
                application_detail: self.application_detail,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddApplicationVpcConfigurationOutput {
    /// <p>The ARN of the application.</p>
    #[doc(hidden)]
    pub application_arn: std::option::Option<std::string::String>,
    /// <p>Provides the current application version. Kinesis Data Analytics updates the ApplicationVersionId each time you update the application.</p>
    #[doc(hidden)]
    pub application_version_id: std::option::Option<i64>,
    /// <p>The parameters of the new VPC configuration.</p>
    #[doc(hidden)]
    pub vpc_configuration_description:
        std::option::Option<crate::model::VpcConfigurationDescription>,
    _request_id: Option<String>,
}
impl AddApplicationVpcConfigurationOutput {
    /// <p>The ARN of the application.</p>
    pub fn application_arn(&self) -> std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>Provides the current application version. Kinesis Data Analytics updates the ApplicationVersionId each time you update the application.</p>
    pub fn application_version_id(&self) -> std::option::Option<i64> {
        self.application_version_id
    }
    /// <p>The parameters of the new VPC configuration.</p>
    pub fn vpc_configuration_description(
        &self,
    ) -> std::option::Option<&crate::model::VpcConfigurationDescription> {
        self.vpc_configuration_description.as_ref()
    }
}
impl aws_http::request_id::RequestId for AddApplicationVpcConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AddApplicationVpcConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`AddApplicationVpcConfigurationOutput`](crate::output::AddApplicationVpcConfigurationOutput).
    pub fn builder() -> crate::output::add_application_vpc_configuration_output::Builder {
        crate::output::add_application_vpc_configuration_output::Builder::default()
    }
}

/// See [`AddApplicationVpcConfigurationOutput`](crate::output::AddApplicationVpcConfigurationOutput).
pub mod add_application_vpc_configuration_output {

    /// A builder for [`AddApplicationVpcConfigurationOutput`](crate::output::AddApplicationVpcConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_arn: std::option::Option<std::string::String>,
        pub(crate) application_version_id: std::option::Option<i64>,
        pub(crate) vpc_configuration_description:
            std::option::Option<crate::model::VpcConfigurationDescription>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The ARN of the application.</p>
        pub fn application_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.application_arn = Some(input.into());
            self
        }
        /// <p>The ARN of the application.</p>
        pub fn set_application_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.application_arn = input;
            self
        }
        /// <p>Provides the current application version. Kinesis Data Analytics updates the ApplicationVersionId each time you update the application.</p>
        pub fn application_version_id(mut self, input: i64) -> Self {
            self.application_version_id = Some(input);
            self
        }
        /// <p>Provides the current application version. Kinesis Data Analytics updates the ApplicationVersionId each time you update the application.</p>
        pub fn set_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
            self.application_version_id = input;
            self
        }
        /// <p>The parameters of the new VPC configuration.</p>
        pub fn vpc_configuration_description(
            mut self,
            input: crate::model::VpcConfigurationDescription,
        ) -> Self {
            self.vpc_configuration_description = Some(input);
            self
        }
        /// <p>The parameters of the new VPC configuration.</p>
        pub fn set_vpc_configuration_description(
            mut self,
            input: std::option::Option<crate::model::VpcConfigurationDescription>,
        ) -> Self {
            self.vpc_configuration_description = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AddApplicationVpcConfigurationOutput`](crate::output::AddApplicationVpcConfigurationOutput).
        pub fn build(self) -> crate::output::AddApplicationVpcConfigurationOutput {
            crate::output::AddApplicationVpcConfigurationOutput {
                application_arn: self.application_arn,
                application_version_id: self.application_version_id,
                vpc_configuration_description: self.vpc_configuration_description,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddApplicationReferenceDataSourceOutput {
    /// <p>The application Amazon Resource Name (ARN).</p>
    #[doc(hidden)]
    pub application_arn: std::option::Option<std::string::String>,
    /// <p>The updated application version ID. Kinesis Data Analytics increments this ID when the application is updated.</p>
    #[doc(hidden)]
    pub application_version_id: std::option::Option<i64>,
    /// <p>Describes reference data sources configured for the application. </p>
    #[doc(hidden)]
    pub reference_data_source_descriptions:
        std::option::Option<std::vec::Vec<crate::model::ReferenceDataSourceDescription>>,
    _request_id: Option<String>,
}
impl AddApplicationReferenceDataSourceOutput {
    /// <p>The application Amazon Resource Name (ARN).</p>
    pub fn application_arn(&self) -> std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The updated application version ID. Kinesis Data Analytics increments this ID when the application is updated.</p>
    pub fn application_version_id(&self) -> std::option::Option<i64> {
        self.application_version_id
    }
    /// <p>Describes reference data sources configured for the application. </p>
    pub fn reference_data_source_descriptions(
        &self,
    ) -> std::option::Option<&[crate::model::ReferenceDataSourceDescription]> {
        self.reference_data_source_descriptions.as_deref()
    }
}
impl aws_http::request_id::RequestId for AddApplicationReferenceDataSourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AddApplicationReferenceDataSourceOutput {
    /// Creates a new builder-style object to manufacture [`AddApplicationReferenceDataSourceOutput`](crate::output::AddApplicationReferenceDataSourceOutput).
    pub fn builder() -> crate::output::add_application_reference_data_source_output::Builder {
        crate::output::add_application_reference_data_source_output::Builder::default()
    }
}

/// See [`AddApplicationReferenceDataSourceOutput`](crate::output::AddApplicationReferenceDataSourceOutput).
pub mod add_application_reference_data_source_output {

    /// A builder for [`AddApplicationReferenceDataSourceOutput`](crate::output::AddApplicationReferenceDataSourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_arn: std::option::Option<std::string::String>,
        pub(crate) application_version_id: std::option::Option<i64>,
        pub(crate) reference_data_source_descriptions:
            std::option::Option<std::vec::Vec<crate::model::ReferenceDataSourceDescription>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The application Amazon Resource Name (ARN).</p>
        pub fn application_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.application_arn = Some(input.into());
            self
        }
        /// <p>The application Amazon Resource Name (ARN).</p>
        pub fn set_application_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.application_arn = input;
            self
        }
        /// <p>The updated application version ID. Kinesis Data Analytics increments this ID when the application is updated.</p>
        pub fn application_version_id(mut self, input: i64) -> Self {
            self.application_version_id = Some(input);
            self
        }
        /// <p>The updated application version ID. Kinesis Data Analytics increments this ID when the application is updated.</p>
        pub fn set_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
            self.application_version_id = input;
            self
        }
        /// Appends an item to `reference_data_source_descriptions`.
        ///
        /// To override the contents of this collection use [`set_reference_data_source_descriptions`](Self::set_reference_data_source_descriptions).
        ///
        /// <p>Describes reference data sources configured for the application. </p>
        pub fn reference_data_source_descriptions(
            mut self,
            input: crate::model::ReferenceDataSourceDescription,
        ) -> Self {
            let mut v = self.reference_data_source_descriptions.unwrap_or_default();
            v.push(input);
            self.reference_data_source_descriptions = Some(v);
            self
        }
        /// <p>Describes reference data sources configured for the application. </p>
        pub fn set_reference_data_source_descriptions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReferenceDataSourceDescription>>,
        ) -> Self {
            self.reference_data_source_descriptions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AddApplicationReferenceDataSourceOutput`](crate::output::AddApplicationReferenceDataSourceOutput).
        pub fn build(self) -> crate::output::AddApplicationReferenceDataSourceOutput {
            crate::output::AddApplicationReferenceDataSourceOutput {
                application_arn: self.application_arn,
                application_version_id: self.application_version_id,
                reference_data_source_descriptions: self.reference_data_source_descriptions,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddApplicationOutputOutput {
    /// <p>The application Amazon Resource Name (ARN).</p>
    #[doc(hidden)]
    pub application_arn: std::option::Option<std::string::String>,
    /// <p>The updated application version ID. Kinesis Data Analytics increments this ID when the application is updated.</p>
    #[doc(hidden)]
    pub application_version_id: std::option::Option<i64>,
    /// <p>Describes the application output configuration. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-output.html">Configuring Application Output</a>. </p>
    #[doc(hidden)]
    pub output_descriptions: std::option::Option<std::vec::Vec<crate::model::OutputDescription>>,
    _request_id: Option<String>,
}
impl AddApplicationOutputOutput {
    /// <p>The application Amazon Resource Name (ARN).</p>
    pub fn application_arn(&self) -> std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The updated application version ID. Kinesis Data Analytics increments this ID when the application is updated.</p>
    pub fn application_version_id(&self) -> std::option::Option<i64> {
        self.application_version_id
    }
    /// <p>Describes the application output configuration. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-output.html">Configuring Application Output</a>. </p>
    pub fn output_descriptions(&self) -> std::option::Option<&[crate::model::OutputDescription]> {
        self.output_descriptions.as_deref()
    }
}
impl aws_http::request_id::RequestId for AddApplicationOutputOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AddApplicationOutputOutput {
    /// Creates a new builder-style object to manufacture [`AddApplicationOutputOutput`](crate::output::AddApplicationOutputOutput).
    pub fn builder() -> crate::output::add_application_output_output::Builder {
        crate::output::add_application_output_output::Builder::default()
    }
}

/// See [`AddApplicationOutputOutput`](crate::output::AddApplicationOutputOutput).
pub mod add_application_output_output {

    /// A builder for [`AddApplicationOutputOutput`](crate::output::AddApplicationOutputOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_arn: std::option::Option<std::string::String>,
        pub(crate) application_version_id: std::option::Option<i64>,
        pub(crate) output_descriptions:
            std::option::Option<std::vec::Vec<crate::model::OutputDescription>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The application Amazon Resource Name (ARN).</p>
        pub fn application_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.application_arn = Some(input.into());
            self
        }
        /// <p>The application Amazon Resource Name (ARN).</p>
        pub fn set_application_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.application_arn = input;
            self
        }
        /// <p>The updated application version ID. Kinesis Data Analytics increments this ID when the application is updated.</p>
        pub fn application_version_id(mut self, input: i64) -> Self {
            self.application_version_id = Some(input);
            self
        }
        /// <p>The updated application version ID. Kinesis Data Analytics increments this ID when the application is updated.</p>
        pub fn set_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
            self.application_version_id = input;
            self
        }
        /// Appends an item to `output_descriptions`.
        ///
        /// To override the contents of this collection use [`set_output_descriptions`](Self::set_output_descriptions).
        ///
        /// <p>Describes the application output configuration. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-output.html">Configuring Application Output</a>. </p>
        pub fn output_descriptions(mut self, input: crate::model::OutputDescription) -> Self {
            let mut v = self.output_descriptions.unwrap_or_default();
            v.push(input);
            self.output_descriptions = Some(v);
            self
        }
        /// <p>Describes the application output configuration. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-output.html">Configuring Application Output</a>. </p>
        pub fn set_output_descriptions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::OutputDescription>>,
        ) -> Self {
            self.output_descriptions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AddApplicationOutputOutput`](crate::output::AddApplicationOutputOutput).
        pub fn build(self) -> crate::output::AddApplicationOutputOutput {
            crate::output::AddApplicationOutputOutput {
                application_arn: self.application_arn,
                application_version_id: self.application_version_id,
                output_descriptions: self.output_descriptions,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddApplicationInputProcessingConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    #[doc(hidden)]
    pub application_arn: std::option::Option<std::string::String>,
    /// <p>Provides the current application version. </p>
    #[doc(hidden)]
    pub application_version_id: std::option::Option<i64>,
    /// <p>The input ID that is associated with the application input. This is the ID that Kinesis Data Analytics assigns to each input configuration that you add to your application.</p>
    #[doc(hidden)]
    pub input_id: std::option::Option<std::string::String>,
    /// <p>The description of the preprocessor that executes on records in this input before the application's code is run.</p>
    #[doc(hidden)]
    pub input_processing_configuration_description:
        std::option::Option<crate::model::InputProcessingConfigurationDescription>,
    _request_id: Option<String>,
}
impl AddApplicationInputProcessingConfigurationOutput {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn application_arn(&self) -> std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>Provides the current application version. </p>
    pub fn application_version_id(&self) -> std::option::Option<i64> {
        self.application_version_id
    }
    /// <p>The input ID that is associated with the application input. This is the ID that Kinesis Data Analytics assigns to each input configuration that you add to your application.</p>
    pub fn input_id(&self) -> std::option::Option<&str> {
        self.input_id.as_deref()
    }
    /// <p>The description of the preprocessor that executes on records in this input before the application's code is run.</p>
    pub fn input_processing_configuration_description(
        &self,
    ) -> std::option::Option<&crate::model::InputProcessingConfigurationDescription> {
        self.input_processing_configuration_description.as_ref()
    }
}
impl aws_http::request_id::RequestId for AddApplicationInputProcessingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AddApplicationInputProcessingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`AddApplicationInputProcessingConfigurationOutput`](crate::output::AddApplicationInputProcessingConfigurationOutput).
    pub fn builder() -> crate::output::add_application_input_processing_configuration_output::Builder
    {
        crate::output::add_application_input_processing_configuration_output::Builder::default()
    }
}

/// See [`AddApplicationInputProcessingConfigurationOutput`](crate::output::AddApplicationInputProcessingConfigurationOutput).
pub mod add_application_input_processing_configuration_output {

    /// A builder for [`AddApplicationInputProcessingConfigurationOutput`](crate::output::AddApplicationInputProcessingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_arn: std::option::Option<std::string::String>,
        pub(crate) application_version_id: std::option::Option<i64>,
        pub(crate) input_id: std::option::Option<std::string::String>,
        pub(crate) input_processing_configuration_description:
            std::option::Option<crate::model::InputProcessingConfigurationDescription>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the application.</p>
        pub fn application_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.application_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the application.</p>
        pub fn set_application_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.application_arn = input;
            self
        }
        /// <p>Provides the current application version. </p>
        pub fn application_version_id(mut self, input: i64) -> Self {
            self.application_version_id = Some(input);
            self
        }
        /// <p>Provides the current application version. </p>
        pub fn set_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
            self.application_version_id = input;
            self
        }
        /// <p>The input ID that is associated with the application input. This is the ID that Kinesis Data Analytics assigns to each input configuration that you add to your application.</p>
        pub fn input_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.input_id = Some(input.into());
            self
        }
        /// <p>The input ID that is associated with the application input. This is the ID that Kinesis Data Analytics assigns to each input configuration that you add to your application.</p>
        pub fn set_input_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.input_id = input;
            self
        }
        /// <p>The description of the preprocessor that executes on records in this input before the application's code is run.</p>
        pub fn input_processing_configuration_description(
            mut self,
            input: crate::model::InputProcessingConfigurationDescription,
        ) -> Self {
            self.input_processing_configuration_description = Some(input);
            self
        }
        /// <p>The description of the preprocessor that executes on records in this input before the application's code is run.</p>
        pub fn set_input_processing_configuration_description(
            mut self,
            input: std::option::Option<crate::model::InputProcessingConfigurationDescription>,
        ) -> Self {
            self.input_processing_configuration_description = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AddApplicationInputProcessingConfigurationOutput`](crate::output::AddApplicationInputProcessingConfigurationOutput).
        pub fn build(self) -> crate::output::AddApplicationInputProcessingConfigurationOutput {
            crate::output::AddApplicationInputProcessingConfigurationOutput {
                application_arn: self.application_arn,
                application_version_id: self.application_version_id,
                input_id: self.input_id,
                input_processing_configuration_description: self
                    .input_processing_configuration_description,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddApplicationInputOutput {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    #[doc(hidden)]
    pub application_arn: std::option::Option<std::string::String>,
    /// <p>Provides the current application version.</p>
    #[doc(hidden)]
    pub application_version_id: std::option::Option<i64>,
    /// <p>Describes the application input configuration. </p>
    #[doc(hidden)]
    pub input_descriptions: std::option::Option<std::vec::Vec<crate::model::InputDescription>>,
    _request_id: Option<String>,
}
impl AddApplicationInputOutput {
    /// <p>The Amazon Resource Name (ARN) of the application.</p>
    pub fn application_arn(&self) -> std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>Provides the current application version.</p>
    pub fn application_version_id(&self) -> std::option::Option<i64> {
        self.application_version_id
    }
    /// <p>Describes the application input configuration. </p>
    pub fn input_descriptions(&self) -> std::option::Option<&[crate::model::InputDescription]> {
        self.input_descriptions.as_deref()
    }
}
impl aws_http::request_id::RequestId for AddApplicationInputOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AddApplicationInputOutput {
    /// Creates a new builder-style object to manufacture [`AddApplicationInputOutput`](crate::output::AddApplicationInputOutput).
    pub fn builder() -> crate::output::add_application_input_output::Builder {
        crate::output::add_application_input_output::Builder::default()
    }
}

/// See [`AddApplicationInputOutput`](crate::output::AddApplicationInputOutput).
pub mod add_application_input_output {

    /// A builder for [`AddApplicationInputOutput`](crate::output::AddApplicationInputOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_arn: std::option::Option<std::string::String>,
        pub(crate) application_version_id: std::option::Option<i64>,
        pub(crate) input_descriptions:
            std::option::Option<std::vec::Vec<crate::model::InputDescription>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the application.</p>
        pub fn application_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.application_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the application.</p>
        pub fn set_application_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.application_arn = input;
            self
        }
        /// <p>Provides the current application version.</p>
        pub fn application_version_id(mut self, input: i64) -> Self {
            self.application_version_id = Some(input);
            self
        }
        /// <p>Provides the current application version.</p>
        pub fn set_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
            self.application_version_id = input;
            self
        }
        /// Appends an item to `input_descriptions`.
        ///
        /// To override the contents of this collection use [`set_input_descriptions`](Self::set_input_descriptions).
        ///
        /// <p>Describes the application input configuration. </p>
        pub fn input_descriptions(mut self, input: crate::model::InputDescription) -> Self {
            let mut v = self.input_descriptions.unwrap_or_default();
            v.push(input);
            self.input_descriptions = Some(v);
            self
        }
        /// <p>Describes the application input configuration. </p>
        pub fn set_input_descriptions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InputDescription>>,
        ) -> Self {
            self.input_descriptions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AddApplicationInputOutput`](crate::output::AddApplicationInputOutput).
        pub fn build(self) -> crate::output::AddApplicationInputOutput {
            crate::output::AddApplicationInputOutput {
                application_arn: self.application_arn,
                application_version_id: self.application_version_id,
                input_descriptions: self.input_descriptions,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AddApplicationCloudWatchLoggingOptionOutput {
    /// <p>The application's ARN.</p>
    #[doc(hidden)]
    pub application_arn: std::option::Option<std::string::String>,
    /// <p>The new version ID of the Kinesis Data Analytics application. Kinesis Data Analytics updates the <code>ApplicationVersionId</code> each time you change the CloudWatch logging options. </p>
    #[doc(hidden)]
    pub application_version_id: std::option::Option<i64>,
    /// <p>The descriptions of the current CloudWatch logging options for the Kinesis Data Analytics application.</p>
    #[doc(hidden)]
    pub cloud_watch_logging_option_descriptions:
        std::option::Option<std::vec::Vec<crate::model::CloudWatchLoggingOptionDescription>>,
    _request_id: Option<String>,
}
impl AddApplicationCloudWatchLoggingOptionOutput {
    /// <p>The application's ARN.</p>
    pub fn application_arn(&self) -> std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The new version ID of the Kinesis Data Analytics application. Kinesis Data Analytics updates the <code>ApplicationVersionId</code> each time you change the CloudWatch logging options. </p>
    pub fn application_version_id(&self) -> std::option::Option<i64> {
        self.application_version_id
    }
    /// <p>The descriptions of the current CloudWatch logging options for the Kinesis Data Analytics application.</p>
    pub fn cloud_watch_logging_option_descriptions(
        &self,
    ) -> std::option::Option<&[crate::model::CloudWatchLoggingOptionDescription]> {
        self.cloud_watch_logging_option_descriptions.as_deref()
    }
}
impl aws_http::request_id::RequestId for AddApplicationCloudWatchLoggingOptionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AddApplicationCloudWatchLoggingOptionOutput {
    /// Creates a new builder-style object to manufacture [`AddApplicationCloudWatchLoggingOptionOutput`](crate::output::AddApplicationCloudWatchLoggingOptionOutput).
    pub fn builder() -> crate::output::add_application_cloud_watch_logging_option_output::Builder {
        crate::output::add_application_cloud_watch_logging_option_output::Builder::default()
    }
}

/// See [`AddApplicationCloudWatchLoggingOptionOutput`](crate::output::AddApplicationCloudWatchLoggingOptionOutput).
pub mod add_application_cloud_watch_logging_option_output {

    /// A builder for [`AddApplicationCloudWatchLoggingOptionOutput`](crate::output::AddApplicationCloudWatchLoggingOptionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) application_arn: std::option::Option<std::string::String>,
        pub(crate) application_version_id: std::option::Option<i64>,
        pub(crate) cloud_watch_logging_option_descriptions:
            std::option::Option<std::vec::Vec<crate::model::CloudWatchLoggingOptionDescription>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The application's ARN.</p>
        pub fn application_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.application_arn = Some(input.into());
            self
        }
        /// <p>The application's ARN.</p>
        pub fn set_application_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.application_arn = input;
            self
        }
        /// <p>The new version ID of the Kinesis Data Analytics application. Kinesis Data Analytics updates the <code>ApplicationVersionId</code> each time you change the CloudWatch logging options. </p>
        pub fn application_version_id(mut self, input: i64) -> Self {
            self.application_version_id = Some(input);
            self
        }
        /// <p>The new version ID of the Kinesis Data Analytics application. Kinesis Data Analytics updates the <code>ApplicationVersionId</code> each time you change the CloudWatch logging options. </p>
        pub fn set_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
            self.application_version_id = input;
            self
        }
        /// Appends an item to `cloud_watch_logging_option_descriptions`.
        ///
        /// To override the contents of this collection use [`set_cloud_watch_logging_option_descriptions`](Self::set_cloud_watch_logging_option_descriptions).
        ///
        /// <p>The descriptions of the current CloudWatch logging options for the Kinesis Data Analytics application.</p>
        pub fn cloud_watch_logging_option_descriptions(
            mut self,
            input: crate::model::CloudWatchLoggingOptionDescription,
        ) -> Self {
            let mut v = self
                .cloud_watch_logging_option_descriptions
                .unwrap_or_default();
            v.push(input);
            self.cloud_watch_logging_option_descriptions = Some(v);
            self
        }
        /// <p>The descriptions of the current CloudWatch logging options for the Kinesis Data Analytics application.</p>
        pub fn set_cloud_watch_logging_option_descriptions(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::CloudWatchLoggingOptionDescription>,
            >,
        ) -> Self {
            self.cloud_watch_logging_option_descriptions = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AddApplicationCloudWatchLoggingOptionOutput`](crate::output::AddApplicationCloudWatchLoggingOptionOutput).
        pub fn build(self) -> crate::output::AddApplicationCloudWatchLoggingOptionOutput {
            crate::output::AddApplicationCloudWatchLoggingOptionOutput {
                application_arn: self.application_arn,
                application_version_id: self.application_version_id,
                cloud_watch_logging_option_descriptions: self
                    .cloud_watch_logging_option_descriptions,
                _request_id: self._request_id,
            }
        }
    }
}
