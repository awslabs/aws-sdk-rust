// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for Amazon Kinesis Analytics
///
/// Client for invoking operations on Amazon Kinesis Analytics. Each operation on Amazon Kinesis Analytics is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_kinesisanalyticsv2::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_kinesisanalyticsv2::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_kinesisanalyticsv2::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AddApplicationCloudWatchLoggingOption`](crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption::set_application_name): <p>The Kinesis Data Analytics application name.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption::set_current_application_version_id): <p>The version ID of the Kinesis Data Analytics application. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>.You can retrieve the application version ID using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    ///   - [`cloud_watch_logging_option(CloudWatchLoggingOption)`](crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption::cloud_watch_logging_option) / [`set_cloud_watch_logging_option(Option<CloudWatchLoggingOption>)`](crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption::set_cloud_watch_logging_option): <p>Provides the Amazon CloudWatch log stream Amazon Resource Name (ARN). </p>
    ///   - [`conditional_token(impl Into<String>)`](crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption::conditional_token) / [`set_conditional_token(Option<String>)`](crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption::set_conditional_token): <p>A value you use to implement strong concurrency for application updates. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You get the application's current <code>ConditionalToken</code> using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    /// - On success, responds with [`AddApplicationCloudWatchLoggingOptionOutput`](crate::output::AddApplicationCloudWatchLoggingOptionOutput) with field(s):
    ///   - [`application_arn(Option<String>)`](crate::output::AddApplicationCloudWatchLoggingOptionOutput::application_arn): <p>The application's ARN.</p>
    ///   - [`application_version_id(Option<i64>)`](crate::output::AddApplicationCloudWatchLoggingOptionOutput::application_version_id): <p>The new version ID of the Kinesis Data Analytics application. Kinesis Data Analytics updates the <code>ApplicationVersionId</code> each time you change the CloudWatch logging options. </p>
    ///   - [`cloud_watch_logging_option_descriptions(Option<Vec<CloudWatchLoggingOptionDescription>>)`](crate::output::AddApplicationCloudWatchLoggingOptionOutput::cloud_watch_logging_option_descriptions): <p>The descriptions of the current CloudWatch logging options for the Kinesis Data Analytics application.</p>
    /// - On failure, responds with [`SdkError<AddApplicationCloudWatchLoggingOptionError>`](crate::error::AddApplicationCloudWatchLoggingOptionError)
    pub fn add_application_cloud_watch_logging_option(
        &self,
    ) -> crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption {
        crate::client::fluent_builders::AddApplicationCloudWatchLoggingOption::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`AddApplicationInput`](crate::client::fluent_builders::AddApplicationInput) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::AddApplicationInput::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::AddApplicationInput::set_application_name): <p>The name of your existing application to which you want to add the streaming source.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::AddApplicationInput::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::AddApplicationInput::set_current_application_version_id): <p>The current version of your application. You must provide the <code>ApplicationVersionID</code> or the <code>ConditionalToken</code>.You can use the <code>DescribeApplication</code> operation to find the current application version.</p>
    ///   - [`input(Input)`](crate::client::fluent_builders::AddApplicationInput::input) / [`set_input(Option<Input>)`](crate::client::fluent_builders::AddApplicationInput::set_input): <p>The <code>Input</code> to add.</p>
    /// - On success, responds with [`AddApplicationInputOutput`](crate::output::AddApplicationInputOutput) with field(s):
    ///   - [`application_arn(Option<String>)`](crate::output::AddApplicationInputOutput::application_arn): <p>The Amazon Resource Name (ARN) of the application.</p>
    ///   - [`application_version_id(Option<i64>)`](crate::output::AddApplicationInputOutput::application_version_id): <p>Provides the current application version.</p>
    ///   - [`input_descriptions(Option<Vec<InputDescription>>)`](crate::output::AddApplicationInputOutput::input_descriptions): <p>Describes the application input configuration. </p>
    /// - On failure, responds with [`SdkError<AddApplicationInputError>`](crate::error::AddApplicationInputError)
    pub fn add_application_input(&self) -> crate::client::fluent_builders::AddApplicationInput {
        crate::client::fluent_builders::AddApplicationInput::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AddApplicationInputProcessingConfiguration`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::set_application_name): <p>The name of the application to which you want to add the input processing configuration.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::set_current_application_version_id): <p>The version of the application to which you want to add the input processing configuration. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned.</p>
    ///   - [`input_id(impl Into<String>)`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::input_id) / [`set_input_id(Option<String>)`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::set_input_id): <p>The ID of the input configuration to add the input processing configuration to. You can get a list of the input IDs for an application using the <code>DescribeApplication</code> operation.</p>
    ///   - [`input_processing_configuration(InputProcessingConfiguration)`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::input_processing_configuration) / [`set_input_processing_configuration(Option<InputProcessingConfiguration>)`](crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::set_input_processing_configuration): <p>The <code>InputProcessingConfiguration</code> to add to the application.</p>
    /// - On success, responds with [`AddApplicationInputProcessingConfigurationOutput`](crate::output::AddApplicationInputProcessingConfigurationOutput) with field(s):
    ///   - [`application_arn(Option<String>)`](crate::output::AddApplicationInputProcessingConfigurationOutput::application_arn): <p>The Amazon Resource Name (ARN) of the application.</p>
    ///   - [`application_version_id(Option<i64>)`](crate::output::AddApplicationInputProcessingConfigurationOutput::application_version_id): <p>Provides the current application version. </p>
    ///   - [`input_id(Option<String>)`](crate::output::AddApplicationInputProcessingConfigurationOutput::input_id): <p>The input ID that is associated with the application input. This is the ID that Kinesis Data Analytics assigns to each input configuration that you add to your application.</p>
    ///   - [`input_processing_configuration_description(Option<InputProcessingConfigurationDescription>)`](crate::output::AddApplicationInputProcessingConfigurationOutput::input_processing_configuration_description): <p>The description of the preprocessor that executes on records in this input before the application's code is run.</p>
    /// - On failure, responds with [`SdkError<AddApplicationInputProcessingConfigurationError>`](crate::error::AddApplicationInputProcessingConfigurationError)
    pub fn add_application_input_processing_configuration(
        &self,
    ) -> crate::client::fluent_builders::AddApplicationInputProcessingConfiguration {
        crate::client::fluent_builders::AddApplicationInputProcessingConfiguration::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`AddApplicationOutput`](crate::client::fluent_builders::AddApplicationOutput) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::AddApplicationOutput::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::AddApplicationOutput::set_application_name): <p>The name of the application to which you want to add the output configuration.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::AddApplicationOutput::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::AddApplicationOutput::set_current_application_version_id): <p>The version of the application to which you want to add the output configuration. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    ///   - [`output(Output)`](crate::client::fluent_builders::AddApplicationOutput::output) / [`set_output(Option<Output>)`](crate::client::fluent_builders::AddApplicationOutput::set_output): <p>An array of objects, each describing one output configuration. In the output configuration, you specify the name of an in-application stream, a destination (that is, a Kinesis data stream, a Kinesis Data Firehose delivery stream, or an Amazon Lambda function), and record the formation to use when writing to the destination.</p>
    /// - On success, responds with [`AddApplicationOutputOutput`](crate::output::AddApplicationOutputOutput) with field(s):
    ///   - [`application_arn(Option<String>)`](crate::output::AddApplicationOutputOutput::application_arn): <p>The application Amazon Resource Name (ARN).</p>
    ///   - [`application_version_id(Option<i64>)`](crate::output::AddApplicationOutputOutput::application_version_id): <p>The updated application version ID. Kinesis Data Analytics increments this ID when the application is updated.</p>
    ///   - [`output_descriptions(Option<Vec<OutputDescription>>)`](crate::output::AddApplicationOutputOutput::output_descriptions): <p>Describes the application output configuration. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/dev/how-it-works-output.html">Configuring Application Output</a>. </p>
    /// - On failure, responds with [`SdkError<AddApplicationOutputError>`](crate::error::AddApplicationOutputError)
    pub fn add_application_output(&self) -> crate::client::fluent_builders::AddApplicationOutput {
        crate::client::fluent_builders::AddApplicationOutput::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AddApplicationReferenceDataSource`](crate::client::fluent_builders::AddApplicationReferenceDataSource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::AddApplicationReferenceDataSource::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::AddApplicationReferenceDataSource::set_application_name): <p>The name of an existing application.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::AddApplicationReferenceDataSource::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::AddApplicationReferenceDataSource::set_current_application_version_id): <p>The version of the application for which you are adding the reference data source. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned.</p>
    ///   - [`reference_data_source(ReferenceDataSource)`](crate::client::fluent_builders::AddApplicationReferenceDataSource::reference_data_source) / [`set_reference_data_source(Option<ReferenceDataSource>)`](crate::client::fluent_builders::AddApplicationReferenceDataSource::set_reference_data_source): <p>The reference data source can be an object in your Amazon S3 bucket. Kinesis Data Analytics reads the object and copies the data into the in-application table that is created. You provide an S3 bucket, object key name, and the resulting in-application table that is created. </p>
    /// - On success, responds with [`AddApplicationReferenceDataSourceOutput`](crate::output::AddApplicationReferenceDataSourceOutput) with field(s):
    ///   - [`application_arn(Option<String>)`](crate::output::AddApplicationReferenceDataSourceOutput::application_arn): <p>The application Amazon Resource Name (ARN).</p>
    ///   - [`application_version_id(Option<i64>)`](crate::output::AddApplicationReferenceDataSourceOutput::application_version_id): <p>The updated application version ID. Kinesis Data Analytics increments this ID when the application is updated.</p>
    ///   - [`reference_data_source_descriptions(Option<Vec<ReferenceDataSourceDescription>>)`](crate::output::AddApplicationReferenceDataSourceOutput::reference_data_source_descriptions): <p>Describes reference data sources configured for the application. </p>
    /// - On failure, responds with [`SdkError<AddApplicationReferenceDataSourceError>`](crate::error::AddApplicationReferenceDataSourceError)
    pub fn add_application_reference_data_source(
        &self,
    ) -> crate::client::fluent_builders::AddApplicationReferenceDataSource {
        crate::client::fluent_builders::AddApplicationReferenceDataSource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AddApplicationVpcConfiguration`](crate::client::fluent_builders::AddApplicationVpcConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::AddApplicationVpcConfiguration::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::AddApplicationVpcConfiguration::set_application_name): <p>The name of an existing application.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::AddApplicationVpcConfiguration::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::AddApplicationVpcConfiguration::set_current_application_version_id): <p>The version of the application to which you want to add the VPC configuration. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    ///   - [`vpc_configuration(VpcConfiguration)`](crate::client::fluent_builders::AddApplicationVpcConfiguration::vpc_configuration) / [`set_vpc_configuration(Option<VpcConfiguration>)`](crate::client::fluent_builders::AddApplicationVpcConfiguration::set_vpc_configuration): <p>Description of the VPC to add to the application.</p>
    ///   - [`conditional_token(impl Into<String>)`](crate::client::fluent_builders::AddApplicationVpcConfiguration::conditional_token) / [`set_conditional_token(Option<String>)`](crate::client::fluent_builders::AddApplicationVpcConfiguration::set_conditional_token): <p>A value you use to implement strong concurrency for application updates. You must provide the <code>ApplicationVersionID</code> or the <code>ConditionalToken</code>. You get the application's current <code>ConditionalToken</code> using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    /// - On success, responds with [`AddApplicationVpcConfigurationOutput`](crate::output::AddApplicationVpcConfigurationOutput) with field(s):
    ///   - [`application_arn(Option<String>)`](crate::output::AddApplicationVpcConfigurationOutput::application_arn): <p>The ARN of the application.</p>
    ///   - [`application_version_id(Option<i64>)`](crate::output::AddApplicationVpcConfigurationOutput::application_version_id): <p>Provides the current application version. Kinesis Data Analytics updates the ApplicationVersionId each time you update the application.</p>
    ///   - [`vpc_configuration_description(Option<VpcConfigurationDescription>)`](crate::output::AddApplicationVpcConfigurationOutput::vpc_configuration_description): <p>The parameters of the new VPC configuration.</p>
    /// - On failure, responds with [`SdkError<AddApplicationVpcConfigurationError>`](crate::error::AddApplicationVpcConfigurationError)
    pub fn add_application_vpc_configuration(
        &self,
    ) -> crate::client::fluent_builders::AddApplicationVpcConfiguration {
        crate::client::fluent_builders::AddApplicationVpcConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateApplication`](crate::client::fluent_builders::CreateApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::CreateApplication::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::CreateApplication::set_application_name): <p>The name of your application (for example, <code>sample-app</code>).</p>
    ///   - [`application_description(impl Into<String>)`](crate::client::fluent_builders::CreateApplication::application_description) / [`set_application_description(Option<String>)`](crate::client::fluent_builders::CreateApplication::set_application_description): <p>A summary description of the application.</p>
    ///   - [`runtime_environment(RuntimeEnvironment)`](crate::client::fluent_builders::CreateApplication::runtime_environment) / [`set_runtime_environment(Option<RuntimeEnvironment>)`](crate::client::fluent_builders::CreateApplication::set_runtime_environment): <p>The runtime environment for the application.</p>
    ///   - [`service_execution_role(impl Into<String>)`](crate::client::fluent_builders::CreateApplication::service_execution_role) / [`set_service_execution_role(Option<String>)`](crate::client::fluent_builders::CreateApplication::set_service_execution_role): <p>The IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose delivery streams, Amazon S3 objects, and other external resources.</p>
    ///   - [`application_configuration(ApplicationConfiguration)`](crate::client::fluent_builders::CreateApplication::application_configuration) / [`set_application_configuration(Option<ApplicationConfiguration>)`](crate::client::fluent_builders::CreateApplication::set_application_configuration): <p>Use this parameter to configure the application.</p>
    ///   - [`cloud_watch_logging_options(Vec<CloudWatchLoggingOption>)`](crate::client::fluent_builders::CreateApplication::cloud_watch_logging_options) / [`set_cloud_watch_logging_options(Option<Vec<CloudWatchLoggingOption>>)`](crate::client::fluent_builders::CreateApplication::set_cloud_watch_logging_options): <p>Use this parameter to configure an Amazon CloudWatch log stream to monitor application configuration errors. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateApplication::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateApplication::set_tags): <p>A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50. For more information, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-tagging.html">Using Tagging</a>.</p>
    ///   - [`application_mode(ApplicationMode)`](crate::client::fluent_builders::CreateApplication::application_mode) / [`set_application_mode(Option<ApplicationMode>)`](crate::client::fluent_builders::CreateApplication::set_application_mode): <p>Use the <code>STREAMING</code> mode to create a Kinesis Data Analytics For Flink application. To create a Kinesis Data Analytics Studio notebook, use the <code>INTERACTIVE</code> mode.</p>
    /// - On success, responds with [`CreateApplicationOutput`](crate::output::CreateApplicationOutput) with field(s):
    ///   - [`application_detail(Option<ApplicationDetail>)`](crate::output::CreateApplicationOutput::application_detail): <p>In response to your <code>CreateApplication</code> request, Kinesis Data Analytics returns a response with details of the application it created.</p>
    /// - On failure, responds with [`SdkError<CreateApplicationError>`](crate::error::CreateApplicationError)
    pub fn create_application(&self) -> crate::client::fluent_builders::CreateApplication {
        crate::client::fluent_builders::CreateApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateApplicationPresignedUrl`](crate::client::fluent_builders::CreateApplicationPresignedUrl) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::CreateApplicationPresignedUrl::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::CreateApplicationPresignedUrl::set_application_name): <p>The name of the application.</p>
    ///   - [`url_type(UrlType)`](crate::client::fluent_builders::CreateApplicationPresignedUrl::url_type) / [`set_url_type(Option<UrlType>)`](crate::client::fluent_builders::CreateApplicationPresignedUrl::set_url_type): <p>The type of the extension for which to create and return a URL. Currently, the only valid extension URL type is <code>FLINK_DASHBOARD_URL</code>. </p>
    ///   - [`session_expiration_duration_in_seconds(i64)`](crate::client::fluent_builders::CreateApplicationPresignedUrl::session_expiration_duration_in_seconds) / [`set_session_expiration_duration_in_seconds(Option<i64>)`](crate::client::fluent_builders::CreateApplicationPresignedUrl::set_session_expiration_duration_in_seconds): <p>The duration in seconds for which the returned URL will be valid.</p>
    /// - On success, responds with [`CreateApplicationPresignedUrlOutput`](crate::output::CreateApplicationPresignedUrlOutput) with field(s):
    ///   - [`authorized_url(Option<String>)`](crate::output::CreateApplicationPresignedUrlOutput::authorized_url): <p>The URL of the extension.</p>
    /// - On failure, responds with [`SdkError<CreateApplicationPresignedUrlError>`](crate::error::CreateApplicationPresignedUrlError)
    pub fn create_application_presigned_url(
        &self,
    ) -> crate::client::fluent_builders::CreateApplicationPresignedUrl {
        crate::client::fluent_builders::CreateApplicationPresignedUrl::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateApplicationSnapshot`](crate::client::fluent_builders::CreateApplicationSnapshot) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::CreateApplicationSnapshot::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::CreateApplicationSnapshot::set_application_name): <p>The name of an existing application</p>
    ///   - [`snapshot_name(impl Into<String>)`](crate::client::fluent_builders::CreateApplicationSnapshot::snapshot_name) / [`set_snapshot_name(Option<String>)`](crate::client::fluent_builders::CreateApplicationSnapshot::set_snapshot_name): <p>An identifier for the application snapshot.</p>
    /// - On success, responds with [`CreateApplicationSnapshotOutput`](crate::output::CreateApplicationSnapshotOutput)

    /// - On failure, responds with [`SdkError<CreateApplicationSnapshotError>`](crate::error::CreateApplicationSnapshotError)
    pub fn create_application_snapshot(
        &self,
    ) -> crate::client::fluent_builders::CreateApplicationSnapshot {
        crate::client::fluent_builders::CreateApplicationSnapshot::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteApplication`](crate::client::fluent_builders::DeleteApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::DeleteApplication::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::DeleteApplication::set_application_name): <p>The name of the application to delete.</p>
    ///   - [`create_timestamp(DateTime)`](crate::client::fluent_builders::DeleteApplication::create_timestamp) / [`set_create_timestamp(Option<DateTime>)`](crate::client::fluent_builders::DeleteApplication::set_create_timestamp): <p>Use the <code>DescribeApplication</code> operation to get this value.</p>
    /// - On success, responds with [`DeleteApplicationOutput`](crate::output::DeleteApplicationOutput)

    /// - On failure, responds with [`SdkError<DeleteApplicationError>`](crate::error::DeleteApplicationError)
    pub fn delete_application(&self) -> crate::client::fluent_builders::DeleteApplication {
        crate::client::fluent_builders::DeleteApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteApplicationCloudWatchLoggingOption`](crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption::set_application_name): <p>The application name.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption::set_current_application_version_id): <p>The version ID of the application. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You can retrieve the application version ID using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    ///   - [`cloud_watch_logging_option_id(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption::cloud_watch_logging_option_id) / [`set_cloud_watch_logging_option_id(Option<String>)`](crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption::set_cloud_watch_logging_option_id): <p>The <code>CloudWatchLoggingOptionId</code> of the Amazon CloudWatch logging option to delete. You can get the <code>CloudWatchLoggingOptionId</code> by using the <code>DescribeApplication</code> operation. </p>
    ///   - [`conditional_token(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption::conditional_token) / [`set_conditional_token(Option<String>)`](crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption::set_conditional_token): <p>A value you use to implement strong concurrency for application updates. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You get the application's current <code>ConditionalToken</code> using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    /// - On success, responds with [`DeleteApplicationCloudWatchLoggingOptionOutput`](crate::output::DeleteApplicationCloudWatchLoggingOptionOutput) with field(s):
    ///   - [`application_arn(Option<String>)`](crate::output::DeleteApplicationCloudWatchLoggingOptionOutput::application_arn): <p>The application's Amazon Resource Name (ARN).</p>
    ///   - [`application_version_id(Option<i64>)`](crate::output::DeleteApplicationCloudWatchLoggingOptionOutput::application_version_id): <p>The version ID of the application. Kinesis Data Analytics updates the <code>ApplicationVersionId</code> each time you change the CloudWatch logging options.</p>
    ///   - [`cloud_watch_logging_option_descriptions(Option<Vec<CloudWatchLoggingOptionDescription>>)`](crate::output::DeleteApplicationCloudWatchLoggingOptionOutput::cloud_watch_logging_option_descriptions): <p>The descriptions of the remaining CloudWatch logging options for the application.</p>
    /// - On failure, responds with [`SdkError<DeleteApplicationCloudWatchLoggingOptionError>`](crate::error::DeleteApplicationCloudWatchLoggingOptionError)
    pub fn delete_application_cloud_watch_logging_option(
        &self,
    ) -> crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption {
        crate::client::fluent_builders::DeleteApplicationCloudWatchLoggingOption::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DeleteApplicationInputProcessingConfiguration`](crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration::set_application_name): <p>The name of the application.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration::set_current_application_version_id): <p>The application version. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    ///   - [`input_id(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration::input_id) / [`set_input_id(Option<String>)`](crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration::set_input_id): <p>The ID of the input configuration from which to delete the input processing configuration. You can get a list of the input IDs for an application by using the <code>DescribeApplication</code> operation.</p>
    /// - On success, responds with [`DeleteApplicationInputProcessingConfigurationOutput`](crate::output::DeleteApplicationInputProcessingConfigurationOutput) with field(s):
    ///   - [`application_arn(Option<String>)`](crate::output::DeleteApplicationInputProcessingConfigurationOutput::application_arn): <p>The Amazon Resource Name (ARN) of the application.</p>
    ///   - [`application_version_id(Option<i64>)`](crate::output::DeleteApplicationInputProcessingConfigurationOutput::application_version_id): <p>The current application version ID.</p>
    /// - On failure, responds with [`SdkError<DeleteApplicationInputProcessingConfigurationError>`](crate::error::DeleteApplicationInputProcessingConfigurationError)
    pub fn delete_application_input_processing_configuration(
        &self,
    ) -> crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration {
        crate::client::fluent_builders::DeleteApplicationInputProcessingConfiguration::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DeleteApplicationOutput`](crate::client::fluent_builders::DeleteApplicationOutput) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationOutput::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::DeleteApplicationOutput::set_application_name): <p>The application name.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::DeleteApplicationOutput::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::DeleteApplicationOutput::set_current_application_version_id): <p>The application version. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned. </p>
    ///   - [`output_id(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationOutput::output_id) / [`set_output_id(Option<String>)`](crate::client::fluent_builders::DeleteApplicationOutput::set_output_id): <p>The ID of the configuration to delete. Each output configuration that is added to the application (either when the application is created or later) using the <code>AddApplicationOutput</code> operation has a unique ID. You need to provide the ID to uniquely identify the output configuration that you want to delete from the application configuration. You can use the <code>DescribeApplication</code> operation to get the specific <code>OutputId</code>. </p>
    /// - On success, responds with [`DeleteApplicationOutputOutput`](crate::output::DeleteApplicationOutputOutput) with field(s):
    ///   - [`application_arn(Option<String>)`](crate::output::DeleteApplicationOutputOutput::application_arn): <p>The application Amazon Resource Name (ARN).</p>
    ///   - [`application_version_id(Option<i64>)`](crate::output::DeleteApplicationOutputOutput::application_version_id): <p>The current application version ID.</p>
    /// - On failure, responds with [`SdkError<DeleteApplicationOutputError>`](crate::error::DeleteApplicationOutputError)
    pub fn delete_application_output(
        &self,
    ) -> crate::client::fluent_builders::DeleteApplicationOutput {
        crate::client::fluent_builders::DeleteApplicationOutput::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteApplicationReferenceDataSource`](crate::client::fluent_builders::DeleteApplicationReferenceDataSource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationReferenceDataSource::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::DeleteApplicationReferenceDataSource::set_application_name): <p>The name of an existing application.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::DeleteApplicationReferenceDataSource::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::DeleteApplicationReferenceDataSource::set_current_application_version_id): <p>The current application version. You can use the <code>DescribeApplication</code> operation to get the current application version. If the version specified is not the current version, the <code>ConcurrentModificationException</code> is returned.</p>
    ///   - [`reference_id(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationReferenceDataSource::reference_id) / [`set_reference_id(Option<String>)`](crate::client::fluent_builders::DeleteApplicationReferenceDataSource::set_reference_id): <p>The ID of the reference data source. When you add a reference data source to your application using the <code>AddApplicationReferenceDataSource</code>, Kinesis Data Analytics assigns an ID. You can use the <code>DescribeApplication</code> operation to get the reference ID. </p>
    /// - On success, responds with [`DeleteApplicationReferenceDataSourceOutput`](crate::output::DeleteApplicationReferenceDataSourceOutput) with field(s):
    ///   - [`application_arn(Option<String>)`](crate::output::DeleteApplicationReferenceDataSourceOutput::application_arn): <p>The application Amazon Resource Name (ARN).</p>
    ///   - [`application_version_id(Option<i64>)`](crate::output::DeleteApplicationReferenceDataSourceOutput::application_version_id): <p>The updated version ID of the application.</p>
    /// - On failure, responds with [`SdkError<DeleteApplicationReferenceDataSourceError>`](crate::error::DeleteApplicationReferenceDataSourceError)
    pub fn delete_application_reference_data_source(
        &self,
    ) -> crate::client::fluent_builders::DeleteApplicationReferenceDataSource {
        crate::client::fluent_builders::DeleteApplicationReferenceDataSource::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DeleteApplicationSnapshot`](crate::client::fluent_builders::DeleteApplicationSnapshot) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationSnapshot::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::DeleteApplicationSnapshot::set_application_name): <p>The name of an existing application.</p>
    ///   - [`snapshot_name(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationSnapshot::snapshot_name) / [`set_snapshot_name(Option<String>)`](crate::client::fluent_builders::DeleteApplicationSnapshot::set_snapshot_name): <p>The identifier for the snapshot delete.</p>
    ///   - [`snapshot_creation_timestamp(DateTime)`](crate::client::fluent_builders::DeleteApplicationSnapshot::snapshot_creation_timestamp) / [`set_snapshot_creation_timestamp(Option<DateTime>)`](crate::client::fluent_builders::DeleteApplicationSnapshot::set_snapshot_creation_timestamp): <p>The creation timestamp of the application snapshot to delete. You can retrieve this value using or .</p>
    /// - On success, responds with [`DeleteApplicationSnapshotOutput`](crate::output::DeleteApplicationSnapshotOutput)

    /// - On failure, responds with [`SdkError<DeleteApplicationSnapshotError>`](crate::error::DeleteApplicationSnapshotError)
    pub fn delete_application_snapshot(
        &self,
    ) -> crate::client::fluent_builders::DeleteApplicationSnapshot {
        crate::client::fluent_builders::DeleteApplicationSnapshot::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteApplicationVpcConfiguration`](crate::client::fluent_builders::DeleteApplicationVpcConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationVpcConfiguration::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::DeleteApplicationVpcConfiguration::set_application_name): <p>The name of an existing application.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::DeleteApplicationVpcConfiguration::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::DeleteApplicationVpcConfiguration::set_current_application_version_id): <p>The current application version ID. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You can retrieve the application version ID using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    ///   - [`vpc_configuration_id(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationVpcConfiguration::vpc_configuration_id) / [`set_vpc_configuration_id(Option<String>)`](crate::client::fluent_builders::DeleteApplicationVpcConfiguration::set_vpc_configuration_id): <p>The ID of the VPC configuration to delete.</p>
    ///   - [`conditional_token(impl Into<String>)`](crate::client::fluent_builders::DeleteApplicationVpcConfiguration::conditional_token) / [`set_conditional_token(Option<String>)`](crate::client::fluent_builders::DeleteApplicationVpcConfiguration::set_conditional_token): <p>A value you use to implement strong concurrency for application updates. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You get the application's current <code>ConditionalToken</code> using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    /// - On success, responds with [`DeleteApplicationVpcConfigurationOutput`](crate::output::DeleteApplicationVpcConfigurationOutput) with field(s):
    ///   - [`application_arn(Option<String>)`](crate::output::DeleteApplicationVpcConfigurationOutput::application_arn): <p>The ARN of the Kinesis Data Analytics application.</p>
    ///   - [`application_version_id(Option<i64>)`](crate::output::DeleteApplicationVpcConfigurationOutput::application_version_id): <p>The updated version ID of the application.</p>
    /// - On failure, responds with [`SdkError<DeleteApplicationVpcConfigurationError>`](crate::error::DeleteApplicationVpcConfigurationError)
    pub fn delete_application_vpc_configuration(
        &self,
    ) -> crate::client::fluent_builders::DeleteApplicationVpcConfiguration {
        crate::client::fluent_builders::DeleteApplicationVpcConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeApplication`](crate::client::fluent_builders::DescribeApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::DescribeApplication::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::DescribeApplication::set_application_name): <p>The name of the application.</p>
    ///   - [`include_additional_details(bool)`](crate::client::fluent_builders::DescribeApplication::include_additional_details) / [`set_include_additional_details(Option<bool>)`](crate::client::fluent_builders::DescribeApplication::set_include_additional_details): <p>Displays verbose information about a Kinesis Data Analytics application, including the application's job plan.</p>
    /// - On success, responds with [`DescribeApplicationOutput`](crate::output::DescribeApplicationOutput) with field(s):
    ///   - [`application_detail(Option<ApplicationDetail>)`](crate::output::DescribeApplicationOutput::application_detail): <p>Provides a description of the application, such as the application's Amazon Resource Name (ARN), status, and latest version.</p>
    /// - On failure, responds with [`SdkError<DescribeApplicationError>`](crate::error::DescribeApplicationError)
    pub fn describe_application(&self) -> crate::client::fluent_builders::DescribeApplication {
        crate::client::fluent_builders::DescribeApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeApplicationSnapshot`](crate::client::fluent_builders::DescribeApplicationSnapshot) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::DescribeApplicationSnapshot::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::DescribeApplicationSnapshot::set_application_name): <p>The name of an existing application.</p>
    ///   - [`snapshot_name(impl Into<String>)`](crate::client::fluent_builders::DescribeApplicationSnapshot::snapshot_name) / [`set_snapshot_name(Option<String>)`](crate::client::fluent_builders::DescribeApplicationSnapshot::set_snapshot_name): <p>The identifier of an application snapshot. You can retrieve this value using .</p>
    /// - On success, responds with [`DescribeApplicationSnapshotOutput`](crate::output::DescribeApplicationSnapshotOutput) with field(s):
    ///   - [`snapshot_details(Option<SnapshotDetails>)`](crate::output::DescribeApplicationSnapshotOutput::snapshot_details): <p>An object containing information about the application snapshot.</p>
    /// - On failure, responds with [`SdkError<DescribeApplicationSnapshotError>`](crate::error::DescribeApplicationSnapshotError)
    pub fn describe_application_snapshot(
        &self,
    ) -> crate::client::fluent_builders::DescribeApplicationSnapshot {
        crate::client::fluent_builders::DescribeApplicationSnapshot::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeApplicationVersion`](crate::client::fluent_builders::DescribeApplicationVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::DescribeApplicationVersion::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::DescribeApplicationVersion::set_application_name): <p>The name of the application for which you want to get the version description.</p>
    ///   - [`application_version_id(i64)`](crate::client::fluent_builders::DescribeApplicationVersion::application_version_id) / [`set_application_version_id(Option<i64>)`](crate::client::fluent_builders::DescribeApplicationVersion::set_application_version_id): <p>The ID of the application version for which you want to get the description.</p>
    /// - On success, responds with [`DescribeApplicationVersionOutput`](crate::output::DescribeApplicationVersionOutput) with field(s):
    ///   - [`application_version_detail(Option<ApplicationDetail>)`](crate::output::DescribeApplicationVersionOutput::application_version_detail): <p>Describes the application, including the application Amazon Resource Name (ARN), status, latest version, and input and output configurations.</p>
    /// - On failure, responds with [`SdkError<DescribeApplicationVersionError>`](crate::error::DescribeApplicationVersionError)
    pub fn describe_application_version(
        &self,
    ) -> crate::client::fluent_builders::DescribeApplicationVersion {
        crate::client::fluent_builders::DescribeApplicationVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DiscoverInputSchema`](crate::client::fluent_builders::DiscoverInputSchema) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::DiscoverInputSchema::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::DiscoverInputSchema::set_resource_arn): <p>The Amazon Resource Name (ARN) of the streaming source.</p>
    ///   - [`service_execution_role(impl Into<String>)`](crate::client::fluent_builders::DiscoverInputSchema::service_execution_role) / [`set_service_execution_role(Option<String>)`](crate::client::fluent_builders::DiscoverInputSchema::set_service_execution_role): <p>The ARN of the role that is used to access the streaming source.</p>
    ///   - [`input_starting_position_configuration(InputStartingPositionConfiguration)`](crate::client::fluent_builders::DiscoverInputSchema::input_starting_position_configuration) / [`set_input_starting_position_configuration(Option<InputStartingPositionConfiguration>)`](crate::client::fluent_builders::DiscoverInputSchema::set_input_starting_position_configuration): <p>The point at which you want Kinesis Data Analytics to start reading records from the specified streaming source discovery purposes.</p>
    ///   - [`s3_configuration(S3Configuration)`](crate::client::fluent_builders::DiscoverInputSchema::s3_configuration) / [`set_s3_configuration(Option<S3Configuration>)`](crate::client::fluent_builders::DiscoverInputSchema::set_s3_configuration): <p>Specify this parameter to discover a schema from data in an Amazon S3 object.</p>
    ///   - [`input_processing_configuration(InputProcessingConfiguration)`](crate::client::fluent_builders::DiscoverInputSchema::input_processing_configuration) / [`set_input_processing_configuration(Option<InputProcessingConfiguration>)`](crate::client::fluent_builders::DiscoverInputSchema::set_input_processing_configuration): <p>The <code>InputProcessingConfiguration</code> to use to preprocess the records before discovering the schema of the records.</p>
    /// - On success, responds with [`DiscoverInputSchemaOutput`](crate::output::DiscoverInputSchemaOutput) with field(s):
    ///   - [`input_schema(Option<SourceSchema>)`](crate::output::DiscoverInputSchemaOutput::input_schema): <p>The schema inferred from the streaming source. It identifies the format of the data in the streaming source and how each data element maps to corresponding columns in the in-application stream that you can create.</p>
    ///   - [`parsed_input_records(Option<Vec<Vec<String>>>)`](crate::output::DiscoverInputSchemaOutput::parsed_input_records): <p>An array of elements, where each element corresponds to a row in a stream record (a stream record can have more than one row).</p>
    ///   - [`processed_input_records(Option<Vec<String>>)`](crate::output::DiscoverInputSchemaOutput::processed_input_records): <p>The stream data that was modified by the processor specified in the <code>InputProcessingConfiguration</code> parameter.</p>
    ///   - [`raw_input_records(Option<Vec<String>>)`](crate::output::DiscoverInputSchemaOutput::raw_input_records): <p>The raw stream data that was sampled to infer the schema.</p>
    /// - On failure, responds with [`SdkError<DiscoverInputSchemaError>`](crate::error::DiscoverInputSchemaError)
    pub fn discover_input_schema(&self) -> crate::client::fluent_builders::DiscoverInputSchema {
        crate::client::fluent_builders::DiscoverInputSchema::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListApplications`](crate::client::fluent_builders::ListApplications) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListApplications::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListApplications::set_limit): <p>The maximum number of applications to list.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListApplications::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListApplications::set_next_token): <p>If a previous command returned a pagination token, pass it into this value to retrieve the next set of results. For more information about pagination, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/pagination.html">Using the Amazon Command Line Interface's Pagination Options</a>.</p>
    /// - On success, responds with [`ListApplicationsOutput`](crate::output::ListApplicationsOutput) with field(s):
    ///   - [`application_summaries(Option<Vec<ApplicationSummary>>)`](crate::output::ListApplicationsOutput::application_summaries): <p>A list of <code>ApplicationSummary</code> objects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListApplicationsOutput::next_token): <p>The pagination token for the next set of results, or <code>null</code> if there are no additional results. Pass this token into a subsequent command to retrieve the next set of items For more information about pagination, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/pagination.html">Using the Amazon Command Line Interface's Pagination Options</a>.</p>
    /// - On failure, responds with [`SdkError<ListApplicationsError>`](crate::error::ListApplicationsError)
    pub fn list_applications(&self) -> crate::client::fluent_builders::ListApplications {
        crate::client::fluent_builders::ListApplications::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListApplicationSnapshots`](crate::client::fluent_builders::ListApplicationSnapshots) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::ListApplicationSnapshots::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::ListApplicationSnapshots::set_application_name): <p>The name of an existing application.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListApplicationSnapshots::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListApplicationSnapshots::set_limit): <p>The maximum number of application snapshots to list.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListApplicationSnapshots::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListApplicationSnapshots::set_next_token): <p>Use this parameter if you receive a <code>NextToken</code> response in a previous request that indicates that there is more output available. Set it to the value of the previous call's <code>NextToken</code> response to indicate where the output should continue from. </p>
    /// - On success, responds with [`ListApplicationSnapshotsOutput`](crate::output::ListApplicationSnapshotsOutput) with field(s):
    ///   - [`snapshot_summaries(Option<Vec<SnapshotDetails>>)`](crate::output::ListApplicationSnapshotsOutput::snapshot_summaries): <p>A collection of objects containing information about the application snapshots.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListApplicationSnapshotsOutput::next_token): <p>The token for the next set of results, or <code>null</code> if there are no additional results.</p>
    /// - On failure, responds with [`SdkError<ListApplicationSnapshotsError>`](crate::error::ListApplicationSnapshotsError)
    pub fn list_application_snapshots(
        &self,
    ) -> crate::client::fluent_builders::ListApplicationSnapshots {
        crate::client::fluent_builders::ListApplicationSnapshots::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListApplicationVersions`](crate::client::fluent_builders::ListApplicationVersions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::ListApplicationVersions::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::ListApplicationVersions::set_application_name): <p>The name of the application for which you want to list all versions.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListApplicationVersions::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListApplicationVersions::set_limit): <p>The maximum number of versions to list in this invocation of the operation.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListApplicationVersions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListApplicationVersions::set_next_token): <p>If a previous invocation of this operation returned a pagination token, pass it into this value to retrieve the next set of results. For more information about pagination, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/pagination.html">Using the Amazon Command Line Interface's Pagination Options</a>.</p>
    /// - On success, responds with [`ListApplicationVersionsOutput`](crate::output::ListApplicationVersionsOutput) with field(s):
    ///   - [`application_version_summaries(Option<Vec<ApplicationVersionSummary>>)`](crate::output::ListApplicationVersionsOutput::application_version_summaries): <p>A list of the application versions and the associated configuration summaries. The list includes application versions that were rolled back.</p>  <p>To get the complete description of a specific application version, invoke the <code>DescribeApplicationVersion</code> operation.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListApplicationVersionsOutput::next_token): <p>The pagination token for the next set of results, or <code>null</code> if there are no additional results. To retrieve the next set of items, pass this token into a subsequent invocation of this operation. For more information about pagination, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/pagination.html">Using the Amazon Command Line Interface's Pagination Options</a>.</p>
    /// - On failure, responds with [`SdkError<ListApplicationVersionsError>`](crate::error::ListApplicationVersionsError)
    pub fn list_application_versions(
        &self,
    ) -> crate::client::fluent_builders::ListApplicationVersions {
        crate::client::fluent_builders::ListApplicationVersions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The ARN of the application for which to retrieve tags.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>The key-value tags assigned to the application.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RollbackApplication`](crate::client::fluent_builders::RollbackApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::RollbackApplication::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::RollbackApplication::set_application_name): <p>The name of the application.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::RollbackApplication::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::RollbackApplication::set_current_application_version_id): <p>The current application version ID. You can retrieve the application version ID using <code>DescribeApplication</code>.</p>
    /// - On success, responds with [`RollbackApplicationOutput`](crate::output::RollbackApplicationOutput) with field(s):
    ///   - [`application_detail(Option<ApplicationDetail>)`](crate::output::RollbackApplicationOutput::application_detail): <p>Describes the application, including the application Amazon Resource Name (ARN), status, latest version, and input and output configurations.</p>
    /// - On failure, responds with [`SdkError<RollbackApplicationError>`](crate::error::RollbackApplicationError)
    pub fn rollback_application(&self) -> crate::client::fluent_builders::RollbackApplication {
        crate::client::fluent_builders::RollbackApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartApplication`](crate::client::fluent_builders::StartApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::StartApplication::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::StartApplication::set_application_name): <p>The name of the application.</p>
    ///   - [`run_configuration(RunConfiguration)`](crate::client::fluent_builders::StartApplication::run_configuration) / [`set_run_configuration(Option<RunConfiguration>)`](crate::client::fluent_builders::StartApplication::set_run_configuration): <p>Identifies the run configuration (start parameters) of a Kinesis Data Analytics application.</p>
    /// - On success, responds with [`StartApplicationOutput`](crate::output::StartApplicationOutput)

    /// - On failure, responds with [`SdkError<StartApplicationError>`](crate::error::StartApplicationError)
    pub fn start_application(&self) -> crate::client::fluent_builders::StartApplication {
        crate::client::fluent_builders::StartApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopApplication`](crate::client::fluent_builders::StopApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::StopApplication::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::StopApplication::set_application_name): <p>The name of the running application to stop.</p>
    ///   - [`force(bool)`](crate::client::fluent_builders::StopApplication::force) / [`set_force(Option<bool>)`](crate::client::fluent_builders::StopApplication::set_force): <p>Set to <code>true</code> to force the application to stop. If you set <code>Force</code> to <code>true</code>, Kinesis Data Analytics stops the application without taking a snapshot. </p> <note>   <p>Force-stopping your application may lead to data loss or duplication. To prevent data loss or duplicate processing of data during application restarts, we recommend you to take frequent snapshots of your application.</p>  </note>  <p>You can only force stop a Flink-based Kinesis Data Analytics application. You can't force stop a SQL-based Kinesis Data Analytics application.</p>  <p>The application must be in the <code>STARTING</code>, <code>UPDATING</code>, <code>STOPPING</code>, <code>AUTOSCALING</code>, or <code>RUNNING</code> status. </p>
    /// - On success, responds with [`StopApplicationOutput`](crate::output::StopApplicationOutput)

    /// - On failure, responds with [`SdkError<StopApplicationError>`](crate::error::StopApplicationError)
    pub fn stop_application(&self) -> crate::client::fluent_builders::StopApplication {
        crate::client::fluent_builders::StopApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The ARN of the application to assign the tags.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The key-value tags to assign to the application.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The ARN of the Kinesis Data Analytics application from which to remove the tags.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>A list of keys of tags to remove from the specified application.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateApplication`](crate::client::fluent_builders::UpdateApplication) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::UpdateApplication::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::UpdateApplication::set_application_name): <p>The name of the application to update.</p>
    ///   - [`current_application_version_id(i64)`](crate::client::fluent_builders::UpdateApplication::current_application_version_id) / [`set_current_application_version_id(Option<i64>)`](crate::client::fluent_builders::UpdateApplication::set_current_application_version_id): <p>The current application version ID. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>.You can retrieve the application version ID using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    ///   - [`application_configuration_update(ApplicationConfigurationUpdate)`](crate::client::fluent_builders::UpdateApplication::application_configuration_update) / [`set_application_configuration_update(Option<ApplicationConfigurationUpdate>)`](crate::client::fluent_builders::UpdateApplication::set_application_configuration_update): <p>Describes application configuration updates.</p>
    ///   - [`service_execution_role_update(impl Into<String>)`](crate::client::fluent_builders::UpdateApplication::service_execution_role_update) / [`set_service_execution_role_update(Option<String>)`](crate::client::fluent_builders::UpdateApplication::set_service_execution_role_update): <p>Describes updates to the service execution role.</p>
    ///   - [`run_configuration_update(RunConfigurationUpdate)`](crate::client::fluent_builders::UpdateApplication::run_configuration_update) / [`set_run_configuration_update(Option<RunConfigurationUpdate>)`](crate::client::fluent_builders::UpdateApplication::set_run_configuration_update): <p>Describes updates to the application's starting parameters.</p>
    ///   - [`cloud_watch_logging_option_updates(Vec<CloudWatchLoggingOptionUpdate>)`](crate::client::fluent_builders::UpdateApplication::cloud_watch_logging_option_updates) / [`set_cloud_watch_logging_option_updates(Option<Vec<CloudWatchLoggingOptionUpdate>>)`](crate::client::fluent_builders::UpdateApplication::set_cloud_watch_logging_option_updates): <p>Describes application Amazon CloudWatch logging option updates. You can only update existing CloudWatch logging options with this action. To add a new CloudWatch logging option, use <code>AddApplicationCloudWatchLoggingOption</code>.</p>
    ///   - [`conditional_token(impl Into<String>)`](crate::client::fluent_builders::UpdateApplication::conditional_token) / [`set_conditional_token(Option<String>)`](crate::client::fluent_builders::UpdateApplication::set_conditional_token): <p>A value you use to implement strong concurrency for application updates. You must provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You get the application's current <code>ConditionalToken</code> using <code>DescribeApplication</code>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of <code>CurrentApplicationVersionId</code>.</p>
    /// - On success, responds with [`UpdateApplicationOutput`](crate::output::UpdateApplicationOutput) with field(s):
    ///   - [`application_detail(Option<ApplicationDetail>)`](crate::output::UpdateApplicationOutput::application_detail): <p>Describes application updates.</p>
    /// - On failure, responds with [`SdkError<UpdateApplicationError>`](crate::error::UpdateApplicationError)
    pub fn update_application(&self) -> crate::client::fluent_builders::UpdateApplication {
        crate::client::fluent_builders::UpdateApplication::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateApplicationMaintenanceConfiguration`](crate::client::fluent_builders::UpdateApplicationMaintenanceConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application_name(impl Into<String>)`](crate::client::fluent_builders::UpdateApplicationMaintenanceConfiguration::application_name) / [`set_application_name(Option<String>)`](crate::client::fluent_builders::UpdateApplicationMaintenanceConfiguration::set_application_name): <p>The name of the application for which you want to update the maintenance configuration.</p>
    ///   - [`application_maintenance_configuration_update(ApplicationMaintenanceConfigurationUpdate)`](crate::client::fluent_builders::UpdateApplicationMaintenanceConfiguration::application_maintenance_configuration_update) / [`set_application_maintenance_configuration_update(Option<ApplicationMaintenanceConfigurationUpdate>)`](crate::client::fluent_builders::UpdateApplicationMaintenanceConfiguration::set_application_maintenance_configuration_update): <p>Describes the application maintenance configuration update.</p>
    /// - On success, responds with [`UpdateApplicationMaintenanceConfigurationOutput`](crate::output::UpdateApplicationMaintenanceConfigurationOutput) with field(s):
    ///   - [`application_arn(Option<String>)`](crate::output::UpdateApplicationMaintenanceConfigurationOutput::application_arn): <p>The Amazon Resource Name (ARN) of the application.</p>
    ///   - [`application_maintenance_configuration_description(Option<ApplicationMaintenanceConfigurationDescription>)`](crate::output::UpdateApplicationMaintenanceConfigurationOutput::application_maintenance_configuration_description): <p>The application maintenance configuration description after the update.</p>
    /// - On failure, responds with [`SdkError<UpdateApplicationMaintenanceConfigurationError>`](crate::error::UpdateApplicationMaintenanceConfigurationError)
    pub fn update_application_maintenance_configuration(
        &self,
    ) -> crate::client::fluent_builders::UpdateApplicationMaintenanceConfiguration {
        crate::client::fluent_builders::UpdateApplicationMaintenanceConfiguration::new(
            self.handle.clone(),
        )
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
