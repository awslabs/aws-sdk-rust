// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    client: smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// An ergonomic service client for `KinesisAnalytics_20180523`.
///
/// This client allows ergonomic access to a `KinesisAnalytics_20180523`-shaped service.
/// Each method corresponds to an endpoint defined in the service's Smithy model,
/// and the request and response shapes are auto-generated from that same model.
///
/// # Using a Client
///
/// Once you have a client set up, you can access the service's endpoints
/// by calling the appropriate method on [`Client`]. Each such method
/// returns a request builder for that endpoint, with methods for setting
/// the various fields of the request. Once your request is complete, use
/// the `send` method to send the request. `send` returns a future, which
/// you then have to `.await` to get the service's response.
///
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#c-builder
/// [SigV4-signed requests]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#[derive(std::fmt::Debug)]
pub struct Client<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use smithy_client::Builder;

impl<C, M, R> From<smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    pub fn with_config(client: smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: smithy_client::bounds::SmithyConnector,
    M: smithy_client::bounds::SmithyMiddleware<C>,
    R: smithy_client::retry::NewRequestPolicy,
{
    pub fn add_application_cloud_watch_logging_option(
        &self,
    ) -> fluent_builders::AddApplicationCloudWatchLoggingOption<C, M, R> {
        fluent_builders::AddApplicationCloudWatchLoggingOption::new(self.handle.clone())
    }
    pub fn add_application_input(&self) -> fluent_builders::AddApplicationInput<C, M, R> {
        fluent_builders::AddApplicationInput::new(self.handle.clone())
    }
    pub fn add_application_input_processing_configuration(
        &self,
    ) -> fluent_builders::AddApplicationInputProcessingConfiguration<C, M, R> {
        fluent_builders::AddApplicationInputProcessingConfiguration::new(self.handle.clone())
    }
    pub fn add_application_output(&self) -> fluent_builders::AddApplicationOutput<C, M, R> {
        fluent_builders::AddApplicationOutput::new(self.handle.clone())
    }
    pub fn add_application_reference_data_source(
        &self,
    ) -> fluent_builders::AddApplicationReferenceDataSource<C, M, R> {
        fluent_builders::AddApplicationReferenceDataSource::new(self.handle.clone())
    }
    pub fn add_application_vpc_configuration(
        &self,
    ) -> fluent_builders::AddApplicationVpcConfiguration<C, M, R> {
        fluent_builders::AddApplicationVpcConfiguration::new(self.handle.clone())
    }
    pub fn create_application(&self) -> fluent_builders::CreateApplication<C, M, R> {
        fluent_builders::CreateApplication::new(self.handle.clone())
    }
    pub fn create_application_presigned_url(
        &self,
    ) -> fluent_builders::CreateApplicationPresignedUrl<C, M, R> {
        fluent_builders::CreateApplicationPresignedUrl::new(self.handle.clone())
    }
    pub fn create_application_snapshot(
        &self,
    ) -> fluent_builders::CreateApplicationSnapshot<C, M, R> {
        fluent_builders::CreateApplicationSnapshot::new(self.handle.clone())
    }
    pub fn delete_application(&self) -> fluent_builders::DeleteApplication<C, M, R> {
        fluent_builders::DeleteApplication::new(self.handle.clone())
    }
    pub fn delete_application_cloud_watch_logging_option(
        &self,
    ) -> fluent_builders::DeleteApplicationCloudWatchLoggingOption<C, M, R> {
        fluent_builders::DeleteApplicationCloudWatchLoggingOption::new(self.handle.clone())
    }
    pub fn delete_application_input_processing_configuration(
        &self,
    ) -> fluent_builders::DeleteApplicationInputProcessingConfiguration<C, M, R> {
        fluent_builders::DeleteApplicationInputProcessingConfiguration::new(self.handle.clone())
    }
    pub fn delete_application_output(&self) -> fluent_builders::DeleteApplicationOutput<C, M, R> {
        fluent_builders::DeleteApplicationOutput::new(self.handle.clone())
    }
    pub fn delete_application_reference_data_source(
        &self,
    ) -> fluent_builders::DeleteApplicationReferenceDataSource<C, M, R> {
        fluent_builders::DeleteApplicationReferenceDataSource::new(self.handle.clone())
    }
    pub fn delete_application_snapshot(
        &self,
    ) -> fluent_builders::DeleteApplicationSnapshot<C, M, R> {
        fluent_builders::DeleteApplicationSnapshot::new(self.handle.clone())
    }
    pub fn delete_application_vpc_configuration(
        &self,
    ) -> fluent_builders::DeleteApplicationVpcConfiguration<C, M, R> {
        fluent_builders::DeleteApplicationVpcConfiguration::new(self.handle.clone())
    }
    pub fn describe_application(&self) -> fluent_builders::DescribeApplication<C, M, R> {
        fluent_builders::DescribeApplication::new(self.handle.clone())
    }
    pub fn describe_application_snapshot(
        &self,
    ) -> fluent_builders::DescribeApplicationSnapshot<C, M, R> {
        fluent_builders::DescribeApplicationSnapshot::new(self.handle.clone())
    }
    pub fn describe_application_version(
        &self,
    ) -> fluent_builders::DescribeApplicationVersion<C, M, R> {
        fluent_builders::DescribeApplicationVersion::new(self.handle.clone())
    }
    pub fn discover_input_schema(&self) -> fluent_builders::DiscoverInputSchema<C, M, R> {
        fluent_builders::DiscoverInputSchema::new(self.handle.clone())
    }
    pub fn list_applications(&self) -> fluent_builders::ListApplications<C, M, R> {
        fluent_builders::ListApplications::new(self.handle.clone())
    }
    pub fn list_application_snapshots(&self) -> fluent_builders::ListApplicationSnapshots<C, M, R> {
        fluent_builders::ListApplicationSnapshots::new(self.handle.clone())
    }
    pub fn list_application_versions(&self) -> fluent_builders::ListApplicationVersions<C, M, R> {
        fluent_builders::ListApplicationVersions::new(self.handle.clone())
    }
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource<C, M, R> {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    pub fn rollback_application(&self) -> fluent_builders::RollbackApplication<C, M, R> {
        fluent_builders::RollbackApplication::new(self.handle.clone())
    }
    pub fn start_application(&self) -> fluent_builders::StartApplication<C, M, R> {
        fluent_builders::StartApplication::new(self.handle.clone())
    }
    pub fn stop_application(&self) -> fluent_builders::StopApplication<C, M, R> {
        fluent_builders::StopApplication::new(self.handle.clone())
    }
    pub fn tag_resource(&self) -> fluent_builders::TagResource<C, M, R> {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    pub fn untag_resource(&self) -> fluent_builders::UntagResource<C, M, R> {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    pub fn update_application(&self) -> fluent_builders::UpdateApplication<C, M, R> {
        fluent_builders::UpdateApplication::new(self.handle.clone())
    }
    pub fn update_application_maintenance_configuration(
        &self,
    ) -> fluent_builders::UpdateApplicationMaintenanceConfiguration<C, M, R> {
        fluent_builders::UpdateApplicationMaintenanceConfiguration::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct AddApplicationCloudWatchLoggingOption<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_application_cloud_watch_logging_option_input::Builder,
    }
    impl<C, M, R> AddApplicationCloudWatchLoggingOption<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddApplicationCloudWatchLoggingOptionOutput,
            smithy_http::result::SdkError<crate::error::AddApplicationCloudWatchLoggingOptionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddApplicationCloudWatchLoggingOptionInputOperationOutputAlias,
                crate::output::AddApplicationCloudWatchLoggingOptionOutput,
                crate::error::AddApplicationCloudWatchLoggingOptionError,
                crate::input::AddApplicationCloudWatchLoggingOptionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Kinesis Data Analytics application name.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The version ID of the Kinesis Data Analytics application. You must provide the
        /// <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>.You can
        /// retrieve the application version ID using <a>DescribeApplication</a>. For better
        /// concurrency support, use the <code>ConditionalToken</code> parameter instead of
        /// <code>CurrentApplicationVersionId</code>.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>Provides the Amazon CloudWatch log stream Amazon Resource Name (ARN). </p>
        pub fn cloud_watch_logging_option(
            mut self,
            inp: crate::model::CloudWatchLoggingOption,
        ) -> Self {
            self.inner = self.inner.cloud_watch_logging_option(inp);
            self
        }
        pub fn set_cloud_watch_logging_option(
            mut self,
            input: std::option::Option<crate::model::CloudWatchLoggingOption>,
        ) -> Self {
            self.inner = self.inner.set_cloud_watch_logging_option(input);
            self
        }
        /// <p>A value you use to implement strong concurrency for application updates. You must
        /// provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You
        /// get the application's current <code>ConditionalToken</code> using <a>DescribeApplication</a>. For better concurrency support, use the
        /// <code>ConditionalToken</code> parameter instead of
        /// <code>CurrentApplicationVersionId</code>.</p>
        pub fn conditional_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.conditional_token(inp);
            self
        }
        pub fn set_conditional_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_conditional_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AddApplicationInput<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_application_input_input::Builder,
    }
    impl<C, M, R> AddApplicationInput<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddApplicationInputOutput,
            smithy_http::result::SdkError<crate::error::AddApplicationInputError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddApplicationInputInputOperationOutputAlias,
                crate::output::AddApplicationInputOutput,
                crate::error::AddApplicationInputError,
                crate::input::AddApplicationInputInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of your existing application to which you want to add the streaming
        /// source.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The current version of your application.
        /// You must provide the <code>ApplicationVersionID</code> or the <code>ConditionalToken</code>.You can use the <a>DescribeApplication</a> operation to find the current application version.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>The <a>Input</a> to add.</p>
        pub fn input(mut self, inp: crate::model::Input) -> Self {
            self.inner = self.inner.input(inp);
            self
        }
        pub fn set_input(mut self, input: std::option::Option<crate::model::Input>) -> Self {
            self.inner = self.inner.set_input(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AddApplicationInputProcessingConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_application_input_processing_configuration_input::Builder,
    }
    impl<C, M, R> AddApplicationInputProcessingConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddApplicationInputProcessingConfigurationOutput,
            smithy_http::result::SdkError<
                crate::error::AddApplicationInputProcessingConfigurationError,
            >,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddApplicationInputProcessingConfigurationInputOperationOutputAlias,
                crate::output::AddApplicationInputProcessingConfigurationOutput,
                crate::error::AddApplicationInputProcessingConfigurationError,
                crate::input::AddApplicationInputProcessingConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the application to which you want to add the input processing
        /// configuration.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The version of the application to which you want to add the input processing
        /// configuration. You can use the <a>DescribeApplication</a> operation to get the
        /// current application version. If the version specified is not the current version, the
        /// <code>ConcurrentModificationException</code> is returned.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>The ID of the input configuration to add the input processing configuration to. You
        /// can get a list of the input IDs for an application using the <a>DescribeApplication</a> operation.</p>
        pub fn input_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.input_id(inp);
            self
        }
        pub fn set_input_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_input_id(input);
            self
        }
        /// <p>The <a>InputProcessingConfiguration</a> to add to the application.</p>
        pub fn input_processing_configuration(
            mut self,
            inp: crate::model::InputProcessingConfiguration,
        ) -> Self {
            self.inner = self.inner.input_processing_configuration(inp);
            self
        }
        pub fn set_input_processing_configuration(
            mut self,
            input: std::option::Option<crate::model::InputProcessingConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_input_processing_configuration(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AddApplicationOutput<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_application_output_input::Builder,
    }
    impl<C, M, R> AddApplicationOutput<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddApplicationOutputOutput,
            smithy_http::result::SdkError<crate::error::AddApplicationOutputError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddApplicationOutputInputOperationOutputAlias,
                crate::output::AddApplicationOutputOutput,
                crate::error::AddApplicationOutputError,
                crate::input::AddApplicationOutputInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the application to which you want to add the output configuration.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The version of the application to which you want to add the output configuration. You can
        /// use the <a>DescribeApplication</a> operation to get the current application
        /// version. If the version specified is not the current version, the
        /// <code>ConcurrentModificationException</code> is returned. </p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>An array of objects, each describing one output configuration. In the output
        /// configuration, you specify the name of an in-application stream, a destination (that is, a
        /// Kinesis data stream, a Kinesis Data Firehose delivery stream, or an Amazon Lambda function), and
        /// record the formation to use when writing to the destination.</p>
        pub fn output(mut self, inp: crate::model::Output) -> Self {
            self.inner = self.inner.output(inp);
            self
        }
        pub fn set_output(mut self, input: std::option::Option<crate::model::Output>) -> Self {
            self.inner = self.inner.set_output(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AddApplicationReferenceDataSource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_application_reference_data_source_input::Builder,
    }
    impl<C, M, R> AddApplicationReferenceDataSource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddApplicationReferenceDataSourceOutput,
            smithy_http::result::SdkError<crate::error::AddApplicationReferenceDataSourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddApplicationReferenceDataSourceInputOperationOutputAlias,
                crate::output::AddApplicationReferenceDataSourceOutput,
                crate::error::AddApplicationReferenceDataSourceError,
                crate::input::AddApplicationReferenceDataSourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of an existing application.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The version of the application for which you are adding the reference data source.
        /// You can
        /// use the <a>DescribeApplication</a> operation to get the current application
        /// version. If the version specified is not the current version, the
        /// <code>ConcurrentModificationException</code> is returned.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>The reference data source can be an object in your Amazon S3 bucket. Kinesis Data Analytics reads the object and copies the data
        /// into the in-application table that is created. You provide an S3 bucket, object key name, and the resulting
        /// in-application table that is
        /// created. </p>
        pub fn reference_data_source(mut self, inp: crate::model::ReferenceDataSource) -> Self {
            self.inner = self.inner.reference_data_source(inp);
            self
        }
        pub fn set_reference_data_source(
            mut self,
            input: std::option::Option<crate::model::ReferenceDataSource>,
        ) -> Self {
            self.inner = self.inner.set_reference_data_source(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AddApplicationVpcConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::add_application_vpc_configuration_input::Builder,
    }
    impl<C, M, R> AddApplicationVpcConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddApplicationVpcConfigurationOutput,
            smithy_http::result::SdkError<crate::error::AddApplicationVpcConfigurationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AddApplicationVpcConfigurationInputOperationOutputAlias,
                crate::output::AddApplicationVpcConfigurationOutput,
                crate::error::AddApplicationVpcConfigurationError,
                crate::input::AddApplicationVpcConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of an existing application.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The version of the application to which you want to add the VPC configuration. You must
        /// provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You
        /// can use the <a>DescribeApplication</a> operation to get the current application
        /// version. If the version specified is not the current version, the
        /// <code>ConcurrentModificationException</code> is returned. For better concurrency support,
        /// use the <code>ConditionalToken</code> parameter instead of
        /// <code>CurrentApplicationVersionId</code>.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>Description of the VPC to add to the application.</p>
        pub fn vpc_configuration(mut self, inp: crate::model::VpcConfiguration) -> Self {
            self.inner = self.inner.vpc_configuration(inp);
            self
        }
        pub fn set_vpc_configuration(
            mut self,
            input: std::option::Option<crate::model::VpcConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_vpc_configuration(input);
            self
        }
        /// <p>A value you use to implement strong concurrency for application updates. You must
        /// provide the <code>ApplicationVersionID</code> or the <code>ConditionalToken</code>. You get
        /// the application's current <code>ConditionalToken</code> using <a>DescribeApplication</a>. For better concurrency support, use the
        /// <code>ConditionalToken</code> parameter instead of
        /// <code>CurrentApplicationVersionId</code>.</p>
        pub fn conditional_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.conditional_token(inp);
            self
        }
        pub fn set_conditional_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_conditional_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateApplication<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_application_input::Builder,
    }
    impl<C, M, R> CreateApplication<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateApplicationOutput,
            smithy_http::result::SdkError<crate::error::CreateApplicationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateApplicationInputOperationOutputAlias,
                crate::output::CreateApplicationOutput,
                crate::error::CreateApplicationError,
                crate::input::CreateApplicationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of your application (for example, <code>sample-app</code>).</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>A summary description of the application.</p>
        pub fn application_description(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_description(inp);
            self
        }
        pub fn set_application_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_description(input);
            self
        }
        /// <p>The runtime environment for the application (<code>SQL-1_0</code>, <code>FLINK-1_6</code>, <code>FLINK-1_8</code>, or <code>FLINK-1_11</code>).</p>
        pub fn runtime_environment(mut self, inp: crate::model::RuntimeEnvironment) -> Self {
            self.inner = self.inner.runtime_environment(inp);
            self
        }
        pub fn set_runtime_environment(
            mut self,
            input: std::option::Option<crate::model::RuntimeEnvironment>,
        ) -> Self {
            self.inner = self.inner.set_runtime_environment(input);
            self
        }
        /// <p>The IAM role used by the application to access Kinesis data streams, Kinesis Data Firehose
        /// delivery streams, Amazon S3 objects, and other external resources.</p>
        pub fn service_execution_role(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_execution_role(inp);
            self
        }
        pub fn set_service_execution_role(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_execution_role(input);
            self
        }
        /// <p>Use this parameter to configure the application.</p>
        pub fn application_configuration(
            mut self,
            inp: crate::model::ApplicationConfiguration,
        ) -> Self {
            self.inner = self.inner.application_configuration(inp);
            self
        }
        pub fn set_application_configuration(
            mut self,
            input: std::option::Option<crate::model::ApplicationConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_application_configuration(input);
            self
        }
        /// Appends an item to `CloudWatchLoggingOptions`.
        ///
        /// To override the contents of this collection use [`set_cloud_watch_logging_options`](Self::set_cloud_watch_logging_options).
        /// <p>Use this parameter to configure an Amazon CloudWatch log stream to monitor application
        /// configuration errors.
        /// </p>
        pub fn cloud_watch_logging_options(
            mut self,
            inp: impl Into<crate::model::CloudWatchLoggingOption>,
        ) -> Self {
            self.inner = self.inner.cloud_watch_logging_options(inp);
            self
        }
        pub fn set_cloud_watch_logging_options(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CloudWatchLoggingOption>>,
        ) -> Self {
            self.inner = self.inner.set_cloud_watch_logging_options(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>A list of one or more tags to assign to the application. A tag is a key-value pair that identifies an
        /// application. Note that the maximum number of application tags includes system tags. The maximum number of
        /// user-defined application tags is 50.
        /// For more information, see
        /// <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/java/how-tagging.html">Using Tagging</a>.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>Use the <code>STREAMING</code> mode to create a Kinesis Data Analytics Studio notebook. To create a Kinesis Data Analytics Studio notebook, use the
        /// <code>INTERACTIVE</code> mode.</p>
        pub fn application_mode(mut self, inp: crate::model::ApplicationMode) -> Self {
            self.inner = self.inner.application_mode(inp);
            self
        }
        pub fn set_application_mode(
            mut self,
            input: std::option::Option<crate::model::ApplicationMode>,
        ) -> Self {
            self.inner = self.inner.set_application_mode(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateApplicationPresignedUrl<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_application_presigned_url_input::Builder,
    }
    impl<C, M, R> CreateApplicationPresignedUrl<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateApplicationPresignedUrlOutput,
            smithy_http::result::SdkError<crate::error::CreateApplicationPresignedUrlError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateApplicationPresignedUrlInputOperationOutputAlias,
                crate::output::CreateApplicationPresignedUrlOutput,
                crate::error::CreateApplicationPresignedUrlError,
                crate::input::CreateApplicationPresignedUrlInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the application.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The type of the extension for which to create and return a URL. Currently, the only valid
        /// extension URL type is <code>FLINK_DASHBOARD_URL</code>. </p>
        pub fn url_type(mut self, inp: crate::model::UrlType) -> Self {
            self.inner = self.inner.url_type(inp);
            self
        }
        pub fn set_url_type(mut self, input: std::option::Option<crate::model::UrlType>) -> Self {
            self.inner = self.inner.set_url_type(input);
            self
        }
        /// <p>The duration in seconds for which the returned URL will be valid.</p>
        pub fn session_expiration_duration_in_seconds(mut self, inp: i64) -> Self {
            self.inner = self.inner.session_expiration_duration_in_seconds(inp);
            self
        }
        pub fn set_session_expiration_duration_in_seconds(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_session_expiration_duration_in_seconds(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateApplicationSnapshot<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_application_snapshot_input::Builder,
    }
    impl<C, M, R> CreateApplicationSnapshot<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateApplicationSnapshotOutput,
            smithy_http::result::SdkError<crate::error::CreateApplicationSnapshotError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateApplicationSnapshotInputOperationOutputAlias,
                crate::output::CreateApplicationSnapshotOutput,
                crate::error::CreateApplicationSnapshotError,
                crate::input::CreateApplicationSnapshotInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of an existing application</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>An identifier for the application snapshot.</p>
        pub fn snapshot_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.snapshot_name(inp);
            self
        }
        pub fn set_snapshot_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_snapshot_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteApplication<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_application_input::Builder,
    }
    impl<C, M, R> DeleteApplication<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteApplicationOutput,
            smithy_http::result::SdkError<crate::error::DeleteApplicationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteApplicationInputOperationOutputAlias,
                crate::output::DeleteApplicationOutput,
                crate::error::DeleteApplicationError,
                crate::input::DeleteApplicationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the application to delete.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>Use the <code>DescribeApplication</code> operation to get this value.</p>
        pub fn create_timestamp(mut self, inp: smithy_types::Instant) -> Self {
            self.inner = self.inner.create_timestamp(inp);
            self
        }
        pub fn set_create_timestamp(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.inner = self.inner.set_create_timestamp(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteApplicationCloudWatchLoggingOption<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_application_cloud_watch_logging_option_input::Builder,
    }
    impl<C, M, R> DeleteApplicationCloudWatchLoggingOption<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteApplicationCloudWatchLoggingOptionOutput,
            smithy_http::result::SdkError<
                crate::error::DeleteApplicationCloudWatchLoggingOptionError,
            >,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteApplicationCloudWatchLoggingOptionInputOperationOutputAlias,
                crate::output::DeleteApplicationCloudWatchLoggingOptionOutput,
                crate::error::DeleteApplicationCloudWatchLoggingOptionError,
                crate::input::DeleteApplicationCloudWatchLoggingOptionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The application name.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The version ID of the application. You must provide the
        /// <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You can
        /// retrieve the application version ID using <a>DescribeApplication</a>. For better
        /// concurrency support, use the <code>ConditionalToken</code> parameter instead of
        /// <code>CurrentApplicationVersionId</code>.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>The <code>CloudWatchLoggingOptionId</code> of the Amazon CloudWatch logging option to
        /// delete. You can get the <code>CloudWatchLoggingOptionId</code> by using the <a>DescribeApplication</a> operation. </p>
        pub fn cloud_watch_logging_option_id(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.cloud_watch_logging_option_id(inp);
            self
        }
        pub fn set_cloud_watch_logging_option_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_cloud_watch_logging_option_id(input);
            self
        }
        /// <p>A value you use to implement strong concurrency for application updates. You must provide
        /// the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You get the
        /// application's current <code>ConditionalToken</code> using <a>DescribeApplication</a>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of
        /// <code>CurrentApplicationVersionId</code>.</p>
        pub fn conditional_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.conditional_token(inp);
            self
        }
        pub fn set_conditional_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_conditional_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteApplicationInputProcessingConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_application_input_processing_configuration_input::Builder,
    }
    impl<C, M, R> DeleteApplicationInputProcessingConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
                                pub async fn send(self) -> std::result::Result<crate::output::DeleteApplicationInputProcessingConfigurationOutput, smithy_http::result::SdkError<crate::error::DeleteApplicationInputProcessingConfigurationError>>
                                where
                                    R::Policy: smithy_client::bounds::SmithyRetryPolicy<crate::input::DeleteApplicationInputProcessingConfigurationInputOperationOutputAlias,
                                    crate::output::DeleteApplicationInputProcessingConfigurationOutput,
                                    crate::error::DeleteApplicationInputProcessingConfigurationError,
                                    crate::input::DeleteApplicationInputProcessingConfigurationInputOperationRetryAlias>,
                                {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the application.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The application version.
        /// You can use the <a>DescribeApplication</a> operation to get the current application version.
        /// If the version specified is not the current version, the
        /// <code>ConcurrentModificationException</code> is returned.
        /// </p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>The ID of the input configuration from which to delete the input processing
        /// configuration. You can get a list of the input IDs for an application by using the <a>DescribeApplication</a> operation.</p>
        pub fn input_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.input_id(inp);
            self
        }
        pub fn set_input_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_input_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteApplicationOutput<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_application_output_input::Builder,
    }
    impl<C, M, R> DeleteApplicationOutput<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteApplicationOutputOutput,
            smithy_http::result::SdkError<crate::error::DeleteApplicationOutputError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteApplicationOutputInputOperationOutputAlias,
                crate::output::DeleteApplicationOutputOutput,
                crate::error::DeleteApplicationOutputError,
                crate::input::DeleteApplicationOutputInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The application name.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The application version.
        /// You can use the <a>DescribeApplication</a> operation to get the current application version.
        /// If the version specified is not the current version, the
        /// <code>ConcurrentModificationException</code> is returned.
        /// </p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>The ID of the configuration to delete. Each output configuration that is added to the
        /// application (either when the application is created or later) using the <a>AddApplicationOutput</a> operation has a unique ID. You need to provide the ID to
        /// uniquely identify the output configuration that you want to delete from the application
        /// configuration. You can use the <a>DescribeApplication</a> operation to get the
        /// specific <code>OutputId</code>. </p>
        pub fn output_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.output_id(inp);
            self
        }
        pub fn set_output_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_output_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteApplicationReferenceDataSource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_application_reference_data_source_input::Builder,
    }
    impl<C, M, R> DeleteApplicationReferenceDataSource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteApplicationReferenceDataSourceOutput,
            smithy_http::result::SdkError<crate::error::DeleteApplicationReferenceDataSourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteApplicationReferenceDataSourceInputOperationOutputAlias,
                crate::output::DeleteApplicationReferenceDataSourceOutput,
                crate::error::DeleteApplicationReferenceDataSourceError,
                crate::input::DeleteApplicationReferenceDataSourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of an existing application.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The current application version.  
        /// You can use the <a>DescribeApplication</a> operation to get the current application version.
        /// If the version specified
        /// is not the current version, the <code>ConcurrentModificationException</code> is returned.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>The ID of the reference data source. When you add a reference data source to your
        /// application using the <a>AddApplicationReferenceDataSource</a>, Kinesis Data Analytics assigns an ID.
        /// You can use the <a>DescribeApplication</a> operation to
        /// get the reference ID. </p>
        pub fn reference_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.reference_id(inp);
            self
        }
        pub fn set_reference_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_reference_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteApplicationSnapshot<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_application_snapshot_input::Builder,
    }
    impl<C, M, R> DeleteApplicationSnapshot<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteApplicationSnapshotOutput,
            smithy_http::result::SdkError<crate::error::DeleteApplicationSnapshotError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteApplicationSnapshotInputOperationOutputAlias,
                crate::output::DeleteApplicationSnapshotOutput,
                crate::error::DeleteApplicationSnapshotError,
                crate::input::DeleteApplicationSnapshotInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of an existing application.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The identifier for the snapshot delete.</p>
        pub fn snapshot_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.snapshot_name(inp);
            self
        }
        pub fn set_snapshot_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_snapshot_name(input);
            self
        }
        /// <p>The creation timestamp of the application snapshot to delete. You can retrieve this value
        /// using
        /// or .</p>
        pub fn snapshot_creation_timestamp(mut self, inp: smithy_types::Instant) -> Self {
            self.inner = self.inner.snapshot_creation_timestamp(inp);
            self
        }
        pub fn set_snapshot_creation_timestamp(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.inner = self.inner.set_snapshot_creation_timestamp(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteApplicationVpcConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_application_vpc_configuration_input::Builder,
    }
    impl<C, M, R> DeleteApplicationVpcConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteApplicationVpcConfigurationOutput,
            smithy_http::result::SdkError<crate::error::DeleteApplicationVpcConfigurationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteApplicationVpcConfigurationInputOperationOutputAlias,
                crate::output::DeleteApplicationVpcConfigurationOutput,
                crate::error::DeleteApplicationVpcConfigurationError,
                crate::input::DeleteApplicationVpcConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of an existing application.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The current application version ID. You must provide the
        /// <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You can
        /// retrieve the application version ID using <a>DescribeApplication</a>. For better
        /// concurrency support, use the <code>ConditionalToken</code> parameter instead of
        /// <code>CurrentApplicationVersionId</code>.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>The ID of the VPC configuration to delete.</p>
        pub fn vpc_configuration_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.vpc_configuration_id(inp);
            self
        }
        pub fn set_vpc_configuration_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_vpc_configuration_id(input);
            self
        }
        /// <p>A value you use to implement strong concurrency for application updates. You must provide
        /// the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You get the
        /// application's current <code>ConditionalToken</code> using <a>DescribeApplication</a>. For better concurrency support, use the <code>ConditionalToken</code> parameter instead of
        /// <code>CurrentApplicationVersionId</code>.</p>
        pub fn conditional_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.conditional_token(inp);
            self
        }
        pub fn set_conditional_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_conditional_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeApplication<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_application_input::Builder,
    }
    impl<C, M, R> DescribeApplication<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeApplicationOutput,
            smithy_http::result::SdkError<crate::error::DescribeApplicationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeApplicationInputOperationOutputAlias,
                crate::output::DescribeApplicationOutput,
                crate::error::DescribeApplicationError,
                crate::input::DescribeApplicationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the application.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>Displays verbose information about a Kinesis Data Analytics application, including the application's job plan.</p>
        pub fn include_additional_details(mut self, inp: bool) -> Self {
            self.inner = self.inner.include_additional_details(inp);
            self
        }
        pub fn set_include_additional_details(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_include_additional_details(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeApplicationSnapshot<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_application_snapshot_input::Builder,
    }
    impl<C, M, R> DescribeApplicationSnapshot<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeApplicationSnapshotOutput,
            smithy_http::result::SdkError<crate::error::DescribeApplicationSnapshotError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeApplicationSnapshotInputOperationOutputAlias,
                crate::output::DescribeApplicationSnapshotOutput,
                crate::error::DescribeApplicationSnapshotError,
                crate::input::DescribeApplicationSnapshotInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of an existing application.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The identifier of an application snapshot. You can retrieve this value using
        /// .</p>
        pub fn snapshot_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.snapshot_name(inp);
            self
        }
        pub fn set_snapshot_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_snapshot_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeApplicationVersion<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_application_version_input::Builder,
    }
    impl<C, M, R> DescribeApplicationVersion<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeApplicationVersionOutput,
            smithy_http::result::SdkError<crate::error::DescribeApplicationVersionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeApplicationVersionInputOperationOutputAlias,
                crate::output::DescribeApplicationVersionOutput,
                crate::error::DescribeApplicationVersionError,
                crate::input::DescribeApplicationVersionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the application for which you want to get the version description.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The ID of the application version for which you want to get the description.</p>
        pub fn application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.application_version_id(inp);
            self
        }
        pub fn set_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
            self.inner = self.inner.set_application_version_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DiscoverInputSchema<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::discover_input_schema_input::Builder,
    }
    impl<C, M, R> DiscoverInputSchema<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DiscoverInputSchemaOutput,
            smithy_http::result::SdkError<crate::error::DiscoverInputSchemaError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DiscoverInputSchemaInputOperationOutputAlias,
                crate::output::DiscoverInputSchemaOutput,
                crate::error::DiscoverInputSchemaError,
                crate::input::DiscoverInputSchemaInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the streaming source.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// <p>The ARN of the role that is used to access the streaming source.</p>
        pub fn service_execution_role(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.service_execution_role(inp);
            self
        }
        pub fn set_service_execution_role(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_execution_role(input);
            self
        }
        /// <p>The point at which you want Kinesis Data Analytics to start reading records from the
        /// specified streaming source discovery purposes.</p>
        pub fn input_starting_position_configuration(
            mut self,
            inp: crate::model::InputStartingPositionConfiguration,
        ) -> Self {
            self.inner = self.inner.input_starting_position_configuration(inp);
            self
        }
        pub fn set_input_starting_position_configuration(
            mut self,
            input: std::option::Option<crate::model::InputStartingPositionConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_input_starting_position_configuration(input);
            self
        }
        /// <p>Specify this parameter to discover a schema from data in an Amazon S3
        /// object.</p>
        pub fn s3_configuration(mut self, inp: crate::model::S3Configuration) -> Self {
            self.inner = self.inner.s3_configuration(inp);
            self
        }
        pub fn set_s3_configuration(
            mut self,
            input: std::option::Option<crate::model::S3Configuration>,
        ) -> Self {
            self.inner = self.inner.set_s3_configuration(input);
            self
        }
        /// <p>The <a>InputProcessingConfiguration</a> to use to preprocess the records
        /// before discovering the schema of the records.</p>
        pub fn input_processing_configuration(
            mut self,
            inp: crate::model::InputProcessingConfiguration,
        ) -> Self {
            self.inner = self.inner.input_processing_configuration(inp);
            self
        }
        pub fn set_input_processing_configuration(
            mut self,
            input: std::option::Option<crate::model::InputProcessingConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_input_processing_configuration(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListApplications<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_applications_input::Builder,
    }
    impl<C, M, R> ListApplications<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListApplicationsOutput,
            smithy_http::result::SdkError<crate::error::ListApplicationsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListApplicationsInputOperationOutputAlias,
                crate::output::ListApplicationsOutput,
                crate::error::ListApplicationsError,
                crate::input::ListApplicationsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The maximum number of applications to list.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>If a previous command returned a pagination token,
        /// pass it into this value to retrieve the next set of results.
        /// For more information about pagination, see
        /// <a href="https://docs.aws.amazon.com/cli/latest/userguide/pagination.html">Using the Amazon Command Line Interface's Pagination Options</a>.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListApplicationSnapshots<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_application_snapshots_input::Builder,
    }
    impl<C, M, R> ListApplicationSnapshots<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListApplicationSnapshotsOutput,
            smithy_http::result::SdkError<crate::error::ListApplicationSnapshotsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListApplicationSnapshotsInputOperationOutputAlias,
                crate::output::ListApplicationSnapshotsOutput,
                crate::error::ListApplicationSnapshotsError,
                crate::input::ListApplicationSnapshotsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of an existing application.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The maximum number of application snapshots to list.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>Use this parameter if you receive a <code>NextToken</code> response in a previous request that indicates that there is more
        /// output available. Set it to the value of the previous call's <code>NextToken</code> response to indicate where the output should
        /// continue from. </p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListApplicationVersions<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_application_versions_input::Builder,
    }
    impl<C, M, R> ListApplicationVersions<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListApplicationVersionsOutput,
            smithy_http::result::SdkError<crate::error::ListApplicationVersionsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListApplicationVersionsInputOperationOutputAlias,
                crate::output::ListApplicationVersionsOutput,
                crate::error::ListApplicationVersionsError,
                crate::input::ListApplicationVersionsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the application for which you want to list all versions.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The maximum number of versions to list in this invocation of the operation.</p>
        pub fn limit(mut self, inp: i32) -> Self {
            self.inner = self.inner.limit(inp);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>If a previous invocation of this operation returned a pagination token, pass it into this value to retrieve the next set of results. For more information about pagination, see
        /// <a href="https://docs.aws.amazon.com/cli/latest/userguide/pagination.html">Using the Amazon Command Line Interface's Pagination Options</a>.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTagsForResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl<C, M, R> ListTagsForResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListTagsForResourceInputOperationOutputAlias,
                crate::output::ListTagsForResourceOutput,
                crate::error::ListTagsForResourceError,
                crate::input::ListTagsForResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ARN of the application for which to retrieve tags.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RollbackApplication<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::rollback_application_input::Builder,
    }
    impl<C, M, R> RollbackApplication<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RollbackApplicationOutput,
            smithy_http::result::SdkError<crate::error::RollbackApplicationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::RollbackApplicationInputOperationOutputAlias,
                crate::output::RollbackApplicationOutput,
                crate::error::RollbackApplicationError,
                crate::input::RollbackApplicationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the application.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The current application version ID. You can retrieve the application version ID using
        /// <a>DescribeApplication</a>.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StartApplication<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::start_application_input::Builder,
    }
    impl<C, M, R> StartApplication<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartApplicationOutput,
            smithy_http::result::SdkError<crate::error::StartApplicationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StartApplicationInputOperationOutputAlias,
                crate::output::StartApplicationOutput,
                crate::error::StartApplicationError,
                crate::input::StartApplicationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the application.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>Identifies the run configuration (start parameters) of a Kinesis Data Analytics application.</p>
        pub fn run_configuration(mut self, inp: crate::model::RunConfiguration) -> Self {
            self.inner = self.inner.run_configuration(inp);
            self
        }
        pub fn set_run_configuration(
            mut self,
            input: std::option::Option<crate::model::RunConfiguration>,
        ) -> Self {
            self.inner = self.inner.set_run_configuration(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StopApplication<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::stop_application_input::Builder,
    }
    impl<C, M, R> StopApplication<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StopApplicationOutput,
            smithy_http::result::SdkError<crate::error::StopApplicationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StopApplicationInputOperationOutputAlias,
                crate::output::StopApplicationOutput,
                crate::error::StopApplicationError,
                crate::input::StopApplicationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the running application to stop.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>Set to <code>true</code> to force the application to stop. If you set <code>Force</code>
        /// to <code>true</code>, Kinesis Data Analytics stops the application without taking a snapshot.
        /// </p>
        /// <note>
        /// <p>Force-stopping your application may lead to data loss or duplication.
        /// To prevent data loss or duplicate processing of data during application restarts,
        /// we recommend you to take frequent snapshots of your application.</p>
        /// </note>
        /// <p>You can only force stop a Flink-based Kinesis Data Analytics application. You can't force stop a SQL-based Kinesis Data Analytics application.</p>
        /// <p>The application must be in the
        /// <code>STARTING</code>, <code>UPDATING</code>, <code>STOPPING</code>, <code>AUTOSCALING</code>, or
        /// <code>RUNNING</code> status. </p>
        pub fn force(mut self, inp: bool) -> Self {
            self.inner = self.inner.force(inp);
            self
        }
        pub fn set_force(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_force(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TagResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl<C, M, R> TagResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            smithy_http::result::SdkError<crate::error::TagResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::TagResourceInputOperationOutputAlias,
                crate::output::TagResourceOutput,
                crate::error::TagResourceError,
                crate::input::TagResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ARN of the application to assign the tags.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `Tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The key-value tags to assign to the application.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UntagResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl<C, M, R> UntagResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            smithy_http::result::SdkError<crate::error::UntagResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UntagResourceInputOperationOutputAlias,
                crate::output::UntagResourceOutput,
                crate::error::UntagResourceError,
                crate::input::UntagResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ARN of the Kinesis Data Analytics application from which to remove the tags.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `TagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        /// <p>A list of keys of tags to remove from the specified application.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateApplication<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_application_input::Builder,
    }
    impl<C, M, R> UpdateApplication<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateApplicationOutput,
            smithy_http::result::SdkError<crate::error::UpdateApplicationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateApplicationInputOperationOutputAlias,
                crate::output::UpdateApplicationOutput,
                crate::error::UpdateApplicationError,
                crate::input::UpdateApplicationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the application to update.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>The current application version ID. You must provide the
        /// <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>.You can
        /// retrieve the application version ID using <a>DescribeApplication</a>. For better
        /// concurrency support, use the <code>ConditionalToken</code> parameter instead of
        /// <code>CurrentApplicationVersionId</code>.</p>
        pub fn current_application_version_id(mut self, inp: i64) -> Self {
            self.inner = self.inner.current_application_version_id(inp);
            self
        }
        pub fn set_current_application_version_id(
            mut self,
            input: std::option::Option<i64>,
        ) -> Self {
            self.inner = self.inner.set_current_application_version_id(input);
            self
        }
        /// <p>Describes application configuration updates.</p>
        pub fn application_configuration_update(
            mut self,
            inp: crate::model::ApplicationConfigurationUpdate,
        ) -> Self {
            self.inner = self.inner.application_configuration_update(inp);
            self
        }
        pub fn set_application_configuration_update(
            mut self,
            input: std::option::Option<crate::model::ApplicationConfigurationUpdate>,
        ) -> Self {
            self.inner = self.inner.set_application_configuration_update(input);
            self
        }
        /// <p>Describes updates to the service execution role.</p>
        pub fn service_execution_role_update(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.service_execution_role_update(inp);
            self
        }
        pub fn set_service_execution_role_update(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_service_execution_role_update(input);
            self
        }
        /// <p>Describes updates to the application's starting parameters.</p>
        pub fn run_configuration_update(
            mut self,
            inp: crate::model::RunConfigurationUpdate,
        ) -> Self {
            self.inner = self.inner.run_configuration_update(inp);
            self
        }
        pub fn set_run_configuration_update(
            mut self,
            input: std::option::Option<crate::model::RunConfigurationUpdate>,
        ) -> Self {
            self.inner = self.inner.set_run_configuration_update(input);
            self
        }
        /// Appends an item to `CloudWatchLoggingOptionUpdates`.
        ///
        /// To override the contents of this collection use [`set_cloud_watch_logging_option_updates`](Self::set_cloud_watch_logging_option_updates).
        /// <p>Describes application Amazon CloudWatch logging option updates. You can only update
        /// existing CloudWatch logging options with this action. To add a new CloudWatch logging option,
        /// use <a>AddApplicationCloudWatchLoggingOption</a>.</p>
        pub fn cloud_watch_logging_option_updates(
            mut self,
            inp: impl Into<crate::model::CloudWatchLoggingOptionUpdate>,
        ) -> Self {
            self.inner = self.inner.cloud_watch_logging_option_updates(inp);
            self
        }
        pub fn set_cloud_watch_logging_option_updates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CloudWatchLoggingOptionUpdate>>,
        ) -> Self {
            self.inner = self.inner.set_cloud_watch_logging_option_updates(input);
            self
        }
        /// <p>A value you use to implement strong concurrency for application updates. You must
        /// provide the <code>CurrentApplicationVersionId</code> or the <code>ConditionalToken</code>. You
        /// get the application's current <code>ConditionalToken</code> using <a>DescribeApplication</a>. For better concurrency support, use the
        /// <code>ConditionalToken</code> parameter instead of
        /// <code>CurrentApplicationVersionId</code>.</p>
        pub fn conditional_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.conditional_token(inp);
            self
        }
        pub fn set_conditional_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_conditional_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateApplicationMaintenanceConfiguration<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_application_maintenance_configuration_input::Builder,
    }
    impl<C, M, R> UpdateApplicationMaintenanceConfiguration<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateApplicationMaintenanceConfigurationOutput,
            smithy_http::result::SdkError<
                crate::error::UpdateApplicationMaintenanceConfigurationError,
            >,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateApplicationMaintenanceConfigurationInputOperationOutputAlias,
                crate::output::UpdateApplicationMaintenanceConfigurationOutput,
                crate::error::UpdateApplicationMaintenanceConfigurationError,
                crate::input::UpdateApplicationMaintenanceConfigurationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the application for which you want to update the maintenance configuration.</p>
        pub fn application_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.application_name(inp);
            self
        }
        pub fn set_application_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_application_name(input);
            self
        }
        /// <p>Describes the application maintenance configuration update.</p>
        pub fn application_maintenance_configuration_update(
            mut self,
            inp: crate::model::ApplicationMaintenanceConfigurationUpdate,
        ) -> Self {
            self.inner = self.inner.application_maintenance_configuration_update(inp);
            self
        }
        pub fn set_application_maintenance_configuration_update(
            mut self,
            input: std::option::Option<crate::model::ApplicationMaintenanceConfigurationUpdate>,
        ) -> Self {
            self.inner = self
                .inner
                .set_application_maintenance_configuration_update(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, smithy_client::retry::Standard> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let client = aws_hyper::Client::new(conn).with_retry_config(retry_config.into());
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        smithy_client::retry::Standard,
    >
{
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let client = aws_hyper::Client::https().with_retry_config(retry_config.into());
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
