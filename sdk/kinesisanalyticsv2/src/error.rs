// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct AddApplicationCloudWatchLoggingOptionError {
    pub kind: AddApplicationCloudWatchLoggingOptionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum AddApplicationCloudWatchLoggingOptionErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidApplicationConfigurationException(
        crate::error::InvalidApplicationConfigurationException,
    ),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for AddApplicationCloudWatchLoggingOptionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            AddApplicationCloudWatchLoggingOptionErrorKind::ConcurrentModificationException(_inner) =>
            _inner.fmt(f)
            ,
            AddApplicationCloudWatchLoggingOptionErrorKind::InvalidApplicationConfigurationException(_inner) =>
            _inner.fmt(f)
            ,
            AddApplicationCloudWatchLoggingOptionErrorKind::InvalidArgumentException(_inner) =>
            _inner.fmt(f)
            ,
            AddApplicationCloudWatchLoggingOptionErrorKind::InvalidRequestException(_inner) =>
            _inner.fmt(f)
            ,
            AddApplicationCloudWatchLoggingOptionErrorKind::ResourceInUseException(_inner) =>
            _inner.fmt(f)
            ,
            AddApplicationCloudWatchLoggingOptionErrorKind::ResourceNotFoundException(_inner) =>
            _inner.fmt(f)
            ,
            AddApplicationCloudWatchLoggingOptionErrorKind::Unhandled(_inner) => {
                _inner.fmt(f)
            }
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for AddApplicationCloudWatchLoggingOptionError {
    fn code(&self) -> Option<&str> {
        AddApplicationCloudWatchLoggingOptionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl AddApplicationCloudWatchLoggingOptionError {
    pub fn new(
        kind: AddApplicationCloudWatchLoggingOptionErrorKind,
        meta: smithy_types::Error,
    ) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: AddApplicationCloudWatchLoggingOptionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: AddApplicationCloudWatchLoggingOptionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationCloudWatchLoggingOptionErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_application_configuration_exception(&self) -> bool {
        matches!(&self.kind, AddApplicationCloudWatchLoggingOptionErrorKind::InvalidApplicationConfigurationException(_))
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationCloudWatchLoggingOptionErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationCloudWatchLoggingOptionErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationCloudWatchLoggingOptionErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationCloudWatchLoggingOptionErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for AddApplicationCloudWatchLoggingOptionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            AddApplicationCloudWatchLoggingOptionErrorKind::ConcurrentModificationException(_inner) =>
            Some(_inner)
            ,
            AddApplicationCloudWatchLoggingOptionErrorKind::InvalidApplicationConfigurationException(_inner) =>
            Some(_inner)
            ,
            AddApplicationCloudWatchLoggingOptionErrorKind::InvalidArgumentException(_inner) =>
            Some(_inner)
            ,
            AddApplicationCloudWatchLoggingOptionErrorKind::InvalidRequestException(_inner) =>
            Some(_inner)
            ,
            AddApplicationCloudWatchLoggingOptionErrorKind::ResourceInUseException(_inner) =>
            Some(_inner)
            ,
            AddApplicationCloudWatchLoggingOptionErrorKind::ResourceNotFoundException(_inner) =>
            Some(_inner)
            ,
            AddApplicationCloudWatchLoggingOptionErrorKind::Unhandled(_inner) => {
                Some(_inner.as_ref())
            }
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct AddApplicationInputError {
    pub kind: AddApplicationInputErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum AddApplicationInputErrorKind {
    CodeValidationException(crate::error::CodeValidationException),
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for AddApplicationInputError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            AddApplicationInputErrorKind::CodeValidationException(_inner) => _inner.fmt(f),
            AddApplicationInputErrorKind::ConcurrentModificationException(_inner) => _inner.fmt(f),
            AddApplicationInputErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            AddApplicationInputErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            AddApplicationInputErrorKind::ResourceInUseException(_inner) => _inner.fmt(f),
            AddApplicationInputErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            AddApplicationInputErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for AddApplicationInputError {
    fn code(&self) -> Option<&str> {
        AddApplicationInputError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl AddApplicationInputError {
    pub fn new(kind: AddApplicationInputErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: AddApplicationInputErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: AddApplicationInputErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_code_validation_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationInputErrorKind::CodeValidationException(_)
        )
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationInputErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationInputErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationInputErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationInputErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationInputErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for AddApplicationInputError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            AddApplicationInputErrorKind::CodeValidationException(_inner) => Some(_inner),
            AddApplicationInputErrorKind::ConcurrentModificationException(_inner) => Some(_inner),
            AddApplicationInputErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            AddApplicationInputErrorKind::InvalidRequestException(_inner) => Some(_inner),
            AddApplicationInputErrorKind::ResourceInUseException(_inner) => Some(_inner),
            AddApplicationInputErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            AddApplicationInputErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct AddApplicationInputProcessingConfigurationError {
    pub kind: AddApplicationInputProcessingConfigurationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum AddApplicationInputProcessingConfigurationErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for AddApplicationInputProcessingConfigurationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            AddApplicationInputProcessingConfigurationErrorKind::ConcurrentModificationException(_inner) =>
            _inner.fmt(f)
            ,
            AddApplicationInputProcessingConfigurationErrorKind::InvalidArgumentException(_inner) =>
            _inner.fmt(f)
            ,
            AddApplicationInputProcessingConfigurationErrorKind::InvalidRequestException(_inner) =>
            _inner.fmt(f)
            ,
            AddApplicationInputProcessingConfigurationErrorKind::ResourceInUseException(_inner) =>
            _inner.fmt(f)
            ,
            AddApplicationInputProcessingConfigurationErrorKind::ResourceNotFoundException(_inner) =>
            _inner.fmt(f)
            ,
            AddApplicationInputProcessingConfigurationErrorKind::Unhandled(_inner) => {
                _inner.fmt(f)
            }
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for AddApplicationInputProcessingConfigurationError {
    fn code(&self) -> Option<&str> {
        AddApplicationInputProcessingConfigurationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl AddApplicationInputProcessingConfigurationError {
    pub fn new(
        kind: AddApplicationInputProcessingConfigurationErrorKind,
        meta: smithy_types::Error,
    ) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: AddApplicationInputProcessingConfigurationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: AddApplicationInputProcessingConfigurationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationInputProcessingConfigurationErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationInputProcessingConfigurationErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationInputProcessingConfigurationErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationInputProcessingConfigurationErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationInputProcessingConfigurationErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for AddApplicationInputProcessingConfigurationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            AddApplicationInputProcessingConfigurationErrorKind::ConcurrentModificationException(_inner) =>
            Some(_inner)
            ,
            AddApplicationInputProcessingConfigurationErrorKind::InvalidArgumentException(_inner) =>
            Some(_inner)
            ,
            AddApplicationInputProcessingConfigurationErrorKind::InvalidRequestException(_inner) =>
            Some(_inner)
            ,
            AddApplicationInputProcessingConfigurationErrorKind::ResourceInUseException(_inner) =>
            Some(_inner)
            ,
            AddApplicationInputProcessingConfigurationErrorKind::ResourceNotFoundException(_inner) =>
            Some(_inner)
            ,
            AddApplicationInputProcessingConfigurationErrorKind::Unhandled(_inner) => {
                Some(_inner.as_ref())
            }
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct AddApplicationOutputError {
    pub kind: AddApplicationOutputErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum AddApplicationOutputErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for AddApplicationOutputError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            AddApplicationOutputErrorKind::ConcurrentModificationException(_inner) => _inner.fmt(f),
            AddApplicationOutputErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            AddApplicationOutputErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            AddApplicationOutputErrorKind::ResourceInUseException(_inner) => _inner.fmt(f),
            AddApplicationOutputErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            AddApplicationOutputErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for AddApplicationOutputError {
    fn code(&self) -> Option<&str> {
        AddApplicationOutputError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl AddApplicationOutputError {
    pub fn new(kind: AddApplicationOutputErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: AddApplicationOutputErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: AddApplicationOutputErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationOutputErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationOutputErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationOutputErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationOutputErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationOutputErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for AddApplicationOutputError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            AddApplicationOutputErrorKind::ConcurrentModificationException(_inner) => Some(_inner),
            AddApplicationOutputErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            AddApplicationOutputErrorKind::InvalidRequestException(_inner) => Some(_inner),
            AddApplicationOutputErrorKind::ResourceInUseException(_inner) => Some(_inner),
            AddApplicationOutputErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            AddApplicationOutputErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct AddApplicationReferenceDataSourceError {
    pub kind: AddApplicationReferenceDataSourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum AddApplicationReferenceDataSourceErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for AddApplicationReferenceDataSourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            AddApplicationReferenceDataSourceErrorKind::ConcurrentModificationException(_inner) => {
                _inner.fmt(f)
            }
            AddApplicationReferenceDataSourceErrorKind::InvalidArgumentException(_inner) => {
                _inner.fmt(f)
            }
            AddApplicationReferenceDataSourceErrorKind::InvalidRequestException(_inner) => {
                _inner.fmt(f)
            }
            AddApplicationReferenceDataSourceErrorKind::ResourceInUseException(_inner) => {
                _inner.fmt(f)
            }
            AddApplicationReferenceDataSourceErrorKind::ResourceNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            AddApplicationReferenceDataSourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for AddApplicationReferenceDataSourceError {
    fn code(&self) -> Option<&str> {
        AddApplicationReferenceDataSourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl AddApplicationReferenceDataSourceError {
    pub fn new(
        kind: AddApplicationReferenceDataSourceErrorKind,
        meta: smithy_types::Error,
    ) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: AddApplicationReferenceDataSourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: AddApplicationReferenceDataSourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationReferenceDataSourceErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationReferenceDataSourceErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationReferenceDataSourceErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationReferenceDataSourceErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationReferenceDataSourceErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for AddApplicationReferenceDataSourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            AddApplicationReferenceDataSourceErrorKind::ConcurrentModificationException(_inner) => {
                Some(_inner)
            }
            AddApplicationReferenceDataSourceErrorKind::InvalidArgumentException(_inner) => {
                Some(_inner)
            }
            AddApplicationReferenceDataSourceErrorKind::InvalidRequestException(_inner) => {
                Some(_inner)
            }
            AddApplicationReferenceDataSourceErrorKind::ResourceInUseException(_inner) => {
                Some(_inner)
            }
            AddApplicationReferenceDataSourceErrorKind::ResourceNotFoundException(_inner) => {
                Some(_inner)
            }
            AddApplicationReferenceDataSourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct AddApplicationVpcConfigurationError {
    pub kind: AddApplicationVpcConfigurationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum AddApplicationVpcConfigurationErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidApplicationConfigurationException(
        crate::error::InvalidApplicationConfigurationException,
    ),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for AddApplicationVpcConfigurationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            AddApplicationVpcConfigurationErrorKind::ConcurrentModificationException(_inner) => {
                _inner.fmt(f)
            }
            AddApplicationVpcConfigurationErrorKind::InvalidApplicationConfigurationException(
                _inner,
            ) => _inner.fmt(f),
            AddApplicationVpcConfigurationErrorKind::InvalidArgumentException(_inner) => {
                _inner.fmt(f)
            }
            AddApplicationVpcConfigurationErrorKind::ResourceInUseException(_inner) => {
                _inner.fmt(f)
            }
            AddApplicationVpcConfigurationErrorKind::ResourceNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            AddApplicationVpcConfigurationErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for AddApplicationVpcConfigurationError {
    fn code(&self) -> Option<&str> {
        AddApplicationVpcConfigurationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl AddApplicationVpcConfigurationError {
    pub fn new(kind: AddApplicationVpcConfigurationErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: AddApplicationVpcConfigurationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: AddApplicationVpcConfigurationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationVpcConfigurationErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_application_configuration_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationVpcConfigurationErrorKind::InvalidApplicationConfigurationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationVpcConfigurationErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationVpcConfigurationErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            AddApplicationVpcConfigurationErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for AddApplicationVpcConfigurationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            AddApplicationVpcConfigurationErrorKind::ConcurrentModificationException(_inner) => {
                Some(_inner)
            }
            AddApplicationVpcConfigurationErrorKind::InvalidApplicationConfigurationException(
                _inner,
            ) => Some(_inner),
            AddApplicationVpcConfigurationErrorKind::InvalidArgumentException(_inner) => {
                Some(_inner)
            }
            AddApplicationVpcConfigurationErrorKind::ResourceInUseException(_inner) => Some(_inner),
            AddApplicationVpcConfigurationErrorKind::ResourceNotFoundException(_inner) => {
                Some(_inner)
            }
            AddApplicationVpcConfigurationErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateApplicationError {
    pub kind: CreateApplicationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateApplicationErrorKind {
    CodeValidationException(crate::error::CodeValidationException),
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    LimitExceededException(crate::error::LimitExceededException),
    ResourceInUseException(crate::error::ResourceInUseException),
    TooManyTagsException(crate::error::TooManyTagsException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateApplicationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateApplicationErrorKind::CodeValidationException(_inner) => _inner.fmt(f),
            CreateApplicationErrorKind::ConcurrentModificationException(_inner) => _inner.fmt(f),
            CreateApplicationErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            CreateApplicationErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            CreateApplicationErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            CreateApplicationErrorKind::ResourceInUseException(_inner) => _inner.fmt(f),
            CreateApplicationErrorKind::TooManyTagsException(_inner) => _inner.fmt(f),
            CreateApplicationErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateApplicationError {
    fn code(&self) -> Option<&str> {
        CreateApplicationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateApplicationError {
    pub fn new(kind: CreateApplicationErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateApplicationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateApplicationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_code_validation_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationErrorKind::CodeValidationException(_)
        )
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_too_many_tags_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationErrorKind::TooManyTagsException(_)
        )
    }
}
impl std::error::Error for CreateApplicationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateApplicationErrorKind::CodeValidationException(_inner) => Some(_inner),
            CreateApplicationErrorKind::ConcurrentModificationException(_inner) => Some(_inner),
            CreateApplicationErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            CreateApplicationErrorKind::InvalidRequestException(_inner) => Some(_inner),
            CreateApplicationErrorKind::LimitExceededException(_inner) => Some(_inner),
            CreateApplicationErrorKind::ResourceInUseException(_inner) => Some(_inner),
            CreateApplicationErrorKind::TooManyTagsException(_inner) => Some(_inner),
            CreateApplicationErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateApplicationPresignedUrlError {
    pub kind: CreateApplicationPresignedUrlErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateApplicationPresignedUrlErrorKind {
    InvalidArgumentException(crate::error::InvalidArgumentException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateApplicationPresignedUrlError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateApplicationPresignedUrlErrorKind::InvalidArgumentException(_inner) => {
                _inner.fmt(f)
            }
            CreateApplicationPresignedUrlErrorKind::ResourceInUseException(_inner) => _inner.fmt(f),
            CreateApplicationPresignedUrlErrorKind::ResourceNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            CreateApplicationPresignedUrlErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateApplicationPresignedUrlError {
    fn code(&self) -> Option<&str> {
        CreateApplicationPresignedUrlError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateApplicationPresignedUrlError {
    pub fn new(kind: CreateApplicationPresignedUrlErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateApplicationPresignedUrlErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateApplicationPresignedUrlErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationPresignedUrlErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationPresignedUrlErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationPresignedUrlErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for CreateApplicationPresignedUrlError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateApplicationPresignedUrlErrorKind::InvalidArgumentException(_inner) => {
                Some(_inner)
            }
            CreateApplicationPresignedUrlErrorKind::ResourceInUseException(_inner) => Some(_inner),
            CreateApplicationPresignedUrlErrorKind::ResourceNotFoundException(_inner) => {
                Some(_inner)
            }
            CreateApplicationPresignedUrlErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateApplicationSnapshotError {
    pub kind: CreateApplicationSnapshotErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateApplicationSnapshotErrorKind {
    InvalidApplicationConfigurationException(
        crate::error::InvalidApplicationConfigurationException,
    ),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    LimitExceededException(crate::error::LimitExceededException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateApplicationSnapshotError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateApplicationSnapshotErrorKind::InvalidApplicationConfigurationException(
                _inner,
            ) => _inner.fmt(f),
            CreateApplicationSnapshotErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            CreateApplicationSnapshotErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            CreateApplicationSnapshotErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            CreateApplicationSnapshotErrorKind::ResourceInUseException(_inner) => _inner.fmt(f),
            CreateApplicationSnapshotErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            CreateApplicationSnapshotErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            CreateApplicationSnapshotErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateApplicationSnapshotError {
    fn code(&self) -> Option<&str> {
        CreateApplicationSnapshotError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateApplicationSnapshotError {
    pub fn new(kind: CreateApplicationSnapshotErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateApplicationSnapshotErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateApplicationSnapshotErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_application_configuration_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationSnapshotErrorKind::InvalidApplicationConfigurationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationSnapshotErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationSnapshotErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationSnapshotErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationSnapshotErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationSnapshotErrorKind::ResourceNotFoundException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            CreateApplicationSnapshotErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for CreateApplicationSnapshotError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateApplicationSnapshotErrorKind::InvalidApplicationConfigurationException(
                _inner,
            ) => Some(_inner),
            CreateApplicationSnapshotErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            CreateApplicationSnapshotErrorKind::InvalidRequestException(_inner) => Some(_inner),
            CreateApplicationSnapshotErrorKind::LimitExceededException(_inner) => Some(_inner),
            CreateApplicationSnapshotErrorKind::ResourceInUseException(_inner) => Some(_inner),
            CreateApplicationSnapshotErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            CreateApplicationSnapshotErrorKind::UnsupportedOperationException(_inner) => {
                Some(_inner)
            }
            CreateApplicationSnapshotErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteApplicationError {
    pub kind: DeleteApplicationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteApplicationErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidApplicationConfigurationException(
        crate::error::InvalidApplicationConfigurationException,
    ),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteApplicationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteApplicationErrorKind::ConcurrentModificationException(_inner) => _inner.fmt(f),
            DeleteApplicationErrorKind::InvalidApplicationConfigurationException(_inner) => {
                _inner.fmt(f)
            }
            DeleteApplicationErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            DeleteApplicationErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            DeleteApplicationErrorKind::ResourceInUseException(_inner) => _inner.fmt(f),
            DeleteApplicationErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DeleteApplicationErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteApplicationError {
    fn code(&self) -> Option<&str> {
        DeleteApplicationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteApplicationError {
    pub fn new(kind: DeleteApplicationErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteApplicationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteApplicationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_application_configuration_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationErrorKind::InvalidApplicationConfigurationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DeleteApplicationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteApplicationErrorKind::ConcurrentModificationException(_inner) => Some(_inner),
            DeleteApplicationErrorKind::InvalidApplicationConfigurationException(_inner) => {
                Some(_inner)
            }
            DeleteApplicationErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            DeleteApplicationErrorKind::InvalidRequestException(_inner) => Some(_inner),
            DeleteApplicationErrorKind::ResourceInUseException(_inner) => Some(_inner),
            DeleteApplicationErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DeleteApplicationErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteApplicationCloudWatchLoggingOptionError {
    pub kind: DeleteApplicationCloudWatchLoggingOptionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteApplicationCloudWatchLoggingOptionErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidApplicationConfigurationException(
        crate::error::InvalidApplicationConfigurationException,
    ),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteApplicationCloudWatchLoggingOptionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteApplicationCloudWatchLoggingOptionErrorKind::ConcurrentModificationException(_inner) =>
            _inner.fmt(f)
            ,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::InvalidApplicationConfigurationException(_inner) =>
            _inner.fmt(f)
            ,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::InvalidArgumentException(_inner) =>
            _inner.fmt(f)
            ,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::InvalidRequestException(_inner) =>
            _inner.fmt(f)
            ,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::ResourceInUseException(_inner) =>
            _inner.fmt(f)
            ,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::ResourceNotFoundException(_inner) =>
            _inner.fmt(f)
            ,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::Unhandled(_inner) => {
                _inner.fmt(f)
            }
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteApplicationCloudWatchLoggingOptionError {
    fn code(&self) -> Option<&str> {
        DeleteApplicationCloudWatchLoggingOptionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteApplicationCloudWatchLoggingOptionError {
    pub fn new(
        kind: DeleteApplicationCloudWatchLoggingOptionErrorKind,
        meta: smithy_types::Error,
    ) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteApplicationCloudWatchLoggingOptionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteApplicationCloudWatchLoggingOptionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_application_configuration_exception(&self) -> bool {
        matches!(&self.kind, DeleteApplicationCloudWatchLoggingOptionErrorKind::InvalidApplicationConfigurationException(_))
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DeleteApplicationCloudWatchLoggingOptionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteApplicationCloudWatchLoggingOptionErrorKind::ConcurrentModificationException(_inner) =>
            Some(_inner)
            ,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::InvalidApplicationConfigurationException(_inner) =>
            Some(_inner)
            ,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::InvalidArgumentException(_inner) =>
            Some(_inner)
            ,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::InvalidRequestException(_inner) =>
            Some(_inner)
            ,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::ResourceInUseException(_inner) =>
            Some(_inner)
            ,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::ResourceNotFoundException(_inner) =>
            Some(_inner)
            ,
            DeleteApplicationCloudWatchLoggingOptionErrorKind::Unhandled(_inner) => {
                Some(_inner.as_ref())
            }
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteApplicationInputProcessingConfigurationError {
    pub kind: DeleteApplicationInputProcessingConfigurationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteApplicationInputProcessingConfigurationErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteApplicationInputProcessingConfigurationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteApplicationInputProcessingConfigurationErrorKind::ConcurrentModificationException(_inner) =>
            _inner.fmt(f)
            ,
            DeleteApplicationInputProcessingConfigurationErrorKind::InvalidArgumentException(_inner) =>
            _inner.fmt(f)
            ,
            DeleteApplicationInputProcessingConfigurationErrorKind::InvalidRequestException(_inner) =>
            _inner.fmt(f)
            ,
            DeleteApplicationInputProcessingConfigurationErrorKind::ResourceInUseException(_inner) =>
            _inner.fmt(f)
            ,
            DeleteApplicationInputProcessingConfigurationErrorKind::ResourceNotFoundException(_inner) =>
            _inner.fmt(f)
            ,
            DeleteApplicationInputProcessingConfigurationErrorKind::Unhandled(_inner) => {
                _inner.fmt(f)
            }
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteApplicationInputProcessingConfigurationError {
    fn code(&self) -> Option<&str> {
        DeleteApplicationInputProcessingConfigurationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteApplicationInputProcessingConfigurationError {
    pub fn new(
        kind: DeleteApplicationInputProcessingConfigurationErrorKind,
        meta: smithy_types::Error,
    ) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteApplicationInputProcessingConfigurationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteApplicationInputProcessingConfigurationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationInputProcessingConfigurationErrorKind::ConcurrentModificationException(
                _
            )
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationInputProcessingConfigurationErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationInputProcessingConfigurationErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationInputProcessingConfigurationErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationInputProcessingConfigurationErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DeleteApplicationInputProcessingConfigurationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteApplicationInputProcessingConfigurationErrorKind::ConcurrentModificationException(_inner) =>
            Some(_inner)
            ,
            DeleteApplicationInputProcessingConfigurationErrorKind::InvalidArgumentException(_inner) =>
            Some(_inner)
            ,
            DeleteApplicationInputProcessingConfigurationErrorKind::InvalidRequestException(_inner) =>
            Some(_inner)
            ,
            DeleteApplicationInputProcessingConfigurationErrorKind::ResourceInUseException(_inner) =>
            Some(_inner)
            ,
            DeleteApplicationInputProcessingConfigurationErrorKind::ResourceNotFoundException(_inner) =>
            Some(_inner)
            ,
            DeleteApplicationInputProcessingConfigurationErrorKind::Unhandled(_inner) => {
                Some(_inner.as_ref())
            }
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteApplicationReferenceDataSourceError {
    pub kind: DeleteApplicationReferenceDataSourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteApplicationReferenceDataSourceErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteApplicationReferenceDataSourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteApplicationReferenceDataSourceErrorKind::ConcurrentModificationException(
                _inner,
            ) => _inner.fmt(f),
            DeleteApplicationReferenceDataSourceErrorKind::InvalidArgumentException(_inner) => {
                _inner.fmt(f)
            }
            DeleteApplicationReferenceDataSourceErrorKind::InvalidRequestException(_inner) => {
                _inner.fmt(f)
            }
            DeleteApplicationReferenceDataSourceErrorKind::ResourceInUseException(_inner) => {
                _inner.fmt(f)
            }
            DeleteApplicationReferenceDataSourceErrorKind::ResourceNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DeleteApplicationReferenceDataSourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteApplicationReferenceDataSourceError {
    fn code(&self) -> Option<&str> {
        DeleteApplicationReferenceDataSourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteApplicationReferenceDataSourceError {
    pub fn new(
        kind: DeleteApplicationReferenceDataSourceErrorKind,
        meta: smithy_types::Error,
    ) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteApplicationReferenceDataSourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteApplicationReferenceDataSourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationReferenceDataSourceErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationReferenceDataSourceErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationReferenceDataSourceErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationReferenceDataSourceErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationReferenceDataSourceErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DeleteApplicationReferenceDataSourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteApplicationReferenceDataSourceErrorKind::ConcurrentModificationException(
                _inner,
            ) => Some(_inner),
            DeleteApplicationReferenceDataSourceErrorKind::InvalidArgumentException(_inner) => {
                Some(_inner)
            }
            DeleteApplicationReferenceDataSourceErrorKind::InvalidRequestException(_inner) => {
                Some(_inner)
            }
            DeleteApplicationReferenceDataSourceErrorKind::ResourceInUseException(_inner) => {
                Some(_inner)
            }
            DeleteApplicationReferenceDataSourceErrorKind::ResourceNotFoundException(_inner) => {
                Some(_inner)
            }
            DeleteApplicationReferenceDataSourceErrorKind::Unhandled(_inner) => {
                Some(_inner.as_ref())
            }
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteApplicationSnapshotError {
    pub kind: DeleteApplicationSnapshotErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteApplicationSnapshotErrorKind {
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteApplicationSnapshotError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteApplicationSnapshotErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            DeleteApplicationSnapshotErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            DeleteApplicationSnapshotErrorKind::ResourceInUseException(_inner) => _inner.fmt(f),
            DeleteApplicationSnapshotErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DeleteApplicationSnapshotErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            DeleteApplicationSnapshotErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteApplicationSnapshotError {
    fn code(&self) -> Option<&str> {
        DeleteApplicationSnapshotError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteApplicationSnapshotError {
    pub fn new(kind: DeleteApplicationSnapshotErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteApplicationSnapshotErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteApplicationSnapshotErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationSnapshotErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationSnapshotErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationSnapshotErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationSnapshotErrorKind::ResourceNotFoundException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationSnapshotErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DeleteApplicationSnapshotError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteApplicationSnapshotErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            DeleteApplicationSnapshotErrorKind::InvalidRequestException(_inner) => Some(_inner),
            DeleteApplicationSnapshotErrorKind::ResourceInUseException(_inner) => Some(_inner),
            DeleteApplicationSnapshotErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DeleteApplicationSnapshotErrorKind::UnsupportedOperationException(_inner) => {
                Some(_inner)
            }
            DeleteApplicationSnapshotErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteApplicationVpcConfigurationError {
    pub kind: DeleteApplicationVpcConfigurationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteApplicationVpcConfigurationErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidApplicationConfigurationException(
        crate::error::InvalidApplicationConfigurationException,
    ),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteApplicationVpcConfigurationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteApplicationVpcConfigurationErrorKind::ConcurrentModificationException(_inner) =>
            _inner.fmt(f)
            ,
            DeleteApplicationVpcConfigurationErrorKind::InvalidApplicationConfigurationException(_inner) =>
            _inner.fmt(f)
            ,
            DeleteApplicationVpcConfigurationErrorKind::InvalidArgumentException(_inner) =>
            _inner.fmt(f)
            ,
            DeleteApplicationVpcConfigurationErrorKind::ResourceInUseException(_inner) =>
            _inner.fmt(f)
            ,
            DeleteApplicationVpcConfigurationErrorKind::ResourceNotFoundException(_inner) =>
            _inner.fmt(f)
            ,
            DeleteApplicationVpcConfigurationErrorKind::Unhandled(_inner) => {
                _inner.fmt(f)
            }
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteApplicationVpcConfigurationError {
    fn code(&self) -> Option<&str> {
        DeleteApplicationVpcConfigurationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteApplicationVpcConfigurationError {
    pub fn new(
        kind: DeleteApplicationVpcConfigurationErrorKind,
        meta: smithy_types::Error,
    ) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteApplicationVpcConfigurationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteApplicationVpcConfigurationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationVpcConfigurationErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_application_configuration_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationVpcConfigurationErrorKind::InvalidApplicationConfigurationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationVpcConfigurationErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationVpcConfigurationErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DeleteApplicationVpcConfigurationErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DeleteApplicationVpcConfigurationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteApplicationVpcConfigurationErrorKind::ConcurrentModificationException(_inner) =>
            Some(_inner)
            ,
            DeleteApplicationVpcConfigurationErrorKind::InvalidApplicationConfigurationException(_inner) =>
            Some(_inner)
            ,
            DeleteApplicationVpcConfigurationErrorKind::InvalidArgumentException(_inner) =>
            Some(_inner)
            ,
            DeleteApplicationVpcConfigurationErrorKind::ResourceInUseException(_inner) =>
            Some(_inner)
            ,
            DeleteApplicationVpcConfigurationErrorKind::ResourceNotFoundException(_inner) =>
            Some(_inner)
            ,
            DeleteApplicationVpcConfigurationErrorKind::Unhandled(_inner) => {
                Some(_inner.as_ref())
            }
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeApplicationError {
    pub kind: DescribeApplicationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeApplicationErrorKind {
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeApplicationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeApplicationErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            DescribeApplicationErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            DescribeApplicationErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DescribeApplicationErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeApplicationError {
    fn code(&self) -> Option<&str> {
        DescribeApplicationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeApplicationError {
    pub fn new(kind: DescribeApplicationErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeApplicationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeApplicationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeApplicationErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeApplicationErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeApplicationErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for DescribeApplicationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeApplicationErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            DescribeApplicationErrorKind::InvalidRequestException(_inner) => Some(_inner),
            DescribeApplicationErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DescribeApplicationErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeApplicationSnapshotError {
    pub kind: DescribeApplicationSnapshotErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeApplicationSnapshotErrorKind {
    InvalidArgumentException(crate::error::InvalidArgumentException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeApplicationSnapshotError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeApplicationSnapshotErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            DescribeApplicationSnapshotErrorKind::ResourceNotFoundException(_inner) => {
                _inner.fmt(f)
            }
            DescribeApplicationSnapshotErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            DescribeApplicationSnapshotErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeApplicationSnapshotError {
    fn code(&self) -> Option<&str> {
        DescribeApplicationSnapshotError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeApplicationSnapshotError {
    pub fn new(kind: DescribeApplicationSnapshotErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeApplicationSnapshotErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeApplicationSnapshotErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeApplicationSnapshotErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeApplicationSnapshotErrorKind::ResourceNotFoundException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeApplicationSnapshotErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DescribeApplicationSnapshotError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeApplicationSnapshotErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            DescribeApplicationSnapshotErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DescribeApplicationSnapshotErrorKind::UnsupportedOperationException(_inner) => {
                Some(_inner)
            }
            DescribeApplicationSnapshotErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DescribeApplicationVersionError {
    pub kind: DescribeApplicationVersionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DescribeApplicationVersionErrorKind {
    InvalidArgumentException(crate::error::InvalidArgumentException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DescribeApplicationVersionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DescribeApplicationVersionErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            DescribeApplicationVersionErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            DescribeApplicationVersionErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            DescribeApplicationVersionErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DescribeApplicationVersionError {
    fn code(&self) -> Option<&str> {
        DescribeApplicationVersionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DescribeApplicationVersionError {
    pub fn new(kind: DescribeApplicationVersionErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DescribeApplicationVersionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DescribeApplicationVersionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeApplicationVersionErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeApplicationVersionErrorKind::ResourceNotFoundException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            DescribeApplicationVersionErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for DescribeApplicationVersionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DescribeApplicationVersionErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            DescribeApplicationVersionErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            DescribeApplicationVersionErrorKind::UnsupportedOperationException(_inner) => {
                Some(_inner)
            }
            DescribeApplicationVersionErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DiscoverInputSchemaError {
    pub kind: DiscoverInputSchemaErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DiscoverInputSchemaErrorKind {
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    ResourceProvisionedThroughputExceededException(
        crate::error::ResourceProvisionedThroughputExceededException,
    ),
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    UnableToDetectSchemaException(crate::error::UnableToDetectSchemaException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DiscoverInputSchemaError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DiscoverInputSchemaErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            DiscoverInputSchemaErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            DiscoverInputSchemaErrorKind::ResourceProvisionedThroughputExceededException(
                _inner,
            ) => _inner.fmt(f),
            DiscoverInputSchemaErrorKind::ServiceUnavailableException(_inner) => _inner.fmt(f),
            DiscoverInputSchemaErrorKind::UnableToDetectSchemaException(_inner) => _inner.fmt(f),
            DiscoverInputSchemaErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DiscoverInputSchemaError {
    fn code(&self) -> Option<&str> {
        DiscoverInputSchemaError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DiscoverInputSchemaError {
    pub fn new(kind: DiscoverInputSchemaErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DiscoverInputSchemaErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DiscoverInputSchemaErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            DiscoverInputSchemaErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            DiscoverInputSchemaErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_resource_provisioned_throughput_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            DiscoverInputSchemaErrorKind::ResourceProvisionedThroughputExceededException(_)
        )
    }
    pub fn is_service_unavailable_exception(&self) -> bool {
        matches!(
            &self.kind,
            DiscoverInputSchemaErrorKind::ServiceUnavailableException(_)
        )
    }
    pub fn is_unable_to_detect_schema_exception(&self) -> bool {
        matches!(
            &self.kind,
            DiscoverInputSchemaErrorKind::UnableToDetectSchemaException(_)
        )
    }
}
impl std::error::Error for DiscoverInputSchemaError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DiscoverInputSchemaErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            DiscoverInputSchemaErrorKind::InvalidRequestException(_inner) => Some(_inner),
            DiscoverInputSchemaErrorKind::ResourceProvisionedThroughputExceededException(
                _inner,
            ) => Some(_inner),
            DiscoverInputSchemaErrorKind::ServiceUnavailableException(_inner) => Some(_inner),
            DiscoverInputSchemaErrorKind::UnableToDetectSchemaException(_inner) => Some(_inner),
            DiscoverInputSchemaErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListApplicationsError {
    pub kind: ListApplicationsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListApplicationsErrorKind {
    InvalidRequestException(crate::error::InvalidRequestException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListApplicationsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListApplicationsErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            ListApplicationsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListApplicationsError {
    fn code(&self) -> Option<&str> {
        ListApplicationsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListApplicationsError {
    pub fn new(kind: ListApplicationsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListApplicationsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListApplicationsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListApplicationsErrorKind::InvalidRequestException(_)
        )
    }
}
impl std::error::Error for ListApplicationsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListApplicationsErrorKind::InvalidRequestException(_inner) => Some(_inner),
            ListApplicationsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListApplicationSnapshotsError {
    pub kind: ListApplicationSnapshotsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListApplicationSnapshotsErrorKind {
    InvalidArgumentException(crate::error::InvalidArgumentException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListApplicationSnapshotsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListApplicationSnapshotsErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            ListApplicationSnapshotsErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            ListApplicationSnapshotsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListApplicationSnapshotsError {
    fn code(&self) -> Option<&str> {
        ListApplicationSnapshotsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListApplicationSnapshotsError {
    pub fn new(kind: ListApplicationSnapshotsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListApplicationSnapshotsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListApplicationSnapshotsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListApplicationSnapshotsErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListApplicationSnapshotsErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for ListApplicationSnapshotsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListApplicationSnapshotsErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            ListApplicationSnapshotsErrorKind::UnsupportedOperationException(_inner) => {
                Some(_inner)
            }
            ListApplicationSnapshotsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListApplicationVersionsError {
    pub kind: ListApplicationVersionsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListApplicationVersionsErrorKind {
    InvalidArgumentException(crate::error::InvalidArgumentException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListApplicationVersionsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListApplicationVersionsErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            ListApplicationVersionsErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            ListApplicationVersionsErrorKind::UnsupportedOperationException(_inner) => {
                _inner.fmt(f)
            }
            ListApplicationVersionsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListApplicationVersionsError {
    fn code(&self) -> Option<&str> {
        ListApplicationVersionsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListApplicationVersionsError {
    pub fn new(kind: ListApplicationVersionsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListApplicationVersionsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListApplicationVersionsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListApplicationVersionsErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListApplicationVersionsErrorKind::ResourceNotFoundException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListApplicationVersionsErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for ListApplicationVersionsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListApplicationVersionsErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            ListApplicationVersionsErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            ListApplicationVersionsErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            ListApplicationVersionsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListTagsForResourceError {
    pub kind: ListTagsForResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListTagsForResourceErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListTagsForResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListTagsForResourceErrorKind::ConcurrentModificationException(_inner) => _inner.fmt(f),
            ListTagsForResourceErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            ListTagsForResourceErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            ListTagsForResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListTagsForResourceError {
    fn code(&self) -> Option<&str> {
        ListTagsForResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListTagsForResourceError {
    pub fn new(kind: ListTagsForResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListTagsForResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListTagsForResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListTagsForResourceErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListTagsForResourceErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            ListTagsForResourceErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for ListTagsForResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListTagsForResourceErrorKind::ConcurrentModificationException(_inner) => Some(_inner),
            ListTagsForResourceErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            ListTagsForResourceErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            ListTagsForResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RollbackApplicationError {
    pub kind: RollbackApplicationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RollbackApplicationErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RollbackApplicationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RollbackApplicationErrorKind::ConcurrentModificationException(_inner) => _inner.fmt(f),
            RollbackApplicationErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            RollbackApplicationErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            RollbackApplicationErrorKind::ResourceInUseException(_inner) => _inner.fmt(f),
            RollbackApplicationErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            RollbackApplicationErrorKind::UnsupportedOperationException(_inner) => _inner.fmt(f),
            RollbackApplicationErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RollbackApplicationError {
    fn code(&self) -> Option<&str> {
        RollbackApplicationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RollbackApplicationError {
    pub fn new(kind: RollbackApplicationErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RollbackApplicationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RollbackApplicationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            RollbackApplicationErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            RollbackApplicationErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            RollbackApplicationErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            RollbackApplicationErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            RollbackApplicationErrorKind::ResourceNotFoundException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            RollbackApplicationErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for RollbackApplicationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RollbackApplicationErrorKind::ConcurrentModificationException(_inner) => Some(_inner),
            RollbackApplicationErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            RollbackApplicationErrorKind::InvalidRequestException(_inner) => Some(_inner),
            RollbackApplicationErrorKind::ResourceInUseException(_inner) => Some(_inner),
            RollbackApplicationErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            RollbackApplicationErrorKind::UnsupportedOperationException(_inner) => Some(_inner),
            RollbackApplicationErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StartApplicationError {
    pub kind: StartApplicationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StartApplicationErrorKind {
    InvalidApplicationConfigurationException(
        crate::error::InvalidApplicationConfigurationException,
    ),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StartApplicationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StartApplicationErrorKind::InvalidApplicationConfigurationException(_inner) => {
                _inner.fmt(f)
            }
            StartApplicationErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            StartApplicationErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            StartApplicationErrorKind::ResourceInUseException(_inner) => _inner.fmt(f),
            StartApplicationErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            StartApplicationErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for StartApplicationError {
    fn code(&self) -> Option<&str> {
        StartApplicationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl StartApplicationError {
    pub fn new(kind: StartApplicationErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StartApplicationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StartApplicationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_application_configuration_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartApplicationErrorKind::InvalidApplicationConfigurationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartApplicationErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartApplicationErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartApplicationErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            StartApplicationErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for StartApplicationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StartApplicationErrorKind::InvalidApplicationConfigurationException(_inner) => {
                Some(_inner)
            }
            StartApplicationErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            StartApplicationErrorKind::InvalidRequestException(_inner) => Some(_inner),
            StartApplicationErrorKind::ResourceInUseException(_inner) => Some(_inner),
            StartApplicationErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            StartApplicationErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct StopApplicationError {
    pub kind: StopApplicationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum StopApplicationErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidApplicationConfigurationException(
        crate::error::InvalidApplicationConfigurationException,
    ),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for StopApplicationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            StopApplicationErrorKind::ConcurrentModificationException(_inner) => _inner.fmt(f),
            StopApplicationErrorKind::InvalidApplicationConfigurationException(_inner) => {
                _inner.fmt(f)
            }
            StopApplicationErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            StopApplicationErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            StopApplicationErrorKind::ResourceInUseException(_inner) => _inner.fmt(f),
            StopApplicationErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            StopApplicationErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for StopApplicationError {
    fn code(&self) -> Option<&str> {
        StopApplicationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl StopApplicationError {
    pub fn new(kind: StopApplicationErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: StopApplicationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: StopApplicationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopApplicationErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_application_configuration_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopApplicationErrorKind::InvalidApplicationConfigurationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopApplicationErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopApplicationErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopApplicationErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            StopApplicationErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for StopApplicationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            StopApplicationErrorKind::ConcurrentModificationException(_inner) => Some(_inner),
            StopApplicationErrorKind::InvalidApplicationConfigurationException(_inner) => {
                Some(_inner)
            }
            StopApplicationErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            StopApplicationErrorKind::InvalidRequestException(_inner) => Some(_inner),
            StopApplicationErrorKind::ResourceInUseException(_inner) => Some(_inner),
            StopApplicationErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            StopApplicationErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct TagResourceError {
    pub kind: TagResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum TagResourceErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    TooManyTagsException(crate::error::TooManyTagsException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for TagResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            TagResourceErrorKind::ConcurrentModificationException(_inner) => _inner.fmt(f),
            TagResourceErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            TagResourceErrorKind::ResourceInUseException(_inner) => _inner.fmt(f),
            TagResourceErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            TagResourceErrorKind::TooManyTagsException(_inner) => _inner.fmt(f),
            TagResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for TagResourceError {
    fn code(&self) -> Option<&str> {
        TagResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl TagResourceError {
    pub fn new(kind: TagResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: TagResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: TagResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            TagResourceErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            TagResourceErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(&self.kind, TagResourceErrorKind::ResourceInUseException(_))
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            TagResourceErrorKind::ResourceNotFoundException(_)
        )
    }
    pub fn is_too_many_tags_exception(&self) -> bool {
        matches!(&self.kind, TagResourceErrorKind::TooManyTagsException(_))
    }
}
impl std::error::Error for TagResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            TagResourceErrorKind::ConcurrentModificationException(_inner) => Some(_inner),
            TagResourceErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            TagResourceErrorKind::ResourceInUseException(_inner) => Some(_inner),
            TagResourceErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            TagResourceErrorKind::TooManyTagsException(_inner) => Some(_inner),
            TagResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UntagResourceError {
    pub kind: UntagResourceErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UntagResourceErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    TooManyTagsException(crate::error::TooManyTagsException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UntagResourceError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UntagResourceErrorKind::ConcurrentModificationException(_inner) => _inner.fmt(f),
            UntagResourceErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            UntagResourceErrorKind::ResourceInUseException(_inner) => _inner.fmt(f),
            UntagResourceErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            UntagResourceErrorKind::TooManyTagsException(_inner) => _inner.fmt(f),
            UntagResourceErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UntagResourceError {
    fn code(&self) -> Option<&str> {
        UntagResourceError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UntagResourceError {
    pub fn new(kind: UntagResourceErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UntagResourceErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UntagResourceErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            UntagResourceErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            UntagResourceErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            UntagResourceErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UntagResourceErrorKind::ResourceNotFoundException(_)
        )
    }
    pub fn is_too_many_tags_exception(&self) -> bool {
        matches!(&self.kind, UntagResourceErrorKind::TooManyTagsException(_))
    }
}
impl std::error::Error for UntagResourceError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UntagResourceErrorKind::ConcurrentModificationException(_inner) => Some(_inner),
            UntagResourceErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            UntagResourceErrorKind::ResourceInUseException(_inner) => Some(_inner),
            UntagResourceErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            UntagResourceErrorKind::TooManyTagsException(_inner) => Some(_inner),
            UntagResourceErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateApplicationError {
    pub kind: UpdateApplicationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateApplicationErrorKind {
    CodeValidationException(crate::error::CodeValidationException),
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidApplicationConfigurationException(
        crate::error::InvalidApplicationConfigurationException,
    ),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    InvalidRequestException(crate::error::InvalidRequestException),
    LimitExceededException(crate::error::LimitExceededException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateApplicationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateApplicationErrorKind::CodeValidationException(_inner) => _inner.fmt(f),
            UpdateApplicationErrorKind::ConcurrentModificationException(_inner) => _inner.fmt(f),
            UpdateApplicationErrorKind::InvalidApplicationConfigurationException(_inner) => {
                _inner.fmt(f)
            }
            UpdateApplicationErrorKind::InvalidArgumentException(_inner) => _inner.fmt(f),
            UpdateApplicationErrorKind::InvalidRequestException(_inner) => _inner.fmt(f),
            UpdateApplicationErrorKind::LimitExceededException(_inner) => _inner.fmt(f),
            UpdateApplicationErrorKind::ResourceInUseException(_inner) => _inner.fmt(f),
            UpdateApplicationErrorKind::ResourceNotFoundException(_inner) => _inner.fmt(f),
            UpdateApplicationErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateApplicationError {
    fn code(&self) -> Option<&str> {
        UpdateApplicationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateApplicationError {
    pub fn new(kind: UpdateApplicationErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateApplicationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateApplicationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_code_validation_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateApplicationErrorKind::CodeValidationException(_)
        )
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateApplicationErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_application_configuration_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateApplicationErrorKind::InvalidApplicationConfigurationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateApplicationErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_invalid_request_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateApplicationErrorKind::InvalidRequestException(_)
        )
    }
    pub fn is_limit_exceeded_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateApplicationErrorKind::LimitExceededException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateApplicationErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateApplicationErrorKind::ResourceNotFoundException(_)
        )
    }
}
impl std::error::Error for UpdateApplicationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateApplicationErrorKind::CodeValidationException(_inner) => Some(_inner),
            UpdateApplicationErrorKind::ConcurrentModificationException(_inner) => Some(_inner),
            UpdateApplicationErrorKind::InvalidApplicationConfigurationException(_inner) => {
                Some(_inner)
            }
            UpdateApplicationErrorKind::InvalidArgumentException(_inner) => Some(_inner),
            UpdateApplicationErrorKind::InvalidRequestException(_inner) => Some(_inner),
            UpdateApplicationErrorKind::LimitExceededException(_inner) => Some(_inner),
            UpdateApplicationErrorKind::ResourceInUseException(_inner) => Some(_inner),
            UpdateApplicationErrorKind::ResourceNotFoundException(_inner) => Some(_inner),
            UpdateApplicationErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UpdateApplicationMaintenanceConfigurationError {
    pub kind: UpdateApplicationMaintenanceConfigurationErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UpdateApplicationMaintenanceConfigurationErrorKind {
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    InvalidArgumentException(crate::error::InvalidArgumentException),
    ResourceInUseException(crate::error::ResourceInUseException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UpdateApplicationMaintenanceConfigurationError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UpdateApplicationMaintenanceConfigurationErrorKind::ConcurrentModificationException(
                _inner,
            ) => _inner.fmt(f),
            UpdateApplicationMaintenanceConfigurationErrorKind::InvalidArgumentException(
                _inner,
            ) => _inner.fmt(f),
            UpdateApplicationMaintenanceConfigurationErrorKind::ResourceInUseException(_inner) => {
                _inner.fmt(f)
            }
            UpdateApplicationMaintenanceConfigurationErrorKind::ResourceNotFoundException(
                _inner,
            ) => _inner.fmt(f),
            UpdateApplicationMaintenanceConfigurationErrorKind::UnsupportedOperationException(
                _inner,
            ) => _inner.fmt(f),
            UpdateApplicationMaintenanceConfigurationErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UpdateApplicationMaintenanceConfigurationError {
    fn code(&self) -> Option<&str> {
        UpdateApplicationMaintenanceConfigurationError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UpdateApplicationMaintenanceConfigurationError {
    pub fn new(
        kind: UpdateApplicationMaintenanceConfigurationErrorKind,
        meta: smithy_types::Error,
    ) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UpdateApplicationMaintenanceConfigurationErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UpdateApplicationMaintenanceConfigurationErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_concurrent_modification_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateApplicationMaintenanceConfigurationErrorKind::ConcurrentModificationException(_)
        )
    }
    pub fn is_invalid_argument_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateApplicationMaintenanceConfigurationErrorKind::InvalidArgumentException(_)
        )
    }
    pub fn is_resource_in_use_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateApplicationMaintenanceConfigurationErrorKind::ResourceInUseException(_)
        )
    }
    pub fn is_resource_not_found_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateApplicationMaintenanceConfigurationErrorKind::ResourceNotFoundException(_)
        )
    }
    pub fn is_unsupported_operation_exception(&self) -> bool {
        matches!(
            &self.kind,
            UpdateApplicationMaintenanceConfigurationErrorKind::UnsupportedOperationException(_)
        )
    }
}
impl std::error::Error for UpdateApplicationMaintenanceConfigurationError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UpdateApplicationMaintenanceConfigurationErrorKind::ConcurrentModificationException(
                _inner,
            ) => Some(_inner),
            UpdateApplicationMaintenanceConfigurationErrorKind::InvalidArgumentException(
                _inner,
            ) => Some(_inner),
            UpdateApplicationMaintenanceConfigurationErrorKind::ResourceInUseException(_inner) => {
                Some(_inner)
            }
            UpdateApplicationMaintenanceConfigurationErrorKind::ResourceNotFoundException(
                _inner,
            ) => Some(_inner),
            UpdateApplicationMaintenanceConfigurationErrorKind::UnsupportedOperationException(
                _inner,
            ) => Some(_inner),
            UpdateApplicationMaintenanceConfigurationErrorKind::Unhandled(_inner) => {
                Some(_inner.as_ref())
            }
        }
    }
}

/// <p>The request was rejected because a specified parameter is not supported or a specified resource is not valid for this
/// operation. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UnsupportedOperationException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for UnsupportedOperationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UnsupportedOperationException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl UnsupportedOperationException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for UnsupportedOperationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "UnsupportedOperationException")?;
        if let Some(inner_1) = &self.message {
            write!(f, ": {}", inner_1)?;
        }
        Ok(())
    }
}
impl std::error::Error for UnsupportedOperationException {}
/// See [`UnsupportedOperationException`](crate::error::UnsupportedOperationException)
pub mod unsupported_operation_exception {
    /// A builder for [`UnsupportedOperationException`](crate::error::UnsupportedOperationException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`UnsupportedOperationException`](crate::error::UnsupportedOperationException)
        pub fn build(self) -> crate::error::UnsupportedOperationException {
            crate::error::UnsupportedOperationException {
                message: self.message,
            }
        }
    }
}
impl UnsupportedOperationException {
    /// Creates a new builder-style object to manufacture [`UnsupportedOperationException`](crate::error::UnsupportedOperationException)
    pub fn builder() -> crate::error::unsupported_operation_exception::Builder {
        crate::error::unsupported_operation_exception::Builder::default()
    }
}

/// <p>Specified application can't be found.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResourceNotFoundException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ResourceNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceNotFoundException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ResourceNotFoundException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ResourceNotFoundException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceNotFoundException")?;
        if let Some(inner_2) = &self.message {
            write!(f, ": {}", inner_2)?;
        }
        Ok(())
    }
}
impl std::error::Error for ResourceNotFoundException {}
/// See [`ResourceNotFoundException`](crate::error::ResourceNotFoundException)
pub mod resource_not_found_exception {
    /// A builder for [`ResourceNotFoundException`](crate::error::ResourceNotFoundException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceNotFoundException`](crate::error::ResourceNotFoundException)
        pub fn build(self) -> crate::error::ResourceNotFoundException {
            crate::error::ResourceNotFoundException {
                message: self.message,
            }
        }
    }
}
impl ResourceNotFoundException {
    /// Creates a new builder-style object to manufacture [`ResourceNotFoundException`](crate::error::ResourceNotFoundException)
    pub fn builder() -> crate::error::resource_not_found_exception::Builder {
        crate::error::resource_not_found_exception::Builder::default()
    }
}

/// <p>The application is not available for this operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResourceInUseException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ResourceInUseException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceInUseException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ResourceInUseException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ResourceInUseException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceInUseException")?;
        if let Some(inner_3) = &self.message {
            write!(f, ": {}", inner_3)?;
        }
        Ok(())
    }
}
impl std::error::Error for ResourceInUseException {}
/// See [`ResourceInUseException`](crate::error::ResourceInUseException)
pub mod resource_in_use_exception {
    /// A builder for [`ResourceInUseException`](crate::error::ResourceInUseException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceInUseException`](crate::error::ResourceInUseException)
        pub fn build(self) -> crate::error::ResourceInUseException {
            crate::error::ResourceInUseException {
                message: self.message,
            }
        }
    }
}
impl ResourceInUseException {
    /// Creates a new builder-style object to manufacture [`ResourceInUseException`](crate::error::ResourceInUseException)
    pub fn builder() -> crate::error::resource_in_use_exception::Builder {
        crate::error::resource_in_use_exception::Builder::default()
    }
}

/// <p>The specified input parameter value is not valid.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidArgumentException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidArgumentException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidArgumentException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InvalidArgumentException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidArgumentException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidArgumentException")?;
        if let Some(inner_4) = &self.message {
            write!(f, ": {}", inner_4)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidArgumentException {}
/// See [`InvalidArgumentException`](crate::error::InvalidArgumentException)
pub mod invalid_argument_exception {
    /// A builder for [`InvalidArgumentException`](crate::error::InvalidArgumentException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidArgumentException`](crate::error::InvalidArgumentException)
        pub fn build(self) -> crate::error::InvalidArgumentException {
            crate::error::InvalidArgumentException {
                message: self.message,
            }
        }
    }
}
impl InvalidArgumentException {
    /// Creates a new builder-style object to manufacture [`InvalidArgumentException`](crate::error::InvalidArgumentException)
    pub fn builder() -> crate::error::invalid_argument_exception::Builder {
        crate::error::invalid_argument_exception::Builder::default()
    }
}

/// <p>Exception thrown as a result of concurrent modifications to an application. This error can
/// be the result of attempting to modify an application without using the current application
/// ID.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConcurrentModificationException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ConcurrentModificationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConcurrentModificationException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ConcurrentModificationException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ConcurrentModificationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ConcurrentModificationException")?;
        if let Some(inner_5) = &self.message {
            write!(f, ": {}", inner_5)?;
        }
        Ok(())
    }
}
impl std::error::Error for ConcurrentModificationException {}
/// See [`ConcurrentModificationException`](crate::error::ConcurrentModificationException)
pub mod concurrent_modification_exception {
    /// A builder for [`ConcurrentModificationException`](crate::error::ConcurrentModificationException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ConcurrentModificationException`](crate::error::ConcurrentModificationException)
        pub fn build(self) -> crate::error::ConcurrentModificationException {
            crate::error::ConcurrentModificationException {
                message: self.message,
            }
        }
    }
}
impl ConcurrentModificationException {
    /// Creates a new builder-style object to manufacture [`ConcurrentModificationException`](crate::error::ConcurrentModificationException)
    pub fn builder() -> crate::error::concurrent_modification_exception::Builder {
        crate::error::concurrent_modification_exception::Builder::default()
    }
}

/// <p>The number of allowed resources has been exceeded.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct LimitExceededException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for LimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("LimitExceededException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl LimitExceededException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for LimitExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "LimitExceededException")?;
        if let Some(inner_6) = &self.message {
            write!(f, ": {}", inner_6)?;
        }
        Ok(())
    }
}
impl std::error::Error for LimitExceededException {}
/// See [`LimitExceededException`](crate::error::LimitExceededException)
pub mod limit_exceeded_exception {
    /// A builder for [`LimitExceededException`](crate::error::LimitExceededException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`LimitExceededException`](crate::error::LimitExceededException)
        pub fn build(self) -> crate::error::LimitExceededException {
            crate::error::LimitExceededException {
                message: self.message,
            }
        }
    }
}
impl LimitExceededException {
    /// Creates a new builder-style object to manufacture [`LimitExceededException`](crate::error::LimitExceededException)
    pub fn builder() -> crate::error::limit_exceeded_exception::Builder {
        crate::error::limit_exceeded_exception::Builder::default()
    }
}

/// <p>The request JSON is not valid for the operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidRequestException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidRequestException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidRequestException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InvalidRequestException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidRequestException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidRequestException")?;
        if let Some(inner_7) = &self.message {
            write!(f, ": {}", inner_7)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidRequestException {}
/// See [`InvalidRequestException`](crate::error::InvalidRequestException)
pub mod invalid_request_exception {
    /// A builder for [`InvalidRequestException`](crate::error::InvalidRequestException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidRequestException`](crate::error::InvalidRequestException)
        pub fn build(self) -> crate::error::InvalidRequestException {
            crate::error::InvalidRequestException {
                message: self.message,
            }
        }
    }
}
impl InvalidRequestException {
    /// Creates a new builder-style object to manufacture [`InvalidRequestException`](crate::error::InvalidRequestException)
    pub fn builder() -> crate::error::invalid_request_exception::Builder {
        crate::error::invalid_request_exception::Builder::default()
    }
}

/// <p>The user-provided application configuration is not valid.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidApplicationConfigurationException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for InvalidApplicationConfigurationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidApplicationConfigurationException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl InvalidApplicationConfigurationException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for InvalidApplicationConfigurationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidApplicationConfigurationException")?;
        if let Some(inner_8) = &self.message {
            write!(f, ": {}", inner_8)?;
        }
        Ok(())
    }
}
impl std::error::Error for InvalidApplicationConfigurationException {}
/// See [`InvalidApplicationConfigurationException`](crate::error::InvalidApplicationConfigurationException)
pub mod invalid_application_configuration_exception {
    /// A builder for [`InvalidApplicationConfigurationException`](crate::error::InvalidApplicationConfigurationException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`InvalidApplicationConfigurationException`](crate::error::InvalidApplicationConfigurationException)
        pub fn build(self) -> crate::error::InvalidApplicationConfigurationException {
            crate::error::InvalidApplicationConfigurationException {
                message: self.message,
            }
        }
    }
}
impl InvalidApplicationConfigurationException {
    /// Creates a new builder-style object to manufacture [`InvalidApplicationConfigurationException`](crate::error::InvalidApplicationConfigurationException)
    pub fn builder() -> crate::error::invalid_application_configuration_exception::Builder {
        crate::error::invalid_application_configuration_exception::Builder::default()
    }
}

/// <p>The user-provided application code (query) is not valid. This can be a simple syntax
/// error.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CodeValidationException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CodeValidationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CodeValidationException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl CodeValidationException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for CodeValidationException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "CodeValidationException")?;
        if let Some(inner_9) = &self.message {
            write!(f, ": {}", inner_9)?;
        }
        Ok(())
    }
}
impl std::error::Error for CodeValidationException {}
/// See [`CodeValidationException`](crate::error::CodeValidationException)
pub mod code_validation_exception {
    /// A builder for [`CodeValidationException`](crate::error::CodeValidationException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`CodeValidationException`](crate::error::CodeValidationException)
        pub fn build(self) -> crate::error::CodeValidationException {
            crate::error::CodeValidationException {
                message: self.message,
            }
        }
    }
}
impl CodeValidationException {
    /// Creates a new builder-style object to manufacture [`CodeValidationException`](crate::error::CodeValidationException)
    pub fn builder() -> crate::error::code_validation_exception::Builder {
        crate::error::code_validation_exception::Builder::default()
    }
}

/// <p>Application created with too many tags, or too many tags added to an application. Note that the maximum
/// number of application tags includes system tags. The maximum number of user-defined application tags is 50.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TooManyTagsException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for TooManyTagsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TooManyTagsException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl TooManyTagsException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for TooManyTagsException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "TooManyTagsException")?;
        if let Some(inner_10) = &self.message {
            write!(f, ": {}", inner_10)?;
        }
        Ok(())
    }
}
impl std::error::Error for TooManyTagsException {}
/// See [`TooManyTagsException`](crate::error::TooManyTagsException)
pub mod too_many_tags_exception {
    /// A builder for [`TooManyTagsException`](crate::error::TooManyTagsException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`TooManyTagsException`](crate::error::TooManyTagsException)
        pub fn build(self) -> crate::error::TooManyTagsException {
            crate::error::TooManyTagsException {
                message: self.message,
            }
        }
    }
}
impl TooManyTagsException {
    /// Creates a new builder-style object to manufacture [`TooManyTagsException`](crate::error::TooManyTagsException)
    pub fn builder() -> crate::error::too_many_tags_exception::Builder {
        crate::error::too_many_tags_exception::Builder::default()
    }
}

/// <p>The data format is not valid. Kinesis Data Analytics cannot detect the schema for
/// the given streaming source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UnableToDetectSchemaException {
    pub message: std::option::Option<std::string::String>,
    /// <p>Raw stream data that was sampled to infer the schema.</p>
    pub raw_input_records: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Stream data that was modified by the processor specified in the <code>InputProcessingConfiguration</code> parameter. </p>
    pub processed_input_records: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for UnableToDetectSchemaException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UnableToDetectSchemaException");
        formatter.field("message", &self.message);
        formatter.field("raw_input_records", &self.raw_input_records);
        formatter.field("processed_input_records", &self.processed_input_records);
        formatter.finish()
    }
}
impl UnableToDetectSchemaException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for UnableToDetectSchemaException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "UnableToDetectSchemaException")?;
        if let Some(inner_11) = &self.message {
            write!(f, ": {}", inner_11)?;
        }
        Ok(())
    }
}
impl std::error::Error for UnableToDetectSchemaException {}
/// See [`UnableToDetectSchemaException`](crate::error::UnableToDetectSchemaException)
pub mod unable_to_detect_schema_exception {
    /// A builder for [`UnableToDetectSchemaException`](crate::error::UnableToDetectSchemaException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
        pub(crate) raw_input_records: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) processed_input_records: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        pub fn raw_input_records(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.raw_input_records.unwrap_or_default();
            v.push(input.into());
            self.raw_input_records = Some(v);
            self
        }
        pub fn set_raw_input_records(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.raw_input_records = input;
            self
        }
        pub fn processed_input_records(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.processed_input_records.unwrap_or_default();
            v.push(input.into());
            self.processed_input_records = Some(v);
            self
        }
        pub fn set_processed_input_records(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.processed_input_records = input;
            self
        }
        /// Consumes the builder and constructs a [`UnableToDetectSchemaException`](crate::error::UnableToDetectSchemaException)
        pub fn build(self) -> crate::error::UnableToDetectSchemaException {
            crate::error::UnableToDetectSchemaException {
                message: self.message,
                raw_input_records: self.raw_input_records,
                processed_input_records: self.processed_input_records,
            }
        }
    }
}
impl UnableToDetectSchemaException {
    /// Creates a new builder-style object to manufacture [`UnableToDetectSchemaException`](crate::error::UnableToDetectSchemaException)
    pub fn builder() -> crate::error::unable_to_detect_schema_exception::Builder {
        crate::error::unable_to_detect_schema_exception::Builder::default()
    }
}

/// <p>The service cannot complete the request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ServiceUnavailableException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ServiceUnavailableException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ServiceUnavailableException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ServiceUnavailableException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ServiceUnavailableException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ServiceUnavailableException")?;
        if let Some(inner_12) = &self.message {
            write!(f, ": {}", inner_12)?;
        }
        Ok(())
    }
}
impl std::error::Error for ServiceUnavailableException {}
/// See [`ServiceUnavailableException`](crate::error::ServiceUnavailableException)
pub mod service_unavailable_exception {
    /// A builder for [`ServiceUnavailableException`](crate::error::ServiceUnavailableException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ServiceUnavailableException`](crate::error::ServiceUnavailableException)
        pub fn build(self) -> crate::error::ServiceUnavailableException {
            crate::error::ServiceUnavailableException {
                message: self.message,
            }
        }
    }
}
impl ServiceUnavailableException {
    /// Creates a new builder-style object to manufacture [`ServiceUnavailableException`](crate::error::ServiceUnavailableException)
    pub fn builder() -> crate::error::service_unavailable_exception::Builder {
        crate::error::service_unavailable_exception::Builder::default()
    }
}

/// <p>Discovery failed to get a record from the streaming source because of the Kinesis
/// Streams <code>ProvisionedThroughputExceededException</code>. For more information, see <a href="http://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetRecords.html">GetRecords</a> in the Amazon Kinesis Streams API Reference.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResourceProvisionedThroughputExceededException {
    pub message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ResourceProvisionedThroughputExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResourceProvisionedThroughputExceededException");
        formatter.field("message", &self.message);
        formatter.finish()
    }
}
impl ResourceProvisionedThroughputExceededException {
    pub fn message(&self) -> Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for ResourceProvisionedThroughputExceededException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ResourceProvisionedThroughputExceededException")?;
        if let Some(inner_13) = &self.message {
            write!(f, ": {}", inner_13)?;
        }
        Ok(())
    }
}
impl std::error::Error for ResourceProvisionedThroughputExceededException {}
/// See [`ResourceProvisionedThroughputExceededException`](crate::error::ResourceProvisionedThroughputExceededException)
pub mod resource_provisioned_throughput_exceeded_exception {
    /// A builder for [`ResourceProvisionedThroughputExceededException`](crate::error::ResourceProvisionedThroughputExceededException)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) message: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
            self.message = Some(input.into());
            self
        }
        pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.message = input;
            self
        }
        /// Consumes the builder and constructs a [`ResourceProvisionedThroughputExceededException`](crate::error::ResourceProvisionedThroughputExceededException)
        pub fn build(self) -> crate::error::ResourceProvisionedThroughputExceededException {
            crate::error::ResourceProvisionedThroughputExceededException {
                message: self.message,
            }
        }
    }
}
impl ResourceProvisionedThroughputExceededException {
    /// Creates a new builder-style object to manufacture [`ResourceProvisionedThroughputExceededException`](crate::error::ResourceProvisionedThroughputExceededException)
    pub fn builder() -> crate::error::resource_provisioned_throughput_exceeded_exception::Builder {
        crate::error::resource_provisioned_throughput_exceeded_exception::Builder::default()
    }
}
