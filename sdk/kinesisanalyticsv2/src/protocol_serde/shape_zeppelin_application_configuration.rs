// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_zeppelin_application_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ZeppelinApplicationConfiguration,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.monitoring_configuration {
        #[allow(unused_mut)]
        let mut object_2 = object.key("MonitoringConfiguration").start_object();
        crate::protocol_serde::shape_zeppelin_monitoring_configuration::ser_zeppelin_monitoring_configuration(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.catalog_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("CatalogConfiguration").start_object();
        crate::protocol_serde::shape_catalog_configuration::ser_catalog_configuration(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.deploy_as_application_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object
            .key("DeployAsApplicationConfiguration")
            .start_object();
        crate::protocol_serde::shape_deploy_as_application_configuration::ser_deploy_as_application_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.custom_artifacts_configuration {
        let mut array_8 = object.key("CustomArtifactsConfiguration").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_custom_artifact_configuration::ser_custom_artifact_configuration(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    Ok(())
}
