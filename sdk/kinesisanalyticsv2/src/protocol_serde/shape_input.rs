// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Input,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.name_prefix {
        object.key("NamePrefix").string(var_1.as_str());
    }
    if let Some(var_2) = &input.input_processing_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("InputProcessingConfiguration").start_object();
        crate::protocol_serde::shape_input_processing_configuration::ser_input_processing_configuration(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.kinesis_streams_input {
        #[allow(unused_mut)]
        let mut object_5 = object.key("KinesisStreamsInput").start_object();
        crate::protocol_serde::shape_kinesis_streams_input::ser_kinesis_streams_input(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.kinesis_firehose_input {
        #[allow(unused_mut)]
        let mut object_7 = object.key("KinesisFirehoseInput").start_object();
        crate::protocol_serde::shape_kinesis_firehose_input::ser_kinesis_firehose_input(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    if let Some(var_8) = &input.input_parallelism {
        #[allow(unused_mut)]
        let mut object_9 = object.key("InputParallelism").start_object();
        crate::protocol_serde::shape_input_parallelism::ser_input_parallelism(
            &mut object_9,
            var_8,
        )?;
        object_9.finish();
    }
    if let Some(var_10) = &input.input_schema {
        #[allow(unused_mut)]
        let mut object_11 = object.key("InputSchema").start_object();
        crate::protocol_serde::shape_source_schema::ser_source_schema(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
