// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>The user-provided application code (query) is not valid. This can be a simple syntax error.</p>
    CodeValidationException(crate::types::error::CodeValidationException),
    /// <p>Exception thrown as a result of concurrent modifications to an application. This error can be the result of attempting to modify an application without using the current application ID.</p>
    ConcurrentModificationException(crate::types::error::ConcurrentModificationException),
    /// <p>The user-provided application configuration is not valid.</p>
    InvalidApplicationConfigurationException(crate::types::error::InvalidApplicationConfigurationException),
    /// <p>The specified input parameter value is not valid.</p>
    InvalidArgumentException(crate::types::error::InvalidArgumentException),
    /// <p>The request JSON is not valid for the operation.</p>
    InvalidRequestException(crate::types::error::InvalidRequestException),
    /// <p>The number of allowed resources has been exceeded.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The application is not available for this operation.</p>
    ResourceInUseException(crate::types::error::ResourceInUseException),
    /// <p>Specified application can't be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>Discovery failed to get a record from the streaming source because of the Kinesis Streams <code>ProvisionedThroughputExceededException</code>. For more information, see <a href="http://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetRecords.html">GetRecords</a> in the Amazon Kinesis Streams API Reference.</p>
    ResourceProvisionedThroughputExceededException(crate::types::error::ResourceProvisionedThroughputExceededException),
    /// <p>The service cannot complete the request.</p>
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    /// <p>Application created with too many tags, or too many tags added to an application. Note that the maximum number of application tags includes system tags. The maximum number of user-defined application tags is 50.</p>
    TooManyTagsException(crate::types::error::TooManyTagsException),
    /// <p>The data format is not valid. Kinesis Data Analytics cannot detect the schema for the given streaming source.</p>
    UnableToDetectSchemaException(crate::types::error::UnableToDetectSchemaException),
    /// <p>The request was rejected because a specified parameter is not supported or a specified resource is not valid for this operation. </p>
    UnsupportedOperationException(crate::types::error::UnsupportedOperationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::CodeValidationException(inner) => inner.fmt(f),
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::InvalidApplicationConfigurationException(inner) => inner.fmt(f),
            Error::InvalidArgumentException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ResourceProvisionedThroughputExceededException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::UnableToDetectSchemaException(inner) => inner.fmt(f),
            Error::UnsupportedOperationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::add_application_cloud_watch_logging_option::AddApplicationCloudWatchLoggingOptionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::add_application_cloud_watch_logging_option::AddApplicationCloudWatchLoggingOptionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_application_cloud_watch_logging_option::AddApplicationCloudWatchLoggingOptionError> for Error {
    fn from(err: crate::operation::add_application_cloud_watch_logging_option::AddApplicationCloudWatchLoggingOptionError) -> Self {
        match err {
            crate::operation::add_application_cloud_watch_logging_option::AddApplicationCloudWatchLoggingOptionError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::add_application_cloud_watch_logging_option::AddApplicationCloudWatchLoggingOptionError::InvalidApplicationConfigurationException(inner) => Error::InvalidApplicationConfigurationException(inner),
            crate::operation::add_application_cloud_watch_logging_option::AddApplicationCloudWatchLoggingOptionError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::add_application_cloud_watch_logging_option::AddApplicationCloudWatchLoggingOptionError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::add_application_cloud_watch_logging_option::AddApplicationCloudWatchLoggingOptionError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::add_application_cloud_watch_logging_option::AddApplicationCloudWatchLoggingOptionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::add_application_cloud_watch_logging_option::AddApplicationCloudWatchLoggingOptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_application_input::AddApplicationInputError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_application_input::AddApplicationInputError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_application_input::AddApplicationInputError> for Error {
    fn from(err: crate::operation::add_application_input::AddApplicationInputError) -> Self {
        match err {
            crate::operation::add_application_input::AddApplicationInputError::CodeValidationException(inner) => {
                Error::CodeValidationException(inner)
            }
            crate::operation::add_application_input::AddApplicationInputError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::add_application_input::AddApplicationInputError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::add_application_input::AddApplicationInputError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::add_application_input::AddApplicationInputError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::add_application_input::AddApplicationInputError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::add_application_input::AddApplicationInputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::add_application_input_processing_configuration::AddApplicationInputProcessingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::add_application_input_processing_configuration::AddApplicationInputProcessingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_application_input_processing_configuration::AddApplicationInputProcessingConfigurationError> for Error {
    fn from(err: crate::operation::add_application_input_processing_configuration::AddApplicationInputProcessingConfigurationError) -> Self {
        match err {
            crate::operation::add_application_input_processing_configuration::AddApplicationInputProcessingConfigurationError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::add_application_input_processing_configuration::AddApplicationInputProcessingConfigurationError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::add_application_input_processing_configuration::AddApplicationInputProcessingConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::add_application_input_processing_configuration::AddApplicationInputProcessingConfigurationError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::add_application_input_processing_configuration::AddApplicationInputProcessingConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::add_application_input_processing_configuration::AddApplicationInputProcessingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_application_output::AddApplicationOutputError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_application_output::AddApplicationOutputError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_application_output::AddApplicationOutputError> for Error {
    fn from(err: crate::operation::add_application_output::AddApplicationOutputError) -> Self {
        match err {
            crate::operation::add_application_output::AddApplicationOutputError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::add_application_output::AddApplicationOutputError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::add_application_output::AddApplicationOutputError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::add_application_output::AddApplicationOutputError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::add_application_output::AddApplicationOutputError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::add_application_output::AddApplicationOutputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::add_application_reference_data_source::AddApplicationReferenceDataSourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::add_application_reference_data_source::AddApplicationReferenceDataSourceError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_application_reference_data_source::AddApplicationReferenceDataSourceError> for Error {
    fn from(err: crate::operation::add_application_reference_data_source::AddApplicationReferenceDataSourceError) -> Self {
        match err {
            crate::operation::add_application_reference_data_source::AddApplicationReferenceDataSourceError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::operation::add_application_reference_data_source::AddApplicationReferenceDataSourceError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::add_application_reference_data_source::AddApplicationReferenceDataSourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::add_application_reference_data_source::AddApplicationReferenceDataSourceError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::add_application_reference_data_source::AddApplicationReferenceDataSourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::add_application_reference_data_source::AddApplicationReferenceDataSourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::add_application_vpc_configuration::AddApplicationVpcConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::add_application_vpc_configuration::AddApplicationVpcConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_application_vpc_configuration::AddApplicationVpcConfigurationError> for Error {
    fn from(err: crate::operation::add_application_vpc_configuration::AddApplicationVpcConfigurationError) -> Self {
        match err {
            crate::operation::add_application_vpc_configuration::AddApplicationVpcConfigurationError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::add_application_vpc_configuration::AddApplicationVpcConfigurationError::InvalidApplicationConfigurationException(
                inner,
            ) => Error::InvalidApplicationConfigurationException(inner),
            crate::operation::add_application_vpc_configuration::AddApplicationVpcConfigurationError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::add_application_vpc_configuration::AddApplicationVpcConfigurationError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::add_application_vpc_configuration::AddApplicationVpcConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::add_application_vpc_configuration::AddApplicationVpcConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_application::CreateApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_application::CreateApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_application::CreateApplicationError> for Error {
    fn from(err: crate::operation::create_application::CreateApplicationError) -> Self {
        match err {
            crate::operation::create_application::CreateApplicationError::CodeValidationException(inner) => Error::CodeValidationException(inner),
            crate::operation::create_application::CreateApplicationError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::create_application::CreateApplicationError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::create_application::CreateApplicationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::create_application::CreateApplicationError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_application::CreateApplicationError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::create_application::CreateApplicationError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::create_application::CreateApplicationError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::operation::create_application::CreateApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_application_presigned_url::CreateApplicationPresignedUrlError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_application_presigned_url::CreateApplicationPresignedUrlError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_application_presigned_url::CreateApplicationPresignedUrlError> for Error {
    fn from(err: crate::operation::create_application_presigned_url::CreateApplicationPresignedUrlError) -> Self {
        match err {
            crate::operation::create_application_presigned_url::CreateApplicationPresignedUrlError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::create_application_presigned_url::CreateApplicationPresignedUrlError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::create_application_presigned_url::CreateApplicationPresignedUrlError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_application_presigned_url::CreateApplicationPresignedUrlError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_application_snapshot::CreateApplicationSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_application_snapshot::CreateApplicationSnapshotError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_application_snapshot::CreateApplicationSnapshotError> for Error {
    fn from(err: crate::operation::create_application_snapshot::CreateApplicationSnapshotError) -> Self {
        match err {
            crate::operation::create_application_snapshot::CreateApplicationSnapshotError::InvalidApplicationConfigurationException(inner) => {
                Error::InvalidApplicationConfigurationException(inner)
            }
            crate::operation::create_application_snapshot::CreateApplicationSnapshotError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::create_application_snapshot::CreateApplicationSnapshotError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::create_application_snapshot::CreateApplicationSnapshotError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_application_snapshot::CreateApplicationSnapshotError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::create_application_snapshot::CreateApplicationSnapshotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_application_snapshot::CreateApplicationSnapshotError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::operation::create_application_snapshot::CreateApplicationSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_application::DeleteApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_application::DeleteApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_application::DeleteApplicationError> for Error {
    fn from(err: crate::operation::delete_application::DeleteApplicationError) -> Self {
        match err {
            crate::operation::delete_application::DeleteApplicationError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::delete_application::DeleteApplicationError::InvalidApplicationConfigurationException(inner) => {
                Error::InvalidApplicationConfigurationException(inner)
            }
            crate::operation::delete_application::DeleteApplicationError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::delete_application::DeleteApplicationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_application::DeleteApplicationError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_application::DeleteApplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_application::DeleteApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_application_cloud_watch_logging_option::DeleteApplicationCloudWatchLoggingOptionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_application_cloud_watch_logging_option::DeleteApplicationCloudWatchLoggingOptionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_application_cloud_watch_logging_option::DeleteApplicationCloudWatchLoggingOptionError> for Error {
    fn from(err: crate::operation::delete_application_cloud_watch_logging_option::DeleteApplicationCloudWatchLoggingOptionError) -> Self {
        match err {
            crate::operation::delete_application_cloud_watch_logging_option::DeleteApplicationCloudWatchLoggingOptionError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_application_cloud_watch_logging_option::DeleteApplicationCloudWatchLoggingOptionError::InvalidApplicationConfigurationException(inner) => Error::InvalidApplicationConfigurationException(inner),
            crate::operation::delete_application_cloud_watch_logging_option::DeleteApplicationCloudWatchLoggingOptionError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::delete_application_cloud_watch_logging_option::DeleteApplicationCloudWatchLoggingOptionError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_application_cloud_watch_logging_option::DeleteApplicationCloudWatchLoggingOptionError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_application_cloud_watch_logging_option::DeleteApplicationCloudWatchLoggingOptionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_application_cloud_watch_logging_option::DeleteApplicationCloudWatchLoggingOptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_application_input_processing_configuration::DeleteApplicationInputProcessingConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_application_input_processing_configuration::DeleteApplicationInputProcessingConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_application_input_processing_configuration::DeleteApplicationInputProcessingConfigurationError> for Error {
    fn from(err: crate::operation::delete_application_input_processing_configuration::DeleteApplicationInputProcessingConfigurationError) -> Self {
        match err {
            crate::operation::delete_application_input_processing_configuration::DeleteApplicationInputProcessingConfigurationError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_application_input_processing_configuration::DeleteApplicationInputProcessingConfigurationError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::delete_application_input_processing_configuration::DeleteApplicationInputProcessingConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_application_input_processing_configuration::DeleteApplicationInputProcessingConfigurationError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_application_input_processing_configuration::DeleteApplicationInputProcessingConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_application_input_processing_configuration::DeleteApplicationInputProcessingConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_application_output::DeleteApplicationOutputError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_application_output::DeleteApplicationOutputError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_application_output::DeleteApplicationOutputError> for Error {
    fn from(err: crate::operation::delete_application_output::DeleteApplicationOutputError) -> Self {
        match err {
            crate::operation::delete_application_output::DeleteApplicationOutputError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::delete_application_output::DeleteApplicationOutputError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::delete_application_output::DeleteApplicationOutputError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::delete_application_output::DeleteApplicationOutputError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::delete_application_output::DeleteApplicationOutputError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_application_output::DeleteApplicationOutputError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_application_reference_data_source::DeleteApplicationReferenceDataSourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_application_reference_data_source::DeleteApplicationReferenceDataSourceError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_application_reference_data_source::DeleteApplicationReferenceDataSourceError> for Error {
    fn from(err: crate::operation::delete_application_reference_data_source::DeleteApplicationReferenceDataSourceError) -> Self {
        match err {
            crate::operation::delete_application_reference_data_source::DeleteApplicationReferenceDataSourceError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_application_reference_data_source::DeleteApplicationReferenceDataSourceError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::delete_application_reference_data_source::DeleteApplicationReferenceDataSourceError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::delete_application_reference_data_source::DeleteApplicationReferenceDataSourceError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_application_reference_data_source::DeleteApplicationReferenceDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_application_reference_data_source::DeleteApplicationReferenceDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_application_snapshot::DeleteApplicationSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_application_snapshot::DeleteApplicationSnapshotError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_application_snapshot::DeleteApplicationSnapshotError> for Error {
    fn from(err: crate::operation::delete_application_snapshot::DeleteApplicationSnapshotError) -> Self {
        match err {
            crate::operation::delete_application_snapshot::DeleteApplicationSnapshotError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::delete_application_snapshot::DeleteApplicationSnapshotError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::delete_application_snapshot::DeleteApplicationSnapshotError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::delete_application_snapshot::DeleteApplicationSnapshotError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::delete_application_snapshot::DeleteApplicationSnapshotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_application_snapshot::DeleteApplicationSnapshotError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::operation::delete_application_snapshot::DeleteApplicationSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationError> for Error {
    fn from(err: crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationError) -> Self {
        match err {
            crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationError::InvalidApplicationConfigurationException(inner) => Error::InvalidApplicationConfigurationException(inner),
            crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_application_vpc_configuration::DeleteApplicationVpcConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_application::DescribeApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_application::DescribeApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_application::DescribeApplicationError> for Error {
    fn from(err: crate::operation::describe_application::DescribeApplicationError) -> Self {
        match err {
            crate::operation::describe_application::DescribeApplicationError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::describe_application::DescribeApplicationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_application::DescribeApplicationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_application::DescribeApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_application_snapshot::DescribeApplicationSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_application_snapshot::DescribeApplicationSnapshotError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_application_snapshot::DescribeApplicationSnapshotError> for Error {
    fn from(err: crate::operation::describe_application_snapshot::DescribeApplicationSnapshotError) -> Self {
        match err {
            crate::operation::describe_application_snapshot::DescribeApplicationSnapshotError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::describe_application_snapshot::DescribeApplicationSnapshotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_application_snapshot::DescribeApplicationSnapshotError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::operation::describe_application_snapshot::DescribeApplicationSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_application_version::DescribeApplicationVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_application_version::DescribeApplicationVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_application_version::DescribeApplicationVersionError> for Error {
    fn from(err: crate::operation::describe_application_version::DescribeApplicationVersionError) -> Self {
        match err {
            crate::operation::describe_application_version::DescribeApplicationVersionError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::describe_application_version::DescribeApplicationVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_application_version::DescribeApplicationVersionError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::operation::describe_application_version::DescribeApplicationVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::discover_input_schema::DiscoverInputSchemaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::discover_input_schema::DiscoverInputSchemaError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::discover_input_schema::DiscoverInputSchemaError> for Error {
    fn from(err: crate::operation::discover_input_schema::DiscoverInputSchemaError) -> Self {
        match err {
            crate::operation::discover_input_schema::DiscoverInputSchemaError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::discover_input_schema::DiscoverInputSchemaError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::discover_input_schema::DiscoverInputSchemaError::ResourceProvisionedThroughputExceededException(inner) => {
                Error::ResourceProvisionedThroughputExceededException(inner)
            }
            crate::operation::discover_input_schema::DiscoverInputSchemaError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::discover_input_schema::DiscoverInputSchemaError::UnableToDetectSchemaException(inner) => {
                Error::UnableToDetectSchemaException(inner)
            }
            crate::operation::discover_input_schema::DiscoverInputSchemaError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::operation::discover_input_schema::DiscoverInputSchemaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_applications::ListApplicationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_applications::ListApplicationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_applications::ListApplicationsError> for Error {
    fn from(err: crate::operation::list_applications::ListApplicationsError) -> Self {
        match err {
            crate::operation::list_applications::ListApplicationsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_applications::ListApplicationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_application_snapshots::ListApplicationSnapshotsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_application_snapshots::ListApplicationSnapshotsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_application_snapshots::ListApplicationSnapshotsError> for Error {
    fn from(err: crate::operation::list_application_snapshots::ListApplicationSnapshotsError) -> Self {
        match err {
            crate::operation::list_application_snapshots::ListApplicationSnapshotsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::list_application_snapshots::ListApplicationSnapshotsError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::operation::list_application_snapshots::ListApplicationSnapshotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_application_versions::ListApplicationVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_application_versions::ListApplicationVersionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_application_versions::ListApplicationVersionsError> for Error {
    fn from(err: crate::operation::list_application_versions::ListApplicationVersionsError) -> Self {
        match err {
            crate::operation::list_application_versions::ListApplicationVersionsError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::list_application_versions::ListApplicationVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_application_versions::ListApplicationVersionsError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::operation::list_application_versions::ListApplicationVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::rollback_application::RollbackApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::rollback_application::RollbackApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::rollback_application::RollbackApplicationError> for Error {
    fn from(err: crate::operation::rollback_application::RollbackApplicationError) -> Self {
        match err {
            crate::operation::rollback_application::RollbackApplicationError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::rollback_application::RollbackApplicationError::InvalidArgumentException(inner) => {
                Error::InvalidArgumentException(inner)
            }
            crate::operation::rollback_application::RollbackApplicationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::rollback_application::RollbackApplicationError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::rollback_application::RollbackApplicationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::rollback_application::RollbackApplicationError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::operation::rollback_application::RollbackApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_application::StartApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_application::StartApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_application::StartApplicationError> for Error {
    fn from(err: crate::operation::start_application::StartApplicationError) -> Self {
        match err {
            crate::operation::start_application::StartApplicationError::InvalidApplicationConfigurationException(inner) => {
                Error::InvalidApplicationConfigurationException(inner)
            }
            crate::operation::start_application::StartApplicationError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::start_application::StartApplicationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::start_application::StartApplicationError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::start_application::StartApplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_application::StartApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_application::StopApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_application::StopApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_application::StopApplicationError> for Error {
    fn from(err: crate::operation::stop_application::StopApplicationError) -> Self {
        match err {
            crate::operation::stop_application::StopApplicationError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::stop_application::StopApplicationError::InvalidApplicationConfigurationException(inner) => {
                Error::InvalidApplicationConfigurationException(inner)
            }
            crate::operation::stop_application::StopApplicationError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::stop_application::StopApplicationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::stop_application::StopApplicationError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::stop_application::StopApplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::stop_application::StopApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::tag_resource::TagResourceError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::TooManyTagsException(inner) => Error::TooManyTagsException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_application::UpdateApplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_application::UpdateApplicationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_application::UpdateApplicationError> for Error {
    fn from(err: crate::operation::update_application::UpdateApplicationError) -> Self {
        match err {
            crate::operation::update_application::UpdateApplicationError::CodeValidationException(inner) => Error::CodeValidationException(inner),
            crate::operation::update_application::UpdateApplicationError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::operation::update_application::UpdateApplicationError::InvalidApplicationConfigurationException(inner) => {
                Error::InvalidApplicationConfigurationException(inner)
            }
            crate::operation::update_application::UpdateApplicationError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::update_application::UpdateApplicationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_application::UpdateApplicationError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_application::UpdateApplicationError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::update_application::UpdateApplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_application::UpdateApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_application_maintenance_configuration::UpdateApplicationMaintenanceConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_application_maintenance_configuration::UpdateApplicationMaintenanceConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_application_maintenance_configuration::UpdateApplicationMaintenanceConfigurationError> for Error {
    fn from(err: crate::operation::update_application_maintenance_configuration::UpdateApplicationMaintenanceConfigurationError) -> Self {
        match err {
            crate::operation::update_application_maintenance_configuration::UpdateApplicationMaintenanceConfigurationError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::update_application_maintenance_configuration::UpdateApplicationMaintenanceConfigurationError::InvalidArgumentException(inner) => Error::InvalidArgumentException(inner),
            crate::operation::update_application_maintenance_configuration::UpdateApplicationMaintenanceConfigurationError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::update_application_maintenance_configuration::UpdateApplicationMaintenanceConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_application_maintenance_configuration::UpdateApplicationMaintenanceConfigurationError::UnsupportedOperationException(inner) => Error::UnsupportedOperationException(inner),
            crate::operation::update_application_maintenance_configuration::UpdateApplicationMaintenanceConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::CodeValidationException(inner) => inner.source(),
            Error::ConcurrentModificationException(inner) => inner.source(),
            Error::InvalidApplicationConfigurationException(inner) => inner.source(),
            Error::InvalidArgumentException(inner) => inner.source(),
            Error::InvalidRequestException(inner) => inner.source(),
            Error::LimitExceededException(inner) => inner.source(),
            Error::ResourceInUseException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ResourceProvisionedThroughputExceededException(inner) => inner.source(),
            Error::ServiceUnavailableException(inner) => inner.source(),
            Error::TooManyTagsException(inner) => inner.source(),
            Error::UnableToDetectSchemaException(inner) => inner.source(),
            Error::UnsupportedOperationException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::CodeValidationException(e) => e.request_id(),
            Self::ConcurrentModificationException(e) => e.request_id(),
            Self::InvalidApplicationConfigurationException(e) => e.request_id(),
            Self::InvalidArgumentException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ResourceProvisionedThroughputExceededException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::UnableToDetectSchemaException(e) => e.request_id(),
            Self::UnsupportedOperationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
