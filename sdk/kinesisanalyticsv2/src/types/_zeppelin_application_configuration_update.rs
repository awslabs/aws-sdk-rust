// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Updates to the configuration of Kinesis Data Analytics Studio notebook.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ZeppelinApplicationConfigurationUpdate {
    /// <p>Updates to the monitoring configuration of a Kinesis Data Analytics Studio notebook.</p>
    #[doc(hidden)]
    pub monitoring_configuration_update:
        std::option::Option<crate::types::ZeppelinMonitoringConfigurationUpdate>,
    /// <p>Updates to the configuration of the Amazon Glue Data Catalog that is associated with the Kinesis Data Analytics Studio notebook.</p>
    #[doc(hidden)]
    pub catalog_configuration_update: std::option::Option<crate::types::CatalogConfigurationUpdate>,
    /// <p>Updates to the configuration information required to deploy an Amazon Data Analytics Studio notebook as an application with durable state.</p>
    #[doc(hidden)]
    pub deploy_as_application_configuration_update:
        std::option::Option<crate::types::DeployAsApplicationConfigurationUpdate>,
    /// <p>Updates to the customer artifacts. Custom artifacts are dependency JAR files and user-defined functions (UDF).</p>
    #[doc(hidden)]
    pub custom_artifacts_configuration_update:
        std::option::Option<std::vec::Vec<crate::types::CustomArtifactConfiguration>>,
}
impl ZeppelinApplicationConfigurationUpdate {
    /// <p>Updates to the monitoring configuration of a Kinesis Data Analytics Studio notebook.</p>
    pub fn monitoring_configuration_update(
        &self,
    ) -> std::option::Option<&crate::types::ZeppelinMonitoringConfigurationUpdate> {
        self.monitoring_configuration_update.as_ref()
    }
    /// <p>Updates to the configuration of the Amazon Glue Data Catalog that is associated with the Kinesis Data Analytics Studio notebook.</p>
    pub fn catalog_configuration_update(
        &self,
    ) -> std::option::Option<&crate::types::CatalogConfigurationUpdate> {
        self.catalog_configuration_update.as_ref()
    }
    /// <p>Updates to the configuration information required to deploy an Amazon Data Analytics Studio notebook as an application with durable state.</p>
    pub fn deploy_as_application_configuration_update(
        &self,
    ) -> std::option::Option<&crate::types::DeployAsApplicationConfigurationUpdate> {
        self.deploy_as_application_configuration_update.as_ref()
    }
    /// <p>Updates to the customer artifacts. Custom artifacts are dependency JAR files and user-defined functions (UDF).</p>
    pub fn custom_artifacts_configuration_update(
        &self,
    ) -> std::option::Option<&[crate::types::CustomArtifactConfiguration]> {
        self.custom_artifacts_configuration_update.as_deref()
    }
}
impl ZeppelinApplicationConfigurationUpdate {
    /// Creates a new builder-style object to manufacture [`ZeppelinApplicationConfigurationUpdate`](crate::types::ZeppelinApplicationConfigurationUpdate).
    pub fn builder() -> crate::types::builders::ZeppelinApplicationConfigurationUpdateBuilder {
        crate::types::builders::ZeppelinApplicationConfigurationUpdateBuilder::default()
    }
}

/// A builder for [`ZeppelinApplicationConfigurationUpdate`](crate::types::ZeppelinApplicationConfigurationUpdate).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ZeppelinApplicationConfigurationUpdateBuilder {
    pub(crate) monitoring_configuration_update:
        std::option::Option<crate::types::ZeppelinMonitoringConfigurationUpdate>,
    pub(crate) catalog_configuration_update:
        std::option::Option<crate::types::CatalogConfigurationUpdate>,
    pub(crate) deploy_as_application_configuration_update:
        std::option::Option<crate::types::DeployAsApplicationConfigurationUpdate>,
    pub(crate) custom_artifacts_configuration_update:
        std::option::Option<std::vec::Vec<crate::types::CustomArtifactConfiguration>>,
}
impl ZeppelinApplicationConfigurationUpdateBuilder {
    /// <p>Updates to the monitoring configuration of a Kinesis Data Analytics Studio notebook.</p>
    pub fn monitoring_configuration_update(
        mut self,
        input: crate::types::ZeppelinMonitoringConfigurationUpdate,
    ) -> Self {
        self.monitoring_configuration_update = Some(input);
        self
    }
    /// <p>Updates to the monitoring configuration of a Kinesis Data Analytics Studio notebook.</p>
    pub fn set_monitoring_configuration_update(
        mut self,
        input: std::option::Option<crate::types::ZeppelinMonitoringConfigurationUpdate>,
    ) -> Self {
        self.monitoring_configuration_update = input;
        self
    }
    /// <p>Updates to the configuration of the Amazon Glue Data Catalog that is associated with the Kinesis Data Analytics Studio notebook.</p>
    pub fn catalog_configuration_update(
        mut self,
        input: crate::types::CatalogConfigurationUpdate,
    ) -> Self {
        self.catalog_configuration_update = Some(input);
        self
    }
    /// <p>Updates to the configuration of the Amazon Glue Data Catalog that is associated with the Kinesis Data Analytics Studio notebook.</p>
    pub fn set_catalog_configuration_update(
        mut self,
        input: std::option::Option<crate::types::CatalogConfigurationUpdate>,
    ) -> Self {
        self.catalog_configuration_update = input;
        self
    }
    /// <p>Updates to the configuration information required to deploy an Amazon Data Analytics Studio notebook as an application with durable state.</p>
    pub fn deploy_as_application_configuration_update(
        mut self,
        input: crate::types::DeployAsApplicationConfigurationUpdate,
    ) -> Self {
        self.deploy_as_application_configuration_update = Some(input);
        self
    }
    /// <p>Updates to the configuration information required to deploy an Amazon Data Analytics Studio notebook as an application with durable state.</p>
    pub fn set_deploy_as_application_configuration_update(
        mut self,
        input: std::option::Option<crate::types::DeployAsApplicationConfigurationUpdate>,
    ) -> Self {
        self.deploy_as_application_configuration_update = input;
        self
    }
    /// Appends an item to `custom_artifacts_configuration_update`.
    ///
    /// To override the contents of this collection use [`set_custom_artifacts_configuration_update`](Self::set_custom_artifacts_configuration_update).
    ///
    /// <p>Updates to the customer artifacts. Custom artifacts are dependency JAR files and user-defined functions (UDF).</p>
    pub fn custom_artifacts_configuration_update(
        mut self,
        input: crate::types::CustomArtifactConfiguration,
    ) -> Self {
        let mut v = self
            .custom_artifacts_configuration_update
            .unwrap_or_default();
        v.push(input);
        self.custom_artifacts_configuration_update = Some(v);
        self
    }
    /// <p>Updates to the customer artifacts. Custom artifacts are dependency JAR files and user-defined functions (UDF).</p>
    pub fn set_custom_artifacts_configuration_update(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CustomArtifactConfiguration>>,
    ) -> Self {
        self.custom_artifacts_configuration_update = input;
        self
    }
    /// Consumes the builder and constructs a [`ZeppelinApplicationConfigurationUpdate`](crate::types::ZeppelinApplicationConfigurationUpdate).
    pub fn build(self) -> crate::types::ZeppelinApplicationConfigurationUpdate {
        crate::types::ZeppelinApplicationConfigurationUpdate {
            monitoring_configuration_update: self.monitoring_configuration_update,
            catalog_configuration_update: self.catalog_configuration_update,
            deploy_as_application_configuration_update: self
                .deploy_as_application_configuration_update,
            custom_artifacts_configuration_update: self.custom_artifacts_configuration_update,
        }
    }
}
