// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the application version.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApplicationVersionSummary {
    /// <p>The ID of the application version. Kinesis Data Analytics updates the <code>ApplicationVersionId</code> each time you update the application.</p>
    #[doc(hidden)]
    pub application_version_id: std::option::Option<i64>,
    /// <p>The status of the application.</p>
    #[doc(hidden)]
    pub application_status: std::option::Option<crate::types::ApplicationStatus>,
}
impl ApplicationVersionSummary {
    /// <p>The ID of the application version. Kinesis Data Analytics updates the <code>ApplicationVersionId</code> each time you update the application.</p>
    pub fn application_version_id(&self) -> std::option::Option<i64> {
        self.application_version_id
    }
    /// <p>The status of the application.</p>
    pub fn application_status(&self) -> std::option::Option<&crate::types::ApplicationStatus> {
        self.application_status.as_ref()
    }
}
impl ApplicationVersionSummary {
    /// Creates a new builder-style object to manufacture [`ApplicationVersionSummary`](crate::types::ApplicationVersionSummary).
    pub fn builder() -> crate::types::builders::ApplicationVersionSummaryBuilder {
        crate::types::builders::ApplicationVersionSummaryBuilder::default()
    }
}

/// A builder for [`ApplicationVersionSummary`](crate::types::ApplicationVersionSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApplicationVersionSummaryBuilder {
    pub(crate) application_version_id: std::option::Option<i64>,
    pub(crate) application_status: std::option::Option<crate::types::ApplicationStatus>,
}
impl ApplicationVersionSummaryBuilder {
    /// <p>The ID of the application version. Kinesis Data Analytics updates the <code>ApplicationVersionId</code> each time you update the application.</p>
    pub fn application_version_id(mut self, input: i64) -> Self {
        self.application_version_id = Some(input);
        self
    }
    /// <p>The ID of the application version. Kinesis Data Analytics updates the <code>ApplicationVersionId</code> each time you update the application.</p>
    pub fn set_application_version_id(mut self, input: std::option::Option<i64>) -> Self {
        self.application_version_id = input;
        self
    }
    /// <p>The status of the application.</p>
    pub fn application_status(mut self, input: crate::types::ApplicationStatus) -> Self {
        self.application_status = Some(input);
        self
    }
    /// <p>The status of the application.</p>
    pub fn set_application_status(
        mut self,
        input: std::option::Option<crate::types::ApplicationStatus>,
    ) -> Self {
        self.application_status = input;
        self
    }
    /// Consumes the builder and constructs a [`ApplicationVersionSummary`](crate::types::ApplicationVersionSummary).
    pub fn build(self) -> crate::types::ApplicationVersionSummary {
        crate::types::ApplicationVersionSummary {
            application_version_id: self.application_version_id,
            application_status: self.application_status,
        }
    }
}
