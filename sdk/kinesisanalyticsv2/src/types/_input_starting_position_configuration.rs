// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the point at which the application reads from the streaming source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InputStartingPositionConfiguration {
    /// <p>The starting position on the stream.</p>
    /// <ul>
    /// <li> <p> <code>NOW</code> - Start reading just after the most recent record in the stream, and start at the request timestamp that the customer issued.</p> </li>
    /// <li> <p> <code>TRIM_HORIZON</code> - Start reading at the last untrimmed record in the stream, which is the oldest record available in the stream. This option is not available for an Amazon Kinesis Data Firehose delivery stream.</p> </li>
    /// <li> <p> <code>LAST_STOPPED_POINT</code> - Resume reading from where the application last stopped reading.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub input_starting_position: std::option::Option<crate::types::InputStartingPosition>,
}
impl InputStartingPositionConfiguration {
    /// <p>The starting position on the stream.</p>
    /// <ul>
    /// <li> <p> <code>NOW</code> - Start reading just after the most recent record in the stream, and start at the request timestamp that the customer issued.</p> </li>
    /// <li> <p> <code>TRIM_HORIZON</code> - Start reading at the last untrimmed record in the stream, which is the oldest record available in the stream. This option is not available for an Amazon Kinesis Data Firehose delivery stream.</p> </li>
    /// <li> <p> <code>LAST_STOPPED_POINT</code> - Resume reading from where the application last stopped reading.</p> </li>
    /// </ul>
    pub fn input_starting_position(
        &self,
    ) -> std::option::Option<&crate::types::InputStartingPosition> {
        self.input_starting_position.as_ref()
    }
}
impl InputStartingPositionConfiguration {
    /// Creates a new builder-style object to manufacture [`InputStartingPositionConfiguration`](crate::types::InputStartingPositionConfiguration).
    pub fn builder() -> crate::types::builders::InputStartingPositionConfigurationBuilder {
        crate::types::builders::InputStartingPositionConfigurationBuilder::default()
    }
}

/// A builder for [`InputStartingPositionConfiguration`](crate::types::InputStartingPositionConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InputStartingPositionConfigurationBuilder {
    pub(crate) input_starting_position: std::option::Option<crate::types::InputStartingPosition>,
}
impl InputStartingPositionConfigurationBuilder {
    /// <p>The starting position on the stream.</p>
    /// <ul>
    /// <li> <p> <code>NOW</code> - Start reading just after the most recent record in the stream, and start at the request timestamp that the customer issued.</p> </li>
    /// <li> <p> <code>TRIM_HORIZON</code> - Start reading at the last untrimmed record in the stream, which is the oldest record available in the stream. This option is not available for an Amazon Kinesis Data Firehose delivery stream.</p> </li>
    /// <li> <p> <code>LAST_STOPPED_POINT</code> - Resume reading from where the application last stopped reading.</p> </li>
    /// </ul>
    pub fn input_starting_position(mut self, input: crate::types::InputStartingPosition) -> Self {
        self.input_starting_position = Some(input);
        self
    }
    /// <p>The starting position on the stream.</p>
    /// <ul>
    /// <li> <p> <code>NOW</code> - Start reading just after the most recent record in the stream, and start at the request timestamp that the customer issued.</p> </li>
    /// <li> <p> <code>TRIM_HORIZON</code> - Start reading at the last untrimmed record in the stream, which is the oldest record available in the stream. This option is not available for an Amazon Kinesis Data Firehose delivery stream.</p> </li>
    /// <li> <p> <code>LAST_STOPPED_POINT</code> - Resume reading from where the application last stopped reading.</p> </li>
    /// </ul>
    pub fn set_input_starting_position(
        mut self,
        input: std::option::Option<crate::types::InputStartingPosition>,
    ) -> Self {
        self.input_starting_position = input;
        self
    }
    /// Consumes the builder and constructs a [`InputStartingPositionConfiguration`](crate::types::InputStartingPositionConfiguration).
    pub fn build(self) -> crate::types::InputStartingPositionConfiguration {
        crate::types::InputStartingPositionConfiguration {
            input_starting_position: self.input_starting_position,
        }
    }
}
