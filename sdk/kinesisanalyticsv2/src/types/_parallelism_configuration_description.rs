// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes parameters for how a Flink-based Kinesis Data Analytics application executes multiple tasks simultaneously.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ParallelismConfigurationDescription {
    /// <p>Describes whether the application uses the default parallelism for the Kinesis Data Analytics service. </p>
    #[doc(hidden)]
    pub configuration_type: std::option::Option<crate::types::ConfigurationType>,
    /// <p>Describes the initial number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform. If <code>AutoScalingEnabled</code> is set to True, then Kinesis Data Analytics can increase the <code>CurrentParallelism</code> value in response to application load. The service can increase <code>CurrentParallelism</code> up to the maximum parallelism, which is <code>ParalellismPerKPU</code> times the maximum KPUs for the application. The maximum KPUs for an application is 32 by default, and can be increased by requesting a limit increase. If application load is reduced, the service can reduce the <code>CurrentParallelism</code> value down to the <code>Parallelism</code> setting.</p>
    #[doc(hidden)]
    pub parallelism: std::option::Option<i32>,
    /// <p>Describes the number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application.</p>
    #[doc(hidden)]
    pub parallelism_per_kpu: std::option::Option<i32>,
    /// <p>Describes the current number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform. If <code>AutoScalingEnabled</code> is set to True, Kinesis Data Analytics can increase this value in response to application load. The service can increase this value up to the maximum parallelism, which is <code>ParalellismPerKPU</code> times the maximum KPUs for the application. The maximum KPUs for an application is 32 by default, and can be increased by requesting a limit increase. If application load is reduced, the service can reduce the <code>CurrentParallelism</code> value down to the <code>Parallelism</code> setting.</p>
    #[doc(hidden)]
    pub current_parallelism: std::option::Option<i32>,
    /// <p>Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.</p>
    #[doc(hidden)]
    pub auto_scaling_enabled: std::option::Option<bool>,
}
impl ParallelismConfigurationDescription {
    /// <p>Describes whether the application uses the default parallelism for the Kinesis Data Analytics service. </p>
    pub fn configuration_type(&self) -> std::option::Option<&crate::types::ConfigurationType> {
        self.configuration_type.as_ref()
    }
    /// <p>Describes the initial number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform. If <code>AutoScalingEnabled</code> is set to True, then Kinesis Data Analytics can increase the <code>CurrentParallelism</code> value in response to application load. The service can increase <code>CurrentParallelism</code> up to the maximum parallelism, which is <code>ParalellismPerKPU</code> times the maximum KPUs for the application. The maximum KPUs for an application is 32 by default, and can be increased by requesting a limit increase. If application load is reduced, the service can reduce the <code>CurrentParallelism</code> value down to the <code>Parallelism</code> setting.</p>
    pub fn parallelism(&self) -> std::option::Option<i32> {
        self.parallelism
    }
    /// <p>Describes the number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application.</p>
    pub fn parallelism_per_kpu(&self) -> std::option::Option<i32> {
        self.parallelism_per_kpu
    }
    /// <p>Describes the current number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform. If <code>AutoScalingEnabled</code> is set to True, Kinesis Data Analytics can increase this value in response to application load. The service can increase this value up to the maximum parallelism, which is <code>ParalellismPerKPU</code> times the maximum KPUs for the application. The maximum KPUs for an application is 32 by default, and can be increased by requesting a limit increase. If application load is reduced, the service can reduce the <code>CurrentParallelism</code> value down to the <code>Parallelism</code> setting.</p>
    pub fn current_parallelism(&self) -> std::option::Option<i32> {
        self.current_parallelism
    }
    /// <p>Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.</p>
    pub fn auto_scaling_enabled(&self) -> std::option::Option<bool> {
        self.auto_scaling_enabled
    }
}
impl ParallelismConfigurationDescription {
    /// Creates a new builder-style object to manufacture [`ParallelismConfigurationDescription`](crate::types::ParallelismConfigurationDescription).
    pub fn builder() -> crate::types::builders::ParallelismConfigurationDescriptionBuilder {
        crate::types::builders::ParallelismConfigurationDescriptionBuilder::default()
    }
}

/// A builder for [`ParallelismConfigurationDescription`](crate::types::ParallelismConfigurationDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ParallelismConfigurationDescriptionBuilder {
    pub(crate) configuration_type: std::option::Option<crate::types::ConfigurationType>,
    pub(crate) parallelism: std::option::Option<i32>,
    pub(crate) parallelism_per_kpu: std::option::Option<i32>,
    pub(crate) current_parallelism: std::option::Option<i32>,
    pub(crate) auto_scaling_enabled: std::option::Option<bool>,
}
impl ParallelismConfigurationDescriptionBuilder {
    /// <p>Describes whether the application uses the default parallelism for the Kinesis Data Analytics service. </p>
    pub fn configuration_type(mut self, input: crate::types::ConfigurationType) -> Self {
        self.configuration_type = Some(input);
        self
    }
    /// <p>Describes whether the application uses the default parallelism for the Kinesis Data Analytics service. </p>
    pub fn set_configuration_type(
        mut self,
        input: std::option::Option<crate::types::ConfigurationType>,
    ) -> Self {
        self.configuration_type = input;
        self
    }
    /// <p>Describes the initial number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform. If <code>AutoScalingEnabled</code> is set to True, then Kinesis Data Analytics can increase the <code>CurrentParallelism</code> value in response to application load. The service can increase <code>CurrentParallelism</code> up to the maximum parallelism, which is <code>ParalellismPerKPU</code> times the maximum KPUs for the application. The maximum KPUs for an application is 32 by default, and can be increased by requesting a limit increase. If application load is reduced, the service can reduce the <code>CurrentParallelism</code> value down to the <code>Parallelism</code> setting.</p>
    pub fn parallelism(mut self, input: i32) -> Self {
        self.parallelism = Some(input);
        self
    }
    /// <p>Describes the initial number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform. If <code>AutoScalingEnabled</code> is set to True, then Kinesis Data Analytics can increase the <code>CurrentParallelism</code> value in response to application load. The service can increase <code>CurrentParallelism</code> up to the maximum parallelism, which is <code>ParalellismPerKPU</code> times the maximum KPUs for the application. The maximum KPUs for an application is 32 by default, and can be increased by requesting a limit increase. If application load is reduced, the service can reduce the <code>CurrentParallelism</code> value down to the <code>Parallelism</code> setting.</p>
    pub fn set_parallelism(mut self, input: std::option::Option<i32>) -> Self {
        self.parallelism = input;
        self
    }
    /// <p>Describes the number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application.</p>
    pub fn parallelism_per_kpu(mut self, input: i32) -> Self {
        self.parallelism_per_kpu = Some(input);
        self
    }
    /// <p>Describes the number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform per Kinesis Processing Unit (KPU) used by the application.</p>
    pub fn set_parallelism_per_kpu(mut self, input: std::option::Option<i32>) -> Self {
        self.parallelism_per_kpu = input;
        self
    }
    /// <p>Describes the current number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform. If <code>AutoScalingEnabled</code> is set to True, Kinesis Data Analytics can increase this value in response to application load. The service can increase this value up to the maximum parallelism, which is <code>ParalellismPerKPU</code> times the maximum KPUs for the application. The maximum KPUs for an application is 32 by default, and can be increased by requesting a limit increase. If application load is reduced, the service can reduce the <code>CurrentParallelism</code> value down to the <code>Parallelism</code> setting.</p>
    pub fn current_parallelism(mut self, input: i32) -> Self {
        self.current_parallelism = Some(input);
        self
    }
    /// <p>Describes the current number of parallel tasks that a Flink-based Kinesis Data Analytics application can perform. If <code>AutoScalingEnabled</code> is set to True, Kinesis Data Analytics can increase this value in response to application load. The service can increase this value up to the maximum parallelism, which is <code>ParalellismPerKPU</code> times the maximum KPUs for the application. The maximum KPUs for an application is 32 by default, and can be increased by requesting a limit increase. If application load is reduced, the service can reduce the <code>CurrentParallelism</code> value down to the <code>Parallelism</code> setting.</p>
    pub fn set_current_parallelism(mut self, input: std::option::Option<i32>) -> Self {
        self.current_parallelism = input;
        self
    }
    /// <p>Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.</p>
    pub fn auto_scaling_enabled(mut self, input: bool) -> Self {
        self.auto_scaling_enabled = Some(input);
        self
    }
    /// <p>Describes whether the Kinesis Data Analytics service can increase the parallelism of the application in response to increased throughput.</p>
    pub fn set_auto_scaling_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.auto_scaling_enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`ParallelismConfigurationDescription`](crate::types::ParallelismConfigurationDescription).
    pub fn build(self) -> crate::types::ParallelismConfigurationDescription {
        crate::types::ParallelismConfigurationDescription {
            configuration_type: self.configuration_type,
            parallelism: self.parallelism,
            parallelism_per_kpu: self.parallelism_per_kpu,
            current_parallelism: self.current_parallelism,
            auto_scaling_enabled: self.auto_scaling_enabled,
        }
    }
}
