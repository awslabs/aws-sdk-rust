// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes configuration parameters for a Flink-based Kinesis Data Analytics application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FlinkApplicationConfigurationDescription {
    /// <p>Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance.</p>
    #[doc(hidden)]
    pub checkpoint_configuration_description:
        std::option::Option<crate::types::CheckpointConfigurationDescription>,
    /// <p>Describes configuration parameters for Amazon CloudWatch logging for an application.</p>
    #[doc(hidden)]
    pub monitoring_configuration_description:
        std::option::Option<crate::types::MonitoringConfigurationDescription>,
    /// <p>Describes parameters for how an application executes multiple tasks simultaneously.</p>
    #[doc(hidden)]
    pub parallelism_configuration_description:
        std::option::Option<crate::types::ParallelismConfigurationDescription>,
    /// <p>The job plan for an application. For more information about the job plan, see <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/internals/job_scheduling.html">Jobs and Scheduling</a> in the <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/">Apache Flink Documentation</a>. To retrieve the job plan for the application, use the <code>DescribeApplicationRequest$IncludeAdditionalDetails</code> parameter of the <code>DescribeApplication</code> operation.</p>
    #[doc(hidden)]
    pub job_plan_description: std::option::Option<std::string::String>,
}
impl FlinkApplicationConfigurationDescription {
    /// <p>Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance.</p>
    pub fn checkpoint_configuration_description(
        &self,
    ) -> std::option::Option<&crate::types::CheckpointConfigurationDescription> {
        self.checkpoint_configuration_description.as_ref()
    }
    /// <p>Describes configuration parameters for Amazon CloudWatch logging for an application.</p>
    pub fn monitoring_configuration_description(
        &self,
    ) -> std::option::Option<&crate::types::MonitoringConfigurationDescription> {
        self.monitoring_configuration_description.as_ref()
    }
    /// <p>Describes parameters for how an application executes multiple tasks simultaneously.</p>
    pub fn parallelism_configuration_description(
        &self,
    ) -> std::option::Option<&crate::types::ParallelismConfigurationDescription> {
        self.parallelism_configuration_description.as_ref()
    }
    /// <p>The job plan for an application. For more information about the job plan, see <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/internals/job_scheduling.html">Jobs and Scheduling</a> in the <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/">Apache Flink Documentation</a>. To retrieve the job plan for the application, use the <code>DescribeApplicationRequest$IncludeAdditionalDetails</code> parameter of the <code>DescribeApplication</code> operation.</p>
    pub fn job_plan_description(&self) -> std::option::Option<&str> {
        self.job_plan_description.as_deref()
    }
}
impl FlinkApplicationConfigurationDescription {
    /// Creates a new builder-style object to manufacture [`FlinkApplicationConfigurationDescription`](crate::types::FlinkApplicationConfigurationDescription).
    pub fn builder() -> crate::types::builders::FlinkApplicationConfigurationDescriptionBuilder {
        crate::types::builders::FlinkApplicationConfigurationDescriptionBuilder::default()
    }
}

/// A builder for [`FlinkApplicationConfigurationDescription`](crate::types::FlinkApplicationConfigurationDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FlinkApplicationConfigurationDescriptionBuilder {
    pub(crate) checkpoint_configuration_description:
        std::option::Option<crate::types::CheckpointConfigurationDescription>,
    pub(crate) monitoring_configuration_description:
        std::option::Option<crate::types::MonitoringConfigurationDescription>,
    pub(crate) parallelism_configuration_description:
        std::option::Option<crate::types::ParallelismConfigurationDescription>,
    pub(crate) job_plan_description: std::option::Option<std::string::String>,
}
impl FlinkApplicationConfigurationDescriptionBuilder {
    /// <p>Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance.</p>
    pub fn checkpoint_configuration_description(
        mut self,
        input: crate::types::CheckpointConfigurationDescription,
    ) -> Self {
        self.checkpoint_configuration_description = Some(input);
        self
    }
    /// <p>Describes an application's checkpointing configuration. Checkpointing is the process of persisting application state for fault tolerance.</p>
    pub fn set_checkpoint_configuration_description(
        mut self,
        input: std::option::Option<crate::types::CheckpointConfigurationDescription>,
    ) -> Self {
        self.checkpoint_configuration_description = input;
        self
    }
    /// <p>Describes configuration parameters for Amazon CloudWatch logging for an application.</p>
    pub fn monitoring_configuration_description(
        mut self,
        input: crate::types::MonitoringConfigurationDescription,
    ) -> Self {
        self.monitoring_configuration_description = Some(input);
        self
    }
    /// <p>Describes configuration parameters for Amazon CloudWatch logging for an application.</p>
    pub fn set_monitoring_configuration_description(
        mut self,
        input: std::option::Option<crate::types::MonitoringConfigurationDescription>,
    ) -> Self {
        self.monitoring_configuration_description = input;
        self
    }
    /// <p>Describes parameters for how an application executes multiple tasks simultaneously.</p>
    pub fn parallelism_configuration_description(
        mut self,
        input: crate::types::ParallelismConfigurationDescription,
    ) -> Self {
        self.parallelism_configuration_description = Some(input);
        self
    }
    /// <p>Describes parameters for how an application executes multiple tasks simultaneously.</p>
    pub fn set_parallelism_configuration_description(
        mut self,
        input: std::option::Option<crate::types::ParallelismConfigurationDescription>,
    ) -> Self {
        self.parallelism_configuration_description = input;
        self
    }
    /// <p>The job plan for an application. For more information about the job plan, see <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/internals/job_scheduling.html">Jobs and Scheduling</a> in the <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/">Apache Flink Documentation</a>. To retrieve the job plan for the application, use the <code>DescribeApplicationRequest$IncludeAdditionalDetails</code> parameter of the <code>DescribeApplication</code> operation.</p>
    pub fn job_plan_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_plan_description = Some(input.into());
        self
    }
    /// <p>The job plan for an application. For more information about the job plan, see <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/internals/job_scheduling.html">Jobs and Scheduling</a> in the <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/">Apache Flink Documentation</a>. To retrieve the job plan for the application, use the <code>DescribeApplicationRequest$IncludeAdditionalDetails</code> parameter of the <code>DescribeApplication</code> operation.</p>
    pub fn set_job_plan_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.job_plan_description = input;
        self
    }
    /// Consumes the builder and constructs a [`FlinkApplicationConfigurationDescription`](crate::types::FlinkApplicationConfigurationDescription).
    pub fn build(self) -> crate::types::FlinkApplicationConfigurationDescription {
        crate::types::FlinkApplicationConfigurationDescription {
            checkpoint_configuration_description: self.checkpoint_configuration_description,
            monitoring_configuration_description: self.monitoring_configuration_description,
            parallelism_configuration_description: self.parallelism_configuration_description,
            job_plan_description: self.job_plan_description,
        }
    }
}
