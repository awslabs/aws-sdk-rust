// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>For a SQL-based Kinesis Data Analytics application, provides updates to the parallelism count.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputParallelismUpdate {
    /// <p>The number of in-application streams to create for the specified streaming source.</p>
    pub count_update: i32,
}
impl InputParallelismUpdate {
    /// <p>The number of in-application streams to create for the specified streaming source.</p>
    pub fn count_update(&self) -> i32 {
        self.count_update
    }
}
impl InputParallelismUpdate {
    /// Creates a new builder-style object to manufacture [`InputParallelismUpdate`](crate::types::InputParallelismUpdate).
    pub fn builder() -> crate::types::builders::InputParallelismUpdateBuilder {
        crate::types::builders::InputParallelismUpdateBuilder::default()
    }
}

/// A builder for [`InputParallelismUpdate`](crate::types::InputParallelismUpdate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InputParallelismUpdateBuilder {
    pub(crate) count_update: ::std::option::Option<i32>,
}
impl InputParallelismUpdateBuilder {
    /// <p>The number of in-application streams to create for the specified streaming source.</p>
    /// This field is required.
    pub fn count_update(mut self, input: i32) -> Self {
        self.count_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of in-application streams to create for the specified streaming source.</p>
    pub fn set_count_update(mut self, input: ::std::option::Option<i32>) -> Self {
        self.count_update = input;
        self
    }
    /// <p>The number of in-application streams to create for the specified streaming source.</p>
    pub fn get_count_update(&self) -> &::std::option::Option<i32> {
        &self.count_update
    }
    /// Consumes the builder and constructs a [`InputParallelismUpdate`](crate::types::InputParallelismUpdate).
    /// This method will fail if any of the following fields are not set:
    /// - [`count_update`](crate::types::builders::InputParallelismUpdateBuilder::count_update)
    pub fn build(self) -> ::std::result::Result<crate::types::InputParallelismUpdate, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::InputParallelismUpdate {
            count_update: self.count_update.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "count_update",
                    "count_update was not specified but it is required when building InputParallelismUpdate",
                )
            })?,
        })
    }
}
