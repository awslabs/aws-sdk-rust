// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes execution properties for a Flink-based Kinesis Data Analytics application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EnvironmentProperties {
    /// <p>Describes the execution property groups.</p>
    #[doc(hidden)]
    pub property_groups: std::option::Option<std::vec::Vec<crate::types::PropertyGroup>>,
}
impl EnvironmentProperties {
    /// <p>Describes the execution property groups.</p>
    pub fn property_groups(&self) -> std::option::Option<&[crate::types::PropertyGroup]> {
        self.property_groups.as_deref()
    }
}
impl EnvironmentProperties {
    /// Creates a new builder-style object to manufacture [`EnvironmentProperties`](crate::types::EnvironmentProperties).
    pub fn builder() -> crate::types::builders::EnvironmentPropertiesBuilder {
        crate::types::builders::EnvironmentPropertiesBuilder::default()
    }
}

/// A builder for [`EnvironmentProperties`](crate::types::EnvironmentProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EnvironmentPropertiesBuilder {
    pub(crate) property_groups: std::option::Option<std::vec::Vec<crate::types::PropertyGroup>>,
}
impl EnvironmentPropertiesBuilder {
    /// Appends an item to `property_groups`.
    ///
    /// To override the contents of this collection use [`set_property_groups`](Self::set_property_groups).
    ///
    /// <p>Describes the execution property groups.</p>
    pub fn property_groups(mut self, input: crate::types::PropertyGroup) -> Self {
        let mut v = self.property_groups.unwrap_or_default();
        v.push(input);
        self.property_groups = Some(v);
        self
    }
    /// <p>Describes the execution property groups.</p>
    pub fn set_property_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PropertyGroup>>,
    ) -> Self {
        self.property_groups = input;
        self
    }
    /// Consumes the builder and constructs a [`EnvironmentProperties`](crate::types::EnvironmentProperties).
    pub fn build(self) -> crate::types::EnvironmentProperties {
        crate::types::EnvironmentProperties {
            property_groups: self.property_groups,
        }
    }
}
