// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the starting parameters for an Kinesis Data Analytics application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RunConfiguration {
    /// <p>Describes the starting parameters for a Flink-based Kinesis Data Analytics application.</p>
    pub flink_run_configuration: ::std::option::Option<crate::types::FlinkRunConfiguration>,
    /// <p>Describes the starting parameters for a SQL-based Kinesis Data Analytics application application.</p>
    pub sql_run_configurations: ::std::option::Option<::std::vec::Vec<crate::types::SqlRunConfiguration>>,
    /// <p>Describes the restore behavior of a restarting application.</p>
    pub application_restore_configuration: ::std::option::Option<crate::types::ApplicationRestoreConfiguration>,
}
impl RunConfiguration {
    /// <p>Describes the starting parameters for a Flink-based Kinesis Data Analytics application.</p>
    pub fn flink_run_configuration(&self) -> ::std::option::Option<&crate::types::FlinkRunConfiguration> {
        self.flink_run_configuration.as_ref()
    }
    /// <p>Describes the starting parameters for a SQL-based Kinesis Data Analytics application application.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sql_run_configurations.is_none()`.
    pub fn sql_run_configurations(&self) -> &[crate::types::SqlRunConfiguration] {
        self.sql_run_configurations.as_deref().unwrap_or_default()
    }
    /// <p>Describes the restore behavior of a restarting application.</p>
    pub fn application_restore_configuration(&self) -> ::std::option::Option<&crate::types::ApplicationRestoreConfiguration> {
        self.application_restore_configuration.as_ref()
    }
}
impl RunConfiguration {
    /// Creates a new builder-style object to manufacture [`RunConfiguration`](crate::types::RunConfiguration).
    pub fn builder() -> crate::types::builders::RunConfigurationBuilder {
        crate::types::builders::RunConfigurationBuilder::default()
    }
}

/// A builder for [`RunConfiguration`](crate::types::RunConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RunConfigurationBuilder {
    pub(crate) flink_run_configuration: ::std::option::Option<crate::types::FlinkRunConfiguration>,
    pub(crate) sql_run_configurations: ::std::option::Option<::std::vec::Vec<crate::types::SqlRunConfiguration>>,
    pub(crate) application_restore_configuration: ::std::option::Option<crate::types::ApplicationRestoreConfiguration>,
}
impl RunConfigurationBuilder {
    /// <p>Describes the starting parameters for a Flink-based Kinesis Data Analytics application.</p>
    pub fn flink_run_configuration(mut self, input: crate::types::FlinkRunConfiguration) -> Self {
        self.flink_run_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the starting parameters for a Flink-based Kinesis Data Analytics application.</p>
    pub fn set_flink_run_configuration(mut self, input: ::std::option::Option<crate::types::FlinkRunConfiguration>) -> Self {
        self.flink_run_configuration = input;
        self
    }
    /// <p>Describes the starting parameters for a Flink-based Kinesis Data Analytics application.</p>
    pub fn get_flink_run_configuration(&self) -> &::std::option::Option<crate::types::FlinkRunConfiguration> {
        &self.flink_run_configuration
    }
    /// Appends an item to `sql_run_configurations`.
    ///
    /// To override the contents of this collection use [`set_sql_run_configurations`](Self::set_sql_run_configurations).
    ///
    /// <p>Describes the starting parameters for a SQL-based Kinesis Data Analytics application application.</p>
    pub fn sql_run_configurations(mut self, input: crate::types::SqlRunConfiguration) -> Self {
        let mut v = self.sql_run_configurations.unwrap_or_default();
        v.push(input);
        self.sql_run_configurations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Describes the starting parameters for a SQL-based Kinesis Data Analytics application application.</p>
    pub fn set_sql_run_configurations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SqlRunConfiguration>>) -> Self {
        self.sql_run_configurations = input;
        self
    }
    /// <p>Describes the starting parameters for a SQL-based Kinesis Data Analytics application application.</p>
    pub fn get_sql_run_configurations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SqlRunConfiguration>> {
        &self.sql_run_configurations
    }
    /// <p>Describes the restore behavior of a restarting application.</p>
    pub fn application_restore_configuration(mut self, input: crate::types::ApplicationRestoreConfiguration) -> Self {
        self.application_restore_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the restore behavior of a restarting application.</p>
    pub fn set_application_restore_configuration(mut self, input: ::std::option::Option<crate::types::ApplicationRestoreConfiguration>) -> Self {
        self.application_restore_configuration = input;
        self
    }
    /// <p>Describes the restore behavior of a restarting application.</p>
    pub fn get_application_restore_configuration(&self) -> &::std::option::Option<crate::types::ApplicationRestoreConfiguration> {
        &self.application_restore_configuration
    }
    /// Consumes the builder and constructs a [`RunConfiguration`](crate::types::RunConfiguration).
    pub fn build(self) -> crate::types::RunConfiguration {
        crate::types::RunConfiguration {
            flink_run_configuration: self.flink_run_configuration,
            sql_run_configurations: self.sql_run_configurations,
            application_restore_configuration: self.application_restore_configuration,
        }
    }
}
