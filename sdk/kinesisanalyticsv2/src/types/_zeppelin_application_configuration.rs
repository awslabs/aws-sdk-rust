// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of a Kinesis Data Analytics Studio notebook.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ZeppelinApplicationConfiguration {
    /// <p>The monitoring configuration of a Kinesis Data Analytics Studio notebook.</p>
    pub monitoring_configuration: ::std::option::Option<crate::types::ZeppelinMonitoringConfiguration>,
    /// <p>The Amazon Glue Data Catalog that you use in queries in a Kinesis Data Analytics Studio notebook.</p>
    pub catalog_configuration: ::std::option::Option<crate::types::CatalogConfiguration>,
    /// <p>The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.</p>
    pub deploy_as_application_configuration: ::std::option::Option<crate::types::DeployAsApplicationConfiguration>,
    /// <p>Custom artifacts are dependency JARs and user-defined functions (UDF).</p>
    pub custom_artifacts_configuration: ::std::option::Option<::std::vec::Vec<crate::types::CustomArtifactConfiguration>>,
}
impl ZeppelinApplicationConfiguration {
    /// <p>The monitoring configuration of a Kinesis Data Analytics Studio notebook.</p>
    pub fn monitoring_configuration(&self) -> ::std::option::Option<&crate::types::ZeppelinMonitoringConfiguration> {
        self.monitoring_configuration.as_ref()
    }
    /// <p>The Amazon Glue Data Catalog that you use in queries in a Kinesis Data Analytics Studio notebook.</p>
    pub fn catalog_configuration(&self) -> ::std::option::Option<&crate::types::CatalogConfiguration> {
        self.catalog_configuration.as_ref()
    }
    /// <p>The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.</p>
    pub fn deploy_as_application_configuration(&self) -> ::std::option::Option<&crate::types::DeployAsApplicationConfiguration> {
        self.deploy_as_application_configuration.as_ref()
    }
    /// <p>Custom artifacts are dependency JARs and user-defined functions (UDF).</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.custom_artifacts_configuration.is_none()`.
    pub fn custom_artifacts_configuration(&self) -> &[crate::types::CustomArtifactConfiguration] {
        self.custom_artifacts_configuration.as_deref().unwrap_or_default()
    }
}
impl ZeppelinApplicationConfiguration {
    /// Creates a new builder-style object to manufacture [`ZeppelinApplicationConfiguration`](crate::types::ZeppelinApplicationConfiguration).
    pub fn builder() -> crate::types::builders::ZeppelinApplicationConfigurationBuilder {
        crate::types::builders::ZeppelinApplicationConfigurationBuilder::default()
    }
}

/// A builder for [`ZeppelinApplicationConfiguration`](crate::types::ZeppelinApplicationConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ZeppelinApplicationConfigurationBuilder {
    pub(crate) monitoring_configuration: ::std::option::Option<crate::types::ZeppelinMonitoringConfiguration>,
    pub(crate) catalog_configuration: ::std::option::Option<crate::types::CatalogConfiguration>,
    pub(crate) deploy_as_application_configuration: ::std::option::Option<crate::types::DeployAsApplicationConfiguration>,
    pub(crate) custom_artifacts_configuration: ::std::option::Option<::std::vec::Vec<crate::types::CustomArtifactConfiguration>>,
}
impl ZeppelinApplicationConfigurationBuilder {
    /// <p>The monitoring configuration of a Kinesis Data Analytics Studio notebook.</p>
    pub fn monitoring_configuration(mut self, input: crate::types::ZeppelinMonitoringConfiguration) -> Self {
        self.monitoring_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The monitoring configuration of a Kinesis Data Analytics Studio notebook.</p>
    pub fn set_monitoring_configuration(mut self, input: ::std::option::Option<crate::types::ZeppelinMonitoringConfiguration>) -> Self {
        self.monitoring_configuration = input;
        self
    }
    /// <p>The monitoring configuration of a Kinesis Data Analytics Studio notebook.</p>
    pub fn get_monitoring_configuration(&self) -> &::std::option::Option<crate::types::ZeppelinMonitoringConfiguration> {
        &self.monitoring_configuration
    }
    /// <p>The Amazon Glue Data Catalog that you use in queries in a Kinesis Data Analytics Studio notebook.</p>
    pub fn catalog_configuration(mut self, input: crate::types::CatalogConfiguration) -> Self {
        self.catalog_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Amazon Glue Data Catalog that you use in queries in a Kinesis Data Analytics Studio notebook.</p>
    pub fn set_catalog_configuration(mut self, input: ::std::option::Option<crate::types::CatalogConfiguration>) -> Self {
        self.catalog_configuration = input;
        self
    }
    /// <p>The Amazon Glue Data Catalog that you use in queries in a Kinesis Data Analytics Studio notebook.</p>
    pub fn get_catalog_configuration(&self) -> &::std::option::Option<crate::types::CatalogConfiguration> {
        &self.catalog_configuration
    }
    /// <p>The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.</p>
    pub fn deploy_as_application_configuration(mut self, input: crate::types::DeployAsApplicationConfiguration) -> Self {
        self.deploy_as_application_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.</p>
    pub fn set_deploy_as_application_configuration(mut self, input: ::std::option::Option<crate::types::DeployAsApplicationConfiguration>) -> Self {
        self.deploy_as_application_configuration = input;
        self
    }
    /// <p>The information required to deploy a Kinesis Data Analytics Studio notebook as an application with durable state.</p>
    pub fn get_deploy_as_application_configuration(&self) -> &::std::option::Option<crate::types::DeployAsApplicationConfiguration> {
        &self.deploy_as_application_configuration
    }
    /// Appends an item to `custom_artifacts_configuration`.
    ///
    /// To override the contents of this collection use [`set_custom_artifacts_configuration`](Self::set_custom_artifacts_configuration).
    ///
    /// <p>Custom artifacts are dependency JARs and user-defined functions (UDF).</p>
    pub fn custom_artifacts_configuration(mut self, input: crate::types::CustomArtifactConfiguration) -> Self {
        let mut v = self.custom_artifacts_configuration.unwrap_or_default();
        v.push(input);
        self.custom_artifacts_configuration = ::std::option::Option::Some(v);
        self
    }
    /// <p>Custom artifacts are dependency JARs and user-defined functions (UDF).</p>
    pub fn set_custom_artifacts_configuration(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::CustomArtifactConfiguration>>,
    ) -> Self {
        self.custom_artifacts_configuration = input;
        self
    }
    /// <p>Custom artifacts are dependency JARs and user-defined functions (UDF).</p>
    pub fn get_custom_artifacts_configuration(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CustomArtifactConfiguration>> {
        &self.custom_artifacts_configuration
    }
    /// Consumes the builder and constructs a [`ZeppelinApplicationConfiguration`](crate::types::ZeppelinApplicationConfiguration).
    pub fn build(self) -> crate::types::ZeppelinApplicationConfiguration {
        crate::types::ZeppelinApplicationConfiguration {
            monitoring_configuration: self.monitoring_configuration,
            catalog_configuration: self.catalog_configuration,
            deploy_as_application_configuration: self.deploy_as_application_configuration,
            custom_artifacts_configuration: self.custom_artifacts_configuration,
        }
    }
}
