// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes updates for an SQL-based Kinesis Data Analytics application's input schema.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputSchemaUpdate {
    /// <p>Specifies the format of the records on the streaming source.</p>
    pub record_format_update: ::std::option::Option<crate::types::RecordFormat>,
    /// <p>Specifies the encoding of the records in the streaming source; for example, UTF-8.</p>
    pub record_encoding_update: ::std::option::Option<::std::string::String>,
    /// <p>A list of <code>RecordColumn</code> objects. Each object describes the mapping of the streaming source element to the corresponding column in the in-application stream.</p>
    pub record_column_updates: ::std::option::Option<::std::vec::Vec<crate::types::RecordColumn>>,
}
impl InputSchemaUpdate {
    /// <p>Specifies the format of the records on the streaming source.</p>
    pub fn record_format_update(&self) -> ::std::option::Option<&crate::types::RecordFormat> {
        self.record_format_update.as_ref()
    }
    /// <p>Specifies the encoding of the records in the streaming source; for example, UTF-8.</p>
    pub fn record_encoding_update(&self) -> ::std::option::Option<&str> {
        self.record_encoding_update.as_deref()
    }
    /// <p>A list of <code>RecordColumn</code> objects. Each object describes the mapping of the streaming source element to the corresponding column in the in-application stream.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.record_column_updates.is_none()`.
    pub fn record_column_updates(&self) -> &[crate::types::RecordColumn] {
        self.record_column_updates.as_deref().unwrap_or_default()
    }
}
impl InputSchemaUpdate {
    /// Creates a new builder-style object to manufacture [`InputSchemaUpdate`](crate::types::InputSchemaUpdate).
    pub fn builder() -> crate::types::builders::InputSchemaUpdateBuilder {
        crate::types::builders::InputSchemaUpdateBuilder::default()
    }
}

/// A builder for [`InputSchemaUpdate`](crate::types::InputSchemaUpdate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InputSchemaUpdateBuilder {
    pub(crate) record_format_update: ::std::option::Option<crate::types::RecordFormat>,
    pub(crate) record_encoding_update: ::std::option::Option<::std::string::String>,
    pub(crate) record_column_updates: ::std::option::Option<::std::vec::Vec<crate::types::RecordColumn>>,
}
impl InputSchemaUpdateBuilder {
    /// <p>Specifies the format of the records on the streaming source.</p>
    pub fn record_format_update(mut self, input: crate::types::RecordFormat) -> Self {
        self.record_format_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the format of the records on the streaming source.</p>
    pub fn set_record_format_update(mut self, input: ::std::option::Option<crate::types::RecordFormat>) -> Self {
        self.record_format_update = input;
        self
    }
    /// <p>Specifies the format of the records on the streaming source.</p>
    pub fn get_record_format_update(&self) -> &::std::option::Option<crate::types::RecordFormat> {
        &self.record_format_update
    }
    /// <p>Specifies the encoding of the records in the streaming source; for example, UTF-8.</p>
    pub fn record_encoding_update(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.record_encoding_update = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the encoding of the records in the streaming source; for example, UTF-8.</p>
    pub fn set_record_encoding_update(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.record_encoding_update = input;
        self
    }
    /// <p>Specifies the encoding of the records in the streaming source; for example, UTF-8.</p>
    pub fn get_record_encoding_update(&self) -> &::std::option::Option<::std::string::String> {
        &self.record_encoding_update
    }
    /// Appends an item to `record_column_updates`.
    ///
    /// To override the contents of this collection use [`set_record_column_updates`](Self::set_record_column_updates).
    ///
    /// <p>A list of <code>RecordColumn</code> objects. Each object describes the mapping of the streaming source element to the corresponding column in the in-application stream.</p>
    pub fn record_column_updates(mut self, input: crate::types::RecordColumn) -> Self {
        let mut v = self.record_column_updates.unwrap_or_default();
        v.push(input);
        self.record_column_updates = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of <code>RecordColumn</code> objects. Each object describes the mapping of the streaming source element to the corresponding column in the in-application stream.</p>
    pub fn set_record_column_updates(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RecordColumn>>) -> Self {
        self.record_column_updates = input;
        self
    }
    /// <p>A list of <code>RecordColumn</code> objects. Each object describes the mapping of the streaming source element to the corresponding column in the in-application stream.</p>
    pub fn get_record_column_updates(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RecordColumn>> {
        &self.record_column_updates
    }
    /// Consumes the builder and constructs a [`InputSchemaUpdate`](crate::types::InputSchemaUpdate).
    pub fn build(self) -> crate::types::InputSchemaUpdate {
        crate::types::InputSchemaUpdate {
            record_format_update: self.record_format_update,
            record_encoding_update: self.record_encoding_update,
            record_column_updates: self.record_column_updates,
        }
    }
}
