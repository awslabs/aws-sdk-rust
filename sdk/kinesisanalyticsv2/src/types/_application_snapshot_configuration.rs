// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ApplicationSnapshotConfiguration {
    /// <p>Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.</p>
    #[doc(hidden)]
    pub snapshots_enabled: std::option::Option<bool>,
}
impl ApplicationSnapshotConfiguration {
    /// <p>Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.</p>
    pub fn snapshots_enabled(&self) -> std::option::Option<bool> {
        self.snapshots_enabled
    }
}
impl ApplicationSnapshotConfiguration {
    /// Creates a new builder-style object to manufacture [`ApplicationSnapshotConfiguration`](crate::types::ApplicationSnapshotConfiguration).
    pub fn builder() -> crate::types::builders::ApplicationSnapshotConfigurationBuilder {
        crate::types::builders::ApplicationSnapshotConfigurationBuilder::default()
    }
}

/// A builder for [`ApplicationSnapshotConfiguration`](crate::types::ApplicationSnapshotConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ApplicationSnapshotConfigurationBuilder {
    pub(crate) snapshots_enabled: std::option::Option<bool>,
}
impl ApplicationSnapshotConfigurationBuilder {
    /// <p>Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.</p>
    pub fn snapshots_enabled(mut self, input: bool) -> Self {
        self.snapshots_enabled = Some(input);
        self
    }
    /// <p>Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.</p>
    pub fn set_snapshots_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.snapshots_enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`ApplicationSnapshotConfiguration`](crate::types::ApplicationSnapshotConfiguration).
    pub fn build(self) -> crate::types::ApplicationSnapshotConfiguration {
        crate::types::ApplicationSnapshotConfiguration {
            snapshots_enabled: self.snapshots_enabled,
        }
    }
}
