// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides application summary information, including the application Amazon Resource Name (ARN), name, and status.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationSummary {
    /// <p>The name of the application.</p>
    pub application_name: ::std::string::String,
    /// <p>The ARN of the application.</p>
    pub application_arn: ::std::string::String,
    /// <p>The status of the application.</p>
    pub application_status: crate::types::ApplicationStatus,
    /// <p>Provides the current application version.</p>
    pub application_version_id: i64,
    /// <p>The runtime environment for the application.</p>
    pub runtime_environment: crate::types::RuntimeEnvironment,
    /// <p>For a Kinesis Data Analytics for Apache Flink application, the mode is <code>STREAMING</code>. For a Kinesis Data Analytics Studio notebook, it is <code>INTERACTIVE</code>.</p>
    pub application_mode: ::std::option::Option<crate::types::ApplicationMode>,
}
impl ApplicationSummary {
    /// <p>The name of the application.</p>
    pub fn application_name(&self) -> &str {
        use std::ops::Deref;
        self.application_name.deref()
    }
    /// <p>The ARN of the application.</p>
    pub fn application_arn(&self) -> &str {
        use std::ops::Deref;
        self.application_arn.deref()
    }
    /// <p>The status of the application.</p>
    pub fn application_status(&self) -> &crate::types::ApplicationStatus {
        &self.application_status
    }
    /// <p>Provides the current application version.</p>
    pub fn application_version_id(&self) -> i64 {
        self.application_version_id
    }
    /// <p>The runtime environment for the application.</p>
    pub fn runtime_environment(&self) -> &crate::types::RuntimeEnvironment {
        &self.runtime_environment
    }
    /// <p>For a Kinesis Data Analytics for Apache Flink application, the mode is <code>STREAMING</code>. For a Kinesis Data Analytics Studio notebook, it is <code>INTERACTIVE</code>.</p>
    pub fn application_mode(&self) -> ::std::option::Option<&crate::types::ApplicationMode> {
        self.application_mode.as_ref()
    }
}
impl ApplicationSummary {
    /// Creates a new builder-style object to manufacture [`ApplicationSummary`](crate::types::ApplicationSummary).
    pub fn builder() -> crate::types::builders::ApplicationSummaryBuilder {
        crate::types::builders::ApplicationSummaryBuilder::default()
    }
}

/// A builder for [`ApplicationSummary`](crate::types::ApplicationSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApplicationSummaryBuilder {
    pub(crate) application_name: ::std::option::Option<::std::string::String>,
    pub(crate) application_arn: ::std::option::Option<::std::string::String>,
    pub(crate) application_status: ::std::option::Option<crate::types::ApplicationStatus>,
    pub(crate) application_version_id: ::std::option::Option<i64>,
    pub(crate) runtime_environment: ::std::option::Option<crate::types::RuntimeEnvironment>,
    pub(crate) application_mode: ::std::option::Option<crate::types::ApplicationMode>,
}
impl ApplicationSummaryBuilder {
    /// <p>The name of the application.</p>
    /// This field is required.
    pub fn application_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the application.</p>
    pub fn set_application_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_name = input;
        self
    }
    /// <p>The name of the application.</p>
    pub fn get_application_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_name
    }
    /// <p>The ARN of the application.</p>
    /// This field is required.
    pub fn application_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the application.</p>
    pub fn set_application_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// <p>The ARN of the application.</p>
    pub fn get_application_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_arn
    }
    /// <p>The status of the application.</p>
    /// This field is required.
    pub fn application_status(mut self, input: crate::types::ApplicationStatus) -> Self {
        self.application_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the application.</p>
    pub fn set_application_status(mut self, input: ::std::option::Option<crate::types::ApplicationStatus>) -> Self {
        self.application_status = input;
        self
    }
    /// <p>The status of the application.</p>
    pub fn get_application_status(&self) -> &::std::option::Option<crate::types::ApplicationStatus> {
        &self.application_status
    }
    /// <p>Provides the current application version.</p>
    /// This field is required.
    pub fn application_version_id(mut self, input: i64) -> Self {
        self.application_version_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the current application version.</p>
    pub fn set_application_version_id(mut self, input: ::std::option::Option<i64>) -> Self {
        self.application_version_id = input;
        self
    }
    /// <p>Provides the current application version.</p>
    pub fn get_application_version_id(&self) -> &::std::option::Option<i64> {
        &self.application_version_id
    }
    /// <p>The runtime environment for the application.</p>
    /// This field is required.
    pub fn runtime_environment(mut self, input: crate::types::RuntimeEnvironment) -> Self {
        self.runtime_environment = ::std::option::Option::Some(input);
        self
    }
    /// <p>The runtime environment for the application.</p>
    pub fn set_runtime_environment(mut self, input: ::std::option::Option<crate::types::RuntimeEnvironment>) -> Self {
        self.runtime_environment = input;
        self
    }
    /// <p>The runtime environment for the application.</p>
    pub fn get_runtime_environment(&self) -> &::std::option::Option<crate::types::RuntimeEnvironment> {
        &self.runtime_environment
    }
    /// <p>For a Kinesis Data Analytics for Apache Flink application, the mode is <code>STREAMING</code>. For a Kinesis Data Analytics Studio notebook, it is <code>INTERACTIVE</code>.</p>
    pub fn application_mode(mut self, input: crate::types::ApplicationMode) -> Self {
        self.application_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>For a Kinesis Data Analytics for Apache Flink application, the mode is <code>STREAMING</code>. For a Kinesis Data Analytics Studio notebook, it is <code>INTERACTIVE</code>.</p>
    pub fn set_application_mode(mut self, input: ::std::option::Option<crate::types::ApplicationMode>) -> Self {
        self.application_mode = input;
        self
    }
    /// <p>For a Kinesis Data Analytics for Apache Flink application, the mode is <code>STREAMING</code>. For a Kinesis Data Analytics Studio notebook, it is <code>INTERACTIVE</code>.</p>
    pub fn get_application_mode(&self) -> &::std::option::Option<crate::types::ApplicationMode> {
        &self.application_mode
    }
    /// Consumes the builder and constructs a [`ApplicationSummary`](crate::types::ApplicationSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`application_name`](crate::types::builders::ApplicationSummaryBuilder::application_name)
    /// - [`application_arn`](crate::types::builders::ApplicationSummaryBuilder::application_arn)
    /// - [`application_status`](crate::types::builders::ApplicationSummaryBuilder::application_status)
    /// - [`application_version_id`](crate::types::builders::ApplicationSummaryBuilder::application_version_id)
    /// - [`runtime_environment`](crate::types::builders::ApplicationSummaryBuilder::runtime_environment)
    pub fn build(self) -> ::std::result::Result<crate::types::ApplicationSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ApplicationSummary {
            application_name: self.application_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_name",
                    "application_name was not specified but it is required when building ApplicationSummary",
                )
            })?,
            application_arn: self.application_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_arn",
                    "application_arn was not specified but it is required when building ApplicationSummary",
                )
            })?,
            application_status: self.application_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_status",
                    "application_status was not specified but it is required when building ApplicationSummary",
                )
            })?,
            application_version_id: self.application_version_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_version_id",
                    "application_version_id was not specified but it is required when building ApplicationSummary",
                )
            })?,
            runtime_environment: self.runtime_environment.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "runtime_environment",
                    "runtime_environment was not specified but it is required when building ApplicationSummary",
                )
            })?,
            application_mode: self.application_mode,
        })
    }
}
