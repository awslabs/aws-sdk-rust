// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationSnapshotConfigurationDescription {
    /// <p>Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.</p>
    pub snapshots_enabled: bool,
}
impl ApplicationSnapshotConfigurationDescription {
    /// <p>Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.</p>
    pub fn snapshots_enabled(&self) -> bool {
        self.snapshots_enabled
    }
}
impl ApplicationSnapshotConfigurationDescription {
    /// Creates a new builder-style object to manufacture [`ApplicationSnapshotConfigurationDescription`](crate::types::ApplicationSnapshotConfigurationDescription).
    pub fn builder() -> crate::types::builders::ApplicationSnapshotConfigurationDescriptionBuilder {
        crate::types::builders::ApplicationSnapshotConfigurationDescriptionBuilder::default()
    }
}

/// A builder for [`ApplicationSnapshotConfigurationDescription`](crate::types::ApplicationSnapshotConfigurationDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApplicationSnapshotConfigurationDescriptionBuilder {
    pub(crate) snapshots_enabled: ::std::option::Option<bool>,
}
impl ApplicationSnapshotConfigurationDescriptionBuilder {
    /// <p>Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.</p>
    /// This field is required.
    pub fn snapshots_enabled(mut self, input: bool) -> Self {
        self.snapshots_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.</p>
    pub fn set_snapshots_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.snapshots_enabled = input;
        self
    }
    /// <p>Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.</p>
    pub fn get_snapshots_enabled(&self) -> &::std::option::Option<bool> {
        &self.snapshots_enabled
    }
    /// Consumes the builder and constructs a [`ApplicationSnapshotConfigurationDescription`](crate::types::ApplicationSnapshotConfigurationDescription).
    /// This method will fail if any of the following fields are not set:
    /// - [`snapshots_enabled`](crate::types::builders::ApplicationSnapshotConfigurationDescriptionBuilder::snapshots_enabled)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ApplicationSnapshotConfigurationDescription, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ApplicationSnapshotConfigurationDescription {
            snapshots_enabled: self.snapshots_enabled.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "snapshots_enabled",
                    "snapshots_enabled was not specified but it is required when building ApplicationSnapshotConfigurationDescription",
                )
            })?,
        })
    }
}
