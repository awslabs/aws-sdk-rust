// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>For a Kinesis Data Analytics application provides a description of an Amazon S3 object, including the Amazon Resource Name (ARN) of the S3 bucket, the name of the Amazon S3 object that contains the data, and the version number of the Amazon S3 object that contains the data. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3ContentLocation {
    /// <p>The Amazon Resource Name (ARN) for the S3 bucket containing the application code.</p>
    #[doc(hidden)]
    pub bucket_arn: std::option::Option<std::string::String>,
    /// <p>The file key for the object containing the application code.</p>
    #[doc(hidden)]
    pub file_key: std::option::Option<std::string::String>,
    /// <p>The version of the object containing the application code.</p>
    #[doc(hidden)]
    pub object_version: std::option::Option<std::string::String>,
}
impl S3ContentLocation {
    /// <p>The Amazon Resource Name (ARN) for the S3 bucket containing the application code.</p>
    pub fn bucket_arn(&self) -> std::option::Option<&str> {
        self.bucket_arn.as_deref()
    }
    /// <p>The file key for the object containing the application code.</p>
    pub fn file_key(&self) -> std::option::Option<&str> {
        self.file_key.as_deref()
    }
    /// <p>The version of the object containing the application code.</p>
    pub fn object_version(&self) -> std::option::Option<&str> {
        self.object_version.as_deref()
    }
}
impl S3ContentLocation {
    /// Creates a new builder-style object to manufacture [`S3ContentLocation`](crate::types::S3ContentLocation).
    pub fn builder() -> crate::types::builders::S3ContentLocationBuilder {
        crate::types::builders::S3ContentLocationBuilder::default()
    }
}

/// A builder for [`S3ContentLocation`](crate::types::S3ContentLocation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3ContentLocationBuilder {
    pub(crate) bucket_arn: std::option::Option<std::string::String>,
    pub(crate) file_key: std::option::Option<std::string::String>,
    pub(crate) object_version: std::option::Option<std::string::String>,
}
impl S3ContentLocationBuilder {
    /// <p>The Amazon Resource Name (ARN) for the S3 bucket containing the application code.</p>
    pub fn bucket_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the S3 bucket containing the application code.</p>
    pub fn set_bucket_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket_arn = input;
        self
    }
    /// <p>The file key for the object containing the application code.</p>
    pub fn file_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.file_key = Some(input.into());
        self
    }
    /// <p>The file key for the object containing the application code.</p>
    pub fn set_file_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.file_key = input;
        self
    }
    /// <p>The version of the object containing the application code.</p>
    pub fn object_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.object_version = Some(input.into());
        self
    }
    /// <p>The version of the object containing the application code.</p>
    pub fn set_object_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.object_version = input;
        self
    }
    /// Consumes the builder and constructs a [`S3ContentLocation`](crate::types::S3ContentLocation).
    pub fn build(self) -> crate::types::S3ContentLocation {
        crate::types::S3ContentLocation {
            bucket_arn: self.bucket_arn,
            file_key: self.file_key,
            object_version: self.object_version,
        }
    }
}
