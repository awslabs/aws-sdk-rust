// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes updates to an application's configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApplicationConfigurationUpdate {
    /// <p>Describes updates to a SQL-based Kinesis Data Analytics application's configuration.</p>
    pub sql_application_configuration_update: ::std::option::Option<crate::types::SqlApplicationConfigurationUpdate>,
    /// <p>Describes updates to an application's code configuration.</p>
    pub application_code_configuration_update: ::std::option::Option<crate::types::ApplicationCodeConfigurationUpdate>,
    /// <p>Describes updates to a Flink-based Kinesis Data Analytics application's configuration.</p>
    pub flink_application_configuration_update: ::std::option::Option<crate::types::FlinkApplicationConfigurationUpdate>,
    /// <p>Describes updates to the environment properties for a Flink-based Kinesis Data Analytics application.</p>
    pub environment_property_updates: ::std::option::Option<crate::types::EnvironmentPropertyUpdates>,
    /// <p>Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.</p>
    pub application_snapshot_configuration_update: ::std::option::Option<crate::types::ApplicationSnapshotConfigurationUpdate>,
    /// <p>Updates to the array of descriptions of VPC configurations available to the application.</p>
    pub vpc_configuration_updates: ::std::option::Option<::std::vec::Vec<crate::types::VpcConfigurationUpdate>>,
    /// <p>Updates to the configuration of a Kinesis Data Analytics Studio notebook.</p>
    pub zeppelin_application_configuration_update: ::std::option::Option<crate::types::ZeppelinApplicationConfigurationUpdate>,
}
impl ApplicationConfigurationUpdate {
    /// <p>Describes updates to a SQL-based Kinesis Data Analytics application's configuration.</p>
    pub fn sql_application_configuration_update(&self) -> ::std::option::Option<&crate::types::SqlApplicationConfigurationUpdate> {
        self.sql_application_configuration_update.as_ref()
    }
    /// <p>Describes updates to an application's code configuration.</p>
    pub fn application_code_configuration_update(&self) -> ::std::option::Option<&crate::types::ApplicationCodeConfigurationUpdate> {
        self.application_code_configuration_update.as_ref()
    }
    /// <p>Describes updates to a Flink-based Kinesis Data Analytics application's configuration.</p>
    pub fn flink_application_configuration_update(&self) -> ::std::option::Option<&crate::types::FlinkApplicationConfigurationUpdate> {
        self.flink_application_configuration_update.as_ref()
    }
    /// <p>Describes updates to the environment properties for a Flink-based Kinesis Data Analytics application.</p>
    pub fn environment_property_updates(&self) -> ::std::option::Option<&crate::types::EnvironmentPropertyUpdates> {
        self.environment_property_updates.as_ref()
    }
    /// <p>Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.</p>
    pub fn application_snapshot_configuration_update(&self) -> ::std::option::Option<&crate::types::ApplicationSnapshotConfigurationUpdate> {
        self.application_snapshot_configuration_update.as_ref()
    }
    /// <p>Updates to the array of descriptions of VPC configurations available to the application.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vpc_configuration_updates.is_none()`.
    pub fn vpc_configuration_updates(&self) -> &[crate::types::VpcConfigurationUpdate] {
        self.vpc_configuration_updates.as_deref().unwrap_or_default()
    }
    /// <p>Updates to the configuration of a Kinesis Data Analytics Studio notebook.</p>
    pub fn zeppelin_application_configuration_update(&self) -> ::std::option::Option<&crate::types::ZeppelinApplicationConfigurationUpdate> {
        self.zeppelin_application_configuration_update.as_ref()
    }
}
impl ApplicationConfigurationUpdate {
    /// Creates a new builder-style object to manufacture [`ApplicationConfigurationUpdate`](crate::types::ApplicationConfigurationUpdate).
    pub fn builder() -> crate::types::builders::ApplicationConfigurationUpdateBuilder {
        crate::types::builders::ApplicationConfigurationUpdateBuilder::default()
    }
}

/// A builder for [`ApplicationConfigurationUpdate`](crate::types::ApplicationConfigurationUpdate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApplicationConfigurationUpdateBuilder {
    pub(crate) sql_application_configuration_update: ::std::option::Option<crate::types::SqlApplicationConfigurationUpdate>,
    pub(crate) application_code_configuration_update: ::std::option::Option<crate::types::ApplicationCodeConfigurationUpdate>,
    pub(crate) flink_application_configuration_update: ::std::option::Option<crate::types::FlinkApplicationConfigurationUpdate>,
    pub(crate) environment_property_updates: ::std::option::Option<crate::types::EnvironmentPropertyUpdates>,
    pub(crate) application_snapshot_configuration_update: ::std::option::Option<crate::types::ApplicationSnapshotConfigurationUpdate>,
    pub(crate) vpc_configuration_updates: ::std::option::Option<::std::vec::Vec<crate::types::VpcConfigurationUpdate>>,
    pub(crate) zeppelin_application_configuration_update: ::std::option::Option<crate::types::ZeppelinApplicationConfigurationUpdate>,
}
impl ApplicationConfigurationUpdateBuilder {
    /// <p>Describes updates to a SQL-based Kinesis Data Analytics application's configuration.</p>
    pub fn sql_application_configuration_update(mut self, input: crate::types::SqlApplicationConfigurationUpdate) -> Self {
        self.sql_application_configuration_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes updates to a SQL-based Kinesis Data Analytics application's configuration.</p>
    pub fn set_sql_application_configuration_update(mut self, input: ::std::option::Option<crate::types::SqlApplicationConfigurationUpdate>) -> Self {
        self.sql_application_configuration_update = input;
        self
    }
    /// <p>Describes updates to a SQL-based Kinesis Data Analytics application's configuration.</p>
    pub fn get_sql_application_configuration_update(&self) -> &::std::option::Option<crate::types::SqlApplicationConfigurationUpdate> {
        &self.sql_application_configuration_update
    }
    /// <p>Describes updates to an application's code configuration.</p>
    pub fn application_code_configuration_update(mut self, input: crate::types::ApplicationCodeConfigurationUpdate) -> Self {
        self.application_code_configuration_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes updates to an application's code configuration.</p>
    pub fn set_application_code_configuration_update(
        mut self,
        input: ::std::option::Option<crate::types::ApplicationCodeConfigurationUpdate>,
    ) -> Self {
        self.application_code_configuration_update = input;
        self
    }
    /// <p>Describes updates to an application's code configuration.</p>
    pub fn get_application_code_configuration_update(&self) -> &::std::option::Option<crate::types::ApplicationCodeConfigurationUpdate> {
        &self.application_code_configuration_update
    }
    /// <p>Describes updates to a Flink-based Kinesis Data Analytics application's configuration.</p>
    pub fn flink_application_configuration_update(mut self, input: crate::types::FlinkApplicationConfigurationUpdate) -> Self {
        self.flink_application_configuration_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes updates to a Flink-based Kinesis Data Analytics application's configuration.</p>
    pub fn set_flink_application_configuration_update(
        mut self,
        input: ::std::option::Option<crate::types::FlinkApplicationConfigurationUpdate>,
    ) -> Self {
        self.flink_application_configuration_update = input;
        self
    }
    /// <p>Describes updates to a Flink-based Kinesis Data Analytics application's configuration.</p>
    pub fn get_flink_application_configuration_update(&self) -> &::std::option::Option<crate::types::FlinkApplicationConfigurationUpdate> {
        &self.flink_application_configuration_update
    }
    /// <p>Describes updates to the environment properties for a Flink-based Kinesis Data Analytics application.</p>
    pub fn environment_property_updates(mut self, input: crate::types::EnvironmentPropertyUpdates) -> Self {
        self.environment_property_updates = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes updates to the environment properties for a Flink-based Kinesis Data Analytics application.</p>
    pub fn set_environment_property_updates(mut self, input: ::std::option::Option<crate::types::EnvironmentPropertyUpdates>) -> Self {
        self.environment_property_updates = input;
        self
    }
    /// <p>Describes updates to the environment properties for a Flink-based Kinesis Data Analytics application.</p>
    pub fn get_environment_property_updates(&self) -> &::std::option::Option<crate::types::EnvironmentPropertyUpdates> {
        &self.environment_property_updates
    }
    /// <p>Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.</p>
    pub fn application_snapshot_configuration_update(mut self, input: crate::types::ApplicationSnapshotConfigurationUpdate) -> Self {
        self.application_snapshot_configuration_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.</p>
    pub fn set_application_snapshot_configuration_update(
        mut self,
        input: ::std::option::Option<crate::types::ApplicationSnapshotConfigurationUpdate>,
    ) -> Self {
        self.application_snapshot_configuration_update = input;
        self
    }
    /// <p>Describes whether snapshots are enabled for a Flink-based Kinesis Data Analytics application.</p>
    pub fn get_application_snapshot_configuration_update(&self) -> &::std::option::Option<crate::types::ApplicationSnapshotConfigurationUpdate> {
        &self.application_snapshot_configuration_update
    }
    /// Appends an item to `vpc_configuration_updates`.
    ///
    /// To override the contents of this collection use [`set_vpc_configuration_updates`](Self::set_vpc_configuration_updates).
    ///
    /// <p>Updates to the array of descriptions of VPC configurations available to the application.</p>
    pub fn vpc_configuration_updates(mut self, input: crate::types::VpcConfigurationUpdate) -> Self {
        let mut v = self.vpc_configuration_updates.unwrap_or_default();
        v.push(input);
        self.vpc_configuration_updates = ::std::option::Option::Some(v);
        self
    }
    /// <p>Updates to the array of descriptions of VPC configurations available to the application.</p>
    pub fn set_vpc_configuration_updates(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VpcConfigurationUpdate>>) -> Self {
        self.vpc_configuration_updates = input;
        self
    }
    /// <p>Updates to the array of descriptions of VPC configurations available to the application.</p>
    pub fn get_vpc_configuration_updates(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VpcConfigurationUpdate>> {
        &self.vpc_configuration_updates
    }
    /// <p>Updates to the configuration of a Kinesis Data Analytics Studio notebook.</p>
    pub fn zeppelin_application_configuration_update(mut self, input: crate::types::ZeppelinApplicationConfigurationUpdate) -> Self {
        self.zeppelin_application_configuration_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>Updates to the configuration of a Kinesis Data Analytics Studio notebook.</p>
    pub fn set_zeppelin_application_configuration_update(
        mut self,
        input: ::std::option::Option<crate::types::ZeppelinApplicationConfigurationUpdate>,
    ) -> Self {
        self.zeppelin_application_configuration_update = input;
        self
    }
    /// <p>Updates to the configuration of a Kinesis Data Analytics Studio notebook.</p>
    pub fn get_zeppelin_application_configuration_update(&self) -> &::std::option::Option<crate::types::ZeppelinApplicationConfigurationUpdate> {
        &self.zeppelin_application_configuration_update
    }
    /// Consumes the builder and constructs a [`ApplicationConfigurationUpdate`](crate::types::ApplicationConfigurationUpdate).
    pub fn build(self) -> crate::types::ApplicationConfigurationUpdate {
        crate::types::ApplicationConfigurationUpdate {
            sql_application_configuration_update: self.sql_application_configuration_update,
            application_code_configuration_update: self.application_code_configuration_update,
            flink_application_configuration_update: self.flink_application_configuration_update,
            environment_property_updates: self.environment_property_updates,
            application_snapshot_configuration_update: self.application_snapshot_configuration_update,
            vpc_configuration_updates: self.vpc_configuration_updates,
            zeppelin_application_configuration_update: self.zeppelin_application_configuration_update,
        }
    }
}
