// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>For a SQL-based Kinesis Data Analytics application, describes a processor that is used to preprocess the records in the stream before being processed by your application code. Currently, the only input processor available is <a href="https://docs.aws.amazon.com/lambda/">Amazon Lambda</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InputProcessingConfiguration {
    /// <p>The <code>InputLambdaProcessor</code> that is used to preprocess the records in the stream before being processed by your application code.</p>
    #[doc(hidden)]
    pub input_lambda_processor: std::option::Option<crate::types::InputLambdaProcessor>,
}
impl InputProcessingConfiguration {
    /// <p>The <code>InputLambdaProcessor</code> that is used to preprocess the records in the stream before being processed by your application code.</p>
    pub fn input_lambda_processor(
        &self,
    ) -> std::option::Option<&crate::types::InputLambdaProcessor> {
        self.input_lambda_processor.as_ref()
    }
}
impl InputProcessingConfiguration {
    /// Creates a new builder-style object to manufacture [`InputProcessingConfiguration`](crate::types::InputProcessingConfiguration).
    pub fn builder() -> crate::types::builders::InputProcessingConfigurationBuilder {
        crate::types::builders::InputProcessingConfigurationBuilder::default()
    }
}

/// A builder for [`InputProcessingConfiguration`](crate::types::InputProcessingConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InputProcessingConfigurationBuilder {
    pub(crate) input_lambda_processor: std::option::Option<crate::types::InputLambdaProcessor>,
}
impl InputProcessingConfigurationBuilder {
    /// <p>The <code>InputLambdaProcessor</code> that is used to preprocess the records in the stream before being processed by your application code.</p>
    pub fn input_lambda_processor(mut self, input: crate::types::InputLambdaProcessor) -> Self {
        self.input_lambda_processor = Some(input);
        self
    }
    /// <p>The <code>InputLambdaProcessor</code> that is used to preprocess the records in the stream before being processed by your application code.</p>
    pub fn set_input_lambda_processor(
        mut self,
        input: std::option::Option<crate::types::InputLambdaProcessor>,
    ) -> Self {
        self.input_lambda_processor = input;
        self
    }
    /// Consumes the builder and constructs a [`InputProcessingConfiguration`](crate::types::InputProcessingConfiguration).
    pub fn build(self) -> crate::types::InputProcessingConfiguration {
        crate::types::InputProcessingConfiguration {
            input_lambda_processor: self.input_lambda_processor,
        }
    }
}
