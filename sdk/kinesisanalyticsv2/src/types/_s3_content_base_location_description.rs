// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The description of the S3 base location that holds the application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct S3ContentBaseLocationDescription {
    /// <p>The Amazon Resource Name (ARN) of the S3 bucket.</p>
    pub bucket_arn: ::std::string::String,
    /// <p>The base path for the S3 bucket.</p>
    pub base_path: ::std::option::Option<::std::string::String>,
}
impl S3ContentBaseLocationDescription {
    /// <p>The Amazon Resource Name (ARN) of the S3 bucket.</p>
    pub fn bucket_arn(&self) -> &str {
        use std::ops::Deref;
        self.bucket_arn.deref()
    }
    /// <p>The base path for the S3 bucket.</p>
    pub fn base_path(&self) -> ::std::option::Option<&str> {
        self.base_path.as_deref()
    }
}
impl S3ContentBaseLocationDescription {
    /// Creates a new builder-style object to manufacture [`S3ContentBaseLocationDescription`](crate::types::S3ContentBaseLocationDescription).
    pub fn builder() -> crate::types::builders::S3ContentBaseLocationDescriptionBuilder {
        crate::types::builders::S3ContentBaseLocationDescriptionBuilder::default()
    }
}

/// A builder for [`S3ContentBaseLocationDescription`](crate::types::S3ContentBaseLocationDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct S3ContentBaseLocationDescriptionBuilder {
    pub(crate) bucket_arn: ::std::option::Option<::std::string::String>,
    pub(crate) base_path: ::std::option::Option<::std::string::String>,
}
impl S3ContentBaseLocationDescriptionBuilder {
    /// <p>The Amazon Resource Name (ARN) of the S3 bucket.</p>
    /// This field is required.
    pub fn bucket_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the S3 bucket.</p>
    pub fn set_bucket_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the S3 bucket.</p>
    pub fn get_bucket_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_arn
    }
    /// <p>The base path for the S3 bucket.</p>
    pub fn base_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.base_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The base path for the S3 bucket.</p>
    pub fn set_base_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.base_path = input;
        self
    }
    /// <p>The base path for the S3 bucket.</p>
    pub fn get_base_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.base_path
    }
    /// Consumes the builder and constructs a [`S3ContentBaseLocationDescription`](crate::types::S3ContentBaseLocationDescription).
    /// This method will fail if any of the following fields are not set:
    /// - [`bucket_arn`](crate::types::builders::S3ContentBaseLocationDescriptionBuilder::bucket_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::S3ContentBaseLocationDescription, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::S3ContentBaseLocationDescription {
            bucket_arn: self.bucket_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "bucket_arn",
                    "bucket_arn was not specified but it is required when building S3ContentBaseLocationDescription",
                )
            })?,
            base_path: self.base_path,
        })
    }
}
