// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>For a SQL-based Kinesis Data Analytics application, provides additional mapping information when the record format uses delimiters, such as CSV. For example, the following sample records use CSV format, where the records use the <i>'\n'</i> as the row delimiter and a comma (",") as the column delimiter: </p>
/// <p> <code>"name1", "address1"</code> </p>
/// <p> <code>"name2", "address2"</code> </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CsvMappingParameters {
    /// <p>The row delimiter. For example, in a CSV format, <i>'\n'</i> is the typical row delimiter.</p>
    #[doc(hidden)]
    pub record_row_delimiter: std::option::Option<std::string::String>,
    /// <p>The column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.</p>
    #[doc(hidden)]
    pub record_column_delimiter: std::option::Option<std::string::String>,
}
impl CsvMappingParameters {
    /// <p>The row delimiter. For example, in a CSV format, <i>'\n'</i> is the typical row delimiter.</p>
    pub fn record_row_delimiter(&self) -> std::option::Option<&str> {
        self.record_row_delimiter.as_deref()
    }
    /// <p>The column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.</p>
    pub fn record_column_delimiter(&self) -> std::option::Option<&str> {
        self.record_column_delimiter.as_deref()
    }
}
impl CsvMappingParameters {
    /// Creates a new builder-style object to manufacture [`CsvMappingParameters`](crate::types::CsvMappingParameters).
    pub fn builder() -> crate::types::builders::CsvMappingParametersBuilder {
        crate::types::builders::CsvMappingParametersBuilder::default()
    }
}

/// A builder for [`CsvMappingParameters`](crate::types::CsvMappingParameters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CsvMappingParametersBuilder {
    pub(crate) record_row_delimiter: std::option::Option<std::string::String>,
    pub(crate) record_column_delimiter: std::option::Option<std::string::String>,
}
impl CsvMappingParametersBuilder {
    /// <p>The row delimiter. For example, in a CSV format, <i>'\n'</i> is the typical row delimiter.</p>
    pub fn record_row_delimiter(mut self, input: impl Into<std::string::String>) -> Self {
        self.record_row_delimiter = Some(input.into());
        self
    }
    /// <p>The row delimiter. For example, in a CSV format, <i>'\n'</i> is the typical row delimiter.</p>
    pub fn set_record_row_delimiter(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.record_row_delimiter = input;
        self
    }
    /// <p>The column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.</p>
    pub fn record_column_delimiter(mut self, input: impl Into<std::string::String>) -> Self {
        self.record_column_delimiter = Some(input.into());
        self
    }
    /// <p>The column delimiter. For example, in a CSV format, a comma (",") is the typical column delimiter.</p>
    pub fn set_record_column_delimiter(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.record_column_delimiter = input;
        self
    }
    /// Consumes the builder and constructs a [`CsvMappingParameters`](crate::types::CsvMappingParameters).
    pub fn build(self) -> crate::types::CsvMappingParameters {
        crate::types::CsvMappingParameters {
            record_row_delimiter: self.record_row_delimiter,
            record_column_delimiter: self.record_column_delimiter,
        }
    }
}
