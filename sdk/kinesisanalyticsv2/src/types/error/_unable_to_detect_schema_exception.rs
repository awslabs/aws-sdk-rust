// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data format is not valid. Kinesis Data Analytics cannot detect the schema for the given streaming source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UnableToDetectSchemaException {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub message: std::option::Option<std::string::String>,
    /// <p>Raw stream data that was sampled to infer the schema.</p>
    #[doc(hidden)]
    pub raw_input_records: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Stream data that was modified by the processor specified in the <code>InputProcessingConfiguration</code> parameter. </p>
    #[doc(hidden)]
    pub processed_input_records: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) meta: aws_smithy_types::error::ErrorMetadata,
}
impl UnableToDetectSchemaException {
    /// <p>Raw stream data that was sampled to infer the schema.</p>
    pub fn raw_input_records(&self) -> std::option::Option<&[std::string::String]> {
        self.raw_input_records.as_deref()
    }
    /// <p>Stream data that was modified by the processor specified in the <code>InputProcessingConfiguration</code> parameter. </p>
    pub fn processed_input_records(&self) -> std::option::Option<&[std::string::String]> {
        self.processed_input_records.as_deref()
    }
}
impl UnableToDetectSchemaException {
    /// Returns the error message.
    pub fn message(&self) -> std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl std::fmt::Display for UnableToDetectSchemaException {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "UnableToDetectSchemaException")?;
        if let Some(inner_1) = &self.message {
            {
                write!(f, ": {}", inner_1)?;
            }
        }
        Ok(())
    }
}
impl std::error::Error for UnableToDetectSchemaException {}
impl aws_http::request_id::RequestId for crate::types::error::UnableToDetectSchemaException {
    fn request_id(&self) -> Option<&str> {
        use aws_smithy_types::error::metadata::ProvideErrorMetadata;
        self.meta().request_id()
    }
}
impl aws_smithy_types::error::metadata::ProvideErrorMetadata for UnableToDetectSchemaException {
    fn meta(&self) -> &aws_smithy_types::error::ErrorMetadata {
        &self.meta
    }
}
impl UnableToDetectSchemaException {
    /// Creates a new builder-style object to manufacture [`UnableToDetectSchemaException`](crate::types::error::UnableToDetectSchemaException).
    pub fn builder() -> crate::types::error::builders::UnableToDetectSchemaExceptionBuilder {
        crate::types::error::builders::UnableToDetectSchemaExceptionBuilder::default()
    }
}

/// A builder for [`UnableToDetectSchemaException`](crate::types::error::UnableToDetectSchemaException).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UnableToDetectSchemaExceptionBuilder {
    pub(crate) message: std::option::Option<std::string::String>,
    pub(crate) raw_input_records: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) processed_input_records: std::option::Option<std::vec::Vec<std::string::String>>,
    meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
}
impl UnableToDetectSchemaExceptionBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn message(mut self, input: impl Into<std::string::String>) -> Self {
        self.message = Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// Appends an item to `raw_input_records`.
    ///
    /// To override the contents of this collection use [`set_raw_input_records`](Self::set_raw_input_records).
    ///
    /// <p>Raw stream data that was sampled to infer the schema.</p>
    pub fn raw_input_records(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.raw_input_records.unwrap_or_default();
        v.push(input.into());
        self.raw_input_records = Some(v);
        self
    }
    /// <p>Raw stream data that was sampled to infer the schema.</p>
    pub fn set_raw_input_records(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.raw_input_records = input;
        self
    }
    /// Appends an item to `processed_input_records`.
    ///
    /// To override the contents of this collection use [`set_processed_input_records`](Self::set_processed_input_records).
    ///
    /// <p>Stream data that was modified by the processor specified in the <code>InputProcessingConfiguration</code> parameter. </p>
    pub fn processed_input_records(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.processed_input_records.unwrap_or_default();
        v.push(input.into());
        self.processed_input_records = Some(v);
        self
    }
    /// <p>Stream data that was modified by the processor specified in the <code>InputProcessingConfiguration</code> parameter. </p>
    pub fn set_processed_input_records(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.processed_input_records = input;
        self
    }
    /// Sets error metadata
    pub fn meta(mut self, meta: aws_smithy_types::error::ErrorMetadata) -> Self {
        self.meta = Some(meta);
        self
    }

    /// Sets error metadata
    pub fn set_meta(
        &mut self,
        meta: std::option::Option<aws_smithy_types::error::ErrorMetadata>,
    ) -> &mut Self {
        self.meta = meta;
        self
    }
    /// Consumes the builder and constructs a [`UnableToDetectSchemaException`](crate::types::error::UnableToDetectSchemaException).
    pub fn build(self) -> crate::types::error::UnableToDetectSchemaException {
        crate::types::error::UnableToDetectSchemaException {
            message: self.message,
            raw_input_records: self.raw_input_records,
            processed_input_records: self.processed_input_records,
            meta: self.meta.unwrap_or_default(),
        }
    }
}
