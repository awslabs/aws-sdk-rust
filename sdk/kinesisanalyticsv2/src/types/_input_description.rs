// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the application input configuration for a SQL-based Kinesis Data Analytics application. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InputDescription {
    /// <p>The input ID that is associated with the application input. This is the ID that Kinesis Data Analytics assigns to each input configuration that you add to your application. </p>
    pub input_id: ::std::option::Option<::std::string::String>,
    /// <p>The in-application name prefix.</p>
    pub name_prefix: ::std::option::Option<::std::string::String>,
    /// <p>Returns the in-application stream names that are mapped to the stream source. </p>
    pub in_app_stream_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The description of the preprocessor that executes on records in this input before the application's code is run. </p>
    pub input_processing_configuration_description: ::std::option::Option<crate::types::InputProcessingConfigurationDescription>,
    /// <p>If a Kinesis data stream is configured as a streaming source, provides the Kinesis data stream's Amazon Resource Name (ARN). </p>
    pub kinesis_streams_input_description: ::std::option::Option<crate::types::KinesisStreamsInputDescription>,
    /// <p>If a Kinesis Data Firehose delivery stream is configured as a streaming source, provides the delivery stream's ARN. </p>
    pub kinesis_firehose_input_description: ::std::option::Option<crate::types::KinesisFirehoseInputDescription>,
    /// <p>Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created. </p>
    pub input_schema: ::std::option::Option<crate::types::SourceSchema>,
    /// <p>Describes the configured parallelism (number of in-application streams mapped to the streaming source). </p>
    pub input_parallelism: ::std::option::Option<crate::types::InputParallelism>,
    /// <p>The point at which the application is configured to read from the input stream.</p>
    pub input_starting_position_configuration: ::std::option::Option<crate::types::InputStartingPositionConfiguration>,
}
impl InputDescription {
    /// <p>The input ID that is associated with the application input. This is the ID that Kinesis Data Analytics assigns to each input configuration that you add to your application. </p>
    pub fn input_id(&self) -> ::std::option::Option<&str> {
        self.input_id.as_deref()
    }
    /// <p>The in-application name prefix.</p>
    pub fn name_prefix(&self) -> ::std::option::Option<&str> {
        self.name_prefix.as_deref()
    }
    /// <p>Returns the in-application stream names that are mapped to the stream source. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.in_app_stream_names.is_none()`.
    pub fn in_app_stream_names(&self) -> &[::std::string::String] {
        self.in_app_stream_names.as_deref().unwrap_or_default()
    }
    /// <p>The description of the preprocessor that executes on records in this input before the application's code is run. </p>
    pub fn input_processing_configuration_description(&self) -> ::std::option::Option<&crate::types::InputProcessingConfigurationDescription> {
        self.input_processing_configuration_description.as_ref()
    }
    /// <p>If a Kinesis data stream is configured as a streaming source, provides the Kinesis data stream's Amazon Resource Name (ARN). </p>
    pub fn kinesis_streams_input_description(&self) -> ::std::option::Option<&crate::types::KinesisStreamsInputDescription> {
        self.kinesis_streams_input_description.as_ref()
    }
    /// <p>If a Kinesis Data Firehose delivery stream is configured as a streaming source, provides the delivery stream's ARN. </p>
    pub fn kinesis_firehose_input_description(&self) -> ::std::option::Option<&crate::types::KinesisFirehoseInputDescription> {
        self.kinesis_firehose_input_description.as_ref()
    }
    /// <p>Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created. </p>
    pub fn input_schema(&self) -> ::std::option::Option<&crate::types::SourceSchema> {
        self.input_schema.as_ref()
    }
    /// <p>Describes the configured parallelism (number of in-application streams mapped to the streaming source). </p>
    pub fn input_parallelism(&self) -> ::std::option::Option<&crate::types::InputParallelism> {
        self.input_parallelism.as_ref()
    }
    /// <p>The point at which the application is configured to read from the input stream.</p>
    pub fn input_starting_position_configuration(&self) -> ::std::option::Option<&crate::types::InputStartingPositionConfiguration> {
        self.input_starting_position_configuration.as_ref()
    }
}
impl InputDescription {
    /// Creates a new builder-style object to manufacture [`InputDescription`](crate::types::InputDescription).
    pub fn builder() -> crate::types::builders::InputDescriptionBuilder {
        crate::types::builders::InputDescriptionBuilder::default()
    }
}

/// A builder for [`InputDescription`](crate::types::InputDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InputDescriptionBuilder {
    pub(crate) input_id: ::std::option::Option<::std::string::String>,
    pub(crate) name_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) in_app_stream_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) input_processing_configuration_description: ::std::option::Option<crate::types::InputProcessingConfigurationDescription>,
    pub(crate) kinesis_streams_input_description: ::std::option::Option<crate::types::KinesisStreamsInputDescription>,
    pub(crate) kinesis_firehose_input_description: ::std::option::Option<crate::types::KinesisFirehoseInputDescription>,
    pub(crate) input_schema: ::std::option::Option<crate::types::SourceSchema>,
    pub(crate) input_parallelism: ::std::option::Option<crate::types::InputParallelism>,
    pub(crate) input_starting_position_configuration: ::std::option::Option<crate::types::InputStartingPositionConfiguration>,
}
impl InputDescriptionBuilder {
    /// <p>The input ID that is associated with the application input. This is the ID that Kinesis Data Analytics assigns to each input configuration that you add to your application. </p>
    pub fn input_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The input ID that is associated with the application input. This is the ID that Kinesis Data Analytics assigns to each input configuration that you add to your application. </p>
    pub fn set_input_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_id = input;
        self
    }
    /// <p>The input ID that is associated with the application input. This is the ID that Kinesis Data Analytics assigns to each input configuration that you add to your application. </p>
    pub fn get_input_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_id
    }
    /// <p>The in-application name prefix.</p>
    pub fn name_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The in-application name prefix.</p>
    pub fn set_name_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name_prefix = input;
        self
    }
    /// <p>The in-application name prefix.</p>
    pub fn get_name_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.name_prefix
    }
    /// Appends an item to `in_app_stream_names`.
    ///
    /// To override the contents of this collection use [`set_in_app_stream_names`](Self::set_in_app_stream_names).
    ///
    /// <p>Returns the in-application stream names that are mapped to the stream source. </p>
    pub fn in_app_stream_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.in_app_stream_names.unwrap_or_default();
        v.push(input.into());
        self.in_app_stream_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>Returns the in-application stream names that are mapped to the stream source. </p>
    pub fn set_in_app_stream_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.in_app_stream_names = input;
        self
    }
    /// <p>Returns the in-application stream names that are mapped to the stream source. </p>
    pub fn get_in_app_stream_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.in_app_stream_names
    }
    /// <p>The description of the preprocessor that executes on records in this input before the application's code is run. </p>
    pub fn input_processing_configuration_description(mut self, input: crate::types::InputProcessingConfigurationDescription) -> Self {
        self.input_processing_configuration_description = ::std::option::Option::Some(input);
        self
    }
    /// <p>The description of the preprocessor that executes on records in this input before the application's code is run. </p>
    pub fn set_input_processing_configuration_description(
        mut self,
        input: ::std::option::Option<crate::types::InputProcessingConfigurationDescription>,
    ) -> Self {
        self.input_processing_configuration_description = input;
        self
    }
    /// <p>The description of the preprocessor that executes on records in this input before the application's code is run. </p>
    pub fn get_input_processing_configuration_description(&self) -> &::std::option::Option<crate::types::InputProcessingConfigurationDescription> {
        &self.input_processing_configuration_description
    }
    /// <p>If a Kinesis data stream is configured as a streaming source, provides the Kinesis data stream's Amazon Resource Name (ARN). </p>
    pub fn kinesis_streams_input_description(mut self, input: crate::types::KinesisStreamsInputDescription) -> Self {
        self.kinesis_streams_input_description = ::std::option::Option::Some(input);
        self
    }
    /// <p>If a Kinesis data stream is configured as a streaming source, provides the Kinesis data stream's Amazon Resource Name (ARN). </p>
    pub fn set_kinesis_streams_input_description(mut self, input: ::std::option::Option<crate::types::KinesisStreamsInputDescription>) -> Self {
        self.kinesis_streams_input_description = input;
        self
    }
    /// <p>If a Kinesis data stream is configured as a streaming source, provides the Kinesis data stream's Amazon Resource Name (ARN). </p>
    pub fn get_kinesis_streams_input_description(&self) -> &::std::option::Option<crate::types::KinesisStreamsInputDescription> {
        &self.kinesis_streams_input_description
    }
    /// <p>If a Kinesis Data Firehose delivery stream is configured as a streaming source, provides the delivery stream's ARN. </p>
    pub fn kinesis_firehose_input_description(mut self, input: crate::types::KinesisFirehoseInputDescription) -> Self {
        self.kinesis_firehose_input_description = ::std::option::Option::Some(input);
        self
    }
    /// <p>If a Kinesis Data Firehose delivery stream is configured as a streaming source, provides the delivery stream's ARN. </p>
    pub fn set_kinesis_firehose_input_description(mut self, input: ::std::option::Option<crate::types::KinesisFirehoseInputDescription>) -> Self {
        self.kinesis_firehose_input_description = input;
        self
    }
    /// <p>If a Kinesis Data Firehose delivery stream is configured as a streaming source, provides the delivery stream's ARN. </p>
    pub fn get_kinesis_firehose_input_description(&self) -> &::std::option::Option<crate::types::KinesisFirehoseInputDescription> {
        &self.kinesis_firehose_input_description
    }
    /// <p>Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created. </p>
    pub fn input_schema(mut self, input: crate::types::SourceSchema) -> Self {
        self.input_schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created. </p>
    pub fn set_input_schema(mut self, input: ::std::option::Option<crate::types::SourceSchema>) -> Self {
        self.input_schema = input;
        self
    }
    /// <p>Describes the format of the data in the streaming source, and how each data element maps to corresponding columns in the in-application stream that is being created. </p>
    pub fn get_input_schema(&self) -> &::std::option::Option<crate::types::SourceSchema> {
        &self.input_schema
    }
    /// <p>Describes the configured parallelism (number of in-application streams mapped to the streaming source). </p>
    pub fn input_parallelism(mut self, input: crate::types::InputParallelism) -> Self {
        self.input_parallelism = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the configured parallelism (number of in-application streams mapped to the streaming source). </p>
    pub fn set_input_parallelism(mut self, input: ::std::option::Option<crate::types::InputParallelism>) -> Self {
        self.input_parallelism = input;
        self
    }
    /// <p>Describes the configured parallelism (number of in-application streams mapped to the streaming source). </p>
    pub fn get_input_parallelism(&self) -> &::std::option::Option<crate::types::InputParallelism> {
        &self.input_parallelism
    }
    /// <p>The point at which the application is configured to read from the input stream.</p>
    pub fn input_starting_position_configuration(mut self, input: crate::types::InputStartingPositionConfiguration) -> Self {
        self.input_starting_position_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The point at which the application is configured to read from the input stream.</p>
    pub fn set_input_starting_position_configuration(
        mut self,
        input: ::std::option::Option<crate::types::InputStartingPositionConfiguration>,
    ) -> Self {
        self.input_starting_position_configuration = input;
        self
    }
    /// <p>The point at which the application is configured to read from the input stream.</p>
    pub fn get_input_starting_position_configuration(&self) -> &::std::option::Option<crate::types::InputStartingPositionConfiguration> {
        &self.input_starting_position_configuration
    }
    /// Consumes the builder and constructs a [`InputDescription`](crate::types::InputDescription).
    pub fn build(self) -> crate::types::InputDescription {
        crate::types::InputDescription {
            input_id: self.input_id,
            name_prefix: self.name_prefix,
            in_app_stream_names: self.in_app_stream_names,
            input_processing_configuration_description: self.input_processing_configuration_description,
            kinesis_streams_input_description: self.kinesis_streams_input_description,
            kinesis_firehose_input_description: self.kinesis_firehose_input_description,
            input_schema: self.input_schema,
            input_parallelism: self.input_parallelism,
            input_starting_position_configuration: self.input_starting_position_configuration,
        }
    }
}
