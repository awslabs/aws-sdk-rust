// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the starting parameters for a Flink-based Kinesis Data Analytics application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FlinkRunConfiguration {
    /// <p>When restoring from a snapshot, specifies whether the runtime is allowed to skip a state that cannot be mapped to the new program. This will happen if the program is updated between snapshots to remove stateful parameters, and state data in the snapshot no longer corresponds to valid application data. For more information, see <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/ops/state/savepoints.html#allowing-non-restored-state"> Allowing Non-Restored State</a> in the <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/">Apache Flink documentation</a>.</p> <note>
    /// <p>This value defaults to <code>false</code>. If you update your application without specifying this parameter, <code>AllowNonRestoredState</code> will be set to <code>false</code>, even if it was previously set to <code>true</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub allow_non_restored_state: std::option::Option<bool>,
}
impl FlinkRunConfiguration {
    /// <p>When restoring from a snapshot, specifies whether the runtime is allowed to skip a state that cannot be mapped to the new program. This will happen if the program is updated between snapshots to remove stateful parameters, and state data in the snapshot no longer corresponds to valid application data. For more information, see <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/ops/state/savepoints.html#allowing-non-restored-state"> Allowing Non-Restored State</a> in the <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/">Apache Flink documentation</a>.</p> <note>
    /// <p>This value defaults to <code>false</code>. If you update your application without specifying this parameter, <code>AllowNonRestoredState</code> will be set to <code>false</code>, even if it was previously set to <code>true</code>.</p>
    /// </note>
    pub fn allow_non_restored_state(&self) -> std::option::Option<bool> {
        self.allow_non_restored_state
    }
}
impl FlinkRunConfiguration {
    /// Creates a new builder-style object to manufacture [`FlinkRunConfiguration`](crate::types::FlinkRunConfiguration).
    pub fn builder() -> crate::types::builders::FlinkRunConfigurationBuilder {
        crate::types::builders::FlinkRunConfigurationBuilder::default()
    }
}

/// A builder for [`FlinkRunConfiguration`](crate::types::FlinkRunConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FlinkRunConfigurationBuilder {
    pub(crate) allow_non_restored_state: std::option::Option<bool>,
}
impl FlinkRunConfigurationBuilder {
    /// <p>When restoring from a snapshot, specifies whether the runtime is allowed to skip a state that cannot be mapped to the new program. This will happen if the program is updated between snapshots to remove stateful parameters, and state data in the snapshot no longer corresponds to valid application data. For more information, see <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/ops/state/savepoints.html#allowing-non-restored-state"> Allowing Non-Restored State</a> in the <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/">Apache Flink documentation</a>.</p> <note>
    /// <p>This value defaults to <code>false</code>. If you update your application without specifying this parameter, <code>AllowNonRestoredState</code> will be set to <code>false</code>, even if it was previously set to <code>true</code>.</p>
    /// </note>
    pub fn allow_non_restored_state(mut self, input: bool) -> Self {
        self.allow_non_restored_state = Some(input);
        self
    }
    /// <p>When restoring from a snapshot, specifies whether the runtime is allowed to skip a state that cannot be mapped to the new program. This will happen if the program is updated between snapshots to remove stateful parameters, and state data in the snapshot no longer corresponds to valid application data. For more information, see <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/ops/state/savepoints.html#allowing-non-restored-state"> Allowing Non-Restored State</a> in the <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.8/">Apache Flink documentation</a>.</p> <note>
    /// <p>This value defaults to <code>false</code>. If you update your application without specifying this parameter, <code>AllowNonRestoredState</code> will be set to <code>false</code>, even if it was previously set to <code>true</code>.</p>
    /// </note>
    pub fn set_allow_non_restored_state(mut self, input: std::option::Option<bool>) -> Self {
        self.allow_non_restored_state = input;
        self
    }
    /// Consumes the builder and constructs a [`FlinkRunConfiguration`](crate::types::FlinkRunConfiguration).
    pub fn build(self) -> crate::types::FlinkRunConfiguration {
        crate::types::FlinkRunConfiguration {
            allow_non_restored_state: self.allow_non_restored_state,
        }
    }
}
