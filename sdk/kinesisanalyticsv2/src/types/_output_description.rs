// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>For a SQL-based Kinesis Data Analytics application, describes the application output configuration, which includes the in-application stream name and the destination where the stream data is written. The destination can be a Kinesis data stream or a Kinesis Data Firehose delivery stream. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OutputDescription {
    /// <p>A unique identifier for the output configuration.</p>
    #[doc(hidden)]
    pub output_id: std::option::Option<std::string::String>,
    /// <p>The name of the in-application stream that is configured as output.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Describes the Kinesis data stream that is configured as the destination where output is written.</p>
    #[doc(hidden)]
    pub kinesis_streams_output_description:
        std::option::Option<crate::types::KinesisStreamsOutputDescription>,
    /// <p>Describes the Kinesis Data Firehose delivery stream that is configured as the destination where output is written.</p>
    #[doc(hidden)]
    pub kinesis_firehose_output_description:
        std::option::Option<crate::types::KinesisFirehoseOutputDescription>,
    /// <p>Describes the Lambda function that is configured as the destination where output is written.</p>
    #[doc(hidden)]
    pub lambda_output_description: std::option::Option<crate::types::LambdaOutputDescription>,
    /// <p>The data format used for writing data to the destination.</p>
    #[doc(hidden)]
    pub destination_schema: std::option::Option<crate::types::DestinationSchema>,
}
impl OutputDescription {
    /// <p>A unique identifier for the output configuration.</p>
    pub fn output_id(&self) -> std::option::Option<&str> {
        self.output_id.as_deref()
    }
    /// <p>The name of the in-application stream that is configured as output.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Describes the Kinesis data stream that is configured as the destination where output is written.</p>
    pub fn kinesis_streams_output_description(
        &self,
    ) -> std::option::Option<&crate::types::KinesisStreamsOutputDescription> {
        self.kinesis_streams_output_description.as_ref()
    }
    /// <p>Describes the Kinesis Data Firehose delivery stream that is configured as the destination where output is written.</p>
    pub fn kinesis_firehose_output_description(
        &self,
    ) -> std::option::Option<&crate::types::KinesisFirehoseOutputDescription> {
        self.kinesis_firehose_output_description.as_ref()
    }
    /// <p>Describes the Lambda function that is configured as the destination where output is written.</p>
    pub fn lambda_output_description(
        &self,
    ) -> std::option::Option<&crate::types::LambdaOutputDescription> {
        self.lambda_output_description.as_ref()
    }
    /// <p>The data format used for writing data to the destination.</p>
    pub fn destination_schema(&self) -> std::option::Option<&crate::types::DestinationSchema> {
        self.destination_schema.as_ref()
    }
}
impl OutputDescription {
    /// Creates a new builder-style object to manufacture [`OutputDescription`](crate::types::OutputDescription).
    pub fn builder() -> crate::types::builders::OutputDescriptionBuilder {
        crate::types::builders::OutputDescriptionBuilder::default()
    }
}

/// A builder for [`OutputDescription`](crate::types::OutputDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OutputDescriptionBuilder {
    pub(crate) output_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) kinesis_streams_output_description:
        std::option::Option<crate::types::KinesisStreamsOutputDescription>,
    pub(crate) kinesis_firehose_output_description:
        std::option::Option<crate::types::KinesisFirehoseOutputDescription>,
    pub(crate) lambda_output_description:
        std::option::Option<crate::types::LambdaOutputDescription>,
    pub(crate) destination_schema: std::option::Option<crate::types::DestinationSchema>,
}
impl OutputDescriptionBuilder {
    /// <p>A unique identifier for the output configuration.</p>
    pub fn output_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.output_id = Some(input.into());
        self
    }
    /// <p>A unique identifier for the output configuration.</p>
    pub fn set_output_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.output_id = input;
        self
    }
    /// <p>The name of the in-application stream that is configured as output.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the in-application stream that is configured as output.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Describes the Kinesis data stream that is configured as the destination where output is written.</p>
    pub fn kinesis_streams_output_description(
        mut self,
        input: crate::types::KinesisStreamsOutputDescription,
    ) -> Self {
        self.kinesis_streams_output_description = Some(input);
        self
    }
    /// <p>Describes the Kinesis data stream that is configured as the destination where output is written.</p>
    pub fn set_kinesis_streams_output_description(
        mut self,
        input: std::option::Option<crate::types::KinesisStreamsOutputDescription>,
    ) -> Self {
        self.kinesis_streams_output_description = input;
        self
    }
    /// <p>Describes the Kinesis Data Firehose delivery stream that is configured as the destination where output is written.</p>
    pub fn kinesis_firehose_output_description(
        mut self,
        input: crate::types::KinesisFirehoseOutputDescription,
    ) -> Self {
        self.kinesis_firehose_output_description = Some(input);
        self
    }
    /// <p>Describes the Kinesis Data Firehose delivery stream that is configured as the destination where output is written.</p>
    pub fn set_kinesis_firehose_output_description(
        mut self,
        input: std::option::Option<crate::types::KinesisFirehoseOutputDescription>,
    ) -> Self {
        self.kinesis_firehose_output_description = input;
        self
    }
    /// <p>Describes the Lambda function that is configured as the destination where output is written.</p>
    pub fn lambda_output_description(
        mut self,
        input: crate::types::LambdaOutputDescription,
    ) -> Self {
        self.lambda_output_description = Some(input);
        self
    }
    /// <p>Describes the Lambda function that is configured as the destination where output is written.</p>
    pub fn set_lambda_output_description(
        mut self,
        input: std::option::Option<crate::types::LambdaOutputDescription>,
    ) -> Self {
        self.lambda_output_description = input;
        self
    }
    /// <p>The data format used for writing data to the destination.</p>
    pub fn destination_schema(mut self, input: crate::types::DestinationSchema) -> Self {
        self.destination_schema = Some(input);
        self
    }
    /// <p>The data format used for writing data to the destination.</p>
    pub fn set_destination_schema(
        mut self,
        input: std::option::Option<crate::types::DestinationSchema>,
    ) -> Self {
        self.destination_schema = input;
        self
    }
    /// Consumes the builder and constructs a [`OutputDescription`](crate::types::OutputDescription).
    pub fn build(self) -> crate::types::OutputDescription {
        crate::types::OutputDescription {
            output_id: self.output_id,
            name: self.name,
            kinesis_streams_output_description: self.kinesis_streams_output_description,
            kinesis_firehose_output_description: self.kinesis_firehose_output_description,
            lambda_output_description: self.lambda_output_description,
            destination_schema: self.destination_schema,
        }
    }
}
