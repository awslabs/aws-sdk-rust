// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>For a SQL-based Kinesis Data Analytics application, describes the mapping of each data element in the streaming source to the corresponding column in the in-application stream.</p>
/// <p>Also used to describe the format of the reference data source.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecordColumn {
    /// <p>The name of the column that is created in the in-application input stream or reference table.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A reference to the data element in the streaming input or the reference data source.</p>
    #[doc(hidden)]
    pub mapping: std::option::Option<std::string::String>,
    /// <p>The type of column created in the in-application input stream or reference table.</p>
    #[doc(hidden)]
    pub sql_type: std::option::Option<std::string::String>,
}
impl RecordColumn {
    /// <p>The name of the column that is created in the in-application input stream or reference table.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A reference to the data element in the streaming input or the reference data source.</p>
    pub fn mapping(&self) -> std::option::Option<&str> {
        self.mapping.as_deref()
    }
    /// <p>The type of column created in the in-application input stream or reference table.</p>
    pub fn sql_type(&self) -> std::option::Option<&str> {
        self.sql_type.as_deref()
    }
}
impl RecordColumn {
    /// Creates a new builder-style object to manufacture [`RecordColumn`](crate::types::RecordColumn).
    pub fn builder() -> crate::types::builders::RecordColumnBuilder {
        crate::types::builders::RecordColumnBuilder::default()
    }
}

/// A builder for [`RecordColumn`](crate::types::RecordColumn).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecordColumnBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) mapping: std::option::Option<std::string::String>,
    pub(crate) sql_type: std::option::Option<std::string::String>,
}
impl RecordColumnBuilder {
    /// <p>The name of the column that is created in the in-application input stream or reference table.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the column that is created in the in-application input stream or reference table.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A reference to the data element in the streaming input or the reference data source.</p>
    pub fn mapping(mut self, input: impl Into<std::string::String>) -> Self {
        self.mapping = Some(input.into());
        self
    }
    /// <p>A reference to the data element in the streaming input or the reference data source.</p>
    pub fn set_mapping(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mapping = input;
        self
    }
    /// <p>The type of column created in the in-application input stream or reference table.</p>
    pub fn sql_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.sql_type = Some(input.into());
        self
    }
    /// <p>The type of column created in the in-application input stream or reference table.</p>
    pub fn set_sql_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sql_type = input;
        self
    }
    /// Consumes the builder and constructs a [`RecordColumn`](crate::types::RecordColumn).
    pub fn build(self) -> crate::types::RecordColumn {
        crate::types::RecordColumn {
            name: self.name,
            mapping: self.mapping,
            sql_type: self.sql_type,
        }
    }
}
