// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes configuration parameters for CloudWatch logging for an application.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MonitoringConfigurationDescription {
    /// <p>Describes whether to use the default CloudWatch logging configuration for an application.</p>
    #[doc(hidden)]
    pub configuration_type: std::option::Option<crate::types::ConfigurationType>,
    /// <p>Describes the granularity of the CloudWatch Logs for an application.</p>
    #[doc(hidden)]
    pub metrics_level: std::option::Option<crate::types::MetricsLevel>,
    /// <p>Describes the verbosity of the CloudWatch Logs for an application.</p>
    #[doc(hidden)]
    pub log_level: std::option::Option<crate::types::LogLevel>,
}
impl MonitoringConfigurationDescription {
    /// <p>Describes whether to use the default CloudWatch logging configuration for an application.</p>
    pub fn configuration_type(&self) -> std::option::Option<&crate::types::ConfigurationType> {
        self.configuration_type.as_ref()
    }
    /// <p>Describes the granularity of the CloudWatch Logs for an application.</p>
    pub fn metrics_level(&self) -> std::option::Option<&crate::types::MetricsLevel> {
        self.metrics_level.as_ref()
    }
    /// <p>Describes the verbosity of the CloudWatch Logs for an application.</p>
    pub fn log_level(&self) -> std::option::Option<&crate::types::LogLevel> {
        self.log_level.as_ref()
    }
}
impl MonitoringConfigurationDescription {
    /// Creates a new builder-style object to manufacture [`MonitoringConfigurationDescription`](crate::types::MonitoringConfigurationDescription).
    pub fn builder() -> crate::types::builders::MonitoringConfigurationDescriptionBuilder {
        crate::types::builders::MonitoringConfigurationDescriptionBuilder::default()
    }
}

/// A builder for [`MonitoringConfigurationDescription`](crate::types::MonitoringConfigurationDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MonitoringConfigurationDescriptionBuilder {
    pub(crate) configuration_type: std::option::Option<crate::types::ConfigurationType>,
    pub(crate) metrics_level: std::option::Option<crate::types::MetricsLevel>,
    pub(crate) log_level: std::option::Option<crate::types::LogLevel>,
}
impl MonitoringConfigurationDescriptionBuilder {
    /// <p>Describes whether to use the default CloudWatch logging configuration for an application.</p>
    pub fn configuration_type(mut self, input: crate::types::ConfigurationType) -> Self {
        self.configuration_type = Some(input);
        self
    }
    /// <p>Describes whether to use the default CloudWatch logging configuration for an application.</p>
    pub fn set_configuration_type(
        mut self,
        input: std::option::Option<crate::types::ConfigurationType>,
    ) -> Self {
        self.configuration_type = input;
        self
    }
    /// <p>Describes the granularity of the CloudWatch Logs for an application.</p>
    pub fn metrics_level(mut self, input: crate::types::MetricsLevel) -> Self {
        self.metrics_level = Some(input);
        self
    }
    /// <p>Describes the granularity of the CloudWatch Logs for an application.</p>
    pub fn set_metrics_level(
        mut self,
        input: std::option::Option<crate::types::MetricsLevel>,
    ) -> Self {
        self.metrics_level = input;
        self
    }
    /// <p>Describes the verbosity of the CloudWatch Logs for an application.</p>
    pub fn log_level(mut self, input: crate::types::LogLevel) -> Self {
        self.log_level = Some(input);
        self
    }
    /// <p>Describes the verbosity of the CloudWatch Logs for an application.</p>
    pub fn set_log_level(mut self, input: std::option::Option<crate::types::LogLevel>) -> Self {
        self.log_level = input;
        self
    }
    /// Consumes the builder and constructs a [`MonitoringConfigurationDescription`](crate::types::MonitoringConfigurationDescription).
    pub fn build(self) -> crate::types::MonitoringConfigurationDescription {
        crate::types::MonitoringConfigurationDescription {
            configuration_type: self.configuration_type,
            metrics_level: self.metrics_level,
            log_level: self.log_level,
        }
    }
}
