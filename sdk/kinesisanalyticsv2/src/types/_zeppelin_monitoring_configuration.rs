// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes configuration parameters for Amazon CloudWatch logging for a Kinesis Data Analytics Studio notebook. For more information about CloudWatch logging, see <a href="https://docs.aws.amazon.com/kinesisanalytics/latest/java/monitoring-overview.html">Monitoring</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ZeppelinMonitoringConfiguration {
    /// <p>The verbosity of the CloudWatch Logs for an application.</p>
    pub log_level: crate::types::LogLevel,
}
impl ZeppelinMonitoringConfiguration {
    /// <p>The verbosity of the CloudWatch Logs for an application.</p>
    pub fn log_level(&self) -> &crate::types::LogLevel {
        &self.log_level
    }
}
impl ZeppelinMonitoringConfiguration {
    /// Creates a new builder-style object to manufacture [`ZeppelinMonitoringConfiguration`](crate::types::ZeppelinMonitoringConfiguration).
    pub fn builder() -> crate::types::builders::ZeppelinMonitoringConfigurationBuilder {
        crate::types::builders::ZeppelinMonitoringConfigurationBuilder::default()
    }
}

/// A builder for [`ZeppelinMonitoringConfiguration`](crate::types::ZeppelinMonitoringConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ZeppelinMonitoringConfigurationBuilder {
    pub(crate) log_level: ::std::option::Option<crate::types::LogLevel>,
}
impl ZeppelinMonitoringConfigurationBuilder {
    /// <p>The verbosity of the CloudWatch Logs for an application.</p>
    /// This field is required.
    pub fn log_level(mut self, input: crate::types::LogLevel) -> Self {
        self.log_level = ::std::option::Option::Some(input);
        self
    }
    /// <p>The verbosity of the CloudWatch Logs for an application.</p>
    pub fn set_log_level(mut self, input: ::std::option::Option<crate::types::LogLevel>) -> Self {
        self.log_level = input;
        self
    }
    /// <p>The verbosity of the CloudWatch Logs for an application.</p>
    pub fn get_log_level(&self) -> &::std::option::Option<crate::types::LogLevel> {
        &self.log_level
    }
    /// Consumes the builder and constructs a [`ZeppelinMonitoringConfiguration`](crate::types::ZeppelinMonitoringConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`log_level`](crate::types::builders::ZeppelinMonitoringConfigurationBuilder::log_level)
    pub fn build(self) -> ::std::result::Result<crate::types::ZeppelinMonitoringConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ZeppelinMonitoringConfiguration {
            log_level: self.log_level.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "log_level",
                    "log_level was not specified but it is required when building ZeppelinMonitoringConfiguration",
                )
            })?,
        })
    }
}
