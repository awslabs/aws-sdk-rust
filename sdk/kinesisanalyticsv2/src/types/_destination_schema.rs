// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the data format when records are written to the destination in a SQL-based Kinesis Data Analytics application. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DestinationSchema {
    /// <p>Specifies the format of the records on the output stream.</p>
    pub record_format_type: crate::types::RecordFormatType,
}
impl DestinationSchema {
    /// <p>Specifies the format of the records on the output stream.</p>
    pub fn record_format_type(&self) -> &crate::types::RecordFormatType {
        &self.record_format_type
    }
}
impl DestinationSchema {
    /// Creates a new builder-style object to manufacture [`DestinationSchema`](crate::types::DestinationSchema).
    pub fn builder() -> crate::types::builders::DestinationSchemaBuilder {
        crate::types::builders::DestinationSchemaBuilder::default()
    }
}

/// A builder for [`DestinationSchema`](crate::types::DestinationSchema).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DestinationSchemaBuilder {
    pub(crate) record_format_type: ::std::option::Option<crate::types::RecordFormatType>,
}
impl DestinationSchemaBuilder {
    /// <p>Specifies the format of the records on the output stream.</p>
    /// This field is required.
    pub fn record_format_type(mut self, input: crate::types::RecordFormatType) -> Self {
        self.record_format_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the format of the records on the output stream.</p>
    pub fn set_record_format_type(mut self, input: ::std::option::Option<crate::types::RecordFormatType>) -> Self {
        self.record_format_type = input;
        self
    }
    /// <p>Specifies the format of the records on the output stream.</p>
    pub fn get_record_format_type(&self) -> &::std::option::Option<crate::types::RecordFormatType> {
        &self.record_format_type
    }
    /// Consumes the builder and constructs a [`DestinationSchema`](crate::types::DestinationSchema).
    /// This method will fail if any of the following fields are not set:
    /// - [`record_format_type`](crate::types::builders::DestinationSchemaBuilder::record_format_type)
    pub fn build(self) -> ::std::result::Result<crate::types::DestinationSchema, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DestinationSchema {
            record_format_type: self.record_format_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "record_format_type",
                    "record_format_type was not specified but it is required when building DestinationSchema",
                )
            })?,
        })
    }
}
