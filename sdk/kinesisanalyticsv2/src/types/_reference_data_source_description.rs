// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>For a SQL-based Kinesis Data Analytics application, describes the reference data source configured for an application.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReferenceDataSourceDescription {
    /// <p>The ID of the reference data source. This is the ID that Kinesis Data Analytics assigns when you add the reference data source to your application using the <code>CreateApplication</code> or <code>UpdateApplication</code> operation.</p>
    pub reference_id: ::std::string::String,
    /// <p>The in-application table name created by the specific reference data source configuration.</p>
    pub table_name: ::std::string::String,
    /// <p>Provides the Amazon S3 bucket name, the object key name that contains the reference data. </p>
    pub s3_reference_data_source_description: ::std::option::Option<crate::types::S3ReferenceDataSourceDescription>,
    /// <p>Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.</p>
    pub reference_schema: ::std::option::Option<crate::types::SourceSchema>,
}
impl ReferenceDataSourceDescription {
    /// <p>The ID of the reference data source. This is the ID that Kinesis Data Analytics assigns when you add the reference data source to your application using the <code>CreateApplication</code> or <code>UpdateApplication</code> operation.</p>
    pub fn reference_id(&self) -> &str {
        use std::ops::Deref;
        self.reference_id.deref()
    }
    /// <p>The in-application table name created by the specific reference data source configuration.</p>
    pub fn table_name(&self) -> &str {
        use std::ops::Deref;
        self.table_name.deref()
    }
    /// <p>Provides the Amazon S3 bucket name, the object key name that contains the reference data. </p>
    pub fn s3_reference_data_source_description(&self) -> ::std::option::Option<&crate::types::S3ReferenceDataSourceDescription> {
        self.s3_reference_data_source_description.as_ref()
    }
    /// <p>Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.</p>
    pub fn reference_schema(&self) -> ::std::option::Option<&crate::types::SourceSchema> {
        self.reference_schema.as_ref()
    }
}
impl ReferenceDataSourceDescription {
    /// Creates a new builder-style object to manufacture [`ReferenceDataSourceDescription`](crate::types::ReferenceDataSourceDescription).
    pub fn builder() -> crate::types::builders::ReferenceDataSourceDescriptionBuilder {
        crate::types::builders::ReferenceDataSourceDescriptionBuilder::default()
    }
}

/// A builder for [`ReferenceDataSourceDescription`](crate::types::ReferenceDataSourceDescription).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReferenceDataSourceDescriptionBuilder {
    pub(crate) reference_id: ::std::option::Option<::std::string::String>,
    pub(crate) table_name: ::std::option::Option<::std::string::String>,
    pub(crate) s3_reference_data_source_description: ::std::option::Option<crate::types::S3ReferenceDataSourceDescription>,
    pub(crate) reference_schema: ::std::option::Option<crate::types::SourceSchema>,
}
impl ReferenceDataSourceDescriptionBuilder {
    /// <p>The ID of the reference data source. This is the ID that Kinesis Data Analytics assigns when you add the reference data source to your application using the <code>CreateApplication</code> or <code>UpdateApplication</code> operation.</p>
    /// This field is required.
    pub fn reference_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reference_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the reference data source. This is the ID that Kinesis Data Analytics assigns when you add the reference data source to your application using the <code>CreateApplication</code> or <code>UpdateApplication</code> operation.</p>
    pub fn set_reference_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reference_id = input;
        self
    }
    /// <p>The ID of the reference data source. This is the ID that Kinesis Data Analytics assigns when you add the reference data source to your application using the <code>CreateApplication</code> or <code>UpdateApplication</code> operation.</p>
    pub fn get_reference_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.reference_id
    }
    /// <p>The in-application table name created by the specific reference data source configuration.</p>
    /// This field is required.
    pub fn table_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.table_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The in-application table name created by the specific reference data source configuration.</p>
    pub fn set_table_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.table_name = input;
        self
    }
    /// <p>The in-application table name created by the specific reference data source configuration.</p>
    pub fn get_table_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.table_name
    }
    /// <p>Provides the Amazon S3 bucket name, the object key name that contains the reference data. </p>
    /// This field is required.
    pub fn s3_reference_data_source_description(mut self, input: crate::types::S3ReferenceDataSourceDescription) -> Self {
        self.s3_reference_data_source_description = ::std::option::Option::Some(input);
        self
    }
    /// <p>Provides the Amazon S3 bucket name, the object key name that contains the reference data. </p>
    pub fn set_s3_reference_data_source_description(mut self, input: ::std::option::Option<crate::types::S3ReferenceDataSourceDescription>) -> Self {
        self.s3_reference_data_source_description = input;
        self
    }
    /// <p>Provides the Amazon S3 bucket name, the object key name that contains the reference data. </p>
    pub fn get_s3_reference_data_source_description(&self) -> &::std::option::Option<crate::types::S3ReferenceDataSourceDescription> {
        &self.s3_reference_data_source_description
    }
    /// <p>Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.</p>
    pub fn reference_schema(mut self, input: crate::types::SourceSchema) -> Self {
        self.reference_schema = ::std::option::Option::Some(input);
        self
    }
    /// <p>Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.</p>
    pub fn set_reference_schema(mut self, input: ::std::option::Option<crate::types::SourceSchema>) -> Self {
        self.reference_schema = input;
        self
    }
    /// <p>Describes the format of the data in the streaming source, and how each data element maps to corresponding columns created in the in-application stream.</p>
    pub fn get_reference_schema(&self) -> &::std::option::Option<crate::types::SourceSchema> {
        &self.reference_schema
    }
    /// Consumes the builder and constructs a [`ReferenceDataSourceDescription`](crate::types::ReferenceDataSourceDescription).
    /// This method will fail if any of the following fields are not set:
    /// - [`reference_id`](crate::types::builders::ReferenceDataSourceDescriptionBuilder::reference_id)
    /// - [`table_name`](crate::types::builders::ReferenceDataSourceDescriptionBuilder::table_name)
    pub fn build(self) -> ::std::result::Result<crate::types::ReferenceDataSourceDescription, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ReferenceDataSourceDescription {
            reference_id: self.reference_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "reference_id",
                    "reference_id was not specified but it is required when building ReferenceDataSourceDescription",
                )
            })?,
            table_name: self.table_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "table_name",
                    "table_name was not specified but it is required when building ReferenceDataSourceDescription",
                )
            })?,
            s3_reference_data_source_description: self.s3_reference_data_source_description,
            reference_schema: self.reference_schema,
        })
    }
}
