// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Adds a specified number of users to a channel. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchCreateChannelMembership {
    _private: (),
}
impl BatchCreateChannelMembership {
    /// Creates a new builder-style object to manufacture [`BatchCreateChannelMembershipInput`](crate::input::BatchCreateChannelMembershipInput)
    pub fn builder() -> crate::input::batch_create_channel_membership_input::Builder {
        crate::input::batch_create_channel_membership_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchCreateChannelMembership {
    type Output = std::result::Result<
        crate::output::BatchCreateChannelMembershipOutput,
        crate::error::BatchCreateChannelMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_create_channel_membership_error(response)
        } else {
            crate::operation_deser::parse_batch_create_channel_membership_response(response)
        }
    }
}

/// <p>Creates a channel to which you can add users and send messages.</p>
/// <p>
/// <b>Restriction</b>: You can't change a channel's
/// privacy.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateChannel {
    _private: (),
}
impl CreateChannel {
    /// Creates a new builder-style object to manufacture [`CreateChannelInput`](crate::input::CreateChannelInput)
    pub fn builder() -> crate::input::create_channel_input::Builder {
        crate::input::create_channel_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateChannel {
    type Output =
        std::result::Result<crate::output::CreateChannelOutput, crate::error::CreateChannelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_channel_error(response)
        } else {
            crate::operation_deser::parse_create_channel_response(response)
        }
    }
}

/// <p>Permanently bans a member from a channel. Moderators can't add banned members to a
/// channel. To undo a ban, you first have to <code>DeleteChannelBan</code>, and then
/// <code>CreateChannelMembership</code>. Bans are cleaned up when you delete users or
/// channels.</p>
/// <p>If you ban a user who is already part of a channel, that user is automatically kicked
/// from the channel.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateChannelBan {
    _private: (),
}
impl CreateChannelBan {
    /// Creates a new builder-style object to manufacture [`CreateChannelBanInput`](crate::input::CreateChannelBanInput)
    pub fn builder() -> crate::input::create_channel_ban_input::Builder {
        crate::input::create_channel_ban_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateChannelBan {
    type Output = std::result::Result<
        crate::output::CreateChannelBanOutput,
        crate::error::CreateChannelBanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_channel_ban_error(response)
        } else {
            crate::operation_deser::parse_create_channel_ban_response(response)
        }
    }
}

/// <p>Adds a user to a channel. The <code>InvitedBy</code> response field is derived from the
/// request header. A channel member can:</p>
/// <ul>
/// <li>
/// <p>List messages</p>
/// </li>
/// <li>
/// <p>Send messages</p>
/// </li>
/// <li>
/// <p>Receive messages</p>
/// </li>
/// <li>
/// <p>Edit their own messages</p>
/// </li>
/// <li>
/// <p>Leave the channel</p>
/// </li>
/// </ul>
/// <p>Privacy settings impact this action as follows:</p>
/// <ul>
/// <li>
/// <p>Public Channels: You do not need to be a member to list messages, but you must be
/// a member to send messages.</p>
/// </li>
/// <li>
/// <p>Private Channels: You must be a member to list or send messages.</p>
/// </li>
/// </ul>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateChannelMembership {
    _private: (),
}
impl CreateChannelMembership {
    /// Creates a new builder-style object to manufacture [`CreateChannelMembershipInput`](crate::input::CreateChannelMembershipInput)
    pub fn builder() -> crate::input::create_channel_membership_input::Builder {
        crate::input::create_channel_membership_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateChannelMembership {
    type Output = std::result::Result<
        crate::output::CreateChannelMembershipOutput,
        crate::error::CreateChannelMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_channel_membership_error(response)
        } else {
            crate::operation_deser::parse_create_channel_membership_response(response)
        }
    }
}

/// <p>Creates a new <code>ChannelModerator</code>. A channel moderator can:</p>
/// <ul>
/// <li>
/// <p>Add and remove other members of the channel.</p>
/// </li>
/// <li>
/// <p>Add and remove other moderators of the channel.</p>
/// </li>
/// <li>
/// <p>Add and remove user bans for the channel.</p>
/// </li>
/// <li>
/// <p>Redact messages in the channel.</p>
/// </li>
/// <li>
/// <p>List messages in the channel.</p>
/// </li>
/// </ul>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateChannelModerator {
    _private: (),
}
impl CreateChannelModerator {
    /// Creates a new builder-style object to manufacture [`CreateChannelModeratorInput`](crate::input::CreateChannelModeratorInput)
    pub fn builder() -> crate::input::create_channel_moderator_input::Builder {
        crate::input::create_channel_moderator_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateChannelModerator {
    type Output = std::result::Result<
        crate::output::CreateChannelModeratorOutput,
        crate::error::CreateChannelModeratorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_create_channel_moderator_error(response)
        } else {
            crate::operation_deser::parse_create_channel_moderator_response(response)
        }
    }
}

/// <p>Immediately makes a channel and its memberships inaccessible and marks them for
/// deletion. This is an irreversible process.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteChannel {
    _private: (),
}
impl DeleteChannel {
    /// Creates a new builder-style object to manufacture [`DeleteChannelInput`](crate::input::DeleteChannelInput)
    pub fn builder() -> crate::input::delete_channel_input::Builder {
        crate::input::delete_channel_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteChannel {
    type Output =
        std::result::Result<crate::output::DeleteChannelOutput, crate::error::DeleteChannelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_channel_error(response)
        } else {
            crate::operation_deser::parse_delete_channel_response(response)
        }
    }
}

/// <p>Removes a user from a channel's ban list.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteChannelBan {
    _private: (),
}
impl DeleteChannelBan {
    /// Creates a new builder-style object to manufacture [`DeleteChannelBanInput`](crate::input::DeleteChannelBanInput)
    pub fn builder() -> crate::input::delete_channel_ban_input::Builder {
        crate::input::delete_channel_ban_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteChannelBan {
    type Output = std::result::Result<
        crate::output::DeleteChannelBanOutput,
        crate::error::DeleteChannelBanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_channel_ban_error(response)
        } else {
            crate::operation_deser::parse_delete_channel_ban_response(response)
        }
    }
}

/// <p>Removes a member from a channel.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteChannelMembership {
    _private: (),
}
impl DeleteChannelMembership {
    /// Creates a new builder-style object to manufacture [`DeleteChannelMembershipInput`](crate::input::DeleteChannelMembershipInput)
    pub fn builder() -> crate::input::delete_channel_membership_input::Builder {
        crate::input::delete_channel_membership_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteChannelMembership {
    type Output = std::result::Result<
        crate::output::DeleteChannelMembershipOutput,
        crate::error::DeleteChannelMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_channel_membership_error(response)
        } else {
            crate::operation_deser::parse_delete_channel_membership_response(response)
        }
    }
}

/// <p>Deletes a channel message. Only admins can perform this action. Deletion makes messages
/// inaccessible immediately. A background process deletes any revisions created by
/// <code>UpdateChannelMessage</code>.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteChannelMessage {
    _private: (),
}
impl DeleteChannelMessage {
    /// Creates a new builder-style object to manufacture [`DeleteChannelMessageInput`](crate::input::DeleteChannelMessageInput)
    pub fn builder() -> crate::input::delete_channel_message_input::Builder {
        crate::input::delete_channel_message_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteChannelMessage {
    type Output = std::result::Result<
        crate::output::DeleteChannelMessageOutput,
        crate::error::DeleteChannelMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_channel_message_error(response)
        } else {
            crate::operation_deser::parse_delete_channel_message_response(response)
        }
    }
}

/// <p>Deletes a channel moderator.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteChannelModerator {
    _private: (),
}
impl DeleteChannelModerator {
    /// Creates a new builder-style object to manufacture [`DeleteChannelModeratorInput`](crate::input::DeleteChannelModeratorInput)
    pub fn builder() -> crate::input::delete_channel_moderator_input::Builder {
        crate::input::delete_channel_moderator_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteChannelModerator {
    type Output = std::result::Result<
        crate::output::DeleteChannelModeratorOutput,
        crate::error::DeleteChannelModeratorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_delete_channel_moderator_error(response)
        } else {
            crate::operation_deser::parse_delete_channel_moderator_response(response)
        }
    }
}

/// <p>Returns the full details of a channel in an Amazon Chime
/// <code>AppInstance</code>.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeChannel {
    _private: (),
}
impl DescribeChannel {
    /// Creates a new builder-style object to manufacture [`DescribeChannelInput`](crate::input::DescribeChannelInput)
    pub fn builder() -> crate::input::describe_channel_input::Builder {
        crate::input::describe_channel_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeChannel {
    type Output = std::result::Result<
        crate::output::DescribeChannelOutput,
        crate::error::DescribeChannelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_channel_error(response)
        } else {
            crate::operation_deser::parse_describe_channel_response(response)
        }
    }
}

/// <p>Returns the full details of a channel ban.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeChannelBan {
    _private: (),
}
impl DescribeChannelBan {
    /// Creates a new builder-style object to manufacture [`DescribeChannelBanInput`](crate::input::DescribeChannelBanInput)
    pub fn builder() -> crate::input::describe_channel_ban_input::Builder {
        crate::input::describe_channel_ban_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeChannelBan {
    type Output = std::result::Result<
        crate::output::DescribeChannelBanOutput,
        crate::error::DescribeChannelBanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_channel_ban_error(response)
        } else {
            crate::operation_deser::parse_describe_channel_ban_response(response)
        }
    }
}

/// <p>Returns the full details of a user's channel membership.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeChannelMembership {
    _private: (),
}
impl DescribeChannelMembership {
    /// Creates a new builder-style object to manufacture [`DescribeChannelMembershipInput`](crate::input::DescribeChannelMembershipInput)
    pub fn builder() -> crate::input::describe_channel_membership_input::Builder {
        crate::input::describe_channel_membership_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeChannelMembership {
    type Output = std::result::Result<
        crate::output::DescribeChannelMembershipOutput,
        crate::error::DescribeChannelMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_channel_membership_error(response)
        } else {
            crate::operation_deser::parse_describe_channel_membership_response(response)
        }
    }
}

/// <p> Returns the details of a channel based on the membership of the specified
/// <code>AppInstanceUser</code>.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeChannelMembershipForAppInstanceUser {
    _private: (),
}
impl DescribeChannelMembershipForAppInstanceUser {
    /// Creates a new builder-style object to manufacture [`DescribeChannelMembershipForAppInstanceUserInput`](crate::input::DescribeChannelMembershipForAppInstanceUserInput)
    pub fn builder(
    ) -> crate::input::describe_channel_membership_for_app_instance_user_input::Builder {
        crate::input::describe_channel_membership_for_app_instance_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeChannelMembershipForAppInstanceUser {
    type Output = std::result::Result<
        crate::output::DescribeChannelMembershipForAppInstanceUserOutput,
        crate::error::DescribeChannelMembershipForAppInstanceUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_channel_membership_for_app_instance_user_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_channel_membership_for_app_instance_user_response(
                response,
            )
        }
    }
}

/// <p>Returns the full details of a channel moderated by the specified
/// <code>AppInstanceUser</code>.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeChannelModeratedByAppInstanceUser {
    _private: (),
}
impl DescribeChannelModeratedByAppInstanceUser {
    /// Creates a new builder-style object to manufacture [`DescribeChannelModeratedByAppInstanceUserInput`](crate::input::DescribeChannelModeratedByAppInstanceUserInput)
    pub fn builder() -> crate::input::describe_channel_moderated_by_app_instance_user_input::Builder
    {
        crate::input::describe_channel_moderated_by_app_instance_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeChannelModeratedByAppInstanceUser {
    type Output = std::result::Result<
        crate::output::DescribeChannelModeratedByAppInstanceUserOutput,
        crate::error::DescribeChannelModeratedByAppInstanceUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_channel_moderated_by_app_instance_user_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_channel_moderated_by_app_instance_user_response(
                response,
            )
        }
    }
}

/// <p>Returns the full details of a single ChannelModerator.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeChannelModerator {
    _private: (),
}
impl DescribeChannelModerator {
    /// Creates a new builder-style object to manufacture [`DescribeChannelModeratorInput`](crate::input::DescribeChannelModeratorInput)
    pub fn builder() -> crate::input::describe_channel_moderator_input::Builder {
        crate::input::describe_channel_moderator_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeChannelModerator {
    type Output = std::result::Result<
        crate::output::DescribeChannelModeratorOutput,
        crate::error::DescribeChannelModeratorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_channel_moderator_error(response)
        } else {
            crate::operation_deser::parse_describe_channel_moderator_response(response)
        }
    }
}

/// <p>Gets the full details of a channel message.</p>
/// <note>
/// <p>The x-amz-chime-bearer request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetChannelMessage {
    _private: (),
}
impl GetChannelMessage {
    /// Creates a new builder-style object to manufacture [`GetChannelMessageInput`](crate::input::GetChannelMessageInput)
    pub fn builder() -> crate::input::get_channel_message_input::Builder {
        crate::input::get_channel_message_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetChannelMessage {
    type Output = std::result::Result<
        crate::output::GetChannelMessageOutput,
        crate::error::GetChannelMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_channel_message_error(response)
        } else {
            crate::operation_deser::parse_get_channel_message_response(response)
        }
    }
}

/// <p>The details of the endpoint for the messaging session.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetMessagingSessionEndpoint {
    _private: (),
}
impl GetMessagingSessionEndpoint {
    /// Creates a new builder-style object to manufacture [`GetMessagingSessionEndpointInput`](crate::input::GetMessagingSessionEndpointInput)
    pub fn builder() -> crate::input::get_messaging_session_endpoint_input::Builder {
        crate::input::get_messaging_session_endpoint_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetMessagingSessionEndpoint {
    type Output = std::result::Result<
        crate::output::GetMessagingSessionEndpointOutput,
        crate::error::GetMessagingSessionEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_messaging_session_endpoint_error(response)
        } else {
            crate::operation_deser::parse_get_messaging_session_endpoint_response(response)
        }
    }
}

/// <p>Lists all the users banned from a particular channel.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChannelBans {
    _private: (),
}
impl ListChannelBans {
    /// Creates a new builder-style object to manufacture [`ListChannelBansInput`](crate::input::ListChannelBansInput)
    pub fn builder() -> crate::input::list_channel_bans_input::Builder {
        crate::input::list_channel_bans_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListChannelBans {
    type Output = std::result::Result<
        crate::output::ListChannelBansOutput,
        crate::error::ListChannelBansError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_channel_bans_error(response)
        } else {
            crate::operation_deser::parse_list_channel_bans_response(response)
        }
    }
}

/// <p>Lists all channel memberships in a channel.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChannelMemberships {
    _private: (),
}
impl ListChannelMemberships {
    /// Creates a new builder-style object to manufacture [`ListChannelMembershipsInput`](crate::input::ListChannelMembershipsInput)
    pub fn builder() -> crate::input::list_channel_memberships_input::Builder {
        crate::input::list_channel_memberships_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListChannelMemberships {
    type Output = std::result::Result<
        crate::output::ListChannelMembershipsOutput,
        crate::error::ListChannelMembershipsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_channel_memberships_error(response)
        } else {
            crate::operation_deser::parse_list_channel_memberships_response(response)
        }
    }
}

/// <p> Lists all channels that a particular <code>AppInstanceUser</code> is a part of. Only an
/// <code>AppInstanceAdmin</code> can call the API with a user ARN that is not their own. </p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChannelMembershipsForAppInstanceUser {
    _private: (),
}
impl ListChannelMembershipsForAppInstanceUser {
    /// Creates a new builder-style object to manufacture [`ListChannelMembershipsForAppInstanceUserInput`](crate::input::ListChannelMembershipsForAppInstanceUserInput)
    pub fn builder() -> crate::input::list_channel_memberships_for_app_instance_user_input::Builder
    {
        crate::input::list_channel_memberships_for_app_instance_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListChannelMembershipsForAppInstanceUser {
    type Output = std::result::Result<
        crate::output::ListChannelMembershipsForAppInstanceUserOutput,
        crate::error::ListChannelMembershipsForAppInstanceUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_channel_memberships_for_app_instance_user_error(
                response,
            )
        } else {
            crate::operation_deser::parse_list_channel_memberships_for_app_instance_user_response(
                response,
            )
        }
    }
}

/// <p>List all the messages in a channel. Returns a paginated list of
/// <code>ChannelMessages</code>. By default, sorted by creation timestamp in descending
/// order.</p>
/// <note>
/// <p>Redacted messages appear in the results as empty, since they are only redacted, not
/// deleted. Deleted messages do not appear in the results. This action always returns the
/// latest version of an edited message.</p>
/// <p>Also, the x-amz-chime-bearer request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChannelMessages {
    _private: (),
}
impl ListChannelMessages {
    /// Creates a new builder-style object to manufacture [`ListChannelMessagesInput`](crate::input::ListChannelMessagesInput)
    pub fn builder() -> crate::input::list_channel_messages_input::Builder {
        crate::input::list_channel_messages_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListChannelMessages {
    type Output = std::result::Result<
        crate::output::ListChannelMessagesOutput,
        crate::error::ListChannelMessagesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_channel_messages_error(response)
        } else {
            crate::operation_deser::parse_list_channel_messages_response(response)
        }
    }
}

/// <p>Lists all the moderators for a channel.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChannelModerators {
    _private: (),
}
impl ListChannelModerators {
    /// Creates a new builder-style object to manufacture [`ListChannelModeratorsInput`](crate::input::ListChannelModeratorsInput)
    pub fn builder() -> crate::input::list_channel_moderators_input::Builder {
        crate::input::list_channel_moderators_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListChannelModerators {
    type Output = std::result::Result<
        crate::output::ListChannelModeratorsOutput,
        crate::error::ListChannelModeratorsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_channel_moderators_error(response)
        } else {
            crate::operation_deser::parse_list_channel_moderators_response(response)
        }
    }
}

/// <p>Lists all Channels created under a single Chime App as a paginated list. You can specify
/// filters to narrow results.</p>
/// <p class="title">
/// <b>Functionality & restrictions</b>
/// </p>
/// <ul>
/// <li>
/// <p>Use privacy = <code>PUBLIC</code> to retrieve all public channels in the
/// account.</p>
/// </li>
/// <li>
/// <p>Only an <code>AppInstanceAdmin</code> can set privacy = <code>PRIVATE</code> to
/// list the private channels in an account.</p>
/// </li>
/// </ul>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChannels {
    _private: (),
}
impl ListChannels {
    /// Creates a new builder-style object to manufacture [`ListChannelsInput`](crate::input::ListChannelsInput)
    pub fn builder() -> crate::input::list_channels_input::Builder {
        crate::input::list_channels_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListChannels {
    type Output =
        std::result::Result<crate::output::ListChannelsOutput, crate::error::ListChannelsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_channels_error(response)
        } else {
            crate::operation_deser::parse_list_channels_response(response)
        }
    }
}

/// <p>A list of the channels moderated by an <code>AppInstanceUser</code>.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListChannelsModeratedByAppInstanceUser {
    _private: (),
}
impl ListChannelsModeratedByAppInstanceUser {
    /// Creates a new builder-style object to manufacture [`ListChannelsModeratedByAppInstanceUserInput`](crate::input::ListChannelsModeratedByAppInstanceUserInput)
    pub fn builder() -> crate::input::list_channels_moderated_by_app_instance_user_input::Builder {
        crate::input::list_channels_moderated_by_app_instance_user_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListChannelsModeratedByAppInstanceUser {
    type Output = std::result::Result<
        crate::output::ListChannelsModeratedByAppInstanceUserOutput,
        crate::error::ListChannelsModeratedByAppInstanceUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_channels_moderated_by_app_instance_user_error(
                response,
            )
        } else {
            crate::operation_deser::parse_list_channels_moderated_by_app_instance_user_response(
                response,
            )
        }
    }
}

/// <p>Redacts message content, but not metadata. The message exists in the back end, but the
/// action returns null content, and the state shows as redacted.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RedactChannelMessage {
    _private: (),
}
impl RedactChannelMessage {
    /// Creates a new builder-style object to manufacture [`RedactChannelMessageInput`](crate::input::RedactChannelMessageInput)
    pub fn builder() -> crate::input::redact_channel_message_input::Builder {
        crate::input::redact_channel_message_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for RedactChannelMessage {
    type Output = std::result::Result<
        crate::output::RedactChannelMessageOutput,
        crate::error::RedactChannelMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_redact_channel_message_error(response)
        } else {
            crate::operation_deser::parse_redact_channel_message_response(response)
        }
    }
}

/// <p>Sends a message to a particular channel that the member is a part of.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// <p>Also, <code>STANDARD</code> messages can contain 4KB of data and the 1KB of metadata.
/// <code>CONTROL</code> messages can contain 30 bytes of data and no metadata.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct SendChannelMessage {
    _private: (),
}
impl SendChannelMessage {
    /// Creates a new builder-style object to manufacture [`SendChannelMessageInput`](crate::input::SendChannelMessageInput)
    pub fn builder() -> crate::input::send_channel_message_input::Builder {
        crate::input::send_channel_message_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for SendChannelMessage {
    type Output = std::result::Result<
        crate::output::SendChannelMessageOutput,
        crate::error::SendChannelMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::operation_deser::parse_send_channel_message_error(response)
        } else {
            crate::operation_deser::parse_send_channel_message_response(response)
        }
    }
}

/// <p>Update a channel's attributes.</p>
/// <p>
/// <b>Restriction</b>: You can't change a channel's privacy. </p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateChannel {
    _private: (),
}
impl UpdateChannel {
    /// Creates a new builder-style object to manufacture [`UpdateChannelInput`](crate::input::UpdateChannelInput)
    pub fn builder() -> crate::input::update_channel_input::Builder {
        crate::input::update_channel_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateChannel {
    type Output =
        std::result::Result<crate::output::UpdateChannelOutput, crate::error::UpdateChannelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_channel_error(response)
        } else {
            crate::operation_deser::parse_update_channel_response(response)
        }
    }
}

/// <p>Updates the content of a message.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateChannelMessage {
    _private: (),
}
impl UpdateChannelMessage {
    /// Creates a new builder-style object to manufacture [`UpdateChannelMessageInput`](crate::input::UpdateChannelMessageInput)
    pub fn builder() -> crate::input::update_channel_message_input::Builder {
        crate::input::update_channel_message_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateChannelMessage {
    type Output = std::result::Result<
        crate::output::UpdateChannelMessageOutput,
        crate::error::UpdateChannelMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_channel_message_error(response)
        } else {
            crate::operation_deser::parse_update_channel_message_response(response)
        }
    }
}

/// <p>The details of the time when a user last read messages in a channel.</p>
/// <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the
/// <code>AppInstanceUserArn</code> of the user that makes the API call as the value in
/// the header.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateChannelReadMarker {
    _private: (),
}
impl UpdateChannelReadMarker {
    /// Creates a new builder-style object to manufacture [`UpdateChannelReadMarkerInput`](crate::input::UpdateChannelReadMarkerInput)
    pub fn builder() -> crate::input::update_channel_read_marker_input::Builder {
        crate::input::update_channel_read_marker_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateChannelReadMarker {
    type Output = std::result::Result<
        crate::output::UpdateChannelReadMarkerOutput,
        crate::error::UpdateChannelReadMarkerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_channel_read_marker_error(response)
        } else {
            crate::operation_deser::parse_update_channel_read_marker_response(response)
        }
    }
}
