// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `AssociateChannelFlow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`associate_channel_flow`](crate::client::fluent_builders::AssociateChannelFlow).
///
/// `ParseStrictResponse` impl for `AssociateChannelFlow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AssociateChannelFlow {
    _private: (),
}
impl AssociateChannelFlow {
    /// Creates a new builder-style object to manufacture [`AssociateChannelFlowInput`](crate::input::AssociateChannelFlowInput).
    pub fn builder() -> crate::input::associate_channel_flow_input::Builder {
        crate::input::associate_channel_flow_input::Builder::default()
    }
    /// Creates a new `AssociateChannelFlow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AssociateChannelFlow {
    type Output = std::result::Result<
        crate::output::AssociateChannelFlowOutput,
        crate::error::AssociateChannelFlowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_associate_channel_flow::de_associate_channel_flow_http_error(response)
        } else {
            crate::protocol_serde::shape_associate_channel_flow::de_associate_channel_flow_http_response(response)
        }
    }
}

/// Operation shape for `BatchCreateChannelMembership`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`batch_create_channel_membership`](crate::client::fluent_builders::BatchCreateChannelMembership).
///
/// `ParseStrictResponse` impl for `BatchCreateChannelMembership`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct BatchCreateChannelMembership {
    _private: (),
}
impl BatchCreateChannelMembership {
    /// Creates a new builder-style object to manufacture [`BatchCreateChannelMembershipInput`](crate::input::BatchCreateChannelMembershipInput).
    pub fn builder() -> crate::input::batch_create_channel_membership_input::Builder {
        crate::input::batch_create_channel_membership_input::Builder::default()
    }
    /// Creates a new `BatchCreateChannelMembership` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for BatchCreateChannelMembership {
    type Output = std::result::Result<
        crate::output::BatchCreateChannelMembershipOutput,
        crate::error::BatchCreateChannelMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_batch_create_channel_membership::de_batch_create_channel_membership_http_error(response)
        } else {
            crate::protocol_serde::shape_batch_create_channel_membership::de_batch_create_channel_membership_http_response(response)
        }
    }
}

/// Operation shape for `ChannelFlowCallback`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`channel_flow_callback`](crate::client::fluent_builders::ChannelFlowCallback).
///
/// `ParseStrictResponse` impl for `ChannelFlowCallback`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ChannelFlowCallback {
    _private: (),
}
impl ChannelFlowCallback {
    /// Creates a new builder-style object to manufacture [`ChannelFlowCallbackInput`](crate::input::ChannelFlowCallbackInput).
    pub fn builder() -> crate::input::channel_flow_callback_input::Builder {
        crate::input::channel_flow_callback_input::Builder::default()
    }
    /// Creates a new `ChannelFlowCallback` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ChannelFlowCallback {
    type Output = std::result::Result<
        crate::output::ChannelFlowCallbackOutput,
        crate::error::ChannelFlowCallbackError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_channel_flow_callback::de_channel_flow_callback_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_channel_flow_callback::de_channel_flow_callback_http_response(response)
        }
    }
}

/// Operation shape for `CreateChannel`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_channel`](crate::client::fluent_builders::CreateChannel).
///
/// `ParseStrictResponse` impl for `CreateChannel`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateChannel {
    _private: (),
}
impl CreateChannel {
    /// Creates a new builder-style object to manufacture [`CreateChannelInput`](crate::input::CreateChannelInput).
    pub fn builder() -> crate::input::create_channel_input::Builder {
        crate::input::create_channel_input::Builder::default()
    }
    /// Creates a new `CreateChannel` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateChannel {
    type Output =
        std::result::Result<crate::output::CreateChannelOutput, crate::error::CreateChannelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_channel::de_create_channel_http_error(response)
        } else {
            crate::protocol_serde::shape_create_channel::de_create_channel_http_response(response)
        }
    }
}

/// Operation shape for `CreateChannelBan`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_channel_ban`](crate::client::fluent_builders::CreateChannelBan).
///
/// `ParseStrictResponse` impl for `CreateChannelBan`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateChannelBan {
    _private: (),
}
impl CreateChannelBan {
    /// Creates a new builder-style object to manufacture [`CreateChannelBanInput`](crate::input::CreateChannelBanInput).
    pub fn builder() -> crate::input::create_channel_ban_input::Builder {
        crate::input::create_channel_ban_input::Builder::default()
    }
    /// Creates a new `CreateChannelBan` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateChannelBan {
    type Output = std::result::Result<
        crate::output::CreateChannelBanOutput,
        crate::error::CreateChannelBanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_channel_ban::de_create_channel_ban_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_channel_ban::de_create_channel_ban_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateChannelFlow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_channel_flow`](crate::client::fluent_builders::CreateChannelFlow).
///
/// `ParseStrictResponse` impl for `CreateChannelFlow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateChannelFlow {
    _private: (),
}
impl CreateChannelFlow {
    /// Creates a new builder-style object to manufacture [`CreateChannelFlowInput`](crate::input::CreateChannelFlowInput).
    pub fn builder() -> crate::input::create_channel_flow_input::Builder {
        crate::input::create_channel_flow_input::Builder::default()
    }
    /// Creates a new `CreateChannelFlow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateChannelFlow {
    type Output = std::result::Result<
        crate::output::CreateChannelFlowOutput,
        crate::error::CreateChannelFlowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_channel_flow::de_create_channel_flow_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_channel_flow::de_create_channel_flow_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateChannelMembership`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_channel_membership`](crate::client::fluent_builders::CreateChannelMembership).
///
/// `ParseStrictResponse` impl for `CreateChannelMembership`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateChannelMembership {
    _private: (),
}
impl CreateChannelMembership {
    /// Creates a new builder-style object to manufacture [`CreateChannelMembershipInput`](crate::input::CreateChannelMembershipInput).
    pub fn builder() -> crate::input::create_channel_membership_input::Builder {
        crate::input::create_channel_membership_input::Builder::default()
    }
    /// Creates a new `CreateChannelMembership` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateChannelMembership {
    type Output = std::result::Result<
        crate::output::CreateChannelMembershipOutput,
        crate::error::CreateChannelMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_channel_membership::de_create_channel_membership_http_error(response)
        } else {
            crate::protocol_serde::shape_create_channel_membership::de_create_channel_membership_http_response(response)
        }
    }
}

/// Operation shape for `CreateChannelModerator`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_channel_moderator`](crate::client::fluent_builders::CreateChannelModerator).
///
/// `ParseStrictResponse` impl for `CreateChannelModerator`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateChannelModerator {
    _private: (),
}
impl CreateChannelModerator {
    /// Creates a new builder-style object to manufacture [`CreateChannelModeratorInput`](crate::input::CreateChannelModeratorInput).
    pub fn builder() -> crate::input::create_channel_moderator_input::Builder {
        crate::input::create_channel_moderator_input::Builder::default()
    }
    /// Creates a new `CreateChannelModerator` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateChannelModerator {
    type Output = std::result::Result<
        crate::output::CreateChannelModeratorOutput,
        crate::error::CreateChannelModeratorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_channel_moderator::de_create_channel_moderator_http_error(response)
        } else {
            crate::protocol_serde::shape_create_channel_moderator::de_create_channel_moderator_http_response(response)
        }
    }
}

/// Operation shape for `DeleteChannel`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_channel`](crate::client::fluent_builders::DeleteChannel).
///
/// `ParseStrictResponse` impl for `DeleteChannel`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteChannel {
    _private: (),
}
impl DeleteChannel {
    /// Creates a new builder-style object to manufacture [`DeleteChannelInput`](crate::input::DeleteChannelInput).
    pub fn builder() -> crate::input::delete_channel_input::Builder {
        crate::input::delete_channel_input::Builder::default()
    }
    /// Creates a new `DeleteChannel` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteChannel {
    type Output =
        std::result::Result<crate::output::DeleteChannelOutput, crate::error::DeleteChannelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_channel::de_delete_channel_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_channel::de_delete_channel_http_response(response)
        }
    }
}

/// Operation shape for `DeleteChannelBan`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_channel_ban`](crate::client::fluent_builders::DeleteChannelBan).
///
/// `ParseStrictResponse` impl for `DeleteChannelBan`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteChannelBan {
    _private: (),
}
impl DeleteChannelBan {
    /// Creates a new builder-style object to manufacture [`DeleteChannelBanInput`](crate::input::DeleteChannelBanInput).
    pub fn builder() -> crate::input::delete_channel_ban_input::Builder {
        crate::input::delete_channel_ban_input::Builder::default()
    }
    /// Creates a new `DeleteChannelBan` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteChannelBan {
    type Output = std::result::Result<
        crate::output::DeleteChannelBanOutput,
        crate::error::DeleteChannelBanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_channel_ban::de_delete_channel_ban_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_channel_ban::de_delete_channel_ban_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteChannelFlow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_channel_flow`](crate::client::fluent_builders::DeleteChannelFlow).
///
/// `ParseStrictResponse` impl for `DeleteChannelFlow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteChannelFlow {
    _private: (),
}
impl DeleteChannelFlow {
    /// Creates a new builder-style object to manufacture [`DeleteChannelFlowInput`](crate::input::DeleteChannelFlowInput).
    pub fn builder() -> crate::input::delete_channel_flow_input::Builder {
        crate::input::delete_channel_flow_input::Builder::default()
    }
    /// Creates a new `DeleteChannelFlow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteChannelFlow {
    type Output = std::result::Result<
        crate::output::DeleteChannelFlowOutput,
        crate::error::DeleteChannelFlowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_channel_flow::de_delete_channel_flow_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_channel_flow::de_delete_channel_flow_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteChannelMembership`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_channel_membership`](crate::client::fluent_builders::DeleteChannelMembership).
///
/// `ParseStrictResponse` impl for `DeleteChannelMembership`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteChannelMembership {
    _private: (),
}
impl DeleteChannelMembership {
    /// Creates a new builder-style object to manufacture [`DeleteChannelMembershipInput`](crate::input::DeleteChannelMembershipInput).
    pub fn builder() -> crate::input::delete_channel_membership_input::Builder {
        crate::input::delete_channel_membership_input::Builder::default()
    }
    /// Creates a new `DeleteChannelMembership` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteChannelMembership {
    type Output = std::result::Result<
        crate::output::DeleteChannelMembershipOutput,
        crate::error::DeleteChannelMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_channel_membership::de_delete_channel_membership_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_channel_membership::de_delete_channel_membership_http_response(response)
        }
    }
}

/// Operation shape for `DeleteChannelMessage`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_channel_message`](crate::client::fluent_builders::DeleteChannelMessage).
///
/// `ParseStrictResponse` impl for `DeleteChannelMessage`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteChannelMessage {
    _private: (),
}
impl DeleteChannelMessage {
    /// Creates a new builder-style object to manufacture [`DeleteChannelMessageInput`](crate::input::DeleteChannelMessageInput).
    pub fn builder() -> crate::input::delete_channel_message_input::Builder {
        crate::input::delete_channel_message_input::Builder::default()
    }
    /// Creates a new `DeleteChannelMessage` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteChannelMessage {
    type Output = std::result::Result<
        crate::output::DeleteChannelMessageOutput,
        crate::error::DeleteChannelMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_channel_message::de_delete_channel_message_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_channel_message::de_delete_channel_message_http_response(response)
        }
    }
}

/// Operation shape for `DeleteChannelModerator`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_channel_moderator`](crate::client::fluent_builders::DeleteChannelModerator).
///
/// `ParseStrictResponse` impl for `DeleteChannelModerator`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteChannelModerator {
    _private: (),
}
impl DeleteChannelModerator {
    /// Creates a new builder-style object to manufacture [`DeleteChannelModeratorInput`](crate::input::DeleteChannelModeratorInput).
    pub fn builder() -> crate::input::delete_channel_moderator_input::Builder {
        crate::input::delete_channel_moderator_input::Builder::default()
    }
    /// Creates a new `DeleteChannelModerator` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteChannelModerator {
    type Output = std::result::Result<
        crate::output::DeleteChannelModeratorOutput,
        crate::error::DeleteChannelModeratorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_channel_moderator::de_delete_channel_moderator_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_channel_moderator::de_delete_channel_moderator_http_response(response)
        }
    }
}

/// Operation shape for `DescribeChannel`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_channel`](crate::client::fluent_builders::DescribeChannel).
///
/// `ParseStrictResponse` impl for `DescribeChannel`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeChannel {
    _private: (),
}
impl DescribeChannel {
    /// Creates a new builder-style object to manufacture [`DescribeChannelInput`](crate::input::DescribeChannelInput).
    pub fn builder() -> crate::input::describe_channel_input::Builder {
        crate::input::describe_channel_input::Builder::default()
    }
    /// Creates a new `DescribeChannel` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeChannel {
    type Output = std::result::Result<
        crate::output::DescribeChannelOutput,
        crate::error::DescribeChannelError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_channel::de_describe_channel_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_channel::de_describe_channel_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeChannelBan`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_channel_ban`](crate::client::fluent_builders::DescribeChannelBan).
///
/// `ParseStrictResponse` impl for `DescribeChannelBan`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeChannelBan {
    _private: (),
}
impl DescribeChannelBan {
    /// Creates a new builder-style object to manufacture [`DescribeChannelBanInput`](crate::input::DescribeChannelBanInput).
    pub fn builder() -> crate::input::describe_channel_ban_input::Builder {
        crate::input::describe_channel_ban_input::Builder::default()
    }
    /// Creates a new `DescribeChannelBan` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeChannelBan {
    type Output = std::result::Result<
        crate::output::DescribeChannelBanOutput,
        crate::error::DescribeChannelBanError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_channel_ban::de_describe_channel_ban_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_channel_ban::de_describe_channel_ban_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeChannelFlow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_channel_flow`](crate::client::fluent_builders::DescribeChannelFlow).
///
/// `ParseStrictResponse` impl for `DescribeChannelFlow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeChannelFlow {
    _private: (),
}
impl DescribeChannelFlow {
    /// Creates a new builder-style object to manufacture [`DescribeChannelFlowInput`](crate::input::DescribeChannelFlowInput).
    pub fn builder() -> crate::input::describe_channel_flow_input::Builder {
        crate::input::describe_channel_flow_input::Builder::default()
    }
    /// Creates a new `DescribeChannelFlow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeChannelFlow {
    type Output = std::result::Result<
        crate::output::DescribeChannelFlowOutput,
        crate::error::DescribeChannelFlowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_channel_flow::de_describe_channel_flow_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_channel_flow::de_describe_channel_flow_http_response(response)
        }
    }
}

/// Operation shape for `DescribeChannelMembership`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_channel_membership`](crate::client::fluent_builders::DescribeChannelMembership).
///
/// `ParseStrictResponse` impl for `DescribeChannelMembership`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeChannelMembership {
    _private: (),
}
impl DescribeChannelMembership {
    /// Creates a new builder-style object to manufacture [`DescribeChannelMembershipInput`](crate::input::DescribeChannelMembershipInput).
    pub fn builder() -> crate::input::describe_channel_membership_input::Builder {
        crate::input::describe_channel_membership_input::Builder::default()
    }
    /// Creates a new `DescribeChannelMembership` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeChannelMembership {
    type Output = std::result::Result<
        crate::output::DescribeChannelMembershipOutput,
        crate::error::DescribeChannelMembershipError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_channel_membership::de_describe_channel_membership_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_channel_membership::de_describe_channel_membership_http_response(response)
        }
    }
}

/// Operation shape for `DescribeChannelMembershipForAppInstanceUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_channel_membership_for_app_instance_user`](crate::client::fluent_builders::DescribeChannelMembershipForAppInstanceUser).
///
/// `ParseStrictResponse` impl for `DescribeChannelMembershipForAppInstanceUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeChannelMembershipForAppInstanceUser {
    _private: (),
}
impl DescribeChannelMembershipForAppInstanceUser {
    /// Creates a new builder-style object to manufacture [`DescribeChannelMembershipForAppInstanceUserInput`](crate::input::DescribeChannelMembershipForAppInstanceUserInput).
    pub fn builder(
    ) -> crate::input::describe_channel_membership_for_app_instance_user_input::Builder {
        crate::input::describe_channel_membership_for_app_instance_user_input::Builder::default()
    }
    /// Creates a new `DescribeChannelMembershipForAppInstanceUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse
    for DescribeChannelMembershipForAppInstanceUser
{
    type Output = std::result::Result<
        crate::output::DescribeChannelMembershipForAppInstanceUserOutput,
        crate::error::DescribeChannelMembershipForAppInstanceUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_channel_membership_for_app_instance_user::de_describe_channel_membership_for_app_instance_user_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_channel_membership_for_app_instance_user::de_describe_channel_membership_for_app_instance_user_http_response(response)
        }
    }
}

/// Operation shape for `DescribeChannelModeratedByAppInstanceUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_channel_moderated_by_app_instance_user`](crate::client::fluent_builders::DescribeChannelModeratedByAppInstanceUser).
///
/// `ParseStrictResponse` impl for `DescribeChannelModeratedByAppInstanceUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeChannelModeratedByAppInstanceUser {
    _private: (),
}
impl DescribeChannelModeratedByAppInstanceUser {
    /// Creates a new builder-style object to manufacture [`DescribeChannelModeratedByAppInstanceUserInput`](crate::input::DescribeChannelModeratedByAppInstanceUserInput).
    pub fn builder() -> crate::input::describe_channel_moderated_by_app_instance_user_input::Builder
    {
        crate::input::describe_channel_moderated_by_app_instance_user_input::Builder::default()
    }
    /// Creates a new `DescribeChannelModeratedByAppInstanceUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeChannelModeratedByAppInstanceUser {
    type Output = std::result::Result<
        crate::output::DescribeChannelModeratedByAppInstanceUserOutput,
        crate::error::DescribeChannelModeratedByAppInstanceUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_channel_moderated_by_app_instance_user::de_describe_channel_moderated_by_app_instance_user_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_channel_moderated_by_app_instance_user::de_describe_channel_moderated_by_app_instance_user_http_response(response)
        }
    }
}

/// Operation shape for `DescribeChannelModerator`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_channel_moderator`](crate::client::fluent_builders::DescribeChannelModerator).
///
/// `ParseStrictResponse` impl for `DescribeChannelModerator`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeChannelModerator {
    _private: (),
}
impl DescribeChannelModerator {
    /// Creates a new builder-style object to manufacture [`DescribeChannelModeratorInput`](crate::input::DescribeChannelModeratorInput).
    pub fn builder() -> crate::input::describe_channel_moderator_input::Builder {
        crate::input::describe_channel_moderator_input::Builder::default()
    }
    /// Creates a new `DescribeChannelModerator` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeChannelModerator {
    type Output = std::result::Result<
        crate::output::DescribeChannelModeratorOutput,
        crate::error::DescribeChannelModeratorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_channel_moderator::de_describe_channel_moderator_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_channel_moderator::de_describe_channel_moderator_http_response(response)
        }
    }
}

/// Operation shape for `DisassociateChannelFlow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disassociate_channel_flow`](crate::client::fluent_builders::DisassociateChannelFlow).
///
/// `ParseStrictResponse` impl for `DisassociateChannelFlow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisassociateChannelFlow {
    _private: (),
}
impl DisassociateChannelFlow {
    /// Creates a new builder-style object to manufacture [`DisassociateChannelFlowInput`](crate::input::DisassociateChannelFlowInput).
    pub fn builder() -> crate::input::disassociate_channel_flow_input::Builder {
        crate::input::disassociate_channel_flow_input::Builder::default()
    }
    /// Creates a new `DisassociateChannelFlow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisassociateChannelFlow {
    type Output = std::result::Result<
        crate::output::DisassociateChannelFlowOutput,
        crate::error::DisassociateChannelFlowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_disassociate_channel_flow::de_disassociate_channel_flow_http_error(response)
        } else {
            crate::protocol_serde::shape_disassociate_channel_flow::de_disassociate_channel_flow_http_response(response)
        }
    }
}

/// Operation shape for `GetChannelMembershipPreferences`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_channel_membership_preferences`](crate::client::fluent_builders::GetChannelMembershipPreferences).
///
/// `ParseStrictResponse` impl for `GetChannelMembershipPreferences`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetChannelMembershipPreferences {
    _private: (),
}
impl GetChannelMembershipPreferences {
    /// Creates a new builder-style object to manufacture [`GetChannelMembershipPreferencesInput`](crate::input::GetChannelMembershipPreferencesInput).
    pub fn builder() -> crate::input::get_channel_membership_preferences_input::Builder {
        crate::input::get_channel_membership_preferences_input::Builder::default()
    }
    /// Creates a new `GetChannelMembershipPreferences` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetChannelMembershipPreferences {
    type Output = std::result::Result<
        crate::output::GetChannelMembershipPreferencesOutput,
        crate::error::GetChannelMembershipPreferencesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_channel_membership_preferences::de_get_channel_membership_preferences_http_error(response)
        } else {
            crate::protocol_serde::shape_get_channel_membership_preferences::de_get_channel_membership_preferences_http_response(response)
        }
    }
}

/// Operation shape for `GetChannelMessage`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_channel_message`](crate::client::fluent_builders::GetChannelMessage).
///
/// `ParseStrictResponse` impl for `GetChannelMessage`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetChannelMessage {
    _private: (),
}
impl GetChannelMessage {
    /// Creates a new builder-style object to manufacture [`GetChannelMessageInput`](crate::input::GetChannelMessageInput).
    pub fn builder() -> crate::input::get_channel_message_input::Builder {
        crate::input::get_channel_message_input::Builder::default()
    }
    /// Creates a new `GetChannelMessage` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetChannelMessage {
    type Output = std::result::Result<
        crate::output::GetChannelMessageOutput,
        crate::error::GetChannelMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_channel_message::de_get_channel_message_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_get_channel_message::de_get_channel_message_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetChannelMessageStatus`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_channel_message_status`](crate::client::fluent_builders::GetChannelMessageStatus).
///
/// `ParseStrictResponse` impl for `GetChannelMessageStatus`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetChannelMessageStatus {
    _private: (),
}
impl GetChannelMessageStatus {
    /// Creates a new builder-style object to manufacture [`GetChannelMessageStatusInput`](crate::input::GetChannelMessageStatusInput).
    pub fn builder() -> crate::input::get_channel_message_status_input::Builder {
        crate::input::get_channel_message_status_input::Builder::default()
    }
    /// Creates a new `GetChannelMessageStatus` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetChannelMessageStatus {
    type Output = std::result::Result<
        crate::output::GetChannelMessageStatusOutput,
        crate::error::GetChannelMessageStatusError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_channel_message_status::de_get_channel_message_status_http_error(response)
        } else {
            crate::protocol_serde::shape_get_channel_message_status::de_get_channel_message_status_http_response(response)
        }
    }
}

/// Operation shape for `GetMessagingSessionEndpoint`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_messaging_session_endpoint`](crate::client::fluent_builders::GetMessagingSessionEndpoint).
///
/// `ParseStrictResponse` impl for `GetMessagingSessionEndpoint`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetMessagingSessionEndpoint {
    _private: (),
}
impl GetMessagingSessionEndpoint {
    /// Creates a new builder-style object to manufacture [`GetMessagingSessionEndpointInput`](crate::input::GetMessagingSessionEndpointInput).
    pub fn builder() -> crate::input::get_messaging_session_endpoint_input::Builder {
        crate::input::get_messaging_session_endpoint_input::Builder::default()
    }
    /// Creates a new `GetMessagingSessionEndpoint` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetMessagingSessionEndpoint {
    type Output = std::result::Result<
        crate::output::GetMessagingSessionEndpointOutput,
        crate::error::GetMessagingSessionEndpointError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_messaging_session_endpoint::de_get_messaging_session_endpoint_http_error(response)
        } else {
            crate::protocol_serde::shape_get_messaging_session_endpoint::de_get_messaging_session_endpoint_http_response(response)
        }
    }
}

/// Operation shape for `ListChannelBans`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_channel_bans`](crate::client::fluent_builders::ListChannelBans).
///
/// `ParseStrictResponse` impl for `ListChannelBans`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListChannelBans {
    _private: (),
}
impl ListChannelBans {
    /// Creates a new builder-style object to manufacture [`ListChannelBansInput`](crate::input::ListChannelBansInput).
    pub fn builder() -> crate::input::list_channel_bans_input::Builder {
        crate::input::list_channel_bans_input::Builder::default()
    }
    /// Creates a new `ListChannelBans` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListChannelBans {
    type Output = std::result::Result<
        crate::output::ListChannelBansOutput,
        crate::error::ListChannelBansError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_channel_bans::de_list_channel_bans_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_channel_bans::de_list_channel_bans_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListChannelFlows`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_channel_flows`](crate::client::fluent_builders::ListChannelFlows).
///
/// `ParseStrictResponse` impl for `ListChannelFlows`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListChannelFlows {
    _private: (),
}
impl ListChannelFlows {
    /// Creates a new builder-style object to manufacture [`ListChannelFlowsInput`](crate::input::ListChannelFlowsInput).
    pub fn builder() -> crate::input::list_channel_flows_input::Builder {
        crate::input::list_channel_flows_input::Builder::default()
    }
    /// Creates a new `ListChannelFlows` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListChannelFlows {
    type Output = std::result::Result<
        crate::output::ListChannelFlowsOutput,
        crate::error::ListChannelFlowsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_channel_flows::de_list_channel_flows_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_channel_flows::de_list_channel_flows_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListChannelMemberships`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_channel_memberships`](crate::client::fluent_builders::ListChannelMemberships).
///
/// `ParseStrictResponse` impl for `ListChannelMemberships`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListChannelMemberships {
    _private: (),
}
impl ListChannelMemberships {
    /// Creates a new builder-style object to manufacture [`ListChannelMembershipsInput`](crate::input::ListChannelMembershipsInput).
    pub fn builder() -> crate::input::list_channel_memberships_input::Builder {
        crate::input::list_channel_memberships_input::Builder::default()
    }
    /// Creates a new `ListChannelMemberships` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListChannelMemberships {
    type Output = std::result::Result<
        crate::output::ListChannelMembershipsOutput,
        crate::error::ListChannelMembershipsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_channel_memberships::de_list_channel_memberships_http_error(response)
        } else {
            crate::protocol_serde::shape_list_channel_memberships::de_list_channel_memberships_http_response(response)
        }
    }
}

/// Operation shape for `ListChannelMembershipsForAppInstanceUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_channel_memberships_for_app_instance_user`](crate::client::fluent_builders::ListChannelMembershipsForAppInstanceUser).
///
/// `ParseStrictResponse` impl for `ListChannelMembershipsForAppInstanceUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListChannelMembershipsForAppInstanceUser {
    _private: (),
}
impl ListChannelMembershipsForAppInstanceUser {
    /// Creates a new builder-style object to manufacture [`ListChannelMembershipsForAppInstanceUserInput`](crate::input::ListChannelMembershipsForAppInstanceUserInput).
    pub fn builder() -> crate::input::list_channel_memberships_for_app_instance_user_input::Builder
    {
        crate::input::list_channel_memberships_for_app_instance_user_input::Builder::default()
    }
    /// Creates a new `ListChannelMembershipsForAppInstanceUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListChannelMembershipsForAppInstanceUser {
    type Output = std::result::Result<
        crate::output::ListChannelMembershipsForAppInstanceUserOutput,
        crate::error::ListChannelMembershipsForAppInstanceUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_channel_memberships_for_app_instance_user::de_list_channel_memberships_for_app_instance_user_http_error(response)
        } else {
            crate::protocol_serde::shape_list_channel_memberships_for_app_instance_user::de_list_channel_memberships_for_app_instance_user_http_response(response)
        }
    }
}

/// Operation shape for `ListChannelMessages`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_channel_messages`](crate::client::fluent_builders::ListChannelMessages).
///
/// `ParseStrictResponse` impl for `ListChannelMessages`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListChannelMessages {
    _private: (),
}
impl ListChannelMessages {
    /// Creates a new builder-style object to manufacture [`ListChannelMessagesInput`](crate::input::ListChannelMessagesInput).
    pub fn builder() -> crate::input::list_channel_messages_input::Builder {
        crate::input::list_channel_messages_input::Builder::default()
    }
    /// Creates a new `ListChannelMessages` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListChannelMessages {
    type Output = std::result::Result<
        crate::output::ListChannelMessagesOutput,
        crate::error::ListChannelMessagesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_channel_messages::de_list_channel_messages_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_channel_messages::de_list_channel_messages_http_response(response)
        }
    }
}

/// Operation shape for `ListChannelModerators`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_channel_moderators`](crate::client::fluent_builders::ListChannelModerators).
///
/// `ParseStrictResponse` impl for `ListChannelModerators`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListChannelModerators {
    _private: (),
}
impl ListChannelModerators {
    /// Creates a new builder-style object to manufacture [`ListChannelModeratorsInput`](crate::input::ListChannelModeratorsInput).
    pub fn builder() -> crate::input::list_channel_moderators_input::Builder {
        crate::input::list_channel_moderators_input::Builder::default()
    }
    /// Creates a new `ListChannelModerators` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListChannelModerators {
    type Output = std::result::Result<
        crate::output::ListChannelModeratorsOutput,
        crate::error::ListChannelModeratorsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_channel_moderators::de_list_channel_moderators_http_error(response)
        } else {
            crate::protocol_serde::shape_list_channel_moderators::de_list_channel_moderators_http_response(response)
        }
    }
}

/// Operation shape for `ListChannels`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_channels`](crate::client::fluent_builders::ListChannels).
///
/// `ParseStrictResponse` impl for `ListChannels`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListChannels {
    _private: (),
}
impl ListChannels {
    /// Creates a new builder-style object to manufacture [`ListChannelsInput`](crate::input::ListChannelsInput).
    pub fn builder() -> crate::input::list_channels_input::Builder {
        crate::input::list_channels_input::Builder::default()
    }
    /// Creates a new `ListChannels` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListChannels {
    type Output =
        std::result::Result<crate::output::ListChannelsOutput, crate::error::ListChannelsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_channels::de_list_channels_http_error(response)
        } else {
            crate::protocol_serde::shape_list_channels::de_list_channels_http_response(response)
        }
    }
}

/// Operation shape for `ListChannelsAssociatedWithChannelFlow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_channels_associated_with_channel_flow`](crate::client::fluent_builders::ListChannelsAssociatedWithChannelFlow).
///
/// `ParseStrictResponse` impl for `ListChannelsAssociatedWithChannelFlow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListChannelsAssociatedWithChannelFlow {
    _private: (),
}
impl ListChannelsAssociatedWithChannelFlow {
    /// Creates a new builder-style object to manufacture [`ListChannelsAssociatedWithChannelFlowInput`](crate::input::ListChannelsAssociatedWithChannelFlowInput).
    pub fn builder() -> crate::input::list_channels_associated_with_channel_flow_input::Builder {
        crate::input::list_channels_associated_with_channel_flow_input::Builder::default()
    }
    /// Creates a new `ListChannelsAssociatedWithChannelFlow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListChannelsAssociatedWithChannelFlow {
    type Output = std::result::Result<
        crate::output::ListChannelsAssociatedWithChannelFlowOutput,
        crate::error::ListChannelsAssociatedWithChannelFlowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_channels_associated_with_channel_flow::de_list_channels_associated_with_channel_flow_http_error(response)
        } else {
            crate::protocol_serde::shape_list_channels_associated_with_channel_flow::de_list_channels_associated_with_channel_flow_http_response(response)
        }
    }
}

/// Operation shape for `ListChannelsModeratedByAppInstanceUser`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_channels_moderated_by_app_instance_user`](crate::client::fluent_builders::ListChannelsModeratedByAppInstanceUser).
///
/// `ParseStrictResponse` impl for `ListChannelsModeratedByAppInstanceUser`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListChannelsModeratedByAppInstanceUser {
    _private: (),
}
impl ListChannelsModeratedByAppInstanceUser {
    /// Creates a new builder-style object to manufacture [`ListChannelsModeratedByAppInstanceUserInput`](crate::input::ListChannelsModeratedByAppInstanceUserInput).
    pub fn builder() -> crate::input::list_channels_moderated_by_app_instance_user_input::Builder {
        crate::input::list_channels_moderated_by_app_instance_user_input::Builder::default()
    }
    /// Creates a new `ListChannelsModeratedByAppInstanceUser` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListChannelsModeratedByAppInstanceUser {
    type Output = std::result::Result<
        crate::output::ListChannelsModeratedByAppInstanceUserOutput,
        crate::error::ListChannelsModeratedByAppInstanceUserError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_channels_moderated_by_app_instance_user::de_list_channels_moderated_by_app_instance_user_http_error(response)
        } else {
            crate::protocol_serde::shape_list_channels_moderated_by_app_instance_user::de_list_channels_moderated_by_app_instance_user_http_response(response)
        }
    }
}

/// Operation shape for `ListSubChannels`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_sub_channels`](crate::client::fluent_builders::ListSubChannels).
///
/// `ParseStrictResponse` impl for `ListSubChannels`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListSubChannels {
    _private: (),
}
impl ListSubChannels {
    /// Creates a new builder-style object to manufacture [`ListSubChannelsInput`](crate::input::ListSubChannelsInput).
    pub fn builder() -> crate::input::list_sub_channels_input::Builder {
        crate::input::list_sub_channels_input::Builder::default()
    }
    /// Creates a new `ListSubChannels` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListSubChannels {
    type Output = std::result::Result<
        crate::output::ListSubChannelsOutput,
        crate::error::ListSubChannelsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_sub_channels::de_list_sub_channels_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_sub_channels::de_list_sub_channels_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `PutChannelMembershipPreferences`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`put_channel_membership_preferences`](crate::client::fluent_builders::PutChannelMembershipPreferences).
///
/// `ParseStrictResponse` impl for `PutChannelMembershipPreferences`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PutChannelMembershipPreferences {
    _private: (),
}
impl PutChannelMembershipPreferences {
    /// Creates a new builder-style object to manufacture [`PutChannelMembershipPreferencesInput`](crate::input::PutChannelMembershipPreferencesInput).
    pub fn builder() -> crate::input::put_channel_membership_preferences_input::Builder {
        crate::input::put_channel_membership_preferences_input::Builder::default()
    }
    /// Creates a new `PutChannelMembershipPreferences` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PutChannelMembershipPreferences {
    type Output = std::result::Result<
        crate::output::PutChannelMembershipPreferencesOutput,
        crate::error::PutChannelMembershipPreferencesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_put_channel_membership_preferences::de_put_channel_membership_preferences_http_error(response)
        } else {
            crate::protocol_serde::shape_put_channel_membership_preferences::de_put_channel_membership_preferences_http_response(response)
        }
    }
}

/// Operation shape for `RedactChannelMessage`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`redact_channel_message`](crate::client::fluent_builders::RedactChannelMessage).
///
/// `ParseStrictResponse` impl for `RedactChannelMessage`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RedactChannelMessage {
    _private: (),
}
impl RedactChannelMessage {
    /// Creates a new builder-style object to manufacture [`RedactChannelMessageInput`](crate::input::RedactChannelMessageInput).
    pub fn builder() -> crate::input::redact_channel_message_input::Builder {
        crate::input::redact_channel_message_input::Builder::default()
    }
    /// Creates a new `RedactChannelMessage` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RedactChannelMessage {
    type Output = std::result::Result<
        crate::output::RedactChannelMessageOutput,
        crate::error::RedactChannelMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_redact_channel_message::de_redact_channel_message_http_error(response)
        } else {
            crate::protocol_serde::shape_redact_channel_message::de_redact_channel_message_http_response(response)
        }
    }
}

/// Operation shape for `SearchChannels`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`search_channels`](crate::client::fluent_builders::SearchChannels).
///
/// `ParseStrictResponse` impl for `SearchChannels`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct SearchChannels {
    _private: (),
}
impl SearchChannels {
    /// Creates a new builder-style object to manufacture [`SearchChannelsInput`](crate::input::SearchChannelsInput).
    pub fn builder() -> crate::input::search_channels_input::Builder {
        crate::input::search_channels_input::Builder::default()
    }
    /// Creates a new `SearchChannels` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for SearchChannels {
    type Output =
        std::result::Result<crate::output::SearchChannelsOutput, crate::error::SearchChannelsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_search_channels::de_search_channels_http_error(response)
        } else {
            crate::protocol_serde::shape_search_channels::de_search_channels_http_response(response)
        }
    }
}

/// Operation shape for `SendChannelMessage`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`send_channel_message`](crate::client::fluent_builders::SendChannelMessage).
///
/// `ParseStrictResponse` impl for `SendChannelMessage`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct SendChannelMessage {
    _private: (),
}
impl SendChannelMessage {
    /// Creates a new builder-style object to manufacture [`SendChannelMessageInput`](crate::input::SendChannelMessageInput).
    pub fn builder() -> crate::input::send_channel_message_input::Builder {
        crate::input::send_channel_message_input::Builder::default()
    }
    /// Creates a new `SendChannelMessage` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for SendChannelMessage {
    type Output = std::result::Result<
        crate::output::SendChannelMessageOutput,
        crate::error::SendChannelMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_send_channel_message::de_send_channel_message_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_send_channel_message::de_send_channel_message_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateChannel`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_channel`](crate::client::fluent_builders::UpdateChannel).
///
/// `ParseStrictResponse` impl for `UpdateChannel`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateChannel {
    _private: (),
}
impl UpdateChannel {
    /// Creates a new builder-style object to manufacture [`UpdateChannelInput`](crate::input::UpdateChannelInput).
    pub fn builder() -> crate::input::update_channel_input::Builder {
        crate::input::update_channel_input::Builder::default()
    }
    /// Creates a new `UpdateChannel` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateChannel {
    type Output =
        std::result::Result<crate::output::UpdateChannelOutput, crate::error::UpdateChannelError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_channel::de_update_channel_http_error(response)
        } else {
            crate::protocol_serde::shape_update_channel::de_update_channel_http_response(response)
        }
    }
}

/// Operation shape for `UpdateChannelFlow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_channel_flow`](crate::client::fluent_builders::UpdateChannelFlow).
///
/// `ParseStrictResponse` impl for `UpdateChannelFlow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateChannelFlow {
    _private: (),
}
impl UpdateChannelFlow {
    /// Creates a new builder-style object to manufacture [`UpdateChannelFlowInput`](crate::input::UpdateChannelFlowInput).
    pub fn builder() -> crate::input::update_channel_flow_input::Builder {
        crate::input::update_channel_flow_input::Builder::default()
    }
    /// Creates a new `UpdateChannelFlow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateChannelFlow {
    type Output = std::result::Result<
        crate::output::UpdateChannelFlowOutput,
        crate::error::UpdateChannelFlowError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_channel_flow::de_update_channel_flow_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_channel_flow::de_update_channel_flow_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateChannelMessage`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_channel_message`](crate::client::fluent_builders::UpdateChannelMessage).
///
/// `ParseStrictResponse` impl for `UpdateChannelMessage`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateChannelMessage {
    _private: (),
}
impl UpdateChannelMessage {
    /// Creates a new builder-style object to manufacture [`UpdateChannelMessageInput`](crate::input::UpdateChannelMessageInput).
    pub fn builder() -> crate::input::update_channel_message_input::Builder {
        crate::input::update_channel_message_input::Builder::default()
    }
    /// Creates a new `UpdateChannelMessage` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateChannelMessage {
    type Output = std::result::Result<
        crate::output::UpdateChannelMessageOutput,
        crate::error::UpdateChannelMessageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_channel_message::de_update_channel_message_http_error(response)
        } else {
            crate::protocol_serde::shape_update_channel_message::de_update_channel_message_http_response(response)
        }
    }
}

/// Operation shape for `UpdateChannelReadMarker`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_channel_read_marker`](crate::client::fluent_builders::UpdateChannelReadMarker).
///
/// `ParseStrictResponse` impl for `UpdateChannelReadMarker`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateChannelReadMarker {
    _private: (),
}
impl UpdateChannelReadMarker {
    /// Creates a new builder-style object to manufacture [`UpdateChannelReadMarkerInput`](crate::input::UpdateChannelReadMarkerInput).
    pub fn builder() -> crate::input::update_channel_read_marker_input::Builder {
        crate::input::update_channel_read_marker_input::Builder::default()
    }
    /// Creates a new `UpdateChannelReadMarker` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateChannelReadMarker {
    type Output = std::result::Result<
        crate::output::UpdateChannelReadMarkerOutput,
        crate::error::UpdateChannelReadMarkerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_channel_read_marker::de_update_channel_read_marker_http_error(response)
        } else {
            crate::protocol_serde::shape_update_channel_read_marker::de_update_channel_read_marker_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
