// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_channel_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_channel::CreateChannelInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.app_instance_arn {
        object.key("AppInstanceArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.channel_id {
        object.key("ChannelId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.elastic_channel_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("ElasticChannelConfiguration").start_object();
        crate::protocol_serde::shape_elastic_channel_configuration::ser_elastic_channel_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.member_arns {
        let mut array_7 = object.key("MemberArns").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.metadata {
        object.key("Metadata").string(var_9.as_str());
    }
    if let Some(var_10) = &input.mode {
        object.key("Mode").string(var_10.as_str());
    }
    if let Some(var_11) = &input.moderator_arns {
        let mut array_12 = object.key("ModeratorArns").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.name {
        object.key("Name").string(var_14.as_str());
    }
    if let Some(var_15) = &input.privacy {
        object.key("Privacy").string(var_15.as_str());
    }
    if let Some(var_16) = &input.tags {
        let mut array_17 = object.key("Tags").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    Ok(())
}
