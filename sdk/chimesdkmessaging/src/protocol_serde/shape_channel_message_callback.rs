// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_channel_message_callback(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ChannelMessageCallback,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.message_id {
        object.key("MessageId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.content {
        object.key("Content").string(var_2.as_str());
    }
    if let Some(var_3) = &input.metadata {
        object.key("Metadata").string(var_3.as_str());
    }
    if let Some(var_4) = &input.push_notification {
        #[allow(unused_mut)]
        let mut object_5 = object.key("PushNotification").start_object();
        crate::protocol_serde::shape_push_notification_configuration::ser_push_notification_configuration(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.message_attributes {
        #[allow(unused_mut)]
        let mut object_7 = object.key("MessageAttributes").start_object();
        for (key_8, value_9) in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_10 = object_7.key(key_8.as_str()).start_object();
                crate::protocol_serde::shape_message_attribute_value::ser_message_attribute_value(
                    &mut object_10,
                    value_9,
                )?;
                object_10.finish();
            }
        }
        object_7.finish();
    }
    if let Some(var_11) = &input.sub_channel_id {
        object.key("SubChannelId").string(var_11.as_str());
    }
    Ok(())
}
