// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_send_channel_message_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::send_channel_message::SendChannelMessageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.content {
        object.key("Content").string(var_2.as_str());
    }
    if let Some(var_3) = &input.message_attributes {
        #[allow(unused_mut)]
        let mut object_4 = object.key("MessageAttributes").start_object();
        for (key_5, value_6) in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_7 = object_4.key(key_5.as_str()).start_object();
                crate::protocol_serde::shape_message_attribute_value::ser_message_attribute_value(
                    &mut object_7,
                    value_6,
                )?;
                object_7.finish();
            }
        }
        object_4.finish();
    }
    if let Some(var_8) = &input.metadata {
        object.key("Metadata").string(var_8.as_str());
    }
    if let Some(var_9) = &input.persistence {
        object.key("Persistence").string(var_9.as_str());
    }
    if let Some(var_10) = &input.push_notification {
        #[allow(unused_mut)]
        let mut object_11 = object.key("PushNotification").start_object();
        crate::protocol_serde::shape_push_notification_configuration::ser_push_notification_configuration(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.sub_channel_id {
        object.key("SubChannelId").string(var_12.as_str());
    }
    if let Some(var_13) = &input.r#type {
        object.key("Type").string(var_13.as_str());
    }
    Ok(())
}
