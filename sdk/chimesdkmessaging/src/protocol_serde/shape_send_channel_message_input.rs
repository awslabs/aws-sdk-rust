// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_send_channel_message_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::send_channel_message::SendChannelMessageInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.content {
        object.key("Content").string(var_2.as_str());
    }
    if let Some(var_3) = &input.content_type {
        object.key("ContentType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.message_attributes {
        #[allow(unused_mut)]
        let mut object_5 = object.key("MessageAttributes").start_object();
        for (key_6, value_7) in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_8 = object_5.key(key_6.as_str()).start_object();
                crate::protocol_serde::shape_message_attribute_value::ser_message_attribute_value(&mut object_8, value_7)?;
                object_8.finish();
            }
        }
        object_5.finish();
    }
    if let Some(var_9) = &input.metadata {
        object.key("Metadata").string(var_9.as_str());
    }
    if let Some(var_10) = &input.persistence {
        object.key("Persistence").string(var_10.as_str());
    }
    if let Some(var_11) = &input.push_notification {
        #[allow(unused_mut)]
        let mut object_12 = object.key("PushNotification").start_object();
        crate::protocol_serde::shape_push_notification_configuration::ser_push_notification_configuration(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.sub_channel_id {
        object.key("SubChannelId").string(var_13.as_str());
    }
    if let Some(var_14) = &input.target {
        let mut array_15 = object.key("Target").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_target::ser_target(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    if let Some(var_18) = &input.r#type {
        object.key("Type").string(var_18.as_str());
    }
    Ok(())
}
