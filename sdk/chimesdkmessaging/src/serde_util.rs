// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn expiration_settings_correct_errors(
    mut builder: crate::types::builders::ExpirationSettingsBuilder,
) -> crate::types::builders::ExpirationSettingsBuilder {
    if builder.expiration_days.is_none() {
        builder.expiration_days = Some(Default::default())
    }
    if builder.expiration_criterion.is_none() {
        builder.expiration_criterion = "no value was set".parse::<crate::types::ExpirationCriterion>().ok()
    }
    builder
}

pub(crate) fn elastic_channel_configuration_correct_errors(
    mut builder: crate::types::builders::ElasticChannelConfigurationBuilder,
) -> crate::types::builders::ElasticChannelConfigurationBuilder {
    if builder.maximum_sub_channels.is_none() {
        builder.maximum_sub_channels = Some(Default::default())
    }
    if builder.target_memberships_per_sub_channel.is_none() {
        builder.target_memberships_per_sub_channel = Some(Default::default())
    }
    if builder.minimum_membership_percentage.is_none() {
        builder.minimum_membership_percentage = Some(Default::default())
    }
    builder
}

pub(crate) fn push_notification_preferences_correct_errors(
    mut builder: crate::types::builders::PushNotificationPreferencesBuilder,
) -> crate::types::builders::PushNotificationPreferencesBuilder {
    if builder.allow_notifications.is_none() {
        builder.allow_notifications = "no value was set".parse::<crate::types::AllowNotifications>().ok()
    }
    builder
}

pub(crate) fn streaming_configuration_correct_errors(
    mut builder: crate::types::builders::StreamingConfigurationBuilder,
) -> crate::types::builders::StreamingConfigurationBuilder {
    if builder.data_type.is_none() {
        builder.data_type = "no value was set".parse::<crate::types::MessagingDataType>().ok()
    }
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn processor_correct_errors(mut builder: crate::types::builders::ProcessorBuilder) -> crate::types::builders::ProcessorBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.configuration.is_none() {
        builder.configuration = {
            let builder = crate::types::builders::ProcessorConfigurationBuilder::default();
            Some(crate::serde_util::processor_configuration_correct_errors(builder).build())
        }
    }
    if builder.execution_order.is_none() {
        builder.execution_order = Some(Default::default())
    }
    if builder.fallback_action.is_none() {
        builder.fallback_action = "no value was set".parse::<crate::types::FallbackAction>().ok()
    }
    builder
}

pub(crate) fn processor_configuration_correct_errors(
    mut builder: crate::types::builders::ProcessorConfigurationBuilder,
) -> crate::types::builders::ProcessorConfigurationBuilder {
    if builder.lambda.is_none() {
        builder.lambda = {
            let builder = crate::types::builders::LambdaConfigurationBuilder::default();
            crate::serde_util::lambda_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn lambda_configuration_correct_errors(
    mut builder: crate::types::builders::LambdaConfigurationBuilder,
) -> crate::types::builders::LambdaConfigurationBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.invocation_type.is_none() {
        builder.invocation_type = "no value was set".parse::<crate::types::InvocationType>().ok()
    }
    builder
}
