// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetChannelMembershipPreferencesOutput {
    /// <p>The ARN of the channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>The details of a user.</p>
    #[doc(hidden)]
    pub member: std::option::Option<crate::types::Identity>,
    /// <p>The channel membership preferences for an <code>AppInstanceUser</code> .</p>
    #[doc(hidden)]
    pub preferences: std::option::Option<crate::types::ChannelMembershipPreferences>,
    _request_id: Option<String>,
}
impl GetChannelMembershipPreferencesOutput {
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The details of a user.</p>
    pub fn member(&self) -> std::option::Option<&crate::types::Identity> {
        self.member.as_ref()
    }
    /// <p>The channel membership preferences for an <code>AppInstanceUser</code> .</p>
    pub fn preferences(&self) -> std::option::Option<&crate::types::ChannelMembershipPreferences> {
        self.preferences.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetChannelMembershipPreferencesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetChannelMembershipPreferencesOutput {
    /// Creates a new builder-style object to manufacture [`GetChannelMembershipPreferencesOutput`](crate::operation::get_channel_membership_preferences::GetChannelMembershipPreferencesOutput).
    pub fn builder() -> crate::operation::get_channel_membership_preferences::builders::GetChannelMembershipPreferencesOutputBuilder{
        crate::operation::get_channel_membership_preferences::builders::GetChannelMembershipPreferencesOutputBuilder::default()
    }
}

/// A builder for [`GetChannelMembershipPreferencesOutput`](crate::operation::get_channel_membership_preferences::GetChannelMembershipPreferencesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetChannelMembershipPreferencesOutputBuilder {
    pub(crate) channel_arn: std::option::Option<std::string::String>,
    pub(crate) member: std::option::Option<crate::types::Identity>,
    pub(crate) preferences: std::option::Option<crate::types::ChannelMembershipPreferences>,
    _request_id: Option<String>,
}
impl GetChannelMembershipPreferencesOutputBuilder {
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the channel.</p>
    pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p>The details of a user.</p>
    pub fn member(mut self, input: crate::types::Identity) -> Self {
        self.member = Some(input);
        self
    }
    /// <p>The details of a user.</p>
    pub fn set_member(mut self, input: std::option::Option<crate::types::Identity>) -> Self {
        self.member = input;
        self
    }
    /// <p>The channel membership preferences for an <code>AppInstanceUser</code> .</p>
    pub fn preferences(mut self, input: crate::types::ChannelMembershipPreferences) -> Self {
        self.preferences = Some(input);
        self
    }
    /// <p>The channel membership preferences for an <code>AppInstanceUser</code> .</p>
    pub fn set_preferences(
        mut self,
        input: std::option::Option<crate::types::ChannelMembershipPreferences>,
    ) -> Self {
        self.preferences = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetChannelMembershipPreferencesOutput`](crate::operation::get_channel_membership_preferences::GetChannelMembershipPreferencesOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_channel_membership_preferences::GetChannelMembershipPreferencesOutput
    {
        crate::operation::get_channel_membership_preferences::GetChannelMembershipPreferencesOutput {
            channel_arn: self.channel_arn
            ,
            member: self.member
            ,
            preferences: self.preferences
            ,
            _request_id: self._request_id,
        }
    }
}
