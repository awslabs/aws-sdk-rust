// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_channel::_create_channel_output::CreateChannelOutputBuilder;

pub use crate::operation::create_channel::_create_channel_input::CreateChannelInputBuilder;

impl crate::operation::create_channel::builders::CreateChannelInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_channel::CreateChannelOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_channel::CreateChannelError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_channel();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateChannel`.
///
/// <p>Creates a channel to which you can add users and send messages.</p>
/// <p><b>Restriction</b>: You can't change a channel's privacy.</p><note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call as the value in the header.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateChannelFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_channel::builders::CreateChannelInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_channel::CreateChannelOutput,
        crate::operation::create_channel::CreateChannelError,
    > for CreateChannelFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_channel::CreateChannelOutput,
            crate::operation::create_channel::CreateChannelError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateChannelFluentBuilder {
    /// Creates a new `CreateChannel`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateChannel as a reference.
    pub fn as_input(&self) -> &crate::operation::create_channel::builders::CreateChannelInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_channel::CreateChannelOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_channel::CreateChannelError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_channel::CreateChannel::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_channel::CreateChannel::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_channel::CreateChannelOutput,
        crate::operation::create_channel::CreateChannelError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ARN of the channel request.</p>
    pub fn app_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.app_instance_arn(input.into());
        self
    }
    /// <p>The ARN of the channel request.</p>
    pub fn set_app_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_app_instance_arn(input);
        self
    }
    /// <p>The ARN of the channel request.</p>
    pub fn get_app_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_app_instance_arn()
    }
    /// <p>The name of the channel.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the channel.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The name of the channel.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
    /// <p>The channel mode: <code>UNRESTRICTED</code> or <code>RESTRICTED</code>. Administrators, moderators, and channel members can add themselves and other members to unrestricted channels. Only administrators and moderators can add members to restricted channels.</p>
    pub fn mode(mut self, input: crate::types::ChannelMode) -> Self {
        self.inner = self.inner.mode(input);
        self
    }
    /// <p>The channel mode: <code>UNRESTRICTED</code> or <code>RESTRICTED</code>. Administrators, moderators, and channel members can add themselves and other members to unrestricted channels. Only administrators and moderators can add members to restricted channels.</p>
    pub fn set_mode(mut self, input: ::std::option::Option<crate::types::ChannelMode>) -> Self {
        self.inner = self.inner.set_mode(input);
        self
    }
    /// <p>The channel mode: <code>UNRESTRICTED</code> or <code>RESTRICTED</code>. Administrators, moderators, and channel members can add themselves and other members to unrestricted channels. Only administrators and moderators can add members to restricted channels.</p>
    pub fn get_mode(&self) -> &::std::option::Option<crate::types::ChannelMode> {
        self.inner.get_mode()
    }
    /// <p>The channel's privacy level: <code>PUBLIC</code> or <code>PRIVATE</code>. Private channels aren't discoverable by users outside the channel. Public channels are discoverable by anyone in the <code>AppInstance</code>.</p>
    pub fn privacy(mut self, input: crate::types::ChannelPrivacy) -> Self {
        self.inner = self.inner.privacy(input);
        self
    }
    /// <p>The channel's privacy level: <code>PUBLIC</code> or <code>PRIVATE</code>. Private channels aren't discoverable by users outside the channel. Public channels are discoverable by anyone in the <code>AppInstance</code>.</p>
    pub fn set_privacy(mut self, input: ::std::option::Option<crate::types::ChannelPrivacy>) -> Self {
        self.inner = self.inner.set_privacy(input);
        self
    }
    /// <p>The channel's privacy level: <code>PUBLIC</code> or <code>PRIVATE</code>. Private channels aren't discoverable by users outside the channel. Public channels are discoverable by anyone in the <code>AppInstance</code>.</p>
    pub fn get_privacy(&self) -> &::std::option::Option<crate::types::ChannelPrivacy> {
        self.inner.get_privacy()
    }
    /// <p>The metadata of the creation request. Limited to 1KB and UTF-8.</p>
    pub fn metadata(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.metadata(input.into());
        self
    }
    /// <p>The metadata of the creation request. Limited to 1KB and UTF-8.</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_metadata(input);
        self
    }
    /// <p>The metadata of the creation request. Limited to 1KB and UTF-8.</p>
    pub fn get_metadata(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_metadata()
    }
    /// <p>The client token for the request. An <code>Idempotency</code> token.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>The client token for the request. An <code>Idempotency</code> token.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>The client token for the request. An <code>Idempotency</code> token.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_request_token()
    }
    ///
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for the creation request.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The tags for the creation request.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags for the creation request.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
    /// <p>The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.</p>
    pub fn chime_bearer(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.chime_bearer(input.into());
        self
    }
    /// <p>The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.</p>
    pub fn set_chime_bearer(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_chime_bearer(input);
        self
    }
    /// <p>The ARN of the <code>AppInstanceUser</code> or <code>AppInstanceBot</code> that makes the API call.</p>
    pub fn get_chime_bearer(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_chime_bearer()
    }
    /// <p>The ID of the channel in the request.</p>
    pub fn channel_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.channel_id(input.into());
        self
    }
    /// <p>The ID of the channel in the request.</p>
    pub fn set_channel_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_channel_id(input);
        self
    }
    /// <p>The ID of the channel in the request.</p>
    pub fn get_channel_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_channel_id()
    }
    ///
    /// Appends an item to `MemberArns`.
    ///
    /// To override the contents of this collection use [`set_member_arns`](Self::set_member_arns).
    ///
    /// <p>The ARNs of the channel members in the request.</p>
    pub fn member_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.member_arns(input.into());
        self
    }
    /// <p>The ARNs of the channel members in the request.</p>
    pub fn set_member_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_member_arns(input);
        self
    }
    /// <p>The ARNs of the channel members in the request.</p>
    pub fn get_member_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_member_arns()
    }
    ///
    /// Appends an item to `ModeratorArns`.
    ///
    /// To override the contents of this collection use [`set_moderator_arns`](Self::set_moderator_arns).
    ///
    /// <p>The ARNs of the channel moderators in the request.</p>
    pub fn moderator_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.moderator_arns(input.into());
        self
    }
    /// <p>The ARNs of the channel moderators in the request.</p>
    pub fn set_moderator_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_moderator_arns(input);
        self
    }
    /// <p>The ARNs of the channel moderators in the request.</p>
    pub fn get_moderator_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_moderator_arns()
    }
    /// <p>The attributes required to configure and create an elastic channel. An elastic channel can support a maximum of 1-million users, excluding moderators.</p>
    pub fn elastic_channel_configuration(mut self, input: crate::types::ElasticChannelConfiguration) -> Self {
        self.inner = self.inner.elastic_channel_configuration(input);
        self
    }
    /// <p>The attributes required to configure and create an elastic channel. An elastic channel can support a maximum of 1-million users, excluding moderators.</p>
    pub fn set_elastic_channel_configuration(mut self, input: ::std::option::Option<crate::types::ElasticChannelConfiguration>) -> Self {
        self.inner = self.inner.set_elastic_channel_configuration(input);
        self
    }
    /// <p>The attributes required to configure and create an elastic channel. An elastic channel can support a maximum of 1-million users, excluding moderators.</p>
    pub fn get_elastic_channel_configuration(&self) -> &::std::option::Option<crate::types::ElasticChannelConfiguration> {
        self.inner.get_elastic_channel_configuration()
    }
    /// <p>Settings that control the interval after which the channel is automatically deleted.</p>
    pub fn expiration_settings(mut self, input: crate::types::ExpirationSettings) -> Self {
        self.inner = self.inner.expiration_settings(input);
        self
    }
    /// <p>Settings that control the interval after which the channel is automatically deleted.</p>
    pub fn set_expiration_settings(mut self, input: ::std::option::Option<crate::types::ExpirationSettings>) -> Self {
        self.inner = self.inner.set_expiration_settings(input);
        self
    }
    /// <p>Settings that control the interval after which the channel is automatically deleted.</p>
    pub fn get_expiration_settings(&self) -> &::std::option::Option<crate::types::ExpirationSettings> {
        self.inner.get_expiration_settings()
    }
}
