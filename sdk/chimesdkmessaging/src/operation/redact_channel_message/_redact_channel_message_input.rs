// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RedactChannelMessageInput {
    /// <p>The ARN of the channel containing the messages that you want to redact.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>The ID of the message being redacted.</p>
    #[doc(hidden)]
    pub message_id: std::option::Option<std::string::String>,
    /// <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
    #[doc(hidden)]
    pub chime_bearer: std::option::Option<std::string::String>,
    /// <p>The ID of the SubChannel in the request.</p>
    #[doc(hidden)]
    pub sub_channel_id: std::option::Option<std::string::String>,
}
impl RedactChannelMessageInput {
    /// <p>The ARN of the channel containing the messages that you want to redact.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The ID of the message being redacted.</p>
    pub fn message_id(&self) -> std::option::Option<&str> {
        self.message_id.as_deref()
    }
    /// <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
    pub fn chime_bearer(&self) -> std::option::Option<&str> {
        self.chime_bearer.as_deref()
    }
    /// <p>The ID of the SubChannel in the request.</p>
    pub fn sub_channel_id(&self) -> std::option::Option<&str> {
        self.sub_channel_id.as_deref()
    }
}
impl RedactChannelMessageInput {
    /// Creates a new builder-style object to manufacture [`RedactChannelMessageInput`](crate::operation::redact_channel_message::RedactChannelMessageInput).
    pub fn builder(
    ) -> crate::operation::redact_channel_message::builders::RedactChannelMessageInputBuilder {
        crate::operation::redact_channel_message::builders::RedactChannelMessageInputBuilder::default()
    }
}

/// A builder for [`RedactChannelMessageInput`](crate::operation::redact_channel_message::RedactChannelMessageInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RedactChannelMessageInputBuilder {
    pub(crate) channel_arn: std::option::Option<std::string::String>,
    pub(crate) message_id: std::option::Option<std::string::String>,
    pub(crate) chime_bearer: std::option::Option<std::string::String>,
    pub(crate) sub_channel_id: std::option::Option<std::string::String>,
}
impl RedactChannelMessageInputBuilder {
    /// <p>The ARN of the channel containing the messages that you want to redact.</p>
    pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the channel containing the messages that you want to redact.</p>
    pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p>The ID of the message being redacted.</p>
    pub fn message_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.message_id = Some(input.into());
        self
    }
    /// <p>The ID of the message being redacted.</p>
    pub fn set_message_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message_id = input;
        self
    }
    /// <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
    pub fn chime_bearer(mut self, input: impl Into<std::string::String>) -> Self {
        self.chime_bearer = Some(input.into());
        self
    }
    /// <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
    pub fn set_chime_bearer(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.chime_bearer = input;
        self
    }
    /// <p>The ID of the SubChannel in the request.</p>
    pub fn sub_channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.sub_channel_id = Some(input.into());
        self
    }
    /// <p>The ID of the SubChannel in the request.</p>
    pub fn set_sub_channel_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sub_channel_id = input;
        self
    }
    /// Consumes the builder and constructs a [`RedactChannelMessageInput`](crate::operation::redact_channel_message::RedactChannelMessageInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::redact_channel_message::RedactChannelMessageInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::redact_channel_message::RedactChannelMessageInput {
                channel_arn: self.channel_arn,
                message_id: self.message_id,
                chime_bearer: self.chime_bearer,
                sub_channel_id: self.sub_channel_id,
            },
        )
    }
}
