// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ChannelFlowCallbackInput {
    /// <p>The identifier passed to the processor by the service when invoked. Use the identifier to call back the service.</p>
    #[doc(hidden)]
    pub callback_id: std::option::Option<std::string::String>,
    /// <p>The ARN of the channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>When a processor determines that a message needs to be <code>DENIED</code>, pass this parameter with a value of true.</p>
    #[doc(hidden)]
    pub delete_resource: bool,
    /// <p>Stores information about the processed message.</p>
    #[doc(hidden)]
    pub channel_message: std::option::Option<crate::types::ChannelMessageCallback>,
}
impl ChannelFlowCallbackInput {
    /// <p>The identifier passed to the processor by the service when invoked. Use the identifier to call back the service.</p>
    pub fn callback_id(&self) -> std::option::Option<&str> {
        self.callback_id.as_deref()
    }
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>When a processor determines that a message needs to be <code>DENIED</code>, pass this parameter with a value of true.</p>
    pub fn delete_resource(&self) -> bool {
        self.delete_resource
    }
    /// <p>Stores information about the processed message.</p>
    pub fn channel_message(&self) -> std::option::Option<&crate::types::ChannelMessageCallback> {
        self.channel_message.as_ref()
    }
}
impl ChannelFlowCallbackInput {
    /// Creates a new builder-style object to manufacture [`ChannelFlowCallbackInput`](crate::operation::channel_flow_callback::ChannelFlowCallbackInput).
    pub fn builder(
    ) -> crate::operation::channel_flow_callback::builders::ChannelFlowCallbackInputBuilder {
        crate::operation::channel_flow_callback::builders::ChannelFlowCallbackInputBuilder::default(
        )
    }
}

/// A builder for [`ChannelFlowCallbackInput`](crate::operation::channel_flow_callback::ChannelFlowCallbackInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChannelFlowCallbackInputBuilder {
    pub(crate) callback_id: std::option::Option<std::string::String>,
    pub(crate) channel_arn: std::option::Option<std::string::String>,
    pub(crate) delete_resource: std::option::Option<bool>,
    pub(crate) channel_message: std::option::Option<crate::types::ChannelMessageCallback>,
}
impl ChannelFlowCallbackInputBuilder {
    /// <p>The identifier passed to the processor by the service when invoked. Use the identifier to call back the service.</p>
    pub fn callback_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.callback_id = Some(input.into());
        self
    }
    /// <p>The identifier passed to the processor by the service when invoked. Use the identifier to call back the service.</p>
    pub fn set_callback_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.callback_id = input;
        self
    }
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the channel.</p>
    pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p>When a processor determines that a message needs to be <code>DENIED</code>, pass this parameter with a value of true.</p>
    pub fn delete_resource(mut self, input: bool) -> Self {
        self.delete_resource = Some(input);
        self
    }
    /// <p>When a processor determines that a message needs to be <code>DENIED</code>, pass this parameter with a value of true.</p>
    pub fn set_delete_resource(mut self, input: std::option::Option<bool>) -> Self {
        self.delete_resource = input;
        self
    }
    /// <p>Stores information about the processed message.</p>
    pub fn channel_message(mut self, input: crate::types::ChannelMessageCallback) -> Self {
        self.channel_message = Some(input);
        self
    }
    /// <p>Stores information about the processed message.</p>
    pub fn set_channel_message(
        mut self,
        input: std::option::Option<crate::types::ChannelMessageCallback>,
    ) -> Self {
        self.channel_message = input;
        self
    }
    /// Consumes the builder and constructs a [`ChannelFlowCallbackInput`](crate::operation::channel_flow_callback::ChannelFlowCallbackInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::channel_flow_callback::ChannelFlowCallbackInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::channel_flow_callback::ChannelFlowCallbackInput {
                callback_id: self.callback_id,
                channel_arn: self.channel_arn,
                delete_resource: self.delete_resource.unwrap_or_default(),
                channel_message: self.channel_message,
            },
        )
    }
}
