// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::channel_flow_callback::_channel_flow_callback_output::ChannelFlowCallbackOutputBuilder;

pub use crate::operation::channel_flow_callback::_channel_flow_callback_input::ChannelFlowCallbackInputBuilder;

/// Fluent builder constructing a request to `ChannelFlowCallback`.
///
/// <p>Calls back Chime SDK Messaging with a processing response message. This should be invoked from the processor Lambda. This is a developer API.</p>
/// <p>You can return one of the following processing responses:</p>
/// <ul>
/// <li> <p>Update message content or metadata</p> </li>
/// <li> <p>Deny a message</p> </li>
/// <li> <p>Make no changes to the message</p> </li>
/// </ul>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ChannelFlowCallbackFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::channel_flow_callback::builders::ChannelFlowCallbackInputBuilder,
}
impl ChannelFlowCallbackFluentBuilder {
    /// Creates a new `ChannelFlowCallback`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::channel_flow_callback::ChannelFlowCallback,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::channel_flow_callback::ChannelFlowCallbackError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::channel_flow_callback::ChannelFlowCallbackOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::channel_flow_callback::ChannelFlowCallbackError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier passed to the processor by the service when invoked. Use the identifier to call back the service.</p>
    pub fn callback_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.callback_id(input.into());
        self
    }
    /// <p>The identifier passed to the processor by the service when invoked. Use the identifier to call back the service.</p>
    pub fn set_callback_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_callback_id(input);
        self
    }
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.channel_arn(input.into());
        self
    }
    /// <p>The ARN of the channel.</p>
    pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_channel_arn(input);
        self
    }
    /// <p>When a processor determines that a message needs to be <code>DENIED</code>, pass this parameter with a value of true.</p>
    pub fn delete_resource(mut self, input: bool) -> Self {
        self.inner = self.inner.delete_resource(input);
        self
    }
    /// <p>When a processor determines that a message needs to be <code>DENIED</code>, pass this parameter with a value of true.</p>
    pub fn set_delete_resource(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_delete_resource(input);
        self
    }
    /// <p>Stores information about the processed message.</p>
    pub fn channel_message(mut self, input: crate::types::ChannelMessageCallback) -> Self {
        self.inner = self.inner.channel_message(input);
        self
    }
    /// <p>Stores information about the processed message.</p>
    pub fn set_channel_message(
        mut self,
        input: std::option::Option<crate::types::ChannelMessageCallback>,
    ) -> Self {
        self.inner = self.inner.set_channel_message(input);
        self
    }
}
