// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteChannelBanInput {
    /// <p>The ARN of the channel from which the <code>AppInstanceUser</code> was banned.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the <code>AppInstanceUser</code> that you want to reinstate.</p>
    #[doc(hidden)]
    pub member_arn: std::option::Option<std::string::String>,
    /// <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
    #[doc(hidden)]
    pub chime_bearer: std::option::Option<std::string::String>,
}
impl DeleteChannelBanInput {
    /// <p>The ARN of the channel from which the <code>AppInstanceUser</code> was banned.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The ARN of the <code>AppInstanceUser</code> that you want to reinstate.</p>
    pub fn member_arn(&self) -> std::option::Option<&str> {
        self.member_arn.as_deref()
    }
    /// <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
    pub fn chime_bearer(&self) -> std::option::Option<&str> {
        self.chime_bearer.as_deref()
    }
}
impl DeleteChannelBanInput {
    /// Creates a new builder-style object to manufacture [`DeleteChannelBanInput`](crate::operation::delete_channel_ban::DeleteChannelBanInput).
    pub fn builder() -> crate::operation::delete_channel_ban::builders::DeleteChannelBanInputBuilder
    {
        crate::operation::delete_channel_ban::builders::DeleteChannelBanInputBuilder::default()
    }
}

/// A builder for [`DeleteChannelBanInput`](crate::operation::delete_channel_ban::DeleteChannelBanInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteChannelBanInputBuilder {
    pub(crate) channel_arn: std::option::Option<std::string::String>,
    pub(crate) member_arn: std::option::Option<std::string::String>,
    pub(crate) chime_bearer: std::option::Option<std::string::String>,
}
impl DeleteChannelBanInputBuilder {
    /// <p>The ARN of the channel from which the <code>AppInstanceUser</code> was banned.</p>
    pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the channel from which the <code>AppInstanceUser</code> was banned.</p>
    pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p>The ARN of the <code>AppInstanceUser</code> that you want to reinstate.</p>
    pub fn member_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.member_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the <code>AppInstanceUser</code> that you want to reinstate.</p>
    pub fn set_member_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.member_arn = input;
        self
    }
    /// <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
    pub fn chime_bearer(mut self, input: impl Into<std::string::String>) -> Self {
        self.chime_bearer = Some(input.into());
        self
    }
    /// <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
    pub fn set_chime_bearer(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.chime_bearer = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteChannelBanInput`](crate::operation::delete_channel_ban::DeleteChannelBanInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_channel_ban::DeleteChannelBanInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::delete_channel_ban::DeleteChannelBanInput {
                channel_arn: self.channel_arn,
                member_arn: self.member_arn,
                chime_bearer: self.chime_bearer,
            },
        )
    }
}
