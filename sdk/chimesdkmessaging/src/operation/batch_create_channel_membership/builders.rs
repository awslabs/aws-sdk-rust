// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_create_channel_membership::_batch_create_channel_membership_output::BatchCreateChannelMembershipOutputBuilder;

pub use crate::operation::batch_create_channel_membership::_batch_create_channel_membership_input::BatchCreateChannelMembershipInputBuilder;

/// Fluent builder constructing a request to `BatchCreateChannelMembership`.
///
/// <p>Adds a specified number of users to a channel. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchCreateChannelMembershipFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::batch_create_channel_membership::builders::BatchCreateChannelMembershipInputBuilder
            }
impl BatchCreateChannelMembershipFluentBuilder {
    /// Creates a new `BatchCreateChannelMembership`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::batch_create_channel_membership::BatchCreateChannelMembership,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::batch_create_channel_membership::BatchCreateChannelMembershipError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::batch_create_channel_membership::BatchCreateChannelMembershipOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::batch_create_channel_membership::BatchCreateChannelMembershipError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the channel to which you're adding users.</p>
    pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.channel_arn(input.into());
        self
    }
    /// <p>The ARN of the channel to which you're adding users.</p>
    pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_channel_arn(input);
        self
    }
    /// <p>The membership type of a user, <code>DEFAULT</code> or <code>HIDDEN</code>. Default members are always returned as part of <code>ListChannelMemberships</code>. Hidden members are only returned if the type filter in <code>ListChannelMemberships</code> equals <code>HIDDEN</code>. Otherwise hidden members are not returned. This is only supported by moderators.</p>
    pub fn r#type(mut self, input: crate::types::ChannelMembershipType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The membership type of a user, <code>DEFAULT</code> or <code>HIDDEN</code>. Default members are always returned as part of <code>ListChannelMemberships</code>. Hidden members are only returned if the type filter in <code>ListChannelMemberships</code> equals <code>HIDDEN</code>. Otherwise hidden members are not returned. This is only supported by moderators.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::ChannelMembershipType>,
    ) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// Appends an item to `MemberArns`.
    ///
    /// To override the contents of this collection use [`set_member_arns`](Self::set_member_arns).
    ///
    /// <p>The <code>AppInstanceUserArn</code>s of the members you want to add to the channel.</p>
    pub fn member_arns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.member_arns(input.into());
        self
    }
    /// <p>The <code>AppInstanceUserArn</code>s of the members you want to add to the channel.</p>
    pub fn set_member_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_member_arns(input);
        self
    }
    /// <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
    pub fn chime_bearer(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.chime_bearer(input.into());
        self
    }
    /// <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
    pub fn set_chime_bearer(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_chime_bearer(input);
        self
    }
    /// <p>The ID of the SubChannel in the request. </p> <note>
    /// <p>Only required when creating membership in a SubChannel for a moderator in an elastic channel.</p>
    /// </note>
    pub fn sub_channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sub_channel_id(input.into());
        self
    }
    /// <p>The ID of the SubChannel in the request. </p> <note>
    /// <p>Only required when creating membership in a SubChannel for a moderator in an elastic channel.</p>
    /// </note>
    pub fn set_sub_channel_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sub_channel_id(input);
        self
    }
}
