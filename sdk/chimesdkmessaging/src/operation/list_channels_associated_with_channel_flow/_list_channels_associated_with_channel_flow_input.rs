// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListChannelsAssociatedWithChannelFlowInput {
    /// <p>The ARN of the channel flow.</p>
    #[doc(hidden)]
    pub channel_flow_arn: std::option::Option<std::string::String>,
    /// <p>The maximum number of channels that you want to return.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p>The token passed by previous API calls until all requested channels are returned.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl ListChannelsAssociatedWithChannelFlowInput {
    /// <p>The ARN of the channel flow.</p>
    pub fn channel_flow_arn(&self) -> std::option::Option<&str> {
        self.channel_flow_arn.as_deref()
    }
    /// <p>The maximum number of channels that you want to return.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token passed by previous API calls until all requested channels are returned.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListChannelsAssociatedWithChannelFlowInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListChannelsAssociatedWithChannelFlowInput");
        formatter.field("channel_flow_arn", &self.channel_flow_arn);
        formatter.field("max_results", &self.max_results);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ListChannelsAssociatedWithChannelFlowInput {
    /// Creates a new builder-style object to manufacture [`ListChannelsAssociatedWithChannelFlowInput`](crate::operation::list_channels_associated_with_channel_flow::ListChannelsAssociatedWithChannelFlowInput).
    pub fn builder() -> crate::operation::list_channels_associated_with_channel_flow::builders::ListChannelsAssociatedWithChannelFlowInputBuilder{
        crate::operation::list_channels_associated_with_channel_flow::builders::ListChannelsAssociatedWithChannelFlowInputBuilder::default()
    }
}

/// A builder for [`ListChannelsAssociatedWithChannelFlowInput`](crate::operation::list_channels_associated_with_channel_flow::ListChannelsAssociatedWithChannelFlowInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ListChannelsAssociatedWithChannelFlowInputBuilder {
    pub(crate) channel_flow_arn: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl ListChannelsAssociatedWithChannelFlowInputBuilder {
    /// <p>The ARN of the channel flow.</p>
    pub fn channel_flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_flow_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the channel flow.</p>
    pub fn set_channel_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_flow_arn = input;
        self
    }
    /// <p>The maximum number of channels that you want to return.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of channels that you want to return.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The token passed by previous API calls until all requested channels are returned.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token passed by previous API calls until all requested channels are returned.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`ListChannelsAssociatedWithChannelFlowInput`](crate::operation::list_channels_associated_with_channel_flow::ListChannelsAssociatedWithChannelFlowInput).
    pub fn build(self) -> Result<crate::operation::list_channels_associated_with_channel_flow::ListChannelsAssociatedWithChannelFlowInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::list_channels_associated_with_channel_flow::ListChannelsAssociatedWithChannelFlowInput {
                channel_flow_arn: self.channel_flow_arn
                ,
                max_results: self.max_results
                ,
                next_token: self.next_token
                ,
            }
        )
    }
}
impl std::fmt::Debug for ListChannelsAssociatedWithChannelFlowInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListChannelsAssociatedWithChannelFlowInputBuilder");
        formatter.field("channel_flow_arn", &self.channel_flow_arn);
        formatter.field("max_results", &self.max_results);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
