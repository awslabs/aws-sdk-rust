// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_channel_membership::_create_channel_membership_output::CreateChannelMembershipOutputBuilder;

pub use crate::operation::create_channel_membership::_create_channel_membership_input::CreateChannelMembershipInputBuilder;

/// Fluent builder constructing a request to `CreateChannelMembership`.
///
/// <p>Adds a user to a channel. The <code>InvitedBy</code> field in <code>ChannelMembership</code> is derived from the request header. A channel member can:</p>
/// <ul>
/// <li> <p>List messages</p> </li>
/// <li> <p>Send messages</p> </li>
/// <li> <p>Receive messages</p> </li>
/// <li> <p>Edit their own messages</p> </li>
/// <li> <p>Leave the channel</p> </li>
/// </ul>
/// <p>Privacy settings impact this action as follows:</p>
/// <ul>
/// <li> <p>Public Channels: You do not need to be a member to list messages, but you must be a member to send messages.</p> </li>
/// <li> <p>Private Channels: You must be a member to list or send messages.</p> </li>
/// </ul> <note>
/// <p>The <code>x-amz-chime-bearer</code> request header is mandatory. Use the <code>AppInstanceUserArn</code> of the user that makes the API call as the value in the header.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateChannelMembershipFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::create_channel_membership::builders::CreateChannelMembershipInputBuilder,
}
impl CreateChannelMembershipFluentBuilder {
    /// Creates a new `CreateChannelMembership`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_channel_membership::CreateChannelMembership,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_channel_membership::CreateChannelMembershipError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_channel_membership::CreateChannelMembershipOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_channel_membership::CreateChannelMembershipError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the channel to which you're adding users.</p>
    pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.channel_arn(input.into());
        self
    }
    /// <p>The ARN of the channel to which you're adding users.</p>
    pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_channel_arn(input);
        self
    }
    /// <p>The <code>AppInstanceUserArn</code> of the member you want to add to the channel.</p>
    pub fn member_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.member_arn(input.into());
        self
    }
    /// <p>The <code>AppInstanceUserArn</code> of the member you want to add to the channel.</p>
    pub fn set_member_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_member_arn(input);
        self
    }
    /// <p>The membership type of a user, <code>DEFAULT</code> or <code>HIDDEN</code>. Default members are always returned as part of <code>ListChannelMemberships</code>. Hidden members are only returned if the type filter in <code>ListChannelMemberships</code> equals <code>HIDDEN</code>. Otherwise hidden members are not returned. This is only supported by moderators.</p>
    pub fn r#type(mut self, input: crate::types::ChannelMembershipType) -> Self {
        self.inner = self.inner.r#type(input);
        self
    }
    /// <p>The membership type of a user, <code>DEFAULT</code> or <code>HIDDEN</code>. Default members are always returned as part of <code>ListChannelMemberships</code>. Hidden members are only returned if the type filter in <code>ListChannelMemberships</code> equals <code>HIDDEN</code>. Otherwise hidden members are not returned. This is only supported by moderators.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::ChannelMembershipType>,
    ) -> Self {
        self.inner = self.inner.set_type(input);
        self
    }
    /// <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
    pub fn chime_bearer(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.chime_bearer(input.into());
        self
    }
    /// <p>The <code>AppInstanceUserArn</code> of the user that makes the API call.</p>
    pub fn set_chime_bearer(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_chime_bearer(input);
        self
    }
    /// <p>The ID of the SubChannel in the request.</p> <note>
    /// <p>Only required when creating membership in a SubChannel for a moderator in an elastic channel.</p>
    /// </note>
    pub fn sub_channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.sub_channel_id(input.into());
        self
    }
    /// <p>The ID of the SubChannel in the request.</p> <note>
    /// <p>Only required when creating membership in a SubChannel for a moderator in an elastic channel.</p>
    /// </note>
    pub fn set_sub_channel_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_sub_channel_id(input);
        self
    }
}
