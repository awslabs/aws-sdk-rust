// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ListChannelMessagesOutput {
    /// <p>The ARN of the channel containing the requested messages.</p>
    pub channel_arn: ::std::option::Option<::std::string::String>,
    /// <p>The token passed by previous API calls until all requested messages are returned.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The information about, and content of, each requested message.</p>
    pub channel_messages: ::std::option::Option<::std::vec::Vec<crate::types::ChannelMessageSummary>>,
    /// <p>The ID of the SubChannel in the response.</p>
    pub sub_channel_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListChannelMessagesOutput {
    /// <p>The ARN of the channel containing the requested messages.</p>
    pub fn channel_arn(&self) -> ::std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The token passed by previous API calls until all requested messages are returned.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The information about, and content of, each requested message.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.channel_messages.is_none()`.
    pub fn channel_messages(&self) -> &[crate::types::ChannelMessageSummary] {
        self.channel_messages.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the SubChannel in the response.</p>
    pub fn sub_channel_id(&self) -> ::std::option::Option<&str> {
        self.sub_channel_id.as_deref()
    }
}
impl ::std::fmt::Debug for ListChannelMessagesOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListChannelMessagesOutput");
        formatter.field("channel_arn", &self.channel_arn);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_messages", &self.channel_messages);
        formatter.field("sub_channel_id", &self.sub_channel_id);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for ListChannelMessagesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListChannelMessagesOutput {
    /// Creates a new builder-style object to manufacture [`ListChannelMessagesOutput`](crate::operation::list_channel_messages::ListChannelMessagesOutput).
    pub fn builder() -> crate::operation::list_channel_messages::builders::ListChannelMessagesOutputBuilder {
        crate::operation::list_channel_messages::builders::ListChannelMessagesOutputBuilder::default()
    }
}

/// A builder for [`ListChannelMessagesOutput`](crate::operation::list_channel_messages::ListChannelMessagesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ListChannelMessagesOutputBuilder {
    pub(crate) channel_arn: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) channel_messages: ::std::option::Option<::std::vec::Vec<crate::types::ChannelMessageSummary>>,
    pub(crate) sub_channel_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListChannelMessagesOutputBuilder {
    /// <p>The ARN of the channel containing the requested messages.</p>
    pub fn channel_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.channel_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the channel containing the requested messages.</p>
    pub fn set_channel_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p>The ARN of the channel containing the requested messages.</p>
    pub fn get_channel_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.channel_arn
    }
    /// <p>The token passed by previous API calls until all requested messages are returned.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token passed by previous API calls until all requested messages are returned.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token passed by previous API calls until all requested messages are returned.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `channel_messages`.
    ///
    /// To override the contents of this collection use [`set_channel_messages`](Self::set_channel_messages).
    ///
    /// <p>The information about, and content of, each requested message.</p>
    pub fn channel_messages(mut self, input: crate::types::ChannelMessageSummary) -> Self {
        let mut v = self.channel_messages.unwrap_or_default();
        v.push(input);
        self.channel_messages = ::std::option::Option::Some(v);
        self
    }
    /// <p>The information about, and content of, each requested message.</p>
    pub fn set_channel_messages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ChannelMessageSummary>>) -> Self {
        self.channel_messages = input;
        self
    }
    /// <p>The information about, and content of, each requested message.</p>
    pub fn get_channel_messages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ChannelMessageSummary>> {
        &self.channel_messages
    }
    /// <p>The ID of the SubChannel in the response.</p>
    pub fn sub_channel_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sub_channel_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the SubChannel in the response.</p>
    pub fn set_sub_channel_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sub_channel_id = input;
        self
    }
    /// <p>The ID of the SubChannel in the response.</p>
    pub fn get_sub_channel_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.sub_channel_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListChannelMessagesOutput`](crate::operation::list_channel_messages::ListChannelMessagesOutput).
    pub fn build(self) -> crate::operation::list_channel_messages::ListChannelMessagesOutput {
        crate::operation::list_channel_messages::ListChannelMessagesOutput {
            channel_arn: self.channel_arn,
            next_token: self.next_token,
            channel_messages: self.channel_messages,
            sub_channel_id: self.sub_channel_id,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for ListChannelMessagesOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ListChannelMessagesOutputBuilder");
        formatter.field("channel_arn", &self.channel_arn);
        formatter.field("next_token", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_messages", &self.channel_messages);
        formatter.field("sub_channel_id", &self.sub_channel_id);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
