// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ChannelFlowCallback`](crate::client::fluent_builders::ChannelFlowCallback) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`callback_id(impl Into<String>)`](crate::client::fluent_builders::ChannelFlowCallback::callback_id) / [`set_callback_id(Option<String>)`](crate::client::fluent_builders::ChannelFlowCallback::set_callback_id): <p>The identifier passed to the processor by the service when invoked. Use the identifier to call back the service.</p>
    ///   - [`channel_arn(impl Into<String>)`](crate::client::fluent_builders::ChannelFlowCallback::channel_arn) / [`set_channel_arn(Option<String>)`](crate::client::fluent_builders::ChannelFlowCallback::set_channel_arn): <p>The ARN of the channel.</p>
    ///   - [`delete_resource(bool)`](crate::client::fluent_builders::ChannelFlowCallback::delete_resource) / [`set_delete_resource(bool)`](crate::client::fluent_builders::ChannelFlowCallback::set_delete_resource): <p>When a processor determines that a message needs to be <code>DENIED</code>, pass this parameter with a value of true.</p>
    ///   - [`channel_message(ChannelMessageCallback)`](crate::client::fluent_builders::ChannelFlowCallback::channel_message) / [`set_channel_message(Option<ChannelMessageCallback>)`](crate::client::fluent_builders::ChannelFlowCallback::set_channel_message): <p>Stores information about the processed message.</p>
    /// - On success, responds with [`ChannelFlowCallbackOutput`](crate::output::ChannelFlowCallbackOutput) with field(s):
    ///   - [`channel_arn(Option<String>)`](crate::output::ChannelFlowCallbackOutput::channel_arn): <p>The ARN of the channel.</p>
    ///   - [`callback_id(Option<String>)`](crate::output::ChannelFlowCallbackOutput::callback_id): <p>The call back ID passed in the request.</p>
    /// - On failure, responds with [`SdkError<ChannelFlowCallbackError>`](crate::error::ChannelFlowCallbackError)
    pub fn channel_flow_callback(&self) -> crate::client::fluent_builders::ChannelFlowCallback {
        crate::client::fluent_builders::ChannelFlowCallback::new(self.handle.clone())
    }
}
