// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of message attribute values.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct MessageAttributeValue {
    /// <p>The strings in a message attribute value.</p>
    #[doc(hidden)]
    pub string_values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl MessageAttributeValue {
    /// <p>The strings in a message attribute value.</p>
    pub fn string_values(&self) -> std::option::Option<&[std::string::String]> {
        self.string_values.as_deref()
    }
}
impl MessageAttributeValue {
    /// Creates a new builder-style object to manufacture [`MessageAttributeValue`](crate::types::MessageAttributeValue).
    pub fn builder() -> crate::types::builders::MessageAttributeValueBuilder {
        crate::types::builders::MessageAttributeValueBuilder::default()
    }
}

/// A builder for [`MessageAttributeValue`](crate::types::MessageAttributeValue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct MessageAttributeValueBuilder {
    pub(crate) string_values: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl MessageAttributeValueBuilder {
    /// Appends an item to `string_values`.
    ///
    /// To override the contents of this collection use [`set_string_values`](Self::set_string_values).
    ///
    /// <p>The strings in a message attribute value.</p>
    pub fn string_values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.string_values.unwrap_or_default();
        v.push(input.into());
        self.string_values = Some(v);
        self
    }
    /// <p>The strings in a message attribute value.</p>
    pub fn set_string_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.string_values = input;
        self
    }
    /// Consumes the builder and constructs a [`MessageAttributeValue`](crate::types::MessageAttributeValue).
    pub fn build(self) -> crate::types::MessageAttributeValue {
        crate::types::MessageAttributeValue {
            string_values: self.string_values,
        }
    }
}
