// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary of the details of a <code>Channel</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChannelSummary {
    /// <p>The name of the channel.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ARN of the channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>The mode of the channel.</p>
    #[doc(hidden)]
    pub mode: std::option::Option<crate::types::ChannelMode>,
    /// <p>The privacy setting of the channel.</p>
    #[doc(hidden)]
    pub privacy: std::option::Option<crate::types::ChannelPrivacy>,
    /// <p>The metadata of the channel.</p>
    #[doc(hidden)]
    pub metadata: std::option::Option<std::string::String>,
    /// <p>The time at which the last persistent message in a channel was sent.</p>
    #[doc(hidden)]
    pub last_message_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl ChannelSummary {
    /// <p>The name of the channel.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The mode of the channel.</p>
    pub fn mode(&self) -> std::option::Option<&crate::types::ChannelMode> {
        self.mode.as_ref()
    }
    /// <p>The privacy setting of the channel.</p>
    pub fn privacy(&self) -> std::option::Option<&crate::types::ChannelPrivacy> {
        self.privacy.as_ref()
    }
    /// <p>The metadata of the channel.</p>
    pub fn metadata(&self) -> std::option::Option<&str> {
        self.metadata.as_deref()
    }
    /// <p>The time at which the last persistent message in a channel was sent.</p>
    pub fn last_message_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_message_timestamp.as_ref()
    }
}
impl std::fmt::Debug for ChannelSummary {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ChannelSummary");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_arn", &self.channel_arn);
        formatter.field("mode", &self.mode);
        formatter.field("privacy", &self.privacy);
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.field("last_message_timestamp", &self.last_message_timestamp);
        formatter.finish()
    }
}
impl ChannelSummary {
    /// Creates a new builder-style object to manufacture [`ChannelSummary`](crate::types::ChannelSummary).
    pub fn builder() -> crate::types::builders::ChannelSummaryBuilder {
        crate::types::builders::ChannelSummaryBuilder::default()
    }
}

/// A builder for [`ChannelSummary`](crate::types::ChannelSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ChannelSummaryBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) channel_arn: std::option::Option<std::string::String>,
    pub(crate) mode: std::option::Option<crate::types::ChannelMode>,
    pub(crate) privacy: std::option::Option<crate::types::ChannelPrivacy>,
    pub(crate) metadata: std::option::Option<std::string::String>,
    pub(crate) last_message_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl ChannelSummaryBuilder {
    /// <p>The name of the channel.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the channel.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The ARN of the channel.</p>
    pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the channel.</p>
    pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p>The mode of the channel.</p>
    pub fn mode(mut self, input: crate::types::ChannelMode) -> Self {
        self.mode = Some(input);
        self
    }
    /// <p>The mode of the channel.</p>
    pub fn set_mode(mut self, input: std::option::Option<crate::types::ChannelMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>The privacy setting of the channel.</p>
    pub fn privacy(mut self, input: crate::types::ChannelPrivacy) -> Self {
        self.privacy = Some(input);
        self
    }
    /// <p>The privacy setting of the channel.</p>
    pub fn set_privacy(mut self, input: std::option::Option<crate::types::ChannelPrivacy>) -> Self {
        self.privacy = input;
        self
    }
    /// <p>The metadata of the channel.</p>
    pub fn metadata(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata = Some(input.into());
        self
    }
    /// <p>The metadata of the channel.</p>
    pub fn set_metadata(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The time at which the last persistent message in a channel was sent.</p>
    pub fn last_message_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_message_timestamp = Some(input);
        self
    }
    /// <p>The time at which the last persistent message in a channel was sent.</p>
    pub fn set_last_message_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_message_timestamp = input;
        self
    }
    /// Consumes the builder and constructs a [`ChannelSummary`](crate::types::ChannelSummary).
    pub fn build(self) -> crate::types::ChannelSummary {
        crate::types::ChannelSummary {
            name: self.name,
            channel_arn: self.channel_arn,
            mode: self.mode,
            privacy: self.privacy,
            metadata: self.metadata,
            last_message_timestamp: self.last_message_timestamp,
        }
    }
}
impl std::fmt::Debug for ChannelSummaryBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ChannelSummaryBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_arn", &self.channel_arn);
        formatter.field("mode", &self.mode);
        formatter.field("privacy", &self.privacy);
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.field("last_message_timestamp", &self.last_message_timestamp);
        formatter.finish()
    }
}
