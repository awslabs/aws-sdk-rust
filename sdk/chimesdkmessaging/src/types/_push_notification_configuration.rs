// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The push notification configuration of the message.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PushNotificationConfiguration {
    /// <p>The title of the push notification.</p>
    #[doc(hidden)]
    pub title: std::option::Option<std::string::String>,
    /// <p>The body of the push notification.</p>
    #[doc(hidden)]
    pub body: std::option::Option<std::string::String>,
    /// <p>Enum value that indicates the type of the push notification for a message. <code>DEFAULT</code>: Normal mobile push notification. <code>VOIP</code>: VOIP mobile push notification.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::PushNotificationType>,
}
impl PushNotificationConfiguration {
    /// <p>The title of the push notification.</p>
    pub fn title(&self) -> std::option::Option<&str> {
        self.title.as_deref()
    }
    /// <p>The body of the push notification.</p>
    pub fn body(&self) -> std::option::Option<&str> {
        self.body.as_deref()
    }
    /// <p>Enum value that indicates the type of the push notification for a message. <code>DEFAULT</code>: Normal mobile push notification. <code>VOIP</code>: VOIP mobile push notification.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::PushNotificationType> {
        self.r#type.as_ref()
    }
}
impl std::fmt::Debug for PushNotificationConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PushNotificationConfiguration");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("body", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.finish()
    }
}
impl PushNotificationConfiguration {
    /// Creates a new builder-style object to manufacture [`PushNotificationConfiguration`](crate::types::PushNotificationConfiguration).
    pub fn builder() -> crate::types::builders::PushNotificationConfigurationBuilder {
        crate::types::builders::PushNotificationConfigurationBuilder::default()
    }
}

/// A builder for [`PushNotificationConfiguration`](crate::types::PushNotificationConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct PushNotificationConfigurationBuilder {
    pub(crate) title: std::option::Option<std::string::String>,
    pub(crate) body: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::PushNotificationType>,
}
impl PushNotificationConfigurationBuilder {
    /// <p>The title of the push notification.</p>
    pub fn title(mut self, input: impl Into<std::string::String>) -> Self {
        self.title = Some(input.into());
        self
    }
    /// <p>The title of the push notification.</p>
    pub fn set_title(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.title = input;
        self
    }
    /// <p>The body of the push notification.</p>
    pub fn body(mut self, input: impl Into<std::string::String>) -> Self {
        self.body = Some(input.into());
        self
    }
    /// <p>The body of the push notification.</p>
    pub fn set_body(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// <p>Enum value that indicates the type of the push notification for a message. <code>DEFAULT</code>: Normal mobile push notification. <code>VOIP</code>: VOIP mobile push notification.</p>
    pub fn r#type(mut self, input: crate::types::PushNotificationType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>Enum value that indicates the type of the push notification for a message. <code>DEFAULT</code>: Normal mobile push notification. <code>VOIP</code>: VOIP mobile push notification.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::PushNotificationType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`PushNotificationConfiguration`](crate::types::PushNotificationConfiguration).
    pub fn build(self) -> crate::types::PushNotificationConfiguration {
        crate::types::PushNotificationConfiguration {
            title: self.title,
            body: self.body,
            r#type: self.r#type,
        }
    }
}
impl std::fmt::Debug for PushNotificationConfigurationBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PushNotificationConfigurationBuilder");
        formatter.field("title", &"*** Sensitive Data Redacted ***");
        formatter.field("body", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.finish()
    }
}
