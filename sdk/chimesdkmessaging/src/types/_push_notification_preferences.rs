// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The channel membership preferences for push notification.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PushNotificationPreferences {
    /// <p>Enum value that indicates which push notifications to send to the requested member of a channel. <code>ALL</code> sends all push notifications, <code>NONE</code> sends no push notifications, <code>FILTERED</code> sends only filtered push notifications. </p>
    pub allow_notifications: crate::types::AllowNotifications,
    /// <p>The simple JSON object used to send a subset of a push notification to the requested member.</p>
    pub filter_rule: ::std::option::Option<::std::string::String>,
}
impl PushNotificationPreferences {
    /// <p>Enum value that indicates which push notifications to send to the requested member of a channel. <code>ALL</code> sends all push notifications, <code>NONE</code> sends no push notifications, <code>FILTERED</code> sends only filtered push notifications. </p>
    pub fn allow_notifications(&self) -> &crate::types::AllowNotifications {
        &self.allow_notifications
    }
    /// <p>The simple JSON object used to send a subset of a push notification to the requested member.</p>
    pub fn filter_rule(&self) -> ::std::option::Option<&str> {
        self.filter_rule.as_deref()
    }
}
impl ::std::fmt::Debug for PushNotificationPreferences {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PushNotificationPreferences");
        formatter.field("allow_notifications", &self.allow_notifications);
        formatter.field("filter_rule", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PushNotificationPreferences {
    /// Creates a new builder-style object to manufacture [`PushNotificationPreferences`](crate::types::PushNotificationPreferences).
    pub fn builder() -> crate::types::builders::PushNotificationPreferencesBuilder {
        crate::types::builders::PushNotificationPreferencesBuilder::default()
    }
}

/// A builder for [`PushNotificationPreferences`](crate::types::PushNotificationPreferences).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct PushNotificationPreferencesBuilder {
    pub(crate) allow_notifications: ::std::option::Option<crate::types::AllowNotifications>,
    pub(crate) filter_rule: ::std::option::Option<::std::string::String>,
}
impl PushNotificationPreferencesBuilder {
    /// <p>Enum value that indicates which push notifications to send to the requested member of a channel. <code>ALL</code> sends all push notifications, <code>NONE</code> sends no push notifications, <code>FILTERED</code> sends only filtered push notifications. </p>
    /// This field is required.
    pub fn allow_notifications(mut self, input: crate::types::AllowNotifications) -> Self {
        self.allow_notifications = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enum value that indicates which push notifications to send to the requested member of a channel. <code>ALL</code> sends all push notifications, <code>NONE</code> sends no push notifications, <code>FILTERED</code> sends only filtered push notifications. </p>
    pub fn set_allow_notifications(mut self, input: ::std::option::Option<crate::types::AllowNotifications>) -> Self {
        self.allow_notifications = input;
        self
    }
    /// <p>Enum value that indicates which push notifications to send to the requested member of a channel. <code>ALL</code> sends all push notifications, <code>NONE</code> sends no push notifications, <code>FILTERED</code> sends only filtered push notifications. </p>
    pub fn get_allow_notifications(&self) -> &::std::option::Option<crate::types::AllowNotifications> {
        &self.allow_notifications
    }
    /// <p>The simple JSON object used to send a subset of a push notification to the requested member.</p>
    pub fn filter_rule(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter_rule = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The simple JSON object used to send a subset of a push notification to the requested member.</p>
    pub fn set_filter_rule(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter_rule = input;
        self
    }
    /// <p>The simple JSON object used to send a subset of a push notification to the requested member.</p>
    pub fn get_filter_rule(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter_rule
    }
    /// Consumes the builder and constructs a [`PushNotificationPreferences`](crate::types::PushNotificationPreferences).
    /// This method will fail if any of the following fields are not set:
    /// - [`allow_notifications`](crate::types::builders::PushNotificationPreferencesBuilder::allow_notifications)
    pub fn build(self) -> ::std::result::Result<crate::types::PushNotificationPreferences, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PushNotificationPreferences {
            allow_notifications: self.allow_notifications.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "allow_notifications",
                    "allow_notifications was not specified but it is required when building PushNotificationPreferences",
                )
            })?,
            filter_rule: self.filter_rule,
        })
    }
}
impl ::std::fmt::Debug for PushNotificationPreferencesBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PushNotificationPreferencesBuilder");
        formatter.field("allow_notifications", &self.allow_notifications);
        formatter.field("filter_rule", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
