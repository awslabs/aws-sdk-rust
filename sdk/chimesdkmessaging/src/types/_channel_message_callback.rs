// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Stores information about a callback.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ChannelMessageCallback {
    /// <p>The message ID.</p>
    #[doc(hidden)]
    pub message_id: std::option::Option<std::string::String>,
    /// <p>The message content.</p>
    #[doc(hidden)]
    pub content: std::option::Option<std::string::String>,
    /// <p>The message metadata.</p>
    #[doc(hidden)]
    pub metadata: std::option::Option<std::string::String>,
    /// <p>The push notification configuration of the message.</p>
    #[doc(hidden)]
    pub push_notification: std::option::Option<crate::types::PushNotificationConfiguration>,
    /// <p>The attributes for the message, used for message filtering along with a <code>FilterRule</code> defined in the <code>PushNotificationPreferences</code>. </p>
    #[doc(hidden)]
    pub message_attributes: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::MessageAttributeValue>,
    >,
    /// <p>The ID of the SubChannel.</p>
    #[doc(hidden)]
    pub sub_channel_id: std::option::Option<std::string::String>,
}
impl ChannelMessageCallback {
    /// <p>The message ID.</p>
    pub fn message_id(&self) -> std::option::Option<&str> {
        self.message_id.as_deref()
    }
    /// <p>The message content.</p>
    pub fn content(&self) -> std::option::Option<&str> {
        self.content.as_deref()
    }
    /// <p>The message metadata.</p>
    pub fn metadata(&self) -> std::option::Option<&str> {
        self.metadata.as_deref()
    }
    /// <p>The push notification configuration of the message.</p>
    pub fn push_notification(
        &self,
    ) -> std::option::Option<&crate::types::PushNotificationConfiguration> {
        self.push_notification.as_ref()
    }
    /// <p>The attributes for the message, used for message filtering along with a <code>FilterRule</code> defined in the <code>PushNotificationPreferences</code>. </p>
    pub fn message_attributes(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::MessageAttributeValue>,
    > {
        self.message_attributes.as_ref()
    }
    /// <p>The ID of the SubChannel.</p>
    pub fn sub_channel_id(&self) -> std::option::Option<&str> {
        self.sub_channel_id.as_deref()
    }
}
impl std::fmt::Debug for ChannelMessageCallback {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ChannelMessageCallback");
        formatter.field("message_id", &self.message_id);
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.field("push_notification", &self.push_notification);
        formatter.field("message_attributes", &self.message_attributes);
        formatter.field("sub_channel_id", &self.sub_channel_id);
        formatter.finish()
    }
}
impl ChannelMessageCallback {
    /// Creates a new builder-style object to manufacture [`ChannelMessageCallback`](crate::types::ChannelMessageCallback).
    pub fn builder() -> crate::types::builders::ChannelMessageCallbackBuilder {
        crate::types::builders::ChannelMessageCallbackBuilder::default()
    }
}

/// A builder for [`ChannelMessageCallback`](crate::types::ChannelMessageCallback).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ChannelMessageCallbackBuilder {
    pub(crate) message_id: std::option::Option<std::string::String>,
    pub(crate) content: std::option::Option<std::string::String>,
    pub(crate) metadata: std::option::Option<std::string::String>,
    pub(crate) push_notification: std::option::Option<crate::types::PushNotificationConfiguration>,
    pub(crate) message_attributes: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::MessageAttributeValue>,
    >,
    pub(crate) sub_channel_id: std::option::Option<std::string::String>,
}
impl ChannelMessageCallbackBuilder {
    /// <p>The message ID.</p>
    pub fn message_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.message_id = Some(input.into());
        self
    }
    /// <p>The message ID.</p>
    pub fn set_message_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.message_id = input;
        self
    }
    /// <p>The message content.</p>
    pub fn content(mut self, input: impl Into<std::string::String>) -> Self {
        self.content = Some(input.into());
        self
    }
    /// <p>The message content.</p>
    pub fn set_content(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content = input;
        self
    }
    /// <p>The message metadata.</p>
    pub fn metadata(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata = Some(input.into());
        self
    }
    /// <p>The message metadata.</p>
    pub fn set_metadata(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The push notification configuration of the message.</p>
    pub fn push_notification(mut self, input: crate::types::PushNotificationConfiguration) -> Self {
        self.push_notification = Some(input);
        self
    }
    /// <p>The push notification configuration of the message.</p>
    pub fn set_push_notification(
        mut self,
        input: std::option::Option<crate::types::PushNotificationConfiguration>,
    ) -> Self {
        self.push_notification = input;
        self
    }
    /// Adds a key-value pair to `message_attributes`.
    ///
    /// To override the contents of this collection use [`set_message_attributes`](Self::set_message_attributes).
    ///
    /// <p>The attributes for the message, used for message filtering along with a <code>FilterRule</code> defined in the <code>PushNotificationPreferences</code>. </p>
    pub fn message_attributes(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::MessageAttributeValue,
    ) -> Self {
        let mut hash_map = self.message_attributes.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.message_attributes = Some(hash_map);
        self
    }
    /// <p>The attributes for the message, used for message filtering along with a <code>FilterRule</code> defined in the <code>PushNotificationPreferences</code>. </p>
    pub fn set_message_attributes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::MessageAttributeValue>,
        >,
    ) -> Self {
        self.message_attributes = input;
        self
    }
    /// <p>The ID of the SubChannel.</p>
    pub fn sub_channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.sub_channel_id = Some(input.into());
        self
    }
    /// <p>The ID of the SubChannel.</p>
    pub fn set_sub_channel_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sub_channel_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ChannelMessageCallback`](crate::types::ChannelMessageCallback).
    pub fn build(self) -> crate::types::ChannelMessageCallback {
        crate::types::ChannelMessageCallback {
            message_id: self.message_id,
            content: self.content,
            metadata: self.metadata,
            push_notification: self.push_notification,
            message_attributes: self.message_attributes,
            sub_channel_id: self.sub_channel_id,
        }
    }
}
impl std::fmt::Debug for ChannelMessageCallbackBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ChannelMessageCallbackBuilder");
        formatter.field("message_id", &self.message_id);
        formatter.field("content", &"*** Sensitive Data Redacted ***");
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.field("push_notification", &self.push_notification);
        formatter.field("message_attributes", &self.message_attributes);
        formatter.field("sub_channel_id", &self.sub_channel_id);
        formatter.finish()
    }
}
