// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings that control the interval after which a channel is deleted.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExpirationSettings {
    /// <p>The period in days after which the system automatically deletes a channel.</p>
    pub expiration_days: i32,
    /// <p>The conditions that must be met for a channel to expire.</p>
    pub expiration_criterion: crate::types::ExpirationCriterion,
}
impl ExpirationSettings {
    /// <p>The period in days after which the system automatically deletes a channel.</p>
    pub fn expiration_days(&self) -> i32 {
        self.expiration_days
    }
    /// <p>The conditions that must be met for a channel to expire.</p>
    pub fn expiration_criterion(&self) -> &crate::types::ExpirationCriterion {
        &self.expiration_criterion
    }
}
impl ExpirationSettings {
    /// Creates a new builder-style object to manufacture [`ExpirationSettings`](crate::types::ExpirationSettings).
    pub fn builder() -> crate::types::builders::ExpirationSettingsBuilder {
        crate::types::builders::ExpirationSettingsBuilder::default()
    }
}

/// A builder for [`ExpirationSettings`](crate::types::ExpirationSettings).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExpirationSettingsBuilder {
    pub(crate) expiration_days: ::std::option::Option<i32>,
    pub(crate) expiration_criterion: ::std::option::Option<crate::types::ExpirationCriterion>,
}
impl ExpirationSettingsBuilder {
    /// <p>The period in days after which the system automatically deletes a channel.</p>
    /// This field is required.
    pub fn expiration_days(mut self, input: i32) -> Self {
        self.expiration_days = ::std::option::Option::Some(input);
        self
    }
    /// <p>The period in days after which the system automatically deletes a channel.</p>
    pub fn set_expiration_days(mut self, input: ::std::option::Option<i32>) -> Self {
        self.expiration_days = input;
        self
    }
    /// <p>The period in days after which the system automatically deletes a channel.</p>
    pub fn get_expiration_days(&self) -> &::std::option::Option<i32> {
        &self.expiration_days
    }
    /// <p>The conditions that must be met for a channel to expire.</p>
    /// This field is required.
    pub fn expiration_criterion(mut self, input: crate::types::ExpirationCriterion) -> Self {
        self.expiration_criterion = ::std::option::Option::Some(input);
        self
    }
    /// <p>The conditions that must be met for a channel to expire.</p>
    pub fn set_expiration_criterion(mut self, input: ::std::option::Option<crate::types::ExpirationCriterion>) -> Self {
        self.expiration_criterion = input;
        self
    }
    /// <p>The conditions that must be met for a channel to expire.</p>
    pub fn get_expiration_criterion(&self) -> &::std::option::Option<crate::types::ExpirationCriterion> {
        &self.expiration_criterion
    }
    /// Consumes the builder and constructs a [`ExpirationSettings`](crate::types::ExpirationSettings).
    /// This method will fail if any of the following fields are not set:
    /// - [`expiration_days`](crate::types::builders::ExpirationSettingsBuilder::expiration_days)
    /// - [`expiration_criterion`](crate::types::builders::ExpirationSettingsBuilder::expiration_criterion)
    pub fn build(self) -> ::std::result::Result<crate::types::ExpirationSettings, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExpirationSettings {
            expiration_days: self.expiration_days.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expiration_days",
                    "expiration_days was not specified but it is required when building ExpirationSettings",
                )
            })?,
            expiration_criterion: self.expiration_criterion.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expiration_criterion",
                    "expiration_criterion was not specified but it is required when building ExpirationSettings",
                )
            })?,
        })
    }
}
