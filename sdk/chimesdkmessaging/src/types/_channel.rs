// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a channel.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct Channel {
    /// <p>The name of a channel.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The ARN of a channel.</p>
    #[doc(hidden)]
    pub channel_arn: std::option::Option<std::string::String>,
    /// <p>The mode of the channel.</p>
    #[doc(hidden)]
    pub mode: std::option::Option<crate::types::ChannelMode>,
    /// <p>The channel's privacy setting.</p>
    #[doc(hidden)]
    pub privacy: std::option::Option<crate::types::ChannelPrivacy>,
    /// <p>The channel's metadata.</p>
    #[doc(hidden)]
    pub metadata: std::option::Option<std::string::String>,
    /// <p>The <code>AppInstanceUser</code> who created the channel.</p>
    #[doc(hidden)]
    pub created_by: std::option::Option<crate::types::Identity>,
    /// <p>The time at which the <code>AppInstanceUser</code> created the channel.</p>
    #[doc(hidden)]
    pub created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which a member sent the last message in the channel.</p>
    #[doc(hidden)]
    pub last_message_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time at which a channel was last updated.</p>
    #[doc(hidden)]
    pub last_updated_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ARN of the channel flow.</p>
    #[doc(hidden)]
    pub channel_flow_arn: std::option::Option<std::string::String>,
    /// <p>The attributes required to configure and create an elastic channel. An elastic channel can support a maximum of 1-million members.</p>
    #[doc(hidden)]
    pub elastic_channel_configuration:
        std::option::Option<crate::types::ElasticChannelConfiguration>,
}
impl Channel {
    /// <p>The name of a channel.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ARN of a channel.</p>
    pub fn channel_arn(&self) -> std::option::Option<&str> {
        self.channel_arn.as_deref()
    }
    /// <p>The mode of the channel.</p>
    pub fn mode(&self) -> std::option::Option<&crate::types::ChannelMode> {
        self.mode.as_ref()
    }
    /// <p>The channel's privacy setting.</p>
    pub fn privacy(&self) -> std::option::Option<&crate::types::ChannelPrivacy> {
        self.privacy.as_ref()
    }
    /// <p>The channel's metadata.</p>
    pub fn metadata(&self) -> std::option::Option<&str> {
        self.metadata.as_deref()
    }
    /// <p>The <code>AppInstanceUser</code> who created the channel.</p>
    pub fn created_by(&self) -> std::option::Option<&crate::types::Identity> {
        self.created_by.as_ref()
    }
    /// <p>The time at which the <code>AppInstanceUser</code> created the channel.</p>
    pub fn created_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_timestamp.as_ref()
    }
    /// <p>The time at which a member sent the last message in the channel.</p>
    pub fn last_message_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_message_timestamp.as_ref()
    }
    /// <p>The time at which a channel was last updated.</p>
    pub fn last_updated_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_timestamp.as_ref()
    }
    /// <p>The ARN of the channel flow.</p>
    pub fn channel_flow_arn(&self) -> std::option::Option<&str> {
        self.channel_flow_arn.as_deref()
    }
    /// <p>The attributes required to configure and create an elastic channel. An elastic channel can support a maximum of 1-million members.</p>
    pub fn elastic_channel_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ElasticChannelConfiguration> {
        self.elastic_channel_configuration.as_ref()
    }
}
impl std::fmt::Debug for Channel {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("Channel");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_arn", &self.channel_arn);
        formatter.field("mode", &self.mode);
        formatter.field("privacy", &self.privacy);
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.field("created_by", &self.created_by);
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("last_message_timestamp", &self.last_message_timestamp);
        formatter.field("last_updated_timestamp", &self.last_updated_timestamp);
        formatter.field("channel_flow_arn", &self.channel_flow_arn);
        formatter.field(
            "elastic_channel_configuration",
            &self.elastic_channel_configuration,
        );
        formatter.finish()
    }
}
impl Channel {
    /// Creates a new builder-style object to manufacture [`Channel`](crate::types::Channel).
    pub fn builder() -> crate::types::builders::ChannelBuilder {
        crate::types::builders::ChannelBuilder::default()
    }
}

/// A builder for [`Channel`](crate::types::Channel).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ChannelBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) channel_arn: std::option::Option<std::string::String>,
    pub(crate) mode: std::option::Option<crate::types::ChannelMode>,
    pub(crate) privacy: std::option::Option<crate::types::ChannelPrivacy>,
    pub(crate) metadata: std::option::Option<std::string::String>,
    pub(crate) created_by: std::option::Option<crate::types::Identity>,
    pub(crate) created_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_message_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) channel_flow_arn: std::option::Option<std::string::String>,
    pub(crate) elastic_channel_configuration:
        std::option::Option<crate::types::ElasticChannelConfiguration>,
}
impl ChannelBuilder {
    /// <p>The name of a channel.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of a channel.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The ARN of a channel.</p>
    pub fn channel_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_arn = Some(input.into());
        self
    }
    /// <p>The ARN of a channel.</p>
    pub fn set_channel_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_arn = input;
        self
    }
    /// <p>The mode of the channel.</p>
    pub fn mode(mut self, input: crate::types::ChannelMode) -> Self {
        self.mode = Some(input);
        self
    }
    /// <p>The mode of the channel.</p>
    pub fn set_mode(mut self, input: std::option::Option<crate::types::ChannelMode>) -> Self {
        self.mode = input;
        self
    }
    /// <p>The channel's privacy setting.</p>
    pub fn privacy(mut self, input: crate::types::ChannelPrivacy) -> Self {
        self.privacy = Some(input);
        self
    }
    /// <p>The channel's privacy setting.</p>
    pub fn set_privacy(mut self, input: std::option::Option<crate::types::ChannelPrivacy>) -> Self {
        self.privacy = input;
        self
    }
    /// <p>The channel's metadata.</p>
    pub fn metadata(mut self, input: impl Into<std::string::String>) -> Self {
        self.metadata = Some(input.into());
        self
    }
    /// <p>The channel's metadata.</p>
    pub fn set_metadata(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>The <code>AppInstanceUser</code> who created the channel.</p>
    pub fn created_by(mut self, input: crate::types::Identity) -> Self {
        self.created_by = Some(input);
        self
    }
    /// <p>The <code>AppInstanceUser</code> who created the channel.</p>
    pub fn set_created_by(mut self, input: std::option::Option<crate::types::Identity>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The time at which the <code>AppInstanceUser</code> created the channel.</p>
    pub fn created_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_timestamp = Some(input);
        self
    }
    /// <p>The time at which the <code>AppInstanceUser</code> created the channel.</p>
    pub fn set_created_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_timestamp = input;
        self
    }
    /// <p>The time at which a member sent the last message in the channel.</p>
    pub fn last_message_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_message_timestamp = Some(input);
        self
    }
    /// <p>The time at which a member sent the last message in the channel.</p>
    pub fn set_last_message_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_message_timestamp = input;
        self
    }
    /// <p>The time at which a channel was last updated.</p>
    pub fn last_updated_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_timestamp = Some(input);
        self
    }
    /// <p>The time at which a channel was last updated.</p>
    pub fn set_last_updated_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_timestamp = input;
        self
    }
    /// <p>The ARN of the channel flow.</p>
    pub fn channel_flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.channel_flow_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the channel flow.</p>
    pub fn set_channel_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.channel_flow_arn = input;
        self
    }
    /// <p>The attributes required to configure and create an elastic channel. An elastic channel can support a maximum of 1-million members.</p>
    pub fn elastic_channel_configuration(
        mut self,
        input: crate::types::ElasticChannelConfiguration,
    ) -> Self {
        self.elastic_channel_configuration = Some(input);
        self
    }
    /// <p>The attributes required to configure and create an elastic channel. An elastic channel can support a maximum of 1-million members.</p>
    pub fn set_elastic_channel_configuration(
        mut self,
        input: std::option::Option<crate::types::ElasticChannelConfiguration>,
    ) -> Self {
        self.elastic_channel_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`Channel`](crate::types::Channel).
    pub fn build(self) -> crate::types::Channel {
        crate::types::Channel {
            name: self.name,
            channel_arn: self.channel_arn,
            mode: self.mode,
            privacy: self.privacy,
            metadata: self.metadata,
            created_by: self.created_by,
            created_timestamp: self.created_timestamp,
            last_message_timestamp: self.last_message_timestamp,
            last_updated_timestamp: self.last_updated_timestamp,
            channel_flow_arn: self.channel_flow_arn,
            elastic_channel_configuration: self.elastic_channel_configuration,
        }
    }
}
impl std::fmt::Debug for ChannelBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ChannelBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("channel_arn", &self.channel_arn);
        formatter.field("mode", &self.mode);
        formatter.field("privacy", &self.privacy);
        formatter.field("metadata", &"*** Sensitive Data Redacted ***");
        formatter.field("created_by", &self.created_by);
        formatter.field("created_timestamp", &self.created_timestamp);
        formatter.field("last_message_timestamp", &self.last_message_timestamp);
        formatter.field("last_updated_timestamp", &self.last_updated_timestamp);
        formatter.field("channel_flow_arn", &self.channel_flow_arn);
        formatter.field(
            "elastic_channel_configuration",
            &self.elastic_channel_configuration,
        );
        formatter.finish()
    }
}
