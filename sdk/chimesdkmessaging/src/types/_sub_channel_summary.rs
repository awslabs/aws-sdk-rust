// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary of the sub-channels associated with the elastic channel.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SubChannelSummary {
    /// <p>The unique ID of a SubChannel.</p>
    #[doc(hidden)]
    pub sub_channel_id: std::option::Option<std::string::String>,
    /// <p>The number of members in a SubChannel.</p>
    #[doc(hidden)]
    pub membership_count: std::option::Option<i32>,
}
impl SubChannelSummary {
    /// <p>The unique ID of a SubChannel.</p>
    pub fn sub_channel_id(&self) -> std::option::Option<&str> {
        self.sub_channel_id.as_deref()
    }
    /// <p>The number of members in a SubChannel.</p>
    pub fn membership_count(&self) -> std::option::Option<i32> {
        self.membership_count
    }
}
impl SubChannelSummary {
    /// Creates a new builder-style object to manufacture [`SubChannelSummary`](crate::types::SubChannelSummary).
    pub fn builder() -> crate::types::builders::SubChannelSummaryBuilder {
        crate::types::builders::SubChannelSummaryBuilder::default()
    }
}

/// A builder for [`SubChannelSummary`](crate::types::SubChannelSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SubChannelSummaryBuilder {
    pub(crate) sub_channel_id: std::option::Option<std::string::String>,
    pub(crate) membership_count: std::option::Option<i32>,
}
impl SubChannelSummaryBuilder {
    /// <p>The unique ID of a SubChannel.</p>
    pub fn sub_channel_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.sub_channel_id = Some(input.into());
        self
    }
    /// <p>The unique ID of a SubChannel.</p>
    pub fn set_sub_channel_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sub_channel_id = input;
        self
    }
    /// <p>The number of members in a SubChannel.</p>
    pub fn membership_count(mut self, input: i32) -> Self {
        self.membership_count = Some(input);
        self
    }
    /// <p>The number of members in a SubChannel.</p>
    pub fn set_membership_count(mut self, input: std::option::Option<i32>) -> Self {
        self.membership_count = input;
        self
    }
    /// Consumes the builder and constructs a [`SubChannelSummary`](crate::types::SubChannelSummary).
    pub fn build(self) -> crate::types::SubChannelSummary {
        crate::types::SubChannelSummary {
            sub_channel_id: self.sub_channel_id,
            membership_count: self.membership_count,
        }
    }
}
