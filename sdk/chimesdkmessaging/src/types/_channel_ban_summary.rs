// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary of the details of a <code>ChannelBan</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ChannelBanSummary {
    /// <p>The member being banned from a channel.</p>
    #[doc(hidden)]
    pub member: std::option::Option<crate::types::Identity>,
}
impl ChannelBanSummary {
    /// <p>The member being banned from a channel.</p>
    pub fn member(&self) -> std::option::Option<&crate::types::Identity> {
        self.member.as_ref()
    }
}
impl ChannelBanSummary {
    /// Creates a new builder-style object to manufacture [`ChannelBanSummary`](crate::types::ChannelBanSummary).
    pub fn builder() -> crate::types::builders::ChannelBanSummaryBuilder {
        crate::types::builders::ChannelBanSummaryBuilder::default()
    }
}

/// A builder for [`ChannelBanSummary`](crate::types::ChannelBanSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ChannelBanSummaryBuilder {
    pub(crate) member: std::option::Option<crate::types::Identity>,
}
impl ChannelBanSummaryBuilder {
    /// <p>The member being banned from a channel.</p>
    pub fn member(mut self, input: crate::types::Identity) -> Self {
        self.member = Some(input);
        self
    }
    /// <p>The member being banned from a channel.</p>
    pub fn set_member(mut self, input: std::option::Option<crate::types::Identity>) -> Self {
        self.member = input;
        self
    }
    /// Consumes the builder and constructs a [`ChannelBanSummary`](crate::types::ChannelBanSummary).
    pub fn build(self) -> crate::types::ChannelBanSummary {
        crate::types::ChannelBanSummary {
            member: self.member,
        }
    }
}
