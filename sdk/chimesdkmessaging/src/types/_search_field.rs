// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>Field</code> of the channel that you want to search.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchField {
    /// <p>An <code>enum</code> value that indicates the key to search the channel on. <code>MEMBERS</code> allows you to search channels based on memberships. You can use it with the <code>EQUALS</code> operator to get channels whose memberships are equal to the specified values, and with the <code>INCLUDES</code> operator to get channels whose memberships include the specified values.</p>
    pub key: crate::types::SearchFieldKey,
    /// <p>The values that you want to search for, a list of strings. The values must be <code>AppInstanceUserArns</code> specified as a list of strings.</p> <note>
    /// <p>This operation isn't supported for <code>AppInstanceUsers</code> with large number of memberships.</p>
    /// </note>
    pub values: ::std::vec::Vec<::std::string::String>,
    /// <p>The operator used to compare field values, currently <code>EQUALS</code> or <code>INCLUDES</code>. Use the <code>EQUALS</code> operator to find channels whose memberships equal the specified values. Use the <code>INCLUDES</code> operator to find channels whose memberships include the specified values.</p>
    pub operator: crate::types::SearchFieldOperator,
}
impl SearchField {
    /// <p>An <code>enum</code> value that indicates the key to search the channel on. <code>MEMBERS</code> allows you to search channels based on memberships. You can use it with the <code>EQUALS</code> operator to get channels whose memberships are equal to the specified values, and with the <code>INCLUDES</code> operator to get channels whose memberships include the specified values.</p>
    pub fn key(&self) -> &crate::types::SearchFieldKey {
        &self.key
    }
    /// <p>The values that you want to search for, a list of strings. The values must be <code>AppInstanceUserArns</code> specified as a list of strings.</p> <note>
    /// <p>This operation isn't supported for <code>AppInstanceUsers</code> with large number of memberships.</p>
    /// </note>
    pub fn values(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.values.deref()
    }
    /// <p>The operator used to compare field values, currently <code>EQUALS</code> or <code>INCLUDES</code>. Use the <code>EQUALS</code> operator to find channels whose memberships equal the specified values. Use the <code>INCLUDES</code> operator to find channels whose memberships include the specified values.</p>
    pub fn operator(&self) -> &crate::types::SearchFieldOperator {
        &self.operator
    }
}
impl SearchField {
    /// Creates a new builder-style object to manufacture [`SearchField`](crate::types::SearchField).
    pub fn builder() -> crate::types::builders::SearchFieldBuilder {
        crate::types::builders::SearchFieldBuilder::default()
    }
}

/// A builder for [`SearchField`](crate::types::SearchField).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SearchFieldBuilder {
    pub(crate) key: ::std::option::Option<crate::types::SearchFieldKey>,
    pub(crate) values: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) operator: ::std::option::Option<crate::types::SearchFieldOperator>,
}
impl SearchFieldBuilder {
    /// <p>An <code>enum</code> value that indicates the key to search the channel on. <code>MEMBERS</code> allows you to search channels based on memberships. You can use it with the <code>EQUALS</code> operator to get channels whose memberships are equal to the specified values, and with the <code>INCLUDES</code> operator to get channels whose memberships include the specified values.</p>
    /// This field is required.
    pub fn key(mut self, input: crate::types::SearchFieldKey) -> Self {
        self.key = ::std::option::Option::Some(input);
        self
    }
    /// <p>An <code>enum</code> value that indicates the key to search the channel on. <code>MEMBERS</code> allows you to search channels based on memberships. You can use it with the <code>EQUALS</code> operator to get channels whose memberships are equal to the specified values, and with the <code>INCLUDES</code> operator to get channels whose memberships include the specified values.</p>
    pub fn set_key(mut self, input: ::std::option::Option<crate::types::SearchFieldKey>) -> Self {
        self.key = input;
        self
    }
    /// <p>An <code>enum</code> value that indicates the key to search the channel on. <code>MEMBERS</code> allows you to search channels based on memberships. You can use it with the <code>EQUALS</code> operator to get channels whose memberships are equal to the specified values, and with the <code>INCLUDES</code> operator to get channels whose memberships include the specified values.</p>
    pub fn get_key(&self) -> &::std::option::Option<crate::types::SearchFieldKey> {
        &self.key
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The values that you want to search for, a list of strings. The values must be <code>AppInstanceUserArns</code> specified as a list of strings.</p> <note>
    /// <p>This operation isn't supported for <code>AppInstanceUsers</code> with large number of memberships.</p>
    /// </note>
    pub fn values(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = ::std::option::Option::Some(v);
        self
    }
    /// <p>The values that you want to search for, a list of strings. The values must be <code>AppInstanceUserArns</code> specified as a list of strings.</p> <note>
    /// <p>This operation isn't supported for <code>AppInstanceUsers</code> with large number of memberships.</p>
    /// </note>
    pub fn set_values(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.values = input;
        self
    }
    /// <p>The values that you want to search for, a list of strings. The values must be <code>AppInstanceUserArns</code> specified as a list of strings.</p> <note>
    /// <p>This operation isn't supported for <code>AppInstanceUsers</code> with large number of memberships.</p>
    /// </note>
    pub fn get_values(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.values
    }
    /// <p>The operator used to compare field values, currently <code>EQUALS</code> or <code>INCLUDES</code>. Use the <code>EQUALS</code> operator to find channels whose memberships equal the specified values. Use the <code>INCLUDES</code> operator to find channels whose memberships include the specified values.</p>
    /// This field is required.
    pub fn operator(mut self, input: crate::types::SearchFieldOperator) -> Self {
        self.operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operator used to compare field values, currently <code>EQUALS</code> or <code>INCLUDES</code>. Use the <code>EQUALS</code> operator to find channels whose memberships equal the specified values. Use the <code>INCLUDES</code> operator to find channels whose memberships include the specified values.</p>
    pub fn set_operator(mut self, input: ::std::option::Option<crate::types::SearchFieldOperator>) -> Self {
        self.operator = input;
        self
    }
    /// <p>The operator used to compare field values, currently <code>EQUALS</code> or <code>INCLUDES</code>. Use the <code>EQUALS</code> operator to find channels whose memberships equal the specified values. Use the <code>INCLUDES</code> operator to find channels whose memberships include the specified values.</p>
    pub fn get_operator(&self) -> &::std::option::Option<crate::types::SearchFieldOperator> {
        &self.operator
    }
    /// Consumes the builder and constructs a [`SearchField`](crate::types::SearchField).
    /// This method will fail if any of the following fields are not set:
    /// - [`key`](crate::types::builders::SearchFieldBuilder::key)
    /// - [`values`](crate::types::builders::SearchFieldBuilder::values)
    /// - [`operator`](crate::types::builders::SearchFieldBuilder::operator)
    pub fn build(self) -> ::std::result::Result<crate::types::SearchField, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SearchField {
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building SearchField",
                )
            })?,
            values: self.values.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "values",
                    "values was not specified but it is required when building SearchField",
                )
            })?,
            operator: self.operator.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operator",
                    "operator was not specified but it is required when building SearchField",
                )
            })?,
        })
    }
}
