// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A <code>Field</code> of the channel that you want to search.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchField {
    /// <p>An <code>enum</code> value that indicates the key to search the channel on. <code>MEMBERS</code> allows you to search channels based on memberships. You can use it with the <code>EQUALS</code> operator to get channels whose memberships are equal to the specified values, and with the <code>INCLUDES</code> operator to get channels whose memberships include the specified values.</p>
    #[doc(hidden)]
    pub key: std::option::Option<crate::types::SearchFieldKey>,
    /// <p>The values that you want to search for, a list of strings. The values must be <code>AppInstanceUserArns</code> specified as a list of strings.</p> <note>
    /// <p>This operation isn't supported for <code>AppInstanceUsers</code> with large number of memberships.</p>
    /// </note>
    #[doc(hidden)]
    pub values: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The operator used to compare field values, currently <code>EQUALS</code> or <code>INCLUDES</code>. Use the <code>EQUALS</code> operator to find channels whose memberships equal the specified values. Use the <code>INCLUDES</code> operator to find channels whose memberships include the specified values.</p>
    #[doc(hidden)]
    pub operator: std::option::Option<crate::types::SearchFieldOperator>,
}
impl SearchField {
    /// <p>An <code>enum</code> value that indicates the key to search the channel on. <code>MEMBERS</code> allows you to search channels based on memberships. You can use it with the <code>EQUALS</code> operator to get channels whose memberships are equal to the specified values, and with the <code>INCLUDES</code> operator to get channels whose memberships include the specified values.</p>
    pub fn key(&self) -> std::option::Option<&crate::types::SearchFieldKey> {
        self.key.as_ref()
    }
    /// <p>The values that you want to search for, a list of strings. The values must be <code>AppInstanceUserArns</code> specified as a list of strings.</p> <note>
    /// <p>This operation isn't supported for <code>AppInstanceUsers</code> with large number of memberships.</p>
    /// </note>
    pub fn values(&self) -> std::option::Option<&[std::string::String]> {
        self.values.as_deref()
    }
    /// <p>The operator used to compare field values, currently <code>EQUALS</code> or <code>INCLUDES</code>. Use the <code>EQUALS</code> operator to find channels whose memberships equal the specified values. Use the <code>INCLUDES</code> operator to find channels whose memberships include the specified values.</p>
    pub fn operator(&self) -> std::option::Option<&crate::types::SearchFieldOperator> {
        self.operator.as_ref()
    }
}
impl SearchField {
    /// Creates a new builder-style object to manufacture [`SearchField`](crate::types::SearchField).
    pub fn builder() -> crate::types::builders::SearchFieldBuilder {
        crate::types::builders::SearchFieldBuilder::default()
    }
}

/// A builder for [`SearchField`](crate::types::SearchField).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SearchFieldBuilder {
    pub(crate) key: std::option::Option<crate::types::SearchFieldKey>,
    pub(crate) values: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) operator: std::option::Option<crate::types::SearchFieldOperator>,
}
impl SearchFieldBuilder {
    /// <p>An <code>enum</code> value that indicates the key to search the channel on. <code>MEMBERS</code> allows you to search channels based on memberships. You can use it with the <code>EQUALS</code> operator to get channels whose memberships are equal to the specified values, and with the <code>INCLUDES</code> operator to get channels whose memberships include the specified values.</p>
    pub fn key(mut self, input: crate::types::SearchFieldKey) -> Self {
        self.key = Some(input);
        self
    }
    /// <p>An <code>enum</code> value that indicates the key to search the channel on. <code>MEMBERS</code> allows you to search channels based on memberships. You can use it with the <code>EQUALS</code> operator to get channels whose memberships are equal to the specified values, and with the <code>INCLUDES</code> operator to get channels whose memberships include the specified values.</p>
    pub fn set_key(mut self, input: std::option::Option<crate::types::SearchFieldKey>) -> Self {
        self.key = input;
        self
    }
    /// Appends an item to `values`.
    ///
    /// To override the contents of this collection use [`set_values`](Self::set_values).
    ///
    /// <p>The values that you want to search for, a list of strings. The values must be <code>AppInstanceUserArns</code> specified as a list of strings.</p> <note>
    /// <p>This operation isn't supported for <code>AppInstanceUsers</code> with large number of memberships.</p>
    /// </note>
    pub fn values(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.values.unwrap_or_default();
        v.push(input.into());
        self.values = Some(v);
        self
    }
    /// <p>The values that you want to search for, a list of strings. The values must be <code>AppInstanceUserArns</code> specified as a list of strings.</p> <note>
    /// <p>This operation isn't supported for <code>AppInstanceUsers</code> with large number of memberships.</p>
    /// </note>
    pub fn set_values(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.values = input;
        self
    }
    /// <p>The operator used to compare field values, currently <code>EQUALS</code> or <code>INCLUDES</code>. Use the <code>EQUALS</code> operator to find channels whose memberships equal the specified values. Use the <code>INCLUDES</code> operator to find channels whose memberships include the specified values.</p>
    pub fn operator(mut self, input: crate::types::SearchFieldOperator) -> Self {
        self.operator = Some(input);
        self
    }
    /// <p>The operator used to compare field values, currently <code>EQUALS</code> or <code>INCLUDES</code>. Use the <code>EQUALS</code> operator to find channels whose memberships equal the specified values. Use the <code>INCLUDES</code> operator to find channels whose memberships include the specified values.</p>
    pub fn set_operator(
        mut self,
        input: std::option::Option<crate::types::SearchFieldOperator>,
    ) -> Self {
        self.operator = input;
        self
    }
    /// Consumes the builder and constructs a [`SearchField`](crate::types::SearchField).
    pub fn build(self) -> crate::types::SearchField {
        crate::types::SearchField {
            key: self.key,
            values: self.values,
            operator: self.operator,
        }
    }
}
