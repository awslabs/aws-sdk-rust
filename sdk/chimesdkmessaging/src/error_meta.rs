// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The input parameters don't match the service's restrictions.</p>
    BadRequestException(crate::error::BadRequestException),
    /// <p>The request could not be processed because of conflict in the current state of the resource.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The client is permanently forbidden from making the request.</p>
    ForbiddenException(crate::error::ForbiddenException),
    /// <p>One or more of the resources in the request does not exist in the system.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p>The request exceeds the resource limit.</p>
    ResourceLimitExceededException(crate::error::ResourceLimitExceededException),
    /// <p>The service encountered an unexpected error.</p>
    ServiceFailureException(crate::error::ServiceFailureException),
    /// <p>The service is currently unavailable.</p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// <p>The client exceeded its request rate limit.</p>
    ThrottledClientException(crate::error::ThrottledClientException),
    /// <p>The client is not currently authorized to make the request.</p>
    UnauthorizedClientException(crate::error::UnauthorizedClientException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ResourceLimitExceededException(inner) => inner.fmt(f),
            Error::ServiceFailureException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottledClientException(inner) => inner.fmt(f),
            Error::UnauthorizedClientException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateChannelFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateChannelFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateChannelFlowError> for Error {
    fn from(err: crate::error::AssociateChannelFlowError) -> Self {
        match err {
            crate::error::AssociateChannelFlowError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::AssociateChannelFlowError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::AssociateChannelFlowError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::AssociateChannelFlowError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::AssociateChannelFlowError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::AssociateChannelFlowError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::AssociateChannelFlowError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::AssociateChannelFlowError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::AssociateChannelFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchCreateChannelMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchCreateChannelMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchCreateChannelMembershipError> for Error {
    fn from(err: crate::error::BatchCreateChannelMembershipError) -> Self {
        match err {
            crate::error::BatchCreateChannelMembershipError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::BatchCreateChannelMembershipError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::BatchCreateChannelMembershipError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::BatchCreateChannelMembershipError::ResourceLimitExceededException(
                inner,
            ) => Error::ResourceLimitExceededException(inner),
            crate::error::BatchCreateChannelMembershipError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::BatchCreateChannelMembershipError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::BatchCreateChannelMembershipError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::BatchCreateChannelMembershipError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::BatchCreateChannelMembershipError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ChannelFlowCallbackError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ChannelFlowCallbackError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ChannelFlowCallbackError> for Error {
    fn from(err: crate::error::ChannelFlowCallbackError) -> Self {
        match err {
            crate::error::ChannelFlowCallbackError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ChannelFlowCallbackError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ChannelFlowCallbackError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ChannelFlowCallbackError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ChannelFlowCallbackError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ChannelFlowCallbackError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ChannelFlowCallbackError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ChannelFlowCallbackError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateChannelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateChannelError> for Error {
    fn from(err: crate::error::CreateChannelError) -> Self {
        match err {
            crate::error::CreateChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateChannelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateChannelError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateChannelError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateChannelError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateChannelError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateChannelError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateChannelBanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateChannelBanError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateChannelBanError> for Error {
    fn from(err: crate::error::CreateChannelBanError) -> Self {
        match err {
            crate::error::CreateChannelBanError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateChannelBanError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateChannelBanError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateChannelBanError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateChannelBanError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateChannelBanError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateChannelBanError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateChannelBanError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateChannelBanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateChannelFlowError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateChannelFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateChannelFlowError> for Error {
    fn from(err: crate::error::CreateChannelFlowError) -> Self {
        match err {
            crate::error::CreateChannelFlowError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateChannelFlowError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateChannelFlowError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateChannelFlowError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateChannelFlowError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateChannelFlowError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateChannelFlowError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateChannelFlowError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateChannelFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateChannelMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateChannelMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateChannelMembershipError> for Error {
    fn from(err: crate::error::CreateChannelMembershipError) -> Self {
        match err {
            crate::error::CreateChannelMembershipError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateChannelMembershipError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateChannelMembershipError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateChannelMembershipError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateChannelMembershipError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateChannelMembershipError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateChannelMembershipError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateChannelMembershipError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateChannelMembershipError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateChannelMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateChannelModeratorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateChannelModeratorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateChannelModeratorError> for Error {
    fn from(err: crate::error::CreateChannelModeratorError) -> Self {
        match err {
            crate::error::CreateChannelModeratorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateChannelModeratorError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateChannelModeratorError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::CreateChannelModeratorError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateChannelModeratorError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::CreateChannelModeratorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateChannelModeratorError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::CreateChannelModeratorError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::CreateChannelModeratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteChannelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteChannelError> for Error {
    fn from(err: crate::error::DeleteChannelError) -> Self {
        match err {
            crate::error::DeleteChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteChannelError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteChannelError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteChannelError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteChannelError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteChannelBanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteChannelBanError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteChannelBanError> for Error {
    fn from(err: crate::error::DeleteChannelBanError) -> Self {
        match err {
            crate::error::DeleteChannelBanError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteChannelBanError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteChannelBanError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteChannelBanError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteChannelBanError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteChannelBanError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteChannelBanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteChannelFlowError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteChannelFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteChannelFlowError> for Error {
    fn from(err: crate::error::DeleteChannelFlowError) -> Self {
        match err {
            crate::error::DeleteChannelFlowError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteChannelFlowError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteChannelFlowError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteChannelFlowError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteChannelFlowError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteChannelFlowError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteChannelFlowError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteChannelFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteChannelMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteChannelMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteChannelMembershipError> for Error {
    fn from(err: crate::error::DeleteChannelMembershipError) -> Self {
        match err {
            crate::error::DeleteChannelMembershipError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteChannelMembershipError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteChannelMembershipError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteChannelMembershipError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteChannelMembershipError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteChannelMembershipError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteChannelMembershipError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteChannelMembershipError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteChannelMessageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteChannelMessageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteChannelMessageError> for Error {
    fn from(err: crate::error::DeleteChannelMessageError) -> Self {
        match err {
            crate::error::DeleteChannelMessageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteChannelMessageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteChannelMessageError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteChannelMessageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteChannelMessageError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteChannelMessageError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteChannelMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteChannelModeratorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteChannelModeratorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteChannelModeratorError> for Error {
    fn from(err: crate::error::DeleteChannelModeratorError) -> Self {
        match err {
            crate::error::DeleteChannelModeratorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteChannelModeratorError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteChannelModeratorError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DeleteChannelModeratorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DeleteChannelModeratorError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DeleteChannelModeratorError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DeleteChannelModeratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeChannelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeChannelError> for Error {
    fn from(err: crate::error::DescribeChannelError) -> Self {
        match err {
            crate::error::DescribeChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeChannelError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DescribeChannelError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeChannelError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DescribeChannelError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DescribeChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeChannelBanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeChannelBanError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeChannelBanError> for Error {
    fn from(err: crate::error::DescribeChannelBanError) -> Self {
        match err {
            crate::error::DescribeChannelBanError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeChannelBanError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeChannelBanError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeChannelBanError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DescribeChannelBanError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeChannelBanError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DescribeChannelBanError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DescribeChannelBanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeChannelFlowError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeChannelFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeChannelFlowError> for Error {
    fn from(err: crate::error::DescribeChannelFlowError) -> Self {
        match err {
            crate::error::DescribeChannelFlowError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeChannelFlowError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeChannelFlowError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DescribeChannelFlowError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeChannelFlowError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DescribeChannelFlowError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DescribeChannelFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeChannelMembershipError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeChannelMembershipError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeChannelMembershipError> for Error {
    fn from(err: crate::error::DescribeChannelMembershipError) -> Self {
        match err {
            crate::error::DescribeChannelMembershipError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeChannelMembershipError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeChannelMembershipError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeChannelMembershipError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DescribeChannelMembershipError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeChannelMembershipError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DescribeChannelMembershipError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DescribeChannelMembershipError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeChannelMembershipForAppInstanceUserError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeChannelMembershipForAppInstanceUserError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeChannelMembershipForAppInstanceUserError> for Error {
    fn from(err: crate::error::DescribeChannelMembershipForAppInstanceUserError) -> Self {
        match err {
            crate::error::DescribeChannelMembershipForAppInstanceUserError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DescribeChannelMembershipForAppInstanceUserError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DescribeChannelMembershipForAppInstanceUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DescribeChannelMembershipForAppInstanceUserError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DescribeChannelMembershipForAppInstanceUserError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DescribeChannelMembershipForAppInstanceUserError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DescribeChannelMembershipForAppInstanceUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeChannelModeratedByAppInstanceUserError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeChannelModeratedByAppInstanceUserError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeChannelModeratedByAppInstanceUserError> for Error {
    fn from(err: crate::error::DescribeChannelModeratedByAppInstanceUserError) -> Self {
        match err {
            crate::error::DescribeChannelModeratedByAppInstanceUserError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::DescribeChannelModeratedByAppInstanceUserError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::DescribeChannelModeratedByAppInstanceUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::DescribeChannelModeratedByAppInstanceUserError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::DescribeChannelModeratedByAppInstanceUserError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::DescribeChannelModeratedByAppInstanceUserError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::DescribeChannelModeratedByAppInstanceUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeChannelModeratorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeChannelModeratorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeChannelModeratorError> for Error {
    fn from(err: crate::error::DescribeChannelModeratorError) -> Self {
        match err {
            crate::error::DescribeChannelModeratorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DescribeChannelModeratorError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DescribeChannelModeratorError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeChannelModeratorError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DescribeChannelModeratorError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DescribeChannelModeratorError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DescribeChannelModeratorError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DescribeChannelModeratorError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateChannelFlowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateChannelFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateChannelFlowError> for Error {
    fn from(err: crate::error::DisassociateChannelFlowError) -> Self {
        match err {
            crate::error::DisassociateChannelFlowError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DisassociateChannelFlowError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DisassociateChannelFlowError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DisassociateChannelFlowError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DisassociateChannelFlowError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::DisassociateChannelFlowError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::DisassociateChannelFlowError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::DisassociateChannelFlowError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::DisassociateChannelFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetChannelMembershipPreferencesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetChannelMembershipPreferencesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetChannelMembershipPreferencesError> for Error {
    fn from(err: crate::error::GetChannelMembershipPreferencesError) -> Self {
        match err {
            crate::error::GetChannelMembershipPreferencesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetChannelMembershipPreferencesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetChannelMembershipPreferencesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetChannelMembershipPreferencesError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::GetChannelMembershipPreferencesError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetChannelMembershipPreferencesError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::GetChannelMembershipPreferencesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetChannelMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetChannelMessageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetChannelMessageError> for Error {
    fn from(err: crate::error::GetChannelMessageError) -> Self {
        match err {
            crate::error::GetChannelMessageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetChannelMessageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetChannelMessageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetChannelMessageError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetChannelMessageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetChannelMessageError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetChannelMessageError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetChannelMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetChannelMessageStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetChannelMessageStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetChannelMessageStatusError> for Error {
    fn from(err: crate::error::GetChannelMessageStatusError) -> Self {
        match err {
            crate::error::GetChannelMessageStatusError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetChannelMessageStatusError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetChannelMessageStatusError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetChannelMessageStatusError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetChannelMessageStatusError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetChannelMessageStatusError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetChannelMessageStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMessagingSessionEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetMessagingSessionEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMessagingSessionEndpointError> for Error {
    fn from(err: crate::error::GetMessagingSessionEndpointError) -> Self {
        match err {
            crate::error::GetMessagingSessionEndpointError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetMessagingSessionEndpointError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::GetMessagingSessionEndpointError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetMessagingSessionEndpointError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::GetMessagingSessionEndpointError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::GetMessagingSessionEndpointError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListChannelBansError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListChannelBansError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelBansError> for Error {
    fn from(err: crate::error::ListChannelBansError) -> Self {
        match err {
            crate::error::ListChannelBansError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListChannelBansError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListChannelBansError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListChannelBansError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListChannelBansError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListChannelBansError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListChannelBansError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListChannelFlowsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListChannelFlowsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelFlowsError> for Error {
    fn from(err: crate::error::ListChannelFlowsError) -> Self {
        match err {
            crate::error::ListChannelFlowsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListChannelFlowsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListChannelFlowsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListChannelFlowsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListChannelFlowsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListChannelFlowsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListChannelFlowsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListChannelMembershipsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListChannelMembershipsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelMembershipsError> for Error {
    fn from(err: crate::error::ListChannelMembershipsError) -> Self {
        match err {
            crate::error::ListChannelMembershipsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListChannelMembershipsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListChannelMembershipsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListChannelMembershipsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListChannelMembershipsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListChannelMembershipsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListChannelMembershipsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListChannelMembershipsForAppInstanceUserError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListChannelMembershipsForAppInstanceUserError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelMembershipsForAppInstanceUserError> for Error {
    fn from(err: crate::error::ListChannelMembershipsForAppInstanceUserError) -> Self {
        match err {
            crate::error::ListChannelMembershipsForAppInstanceUserError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListChannelMembershipsForAppInstanceUserError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListChannelMembershipsForAppInstanceUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListChannelMembershipsForAppInstanceUserError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListChannelMembershipsForAppInstanceUserError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListChannelMembershipsForAppInstanceUserError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListChannelMembershipsForAppInstanceUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListChannelMessagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListChannelMessagesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelMessagesError> for Error {
    fn from(err: crate::error::ListChannelMessagesError) -> Self {
        match err {
            crate::error::ListChannelMessagesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListChannelMessagesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListChannelMessagesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListChannelMessagesError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListChannelMessagesError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListChannelMessagesError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListChannelMessagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListChannelModeratorsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListChannelModeratorsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelModeratorsError> for Error {
    fn from(err: crate::error::ListChannelModeratorsError) -> Self {
        match err {
            crate::error::ListChannelModeratorsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListChannelModeratorsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListChannelModeratorsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListChannelModeratorsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListChannelModeratorsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListChannelModeratorsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListChannelModeratorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListChannelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListChannelsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelsError> for Error {
    fn from(err: crate::error::ListChannelsError) -> Self {
        match err {
            crate::error::ListChannelsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListChannelsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListChannelsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListChannelsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListChannelsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListChannelsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListChannelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListChannelsAssociatedWithChannelFlowError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListChannelsAssociatedWithChannelFlowError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelsAssociatedWithChannelFlowError> for Error {
    fn from(err: crate::error::ListChannelsAssociatedWithChannelFlowError) -> Self {
        match err {
            crate::error::ListChannelsAssociatedWithChannelFlowError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListChannelsAssociatedWithChannelFlowError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListChannelsAssociatedWithChannelFlowError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListChannelsAssociatedWithChannelFlowError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListChannelsAssociatedWithChannelFlowError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListChannelsAssociatedWithChannelFlowError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListChannelsAssociatedWithChannelFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListChannelsModeratedByAppInstanceUserError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListChannelsModeratedByAppInstanceUserError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListChannelsModeratedByAppInstanceUserError> for Error {
    fn from(err: crate::error::ListChannelsModeratedByAppInstanceUserError) -> Self {
        match err {
            crate::error::ListChannelsModeratedByAppInstanceUserError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::error::ListChannelsModeratedByAppInstanceUserError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::ListChannelsModeratedByAppInstanceUserError::ServiceFailureException(inner) => Error::ServiceFailureException(inner),
            crate::error::ListChannelsModeratedByAppInstanceUserError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::error::ListChannelsModeratedByAppInstanceUserError::ThrottledClientException(inner) => Error::ThrottledClientException(inner),
            crate::error::ListChannelsModeratedByAppInstanceUserError::UnauthorizedClientException(inner) => Error::UnauthorizedClientException(inner),
            crate::error::ListChannelsModeratedByAppInstanceUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSubChannelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListSubChannelsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSubChannelsError> for Error {
    fn from(err: crate::error::ListSubChannelsError) -> Self {
        match err {
            crate::error::ListSubChannelsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListSubChannelsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListSubChannelsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListSubChannelsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListSubChannelsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListSubChannelsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListSubChannelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ListTagsForResourceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListTagsForResourceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::ListTagsForResourceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::ListTagsForResourceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::PutChannelMembershipPreferencesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PutChannelMembershipPreferencesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutChannelMembershipPreferencesError> for Error {
    fn from(err: crate::error::PutChannelMembershipPreferencesError) -> Self {
        match err {
            crate::error::PutChannelMembershipPreferencesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutChannelMembershipPreferencesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutChannelMembershipPreferencesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::PutChannelMembershipPreferencesError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::PutChannelMembershipPreferencesError::ServiceUnavailableException(
                inner,
            ) => Error::ServiceUnavailableException(inner),
            crate::error::PutChannelMembershipPreferencesError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::PutChannelMembershipPreferencesError::UnauthorizedClientException(
                inner,
            ) => Error::UnauthorizedClientException(inner),
            crate::error::PutChannelMembershipPreferencesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RedactChannelMessageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RedactChannelMessageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RedactChannelMessageError> for Error {
    fn from(err: crate::error::RedactChannelMessageError) -> Self {
        match err {
            crate::error::RedactChannelMessageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::RedactChannelMessageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::RedactChannelMessageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::RedactChannelMessageError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::RedactChannelMessageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::RedactChannelMessageError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::RedactChannelMessageError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::RedactChannelMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SearchChannelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SearchChannelsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SearchChannelsError> for Error {
    fn from(err: crate::error::SearchChannelsError) -> Self {
        match err {
            crate::error::SearchChannelsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::SearchChannelsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::SearchChannelsError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::SearchChannelsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::SearchChannelsError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::SearchChannelsError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::SearchChannelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SendChannelMessageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SendChannelMessageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SendChannelMessageError> for Error {
    fn from(err: crate::error::SendChannelMessageError) -> Self {
        match err {
            crate::error::SendChannelMessageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::SendChannelMessageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::SendChannelMessageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::SendChannelMessageError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::SendChannelMessageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::SendChannelMessageError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::SendChannelMessageError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::SendChannelMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::TagResourceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::TagResourceError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::TagResourceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::TagResourceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::TagResourceError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::TagResourceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UntagResourceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UntagResourceError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UntagResourceError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UntagResourceError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UntagResourceError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateChannelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateChannelError> for Error {
    fn from(err: crate::error::UpdateChannelError) -> Self {
        match err {
            crate::error::UpdateChannelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateChannelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateChannelError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateChannelError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateChannelError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateChannelError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateChannelError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateChannelFlowError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateChannelFlowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateChannelFlowError> for Error {
    fn from(err: crate::error::UpdateChannelFlowError) -> Self {
        match err {
            crate::error::UpdateChannelFlowError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateChannelFlowError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateChannelFlowError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateChannelFlowError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateChannelFlowError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateChannelFlowError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateChannelFlowError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateChannelFlowError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateChannelMessageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateChannelMessageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateChannelMessageError> for Error {
    fn from(err: crate::error::UpdateChannelMessageError) -> Self {
        match err {
            crate::error::UpdateChannelMessageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateChannelMessageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateChannelMessageError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateChannelMessageError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateChannelMessageError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateChannelMessageError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateChannelMessageError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateChannelMessageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateChannelReadMarkerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateChannelReadMarkerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateChannelReadMarkerError> for Error {
    fn from(err: crate::error::UpdateChannelReadMarkerError) -> Self {
        match err {
            crate::error::UpdateChannelReadMarkerError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateChannelReadMarkerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateChannelReadMarkerError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateChannelReadMarkerError::ServiceFailureException(inner) => {
                Error::ServiceFailureException(inner)
            }
            crate::error::UpdateChannelReadMarkerError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateChannelReadMarkerError::ThrottledClientException(inner) => {
                Error::ThrottledClientException(inner)
            }
            crate::error::UpdateChannelReadMarkerError::UnauthorizedClientException(inner) => {
                Error::UnauthorizedClientException(inner)
            }
            crate::error::UpdateChannelReadMarkerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ResourceLimitExceededException(e) => e.request_id(),
            Self::ServiceFailureException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::ThrottledClientException(e) => e.request_id(),
            Self::UnauthorizedClientException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
