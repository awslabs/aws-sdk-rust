// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConfirmTransitVirtualInterfaceOutput {
    /// <p>The state of the virtual interface. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>confirming</code>: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.</p> </li>
    /// <li> <p> <code>verifying</code>: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.</p> </li>
    /// <li> <p> <code>pending</code>: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.</p> </li>
    /// <li> <p> <code>available</code>: A virtual interface that is able to forward traffic.</p> </li>
    /// <li> <p> <code>down</code>: A virtual interface that is BGP down.</p> </li>
    /// <li> <p> <code>deleting</code>: A virtual interface is in this state immediately after calling <code>DeleteVirtualInterface</code> until it can no longer forward traffic.</p> </li>
    /// <li> <p> <code>deleted</code>: A virtual interface that cannot forward traffic.</p> </li>
    /// <li> <p> <code>rejected</code>: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the <code>Confirming</code> state is deleted by the virtual interface owner, the virtual interface enters the <code>Rejected</code> state.</p> </li>
    /// <li> <p> <code>unknown</code>: The state of the virtual interface is not available.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub virtual_interface_state: std::option::Option<crate::types::VirtualInterfaceState>,
    _request_id: Option<String>,
}
impl ConfirmTransitVirtualInterfaceOutput {
    /// <p>The state of the virtual interface. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>confirming</code>: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.</p> </li>
    /// <li> <p> <code>verifying</code>: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.</p> </li>
    /// <li> <p> <code>pending</code>: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.</p> </li>
    /// <li> <p> <code>available</code>: A virtual interface that is able to forward traffic.</p> </li>
    /// <li> <p> <code>down</code>: A virtual interface that is BGP down.</p> </li>
    /// <li> <p> <code>deleting</code>: A virtual interface is in this state immediately after calling <code>DeleteVirtualInterface</code> until it can no longer forward traffic.</p> </li>
    /// <li> <p> <code>deleted</code>: A virtual interface that cannot forward traffic.</p> </li>
    /// <li> <p> <code>rejected</code>: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the <code>Confirming</code> state is deleted by the virtual interface owner, the virtual interface enters the <code>Rejected</code> state.</p> </li>
    /// <li> <p> <code>unknown</code>: The state of the virtual interface is not available.</p> </li>
    /// </ul>
    pub fn virtual_interface_state(
        &self,
    ) -> std::option::Option<&crate::types::VirtualInterfaceState> {
        self.virtual_interface_state.as_ref()
    }
}
impl aws_http::request_id::RequestId for ConfirmTransitVirtualInterfaceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ConfirmTransitVirtualInterfaceOutput {
    /// Creates a new builder-style object to manufacture [`ConfirmTransitVirtualInterfaceOutput`](crate::operation::confirm_transit_virtual_interface::ConfirmTransitVirtualInterfaceOutput).
    pub fn builder() -> crate::operation::confirm_transit_virtual_interface::builders::ConfirmTransitVirtualInterfaceOutputBuilder{
        crate::operation::confirm_transit_virtual_interface::builders::ConfirmTransitVirtualInterfaceOutputBuilder::default()
    }
}

/// A builder for [`ConfirmTransitVirtualInterfaceOutput`](crate::operation::confirm_transit_virtual_interface::ConfirmTransitVirtualInterfaceOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConfirmTransitVirtualInterfaceOutputBuilder {
    pub(crate) virtual_interface_state: std::option::Option<crate::types::VirtualInterfaceState>,
    _request_id: Option<String>,
}
impl ConfirmTransitVirtualInterfaceOutputBuilder {
    /// <p>The state of the virtual interface. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>confirming</code>: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.</p> </li>
    /// <li> <p> <code>verifying</code>: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.</p> </li>
    /// <li> <p> <code>pending</code>: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.</p> </li>
    /// <li> <p> <code>available</code>: A virtual interface that is able to forward traffic.</p> </li>
    /// <li> <p> <code>down</code>: A virtual interface that is BGP down.</p> </li>
    /// <li> <p> <code>deleting</code>: A virtual interface is in this state immediately after calling <code>DeleteVirtualInterface</code> until it can no longer forward traffic.</p> </li>
    /// <li> <p> <code>deleted</code>: A virtual interface that cannot forward traffic.</p> </li>
    /// <li> <p> <code>rejected</code>: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the <code>Confirming</code> state is deleted by the virtual interface owner, the virtual interface enters the <code>Rejected</code> state.</p> </li>
    /// <li> <p> <code>unknown</code>: The state of the virtual interface is not available.</p> </li>
    /// </ul>
    pub fn virtual_interface_state(mut self, input: crate::types::VirtualInterfaceState) -> Self {
        self.virtual_interface_state = Some(input);
        self
    }
    /// <p>The state of the virtual interface. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>confirming</code>: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.</p> </li>
    /// <li> <p> <code>verifying</code>: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.</p> </li>
    /// <li> <p> <code>pending</code>: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.</p> </li>
    /// <li> <p> <code>available</code>: A virtual interface that is able to forward traffic.</p> </li>
    /// <li> <p> <code>down</code>: A virtual interface that is BGP down.</p> </li>
    /// <li> <p> <code>deleting</code>: A virtual interface is in this state immediately after calling <code>DeleteVirtualInterface</code> until it can no longer forward traffic.</p> </li>
    /// <li> <p> <code>deleted</code>: A virtual interface that cannot forward traffic.</p> </li>
    /// <li> <p> <code>rejected</code>: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the <code>Confirming</code> state is deleted by the virtual interface owner, the virtual interface enters the <code>Rejected</code> state.</p> </li>
    /// <li> <p> <code>unknown</code>: The state of the virtual interface is not available.</p> </li>
    /// </ul>
    pub fn set_virtual_interface_state(
        mut self,
        input: std::option::Option<crate::types::VirtualInterfaceState>,
    ) -> Self {
        self.virtual_interface_state = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ConfirmTransitVirtualInterfaceOutput`](crate::operation::confirm_transit_virtual_interface::ConfirmTransitVirtualInterfaceOutput).
    pub fn build(
        self,
    ) -> crate::operation::confirm_transit_virtual_interface::ConfirmTransitVirtualInterfaceOutput
    {
        crate::operation::confirm_transit_virtual_interface::ConfirmTransitVirtualInterfaceOutput {
            virtual_interface_state: self.virtual_interface_state,
            _request_id: self._request_id,
        }
    }
}
