// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateVirtualInterfaceAttributesInput {
    /// <p>The ID of the virtual private interface.</p>
    pub virtual_interface_id: ::std::option::Option<::std::string::String>,
    /// <p>The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.</p>
    pub mtu: ::std::option::Option<i32>,
    /// <p>Indicates whether to enable or disable SiteLink.</p>
    pub enable_site_link: ::std::option::Option<bool>,
    /// <p>The name of the virtual private interface.</p>
    pub virtual_interface_name: ::std::option::Option<::std::string::String>,
}
impl UpdateVirtualInterfaceAttributesInput {
    /// <p>The ID of the virtual private interface.</p>
    pub fn virtual_interface_id(&self) -> ::std::option::Option<&str> {
        self.virtual_interface_id.as_deref()
    }
    /// <p>The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.</p>
    pub fn mtu(&self) -> ::std::option::Option<i32> {
        self.mtu
    }
    /// <p>Indicates whether to enable or disable SiteLink.</p>
    pub fn enable_site_link(&self) -> ::std::option::Option<bool> {
        self.enable_site_link
    }
    /// <p>The name of the virtual private interface.</p>
    pub fn virtual_interface_name(&self) -> ::std::option::Option<&str> {
        self.virtual_interface_name.as_deref()
    }
}
impl UpdateVirtualInterfaceAttributesInput {
    /// Creates a new builder-style object to manufacture [`UpdateVirtualInterfaceAttributesInput`](crate::operation::update_virtual_interface_attributes::UpdateVirtualInterfaceAttributesInput).
    pub fn builder() -> crate::operation::update_virtual_interface_attributes::builders::UpdateVirtualInterfaceAttributesInputBuilder {
        crate::operation::update_virtual_interface_attributes::builders::UpdateVirtualInterfaceAttributesInputBuilder::default()
    }
}

/// A builder for [`UpdateVirtualInterfaceAttributesInput`](crate::operation::update_virtual_interface_attributes::UpdateVirtualInterfaceAttributesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateVirtualInterfaceAttributesInputBuilder {
    pub(crate) virtual_interface_id: ::std::option::Option<::std::string::String>,
    pub(crate) mtu: ::std::option::Option<i32>,
    pub(crate) enable_site_link: ::std::option::Option<bool>,
    pub(crate) virtual_interface_name: ::std::option::Option<::std::string::String>,
}
impl UpdateVirtualInterfaceAttributesInputBuilder {
    /// <p>The ID of the virtual private interface.</p>
    /// This field is required.
    pub fn virtual_interface_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.virtual_interface_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the virtual private interface.</p>
    pub fn set_virtual_interface_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.virtual_interface_id = input;
        self
    }
    /// <p>The ID of the virtual private interface.</p>
    pub fn get_virtual_interface_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.virtual_interface_id
    }
    /// <p>The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.</p>
    pub fn mtu(mut self, input: i32) -> Self {
        self.mtu = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.</p>
    pub fn set_mtu(mut self, input: ::std::option::Option<i32>) -> Self {
        self.mtu = input;
        self
    }
    /// <p>The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.</p>
    pub fn get_mtu(&self) -> &::std::option::Option<i32> {
        &self.mtu
    }
    /// <p>Indicates whether to enable or disable SiteLink.</p>
    pub fn enable_site_link(mut self, input: bool) -> Self {
        self.enable_site_link = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether to enable or disable SiteLink.</p>
    pub fn set_enable_site_link(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_site_link = input;
        self
    }
    /// <p>Indicates whether to enable or disable SiteLink.</p>
    pub fn get_enable_site_link(&self) -> &::std::option::Option<bool> {
        &self.enable_site_link
    }
    /// <p>The name of the virtual private interface.</p>
    pub fn virtual_interface_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.virtual_interface_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the virtual private interface.</p>
    pub fn set_virtual_interface_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.virtual_interface_name = input;
        self
    }
    /// <p>The name of the virtual private interface.</p>
    pub fn get_virtual_interface_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.virtual_interface_name
    }
    /// Consumes the builder and constructs a [`UpdateVirtualInterfaceAttributesInput`](crate::operation::update_virtual_interface_attributes::UpdateVirtualInterfaceAttributesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_virtual_interface_attributes::UpdateVirtualInterfaceAttributesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_virtual_interface_attributes::UpdateVirtualInterfaceAttributesInput {
                virtual_interface_id: self.virtual_interface_id,
                mtu: self.mtu,
                enable_site_link: self.enable_site_link,
                virtual_interface_name: self.virtual_interface_name,
            },
        )
    }
}
