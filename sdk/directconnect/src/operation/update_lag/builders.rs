// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_lag::_update_lag_output::UpdateLagOutputBuilder;

pub use crate::operation::update_lag::_update_lag_input::UpdateLagInputBuilder;

/// Fluent builder constructing a request to `UpdateLag`.
///
/// <p>Updates the attributes of the specified link aggregation group (LAG).</p>
/// <p>You can update the following LAG attributes:</p>
/// <ul>
/// <li> <p>The name of the LAG.</p> </li>
/// <li> <p>The value for the minimum number of connections that must be operational for the LAG itself to be operational. </p> </li>
/// <li> <p>The LAG's MACsec encryption mode.</p> <p>Amazon Web Services assigns this value to each connection which is part of the LAG.</p> </li>
/// <li> <p>The tags</p> </li>
/// </ul> <note>
/// <p>If you adjust the threshold value for the minimum number of operational connections, ensure that the new value does not cause the LAG to fall below the threshold and become non-operational.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateLagFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_lag::builders::UpdateLagInputBuilder,
}
impl UpdateLagFluentBuilder {
    /// Creates a new `UpdateLag`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_lag::UpdateLag,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_lag::UpdateLagError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_lag::UpdateLagOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_lag::UpdateLagError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the LAG.</p>
    pub fn lag_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lag_id(input.into());
        self
    }
    /// <p>The ID of the LAG.</p>
    pub fn set_lag_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lag_id(input);
        self
    }
    /// <p>The name of the LAG.</p>
    pub fn lag_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.lag_name(input.into());
        self
    }
    /// <p>The name of the LAG.</p>
    pub fn set_lag_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_lag_name(input);
        self
    }
    /// <p>The minimum number of physical connections that must be operational for the LAG itself to be operational.</p>
    pub fn minimum_links(mut self, input: i32) -> Self {
        self.inner = self.inner.minimum_links(input);
        self
    }
    /// <p>The minimum number of physical connections that must be operational for the LAG itself to be operational.</p>
    pub fn set_minimum_links(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_minimum_links(input);
        self
    }
    /// <p>The LAG MAC Security (MACsec) encryption mode.</p>
    /// <p>Amazon Web Services applies the value to all connections which are part of the LAG.</p>
    pub fn encryption_mode(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.encryption_mode(input.into());
        self
    }
    /// <p>The LAG MAC Security (MACsec) encryption mode.</p>
    /// <p>Amazon Web Services applies the value to all connections which are part of the LAG.</p>
    pub fn set_encryption_mode(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_encryption_mode(input);
        self
    }
}
