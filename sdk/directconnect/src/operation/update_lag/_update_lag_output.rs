// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a link aggregation group (LAG).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateLagOutput {
    /// <p>The individual bandwidth of the physical connections bundled by the LAG. The possible values are 1Gbps and 10Gbps. </p>
    #[doc(hidden)]
    pub connections_bandwidth: std::option::Option<std::string::String>,
    /// <p>The number of physical dedicated connections bundled by the LAG, up to a maximum of 10.</p>
    #[doc(hidden)]
    pub number_of_connections: i32,
    /// <p>The ID of the LAG.</p>
    #[doc(hidden)]
    pub lag_id: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the LAG.</p>
    #[doc(hidden)]
    pub owner_account: std::option::Option<std::string::String>,
    /// <p>The name of the LAG.</p>
    #[doc(hidden)]
    pub lag_name: std::option::Option<std::string::String>,
    /// <p>The state of the LAG. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>requested</code>: The initial state of a LAG. The LAG stays in the requested state until the Letter of Authorization (LOA) is available.</p> </li>
    /// <li> <p> <code>pending</code>: The LAG has been approved and is being initialized.</p> </li>
    /// <li> <p> <code>available</code>: The network link is established and the LAG is ready for use.</p> </li>
    /// <li> <p> <code>down</code>: The network link is down.</p> </li>
    /// <li> <p> <code>deleting</code>: The LAG is being deleted.</p> </li>
    /// <li> <p> <code>deleted</code>: The LAG is deleted.</p> </li>
    /// <li> <p> <code>unknown</code>: The state of the LAG is not available.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub lag_state: std::option::Option<crate::types::LagState>,
    /// <p>The location of the LAG.</p>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services Region where the connection is located.</p>
    #[doc(hidden)]
    pub region: std::option::Option<std::string::String>,
    /// <p>The minimum number of physical dedicated connections that must be operational for the LAG itself to be operational.</p>
    #[doc(hidden)]
    pub minimum_links: i32,
    /// <p>The Direct Connect endpoint that hosts the LAG.</p>
    #[doc(hidden)]
    pub aws_device: std::option::Option<std::string::String>,
    /// <p>The Direct Connect endpoint that hosts the LAG.</p>
    #[doc(hidden)]
    pub aws_device_v2: std::option::Option<std::string::String>,
    /// <p>The Direct Connect endpoint that terminates the logical connection. This device might be different than the device that terminates the physical connection.</p>
    #[doc(hidden)]
    pub aws_logical_device_id: std::option::Option<std::string::String>,
    /// <p>The connections bundled by the LAG.</p>
    #[doc(hidden)]
    pub connections: std::option::Option<std::vec::Vec<crate::types::Connection>>,
    /// <p>Indicates whether the LAG can host other connections.</p>
    #[doc(hidden)]
    pub allows_hosted_connections: bool,
    /// <p>Indicates whether jumbo frames (9001 MTU) are supported.</p>
    #[doc(hidden)]
    pub jumbo_frame_capable: std::option::Option<bool>,
    /// <p>Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).</p>
    #[doc(hidden)]
    pub has_logical_redundancy: std::option::Option<crate::types::HasLogicalRedundancy>,
    /// <p>The tags associated with the LAG.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The name of the service provider associated with the LAG.</p>
    #[doc(hidden)]
    pub provider_name: std::option::Option<std::string::String>,
    /// <p>Indicates whether the LAG supports MAC Security (MACsec).</p>
    #[doc(hidden)]
    pub mac_sec_capable: std::option::Option<bool>,
    /// <p>The LAG MAC Security (MACsec) encryption mode.</p>
    /// <p>The valid values are <code>no_encrypt</code>, <code>should_encrypt</code>, and <code>must_encrypt</code>.</p>
    #[doc(hidden)]
    pub encryption_mode: std::option::Option<std::string::String>,
    /// <p>The MAC Security (MACsec) security keys associated with the LAG.</p>
    #[doc(hidden)]
    pub mac_sec_keys: std::option::Option<std::vec::Vec<crate::types::MacSecKey>>,
    _request_id: Option<String>,
}
impl UpdateLagOutput {
    /// <p>The individual bandwidth of the physical connections bundled by the LAG. The possible values are 1Gbps and 10Gbps. </p>
    pub fn connections_bandwidth(&self) -> std::option::Option<&str> {
        self.connections_bandwidth.as_deref()
    }
    /// <p>The number of physical dedicated connections bundled by the LAG, up to a maximum of 10.</p>
    pub fn number_of_connections(&self) -> i32 {
        self.number_of_connections
    }
    /// <p>The ID of the LAG.</p>
    pub fn lag_id(&self) -> std::option::Option<&str> {
        self.lag_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the LAG.</p>
    pub fn owner_account(&self) -> std::option::Option<&str> {
        self.owner_account.as_deref()
    }
    /// <p>The name of the LAG.</p>
    pub fn lag_name(&self) -> std::option::Option<&str> {
        self.lag_name.as_deref()
    }
    /// <p>The state of the LAG. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>requested</code>: The initial state of a LAG. The LAG stays in the requested state until the Letter of Authorization (LOA) is available.</p> </li>
    /// <li> <p> <code>pending</code>: The LAG has been approved and is being initialized.</p> </li>
    /// <li> <p> <code>available</code>: The network link is established and the LAG is ready for use.</p> </li>
    /// <li> <p> <code>down</code>: The network link is down.</p> </li>
    /// <li> <p> <code>deleting</code>: The LAG is being deleted.</p> </li>
    /// <li> <p> <code>deleted</code>: The LAG is deleted.</p> </li>
    /// <li> <p> <code>unknown</code>: The state of the LAG is not available.</p> </li>
    /// </ul>
    pub fn lag_state(&self) -> std::option::Option<&crate::types::LagState> {
        self.lag_state.as_ref()
    }
    /// <p>The location of the LAG.</p>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The Amazon Web Services Region where the connection is located.</p>
    pub fn region(&self) -> std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The minimum number of physical dedicated connections that must be operational for the LAG itself to be operational.</p>
    pub fn minimum_links(&self) -> i32 {
        self.minimum_links
    }
    /// <p>The Direct Connect endpoint that hosts the LAG.</p>
    pub fn aws_device(&self) -> std::option::Option<&str> {
        self.aws_device.as_deref()
    }
    /// <p>The Direct Connect endpoint that hosts the LAG.</p>
    pub fn aws_device_v2(&self) -> std::option::Option<&str> {
        self.aws_device_v2.as_deref()
    }
    /// <p>The Direct Connect endpoint that terminates the logical connection. This device might be different than the device that terminates the physical connection.</p>
    pub fn aws_logical_device_id(&self) -> std::option::Option<&str> {
        self.aws_logical_device_id.as_deref()
    }
    /// <p>The connections bundled by the LAG.</p>
    pub fn connections(&self) -> std::option::Option<&[crate::types::Connection]> {
        self.connections.as_deref()
    }
    /// <p>Indicates whether the LAG can host other connections.</p>
    pub fn allows_hosted_connections(&self) -> bool {
        self.allows_hosted_connections
    }
    /// <p>Indicates whether jumbo frames (9001 MTU) are supported.</p>
    pub fn jumbo_frame_capable(&self) -> std::option::Option<bool> {
        self.jumbo_frame_capable
    }
    /// <p>Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).</p>
    pub fn has_logical_redundancy(
        &self,
    ) -> std::option::Option<&crate::types::HasLogicalRedundancy> {
        self.has_logical_redundancy.as_ref()
    }
    /// <p>The tags associated with the LAG.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The name of the service provider associated with the LAG.</p>
    pub fn provider_name(&self) -> std::option::Option<&str> {
        self.provider_name.as_deref()
    }
    /// <p>Indicates whether the LAG supports MAC Security (MACsec).</p>
    pub fn mac_sec_capable(&self) -> std::option::Option<bool> {
        self.mac_sec_capable
    }
    /// <p>The LAG MAC Security (MACsec) encryption mode.</p>
    /// <p>The valid values are <code>no_encrypt</code>, <code>should_encrypt</code>, and <code>must_encrypt</code>.</p>
    pub fn encryption_mode(&self) -> std::option::Option<&str> {
        self.encryption_mode.as_deref()
    }
    /// <p>The MAC Security (MACsec) security keys associated with the LAG.</p>
    pub fn mac_sec_keys(&self) -> std::option::Option<&[crate::types::MacSecKey]> {
        self.mac_sec_keys.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateLagOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateLagOutput {
    /// Creates a new builder-style object to manufacture [`UpdateLagOutput`](crate::operation::update_lag::UpdateLagOutput).
    pub fn builder() -> crate::operation::update_lag::builders::UpdateLagOutputBuilder {
        crate::operation::update_lag::builders::UpdateLagOutputBuilder::default()
    }
}

/// A builder for [`UpdateLagOutput`](crate::operation::update_lag::UpdateLagOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateLagOutputBuilder {
    pub(crate) connections_bandwidth: std::option::Option<std::string::String>,
    pub(crate) number_of_connections: std::option::Option<i32>,
    pub(crate) lag_id: std::option::Option<std::string::String>,
    pub(crate) owner_account: std::option::Option<std::string::String>,
    pub(crate) lag_name: std::option::Option<std::string::String>,
    pub(crate) lag_state: std::option::Option<crate::types::LagState>,
    pub(crate) location: std::option::Option<std::string::String>,
    pub(crate) region: std::option::Option<std::string::String>,
    pub(crate) minimum_links: std::option::Option<i32>,
    pub(crate) aws_device: std::option::Option<std::string::String>,
    pub(crate) aws_device_v2: std::option::Option<std::string::String>,
    pub(crate) aws_logical_device_id: std::option::Option<std::string::String>,
    pub(crate) connections: std::option::Option<std::vec::Vec<crate::types::Connection>>,
    pub(crate) allows_hosted_connections: std::option::Option<bool>,
    pub(crate) jumbo_frame_capable: std::option::Option<bool>,
    pub(crate) has_logical_redundancy: std::option::Option<crate::types::HasLogicalRedundancy>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) provider_name: std::option::Option<std::string::String>,
    pub(crate) mac_sec_capable: std::option::Option<bool>,
    pub(crate) encryption_mode: std::option::Option<std::string::String>,
    pub(crate) mac_sec_keys: std::option::Option<std::vec::Vec<crate::types::MacSecKey>>,
    _request_id: Option<String>,
}
impl UpdateLagOutputBuilder {
    /// <p>The individual bandwidth of the physical connections bundled by the LAG. The possible values are 1Gbps and 10Gbps. </p>
    pub fn connections_bandwidth(mut self, input: impl Into<std::string::String>) -> Self {
        self.connections_bandwidth = Some(input.into());
        self
    }
    /// <p>The individual bandwidth of the physical connections bundled by the LAG. The possible values are 1Gbps and 10Gbps. </p>
    pub fn set_connections_bandwidth(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.connections_bandwidth = input;
        self
    }
    /// <p>The number of physical dedicated connections bundled by the LAG, up to a maximum of 10.</p>
    pub fn number_of_connections(mut self, input: i32) -> Self {
        self.number_of_connections = Some(input);
        self
    }
    /// <p>The number of physical dedicated connections bundled by the LAG, up to a maximum of 10.</p>
    pub fn set_number_of_connections(mut self, input: std::option::Option<i32>) -> Self {
        self.number_of_connections = input;
        self
    }
    /// <p>The ID of the LAG.</p>
    pub fn lag_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.lag_id = Some(input.into());
        self
    }
    /// <p>The ID of the LAG.</p>
    pub fn set_lag_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lag_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the LAG.</p>
    pub fn owner_account(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_account = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the LAG.</p>
    pub fn set_owner_account(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_account = input;
        self
    }
    /// <p>The name of the LAG.</p>
    pub fn lag_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.lag_name = Some(input.into());
        self
    }
    /// <p>The name of the LAG.</p>
    pub fn set_lag_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lag_name = input;
        self
    }
    /// <p>The state of the LAG. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>requested</code>: The initial state of a LAG. The LAG stays in the requested state until the Letter of Authorization (LOA) is available.</p> </li>
    /// <li> <p> <code>pending</code>: The LAG has been approved and is being initialized.</p> </li>
    /// <li> <p> <code>available</code>: The network link is established and the LAG is ready for use.</p> </li>
    /// <li> <p> <code>down</code>: The network link is down.</p> </li>
    /// <li> <p> <code>deleting</code>: The LAG is being deleted.</p> </li>
    /// <li> <p> <code>deleted</code>: The LAG is deleted.</p> </li>
    /// <li> <p> <code>unknown</code>: The state of the LAG is not available.</p> </li>
    /// </ul>
    pub fn lag_state(mut self, input: crate::types::LagState) -> Self {
        self.lag_state = Some(input);
        self
    }
    /// <p>The state of the LAG. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>requested</code>: The initial state of a LAG. The LAG stays in the requested state until the Letter of Authorization (LOA) is available.</p> </li>
    /// <li> <p> <code>pending</code>: The LAG has been approved and is being initialized.</p> </li>
    /// <li> <p> <code>available</code>: The network link is established and the LAG is ready for use.</p> </li>
    /// <li> <p> <code>down</code>: The network link is down.</p> </li>
    /// <li> <p> <code>deleting</code>: The LAG is being deleted.</p> </li>
    /// <li> <p> <code>deleted</code>: The LAG is deleted.</p> </li>
    /// <li> <p> <code>unknown</code>: The state of the LAG is not available.</p> </li>
    /// </ul>
    pub fn set_lag_state(mut self, input: std::option::Option<crate::types::LagState>) -> Self {
        self.lag_state = input;
        self
    }
    /// <p>The location of the LAG.</p>
    pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
        self.location = Some(input.into());
        self
    }
    /// <p>The location of the LAG.</p>
    pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The Amazon Web Services Region where the connection is located.</p>
    pub fn region(mut self, input: impl Into<std::string::String>) -> Self {
        self.region = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the connection is located.</p>
    pub fn set_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The minimum number of physical dedicated connections that must be operational for the LAG itself to be operational.</p>
    pub fn minimum_links(mut self, input: i32) -> Self {
        self.minimum_links = Some(input);
        self
    }
    /// <p>The minimum number of physical dedicated connections that must be operational for the LAG itself to be operational.</p>
    pub fn set_minimum_links(mut self, input: std::option::Option<i32>) -> Self {
        self.minimum_links = input;
        self
    }
    /// <p>The Direct Connect endpoint that hosts the LAG.</p>
    pub fn aws_device(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_device = Some(input.into());
        self
    }
    /// <p>The Direct Connect endpoint that hosts the LAG.</p>
    pub fn set_aws_device(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_device = input;
        self
    }
    /// <p>The Direct Connect endpoint that hosts the LAG.</p>
    pub fn aws_device_v2(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_device_v2 = Some(input.into());
        self
    }
    /// <p>The Direct Connect endpoint that hosts the LAG.</p>
    pub fn set_aws_device_v2(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_device_v2 = input;
        self
    }
    /// <p>The Direct Connect endpoint that terminates the logical connection. This device might be different than the device that terminates the physical connection.</p>
    pub fn aws_logical_device_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_logical_device_id = Some(input.into());
        self
    }
    /// <p>The Direct Connect endpoint that terminates the logical connection. This device might be different than the device that terminates the physical connection.</p>
    pub fn set_aws_logical_device_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.aws_logical_device_id = input;
        self
    }
    /// Appends an item to `connections`.
    ///
    /// To override the contents of this collection use [`set_connections`](Self::set_connections).
    ///
    /// <p>The connections bundled by the LAG.</p>
    pub fn connections(mut self, input: crate::types::Connection) -> Self {
        let mut v = self.connections.unwrap_or_default();
        v.push(input);
        self.connections = Some(v);
        self
    }
    /// <p>The connections bundled by the LAG.</p>
    pub fn set_connections(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Connection>>,
    ) -> Self {
        self.connections = input;
        self
    }
    /// <p>Indicates whether the LAG can host other connections.</p>
    pub fn allows_hosted_connections(mut self, input: bool) -> Self {
        self.allows_hosted_connections = Some(input);
        self
    }
    /// <p>Indicates whether the LAG can host other connections.</p>
    pub fn set_allows_hosted_connections(mut self, input: std::option::Option<bool>) -> Self {
        self.allows_hosted_connections = input;
        self
    }
    /// <p>Indicates whether jumbo frames (9001 MTU) are supported.</p>
    pub fn jumbo_frame_capable(mut self, input: bool) -> Self {
        self.jumbo_frame_capable = Some(input);
        self
    }
    /// <p>Indicates whether jumbo frames (9001 MTU) are supported.</p>
    pub fn set_jumbo_frame_capable(mut self, input: std::option::Option<bool>) -> Self {
        self.jumbo_frame_capable = input;
        self
    }
    /// <p>Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).</p>
    pub fn has_logical_redundancy(mut self, input: crate::types::HasLogicalRedundancy) -> Self {
        self.has_logical_redundancy = Some(input);
        self
    }
    /// <p>Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).</p>
    pub fn set_has_logical_redundancy(
        mut self,
        input: std::option::Option<crate::types::HasLogicalRedundancy>,
    ) -> Self {
        self.has_logical_redundancy = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the LAG.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags associated with the LAG.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The name of the service provider associated with the LAG.</p>
    pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.provider_name = Some(input.into());
        self
    }
    /// <p>The name of the service provider associated with the LAG.</p>
    pub fn set_provider_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.provider_name = input;
        self
    }
    /// <p>Indicates whether the LAG supports MAC Security (MACsec).</p>
    pub fn mac_sec_capable(mut self, input: bool) -> Self {
        self.mac_sec_capable = Some(input);
        self
    }
    /// <p>Indicates whether the LAG supports MAC Security (MACsec).</p>
    pub fn set_mac_sec_capable(mut self, input: std::option::Option<bool>) -> Self {
        self.mac_sec_capable = input;
        self
    }
    /// <p>The LAG MAC Security (MACsec) encryption mode.</p>
    /// <p>The valid values are <code>no_encrypt</code>, <code>should_encrypt</code>, and <code>must_encrypt</code>.</p>
    pub fn encryption_mode(mut self, input: impl Into<std::string::String>) -> Self {
        self.encryption_mode = Some(input.into());
        self
    }
    /// <p>The LAG MAC Security (MACsec) encryption mode.</p>
    /// <p>The valid values are <code>no_encrypt</code>, <code>should_encrypt</code>, and <code>must_encrypt</code>.</p>
    pub fn set_encryption_mode(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.encryption_mode = input;
        self
    }
    /// Appends an item to `mac_sec_keys`.
    ///
    /// To override the contents of this collection use [`set_mac_sec_keys`](Self::set_mac_sec_keys).
    ///
    /// <p>The MAC Security (MACsec) security keys associated with the LAG.</p>
    pub fn mac_sec_keys(mut self, input: crate::types::MacSecKey) -> Self {
        let mut v = self.mac_sec_keys.unwrap_or_default();
        v.push(input);
        self.mac_sec_keys = Some(v);
        self
    }
    /// <p>The MAC Security (MACsec) security keys associated with the LAG.</p>
    pub fn set_mac_sec_keys(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MacSecKey>>,
    ) -> Self {
        self.mac_sec_keys = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateLagOutput`](crate::operation::update_lag::UpdateLagOutput).
    pub fn build(self) -> crate::operation::update_lag::UpdateLagOutput {
        crate::operation::update_lag::UpdateLagOutput {
            connections_bandwidth: self.connections_bandwidth,
            number_of_connections: self.number_of_connections.unwrap_or_default(),
            lag_id: self.lag_id,
            owner_account: self.owner_account,
            lag_name: self.lag_name,
            lag_state: self.lag_state,
            location: self.location,
            region: self.region,
            minimum_links: self.minimum_links.unwrap_or_default(),
            aws_device: self.aws_device,
            aws_device_v2: self.aws_device_v2,
            aws_logical_device_id: self.aws_logical_device_id,
            connections: self.connections,
            allows_hosted_connections: self.allows_hosted_connections.unwrap_or_default(),
            jumbo_frame_capable: self.jumbo_frame_capable,
            has_logical_redundancy: self.has_logical_redundancy,
            tags: self.tags,
            provider_name: self.provider_name,
            mac_sec_capable: self.mac_sec_capable,
            encryption_mode: self.encryption_mode,
            mac_sec_keys: self.mac_sec_keys,
            _request_id: self._request_id,
        }
    }
}
