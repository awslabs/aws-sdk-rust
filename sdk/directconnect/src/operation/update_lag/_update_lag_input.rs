// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateLagInput {
    /// <p>The ID of the LAG.</p>
    pub lag_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the LAG.</p>
    pub lag_name: ::std::option::Option<::std::string::String>,
    /// <p>The minimum number of physical connections that must be operational for the LAG itself to be operational.</p>
    pub minimum_links: ::std::option::Option<i32>,
    /// <p>The LAG MAC Security (MACsec) encryption mode.</p>
    /// <p>Amazon Web Services applies the value to all connections which are part of the LAG.</p>
    pub encryption_mode: ::std::option::Option<::std::string::String>,
}
impl UpdateLagInput {
    /// <p>The ID of the LAG.</p>
    pub fn lag_id(&self) -> ::std::option::Option<&str> {
        self.lag_id.as_deref()
    }
    /// <p>The name of the LAG.</p>
    pub fn lag_name(&self) -> ::std::option::Option<&str> {
        self.lag_name.as_deref()
    }
    /// <p>The minimum number of physical connections that must be operational for the LAG itself to be operational.</p>
    pub fn minimum_links(&self) -> ::std::option::Option<i32> {
        self.minimum_links
    }
    /// <p>The LAG MAC Security (MACsec) encryption mode.</p>
    /// <p>Amazon Web Services applies the value to all connections which are part of the LAG.</p>
    pub fn encryption_mode(&self) -> ::std::option::Option<&str> {
        self.encryption_mode.as_deref()
    }
}
impl UpdateLagInput {
    /// Creates a new builder-style object to manufacture [`UpdateLagInput`](crate::operation::update_lag::UpdateLagInput).
    pub fn builder() -> crate::operation::update_lag::builders::UpdateLagInputBuilder {
        crate::operation::update_lag::builders::UpdateLagInputBuilder::default()
    }
}

/// A builder for [`UpdateLagInput`](crate::operation::update_lag::UpdateLagInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateLagInputBuilder {
    pub(crate) lag_id: ::std::option::Option<::std::string::String>,
    pub(crate) lag_name: ::std::option::Option<::std::string::String>,
    pub(crate) minimum_links: ::std::option::Option<i32>,
    pub(crate) encryption_mode: ::std::option::Option<::std::string::String>,
}
impl UpdateLagInputBuilder {
    /// <p>The ID of the LAG.</p>
    /// This field is required.
    pub fn lag_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lag_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the LAG.</p>
    pub fn set_lag_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lag_id = input;
        self
    }
    /// <p>The ID of the LAG.</p>
    pub fn get_lag_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.lag_id
    }
    /// <p>The name of the LAG.</p>
    pub fn lag_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lag_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the LAG.</p>
    pub fn set_lag_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lag_name = input;
        self
    }
    /// <p>The name of the LAG.</p>
    pub fn get_lag_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.lag_name
    }
    /// <p>The minimum number of physical connections that must be operational for the LAG itself to be operational.</p>
    pub fn minimum_links(mut self, input: i32) -> Self {
        self.minimum_links = ::std::option::Option::Some(input);
        self
    }
    /// <p>The minimum number of physical connections that must be operational for the LAG itself to be operational.</p>
    pub fn set_minimum_links(mut self, input: ::std::option::Option<i32>) -> Self {
        self.minimum_links = input;
        self
    }
    /// <p>The minimum number of physical connections that must be operational for the LAG itself to be operational.</p>
    pub fn get_minimum_links(&self) -> &::std::option::Option<i32> {
        &self.minimum_links
    }
    /// <p>The LAG MAC Security (MACsec) encryption mode.</p>
    /// <p>Amazon Web Services applies the value to all connections which are part of the LAG.</p>
    pub fn encryption_mode(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.encryption_mode = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The LAG MAC Security (MACsec) encryption mode.</p>
    /// <p>Amazon Web Services applies the value to all connections which are part of the LAG.</p>
    pub fn set_encryption_mode(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.encryption_mode = input;
        self
    }
    /// <p>The LAG MAC Security (MACsec) encryption mode.</p>
    /// <p>Amazon Web Services applies the value to all connections which are part of the LAG.</p>
    pub fn get_encryption_mode(&self) -> &::std::option::Option<::std::string::String> {
        &self.encryption_mode
    }
    /// Consumes the builder and constructs a [`UpdateLagInput`](crate::operation::update_lag::UpdateLagInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_lag::UpdateLagInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_lag::UpdateLagInput {
            lag_id: self.lag_id,
            lag_name: self.lag_name,
            minimum_links: self.minimum_links,
            encryption_mode: self.encryption_mode,
        })
    }
}
