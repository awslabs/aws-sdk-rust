// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AcceptDirectConnectGatewayAssociationProposalInput {
    /// <p>The ID of the Direct Connect gateway.</p>
    #[doc(hidden)]
    pub direct_connect_gateway_id: std::option::Option<std::string::String>,
    /// <p>The ID of the request proposal.</p>
    #[doc(hidden)]
    pub proposal_id: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the virtual private gateway or transit gateway.</p>
    #[doc(hidden)]
    pub associated_gateway_owner_account: std::option::Option<std::string::String>,
    /// <p>Overrides the Amazon VPC prefixes advertised to the Direct Connect gateway.</p>
    /// <p>For information about how to set the prefixes, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/multi-account-associate-vgw.html#allowed-prefixes">Allowed Prefixes</a> in the <i>Direct Connect User Guide</i>.</p>
    #[doc(hidden)]
    pub override_allowed_prefixes_to_direct_connect_gateway:
        std::option::Option<std::vec::Vec<crate::types::RouteFilterPrefix>>,
}
impl AcceptDirectConnectGatewayAssociationProposalInput {
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn direct_connect_gateway_id(&self) -> std::option::Option<&str> {
        self.direct_connect_gateway_id.as_deref()
    }
    /// <p>The ID of the request proposal.</p>
    pub fn proposal_id(&self) -> std::option::Option<&str> {
        self.proposal_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the virtual private gateway or transit gateway.</p>
    pub fn associated_gateway_owner_account(&self) -> std::option::Option<&str> {
        self.associated_gateway_owner_account.as_deref()
    }
    /// <p>Overrides the Amazon VPC prefixes advertised to the Direct Connect gateway.</p>
    /// <p>For information about how to set the prefixes, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/multi-account-associate-vgw.html#allowed-prefixes">Allowed Prefixes</a> in the <i>Direct Connect User Guide</i>.</p>
    pub fn override_allowed_prefixes_to_direct_connect_gateway(
        &self,
    ) -> std::option::Option<&[crate::types::RouteFilterPrefix]> {
        self.override_allowed_prefixes_to_direct_connect_gateway
            .as_deref()
    }
}
impl AcceptDirectConnectGatewayAssociationProposalInput {
    /// Creates a new builder-style object to manufacture [`AcceptDirectConnectGatewayAssociationProposalInput`](crate::operation::accept_direct_connect_gateway_association_proposal::AcceptDirectConnectGatewayAssociationProposalInput).
    pub fn builder() -> crate::operation::accept_direct_connect_gateway_association_proposal::builders::AcceptDirectConnectGatewayAssociationProposalInputBuilder{
        crate::operation::accept_direct_connect_gateway_association_proposal::builders::AcceptDirectConnectGatewayAssociationProposalInputBuilder::default()
    }
}

/// A builder for [`AcceptDirectConnectGatewayAssociationProposalInput`](crate::operation::accept_direct_connect_gateway_association_proposal::AcceptDirectConnectGatewayAssociationProposalInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AcceptDirectConnectGatewayAssociationProposalInputBuilder {
    pub(crate) direct_connect_gateway_id: std::option::Option<std::string::String>,
    pub(crate) proposal_id: std::option::Option<std::string::String>,
    pub(crate) associated_gateway_owner_account: std::option::Option<std::string::String>,
    pub(crate) override_allowed_prefixes_to_direct_connect_gateway:
        std::option::Option<std::vec::Vec<crate::types::RouteFilterPrefix>>,
}
impl AcceptDirectConnectGatewayAssociationProposalInputBuilder {
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn direct_connect_gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.direct_connect_gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn set_direct_connect_gateway_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.direct_connect_gateway_id = input;
        self
    }
    /// <p>The ID of the request proposal.</p>
    pub fn proposal_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.proposal_id = Some(input.into());
        self
    }
    /// <p>The ID of the request proposal.</p>
    pub fn set_proposal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.proposal_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the virtual private gateway or transit gateway.</p>
    pub fn associated_gateway_owner_account(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.associated_gateway_owner_account = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the virtual private gateway or transit gateway.</p>
    pub fn set_associated_gateway_owner_account(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.associated_gateway_owner_account = input;
        self
    }
    /// Appends an item to `override_allowed_prefixes_to_direct_connect_gateway`.
    ///
    /// To override the contents of this collection use [`set_override_allowed_prefixes_to_direct_connect_gateway`](Self::set_override_allowed_prefixes_to_direct_connect_gateway).
    ///
    /// <p>Overrides the Amazon VPC prefixes advertised to the Direct Connect gateway.</p>
    /// <p>For information about how to set the prefixes, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/multi-account-associate-vgw.html#allowed-prefixes">Allowed Prefixes</a> in the <i>Direct Connect User Guide</i>.</p>
    pub fn override_allowed_prefixes_to_direct_connect_gateway(
        mut self,
        input: crate::types::RouteFilterPrefix,
    ) -> Self {
        let mut v = self
            .override_allowed_prefixes_to_direct_connect_gateway
            .unwrap_or_default();
        v.push(input);
        self.override_allowed_prefixes_to_direct_connect_gateway = Some(v);
        self
    }
    /// <p>Overrides the Amazon VPC prefixes advertised to the Direct Connect gateway.</p>
    /// <p>For information about how to set the prefixes, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/multi-account-associate-vgw.html#allowed-prefixes">Allowed Prefixes</a> in the <i>Direct Connect User Guide</i>.</p>
    pub fn set_override_allowed_prefixes_to_direct_connect_gateway(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RouteFilterPrefix>>,
    ) -> Self {
        self.override_allowed_prefixes_to_direct_connect_gateway = input;
        self
    }
    /// Consumes the builder and constructs a [`AcceptDirectConnectGatewayAssociationProposalInput`](crate::operation::accept_direct_connect_gateway_association_proposal::AcceptDirectConnectGatewayAssociationProposalInput).
    pub fn build(self) -> Result<crate::operation::accept_direct_connect_gateway_association_proposal::AcceptDirectConnectGatewayAssociationProposalInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::accept_direct_connect_gateway_association_proposal::AcceptDirectConnectGatewayAssociationProposalInput {
                direct_connect_gateway_id: self.direct_connect_gateway_id
                ,
                proposal_id: self.proposal_id
                ,
                associated_gateway_owner_account: self.associated_gateway_owner_account
                ,
                override_allowed_prefixes_to_direct_connect_gateway: self.override_allowed_prefixes_to_direct_connect_gateway
                ,
            }
        )
    }
}
