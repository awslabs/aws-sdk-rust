// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::allocate_transit_virtual_interface::_allocate_transit_virtual_interface_output::AllocateTransitVirtualInterfaceOutputBuilder;

pub use crate::operation::allocate_transit_virtual_interface::_allocate_transit_virtual_interface_input::AllocateTransitVirtualInterfaceInputBuilder;

/// Fluent builder constructing a request to `AllocateTransitVirtualInterface`.
///
/// <p>Provisions a transit virtual interface to be owned by the specified Amazon Web Services account. Use this type of interface to connect a transit gateway to your Direct Connect gateway.</p>
/// <p>The owner of a connection provisions a transit virtual interface to be owned by the specified Amazon Web Services account.</p>
/// <p>After you create a transit virtual interface, it must be confirmed by the owner using <code>ConfirmTransitVirtualInterface</code>. Until this step has been completed, the transit virtual interface is in the <code>requested</code> state and is not available to handle traffic.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AllocateTransitVirtualInterfaceFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::allocate_transit_virtual_interface::builders::AllocateTransitVirtualInterfaceInputBuilder
            }
impl AllocateTransitVirtualInterfaceFluentBuilder {
    /// Creates a new `AllocateTransitVirtualInterface`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::allocate_transit_virtual_interface::AllocateTransitVirtualInterface, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::allocate_transit_virtual_interface::AllocateTransitVirtualInterfaceError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::allocate_transit_virtual_interface::AllocateTransitVirtualInterfaceOutput, aws_smithy_http::result::SdkError<crate::operation::allocate_transit_virtual_interface::AllocateTransitVirtualInterfaceError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the connection on which the transit virtual interface is provisioned.</p>
    pub fn connection_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connection_id(input.into());
        self
    }
    /// <p>The ID of the connection on which the transit virtual interface is provisioned.</p>
    pub fn set_connection_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_connection_id(input);
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the transit virtual interface.</p>
    pub fn owner_account(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.owner_account(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the transit virtual interface.</p>
    pub fn set_owner_account(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_owner_account(input);
        self
    }
    /// <p>Information about the transit virtual interface.</p>
    pub fn new_transit_virtual_interface_allocation(
        mut self,
        input: crate::types::NewTransitVirtualInterfaceAllocation,
    ) -> Self {
        self.inner = self.inner.new_transit_virtual_interface_allocation(input);
        self
    }
    /// <p>Information about the transit virtual interface.</p>
    pub fn set_new_transit_virtual_interface_allocation(
        mut self,
        input: std::option::Option<crate::types::NewTransitVirtualInterfaceAllocation>,
    ) -> Self {
        self.inner = self
            .inner
            .set_new_transit_virtual_interface_allocation(input);
        self
    }
}
