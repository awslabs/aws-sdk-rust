// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeInterconnectLoaInput {
    /// <p>The ID of the interconnect.</p>
    #[doc(hidden)]
    pub interconnect_id: std::option::Option<std::string::String>,
    /// <p>The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.</p>
    #[doc(hidden)]
    pub provider_name: std::option::Option<std::string::String>,
    /// <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
    #[doc(hidden)]
    pub loa_content_type: std::option::Option<crate::types::LoaContentType>,
}
impl DescribeInterconnectLoaInput {
    /// <p>The ID of the interconnect.</p>
    pub fn interconnect_id(&self) -> std::option::Option<&str> {
        self.interconnect_id.as_deref()
    }
    /// <p>The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.</p>
    pub fn provider_name(&self) -> std::option::Option<&str> {
        self.provider_name.as_deref()
    }
    /// <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
    pub fn loa_content_type(&self) -> std::option::Option<&crate::types::LoaContentType> {
        self.loa_content_type.as_ref()
    }
}
impl DescribeInterconnectLoaInput {
    /// Creates a new builder-style object to manufacture [`DescribeInterconnectLoaInput`](crate::operation::describe_interconnect_loa::DescribeInterconnectLoaInput).
    pub fn builder(
    ) -> crate::operation::describe_interconnect_loa::builders::DescribeInterconnectLoaInputBuilder
    {
        crate::operation::describe_interconnect_loa::builders::DescribeInterconnectLoaInputBuilder::default()
    }
}

/// A builder for [`DescribeInterconnectLoaInput`](crate::operation::describe_interconnect_loa::DescribeInterconnectLoaInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeInterconnectLoaInputBuilder {
    pub(crate) interconnect_id: std::option::Option<std::string::String>,
    pub(crate) provider_name: std::option::Option<std::string::String>,
    pub(crate) loa_content_type: std::option::Option<crate::types::LoaContentType>,
}
impl DescribeInterconnectLoaInputBuilder {
    /// <p>The ID of the interconnect.</p>
    pub fn interconnect_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.interconnect_id = Some(input.into());
        self
    }
    /// <p>The ID of the interconnect.</p>
    pub fn set_interconnect_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.interconnect_id = input;
        self
    }
    /// <p>The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.</p>
    pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.provider_name = Some(input.into());
        self
    }
    /// <p>The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.</p>
    pub fn set_provider_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.provider_name = input;
        self
    }
    /// <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
    pub fn loa_content_type(mut self, input: crate::types::LoaContentType) -> Self {
        self.loa_content_type = Some(input);
        self
    }
    /// <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
    pub fn set_loa_content_type(
        mut self,
        input: std::option::Option<crate::types::LoaContentType>,
    ) -> Self {
        self.loa_content_type = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeInterconnectLoaInput`](crate::operation::describe_interconnect_loa::DescribeInterconnectLoaInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_interconnect_loa::DescribeInterconnectLoaInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_interconnect_loa::DescribeInterconnectLoaInput {
                interconnect_id: self.interconnect_id,
                provider_name: self.provider_name,
                loa_content_type: self.loa_content_type,
            },
        )
    }
}
