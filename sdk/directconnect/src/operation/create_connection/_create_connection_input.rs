// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateConnectionInput {
    /// <p>The location of the connection.</p>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
    /// <p>The bandwidth of the connection.</p>
    #[doc(hidden)]
    pub bandwidth: std::option::Option<std::string::String>,
    /// <p>The name of the connection.</p>
    #[doc(hidden)]
    pub connection_name: std::option::Option<std::string::String>,
    /// <p>The ID of the LAG.</p>
    #[doc(hidden)]
    pub lag_id: std::option::Option<std::string::String>,
    /// <p>The tags to associate with the lag.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The name of the service provider associated with the requested connection.</p>
    #[doc(hidden)]
    pub provider_name: std::option::Option<std::string::String>,
    /// <p>Indicates whether you want the connection to support MAC Security (MACsec).</p>
    /// <p>MAC Security (MACsec) is only available on dedicated connections. For information about MAC Security (MACsec) prerequisties, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/direct-connect-mac-sec-getting-started.html#mac-sec-prerequisites">MACsec prerequisties</a> in the <i>Direct Connect User Guide</i>.</p>
    #[doc(hidden)]
    pub request_mac_sec: std::option::Option<bool>,
}
impl CreateConnectionInput {
    /// <p>The location of the connection.</p>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The bandwidth of the connection.</p>
    pub fn bandwidth(&self) -> std::option::Option<&str> {
        self.bandwidth.as_deref()
    }
    /// <p>The name of the connection.</p>
    pub fn connection_name(&self) -> std::option::Option<&str> {
        self.connection_name.as_deref()
    }
    /// <p>The ID of the LAG.</p>
    pub fn lag_id(&self) -> std::option::Option<&str> {
        self.lag_id.as_deref()
    }
    /// <p>The tags to associate with the lag.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The name of the service provider associated with the requested connection.</p>
    pub fn provider_name(&self) -> std::option::Option<&str> {
        self.provider_name.as_deref()
    }
    /// <p>Indicates whether you want the connection to support MAC Security (MACsec).</p>
    /// <p>MAC Security (MACsec) is only available on dedicated connections. For information about MAC Security (MACsec) prerequisties, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/direct-connect-mac-sec-getting-started.html#mac-sec-prerequisites">MACsec prerequisties</a> in the <i>Direct Connect User Guide</i>.</p>
    pub fn request_mac_sec(&self) -> std::option::Option<bool> {
        self.request_mac_sec
    }
}
impl CreateConnectionInput {
    /// Creates a new builder-style object to manufacture [`CreateConnectionInput`](crate::operation::create_connection::CreateConnectionInput).
    pub fn builder() -> crate::operation::create_connection::builders::CreateConnectionInputBuilder
    {
        crate::operation::create_connection::builders::CreateConnectionInputBuilder::default()
    }
}

/// A builder for [`CreateConnectionInput`](crate::operation::create_connection::CreateConnectionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateConnectionInputBuilder {
    pub(crate) location: std::option::Option<std::string::String>,
    pub(crate) bandwidth: std::option::Option<std::string::String>,
    pub(crate) connection_name: std::option::Option<std::string::String>,
    pub(crate) lag_id: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) provider_name: std::option::Option<std::string::String>,
    pub(crate) request_mac_sec: std::option::Option<bool>,
}
impl CreateConnectionInputBuilder {
    /// <p>The location of the connection.</p>
    pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
        self.location = Some(input.into());
        self
    }
    /// <p>The location of the connection.</p>
    pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The bandwidth of the connection.</p>
    pub fn bandwidth(mut self, input: impl Into<std::string::String>) -> Self {
        self.bandwidth = Some(input.into());
        self
    }
    /// <p>The bandwidth of the connection.</p>
    pub fn set_bandwidth(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bandwidth = input;
        self
    }
    /// <p>The name of the connection.</p>
    pub fn connection_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.connection_name = Some(input.into());
        self
    }
    /// <p>The name of the connection.</p>
    pub fn set_connection_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connection_name = input;
        self
    }
    /// <p>The ID of the LAG.</p>
    pub fn lag_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.lag_id = Some(input.into());
        self
    }
    /// <p>The ID of the LAG.</p>
    pub fn set_lag_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lag_id = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to associate with the lag.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags to associate with the lag.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The name of the service provider associated with the requested connection.</p>
    pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.provider_name = Some(input.into());
        self
    }
    /// <p>The name of the service provider associated with the requested connection.</p>
    pub fn set_provider_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.provider_name = input;
        self
    }
    /// <p>Indicates whether you want the connection to support MAC Security (MACsec).</p>
    /// <p>MAC Security (MACsec) is only available on dedicated connections. For information about MAC Security (MACsec) prerequisties, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/direct-connect-mac-sec-getting-started.html#mac-sec-prerequisites">MACsec prerequisties</a> in the <i>Direct Connect User Guide</i>.</p>
    pub fn request_mac_sec(mut self, input: bool) -> Self {
        self.request_mac_sec = Some(input);
        self
    }
    /// <p>Indicates whether you want the connection to support MAC Security (MACsec).</p>
    /// <p>MAC Security (MACsec) is only available on dedicated connections. For information about MAC Security (MACsec) prerequisties, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/direct-connect-mac-sec-getting-started.html#mac-sec-prerequisites">MACsec prerequisties</a> in the <i>Direct Connect User Guide</i>.</p>
    pub fn set_request_mac_sec(mut self, input: std::option::Option<bool>) -> Self {
        self.request_mac_sec = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateConnectionInput`](crate::operation::create_connection::CreateConnectionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_connection::CreateConnectionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_connection::CreateConnectionInput {
            location: self.location,
            bandwidth: self.bandwidth,
            connection_name: self.connection_name,
            lag_id: self.lag_id,
            tags: self.tags,
            provider_name: self.provider_name,
            request_mac_sec: self.request_mac_sec,
        })
    }
}
