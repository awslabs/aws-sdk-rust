// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConfirmConnectionOutput {
    /// <p>The state of the connection. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>ordering</code>: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.</p> </li>
    /// <li> <p> <code>requested</code>: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.</p> </li>
    /// <li> <p> <code>pending</code>: The connection has been approved and is being initialized.</p> </li>
    /// <li> <p> <code>available</code>: The network link is up and the connection is ready for use.</p> </li>
    /// <li> <p> <code>down</code>: The network link is down.</p> </li>
    /// <li> <p> <code>deleting</code>: The connection is being deleted.</p> </li>
    /// <li> <p> <code>deleted</code>: The connection has been deleted.</p> </li>
    /// <li> <p> <code>rejected</code>: A hosted connection in the <code>ordering</code> state enters the <code>rejected</code> state if it is deleted by the customer.</p> </li>
    /// <li> <p> <code>unknown</code>: The state of the connection is not available.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub connection_state: std::option::Option<crate::types::ConnectionState>,
    _request_id: Option<String>,
}
impl ConfirmConnectionOutput {
    /// <p>The state of the connection. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>ordering</code>: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.</p> </li>
    /// <li> <p> <code>requested</code>: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.</p> </li>
    /// <li> <p> <code>pending</code>: The connection has been approved and is being initialized.</p> </li>
    /// <li> <p> <code>available</code>: The network link is up and the connection is ready for use.</p> </li>
    /// <li> <p> <code>down</code>: The network link is down.</p> </li>
    /// <li> <p> <code>deleting</code>: The connection is being deleted.</p> </li>
    /// <li> <p> <code>deleted</code>: The connection has been deleted.</p> </li>
    /// <li> <p> <code>rejected</code>: A hosted connection in the <code>ordering</code> state enters the <code>rejected</code> state if it is deleted by the customer.</p> </li>
    /// <li> <p> <code>unknown</code>: The state of the connection is not available.</p> </li>
    /// </ul>
    pub fn connection_state(&self) -> std::option::Option<&crate::types::ConnectionState> {
        self.connection_state.as_ref()
    }
}
impl aws_http::request_id::RequestId for ConfirmConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ConfirmConnectionOutput {
    /// Creates a new builder-style object to manufacture [`ConfirmConnectionOutput`](crate::operation::confirm_connection::ConfirmConnectionOutput).
    pub fn builder(
    ) -> crate::operation::confirm_connection::builders::ConfirmConnectionOutputBuilder {
        crate::operation::confirm_connection::builders::ConfirmConnectionOutputBuilder::default()
    }
}

/// A builder for [`ConfirmConnectionOutput`](crate::operation::confirm_connection::ConfirmConnectionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConfirmConnectionOutputBuilder {
    pub(crate) connection_state: std::option::Option<crate::types::ConnectionState>,
    _request_id: Option<String>,
}
impl ConfirmConnectionOutputBuilder {
    /// <p>The state of the connection. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>ordering</code>: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.</p> </li>
    /// <li> <p> <code>requested</code>: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.</p> </li>
    /// <li> <p> <code>pending</code>: The connection has been approved and is being initialized.</p> </li>
    /// <li> <p> <code>available</code>: The network link is up and the connection is ready for use.</p> </li>
    /// <li> <p> <code>down</code>: The network link is down.</p> </li>
    /// <li> <p> <code>deleting</code>: The connection is being deleted.</p> </li>
    /// <li> <p> <code>deleted</code>: The connection has been deleted.</p> </li>
    /// <li> <p> <code>rejected</code>: A hosted connection in the <code>ordering</code> state enters the <code>rejected</code> state if it is deleted by the customer.</p> </li>
    /// <li> <p> <code>unknown</code>: The state of the connection is not available.</p> </li>
    /// </ul>
    pub fn connection_state(mut self, input: crate::types::ConnectionState) -> Self {
        self.connection_state = Some(input);
        self
    }
    /// <p>The state of the connection. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>ordering</code>: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.</p> </li>
    /// <li> <p> <code>requested</code>: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.</p> </li>
    /// <li> <p> <code>pending</code>: The connection has been approved and is being initialized.</p> </li>
    /// <li> <p> <code>available</code>: The network link is up and the connection is ready for use.</p> </li>
    /// <li> <p> <code>down</code>: The network link is down.</p> </li>
    /// <li> <p> <code>deleting</code>: The connection is being deleted.</p> </li>
    /// <li> <p> <code>deleted</code>: The connection has been deleted.</p> </li>
    /// <li> <p> <code>rejected</code>: A hosted connection in the <code>ordering</code> state enters the <code>rejected</code> state if it is deleted by the customer.</p> </li>
    /// <li> <p> <code>unknown</code>: The state of the connection is not available.</p> </li>
    /// </ul>
    pub fn set_connection_state(
        mut self,
        input: std::option::Option<crate::types::ConnectionState>,
    ) -> Self {
        self.connection_state = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ConfirmConnectionOutput`](crate::operation::confirm_connection::ConfirmConnectionOutput).
    pub fn build(self) -> crate::operation::confirm_connection::ConfirmConnectionOutput {
        crate::operation::confirm_connection::ConfirmConnectionOutput {
            connection_state: self.connection_state,
            _request_id: self._request_id,
        }
    }
}
