// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeLoaInput {
    /// <p>The ID of a connection, LAG, or interconnect.</p>
    pub connection_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the service provider who establishes connectivity on your behalf. If you specify this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.</p>
    pub provider_name: ::std::option::Option<::std::string::String>,
    /// <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
    pub loa_content_type: ::std::option::Option<crate::types::LoaContentType>,
}
impl DescribeLoaInput {
    /// <p>The ID of a connection, LAG, or interconnect.</p>
    pub fn connection_id(&self) -> ::std::option::Option<&str> {
        self.connection_id.as_deref()
    }
    /// <p>The name of the service provider who establishes connectivity on your behalf. If you specify this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.</p>
    pub fn provider_name(&self) -> ::std::option::Option<&str> {
        self.provider_name.as_deref()
    }
    /// <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
    pub fn loa_content_type(&self) -> ::std::option::Option<&crate::types::LoaContentType> {
        self.loa_content_type.as_ref()
    }
}
impl DescribeLoaInput {
    /// Creates a new builder-style object to manufacture [`DescribeLoaInput`](crate::operation::describe_loa::DescribeLoaInput).
    pub fn builder() -> crate::operation::describe_loa::builders::DescribeLoaInputBuilder {
        crate::operation::describe_loa::builders::DescribeLoaInputBuilder::default()
    }
}

/// A builder for [`DescribeLoaInput`](crate::operation::describe_loa::DescribeLoaInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeLoaInputBuilder {
    pub(crate) connection_id: ::std::option::Option<::std::string::String>,
    pub(crate) provider_name: ::std::option::Option<::std::string::String>,
    pub(crate) loa_content_type: ::std::option::Option<crate::types::LoaContentType>,
}
impl DescribeLoaInputBuilder {
    /// <p>The ID of a connection, LAG, or interconnect.</p>
    /// This field is required.
    pub fn connection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of a connection, LAG, or interconnect.</p>
    pub fn set_connection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_id = input;
        self
    }
    /// <p>The ID of a connection, LAG, or interconnect.</p>
    pub fn get_connection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_id
    }
    /// <p>The name of the service provider who establishes connectivity on your behalf. If you specify this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.</p>
    pub fn provider_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provider_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the service provider who establishes connectivity on your behalf. If you specify this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.</p>
    pub fn set_provider_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provider_name = input;
        self
    }
    /// <p>The name of the service provider who establishes connectivity on your behalf. If you specify this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.</p>
    pub fn get_provider_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.provider_name
    }
    /// <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
    pub fn loa_content_type(mut self, input: crate::types::LoaContentType) -> Self {
        self.loa_content_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
    pub fn set_loa_content_type(mut self, input: ::std::option::Option<crate::types::LoaContentType>) -> Self {
        self.loa_content_type = input;
        self
    }
    /// <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
    pub fn get_loa_content_type(&self) -> &::std::option::Option<crate::types::LoaContentType> {
        &self.loa_content_type
    }
    /// Consumes the builder and constructs a [`DescribeLoaInput`](crate::operation::describe_loa::DescribeLoaInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::describe_loa::DescribeLoaInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::describe_loa::DescribeLoaInput {
            connection_id: self.connection_id,
            provider_name: self.provider_name,
            loa_content_type: self.loa_content_type,
        })
    }
}
