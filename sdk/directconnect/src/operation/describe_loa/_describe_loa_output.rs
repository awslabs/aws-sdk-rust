// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a Letter of Authorization - Connecting Facility Assignment (LOA-CFA) for a connection.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLoaOutput {
    /// <p>The binary contents of the LOA-CFA document.</p>
    #[doc(hidden)]
    pub loa_content: std::option::Option<aws_smithy_types::Blob>,
    /// <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
    #[doc(hidden)]
    pub loa_content_type: std::option::Option<crate::types::LoaContentType>,
    _request_id: Option<String>,
}
impl DescribeLoaOutput {
    /// <p>The binary contents of the LOA-CFA document.</p>
    pub fn loa_content(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.loa_content.as_ref()
    }
    /// <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
    pub fn loa_content_type(&self) -> std::option::Option<&crate::types::LoaContentType> {
        self.loa_content_type.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeLoaOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeLoaOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLoaOutput`](crate::operation::describe_loa::DescribeLoaOutput).
    pub fn builder() -> crate::operation::describe_loa::builders::DescribeLoaOutputBuilder {
        crate::operation::describe_loa::builders::DescribeLoaOutputBuilder::default()
    }
}

/// A builder for [`DescribeLoaOutput`](crate::operation::describe_loa::DescribeLoaOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeLoaOutputBuilder {
    pub(crate) loa_content: std::option::Option<aws_smithy_types::Blob>,
    pub(crate) loa_content_type: std::option::Option<crate::types::LoaContentType>,
    _request_id: Option<String>,
}
impl DescribeLoaOutputBuilder {
    /// <p>The binary contents of the LOA-CFA document.</p>
    pub fn loa_content(mut self, input: aws_smithy_types::Blob) -> Self {
        self.loa_content = Some(input);
        self
    }
    /// <p>The binary contents of the LOA-CFA document.</p>
    pub fn set_loa_content(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
        self.loa_content = input;
        self
    }
    /// <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
    pub fn loa_content_type(mut self, input: crate::types::LoaContentType) -> Self {
        self.loa_content_type = Some(input);
        self
    }
    /// <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
    pub fn set_loa_content_type(
        mut self,
        input: std::option::Option<crate::types::LoaContentType>,
    ) -> Self {
        self.loa_content_type = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeLoaOutput`](crate::operation::describe_loa::DescribeLoaOutput).
    pub fn build(self) -> crate::operation::describe_loa::DescribeLoaOutput {
        crate::operation::describe_loa::DescribeLoaOutput {
            loa_content: self.loa_content,
            loa_content_type: self.loa_content_type,
            _request_id: self._request_id,
        }
    }
}
