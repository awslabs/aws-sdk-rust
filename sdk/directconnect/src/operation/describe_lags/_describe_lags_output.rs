// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeLagsOutput {
    /// <p>The LAGs.</p>
    #[doc(hidden)]
    pub lags: std::option::Option<std::vec::Vec<crate::types::Lag>>,
    _request_id: Option<String>,
}
impl DescribeLagsOutput {
    /// <p>The LAGs.</p>
    pub fn lags(&self) -> std::option::Option<&[crate::types::Lag]> {
        self.lags.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeLagsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeLagsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLagsOutput`](crate::operation::describe_lags::DescribeLagsOutput).
    pub fn builder() -> crate::operation::describe_lags::builders::DescribeLagsOutputBuilder {
        crate::operation::describe_lags::builders::DescribeLagsOutputBuilder::default()
    }
}

/// A builder for [`DescribeLagsOutput`](crate::operation::describe_lags::DescribeLagsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeLagsOutputBuilder {
    pub(crate) lags: std::option::Option<std::vec::Vec<crate::types::Lag>>,
    _request_id: Option<String>,
}
impl DescribeLagsOutputBuilder {
    /// Appends an item to `lags`.
    ///
    /// To override the contents of this collection use [`set_lags`](Self::set_lags).
    ///
    /// <p>The LAGs.</p>
    pub fn lags(mut self, input: crate::types::Lag) -> Self {
        let mut v = self.lags.unwrap_or_default();
        v.push(input);
        self.lags = Some(v);
        self
    }
    /// <p>The LAGs.</p>
    pub fn set_lags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Lag>>,
    ) -> Self {
        self.lags = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeLagsOutput`](crate::operation::describe_lags::DescribeLagsOutput).
    pub fn build(self) -> crate::operation::describe_lags::DescribeLagsOutput {
        crate::operation::describe_lags::DescribeLagsOutput {
            lags: self.lags,
            _request_id: self._request_id,
        }
    }
}
