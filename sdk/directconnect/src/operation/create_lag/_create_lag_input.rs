// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLagInput {
    /// <p>The number of physical dedicated connections initially provisioned and bundled by the LAG.</p>
    #[doc(hidden)]
    pub number_of_connections: i32,
    /// <p>The location for the LAG.</p>
    #[doc(hidden)]
    pub location: std::option::Option<std::string::String>,
    /// <p>The bandwidth of the individual physical dedicated connections bundled by the LAG. The possible values are 1Gbps and 10Gbps. </p>
    #[doc(hidden)]
    pub connections_bandwidth: std::option::Option<std::string::String>,
    /// <p>The name of the LAG.</p>
    #[doc(hidden)]
    pub lag_name: std::option::Option<std::string::String>,
    /// <p>The ID of an existing dedicated connection to migrate to the LAG.</p>
    #[doc(hidden)]
    pub connection_id: std::option::Option<std::string::String>,
    /// <p>The tags to associate with the LAG.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The tags to associate with the automtically created LAGs.</p>
    #[doc(hidden)]
    pub child_connection_tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The name of the service provider associated with the LAG.</p>
    #[doc(hidden)]
    pub provider_name: std::option::Option<std::string::String>,
    /// <p>Indicates whether the connection will support MAC Security (MACsec).</p> <note>
    /// <p>All connections in the LAG must be capable of supporting MAC Security (MACsec). For information about MAC Security (MACsec) prerequisties, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/direct-connect-mac-sec-getting-started.html#mac-sec-prerequisites">MACsec prerequisties</a> in the <i>Direct Connect User Guide</i>.</p>
    /// </note>
    #[doc(hidden)]
    pub request_mac_sec: std::option::Option<bool>,
}
impl CreateLagInput {
    /// <p>The number of physical dedicated connections initially provisioned and bundled by the LAG.</p>
    pub fn number_of_connections(&self) -> i32 {
        self.number_of_connections
    }
    /// <p>The location for the LAG.</p>
    pub fn location(&self) -> std::option::Option<&str> {
        self.location.as_deref()
    }
    /// <p>The bandwidth of the individual physical dedicated connections bundled by the LAG. The possible values are 1Gbps and 10Gbps. </p>
    pub fn connections_bandwidth(&self) -> std::option::Option<&str> {
        self.connections_bandwidth.as_deref()
    }
    /// <p>The name of the LAG.</p>
    pub fn lag_name(&self) -> std::option::Option<&str> {
        self.lag_name.as_deref()
    }
    /// <p>The ID of an existing dedicated connection to migrate to the LAG.</p>
    pub fn connection_id(&self) -> std::option::Option<&str> {
        self.connection_id.as_deref()
    }
    /// <p>The tags to associate with the LAG.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The tags to associate with the automtically created LAGs.</p>
    pub fn child_connection_tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.child_connection_tags.as_deref()
    }
    /// <p>The name of the service provider associated with the LAG.</p>
    pub fn provider_name(&self) -> std::option::Option<&str> {
        self.provider_name.as_deref()
    }
    /// <p>Indicates whether the connection will support MAC Security (MACsec).</p> <note>
    /// <p>All connections in the LAG must be capable of supporting MAC Security (MACsec). For information about MAC Security (MACsec) prerequisties, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/direct-connect-mac-sec-getting-started.html#mac-sec-prerequisites">MACsec prerequisties</a> in the <i>Direct Connect User Guide</i>.</p>
    /// </note>
    pub fn request_mac_sec(&self) -> std::option::Option<bool> {
        self.request_mac_sec
    }
}
impl CreateLagInput {
    /// Creates a new builder-style object to manufacture [`CreateLagInput`](crate::operation::create_lag::CreateLagInput).
    pub fn builder() -> crate::operation::create_lag::builders::CreateLagInputBuilder {
        crate::operation::create_lag::builders::CreateLagInputBuilder::default()
    }
}

/// A builder for [`CreateLagInput`](crate::operation::create_lag::CreateLagInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateLagInputBuilder {
    pub(crate) number_of_connections: std::option::Option<i32>,
    pub(crate) location: std::option::Option<std::string::String>,
    pub(crate) connections_bandwidth: std::option::Option<std::string::String>,
    pub(crate) lag_name: std::option::Option<std::string::String>,
    pub(crate) connection_id: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) child_connection_tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) provider_name: std::option::Option<std::string::String>,
    pub(crate) request_mac_sec: std::option::Option<bool>,
}
impl CreateLagInputBuilder {
    /// <p>The number of physical dedicated connections initially provisioned and bundled by the LAG.</p>
    pub fn number_of_connections(mut self, input: i32) -> Self {
        self.number_of_connections = Some(input);
        self
    }
    /// <p>The number of physical dedicated connections initially provisioned and bundled by the LAG.</p>
    pub fn set_number_of_connections(mut self, input: std::option::Option<i32>) -> Self {
        self.number_of_connections = input;
        self
    }
    /// <p>The location for the LAG.</p>
    pub fn location(mut self, input: impl Into<std::string::String>) -> Self {
        self.location = Some(input.into());
        self
    }
    /// <p>The location for the LAG.</p>
    pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The bandwidth of the individual physical dedicated connections bundled by the LAG. The possible values are 1Gbps and 10Gbps. </p>
    pub fn connections_bandwidth(mut self, input: impl Into<std::string::String>) -> Self {
        self.connections_bandwidth = Some(input.into());
        self
    }
    /// <p>The bandwidth of the individual physical dedicated connections bundled by the LAG. The possible values are 1Gbps and 10Gbps. </p>
    pub fn set_connections_bandwidth(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.connections_bandwidth = input;
        self
    }
    /// <p>The name of the LAG.</p>
    pub fn lag_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.lag_name = Some(input.into());
        self
    }
    /// <p>The name of the LAG.</p>
    pub fn set_lag_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lag_name = input;
        self
    }
    /// <p>The ID of an existing dedicated connection to migrate to the LAG.</p>
    pub fn connection_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.connection_id = Some(input.into());
        self
    }
    /// <p>The ID of an existing dedicated connection to migrate to the LAG.</p>
    pub fn set_connection_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connection_id = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to associate with the LAG.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags to associate with the LAG.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Appends an item to `child_connection_tags`.
    ///
    /// To override the contents of this collection use [`set_child_connection_tags`](Self::set_child_connection_tags).
    ///
    /// <p>The tags to associate with the automtically created LAGs.</p>
    pub fn child_connection_tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.child_connection_tags.unwrap_or_default();
        v.push(input);
        self.child_connection_tags = Some(v);
        self
    }
    /// <p>The tags to associate with the automtically created LAGs.</p>
    pub fn set_child_connection_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.child_connection_tags = input;
        self
    }
    /// <p>The name of the service provider associated with the LAG.</p>
    pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.provider_name = Some(input.into());
        self
    }
    /// <p>The name of the service provider associated with the LAG.</p>
    pub fn set_provider_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.provider_name = input;
        self
    }
    /// <p>Indicates whether the connection will support MAC Security (MACsec).</p> <note>
    /// <p>All connections in the LAG must be capable of supporting MAC Security (MACsec). For information about MAC Security (MACsec) prerequisties, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/direct-connect-mac-sec-getting-started.html#mac-sec-prerequisites">MACsec prerequisties</a> in the <i>Direct Connect User Guide</i>.</p>
    /// </note>
    pub fn request_mac_sec(mut self, input: bool) -> Self {
        self.request_mac_sec = Some(input);
        self
    }
    /// <p>Indicates whether the connection will support MAC Security (MACsec).</p> <note>
    /// <p>All connections in the LAG must be capable of supporting MAC Security (MACsec). For information about MAC Security (MACsec) prerequisties, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/direct-connect-mac-sec-getting-started.html#mac-sec-prerequisites">MACsec prerequisties</a> in the <i>Direct Connect User Guide</i>.</p>
    /// </note>
    pub fn set_request_mac_sec(mut self, input: std::option::Option<bool>) -> Self {
        self.request_mac_sec = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateLagInput`](crate::operation::create_lag::CreateLagInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_lag::CreateLagInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_lag::CreateLagInput {
            number_of_connections: self.number_of_connections.unwrap_or_default(),
            location: self.location,
            connections_bandwidth: self.connections_bandwidth,
            lag_name: self.lag_name,
            connection_id: self.connection_id,
            tags: self.tags,
            child_connection_tags: self.child_connection_tags,
            provider_name: self.provider_name,
            request_mac_sec: self.request_mac_sec,
        })
    }
}
