// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeDirectConnectGatewayAssociationsInput {
    /// <p>The ID of the Direct Connect gateway association.</p>
    pub association_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the associated gateway.</p>
    pub associated_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Direct Connect gateway.</p>
    pub direct_connect_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    /// <p>If <code>MaxResults</code> is given a value larger than 100, only 100 results are returned.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The token provided in the previous call to retrieve the next page.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the virtual private gateway or transit gateway.</p>
    pub virtual_gateway_id: ::std::option::Option<::std::string::String>,
}
impl DescribeDirectConnectGatewayAssociationsInput {
    /// <p>The ID of the Direct Connect gateway association.</p>
    pub fn association_id(&self) -> ::std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The ID of the associated gateway.</p>
    pub fn associated_gateway_id(&self) -> ::std::option::Option<&str> {
        self.associated_gateway_id.as_deref()
    }
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn direct_connect_gateway_id(&self) -> ::std::option::Option<&str> {
        self.direct_connect_gateway_id.as_deref()
    }
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    /// <p>If <code>MaxResults</code> is given a value larger than 100, only 100 results are returned.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The token provided in the previous call to retrieve the next page.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The ID of the virtual private gateway or transit gateway.</p>
    pub fn virtual_gateway_id(&self) -> ::std::option::Option<&str> {
        self.virtual_gateway_id.as_deref()
    }
}
impl DescribeDirectConnectGatewayAssociationsInput {
    /// Creates a new builder-style object to manufacture [`DescribeDirectConnectGatewayAssociationsInput`](crate::operation::describe_direct_connect_gateway_associations::DescribeDirectConnectGatewayAssociationsInput).
    pub fn builder() -> crate::operation::describe_direct_connect_gateway_associations::builders::DescribeDirectConnectGatewayAssociationsInputBuilder
    {
        crate::operation::describe_direct_connect_gateway_associations::builders::DescribeDirectConnectGatewayAssociationsInputBuilder::default()
    }
}

/// A builder for [`DescribeDirectConnectGatewayAssociationsInput`](crate::operation::describe_direct_connect_gateway_associations::DescribeDirectConnectGatewayAssociationsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeDirectConnectGatewayAssociationsInputBuilder {
    pub(crate) association_id: ::std::option::Option<::std::string::String>,
    pub(crate) associated_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) direct_connect_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) virtual_gateway_id: ::std::option::Option<::std::string::String>,
}
impl DescribeDirectConnectGatewayAssociationsInputBuilder {
    /// <p>The ID of the Direct Connect gateway association.</p>
    pub fn association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Direct Connect gateway association.</p>
    pub fn set_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>The ID of the Direct Connect gateway association.</p>
    pub fn get_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_id
    }
    /// <p>The ID of the associated gateway.</p>
    pub fn associated_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.associated_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the associated gateway.</p>
    pub fn set_associated_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.associated_gateway_id = input;
        self
    }
    /// <p>The ID of the associated gateway.</p>
    pub fn get_associated_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.associated_gateway_id
    }
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn direct_connect_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.direct_connect_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn set_direct_connect_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.direct_connect_gateway_id = input;
        self
    }
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn get_direct_connect_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.direct_connect_gateway_id
    }
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    /// <p>If <code>MaxResults</code> is given a value larger than 100, only 100 results are returned.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    /// <p>If <code>MaxResults</code> is given a value larger than 100, only 100 results are returned.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to return with a single call. To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
    /// <p>If <code>MaxResults</code> is given a value larger than 100, only 100 results are returned.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The token provided in the previous call to retrieve the next page.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token provided in the previous call to retrieve the next page.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token provided in the previous call to retrieve the next page.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The ID of the virtual private gateway or transit gateway.</p>
    pub fn virtual_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.virtual_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the virtual private gateway or transit gateway.</p>
    pub fn set_virtual_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.virtual_gateway_id = input;
        self
    }
    /// <p>The ID of the virtual private gateway or transit gateway.</p>
    pub fn get_virtual_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.virtual_gateway_id
    }
    /// Consumes the builder and constructs a [`DescribeDirectConnectGatewayAssociationsInput`](crate::operation::describe_direct_connect_gateway_associations::DescribeDirectConnectGatewayAssociationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_direct_connect_gateway_associations::DescribeDirectConnectGatewayAssociationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::describe_direct_connect_gateway_associations::DescribeDirectConnectGatewayAssociationsInput {
                association_id: self.association_id,
                associated_gateway_id: self.associated_gateway_id,
                direct_connect_gateway_id: self.direct_connect_gateway_id,
                max_results: self.max_results,
                next_token: self.next_token,
                virtual_gateway_id: self.virtual_gateway_id,
            },
        )
    }
}
