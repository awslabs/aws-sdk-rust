// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::start_bgp_failover_test::_start_bgp_failover_test_output::StartBgpFailoverTestOutputBuilder;

pub use crate::operation::start_bgp_failover_test::_start_bgp_failover_test_input::StartBgpFailoverTestInputBuilder;

impl crate::operation::start_bgp_failover_test::builders::StartBgpFailoverTestInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::start_bgp_failover_test::StartBgpFailoverTestOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_bgp_failover_test::StartBgpFailoverTestError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.start_bgp_failover_test();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `StartBgpFailoverTest`.
///
/// <p>Starts the virtual interface failover test that verifies your configuration meets your resiliency requirements by placing the BGP peering session in the DOWN state. You can then send traffic to verify that there are no outages.</p>
/// <p>You can run the test on public, private, transit, and hosted virtual interfaces.</p>
/// <p>You can use <a href="https://docs.aws.amazon.com/directconnect/latest/APIReference/API_ListVirtualInterfaceTestHistory.html">ListVirtualInterfaceTestHistory</a> to view the virtual interface test history.</p>
/// <p>If you need to stop the test before the test interval completes, use <a href="https://docs.aws.amazon.com/directconnect/latest/APIReference/API_StopBgpFailoverTest.html">StopBgpFailoverTest</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct StartBgpFailoverTestFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::start_bgp_failover_test::builders::StartBgpFailoverTestInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::start_bgp_failover_test::StartBgpFailoverTestOutput,
        crate::operation::start_bgp_failover_test::StartBgpFailoverTestError,
    > for StartBgpFailoverTestFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::start_bgp_failover_test::StartBgpFailoverTestOutput,
            crate::operation::start_bgp_failover_test::StartBgpFailoverTestError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl StartBgpFailoverTestFluentBuilder {
    /// Creates a new `StartBgpFailoverTest`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the StartBgpFailoverTest as a reference.
    pub fn as_input(&self) -> &crate::operation::start_bgp_failover_test::builders::StartBgpFailoverTestInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_bgp_failover_test::StartBgpFailoverTestOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_bgp_failover_test::StartBgpFailoverTestError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::start_bgp_failover_test::StartBgpFailoverTest::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::start_bgp_failover_test::StartBgpFailoverTest::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::start_bgp_failover_test::StartBgpFailoverTestOutput,
        crate::operation::start_bgp_failover_test::StartBgpFailoverTestError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ID of the virtual interface you want to test.</p>
    pub fn virtual_interface_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.virtual_interface_id(input.into());
        self
    }
    /// <p>The ID of the virtual interface you want to test.</p>
    pub fn set_virtual_interface_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_virtual_interface_id(input);
        self
    }
    /// <p>The ID of the virtual interface you want to test.</p>
    pub fn get_virtual_interface_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_virtual_interface_id()
    }
    ///
    /// Appends an item to `bgpPeers`.
    ///
    /// To override the contents of this collection use [`set_bgp_peers`](Self::set_bgp_peers).
    ///
    /// <p>The BGP peers to place in the DOWN state.</p>
    pub fn bgp_peers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.bgp_peers(input.into());
        self
    }
    /// <p>The BGP peers to place in the DOWN state.</p>
    pub fn set_bgp_peers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_bgp_peers(input);
        self
    }
    /// <p>The BGP peers to place in the DOWN state.</p>
    pub fn get_bgp_peers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_bgp_peers()
    }
    /// <p>The time in minutes that the virtual interface failover test will last.</p>
    /// <p>Maximum value: 4,320 minutes (72 hours).</p>
    /// <p>Default: 180 minutes (3 hours).</p>
    pub fn test_duration_in_minutes(mut self, input: i32) -> Self {
        self.inner = self.inner.test_duration_in_minutes(input);
        self
    }
    /// <p>The time in minutes that the virtual interface failover test will last.</p>
    /// <p>Maximum value: 4,320 minutes (72 hours).</p>
    /// <p>Default: 180 minutes (3 hours).</p>
    pub fn set_test_duration_in_minutes(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_test_duration_in_minutes(input);
        self
    }
    /// <p>The time in minutes that the virtual interface failover test will last.</p>
    /// <p>Maximum value: 4,320 minutes (72 hours).</p>
    /// <p>Default: 180 minutes (3 hours).</p>
    pub fn get_test_duration_in_minutes(&self) -> &::std::option::Option<i32> {
        self.inner.get_test_duration_in_minutes()
    }
}
