// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartBgpFailoverTestInput {
    /// <p>The ID of the virtual interface you want to test.</p>
    #[doc(hidden)]
    pub virtual_interface_id: std::option::Option<std::string::String>,
    /// <p>The BGP peers to place in the DOWN state.</p>
    #[doc(hidden)]
    pub bgp_peers: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The time in minutes that the virtual interface failover test will last.</p>
    /// <p>Maximum value: 180 minutes (3 hours).</p>
    /// <p>Default: 180 minutes (3 hours).</p>
    #[doc(hidden)]
    pub test_duration_in_minutes: std::option::Option<i32>,
}
impl StartBgpFailoverTestInput {
    /// <p>The ID of the virtual interface you want to test.</p>
    pub fn virtual_interface_id(&self) -> std::option::Option<&str> {
        self.virtual_interface_id.as_deref()
    }
    /// <p>The BGP peers to place in the DOWN state.</p>
    pub fn bgp_peers(&self) -> std::option::Option<&[std::string::String]> {
        self.bgp_peers.as_deref()
    }
    /// <p>The time in minutes that the virtual interface failover test will last.</p>
    /// <p>Maximum value: 180 minutes (3 hours).</p>
    /// <p>Default: 180 minutes (3 hours).</p>
    pub fn test_duration_in_minutes(&self) -> std::option::Option<i32> {
        self.test_duration_in_minutes
    }
}
impl StartBgpFailoverTestInput {
    /// Creates a new builder-style object to manufacture [`StartBgpFailoverTestInput`](crate::operation::start_bgp_failover_test::StartBgpFailoverTestInput).
    pub fn builder(
    ) -> crate::operation::start_bgp_failover_test::builders::StartBgpFailoverTestInputBuilder {
        crate::operation::start_bgp_failover_test::builders::StartBgpFailoverTestInputBuilder::default()
    }
}

/// A builder for [`StartBgpFailoverTestInput`](crate::operation::start_bgp_failover_test::StartBgpFailoverTestInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartBgpFailoverTestInputBuilder {
    pub(crate) virtual_interface_id: std::option::Option<std::string::String>,
    pub(crate) bgp_peers: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) test_duration_in_minutes: std::option::Option<i32>,
}
impl StartBgpFailoverTestInputBuilder {
    /// <p>The ID of the virtual interface you want to test.</p>
    pub fn virtual_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.virtual_interface_id = Some(input.into());
        self
    }
    /// <p>The ID of the virtual interface you want to test.</p>
    pub fn set_virtual_interface_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.virtual_interface_id = input;
        self
    }
    /// Appends an item to `bgp_peers`.
    ///
    /// To override the contents of this collection use [`set_bgp_peers`](Self::set_bgp_peers).
    ///
    /// <p>The BGP peers to place in the DOWN state.</p>
    pub fn bgp_peers(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.bgp_peers.unwrap_or_default();
        v.push(input.into());
        self.bgp_peers = Some(v);
        self
    }
    /// <p>The BGP peers to place in the DOWN state.</p>
    pub fn set_bgp_peers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.bgp_peers = input;
        self
    }
    /// <p>The time in minutes that the virtual interface failover test will last.</p>
    /// <p>Maximum value: 180 minutes (3 hours).</p>
    /// <p>Default: 180 minutes (3 hours).</p>
    pub fn test_duration_in_minutes(mut self, input: i32) -> Self {
        self.test_duration_in_minutes = Some(input);
        self
    }
    /// <p>The time in minutes that the virtual interface failover test will last.</p>
    /// <p>Maximum value: 180 minutes (3 hours).</p>
    /// <p>Default: 180 minutes (3 hours).</p>
    pub fn set_test_duration_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
        self.test_duration_in_minutes = input;
        self
    }
    /// Consumes the builder and constructs a [`StartBgpFailoverTestInput`](crate::operation::start_bgp_failover_test::StartBgpFailoverTestInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_bgp_failover_test::StartBgpFailoverTestInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::start_bgp_failover_test::StartBgpFailoverTestInput {
                virtual_interface_id: self.virtual_interface_id,
                bgp_peers: self.bgp_peers,
                test_duration_in_minutes: self.test_duration_in_minutes,
            },
        )
    }
}
