// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::allocate_connection_on_interconnect::_allocate_connection_on_interconnect_output::AllocateConnectionOnInterconnectOutputBuilder;

pub use crate::operation::allocate_connection_on_interconnect::_allocate_connection_on_interconnect_input::AllocateConnectionOnInterconnectInputBuilder;

/// Fluent builder constructing a request to `AllocateConnectionOnInterconnect`.
///
/// <p>Deprecated. Use <code>AllocateHostedConnection</code> instead.</p>
/// <p>Creates a hosted connection on an interconnect.</p>
/// <p>Allocates a VLAN number and a specified amount of bandwidth for use by a hosted connection on the specified interconnect.</p> <note>
/// <p>Intended for use by Direct Connect Partners only.</p>
/// </note>
#[deprecated]
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AllocateConnectionOnInterconnectFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::allocate_connection_on_interconnect::builders::AllocateConnectionOnInterconnectInputBuilder
            }
impl AllocateConnectionOnInterconnectFluentBuilder {
    /// Creates a new `AllocateConnectionOnInterconnect`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::allocate_connection_on_interconnect::AllocateConnectionOnInterconnect, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::allocate_connection_on_interconnect::AllocateConnectionOnInterconnectError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::allocate_connection_on_interconnect::AllocateConnectionOnInterconnectOutput, aws_smithy_http::result::SdkError<crate::operation::allocate_connection_on_interconnect::AllocateConnectionOnInterconnectError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The bandwidth of the connection. The possible values are 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, and 10Gbps. Note that only those Direct Connect Partners who have met specific requirements are allowed to create a 1Gbps, 2Gbps, 5Gbps or 10Gbps hosted connection.</p>
    pub fn bandwidth(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.bandwidth(input.into());
        self
    }
    /// <p>The bandwidth of the connection. The possible values are 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, and 10Gbps. Note that only those Direct Connect Partners who have met specific requirements are allowed to create a 1Gbps, 2Gbps, 5Gbps or 10Gbps hosted connection.</p>
    pub fn set_bandwidth(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_bandwidth(input);
        self
    }
    /// <p>The name of the provisioned connection.</p>
    pub fn connection_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connection_name(input.into());
        self
    }
    /// <p>The name of the provisioned connection.</p>
    pub fn set_connection_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_connection_name(input);
        self
    }
    /// <p>The ID of the Amazon Web Services account of the customer for whom the connection will be provisioned.</p>
    pub fn owner_account(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.owner_account(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account of the customer for whom the connection will be provisioned.</p>
    pub fn set_owner_account(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_owner_account(input);
        self
    }
    /// <p>The ID of the interconnect on which the connection will be provisioned.</p>
    pub fn interconnect_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.interconnect_id(input.into());
        self
    }
    /// <p>The ID of the interconnect on which the connection will be provisioned.</p>
    pub fn set_interconnect_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_interconnect_id(input);
        self
    }
    /// <p>The dedicated VLAN provisioned to the connection.</p>
    pub fn vlan(mut self, input: i32) -> Self {
        self.inner = self.inner.vlan(input);
        self
    }
    /// <p>The dedicated VLAN provisioned to the connection.</p>
    pub fn set_vlan(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_vlan(input);
        self
    }
}
