// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_public_virtual_interface::_create_public_virtual_interface_output::CreatePublicVirtualInterfaceOutputBuilder;

pub use crate::operation::create_public_virtual_interface::_create_public_virtual_interface_input::CreatePublicVirtualInterfaceInputBuilder;

/// Fluent builder constructing a request to `CreatePublicVirtualInterface`.
///
/// <p>Creates a public virtual interface. A virtual interface is the VLAN that transports Direct Connect traffic. A public virtual interface supports sending traffic to public services of Amazon Web Services such as Amazon S3.</p>
/// <p>When creating an IPv6 public virtual interface (<code>addressFamily</code> is <code>ipv6</code>), leave the <code>customer</code> and <code>amazon</code> address fields blank to use auto-assigned IPv6 space. Custom IPv6 addresses are not supported.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreatePublicVirtualInterfaceFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_public_virtual_interface::builders::CreatePublicVirtualInterfaceInputBuilder
            }
impl CreatePublicVirtualInterfaceFluentBuilder {
    /// Creates a new `CreatePublicVirtualInterface`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_public_virtual_interface::CreatePublicVirtualInterface,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_public_virtual_interface::CreatePublicVirtualInterfaceError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_public_virtual_interface::CreatePublicVirtualInterfaceOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_public_virtual_interface::CreatePublicVirtualInterfaceError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ID of the connection.</p>
    pub fn connection_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.connection_id(input.into());
        self
    }
    /// <p>The ID of the connection.</p>
    pub fn set_connection_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_connection_id(input);
        self
    }
    /// <p>Information about the public virtual interface.</p>
    pub fn new_public_virtual_interface(
        mut self,
        input: crate::types::NewPublicVirtualInterface,
    ) -> Self {
        self.inner = self.inner.new_public_virtual_interface(input);
        self
    }
    /// <p>Information about the public virtual interface.</p>
    pub fn set_new_public_virtual_interface(
        mut self,
        input: std::option::Option<crate::types::NewPublicVirtualInterface>,
    ) -> Self {
        self.inner = self.inner.set_new_public_virtual_interface(input);
        self
    }
}
