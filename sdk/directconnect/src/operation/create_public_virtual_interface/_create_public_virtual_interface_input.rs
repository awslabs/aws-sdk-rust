// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreatePublicVirtualInterfaceInput {
    /// <p>The ID of the connection.</p>
    pub connection_id: ::std::option::Option<::std::string::String>,
    /// <p>Information about the public virtual interface.</p>
    pub new_public_virtual_interface: ::std::option::Option<crate::types::NewPublicVirtualInterface>,
}
impl CreatePublicVirtualInterfaceInput {
    /// <p>The ID of the connection.</p>
    pub fn connection_id(&self) -> ::std::option::Option<&str> {
        self.connection_id.as_deref()
    }
    /// <p>Information about the public virtual interface.</p>
    pub fn new_public_virtual_interface(&self) -> ::std::option::Option<&crate::types::NewPublicVirtualInterface> {
        self.new_public_virtual_interface.as_ref()
    }
}
impl CreatePublicVirtualInterfaceInput {
    /// Creates a new builder-style object to manufacture [`CreatePublicVirtualInterfaceInput`](crate::operation::create_public_virtual_interface::CreatePublicVirtualInterfaceInput).
    pub fn builder() -> crate::operation::create_public_virtual_interface::builders::CreatePublicVirtualInterfaceInputBuilder {
        crate::operation::create_public_virtual_interface::builders::CreatePublicVirtualInterfaceInputBuilder::default()
    }
}

/// A builder for [`CreatePublicVirtualInterfaceInput`](crate::operation::create_public_virtual_interface::CreatePublicVirtualInterfaceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreatePublicVirtualInterfaceInputBuilder {
    pub(crate) connection_id: ::std::option::Option<::std::string::String>,
    pub(crate) new_public_virtual_interface: ::std::option::Option<crate::types::NewPublicVirtualInterface>,
}
impl CreatePublicVirtualInterfaceInputBuilder {
    /// <p>The ID of the connection.</p>
    /// This field is required.
    pub fn connection_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the connection.</p>
    pub fn set_connection_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_id = input;
        self
    }
    /// <p>The ID of the connection.</p>
    pub fn get_connection_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_id
    }
    /// <p>Information about the public virtual interface.</p>
    /// This field is required.
    pub fn new_public_virtual_interface(mut self, input: crate::types::NewPublicVirtualInterface) -> Self {
        self.new_public_virtual_interface = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the public virtual interface.</p>
    pub fn set_new_public_virtual_interface(mut self, input: ::std::option::Option<crate::types::NewPublicVirtualInterface>) -> Self {
        self.new_public_virtual_interface = input;
        self
    }
    /// <p>Information about the public virtual interface.</p>
    pub fn get_new_public_virtual_interface(&self) -> &::std::option::Option<crate::types::NewPublicVirtualInterface> {
        &self.new_public_virtual_interface
    }
    /// Consumes the builder and constructs a [`CreatePublicVirtualInterfaceInput`](crate::operation::create_public_virtual_interface::CreatePublicVirtualInterfaceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_public_virtual_interface::CreatePublicVirtualInterfaceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_public_virtual_interface::CreatePublicVirtualInterfaceInput {
            connection_id: self.connection_id,
            new_public_virtual_interface: self.new_public_virtual_interface,
        })
    }
}
