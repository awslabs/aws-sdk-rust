// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a BGP peer.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BgpPeer {
    /// <p>The ID of the BGP peer.</p>
    #[doc(hidden)]
    pub bgp_peer_id: std::option::Option<std::string::String>,
    /// <p>The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.</p>
    #[doc(hidden)]
    pub asn: i32,
    /// <p>The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.</p>
    #[doc(hidden)]
    pub auth_key: std::option::Option<std::string::String>,
    /// <p>The address family for the BGP peer.</p>
    #[doc(hidden)]
    pub address_family: std::option::Option<crate::types::AddressFamily>,
    /// <p>The IP address assigned to the Amazon interface.</p>
    #[doc(hidden)]
    pub amazon_address: std::option::Option<std::string::String>,
    /// <p>The IP address assigned to the customer interface.</p>
    #[doc(hidden)]
    pub customer_address: std::option::Option<std::string::String>,
    /// <p>The state of the BGP peer. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>verifying</code>: The BGP peering addresses or ASN require validation before the BGP peer can be created. This state applies only to public virtual interfaces.</p> </li>
    /// <li> <p> <code>pending</code>: The BGP peer is created, and remains in this state until it is ready to be established.</p> </li>
    /// <li> <p> <code>available</code>: The BGP peer is ready to be established.</p> </li>
    /// <li> <p> <code>deleting</code>: The BGP peer is being deleted.</p> </li>
    /// <li> <p> <code>deleted</code>: The BGP peer is deleted and cannot be established.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub bgp_peer_state: std::option::Option<crate::types::BgpPeerState>,
    /// <p>The status of the BGP peer. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>up</code>: The BGP peer is established. This state does not indicate the state of the routing function. Ensure that you are receiving routes over the BGP session.</p> </li>
    /// <li> <p> <code>down</code>: The BGP peer is down.</p> </li>
    /// <li> <p> <code>unknown</code>: The BGP peer status is not available.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub bgp_status: std::option::Option<crate::types::BgpStatus>,
    /// <p>The Direct Connect endpoint that terminates the BGP peer.</p>
    #[doc(hidden)]
    pub aws_device_v2: std::option::Option<std::string::String>,
    /// <p>The Direct Connect endpoint that terminates the logical connection. This device might be different than the device that terminates the physical connection.</p>
    #[doc(hidden)]
    pub aws_logical_device_id: std::option::Option<std::string::String>,
}
impl BgpPeer {
    /// <p>The ID of the BGP peer.</p>
    pub fn bgp_peer_id(&self) -> std::option::Option<&str> {
        self.bgp_peer_id.as_deref()
    }
    /// <p>The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.</p>
    pub fn asn(&self) -> i32 {
        self.asn
    }
    /// <p>The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.</p>
    pub fn auth_key(&self) -> std::option::Option<&str> {
        self.auth_key.as_deref()
    }
    /// <p>The address family for the BGP peer.</p>
    pub fn address_family(&self) -> std::option::Option<&crate::types::AddressFamily> {
        self.address_family.as_ref()
    }
    /// <p>The IP address assigned to the Amazon interface.</p>
    pub fn amazon_address(&self) -> std::option::Option<&str> {
        self.amazon_address.as_deref()
    }
    /// <p>The IP address assigned to the customer interface.</p>
    pub fn customer_address(&self) -> std::option::Option<&str> {
        self.customer_address.as_deref()
    }
    /// <p>The state of the BGP peer. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>verifying</code>: The BGP peering addresses or ASN require validation before the BGP peer can be created. This state applies only to public virtual interfaces.</p> </li>
    /// <li> <p> <code>pending</code>: The BGP peer is created, and remains in this state until it is ready to be established.</p> </li>
    /// <li> <p> <code>available</code>: The BGP peer is ready to be established.</p> </li>
    /// <li> <p> <code>deleting</code>: The BGP peer is being deleted.</p> </li>
    /// <li> <p> <code>deleted</code>: The BGP peer is deleted and cannot be established.</p> </li>
    /// </ul>
    pub fn bgp_peer_state(&self) -> std::option::Option<&crate::types::BgpPeerState> {
        self.bgp_peer_state.as_ref()
    }
    /// <p>The status of the BGP peer. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>up</code>: The BGP peer is established. This state does not indicate the state of the routing function. Ensure that you are receiving routes over the BGP session.</p> </li>
    /// <li> <p> <code>down</code>: The BGP peer is down.</p> </li>
    /// <li> <p> <code>unknown</code>: The BGP peer status is not available.</p> </li>
    /// </ul>
    pub fn bgp_status(&self) -> std::option::Option<&crate::types::BgpStatus> {
        self.bgp_status.as_ref()
    }
    /// <p>The Direct Connect endpoint that terminates the BGP peer.</p>
    pub fn aws_device_v2(&self) -> std::option::Option<&str> {
        self.aws_device_v2.as_deref()
    }
    /// <p>The Direct Connect endpoint that terminates the logical connection. This device might be different than the device that terminates the physical connection.</p>
    pub fn aws_logical_device_id(&self) -> std::option::Option<&str> {
        self.aws_logical_device_id.as_deref()
    }
}
impl BgpPeer {
    /// Creates a new builder-style object to manufacture [`BgpPeer`](crate::types::BgpPeer).
    pub fn builder() -> crate::types::builders::BgpPeerBuilder {
        crate::types::builders::BgpPeerBuilder::default()
    }
}

/// A builder for [`BgpPeer`](crate::types::BgpPeer).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BgpPeerBuilder {
    pub(crate) bgp_peer_id: std::option::Option<std::string::String>,
    pub(crate) asn: std::option::Option<i32>,
    pub(crate) auth_key: std::option::Option<std::string::String>,
    pub(crate) address_family: std::option::Option<crate::types::AddressFamily>,
    pub(crate) amazon_address: std::option::Option<std::string::String>,
    pub(crate) customer_address: std::option::Option<std::string::String>,
    pub(crate) bgp_peer_state: std::option::Option<crate::types::BgpPeerState>,
    pub(crate) bgp_status: std::option::Option<crate::types::BgpStatus>,
    pub(crate) aws_device_v2: std::option::Option<std::string::String>,
    pub(crate) aws_logical_device_id: std::option::Option<std::string::String>,
}
impl BgpPeerBuilder {
    /// <p>The ID of the BGP peer.</p>
    pub fn bgp_peer_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.bgp_peer_id = Some(input.into());
        self
    }
    /// <p>The ID of the BGP peer.</p>
    pub fn set_bgp_peer_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bgp_peer_id = input;
        self
    }
    /// <p>The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.</p>
    pub fn asn(mut self, input: i32) -> Self {
        self.asn = Some(input);
        self
    }
    /// <p>The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.</p>
    pub fn set_asn(mut self, input: std::option::Option<i32>) -> Self {
        self.asn = input;
        self
    }
    /// <p>The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.</p>
    pub fn auth_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.auth_key = Some(input.into());
        self
    }
    /// <p>The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.</p>
    pub fn set_auth_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.auth_key = input;
        self
    }
    /// <p>The address family for the BGP peer.</p>
    pub fn address_family(mut self, input: crate::types::AddressFamily) -> Self {
        self.address_family = Some(input);
        self
    }
    /// <p>The address family for the BGP peer.</p>
    pub fn set_address_family(
        mut self,
        input: std::option::Option<crate::types::AddressFamily>,
    ) -> Self {
        self.address_family = input;
        self
    }
    /// <p>The IP address assigned to the Amazon interface.</p>
    pub fn amazon_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.amazon_address = Some(input.into());
        self
    }
    /// <p>The IP address assigned to the Amazon interface.</p>
    pub fn set_amazon_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.amazon_address = input;
        self
    }
    /// <p>The IP address assigned to the customer interface.</p>
    pub fn customer_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.customer_address = Some(input.into());
        self
    }
    /// <p>The IP address assigned to the customer interface.</p>
    pub fn set_customer_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.customer_address = input;
        self
    }
    /// <p>The state of the BGP peer. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>verifying</code>: The BGP peering addresses or ASN require validation before the BGP peer can be created. This state applies only to public virtual interfaces.</p> </li>
    /// <li> <p> <code>pending</code>: The BGP peer is created, and remains in this state until it is ready to be established.</p> </li>
    /// <li> <p> <code>available</code>: The BGP peer is ready to be established.</p> </li>
    /// <li> <p> <code>deleting</code>: The BGP peer is being deleted.</p> </li>
    /// <li> <p> <code>deleted</code>: The BGP peer is deleted and cannot be established.</p> </li>
    /// </ul>
    pub fn bgp_peer_state(mut self, input: crate::types::BgpPeerState) -> Self {
        self.bgp_peer_state = Some(input);
        self
    }
    /// <p>The state of the BGP peer. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>verifying</code>: The BGP peering addresses or ASN require validation before the BGP peer can be created. This state applies only to public virtual interfaces.</p> </li>
    /// <li> <p> <code>pending</code>: The BGP peer is created, and remains in this state until it is ready to be established.</p> </li>
    /// <li> <p> <code>available</code>: The BGP peer is ready to be established.</p> </li>
    /// <li> <p> <code>deleting</code>: The BGP peer is being deleted.</p> </li>
    /// <li> <p> <code>deleted</code>: The BGP peer is deleted and cannot be established.</p> </li>
    /// </ul>
    pub fn set_bgp_peer_state(
        mut self,
        input: std::option::Option<crate::types::BgpPeerState>,
    ) -> Self {
        self.bgp_peer_state = input;
        self
    }
    /// <p>The status of the BGP peer. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>up</code>: The BGP peer is established. This state does not indicate the state of the routing function. Ensure that you are receiving routes over the BGP session.</p> </li>
    /// <li> <p> <code>down</code>: The BGP peer is down.</p> </li>
    /// <li> <p> <code>unknown</code>: The BGP peer status is not available.</p> </li>
    /// </ul>
    pub fn bgp_status(mut self, input: crate::types::BgpStatus) -> Self {
        self.bgp_status = Some(input);
        self
    }
    /// <p>The status of the BGP peer. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>up</code>: The BGP peer is established. This state does not indicate the state of the routing function. Ensure that you are receiving routes over the BGP session.</p> </li>
    /// <li> <p> <code>down</code>: The BGP peer is down.</p> </li>
    /// <li> <p> <code>unknown</code>: The BGP peer status is not available.</p> </li>
    /// </ul>
    pub fn set_bgp_status(mut self, input: std::option::Option<crate::types::BgpStatus>) -> Self {
        self.bgp_status = input;
        self
    }
    /// <p>The Direct Connect endpoint that terminates the BGP peer.</p>
    pub fn aws_device_v2(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_device_v2 = Some(input.into());
        self
    }
    /// <p>The Direct Connect endpoint that terminates the BGP peer.</p>
    pub fn set_aws_device_v2(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.aws_device_v2 = input;
        self
    }
    /// <p>The Direct Connect endpoint that terminates the logical connection. This device might be different than the device that terminates the physical connection.</p>
    pub fn aws_logical_device_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.aws_logical_device_id = Some(input.into());
        self
    }
    /// <p>The Direct Connect endpoint that terminates the logical connection. This device might be different than the device that terminates the physical connection.</p>
    pub fn set_aws_logical_device_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.aws_logical_device_id = input;
        self
    }
    /// Consumes the builder and constructs a [`BgpPeer`](crate::types::BgpPeer).
    pub fn build(self) -> crate::types::BgpPeer {
        crate::types::BgpPeer {
            bgp_peer_id: self.bgp_peer_id,
            asn: self.asn.unwrap_or_default(),
            auth_key: self.auth_key,
            address_family: self.address_family,
            amazon_address: self.amazon_address,
            customer_address: self.customer_address,
            bgp_peer_state: self.bgp_peer_state,
            bgp_status: self.bgp_status,
            aws_device_v2: self.aws_device_v2,
            aws_logical_device_id: self.aws_logical_device_id,
        }
    }
}
