// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a route filter prefix that a customer can advertise through Border Gateway Protocol (BGP) over a public virtual interface.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RouteFilterPrefix {
    /// <p>The CIDR block for the advertised route. Separate multiple routes using commas. An IPv6 CIDR must use /64 or shorter.</p>
    #[doc(hidden)]
    pub cidr: std::option::Option<std::string::String>,
}
impl RouteFilterPrefix {
    /// <p>The CIDR block for the advertised route. Separate multiple routes using commas. An IPv6 CIDR must use /64 or shorter.</p>
    pub fn cidr(&self) -> std::option::Option<&str> {
        self.cidr.as_deref()
    }
}
impl RouteFilterPrefix {
    /// Creates a new builder-style object to manufacture [`RouteFilterPrefix`](crate::types::RouteFilterPrefix).
    pub fn builder() -> crate::types::builders::RouteFilterPrefixBuilder {
        crate::types::builders::RouteFilterPrefixBuilder::default()
    }
}

/// A builder for [`RouteFilterPrefix`](crate::types::RouteFilterPrefix).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RouteFilterPrefixBuilder {
    pub(crate) cidr: std::option::Option<std::string::String>,
}
impl RouteFilterPrefixBuilder {
    /// <p>The CIDR block for the advertised route. Separate multiple routes using commas. An IPv6 CIDR must use /64 or shorter.</p>
    pub fn cidr(mut self, input: impl Into<std::string::String>) -> Self {
        self.cidr = Some(input.into());
        self
    }
    /// <p>The CIDR block for the advertised route. Separate multiple routes using commas. An IPv6 CIDR must use /64 or shorter.</p>
    pub fn set_cidr(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.cidr = input;
        self
    }
    /// Consumes the builder and constructs a [`RouteFilterPrefix`](crate::types::RouteFilterPrefix).
    pub fn build(self) -> crate::types::RouteFilterPrefix {
        crate::types::RouteFilterPrefix { cidr: self.cidr }
    }
}
