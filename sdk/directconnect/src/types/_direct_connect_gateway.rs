// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a Direct Connect gateway, which enables you to connect virtual interfaces and virtual private gateway or transit gateways.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DirectConnectGateway {
    /// <p>The ID of the Direct Connect gateway.</p>
    #[doc(hidden)]
    pub direct_connect_gateway_id: std::option::Option<std::string::String>,
    /// <p>The name of the Direct Connect gateway.</p>
    #[doc(hidden)]
    pub direct_connect_gateway_name: std::option::Option<std::string::String>,
    /// <p>The autonomous system number (ASN) for the Amazon side of the connection.</p>
    #[doc(hidden)]
    pub amazon_side_asn: std::option::Option<i64>,
    /// <p>The ID of the Amazon Web Services account that owns the Direct Connect gateway.</p>
    #[doc(hidden)]
    pub owner_account: std::option::Option<std::string::String>,
    /// <p>The state of the Direct Connect gateway. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>pending</code>: The initial state after calling <code>CreateDirectConnectGateway</code>.</p> </li>
    /// <li> <p> <code>available</code>: The Direct Connect gateway is ready for use.</p> </li>
    /// <li> <p> <code>deleting</code>: The initial state after calling <code>DeleteDirectConnectGateway</code>.</p> </li>
    /// <li> <p> <code>deleted</code>: The Direct Connect gateway is deleted and cannot pass traffic.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub direct_connect_gateway_state: std::option::Option<crate::types::DirectConnectGatewayState>,
    /// <p>The error message if the state of an object failed to advance.</p>
    #[doc(hidden)]
    pub state_change_error: std::option::Option<std::string::String>,
}
impl DirectConnectGateway {
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn direct_connect_gateway_id(&self) -> std::option::Option<&str> {
        self.direct_connect_gateway_id.as_deref()
    }
    /// <p>The name of the Direct Connect gateway.</p>
    pub fn direct_connect_gateway_name(&self) -> std::option::Option<&str> {
        self.direct_connect_gateway_name.as_deref()
    }
    /// <p>The autonomous system number (ASN) for the Amazon side of the connection.</p>
    pub fn amazon_side_asn(&self) -> std::option::Option<i64> {
        self.amazon_side_asn
    }
    /// <p>The ID of the Amazon Web Services account that owns the Direct Connect gateway.</p>
    pub fn owner_account(&self) -> std::option::Option<&str> {
        self.owner_account.as_deref()
    }
    /// <p>The state of the Direct Connect gateway. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>pending</code>: The initial state after calling <code>CreateDirectConnectGateway</code>.</p> </li>
    /// <li> <p> <code>available</code>: The Direct Connect gateway is ready for use.</p> </li>
    /// <li> <p> <code>deleting</code>: The initial state after calling <code>DeleteDirectConnectGateway</code>.</p> </li>
    /// <li> <p> <code>deleted</code>: The Direct Connect gateway is deleted and cannot pass traffic.</p> </li>
    /// </ul>
    pub fn direct_connect_gateway_state(
        &self,
    ) -> std::option::Option<&crate::types::DirectConnectGatewayState> {
        self.direct_connect_gateway_state.as_ref()
    }
    /// <p>The error message if the state of an object failed to advance.</p>
    pub fn state_change_error(&self) -> std::option::Option<&str> {
        self.state_change_error.as_deref()
    }
}
impl DirectConnectGateway {
    /// Creates a new builder-style object to manufacture [`DirectConnectGateway`](crate::types::DirectConnectGateway).
    pub fn builder() -> crate::types::builders::DirectConnectGatewayBuilder {
        crate::types::builders::DirectConnectGatewayBuilder::default()
    }
}

/// A builder for [`DirectConnectGateway`](crate::types::DirectConnectGateway).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DirectConnectGatewayBuilder {
    pub(crate) direct_connect_gateway_id: std::option::Option<std::string::String>,
    pub(crate) direct_connect_gateway_name: std::option::Option<std::string::String>,
    pub(crate) amazon_side_asn: std::option::Option<i64>,
    pub(crate) owner_account: std::option::Option<std::string::String>,
    pub(crate) direct_connect_gateway_state:
        std::option::Option<crate::types::DirectConnectGatewayState>,
    pub(crate) state_change_error: std::option::Option<std::string::String>,
}
impl DirectConnectGatewayBuilder {
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn direct_connect_gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.direct_connect_gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn set_direct_connect_gateway_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.direct_connect_gateway_id = input;
        self
    }
    /// <p>The name of the Direct Connect gateway.</p>
    pub fn direct_connect_gateway_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.direct_connect_gateway_name = Some(input.into());
        self
    }
    /// <p>The name of the Direct Connect gateway.</p>
    pub fn set_direct_connect_gateway_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.direct_connect_gateway_name = input;
        self
    }
    /// <p>The autonomous system number (ASN) for the Amazon side of the connection.</p>
    pub fn amazon_side_asn(mut self, input: i64) -> Self {
        self.amazon_side_asn = Some(input);
        self
    }
    /// <p>The autonomous system number (ASN) for the Amazon side of the connection.</p>
    pub fn set_amazon_side_asn(mut self, input: std::option::Option<i64>) -> Self {
        self.amazon_side_asn = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the Direct Connect gateway.</p>
    pub fn owner_account(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner_account = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the Direct Connect gateway.</p>
    pub fn set_owner_account(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner_account = input;
        self
    }
    /// <p>The state of the Direct Connect gateway. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>pending</code>: The initial state after calling <code>CreateDirectConnectGateway</code>.</p> </li>
    /// <li> <p> <code>available</code>: The Direct Connect gateway is ready for use.</p> </li>
    /// <li> <p> <code>deleting</code>: The initial state after calling <code>DeleteDirectConnectGateway</code>.</p> </li>
    /// <li> <p> <code>deleted</code>: The Direct Connect gateway is deleted and cannot pass traffic.</p> </li>
    /// </ul>
    pub fn direct_connect_gateway_state(
        mut self,
        input: crate::types::DirectConnectGatewayState,
    ) -> Self {
        self.direct_connect_gateway_state = Some(input);
        self
    }
    /// <p>The state of the Direct Connect gateway. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>pending</code>: The initial state after calling <code>CreateDirectConnectGateway</code>.</p> </li>
    /// <li> <p> <code>available</code>: The Direct Connect gateway is ready for use.</p> </li>
    /// <li> <p> <code>deleting</code>: The initial state after calling <code>DeleteDirectConnectGateway</code>.</p> </li>
    /// <li> <p> <code>deleted</code>: The Direct Connect gateway is deleted and cannot pass traffic.</p> </li>
    /// </ul>
    pub fn set_direct_connect_gateway_state(
        mut self,
        input: std::option::Option<crate::types::DirectConnectGatewayState>,
    ) -> Self {
        self.direct_connect_gateway_state = input;
        self
    }
    /// <p>The error message if the state of an object failed to advance.</p>
    pub fn state_change_error(mut self, input: impl Into<std::string::String>) -> Self {
        self.state_change_error = Some(input.into());
        self
    }
    /// <p>The error message if the state of an object failed to advance.</p>
    pub fn set_state_change_error(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.state_change_error = input;
        self
    }
    /// Consumes the builder and constructs a [`DirectConnectGateway`](crate::types::DirectConnectGateway).
    pub fn build(self) -> crate::types::DirectConnectGateway {
        crate::types::DirectConnectGateway {
            direct_connect_gateway_id: self.direct_connect_gateway_id,
            direct_connect_gateway_name: self.direct_connect_gateway_name,
            amazon_side_asn: self.amazon_side_asn,
            owner_account: self.owner_account,
            direct_connect_gateway_state: self.direct_connect_gateway_state,
            state_change_error: self.state_change_error,
        }
    }
}
