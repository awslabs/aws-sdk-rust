// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about an association between a Direct Connect gateway and a virtual private gateway or transit gateway.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DirectConnectGatewayAssociation {
    /// <p>The ID of the Direct Connect gateway.</p>
    pub direct_connect_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the associated gateway.</p>
    pub direct_connect_gateway_owner_account: ::std::option::Option<::std::string::String>,
    /// <p>The state of the association. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>associating</code>: The initial state after calling <code>CreateDirectConnectGatewayAssociation</code>.</p> </li>
    /// <li> <p> <code>associated</code>: The Direct Connect gateway and virtual private gateway or transit gateway are successfully associated and ready to pass traffic.</p> </li>
    /// <li> <p> <code>disassociating</code>: The initial state after calling <code>DeleteDirectConnectGatewayAssociation</code>.</p> </li>
    /// <li> <p> <code>disassociated</code>: The virtual private gateway or transit gateway is disassociated from the Direct Connect gateway. Traffic flow between the Direct Connect gateway and virtual private gateway or transit gateway is stopped.</p> </li>
    /// <li> <p> <code>updating</code>: The CIDR blocks for the virtual private gateway or transit gateway are currently being updated. This could be new CIDR blocks added or current CIDR blocks removed.</p> </li>
    /// </ul>
    pub association_state: ::std::option::Option<crate::types::DirectConnectGatewayAssociationState>,
    /// <p>The error message if the state of an object failed to advance.</p>
    pub state_change_error: ::std::option::Option<::std::string::String>,
    /// <p>Information about the associated gateway.</p>
    pub associated_gateway: ::std::option::Option<crate::types::AssociatedGateway>,
    /// <p>The ID of the Direct Connect gateway association.</p>
    pub association_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon VPC prefixes to advertise to the Direct Connect gateway.</p>
    pub allowed_prefixes_to_direct_connect_gateway: ::std::option::Option<::std::vec::Vec<crate::types::RouteFilterPrefix>>,
    /// <p>The ID of the virtual private gateway. Applies only to private virtual interfaces.</p>
    pub virtual_gateway_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region where the virtual private gateway is located.</p>
    pub virtual_gateway_region: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the virtual private gateway.</p>
    pub virtual_gateway_owner_account: ::std::option::Option<::std::string::String>,
}
impl DirectConnectGatewayAssociation {
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn direct_connect_gateway_id(&self) -> ::std::option::Option<&str> {
        self.direct_connect_gateway_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the associated gateway.</p>
    pub fn direct_connect_gateway_owner_account(&self) -> ::std::option::Option<&str> {
        self.direct_connect_gateway_owner_account.as_deref()
    }
    /// <p>The state of the association. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>associating</code>: The initial state after calling <code>CreateDirectConnectGatewayAssociation</code>.</p> </li>
    /// <li> <p> <code>associated</code>: The Direct Connect gateway and virtual private gateway or transit gateway are successfully associated and ready to pass traffic.</p> </li>
    /// <li> <p> <code>disassociating</code>: The initial state after calling <code>DeleteDirectConnectGatewayAssociation</code>.</p> </li>
    /// <li> <p> <code>disassociated</code>: The virtual private gateway or transit gateway is disassociated from the Direct Connect gateway. Traffic flow between the Direct Connect gateway and virtual private gateway or transit gateway is stopped.</p> </li>
    /// <li> <p> <code>updating</code>: The CIDR blocks for the virtual private gateway or transit gateway are currently being updated. This could be new CIDR blocks added or current CIDR blocks removed.</p> </li>
    /// </ul>
    pub fn association_state(&self) -> ::std::option::Option<&crate::types::DirectConnectGatewayAssociationState> {
        self.association_state.as_ref()
    }
    /// <p>The error message if the state of an object failed to advance.</p>
    pub fn state_change_error(&self) -> ::std::option::Option<&str> {
        self.state_change_error.as_deref()
    }
    /// <p>Information about the associated gateway.</p>
    pub fn associated_gateway(&self) -> ::std::option::Option<&crate::types::AssociatedGateway> {
        self.associated_gateway.as_ref()
    }
    /// <p>The ID of the Direct Connect gateway association.</p>
    pub fn association_id(&self) -> ::std::option::Option<&str> {
        self.association_id.as_deref()
    }
    /// <p>The Amazon VPC prefixes to advertise to the Direct Connect gateway.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allowed_prefixes_to_direct_connect_gateway.is_none()`.
    pub fn allowed_prefixes_to_direct_connect_gateway(&self) -> &[crate::types::RouteFilterPrefix] {
        self.allowed_prefixes_to_direct_connect_gateway.as_deref().unwrap_or_default()
    }
    /// <p>The ID of the virtual private gateway. Applies only to private virtual interfaces.</p>
    pub fn virtual_gateway_id(&self) -> ::std::option::Option<&str> {
        self.virtual_gateway_id.as_deref()
    }
    /// <p>The Amazon Web Services Region where the virtual private gateway is located.</p>
    pub fn virtual_gateway_region(&self) -> ::std::option::Option<&str> {
        self.virtual_gateway_region.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the virtual private gateway.</p>
    pub fn virtual_gateway_owner_account(&self) -> ::std::option::Option<&str> {
        self.virtual_gateway_owner_account.as_deref()
    }
}
impl DirectConnectGatewayAssociation {
    /// Creates a new builder-style object to manufacture [`DirectConnectGatewayAssociation`](crate::types::DirectConnectGatewayAssociation).
    pub fn builder() -> crate::types::builders::DirectConnectGatewayAssociationBuilder {
        crate::types::builders::DirectConnectGatewayAssociationBuilder::default()
    }
}

/// A builder for [`DirectConnectGatewayAssociation`](crate::types::DirectConnectGatewayAssociation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DirectConnectGatewayAssociationBuilder {
    pub(crate) direct_connect_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) direct_connect_gateway_owner_account: ::std::option::Option<::std::string::String>,
    pub(crate) association_state: ::std::option::Option<crate::types::DirectConnectGatewayAssociationState>,
    pub(crate) state_change_error: ::std::option::Option<::std::string::String>,
    pub(crate) associated_gateway: ::std::option::Option<crate::types::AssociatedGateway>,
    pub(crate) association_id: ::std::option::Option<::std::string::String>,
    pub(crate) allowed_prefixes_to_direct_connect_gateway: ::std::option::Option<::std::vec::Vec<crate::types::RouteFilterPrefix>>,
    pub(crate) virtual_gateway_id: ::std::option::Option<::std::string::String>,
    pub(crate) virtual_gateway_region: ::std::option::Option<::std::string::String>,
    pub(crate) virtual_gateway_owner_account: ::std::option::Option<::std::string::String>,
}
impl DirectConnectGatewayAssociationBuilder {
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn direct_connect_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.direct_connect_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn set_direct_connect_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.direct_connect_gateway_id = input;
        self
    }
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn get_direct_connect_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.direct_connect_gateway_id
    }
    /// <p>The ID of the Amazon Web Services account that owns the associated gateway.</p>
    pub fn direct_connect_gateway_owner_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.direct_connect_gateway_owner_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the associated gateway.</p>
    pub fn set_direct_connect_gateway_owner_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.direct_connect_gateway_owner_account = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the associated gateway.</p>
    pub fn get_direct_connect_gateway_owner_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.direct_connect_gateway_owner_account
    }
    /// <p>The state of the association. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>associating</code>: The initial state after calling <code>CreateDirectConnectGatewayAssociation</code>.</p> </li>
    /// <li> <p> <code>associated</code>: The Direct Connect gateway and virtual private gateway or transit gateway are successfully associated and ready to pass traffic.</p> </li>
    /// <li> <p> <code>disassociating</code>: The initial state after calling <code>DeleteDirectConnectGatewayAssociation</code>.</p> </li>
    /// <li> <p> <code>disassociated</code>: The virtual private gateway or transit gateway is disassociated from the Direct Connect gateway. Traffic flow between the Direct Connect gateway and virtual private gateway or transit gateway is stopped.</p> </li>
    /// <li> <p> <code>updating</code>: The CIDR blocks for the virtual private gateway or transit gateway are currently being updated. This could be new CIDR blocks added or current CIDR blocks removed.</p> </li>
    /// </ul>
    pub fn association_state(mut self, input: crate::types::DirectConnectGatewayAssociationState) -> Self {
        self.association_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the association. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>associating</code>: The initial state after calling <code>CreateDirectConnectGatewayAssociation</code>.</p> </li>
    /// <li> <p> <code>associated</code>: The Direct Connect gateway and virtual private gateway or transit gateway are successfully associated and ready to pass traffic.</p> </li>
    /// <li> <p> <code>disassociating</code>: The initial state after calling <code>DeleteDirectConnectGatewayAssociation</code>.</p> </li>
    /// <li> <p> <code>disassociated</code>: The virtual private gateway or transit gateway is disassociated from the Direct Connect gateway. Traffic flow between the Direct Connect gateway and virtual private gateway or transit gateway is stopped.</p> </li>
    /// <li> <p> <code>updating</code>: The CIDR blocks for the virtual private gateway or transit gateway are currently being updated. This could be new CIDR blocks added or current CIDR blocks removed.</p> </li>
    /// </ul>
    pub fn set_association_state(mut self, input: ::std::option::Option<crate::types::DirectConnectGatewayAssociationState>) -> Self {
        self.association_state = input;
        self
    }
    /// <p>The state of the association. The following are the possible values:</p>
    /// <ul>
    /// <li> <p> <code>associating</code>: The initial state after calling <code>CreateDirectConnectGatewayAssociation</code>.</p> </li>
    /// <li> <p> <code>associated</code>: The Direct Connect gateway and virtual private gateway or transit gateway are successfully associated and ready to pass traffic.</p> </li>
    /// <li> <p> <code>disassociating</code>: The initial state after calling <code>DeleteDirectConnectGatewayAssociation</code>.</p> </li>
    /// <li> <p> <code>disassociated</code>: The virtual private gateway or transit gateway is disassociated from the Direct Connect gateway. Traffic flow between the Direct Connect gateway and virtual private gateway or transit gateway is stopped.</p> </li>
    /// <li> <p> <code>updating</code>: The CIDR blocks for the virtual private gateway or transit gateway are currently being updated. This could be new CIDR blocks added or current CIDR blocks removed.</p> </li>
    /// </ul>
    pub fn get_association_state(&self) -> &::std::option::Option<crate::types::DirectConnectGatewayAssociationState> {
        &self.association_state
    }
    /// <p>The error message if the state of an object failed to advance.</p>
    pub fn state_change_error(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.state_change_error = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message if the state of an object failed to advance.</p>
    pub fn set_state_change_error(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.state_change_error = input;
        self
    }
    /// <p>The error message if the state of an object failed to advance.</p>
    pub fn get_state_change_error(&self) -> &::std::option::Option<::std::string::String> {
        &self.state_change_error
    }
    /// <p>Information about the associated gateway.</p>
    pub fn associated_gateway(mut self, input: crate::types::AssociatedGateway) -> Self {
        self.associated_gateway = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the associated gateway.</p>
    pub fn set_associated_gateway(mut self, input: ::std::option::Option<crate::types::AssociatedGateway>) -> Self {
        self.associated_gateway = input;
        self
    }
    /// <p>Information about the associated gateway.</p>
    pub fn get_associated_gateway(&self) -> &::std::option::Option<crate::types::AssociatedGateway> {
        &self.associated_gateway
    }
    /// <p>The ID of the Direct Connect gateway association.</p>
    pub fn association_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Direct Connect gateway association.</p>
    pub fn set_association_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_id = input;
        self
    }
    /// <p>The ID of the Direct Connect gateway association.</p>
    pub fn get_association_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_id
    }
    /// Appends an item to `allowed_prefixes_to_direct_connect_gateway`.
    ///
    /// To override the contents of this collection use [`set_allowed_prefixes_to_direct_connect_gateway`](Self::set_allowed_prefixes_to_direct_connect_gateway).
    ///
    /// <p>The Amazon VPC prefixes to advertise to the Direct Connect gateway.</p>
    pub fn allowed_prefixes_to_direct_connect_gateway(mut self, input: crate::types::RouteFilterPrefix) -> Self {
        let mut v = self.allowed_prefixes_to_direct_connect_gateway.unwrap_or_default();
        v.push(input);
        self.allowed_prefixes_to_direct_connect_gateway = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon VPC prefixes to advertise to the Direct Connect gateway.</p>
    pub fn set_allowed_prefixes_to_direct_connect_gateway(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::RouteFilterPrefix>>,
    ) -> Self {
        self.allowed_prefixes_to_direct_connect_gateway = input;
        self
    }
    /// <p>The Amazon VPC prefixes to advertise to the Direct Connect gateway.</p>
    pub fn get_allowed_prefixes_to_direct_connect_gateway(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RouteFilterPrefix>> {
        &self.allowed_prefixes_to_direct_connect_gateway
    }
    /// <p>The ID of the virtual private gateway. Applies only to private virtual interfaces.</p>
    pub fn virtual_gateway_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.virtual_gateway_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the virtual private gateway. Applies only to private virtual interfaces.</p>
    pub fn set_virtual_gateway_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.virtual_gateway_id = input;
        self
    }
    /// <p>The ID of the virtual private gateway. Applies only to private virtual interfaces.</p>
    pub fn get_virtual_gateway_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.virtual_gateway_id
    }
    /// <p>The Amazon Web Services Region where the virtual private gateway is located.</p>
    pub fn virtual_gateway_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.virtual_gateway_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region where the virtual private gateway is located.</p>
    pub fn set_virtual_gateway_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.virtual_gateway_region = input;
        self
    }
    /// <p>The Amazon Web Services Region where the virtual private gateway is located.</p>
    pub fn get_virtual_gateway_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.virtual_gateway_region
    }
    /// <p>The ID of the Amazon Web Services account that owns the virtual private gateway.</p>
    pub fn virtual_gateway_owner_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.virtual_gateway_owner_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the virtual private gateway.</p>
    pub fn set_virtual_gateway_owner_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.virtual_gateway_owner_account = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the virtual private gateway.</p>
    pub fn get_virtual_gateway_owner_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.virtual_gateway_owner_account
    }
    /// Consumes the builder and constructs a [`DirectConnectGatewayAssociation`](crate::types::DirectConnectGatewayAssociation).
    pub fn build(self) -> crate::types::DirectConnectGatewayAssociation {
        crate::types::DirectConnectGatewayAssociation {
            direct_connect_gateway_id: self.direct_connect_gateway_id,
            direct_connect_gateway_owner_account: self.direct_connect_gateway_owner_account,
            association_state: self.association_state,
            state_change_error: self.state_change_error,
            associated_gateway: self.associated_gateway,
            association_id: self.association_id,
            allowed_prefixes_to_direct_connect_gateway: self.allowed_prefixes_to_direct_connect_gateway,
            virtual_gateway_id: self.virtual_gateway_id,
            virtual_gateway_region: self.virtual_gateway_region,
            virtual_gateway_owner_account: self.virtual_gateway_owner_account,
        }
    }
}
