// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a transit virtual interface to be provisioned on a connection.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NewTransitVirtualInterfaceAllocation {
    /// <p>The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).</p>
    #[doc(hidden)]
    pub virtual_interface_name: std::option::Option<std::string::String>,
    /// <p>The ID of the VLAN.</p>
    #[doc(hidden)]
    pub vlan: i32,
    /// <p>The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.</p>
    /// <p>The valid values are 1-2147483647.</p>
    #[doc(hidden)]
    pub asn: i32,
    /// <p>The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500. </p>
    #[doc(hidden)]
    pub mtu: std::option::Option<i32>,
    /// <p>The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.</p>
    #[doc(hidden)]
    pub auth_key: std::option::Option<std::string::String>,
    /// <p>The IP address assigned to the Amazon interface.</p>
    #[doc(hidden)]
    pub amazon_address: std::option::Option<std::string::String>,
    /// <p>The IP address assigned to the customer interface.</p>
    #[doc(hidden)]
    pub customer_address: std::option::Option<std::string::String>,
    /// <p>The address family for the BGP peer.</p>
    #[doc(hidden)]
    pub address_family: std::option::Option<crate::types::AddressFamily>,
    /// <p>The tags associated with the transitive virtual interface.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl NewTransitVirtualInterfaceAllocation {
    /// <p>The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).</p>
    pub fn virtual_interface_name(&self) -> std::option::Option<&str> {
        self.virtual_interface_name.as_deref()
    }
    /// <p>The ID of the VLAN.</p>
    pub fn vlan(&self) -> i32 {
        self.vlan
    }
    /// <p>The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.</p>
    /// <p>The valid values are 1-2147483647.</p>
    pub fn asn(&self) -> i32 {
        self.asn
    }
    /// <p>The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500. </p>
    pub fn mtu(&self) -> std::option::Option<i32> {
        self.mtu
    }
    /// <p>The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.</p>
    pub fn auth_key(&self) -> std::option::Option<&str> {
        self.auth_key.as_deref()
    }
    /// <p>The IP address assigned to the Amazon interface.</p>
    pub fn amazon_address(&self) -> std::option::Option<&str> {
        self.amazon_address.as_deref()
    }
    /// <p>The IP address assigned to the customer interface.</p>
    pub fn customer_address(&self) -> std::option::Option<&str> {
        self.customer_address.as_deref()
    }
    /// <p>The address family for the BGP peer.</p>
    pub fn address_family(&self) -> std::option::Option<&crate::types::AddressFamily> {
        self.address_family.as_ref()
    }
    /// <p>The tags associated with the transitive virtual interface.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl NewTransitVirtualInterfaceAllocation {
    /// Creates a new builder-style object to manufacture [`NewTransitVirtualInterfaceAllocation`](crate::types::NewTransitVirtualInterfaceAllocation).
    pub fn builder() -> crate::types::builders::NewTransitVirtualInterfaceAllocationBuilder {
        crate::types::builders::NewTransitVirtualInterfaceAllocationBuilder::default()
    }
}

/// A builder for [`NewTransitVirtualInterfaceAllocation`](crate::types::NewTransitVirtualInterfaceAllocation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NewTransitVirtualInterfaceAllocationBuilder {
    pub(crate) virtual_interface_name: std::option::Option<std::string::String>,
    pub(crate) vlan: std::option::Option<i32>,
    pub(crate) asn: std::option::Option<i32>,
    pub(crate) mtu: std::option::Option<i32>,
    pub(crate) auth_key: std::option::Option<std::string::String>,
    pub(crate) amazon_address: std::option::Option<std::string::String>,
    pub(crate) customer_address: std::option::Option<std::string::String>,
    pub(crate) address_family: std::option::Option<crate::types::AddressFamily>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl NewTransitVirtualInterfaceAllocationBuilder {
    /// <p>The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).</p>
    pub fn virtual_interface_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.virtual_interface_name = Some(input.into());
        self
    }
    /// <p>The name of the virtual interface assigned by the customer network. The name has a maximum of 100 characters. The following are valid characters: a-z, 0-9 and a hyphen (-).</p>
    pub fn set_virtual_interface_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.virtual_interface_name = input;
        self
    }
    /// <p>The ID of the VLAN.</p>
    pub fn vlan(mut self, input: i32) -> Self {
        self.vlan = Some(input);
        self
    }
    /// <p>The ID of the VLAN.</p>
    pub fn set_vlan(mut self, input: std::option::Option<i32>) -> Self {
        self.vlan = input;
        self
    }
    /// <p>The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.</p>
    /// <p>The valid values are 1-2147483647.</p>
    pub fn asn(mut self, input: i32) -> Self {
        self.asn = Some(input);
        self
    }
    /// <p>The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.</p>
    /// <p>The valid values are 1-2147483647.</p>
    pub fn set_asn(mut self, input: std::option::Option<i32>) -> Self {
        self.asn = input;
        self
    }
    /// <p>The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500. </p>
    pub fn mtu(mut self, input: i32) -> Self {
        self.mtu = Some(input);
        self
    }
    /// <p>The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500. </p>
    pub fn set_mtu(mut self, input: std::option::Option<i32>) -> Self {
        self.mtu = input;
        self
    }
    /// <p>The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.</p>
    pub fn auth_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.auth_key = Some(input.into());
        self
    }
    /// <p>The authentication key for BGP configuration. This string has a minimum length of 6 characters and and a maximun lenth of 80 characters.</p>
    pub fn set_auth_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.auth_key = input;
        self
    }
    /// <p>The IP address assigned to the Amazon interface.</p>
    pub fn amazon_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.amazon_address = Some(input.into());
        self
    }
    /// <p>The IP address assigned to the Amazon interface.</p>
    pub fn set_amazon_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.amazon_address = input;
        self
    }
    /// <p>The IP address assigned to the customer interface.</p>
    pub fn customer_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.customer_address = Some(input.into());
        self
    }
    /// <p>The IP address assigned to the customer interface.</p>
    pub fn set_customer_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.customer_address = input;
        self
    }
    /// <p>The address family for the BGP peer.</p>
    pub fn address_family(mut self, input: crate::types::AddressFamily) -> Self {
        self.address_family = Some(input);
        self
    }
    /// <p>The address family for the BGP peer.</p>
    pub fn set_address_family(
        mut self,
        input: std::option::Option<crate::types::AddressFamily>,
    ) -> Self {
        self.address_family = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags associated with the transitive virtual interface.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags associated with the transitive virtual interface.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`NewTransitVirtualInterfaceAllocation`](crate::types::NewTransitVirtualInterfaceAllocation).
    pub fn build(self) -> crate::types::NewTransitVirtualInterfaceAllocation {
        crate::types::NewTransitVirtualInterfaceAllocation {
            virtual_interface_name: self.virtual_interface_name,
            vlan: self.vlan.unwrap_or_default(),
            asn: self.asn.unwrap_or_default(),
            mtu: self.mtu,
            auth_key: self.auth_key,
            amazon_address: self.amazon_address,
            customer_address: self.customer_address,
            address_family: self.address_family,
            tags: self.tags,
        }
    }
}
