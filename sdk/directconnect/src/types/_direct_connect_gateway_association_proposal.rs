// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the proposal request to attach a virtual private gateway to a Direct Connect gateway. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DirectConnectGatewayAssociationProposal {
    /// <p>The ID of the association proposal.</p>
    #[doc(hidden)]
    pub proposal_id: std::option::Option<std::string::String>,
    /// <p>The ID of the Direct Connect gateway.</p>
    #[doc(hidden)]
    pub direct_connect_gateway_id: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon Web Services account that owns the Direct Connect gateway.</p>
    #[doc(hidden)]
    pub direct_connect_gateway_owner_account: std::option::Option<std::string::String>,
    /// <p>The state of the proposal. The following are possible values:</p>
    /// <ul>
    /// <li> <p> <code>accepted</code>: The proposal has been accepted. The Direct Connect gateway association is available to use in this state.</p> </li>
    /// <li> <p> <code>deleted</code>: The proposal has been deleted by the owner that made the proposal. The Direct Connect gateway association cannot be used in this state.</p> </li>
    /// <li> <p> <code>requested</code>: The proposal has been requested. The Direct Connect gateway association cannot be used in this state.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub proposal_state:
        std::option::Option<crate::types::DirectConnectGatewayAssociationProposalState>,
    /// <p>Information about the associated gateway.</p>
    #[doc(hidden)]
    pub associated_gateway: std::option::Option<crate::types::AssociatedGateway>,
    /// <p>The existing Amazon VPC prefixes advertised to the Direct Connect gateway.</p>
    #[doc(hidden)]
    pub existing_allowed_prefixes_to_direct_connect_gateway:
        std::option::Option<std::vec::Vec<crate::types::RouteFilterPrefix>>,
    /// <p>The Amazon VPC prefixes to advertise to the Direct Connect gateway.</p>
    #[doc(hidden)]
    pub requested_allowed_prefixes_to_direct_connect_gateway:
        std::option::Option<std::vec::Vec<crate::types::RouteFilterPrefix>>,
}
impl DirectConnectGatewayAssociationProposal {
    /// <p>The ID of the association proposal.</p>
    pub fn proposal_id(&self) -> std::option::Option<&str> {
        self.proposal_id.as_deref()
    }
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn direct_connect_gateway_id(&self) -> std::option::Option<&str> {
        self.direct_connect_gateway_id.as_deref()
    }
    /// <p>The ID of the Amazon Web Services account that owns the Direct Connect gateway.</p>
    pub fn direct_connect_gateway_owner_account(&self) -> std::option::Option<&str> {
        self.direct_connect_gateway_owner_account.as_deref()
    }
    /// <p>The state of the proposal. The following are possible values:</p>
    /// <ul>
    /// <li> <p> <code>accepted</code>: The proposal has been accepted. The Direct Connect gateway association is available to use in this state.</p> </li>
    /// <li> <p> <code>deleted</code>: The proposal has been deleted by the owner that made the proposal. The Direct Connect gateway association cannot be used in this state.</p> </li>
    /// <li> <p> <code>requested</code>: The proposal has been requested. The Direct Connect gateway association cannot be used in this state.</p> </li>
    /// </ul>
    pub fn proposal_state(
        &self,
    ) -> std::option::Option<&crate::types::DirectConnectGatewayAssociationProposalState> {
        self.proposal_state.as_ref()
    }
    /// <p>Information about the associated gateway.</p>
    pub fn associated_gateway(&self) -> std::option::Option<&crate::types::AssociatedGateway> {
        self.associated_gateway.as_ref()
    }
    /// <p>The existing Amazon VPC prefixes advertised to the Direct Connect gateway.</p>
    pub fn existing_allowed_prefixes_to_direct_connect_gateway(
        &self,
    ) -> std::option::Option<&[crate::types::RouteFilterPrefix]> {
        self.existing_allowed_prefixes_to_direct_connect_gateway
            .as_deref()
    }
    /// <p>The Amazon VPC prefixes to advertise to the Direct Connect gateway.</p>
    pub fn requested_allowed_prefixes_to_direct_connect_gateway(
        &self,
    ) -> std::option::Option<&[crate::types::RouteFilterPrefix]> {
        self.requested_allowed_prefixes_to_direct_connect_gateway
            .as_deref()
    }
}
impl DirectConnectGatewayAssociationProposal {
    /// Creates a new builder-style object to manufacture [`DirectConnectGatewayAssociationProposal`](crate::types::DirectConnectGatewayAssociationProposal).
    pub fn builder() -> crate::types::builders::DirectConnectGatewayAssociationProposalBuilder {
        crate::types::builders::DirectConnectGatewayAssociationProposalBuilder::default()
    }
}

/// A builder for [`DirectConnectGatewayAssociationProposal`](crate::types::DirectConnectGatewayAssociationProposal).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DirectConnectGatewayAssociationProposalBuilder {
    pub(crate) proposal_id: std::option::Option<std::string::String>,
    pub(crate) direct_connect_gateway_id: std::option::Option<std::string::String>,
    pub(crate) direct_connect_gateway_owner_account: std::option::Option<std::string::String>,
    pub(crate) proposal_state:
        std::option::Option<crate::types::DirectConnectGatewayAssociationProposalState>,
    pub(crate) associated_gateway: std::option::Option<crate::types::AssociatedGateway>,
    pub(crate) existing_allowed_prefixes_to_direct_connect_gateway:
        std::option::Option<std::vec::Vec<crate::types::RouteFilterPrefix>>,
    pub(crate) requested_allowed_prefixes_to_direct_connect_gateway:
        std::option::Option<std::vec::Vec<crate::types::RouteFilterPrefix>>,
}
impl DirectConnectGatewayAssociationProposalBuilder {
    /// <p>The ID of the association proposal.</p>
    pub fn proposal_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.proposal_id = Some(input.into());
        self
    }
    /// <p>The ID of the association proposal.</p>
    pub fn set_proposal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.proposal_id = input;
        self
    }
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn direct_connect_gateway_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.direct_connect_gateway_id = Some(input.into());
        self
    }
    /// <p>The ID of the Direct Connect gateway.</p>
    pub fn set_direct_connect_gateway_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.direct_connect_gateway_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the Direct Connect gateway.</p>
    pub fn direct_connect_gateway_owner_account(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.direct_connect_gateway_owner_account = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services account that owns the Direct Connect gateway.</p>
    pub fn set_direct_connect_gateway_owner_account(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.direct_connect_gateway_owner_account = input;
        self
    }
    /// <p>The state of the proposal. The following are possible values:</p>
    /// <ul>
    /// <li> <p> <code>accepted</code>: The proposal has been accepted. The Direct Connect gateway association is available to use in this state.</p> </li>
    /// <li> <p> <code>deleted</code>: The proposal has been deleted by the owner that made the proposal. The Direct Connect gateway association cannot be used in this state.</p> </li>
    /// <li> <p> <code>requested</code>: The proposal has been requested. The Direct Connect gateway association cannot be used in this state.</p> </li>
    /// </ul>
    pub fn proposal_state(
        mut self,
        input: crate::types::DirectConnectGatewayAssociationProposalState,
    ) -> Self {
        self.proposal_state = Some(input);
        self
    }
    /// <p>The state of the proposal. The following are possible values:</p>
    /// <ul>
    /// <li> <p> <code>accepted</code>: The proposal has been accepted. The Direct Connect gateway association is available to use in this state.</p> </li>
    /// <li> <p> <code>deleted</code>: The proposal has been deleted by the owner that made the proposal. The Direct Connect gateway association cannot be used in this state.</p> </li>
    /// <li> <p> <code>requested</code>: The proposal has been requested. The Direct Connect gateway association cannot be used in this state.</p> </li>
    /// </ul>
    pub fn set_proposal_state(
        mut self,
        input: std::option::Option<crate::types::DirectConnectGatewayAssociationProposalState>,
    ) -> Self {
        self.proposal_state = input;
        self
    }
    /// <p>Information about the associated gateway.</p>
    pub fn associated_gateway(mut self, input: crate::types::AssociatedGateway) -> Self {
        self.associated_gateway = Some(input);
        self
    }
    /// <p>Information about the associated gateway.</p>
    pub fn set_associated_gateway(
        mut self,
        input: std::option::Option<crate::types::AssociatedGateway>,
    ) -> Self {
        self.associated_gateway = input;
        self
    }
    /// Appends an item to `existing_allowed_prefixes_to_direct_connect_gateway`.
    ///
    /// To override the contents of this collection use [`set_existing_allowed_prefixes_to_direct_connect_gateway`](Self::set_existing_allowed_prefixes_to_direct_connect_gateway).
    ///
    /// <p>The existing Amazon VPC prefixes advertised to the Direct Connect gateway.</p>
    pub fn existing_allowed_prefixes_to_direct_connect_gateway(
        mut self,
        input: crate::types::RouteFilterPrefix,
    ) -> Self {
        let mut v = self
            .existing_allowed_prefixes_to_direct_connect_gateway
            .unwrap_or_default();
        v.push(input);
        self.existing_allowed_prefixes_to_direct_connect_gateway = Some(v);
        self
    }
    /// <p>The existing Amazon VPC prefixes advertised to the Direct Connect gateway.</p>
    pub fn set_existing_allowed_prefixes_to_direct_connect_gateway(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RouteFilterPrefix>>,
    ) -> Self {
        self.existing_allowed_prefixes_to_direct_connect_gateway = input;
        self
    }
    /// Appends an item to `requested_allowed_prefixes_to_direct_connect_gateway`.
    ///
    /// To override the contents of this collection use [`set_requested_allowed_prefixes_to_direct_connect_gateway`](Self::set_requested_allowed_prefixes_to_direct_connect_gateway).
    ///
    /// <p>The Amazon VPC prefixes to advertise to the Direct Connect gateway.</p>
    pub fn requested_allowed_prefixes_to_direct_connect_gateway(
        mut self,
        input: crate::types::RouteFilterPrefix,
    ) -> Self {
        let mut v = self
            .requested_allowed_prefixes_to_direct_connect_gateway
            .unwrap_or_default();
        v.push(input);
        self.requested_allowed_prefixes_to_direct_connect_gateway = Some(v);
        self
    }
    /// <p>The Amazon VPC prefixes to advertise to the Direct Connect gateway.</p>
    pub fn set_requested_allowed_prefixes_to_direct_connect_gateway(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RouteFilterPrefix>>,
    ) -> Self {
        self.requested_allowed_prefixes_to_direct_connect_gateway = input;
        self
    }
    /// Consumes the builder and constructs a [`DirectConnectGatewayAssociationProposal`](crate::types::DirectConnectGatewayAssociationProposal).
    pub fn build(self) -> crate::types::DirectConnectGatewayAssociationProposal {
        crate::types::DirectConnectGatewayAssociationProposal {
            proposal_id: self.proposal_id,
            direct_connect_gateway_id: self.direct_connect_gateway_id,
            direct_connect_gateway_owner_account: self.direct_connect_gateway_owner_account,
            proposal_state: self.proposal_state,
            associated_gateway: self.associated_gateway,
            existing_allowed_prefixes_to_direct_connect_gateway: self
                .existing_allowed_prefixes_to_direct_connect_gateway,
            requested_allowed_prefixes_to_direct_connect_gateway: self
                .requested_allowed_prefixes_to_direct_connect_gateway,
        }
    }
}
