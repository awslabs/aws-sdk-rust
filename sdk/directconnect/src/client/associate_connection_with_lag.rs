// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AssociateConnectionWithLag`](crate::operation::associate_connection_with_lag::builders::AssociateConnectionWithLagFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connection_id(impl Into<String>)`](crate::operation::associate_connection_with_lag::builders::AssociateConnectionWithLagFluentBuilder::connection_id) / [`set_connection_id(Option<String>)`](crate::operation::associate_connection_with_lag::builders::AssociateConnectionWithLagFluentBuilder::set_connection_id):<br>required: **true**<br><p>The ID of the connection.</p><br>
    ///   - [`lag_id(impl Into<String>)`](crate::operation::associate_connection_with_lag::builders::AssociateConnectionWithLagFluentBuilder::lag_id) / [`set_lag_id(Option<String>)`](crate::operation::associate_connection_with_lag::builders::AssociateConnectionWithLagFluentBuilder::set_lag_id):<br>required: **true**<br><p>The ID of the LAG with which to associate the connection.</p><br>
    /// - On success, responds with [`AssociateConnectionWithLagOutput`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput) with field(s):
    ///   - [`owner_account(Option<String>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::owner_account): <p>The ID of the Amazon Web Services account that owns the connection.</p>
    ///   - [`connection_id(Option<String>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::connection_id): <p>The ID of the connection.</p>
    ///   - [`connection_name(Option<String>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::connection_name): <p>The name of the connection.</p>
    ///   - [`connection_state(Option<ConnectionState>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::connection_state): <p>The state of the connection. The following are the possible values:</p>  <ul>   <li> <p> <code>ordering</code>: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.</p> </li>   <li> <p> <code>requested</code>: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.</p> </li>   <li> <p> <code>pending</code>: The connection has been approved and is being initialized.</p> </li>   <li> <p> <code>available</code>: The network link is up and the connection is ready for use.</p> </li>   <li> <p> <code>down</code>: The network link is down.</p> </li>   <li> <p> <code>deleting</code>: The connection is being deleted.</p> </li>   <li> <p> <code>deleted</code>: The connection has been deleted.</p> </li>   <li> <p> <code>rejected</code>: A hosted connection in the <code>ordering</code> state enters the <code>rejected</code> state if it is deleted by the customer.</p> </li>   <li> <p> <code>unknown</code>: The state of the connection is not available.</p> </li>  </ul>
    ///   - [`region(Option<String>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::region): <p>The Amazon Web Services Region where the connection is located.</p>
    ///   - [`location(Option<String>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::location): <p>The location of the connection.</p>
    ///   - [`bandwidth(Option<String>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::bandwidth): <p>The bandwidth of the connection.</p>
    ///   - [`vlan(i32)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::vlan): <p>The ID of the VLAN.</p>
    ///   - [`partner_name(Option<String>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::partner_name): <p>The name of the Direct Connect service provider associated with the connection.</p>
    ///   - [`loa_issue_time(Option<DateTime>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::loa_issue_time): <p>The time of the most recent call to <code>DescribeLoa</code> for this connection.</p>
    ///   - [`lag_id(Option<String>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::lag_id): <p>The ID of the LAG.</p>
    ///   - [`aws_device(Option<String>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::aws_device): <p>The Direct Connect endpoint on which the physical connection terminates.</p>
    ///   - [`jumbo_frame_capable(Option<bool>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::jumbo_frame_capable): <p>Indicates whether jumbo frames are supported.</p>
    ///   - [`aws_device_v2(Option<String>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::aws_device_v2): <p>The Direct Connect endpoint that terminates the physical connection.</p>
    ///   - [`aws_logical_device_id(Option<String>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::aws_logical_device_id): <p>The Direct Connect endpoint that terminates the logical connection. This device might be different than the device that terminates the physical connection.</p>
    ///   - [`has_logical_redundancy(Option<HasLogicalRedundancy>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::has_logical_redundancy): <p>Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).</p>
    ///   - [`tags(Option<Vec::<Tag>>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::tags): <p>The tags associated with the connection.</p>
    ///   - [`provider_name(Option<String>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::provider_name): <p>The name of the service provider associated with the connection.</p>
    ///   - [`mac_sec_capable(Option<bool>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::mac_sec_capable): <p>Indicates whether the connection supports MAC Security (MACsec).</p>
    ///   - [`port_encryption_status(Option<String>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::port_encryption_status): <p>The MAC Security (MACsec) port link status of the connection.</p>  <p>The valid values are <code>Encryption Up</code>, which means that there is an active Connection Key Name, or <code>Encryption Down</code>.</p>
    ///   - [`encryption_mode(Option<String>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::encryption_mode): <p>The MAC Security (MACsec) connection encryption mode.</p>  <p>The valid values are <code>no_encrypt</code>, <code>should_encrypt</code>, and <code>must_encrypt</code>.</p>
    ///   - [`mac_sec_keys(Option<Vec::<MacSecKey>>)`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagOutput::mac_sec_keys): <p>The MAC Security (MACsec) security keys associated with the connection.</p>
    /// - On failure, responds with [`SdkError<AssociateConnectionWithLagError>`](crate::operation::associate_connection_with_lag::AssociateConnectionWithLagError)
    pub fn associate_connection_with_lag(
        &self,
    ) -> crate::operation::associate_connection_with_lag::builders::AssociateConnectionWithLagFluentBuilder {
        crate::operation::associate_connection_with_lag::builders::AssociateConnectionWithLagFluentBuilder::new(self.handle.clone())
    }
}
