// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateLag`](crate::client::fluent_builders::CreateLag) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`number_of_connections(i32)`](crate::client::fluent_builders::CreateLag::number_of_connections) / [`set_number_of_connections(i32)`](crate::client::fluent_builders::CreateLag::set_number_of_connections): <p>The number of physical dedicated connections initially provisioned and bundled by the LAG.</p>
    ///   - [`location(impl Into<String>)`](crate::client::fluent_builders::CreateLag::location) / [`set_location(Option<String>)`](crate::client::fluent_builders::CreateLag::set_location): <p>The location for the LAG.</p>
    ///   - [`connections_bandwidth(impl Into<String>)`](crate::client::fluent_builders::CreateLag::connections_bandwidth) / [`set_connections_bandwidth(Option<String>)`](crate::client::fluent_builders::CreateLag::set_connections_bandwidth): <p>The bandwidth of the individual physical dedicated connections bundled by the LAG. The possible values are 1Gbps and 10Gbps. </p>
    ///   - [`lag_name(impl Into<String>)`](crate::client::fluent_builders::CreateLag::lag_name) / [`set_lag_name(Option<String>)`](crate::client::fluent_builders::CreateLag::set_lag_name): <p>The name of the LAG.</p>
    ///   - [`connection_id(impl Into<String>)`](crate::client::fluent_builders::CreateLag::connection_id) / [`set_connection_id(Option<String>)`](crate::client::fluent_builders::CreateLag::set_connection_id): <p>The ID of an existing dedicated connection to migrate to the LAG.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateLag::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateLag::set_tags): <p>The tags to associate with the LAG.</p>
    ///   - [`child_connection_tags(Vec<Tag>)`](crate::client::fluent_builders::CreateLag::child_connection_tags) / [`set_child_connection_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateLag::set_child_connection_tags): <p>The tags to associate with the automtically created LAGs.</p>
    ///   - [`provider_name(impl Into<String>)`](crate::client::fluent_builders::CreateLag::provider_name) / [`set_provider_name(Option<String>)`](crate::client::fluent_builders::CreateLag::set_provider_name): <p>The name of the service provider associated with the LAG.</p>
    ///   - [`request_mac_sec(bool)`](crate::client::fluent_builders::CreateLag::request_mac_sec) / [`set_request_mac_sec(Option<bool>)`](crate::client::fluent_builders::CreateLag::set_request_mac_sec): <p>Indicates whether the connection will support MAC Security (MACsec).</p> <note>   <p>All connections in the LAG must be capable of supporting MAC Security (MACsec). For information about MAC Security (MACsec) prerequisties, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/direct-connect-mac-sec-getting-started.html#mac-sec-prerequisites">MACsec prerequisties</a> in the <i>Direct Connect User Guide</i>.</p>  </note>
    /// - On success, responds with [`CreateLagOutput`](crate::output::CreateLagOutput) with field(s):
    ///   - [`connections_bandwidth(Option<String>)`](crate::output::CreateLagOutput::connections_bandwidth): <p>The individual bandwidth of the physical connections bundled by the LAG. The possible values are 1Gbps and 10Gbps. </p>
    ///   - [`number_of_connections(i32)`](crate::output::CreateLagOutput::number_of_connections): <p>The number of physical dedicated connections bundled by the LAG, up to a maximum of 10.</p>
    ///   - [`lag_id(Option<String>)`](crate::output::CreateLagOutput::lag_id): <p>The ID of the LAG.</p>
    ///   - [`owner_account(Option<String>)`](crate::output::CreateLagOutput::owner_account): <p>The ID of the Amazon Web Services account that owns the LAG.</p>
    ///   - [`lag_name(Option<String>)`](crate::output::CreateLagOutput::lag_name): <p>The name of the LAG.</p>
    ///   - [`lag_state(Option<LagState>)`](crate::output::CreateLagOutput::lag_state): <p>The state of the LAG. The following are the possible values:</p>  <ul>   <li> <p> <code>requested</code>: The initial state of a LAG. The LAG stays in the requested state until the Letter of Authorization (LOA) is available.</p> </li>   <li> <p> <code>pending</code>: The LAG has been approved and is being initialized.</p> </li>   <li> <p> <code>available</code>: The network link is established and the LAG is ready for use.</p> </li>   <li> <p> <code>down</code>: The network link is down.</p> </li>   <li> <p> <code>deleting</code>: The LAG is being deleted.</p> </li>   <li> <p> <code>deleted</code>: The LAG is deleted.</p> </li>   <li> <p> <code>unknown</code>: The state of the LAG is not available.</p> </li>  </ul>
    ///   - [`location(Option<String>)`](crate::output::CreateLagOutput::location): <p>The location of the LAG.</p>
    ///   - [`region(Option<String>)`](crate::output::CreateLagOutput::region): <p>The Amazon Web Services Region where the connection is located.</p>
    ///   - [`minimum_links(i32)`](crate::output::CreateLagOutput::minimum_links): <p>The minimum number of physical dedicated connections that must be operational for the LAG itself to be operational.</p>
    ///   - [`aws_device(Option<String>)`](crate::output::CreateLagOutput::aws_device): <p>The Direct Connect endpoint that hosts the LAG.</p>
    ///   - [`aws_device_v2(Option<String>)`](crate::output::CreateLagOutput::aws_device_v2): <p>The Direct Connect endpoint that hosts the LAG.</p>
    ///   - [`aws_logical_device_id(Option<String>)`](crate::output::CreateLagOutput::aws_logical_device_id): <p>The Direct Connect endpoint that terminates the logical connection. This device might be different than the device that terminates the physical connection.</p>
    ///   - [`connections(Option<Vec<Connection>>)`](crate::output::CreateLagOutput::connections): <p>The connections bundled by the LAG.</p>
    ///   - [`allows_hosted_connections(bool)`](crate::output::CreateLagOutput::allows_hosted_connections): <p>Indicates whether the LAG can host other connections.</p>
    ///   - [`jumbo_frame_capable(Option<bool>)`](crate::output::CreateLagOutput::jumbo_frame_capable): <p>Indicates whether jumbo frames (9001 MTU) are supported.</p>
    ///   - [`has_logical_redundancy(Option<HasLogicalRedundancy>)`](crate::output::CreateLagOutput::has_logical_redundancy): <p>Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).</p>
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::CreateLagOutput::tags): <p>The tags associated with the LAG.</p>
    ///   - [`provider_name(Option<String>)`](crate::output::CreateLagOutput::provider_name): <p>The name of the service provider associated with the LAG.</p>
    ///   - [`mac_sec_capable(Option<bool>)`](crate::output::CreateLagOutput::mac_sec_capable): <p>Indicates whether the LAG supports MAC Security (MACsec).</p>
    ///   - [`encryption_mode(Option<String>)`](crate::output::CreateLagOutput::encryption_mode): <p>The LAG MAC Security (MACsec) encryption mode.</p>  <p>The valid values are <code>no_encrypt</code>, <code>should_encrypt</code>, and <code>must_encrypt</code>.</p>
    ///   - [`mac_sec_keys(Option<Vec<MacSecKey>>)`](crate::output::CreateLagOutput::mac_sec_keys): <p>The MAC Security (MACsec) security keys associated with the LAG.</p>
    /// - On failure, responds with [`SdkError<CreateLagError>`](crate::error::CreateLagError)
    pub fn create_lag(&self) -> crate::client::fluent_builders::CreateLag {
        crate::client::fluent_builders::CreateLag::new(self.handle.clone())
    }
}
