// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeInterconnectLoa`](crate::client::fluent_builders::DescribeInterconnectLoa) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`interconnect_id(impl Into<String>)`](crate::client::fluent_builders::DescribeInterconnectLoa::interconnect_id) / [`set_interconnect_id(Option<String>)`](crate::client::fluent_builders::DescribeInterconnectLoa::set_interconnect_id): <p>The ID of the interconnect.</p>
    ///   - [`provider_name(impl Into<String>)`](crate::client::fluent_builders::DescribeInterconnectLoa::provider_name) / [`set_provider_name(Option<String>)`](crate::client::fluent_builders::DescribeInterconnectLoa::set_provider_name): <p>The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.</p>
    ///   - [`loa_content_type(LoaContentType)`](crate::client::fluent_builders::DescribeInterconnectLoa::loa_content_type) / [`set_loa_content_type(Option<LoaContentType>)`](crate::client::fluent_builders::DescribeInterconnectLoa::set_loa_content_type): <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
    /// - On success, responds with [`DescribeInterconnectLoaOutput`](crate::output::DescribeInterconnectLoaOutput) with field(s):
    ///   - [`loa(Option<Loa>)`](crate::output::DescribeInterconnectLoaOutput::loa): <p>The Letter of Authorization - Connecting Facility Assignment (LOA-CFA).</p>
    /// - On failure, responds with [`SdkError<DescribeInterconnectLoaError>`](crate::error::DescribeInterconnectLoaError)
    #[deprecated]
    pub fn describe_interconnect_loa(
        &self,
    ) -> crate::client::fluent_builders::DescribeInterconnectLoa {
        crate::client::fluent_builders::DescribeInterconnectLoa::new(self.handle.clone())
    }
}
