// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AssociateMacSecKey`](crate::operation::associate_mac_sec_key::builders::AssociateMacSecKeyFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`connection_id(impl Into<String>)`](crate::operation::associate_mac_sec_key::builders::AssociateMacSecKeyFluentBuilder::connection_id) / [`set_connection_id(Option<String>)`](crate::operation::associate_mac_sec_key::builders::AssociateMacSecKeyFluentBuilder::set_connection_id): <p>The ID of the dedicated connection (dxcon-xxxx), or the ID of the LAG (dxlag-xxxx).</p>  <p>You can use <code>DescribeConnections</code> or <code>DescribeLags</code> to retrieve connection ID.</p>
    ///   - [`secret_arn(impl Into<String>)`](crate::operation::associate_mac_sec_key::builders::AssociateMacSecKeyFluentBuilder::secret_arn) / [`set_secret_arn(Option<String>)`](crate::operation::associate_mac_sec_key::builders::AssociateMacSecKeyFluentBuilder::set_secret_arn): <p>The Amazon Resource Name (ARN) of the MAC Security (MACsec) secret key to associate with the dedicated connection.</p>  <p>You can use <code>DescribeConnections</code> or <code>DescribeLags</code> to retrieve the MAC Security (MACsec) secret key.</p>  <p>If you use this request parameter, you do not use the <code>ckn</code> and <code>cak</code> request parameters.</p>
    ///   - [`ckn(impl Into<String>)`](crate::operation::associate_mac_sec_key::builders::AssociateMacSecKeyFluentBuilder::ckn) / [`set_ckn(Option<String>)`](crate::operation::associate_mac_sec_key::builders::AssociateMacSecKeyFluentBuilder::set_ckn): <p>The MAC Security (MACsec) CKN to associate with the dedicated connection.</p>  <p>You can create the CKN/CAK pair using an industry standard tool.</p>  <p> The valid values are 64 hexadecimal characters (0-9, A-E).</p>  <p>If you use this request parameter, you must use the <code>cak</code> request parameter and not use the <code>secretARN</code> request parameter.</p>
    ///   - [`cak(impl Into<String>)`](crate::operation::associate_mac_sec_key::builders::AssociateMacSecKeyFluentBuilder::cak) / [`set_cak(Option<String>)`](crate::operation::associate_mac_sec_key::builders::AssociateMacSecKeyFluentBuilder::set_cak): <p>The MAC Security (MACsec) CAK to associate with the dedicated connection.</p>  <p>You can create the CKN/CAK pair using an industry standard tool.</p>  <p> The valid values are 64 hexadecimal characters (0-9, A-E).</p>  <p>If you use this request parameter, you must use the <code>ckn</code> request parameter and not use the <code>secretARN</code> request parameter.</p>
    /// - On success, responds with [`AssociateMacSecKeyOutput`](crate::operation::associate_mac_sec_key::AssociateMacSecKeyOutput) with field(s):
    ///   - [`connection_id(Option<String>)`](crate::operation::associate_mac_sec_key::AssociateMacSecKeyOutput::connection_id): <p>The ID of the dedicated connection (dxcon-xxxx), or the ID of the LAG (dxlag-xxxx).</p>
    ///   - [`mac_sec_keys(Option<Vec<MacSecKey>>)`](crate::operation::associate_mac_sec_key::AssociateMacSecKeyOutput::mac_sec_keys): <p>The MAC Security (MACsec) security keys associated with the dedicated connection.</p>
    /// - On failure, responds with [`SdkError<AssociateMacSecKeyError>`](crate::operation::associate_mac_sec_key::AssociateMacSecKeyError)
    pub fn associate_mac_sec_key(
        &self,
    ) -> crate::operation::associate_mac_sec_key::builders::AssociateMacSecKeyFluentBuilder {
        crate::operation::associate_mac_sec_key::builders::AssociateMacSecKeyFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
