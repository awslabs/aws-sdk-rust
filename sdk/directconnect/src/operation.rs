// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Accepts a proposal request to attach a virtual private gateway or transit gateway to a Direct Connect gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AcceptDirectConnectGatewayAssociationProposal {
    _private: (),
}
impl AcceptDirectConnectGatewayAssociationProposal {
    /// Creates a new builder-style object to manufacture [`AcceptDirectConnectGatewayAssociationProposalInput`](crate::input::AcceptDirectConnectGatewayAssociationProposalInput)
    pub fn builder(
    ) -> crate::input::accept_direct_connect_gateway_association_proposal_input::Builder {
        crate::input::accept_direct_connect_gateway_association_proposal_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AcceptDirectConnectGatewayAssociationProposal {
    type Output = std::result::Result<
        crate::output::AcceptDirectConnectGatewayAssociationProposalOutput,
        crate::error::AcceptDirectConnectGatewayAssociationProposalError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_accept_direct_connect_gateway_association_proposal_error(
                response,
            )
        } else {
            crate::operation_deser::parse_accept_direct_connect_gateway_association_proposal_response(response)
        }
    }
}

/// <p>Deprecated. Use <a>AllocateHostedConnection</a> instead.</p>
/// <p>Creates a hosted connection on an interconnect.</p>
/// <p>Allocates a VLAN number and a specified amount of bandwidth for use by a hosted connection on the specified interconnect.</p>
/// <note>
/// <p>Intended for use by Direct Connect Partners only.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AllocateConnectionOnInterconnect {
    _private: (),
}
impl AllocateConnectionOnInterconnect {
    /// Creates a new builder-style object to manufacture [`AllocateConnectionOnInterconnectInput`](crate::input::AllocateConnectionOnInterconnectInput)
    pub fn builder() -> crate::input::allocate_connection_on_interconnect_input::Builder {
        crate::input::allocate_connection_on_interconnect_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AllocateConnectionOnInterconnect {
    type Output = std::result::Result<
        crate::output::AllocateConnectionOnInterconnectOutput,
        crate::error::AllocateConnectionOnInterconnectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_allocate_connection_on_interconnect_error(response)
        } else {
            crate::operation_deser::parse_allocate_connection_on_interconnect_response(response)
        }
    }
}

/// <p>Creates a hosted connection on the specified interconnect or a link aggregation group (LAG) of interconnects.</p>
/// <p>Allocates a VLAN number and a specified amount of capacity (bandwidth) for use by a hosted connection on the specified interconnect or LAG of interconnects.
/// Amazon Web Services polices the hosted connection for the specified capacity and the Direct Connect Partner must also police the hosted connection for the specified capacity.</p>
/// <note>
/// <p>Intended for use by Direct Connect Partners only.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AllocateHostedConnection {
    _private: (),
}
impl AllocateHostedConnection {
    /// Creates a new builder-style object to manufacture [`AllocateHostedConnectionInput`](crate::input::AllocateHostedConnectionInput)
    pub fn builder() -> crate::input::allocate_hosted_connection_input::Builder {
        crate::input::allocate_hosted_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AllocateHostedConnection {
    type Output = std::result::Result<
        crate::output::AllocateHostedConnectionOutput,
        crate::error::AllocateHostedConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_allocate_hosted_connection_error(response)
        } else {
            crate::operation_deser::parse_allocate_hosted_connection_response(response)
        }
    }
}

/// <p>Provisions a private virtual interface to be owned by the specified account.</p>
/// <p>Virtual interfaces created using this action must be confirmed by the owner using <a>ConfirmPrivateVirtualInterface</a>.
/// Until then, the virtual interface is in the <code>Confirming</code> state and is not available to handle traffic.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AllocatePrivateVirtualInterface {
    _private: (),
}
impl AllocatePrivateVirtualInterface {
    /// Creates a new builder-style object to manufacture [`AllocatePrivateVirtualInterfaceInput`](crate::input::AllocatePrivateVirtualInterfaceInput)
    pub fn builder() -> crate::input::allocate_private_virtual_interface_input::Builder {
        crate::input::allocate_private_virtual_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AllocatePrivateVirtualInterface {
    type Output = std::result::Result<
        crate::output::AllocatePrivateVirtualInterfaceOutput,
        crate::error::AllocatePrivateVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_allocate_private_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_allocate_private_virtual_interface_response(response)
        }
    }
}

/// <p>Provisions a public virtual interface to be owned by the specified account.</p>
/// <p>The owner of a connection calls this function to provision a public virtual interface to be owned by the specified account.</p>
/// <p>Virtual interfaces created using this function must be confirmed by the owner using <a>ConfirmPublicVirtualInterface</a>.
/// Until this step has been completed, the virtual interface is in the <code>confirming</code> state and is not available to handle traffic.</p>
/// <p>When creating an IPv6 public virtual interface, omit the Amazon address and customer address. IPv6 addresses are automatically assigned from
/// the Amazon pool of IPv6 addresses; you cannot specify custom IPv6 addresses.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AllocatePublicVirtualInterface {
    _private: (),
}
impl AllocatePublicVirtualInterface {
    /// Creates a new builder-style object to manufacture [`AllocatePublicVirtualInterfaceInput`](crate::input::AllocatePublicVirtualInterfaceInput)
    pub fn builder() -> crate::input::allocate_public_virtual_interface_input::Builder {
        crate::input::allocate_public_virtual_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AllocatePublicVirtualInterface {
    type Output = std::result::Result<
        crate::output::AllocatePublicVirtualInterfaceOutput,
        crate::error::AllocatePublicVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_allocate_public_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_allocate_public_virtual_interface_response(response)
        }
    }
}

/// <p>Provisions a transit virtual interface to be owned by the specified account. Use this type of interface to connect a transit gateway to your Direct Connect gateway.</p>
/// <p>The owner of a connection provisions a transit virtual interface to be owned by the specified account.</p>
/// <p>After you create a transit virtual interface, it must be confirmed by the owner using <a>ConfirmTransitVirtualInterface</a>. Until this step has been completed, the transit virtual interface is in the <code>requested</code> state and is not available to handle traffic.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AllocateTransitVirtualInterface {
    _private: (),
}
impl AllocateTransitVirtualInterface {
    /// Creates a new builder-style object to manufacture [`AllocateTransitVirtualInterfaceInput`](crate::input::AllocateTransitVirtualInterfaceInput)
    pub fn builder() -> crate::input::allocate_transit_virtual_interface_input::Builder {
        crate::input::allocate_transit_virtual_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AllocateTransitVirtualInterface {
    type Output = std::result::Result<
        crate::output::AllocateTransitVirtualInterfaceOutput,
        crate::error::AllocateTransitVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_allocate_transit_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_allocate_transit_virtual_interface_response(response)
        }
    }
}

/// <p>Associates an existing connection with a link aggregation group (LAG). The connection
/// is interrupted and re-established as a member of the LAG (connectivity to Amazon Web Services is
/// interrupted). The connection must be hosted on the same Direct Connect endpoint as the LAG, and its
/// bandwidth must match the bandwidth for the LAG. You can re-associate a connection that's
/// currently associated with a different LAG; however, if removing the connection would cause
/// the original LAG to fall below its setting for minimum number of operational connections,
/// the request fails.</p>
/// <p>Any virtual interfaces that are directly associated with the connection are
/// automatically re-associated with the LAG. If the connection was originally associated
/// with a different LAG, the virtual interfaces remain associated with the original
/// LAG.</p>
/// <p>For interconnects, any hosted connections are automatically re-associated with the
/// LAG. If the interconnect was originally associated with a different LAG, the hosted
/// connections remain associated with the original LAG.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateConnectionWithLag {
    _private: (),
}
impl AssociateConnectionWithLag {
    /// Creates a new builder-style object to manufacture [`AssociateConnectionWithLagInput`](crate::input::AssociateConnectionWithLagInput)
    pub fn builder() -> crate::input::associate_connection_with_lag_input::Builder {
        crate::input::associate_connection_with_lag_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateConnectionWithLag {
    type Output = std::result::Result<
        crate::output::AssociateConnectionWithLagOutput,
        crate::error::AssociateConnectionWithLagError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_connection_with_lag_error(response)
        } else {
            crate::operation_deser::parse_associate_connection_with_lag_response(response)
        }
    }
}

/// <p>Associates a hosted connection and its virtual interfaces with a link aggregation
/// group (LAG) or interconnect. If the target interconnect or LAG has an existing hosted
/// connection with a conflicting VLAN number or IP address, the operation fails. This
/// action temporarily interrupts the hosted connection's connectivity to Amazon Web Services
/// as it is being migrated.</p>
/// <note>
/// <p>Intended for use by Direct Connect Partners only.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateHostedConnection {
    _private: (),
}
impl AssociateHostedConnection {
    /// Creates a new builder-style object to manufacture [`AssociateHostedConnectionInput`](crate::input::AssociateHostedConnectionInput)
    pub fn builder() -> crate::input::associate_hosted_connection_input::Builder {
        crate::input::associate_hosted_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateHostedConnection {
    type Output = std::result::Result<
        crate::output::AssociateHostedConnectionOutput,
        crate::error::AssociateHostedConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_hosted_connection_error(response)
        } else {
            crate::operation_deser::parse_associate_hosted_connection_response(response)
        }
    }
}

/// <p>Associates a MAC Security (MACsec) Connection Key Name (CKN)/ Connectivity Association Key (CAK) pair with an Direct Connect dedicated connection.</p>
/// <p>You must supply either the <code>secretARN,</code> or the CKN/CAK (<code>ckn</code> and <code>cak</code>) pair in the request.</p>
/// <p>For information about MAC Security (MACsec) key considerations, see  <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/direct-connect-mac-sec-getting-started.html#mac-sec-key-consideration">MACsec pre-shared CKN/CAK key considerations </a> in the <i>Direct Connect User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateMacSecKey {
    _private: (),
}
impl AssociateMacSecKey {
    /// Creates a new builder-style object to manufacture [`AssociateMacSecKeyInput`](crate::input::AssociateMacSecKeyInput)
    pub fn builder() -> crate::input::associate_mac_sec_key_input::Builder {
        crate::input::associate_mac_sec_key_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateMacSecKey {
    type Output = std::result::Result<
        crate::output::AssociateMacSecKeyOutput,
        crate::error::AssociateMacSecKeyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_mac_sec_key_error(response)
        } else {
            crate::operation_deser::parse_associate_mac_sec_key_response(response)
        }
    }
}

/// <p>Associates a virtual interface with a specified link aggregation group (LAG) or
/// connection. Connectivity to Amazon Web Services is temporarily interrupted as the virtual interface is
/// being migrated. If the target connection or LAG has an associated virtual interface with
/// a conflicting VLAN number or a conflicting IP address, the operation fails.</p>
/// <p>Virtual interfaces associated with a hosted connection cannot be associated with a
/// LAG; hosted connections must be migrated along with their virtual interfaces using <a>AssociateHostedConnection</a>.</p>
/// <p>To reassociate a virtual interface to a new connection or LAG, the requester
/// must own either the virtual interface itself or the connection to which the virtual
/// interface is currently associated. Additionally, the requester must own the connection
/// or LAG for the association.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct AssociateVirtualInterface {
    _private: (),
}
impl AssociateVirtualInterface {
    /// Creates a new builder-style object to manufacture [`AssociateVirtualInterfaceInput`](crate::input::AssociateVirtualInterfaceInput)
    pub fn builder() -> crate::input::associate_virtual_interface_input::Builder {
        crate::input::associate_virtual_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for AssociateVirtualInterface {
    type Output = std::result::Result<
        crate::output::AssociateVirtualInterfaceOutput,
        crate::error::AssociateVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_associate_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_associate_virtual_interface_response(response)
        }
    }
}

/// <p>Confirms the creation of the specified hosted connection on an interconnect.</p>
/// <p>Upon creation, the hosted connection is initially in the <code>Ordering</code> state, and
/// remains in this state until the owner confirms creation of the hosted connection.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ConfirmConnection {
    _private: (),
}
impl ConfirmConnection {
    /// Creates a new builder-style object to manufacture [`ConfirmConnectionInput`](crate::input::ConfirmConnectionInput)
    pub fn builder() -> crate::input::confirm_connection_input::Builder {
        crate::input::confirm_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ConfirmConnection {
    type Output = std::result::Result<
        crate::output::ConfirmConnectionOutput,
        crate::error::ConfirmConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_confirm_connection_error(response)
        } else {
            crate::operation_deser::parse_confirm_connection_response(response)
        }
    }
}

/// <p>Accepts ownership of a private virtual interface created by another account.</p>
/// <p>After the virtual interface owner makes this call, the virtual interface is
/// created and attached to the specified virtual private gateway or Direct Connect gateway, and is
/// made available to handle traffic.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ConfirmPrivateVirtualInterface {
    _private: (),
}
impl ConfirmPrivateVirtualInterface {
    /// Creates a new builder-style object to manufacture [`ConfirmPrivateVirtualInterfaceInput`](crate::input::ConfirmPrivateVirtualInterfaceInput)
    pub fn builder() -> crate::input::confirm_private_virtual_interface_input::Builder {
        crate::input::confirm_private_virtual_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ConfirmPrivateVirtualInterface {
    type Output = std::result::Result<
        crate::output::ConfirmPrivateVirtualInterfaceOutput,
        crate::error::ConfirmPrivateVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_confirm_private_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_confirm_private_virtual_interface_response(response)
        }
    }
}

/// <p>Accepts ownership of a public virtual interface created by another account.</p>
/// <p>After the virtual interface owner makes this call, the specified virtual interface is
/// created and made available to handle traffic.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ConfirmPublicVirtualInterface {
    _private: (),
}
impl ConfirmPublicVirtualInterface {
    /// Creates a new builder-style object to manufacture [`ConfirmPublicVirtualInterfaceInput`](crate::input::ConfirmPublicVirtualInterfaceInput)
    pub fn builder() -> crate::input::confirm_public_virtual_interface_input::Builder {
        crate::input::confirm_public_virtual_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ConfirmPublicVirtualInterface {
    type Output = std::result::Result<
        crate::output::ConfirmPublicVirtualInterfaceOutput,
        crate::error::ConfirmPublicVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_confirm_public_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_confirm_public_virtual_interface_response(response)
        }
    }
}

/// <p>Accepts ownership of a transit virtual interface created by another account.</p>
/// <p> After the owner of the transit virtual interface makes this call, the specified transit virtual interface is created and made available to handle traffic.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ConfirmTransitVirtualInterface {
    _private: (),
}
impl ConfirmTransitVirtualInterface {
    /// Creates a new builder-style object to manufacture [`ConfirmTransitVirtualInterfaceInput`](crate::input::ConfirmTransitVirtualInterfaceInput)
    pub fn builder() -> crate::input::confirm_transit_virtual_interface_input::Builder {
        crate::input::confirm_transit_virtual_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ConfirmTransitVirtualInterface {
    type Output = std::result::Result<
        crate::output::ConfirmTransitVirtualInterfaceOutput,
        crate::error::ConfirmTransitVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_confirm_transit_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_confirm_transit_virtual_interface_response(response)
        }
    }
}

/// <p>Creates a BGP peer on the specified virtual interface.</p>
/// <p>You must create a BGP peer for the corresponding address family (IPv4/IPv6) in order to access Amazon Web Services resources that also use that address family.</p>
/// <p>If logical redundancy is not supported by the connection, interconnect, or LAG, the BGP peer cannot
/// be in the same address family as an existing BGP peer on the virtual interface.</p>
/// <p>When creating a IPv6 BGP peer, omit the Amazon address and customer address. IPv6 addresses are automatically assigned from
/// the Amazon pool of IPv6 addresses; you cannot specify custom IPv6 addresses.</p>
/// <p>For a public virtual interface, the Autonomous System Number (ASN) must be private or already on the allow list for the virtual interface.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateBGPPeer {
    _private: (),
}
impl CreateBGPPeer {
    /// Creates a new builder-style object to manufacture [`CreateBgpPeerInput`](crate::input::CreateBgpPeerInput)
    pub fn builder() -> crate::input::create_bgp_peer_input::Builder {
        crate::input::create_bgp_peer_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateBGPPeer {
    type Output =
        std::result::Result<crate::output::CreateBgpPeerOutput, crate::error::CreateBGPPeerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_bgp_peer_error(response)
        } else {
            crate::operation_deser::parse_create_bgp_peer_response(response)
        }
    }
}

/// <p>Creates a connection between a customer network and a specific Direct Connect location.</p>
/// <p>A connection links your internal network to an Direct Connect location over a standard Ethernet fiber-optic
/// cable. One end of the cable is connected to your router, the other to an Direct Connect router.</p>
/// <p>To find the locations for your Region, use <a>DescribeLocations</a>.</p>
/// <p>You can automatically add the new connection to a link aggregation group (LAG) by
/// specifying a LAG ID in the request. This ensures that the new connection is allocated on the
/// same Direct Connect endpoint that hosts the specified LAG. If there are no available ports on the endpoint,
/// the request fails and no connection is created.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateConnection {
    _private: (),
}
impl CreateConnection {
    /// Creates a new builder-style object to manufacture [`CreateConnectionInput`](crate::input::CreateConnectionInput)
    pub fn builder() -> crate::input::create_connection_input::Builder {
        crate::input::create_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateConnection {
    type Output = std::result::Result<
        crate::output::CreateConnectionOutput,
        crate::error::CreateConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_connection_error(response)
        } else {
            crate::operation_deser::parse_create_connection_response(response)
        }
    }
}

/// <p>Creates a Direct Connect gateway, which is an intermediate object that enables you to connect a set
/// of virtual interfaces and virtual private gateways. A Direct Connect gateway is global and visible in any
/// Region after it is created. The virtual interfaces and virtual private gateways that
/// are connected through a Direct Connect gateway can be in different Regions. This enables you to
/// connect to a VPC in any Region, regardless of the Region in which the virtual interfaces
/// are located, and pass traffic between them.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDirectConnectGateway {
    _private: (),
}
impl CreateDirectConnectGateway {
    /// Creates a new builder-style object to manufacture [`CreateDirectConnectGatewayInput`](crate::input::CreateDirectConnectGatewayInput)
    pub fn builder() -> crate::input::create_direct_connect_gateway_input::Builder {
        crate::input::create_direct_connect_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDirectConnectGateway {
    type Output = std::result::Result<
        crate::output::CreateDirectConnectGatewayOutput,
        crate::error::CreateDirectConnectGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_direct_connect_gateway_error(response)
        } else {
            crate::operation_deser::parse_create_direct_connect_gateway_response(response)
        }
    }
}

/// <p>Creates an association between a Direct Connect gateway and a virtual private gateway. The virtual
/// private gateway must be attached to a VPC and must not be associated with another Direct Connect gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDirectConnectGatewayAssociation {
    _private: (),
}
impl CreateDirectConnectGatewayAssociation {
    /// Creates a new builder-style object to manufacture [`CreateDirectConnectGatewayAssociationInput`](crate::input::CreateDirectConnectGatewayAssociationInput)
    pub fn builder() -> crate::input::create_direct_connect_gateway_association_input::Builder {
        crate::input::create_direct_connect_gateway_association_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDirectConnectGatewayAssociation {
    type Output = std::result::Result<
        crate::output::CreateDirectConnectGatewayAssociationOutput,
        crate::error::CreateDirectConnectGatewayAssociationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_direct_connect_gateway_association_error(response)
        } else {
            crate::operation_deser::parse_create_direct_connect_gateway_association_response(
                response,
            )
        }
    }
}

/// <p>Creates a proposal to associate the specified virtual private gateway or transit gateway with the specified Direct Connect gateway.</p>
/// <p>You can associate a Direct Connect gateway and virtual private gateway or transit gateway that is owned by any account. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateDirectConnectGatewayAssociationProposal {
    _private: (),
}
impl CreateDirectConnectGatewayAssociationProposal {
    /// Creates a new builder-style object to manufacture [`CreateDirectConnectGatewayAssociationProposalInput`](crate::input::CreateDirectConnectGatewayAssociationProposalInput)
    pub fn builder(
    ) -> crate::input::create_direct_connect_gateway_association_proposal_input::Builder {
        crate::input::create_direct_connect_gateway_association_proposal_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateDirectConnectGatewayAssociationProposal {
    type Output = std::result::Result<
        crate::output::CreateDirectConnectGatewayAssociationProposalOutput,
        crate::error::CreateDirectConnectGatewayAssociationProposalError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_direct_connect_gateway_association_proposal_error(
                response,
            )
        } else {
            crate::operation_deser::parse_create_direct_connect_gateway_association_proposal_response(response)
        }
    }
}

/// <p>Creates an interconnect between an Direct Connect Partner's network and a specific Direct Connect location.</p>
/// <p>An interconnect is a connection that is capable of hosting other connections. The
/// Direct Connect Partner can use an interconnect to provide Direct Connect hosted
/// connections to customers through their own network services. Like a standard connection, an
/// interconnect links the partner's network to an Direct Connect location over a standard Ethernet
/// fiber-optic cable. One end is connected to the partner's router, the other to an Direct Connect
/// router.</p>
/// <p>You can automatically add the new interconnect to a link aggregation group (LAG) by
/// specifying a LAG ID in the request. This ensures that the new interconnect is allocated on
/// the same Direct Connect endpoint that hosts the specified LAG. If there are no available ports on the
/// endpoint, the request fails and no interconnect is created.</p>
/// <p>For each end customer, the Direct Connect Partner provisions a connection on their interconnect by calling <a>AllocateHostedConnection</a>.
/// The end customer can then connect to Amazon Web Services resources by creating a virtual interface on their connection, using the VLAN assigned to them by the Direct Connect Partner.</p>
/// <note>
/// <p>Intended for use by Direct Connect Partners only.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateInterconnect {
    _private: (),
}
impl CreateInterconnect {
    /// Creates a new builder-style object to manufacture [`CreateInterconnectInput`](crate::input::CreateInterconnectInput)
    pub fn builder() -> crate::input::create_interconnect_input::Builder {
        crate::input::create_interconnect_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateInterconnect {
    type Output = std::result::Result<
        crate::output::CreateInterconnectOutput,
        crate::error::CreateInterconnectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_interconnect_error(response)
        } else {
            crate::operation_deser::parse_create_interconnect_response(response)
        }
    }
}

/// <p>Creates a link aggregation group (LAG) with the specified number of bundled
/// physical dedicated connections between the customer network and a specific Direct Connect location.
/// A LAG is a logical interface that uses the Link Aggregation Control Protocol
/// (LACP) to aggregate multiple interfaces, enabling you to treat them as a single
/// interface.</p>
/// <p>All connections in a LAG must use the same bandwidth (either 1Gbps or 10Gbps) and must terminate at the same Direct Connect endpoint.</p>
/// <p>You can have up to 10 dedicated connections per LAG. Regardless of this limit, if you
/// request more connections for the LAG than Direct Connect can allocate on a single endpoint, no LAG is
/// created.</p>
/// <p>You can specify an existing physical dedicated connection or interconnect to include in
/// the LAG (which counts towards the total number of connections). Doing so interrupts the
/// current physical dedicated connection, and re-establishes them as a member of the LAG. The LAG
/// will be created on the same Direct Connect endpoint to which the dedicated connection terminates. Any
/// virtual interfaces associated with the dedicated connection are automatically disassociated
/// and re-associated with the LAG. The connection ID does not change.</p>
/// <p>If the account used to create a LAG is a registered Direct Connect Partner, the LAG is
/// automatically enabled to host sub-connections. For a LAG owned by a partner, any associated virtual
/// interfaces cannot be directly configured.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateLag {
    _private: (),
}
impl CreateLag {
    /// Creates a new builder-style object to manufacture [`CreateLagInput`](crate::input::CreateLagInput)
    pub fn builder() -> crate::input::create_lag_input::Builder {
        crate::input::create_lag_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateLag {
    type Output = std::result::Result<crate::output::CreateLagOutput, crate::error::CreateLagError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_lag_error(response)
        } else {
            crate::operation_deser::parse_create_lag_response(response)
        }
    }
}

/// <p>Creates a private virtual interface. A virtual interface is the VLAN that transports Direct Connect traffic.
/// A private virtual interface can be connected to either a Direct Connect gateway or a Virtual Private Gateway (VGW).
/// Connecting the private virtual interface to a Direct Connect gateway enables the possibility for connecting to multiple
/// VPCs, including VPCs in different Regions. Connecting the private virtual interface
/// to a VGW only provides access to a single VPC within the same Region.</p>
/// <p>Setting the MTU of a virtual interface to 9001 (jumbo frames) can cause an update to
/// the underlying physical connection if it wasn't updated to support jumbo frames. Updating
/// the connection disrupts network connectivity for all virtual interfaces associated with
/// the connection for up to 30 seconds. To check whether your connection supports jumbo
/// frames, call <a>DescribeConnections</a>. To check whether your virtual
/// interface supports jumbo frames, call <a>DescribeVirtualInterfaces</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePrivateVirtualInterface {
    _private: (),
}
impl CreatePrivateVirtualInterface {
    /// Creates a new builder-style object to manufacture [`CreatePrivateVirtualInterfaceInput`](crate::input::CreatePrivateVirtualInterfaceInput)
    pub fn builder() -> crate::input::create_private_virtual_interface_input::Builder {
        crate::input::create_private_virtual_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreatePrivateVirtualInterface {
    type Output = std::result::Result<
        crate::output::CreatePrivateVirtualInterfaceOutput,
        crate::error::CreatePrivateVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_private_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_create_private_virtual_interface_response(response)
        }
    }
}

/// <p>Creates a public virtual interface. A virtual interface is the VLAN that transports Direct Connect traffic.
/// A public virtual interface supports sending traffic to public services of Amazon Web Services such as Amazon S3.</p>
/// <p>When creating an IPv6 public virtual interface (<code>addressFamily</code> is <code>ipv6</code>), leave the <code>customer</code>
/// and <code>amazon</code> address fields blank to use auto-assigned IPv6 space. Custom IPv6 addresses are not supported.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreatePublicVirtualInterface {
    _private: (),
}
impl CreatePublicVirtualInterface {
    /// Creates a new builder-style object to manufacture [`CreatePublicVirtualInterfaceInput`](crate::input::CreatePublicVirtualInterfaceInput)
    pub fn builder() -> crate::input::create_public_virtual_interface_input::Builder {
        crate::input::create_public_virtual_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreatePublicVirtualInterface {
    type Output = std::result::Result<
        crate::output::CreatePublicVirtualInterfaceOutput,
        crate::error::CreatePublicVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_public_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_create_public_virtual_interface_response(response)
        }
    }
}

/// <p>Creates a transit virtual interface. A transit virtual interface should be used to access one or more transit gateways associated with Direct Connect gateways. A transit virtual interface enables the connection of multiple VPCs attached to a transit gateway to a Direct Connect gateway.</p>
/// <important>
/// <p>If you associate your transit gateway with one or more Direct Connect gateways, the Autonomous System Number (ASN) used by the transit gateway and the Direct Connect gateway must be different. For example, if you use the default ASN 64512 for both your the transit gateway and Direct Connect gateway, the association request fails.</p>
/// </important>
/// <p>Setting the MTU of a virtual interface to 8500 (jumbo frames) can cause an update to
/// the underlying physical connection if it wasn't updated to support jumbo frames. Updating
/// the connection disrupts network connectivity for all virtual interfaces associated with
/// the connection for up to 30 seconds. To check whether your connection supports jumbo
/// frames, call <a>DescribeConnections</a>. To check whether your virtual
/// interface supports jumbo frames, call <a>DescribeVirtualInterfaces</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateTransitVirtualInterface {
    _private: (),
}
impl CreateTransitVirtualInterface {
    /// Creates a new builder-style object to manufacture [`CreateTransitVirtualInterfaceInput`](crate::input::CreateTransitVirtualInterfaceInput)
    pub fn builder() -> crate::input::create_transit_virtual_interface_input::Builder {
        crate::input::create_transit_virtual_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for CreateTransitVirtualInterface {
    type Output = std::result::Result<
        crate::output::CreateTransitVirtualInterfaceOutput,
        crate::error::CreateTransitVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_create_transit_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_create_transit_virtual_interface_response(response)
        }
    }
}

/// <p>Deletes the specified BGP peer on the specified virtual interface with the specified customer address and ASN.</p>
/// <p>You cannot delete the last BGP peer from a virtual interface.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBGPPeer {
    _private: (),
}
impl DeleteBGPPeer {
    /// Creates a new builder-style object to manufacture [`DeleteBgpPeerInput`](crate::input::DeleteBgpPeerInput)
    pub fn builder() -> crate::input::delete_bgp_peer_input::Builder {
        crate::input::delete_bgp_peer_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteBGPPeer {
    type Output =
        std::result::Result<crate::output::DeleteBgpPeerOutput, crate::error::DeleteBGPPeerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_bgp_peer_error(response)
        } else {
            crate::operation_deser::parse_delete_bgp_peer_response(response)
        }
    }
}

/// <p>Deletes the specified connection.</p>
/// <p>Deleting a connection only stops the Direct Connect port hour and data transfer charges.
/// If you are partnering with any third parties to connect with the Direct Connect location,
/// you must cancel your service with them separately.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteConnection {
    _private: (),
}
impl DeleteConnection {
    /// Creates a new builder-style object to manufacture [`DeleteConnectionInput`](crate::input::DeleteConnectionInput)
    pub fn builder() -> crate::input::delete_connection_input::Builder {
        crate::input::delete_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteConnection {
    type Output = std::result::Result<
        crate::output::DeleteConnectionOutput,
        crate::error::DeleteConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_connection_error(response)
        } else {
            crate::operation_deser::parse_delete_connection_response(response)
        }
    }
}

/// <p>Deletes the specified Direct Connect gateway. You must first delete all virtual interfaces that are
/// attached to the Direct Connect gateway and disassociate all virtual private gateways associated
/// with the Direct Connect gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDirectConnectGateway {
    _private: (),
}
impl DeleteDirectConnectGateway {
    /// Creates a new builder-style object to manufacture [`DeleteDirectConnectGatewayInput`](crate::input::DeleteDirectConnectGatewayInput)
    pub fn builder() -> crate::input::delete_direct_connect_gateway_input::Builder {
        crate::input::delete_direct_connect_gateway_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDirectConnectGateway {
    type Output = std::result::Result<
        crate::output::DeleteDirectConnectGatewayOutput,
        crate::error::DeleteDirectConnectGatewayError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_direct_connect_gateway_error(response)
        } else {
            crate::operation_deser::parse_delete_direct_connect_gateway_response(response)
        }
    }
}

/// <p>Deletes the association between the specified Direct Connect gateway and virtual private gateway.</p>
/// <p>We recommend that you specify the <code>associationID</code> to delete the association. Alternatively, if you own virtual gateway and a Direct Connect gateway association, you can specify the <code>virtualGatewayId</code> and <code>directConnectGatewayId</code> to delete an association.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDirectConnectGatewayAssociation {
    _private: (),
}
impl DeleteDirectConnectGatewayAssociation {
    /// Creates a new builder-style object to manufacture [`DeleteDirectConnectGatewayAssociationInput`](crate::input::DeleteDirectConnectGatewayAssociationInput)
    pub fn builder() -> crate::input::delete_direct_connect_gateway_association_input::Builder {
        crate::input::delete_direct_connect_gateway_association_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDirectConnectGatewayAssociation {
    type Output = std::result::Result<
        crate::output::DeleteDirectConnectGatewayAssociationOutput,
        crate::error::DeleteDirectConnectGatewayAssociationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_direct_connect_gateway_association_error(response)
        } else {
            crate::operation_deser::parse_delete_direct_connect_gateway_association_response(
                response,
            )
        }
    }
}

/// <p>Deletes the association proposal request between the specified Direct Connect gateway and virtual private gateway or transit gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDirectConnectGatewayAssociationProposal {
    _private: (),
}
impl DeleteDirectConnectGatewayAssociationProposal {
    /// Creates a new builder-style object to manufacture [`DeleteDirectConnectGatewayAssociationProposalInput`](crate::input::DeleteDirectConnectGatewayAssociationProposalInput)
    pub fn builder(
    ) -> crate::input::delete_direct_connect_gateway_association_proposal_input::Builder {
        crate::input::delete_direct_connect_gateway_association_proposal_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteDirectConnectGatewayAssociationProposal {
    type Output = std::result::Result<
        crate::output::DeleteDirectConnectGatewayAssociationProposalOutput,
        crate::error::DeleteDirectConnectGatewayAssociationProposalError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_direct_connect_gateway_association_proposal_error(
                response,
            )
        } else {
            crate::operation_deser::parse_delete_direct_connect_gateway_association_proposal_response(response)
        }
    }
}

/// <p>Deletes the specified interconnect.</p>
/// <note>
/// <p>Intended for use
/// by Direct Connect Partners only.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteInterconnect {
    _private: (),
}
impl DeleteInterconnect {
    /// Creates a new builder-style object to manufacture [`DeleteInterconnectInput`](crate::input::DeleteInterconnectInput)
    pub fn builder() -> crate::input::delete_interconnect_input::Builder {
        crate::input::delete_interconnect_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteInterconnect {
    type Output = std::result::Result<
        crate::output::DeleteInterconnectOutput,
        crate::error::DeleteInterconnectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_interconnect_error(response)
        } else {
            crate::operation_deser::parse_delete_interconnect_response(response)
        }
    }
}

/// <p>Deletes the specified link aggregation group (LAG). You cannot delete a LAG if it has active
/// virtual interfaces or hosted connections.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteLag {
    _private: (),
}
impl DeleteLag {
    /// Creates a new builder-style object to manufacture [`DeleteLagInput`](crate::input::DeleteLagInput)
    pub fn builder() -> crate::input::delete_lag_input::Builder {
        crate::input::delete_lag_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteLag {
    type Output = std::result::Result<crate::output::DeleteLagOutput, crate::error::DeleteLagError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_lag_error(response)
        } else {
            crate::operation_deser::parse_delete_lag_response(response)
        }
    }
}

/// <p>Deletes a virtual interface.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteVirtualInterface {
    _private: (),
}
impl DeleteVirtualInterface {
    /// Creates a new builder-style object to manufacture [`DeleteVirtualInterfaceInput`](crate::input::DeleteVirtualInterfaceInput)
    pub fn builder() -> crate::input::delete_virtual_interface_input::Builder {
        crate::input::delete_virtual_interface_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteVirtualInterface {
    type Output = std::result::Result<
        crate::output::DeleteVirtualInterfaceOutput,
        crate::error::DeleteVirtualInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_virtual_interface_error(response)
        } else {
            crate::operation_deser::parse_delete_virtual_interface_response(response)
        }
    }
}

/// <p>Deprecated. Use <a>DescribeLoa</a> instead.</p>
/// <p>Gets the LOA-CFA for a connection.</p>
/// <p>The Letter of Authorization - Connecting Facility Assignment (LOA-CFA) is a document that your APN partner or
/// service provider uses when establishing your cross connect to Amazon Web Services at the colocation facility. For more information,
/// see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/Colocation.html">Requesting Cross Connects
/// at Direct Connect Locations</a> in the <i>Direct Connect User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConnectionLoa {
    _private: (),
}
impl DescribeConnectionLoa {
    /// Creates a new builder-style object to manufacture [`DescribeConnectionLoaInput`](crate::input::DescribeConnectionLoaInput)
    pub fn builder() -> crate::input::describe_connection_loa_input::Builder {
        crate::input::describe_connection_loa_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeConnectionLoa {
    type Output = std::result::Result<
        crate::output::DescribeConnectionLoaOutput,
        crate::error::DescribeConnectionLoaError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_connection_loa_error(response)
        } else {
            crate::operation_deser::parse_describe_connection_loa_response(response)
        }
    }
}

/// <p>Displays the specified connection or all connections in this Region.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConnections {
    _private: (),
}
impl DescribeConnections {
    /// Creates a new builder-style object to manufacture [`DescribeConnectionsInput`](crate::input::DescribeConnectionsInput)
    pub fn builder() -> crate::input::describe_connections_input::Builder {
        crate::input::describe_connections_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeConnections {
    type Output = std::result::Result<
        crate::output::DescribeConnectionsOutput,
        crate::error::DescribeConnectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_connections_error(response)
        } else {
            crate::operation_deser::parse_describe_connections_response(response)
        }
    }
}

/// <p>Deprecated. Use <a>DescribeHostedConnections</a> instead.</p>
/// <p>Lists the connections that have been provisioned on the specified interconnect.</p>
/// <note>
/// <p>Intended for use by Direct Connect Partners only.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeConnectionsOnInterconnect {
    _private: (),
}
impl DescribeConnectionsOnInterconnect {
    /// Creates a new builder-style object to manufacture [`DescribeConnectionsOnInterconnectInput`](crate::input::DescribeConnectionsOnInterconnectInput)
    pub fn builder() -> crate::input::describe_connections_on_interconnect_input::Builder {
        crate::input::describe_connections_on_interconnect_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeConnectionsOnInterconnect {
    type Output = std::result::Result<
        crate::output::DescribeConnectionsOnInterconnectOutput,
        crate::error::DescribeConnectionsOnInterconnectError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_connections_on_interconnect_error(response)
        } else {
            crate::operation_deser::parse_describe_connections_on_interconnect_response(response)
        }
    }
}

/// <p>Describes one or more association proposals for connection between a virtual private gateway or transit gateway and a Direct Connect gateway. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDirectConnectGatewayAssociationProposals {
    _private: (),
}
impl DescribeDirectConnectGatewayAssociationProposals {
    /// Creates a new builder-style object to manufacture [`DescribeDirectConnectGatewayAssociationProposalsInput`](crate::input::DescribeDirectConnectGatewayAssociationProposalsInput)
    pub fn builder(
    ) -> crate::input::describe_direct_connect_gateway_association_proposals_input::Builder {
        crate::input::describe_direct_connect_gateway_association_proposals_input::Builder::default(
        )
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse
    for DescribeDirectConnectGatewayAssociationProposals
{
    type Output = std::result::Result<
        crate::output::DescribeDirectConnectGatewayAssociationProposalsOutput,
        crate::error::DescribeDirectConnectGatewayAssociationProposalsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_direct_connect_gateway_association_proposals_error(response)
        } else {
            crate::operation_deser::parse_describe_direct_connect_gateway_association_proposals_response(response)
        }
    }
}

/// <p>Lists the associations between your Direct Connect gateways and virtual private gateways and transit gateways. You must specify one of the following:</p>
/// <ul>
/// <li>
/// <p>A Direct Connect gateway</p>
/// <p>The response contains all virtual private gateways and transit gateways associated with the Direct Connect gateway.</p>
/// </li>
/// <li>
/// <p>A virtual private gateway</p>
/// <p>The response contains the Direct Connect gateway.</p>
/// </li>
/// <li>
/// <p>A transit gateway</p>
/// <p>The response contains the Direct Connect gateway.</p>
/// </li>
/// <li>
/// <p>A Direct Connect gateway and a virtual private gateway</p>
/// <p>The response contains the association between the Direct Connect gateway and virtual private gateway.</p>
/// </li>
/// <li>
/// <p>A Direct Connect gateway and a transit gateway</p>
/// <p>The response contains the association between the Direct Connect gateway and transit gateway.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDirectConnectGatewayAssociations {
    _private: (),
}
impl DescribeDirectConnectGatewayAssociations {
    /// Creates a new builder-style object to manufacture [`DescribeDirectConnectGatewayAssociationsInput`](crate::input::DescribeDirectConnectGatewayAssociationsInput)
    pub fn builder() -> crate::input::describe_direct_connect_gateway_associations_input::Builder {
        crate::input::describe_direct_connect_gateway_associations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDirectConnectGatewayAssociations {
    type Output = std::result::Result<
        crate::output::DescribeDirectConnectGatewayAssociationsOutput,
        crate::error::DescribeDirectConnectGatewayAssociationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_direct_connect_gateway_associations_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_direct_connect_gateway_associations_response(
                response,
            )
        }
    }
}

/// <p>Lists the attachments between your Direct Connect gateways and virtual interfaces. You must specify
/// a Direct Connect gateway, a virtual interface, or both. If you specify a Direct Connect gateway, the response contains
/// all virtual interfaces attached to the Direct Connect gateway. If you specify a virtual interface, the
/// response contains all Direct Connect gateways attached to the virtual interface. If you specify both,
/// the response contains the attachment between the Direct Connect gateway and the virtual interface.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDirectConnectGatewayAttachments {
    _private: (),
}
impl DescribeDirectConnectGatewayAttachments {
    /// Creates a new builder-style object to manufacture [`DescribeDirectConnectGatewayAttachmentsInput`](crate::input::DescribeDirectConnectGatewayAttachmentsInput)
    pub fn builder() -> crate::input::describe_direct_connect_gateway_attachments_input::Builder {
        crate::input::describe_direct_connect_gateway_attachments_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDirectConnectGatewayAttachments {
    type Output = std::result::Result<
        crate::output::DescribeDirectConnectGatewayAttachmentsOutput,
        crate::error::DescribeDirectConnectGatewayAttachmentsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_direct_connect_gateway_attachments_error(
                response,
            )
        } else {
            crate::operation_deser::parse_describe_direct_connect_gateway_attachments_response(
                response,
            )
        }
    }
}

/// <p>Lists all your Direct Connect gateways or only the specified Direct Connect gateway. Deleted Direct Connect gateways are not returned.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDirectConnectGateways {
    _private: (),
}
impl DescribeDirectConnectGateways {
    /// Creates a new builder-style object to manufacture [`DescribeDirectConnectGatewaysInput`](crate::input::DescribeDirectConnectGatewaysInput)
    pub fn builder() -> crate::input::describe_direct_connect_gateways_input::Builder {
        crate::input::describe_direct_connect_gateways_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDirectConnectGateways {
    type Output = std::result::Result<
        crate::output::DescribeDirectConnectGatewaysOutput,
        crate::error::DescribeDirectConnectGatewaysError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_direct_connect_gateways_error(response)
        } else {
            crate::operation_deser::parse_describe_direct_connect_gateways_response(response)
        }
    }
}

/// <p>Lists the hosted connections that have been provisioned on the specified
/// interconnect or link aggregation group (LAG).</p>
/// <note>
/// <p>Intended for use by Direct Connect Partners only.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeHostedConnections {
    _private: (),
}
impl DescribeHostedConnections {
    /// Creates a new builder-style object to manufacture [`DescribeHostedConnectionsInput`](crate::input::DescribeHostedConnectionsInput)
    pub fn builder() -> crate::input::describe_hosted_connections_input::Builder {
        crate::input::describe_hosted_connections_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeHostedConnections {
    type Output = std::result::Result<
        crate::output::DescribeHostedConnectionsOutput,
        crate::error::DescribeHostedConnectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_hosted_connections_error(response)
        } else {
            crate::operation_deser::parse_describe_hosted_connections_response(response)
        }
    }
}

/// <p>Deprecated. Use <a>DescribeLoa</a> instead.</p>
/// <p>Gets the LOA-CFA for the specified interconnect.</p>
/// <p>The Letter of Authorization - Connecting Facility Assignment (LOA-CFA) is a document that is used when establishing your cross connect to Amazon Web Services at the colocation facility.
/// For more information, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/Colocation.html">Requesting Cross Connects at Direct Connect Locations</a>
/// in the <i>Direct Connect User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInterconnectLoa {
    _private: (),
}
impl DescribeInterconnectLoa {
    /// Creates a new builder-style object to manufacture [`DescribeInterconnectLoaInput`](crate::input::DescribeInterconnectLoaInput)
    pub fn builder() -> crate::input::describe_interconnect_loa_input::Builder {
        crate::input::describe_interconnect_loa_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInterconnectLoa {
    type Output = std::result::Result<
        crate::output::DescribeInterconnectLoaOutput,
        crate::error::DescribeInterconnectLoaError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_interconnect_loa_error(response)
        } else {
            crate::operation_deser::parse_describe_interconnect_loa_response(response)
        }
    }
}

/// <p>Lists the interconnects owned by the account or only the specified interconnect.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeInterconnects {
    _private: (),
}
impl DescribeInterconnects {
    /// Creates a new builder-style object to manufacture [`DescribeInterconnectsInput`](crate::input::DescribeInterconnectsInput)
    pub fn builder() -> crate::input::describe_interconnects_input::Builder {
        crate::input::describe_interconnects_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeInterconnects {
    type Output = std::result::Result<
        crate::output::DescribeInterconnectsOutput,
        crate::error::DescribeInterconnectsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_interconnects_error(response)
        } else {
            crate::operation_deser::parse_describe_interconnects_response(response)
        }
    }
}

/// <p>Describes all your link aggregation groups (LAG) or the specified LAG.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLags {
    _private: (),
}
impl DescribeLags {
    /// Creates a new builder-style object to manufacture [`DescribeLagsInput`](crate::input::DescribeLagsInput)
    pub fn builder() -> crate::input::describe_lags_input::Builder {
        crate::input::describe_lags_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeLags {
    type Output =
        std::result::Result<crate::output::DescribeLagsOutput, crate::error::DescribeLagsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_lags_error(response)
        } else {
            crate::operation_deser::parse_describe_lags_response(response)
        }
    }
}

/// <p>Gets the LOA-CFA for a connection, interconnect, or link aggregation group (LAG).</p>
/// <p>The Letter of Authorization - Connecting Facility Assignment (LOA-CFA) is a document that is used when establishing
/// your cross connect to Amazon Web Services at the colocation facility. For more information, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/Colocation.html">Requesting Cross Connects at Direct Connect Locations</a>
/// in the <i>Direct Connect User Guide</i>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLoa {
    _private: (),
}
impl DescribeLoa {
    /// Creates a new builder-style object to manufacture [`DescribeLoaInput`](crate::input::DescribeLoaInput)
    pub fn builder() -> crate::input::describe_loa_input::Builder {
        crate::input::describe_loa_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeLoa {
    type Output =
        std::result::Result<crate::output::DescribeLoaOutput, crate::error::DescribeLoaError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_loa_error(response)
        } else {
            crate::operation_deser::parse_describe_loa_response(response)
        }
    }
}

/// <p>Lists the Direct Connect locations in the current Region. These are the locations that can be selected when calling
/// <a>CreateConnection</a> or <a>CreateInterconnect</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeLocations {
    _private: (),
}
impl DescribeLocations {
    /// Creates a new builder-style object to manufacture [`DescribeLocationsInput`](crate::input::DescribeLocationsInput)
    pub fn builder() -> crate::input::describe_locations_input::Builder {
        crate::input::describe_locations_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeLocations {
    type Output = std::result::Result<
        crate::output::DescribeLocationsOutput,
        crate::error::DescribeLocationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_locations_error(response)
        } else {
            crate::operation_deser::parse_describe_locations_response(response)
        }
    }
}

/// <p>Describes the tags associated with the specified Direct Connect resources.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeTags {
    _private: (),
}
impl DescribeTags {
    /// Creates a new builder-style object to manufacture [`DescribeTagsInput`](crate::input::DescribeTagsInput)
    pub fn builder() -> crate::input::describe_tags_input::Builder {
        crate::input::describe_tags_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeTags {
    type Output =
        std::result::Result<crate::output::DescribeTagsOutput, crate::error::DescribeTagsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_tags_error(response)
        } else {
            crate::operation_deser::parse_describe_tags_response(response)
        }
    }
}

/// <p>Lists the virtual private gateways owned by the account.</p>
/// <p>You can create one or more Direct Connect private virtual interfaces linked to a virtual private gateway.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVirtualGateways {
    _private: (),
}
impl DescribeVirtualGateways {
    /// Creates a new builder-style object to manufacture [`DescribeVirtualGatewaysInput`](crate::input::DescribeVirtualGatewaysInput)
    pub fn builder() -> crate::input::describe_virtual_gateways_input::Builder {
        crate::input::describe_virtual_gateways_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVirtualGateways {
    type Output = std::result::Result<
        crate::output::DescribeVirtualGatewaysOutput,
        crate::error::DescribeVirtualGatewaysError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_virtual_gateways_error(response)
        } else {
            crate::operation_deser::parse_describe_virtual_gateways_response(response)
        }
    }
}

/// <p>Displays all virtual interfaces for an account. Virtual interfaces deleted fewer
/// than 15 minutes before you make the request are also returned. If you specify a
/// connection ID, only the virtual interfaces associated with the connection are returned.
/// If you specify a virtual interface ID, then only a single virtual interface is returned.</p>
/// <p>A virtual interface (VLAN) transmits the traffic between the Direct Connect location and the customer network.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeVirtualInterfaces {
    _private: (),
}
impl DescribeVirtualInterfaces {
    /// Creates a new builder-style object to manufacture [`DescribeVirtualInterfacesInput`](crate::input::DescribeVirtualInterfacesInput)
    pub fn builder() -> crate::input::describe_virtual_interfaces_input::Builder {
        crate::input::describe_virtual_interfaces_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeVirtualInterfaces {
    type Output = std::result::Result<
        crate::output::DescribeVirtualInterfacesOutput,
        crate::error::DescribeVirtualInterfacesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_virtual_interfaces_error(response)
        } else {
            crate::operation_deser::parse_describe_virtual_interfaces_response(response)
        }
    }
}

/// <p>Disassociates a connection from a link aggregation group (LAG). The connection is
/// interrupted and re-established as a standalone connection (the connection is not
/// deleted; to delete the connection, use the <a>DeleteConnection</a> request).
/// If the LAG has associated virtual interfaces or hosted connections, they remain
/// associated with the LAG. A disassociated connection owned by an Direct Connect Partner is
/// automatically converted to an interconnect.</p>
/// <p>If disassociating the connection would cause the LAG to fall below its setting for
/// minimum number of operational connections, the request fails, except when it's the last
/// member of the LAG. If all connections are disassociated, the LAG continues to exist as
/// an empty LAG with no physical connections. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateConnectionFromLag {
    _private: (),
}
impl DisassociateConnectionFromLag {
    /// Creates a new builder-style object to manufacture [`DisassociateConnectionFromLagInput`](crate::input::DisassociateConnectionFromLagInput)
    pub fn builder() -> crate::input::disassociate_connection_from_lag_input::Builder {
        crate::input::disassociate_connection_from_lag_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateConnectionFromLag {
    type Output = std::result::Result<
        crate::output::DisassociateConnectionFromLagOutput,
        crate::error::DisassociateConnectionFromLagError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_connection_from_lag_error(response)
        } else {
            crate::operation_deser::parse_disassociate_connection_from_lag_response(response)
        }
    }
}

/// <p>Removes the association between a MAC Security (MACsec) security key and an Direct Connect dedicated connection.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateMacSecKey {
    _private: (),
}
impl DisassociateMacSecKey {
    /// Creates a new builder-style object to manufacture [`DisassociateMacSecKeyInput`](crate::input::DisassociateMacSecKeyInput)
    pub fn builder() -> crate::input::disassociate_mac_sec_key_input::Builder {
        crate::input::disassociate_mac_sec_key_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DisassociateMacSecKey {
    type Output = std::result::Result<
        crate::output::DisassociateMacSecKeyOutput,
        crate::error::DisassociateMacSecKeyError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_disassociate_mac_sec_key_error(response)
        } else {
            crate::operation_deser::parse_disassociate_mac_sec_key_response(response)
        }
    }
}

/// <p>Lists the virtual interface failover test history.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListVirtualInterfaceTestHistory {
    _private: (),
}
impl ListVirtualInterfaceTestHistory {
    /// Creates a new builder-style object to manufacture [`ListVirtualInterfaceTestHistoryInput`](crate::input::ListVirtualInterfaceTestHistoryInput)
    pub fn builder() -> crate::input::list_virtual_interface_test_history_input::Builder {
        crate::input::list_virtual_interface_test_history_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListVirtualInterfaceTestHistory {
    type Output = std::result::Result<
        crate::output::ListVirtualInterfaceTestHistoryOutput,
        crate::error::ListVirtualInterfaceTestHistoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_virtual_interface_test_history_error(response)
        } else {
            crate::operation_deser::parse_list_virtual_interface_test_history_response(response)
        }
    }
}

/// <p>Starts the virtual interface failover test that verifies your configuration meets your resiliency requirements by placing the BGP peering session in the DOWN state. You can then send traffic to verify that there are no outages.</p>
/// <p>You can run the test on public, private, transit, and hosted virtual interfaces.</p>
/// <p>You can use <a href="https://docs.aws.amazon.com/directconnect/latest/APIReference/API_ListVirtualInterfaceTestHistory.html">ListVirtualInterfaceTestHistory</a> to view the virtual interface test history.</p>
/// <p>If you need to stop the test before the test interval completes, use <a href="https://docs.aws.amazon.com/directconnect/latest/APIReference/API_StopBgpFailoverTest.html">StopBgpFailoverTest</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StartBgpFailoverTest {
    _private: (),
}
impl StartBgpFailoverTest {
    /// Creates a new builder-style object to manufacture [`StartBgpFailoverTestInput`](crate::input::StartBgpFailoverTestInput)
    pub fn builder() -> crate::input::start_bgp_failover_test_input::Builder {
        crate::input::start_bgp_failover_test_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StartBgpFailoverTest {
    type Output = std::result::Result<
        crate::output::StartBgpFailoverTestOutput,
        crate::error::StartBgpFailoverTestError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_bgp_failover_test_error(response)
        } else {
            crate::operation_deser::parse_start_bgp_failover_test_response(response)
        }
    }
}

/// <p>Stops the virtual interface failover test.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct StopBgpFailoverTest {
    _private: (),
}
impl StopBgpFailoverTest {
    /// Creates a new builder-style object to manufacture [`StopBgpFailoverTestInput`](crate::input::StopBgpFailoverTestInput)
    pub fn builder() -> crate::input::stop_bgp_failover_test_input::Builder {
        crate::input::stop_bgp_failover_test_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for StopBgpFailoverTest {
    type Output = std::result::Result<
        crate::output::StopBgpFailoverTestOutput,
        crate::error::StopBgpFailoverTestError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_bgp_failover_test_error(response)
        } else {
            crate::operation_deser::parse_stop_bgp_failover_test_response(response)
        }
    }
}

/// <p>Adds the specified tags to the specified Direct Connect resource. Each resource can have a maximum of 50 tags.</p>
/// <p>Each tag consists of a key and an optional value. If a tag with the same key is already associated with the resource, this action updates its value.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Removes one or more tags from the specified Direct Connect resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Updates the Direct Connect dedicated connection configuration.</p>
/// <p>You can update the following parameters for a connection:</p>
/// <ul>
/// <li>
/// <p>The connection name</p>
/// </li>
/// <li>
/// <p>The connection's MAC Security (MACsec) encryption mode.</p>
/// </li>
/// </ul>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateConnection {
    _private: (),
}
impl UpdateConnection {
    /// Creates a new builder-style object to manufacture [`UpdateConnectionInput`](crate::input::UpdateConnectionInput)
    pub fn builder() -> crate::input::update_connection_input::Builder {
        crate::input::update_connection_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateConnection {
    type Output = std::result::Result<
        crate::output::UpdateConnectionOutput,
        crate::error::UpdateConnectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_connection_error(response)
        } else {
            crate::operation_deser::parse_update_connection_response(response)
        }
    }
}

/// <p>Updates the specified attributes of the Direct Connect gateway association.</p>
/// <p>Add or remove prefixes from the association.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDirectConnectGatewayAssociation {
    _private: (),
}
impl UpdateDirectConnectGatewayAssociation {
    /// Creates a new builder-style object to manufacture [`UpdateDirectConnectGatewayAssociationInput`](crate::input::UpdateDirectConnectGatewayAssociationInput)
    pub fn builder() -> crate::input::update_direct_connect_gateway_association_input::Builder {
        crate::input::update_direct_connect_gateway_association_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateDirectConnectGatewayAssociation {
    type Output = std::result::Result<
        crate::output::UpdateDirectConnectGatewayAssociationOutput,
        crate::error::UpdateDirectConnectGatewayAssociationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_direct_connect_gateway_association_error(response)
        } else {
            crate::operation_deser::parse_update_direct_connect_gateway_association_response(
                response,
            )
        }
    }
}

/// <p>Updates the attributes of the specified link aggregation group (LAG).</p>
/// <p>You can update the following LAG attributes:</p>
/// <ul>
/// <li>
/// <p>The name of the LAG.</p>
/// </li>
/// <li>
/// <p>The value for the minimum number of connections that must be operational
/// for the LAG itself to be operational. </p>
/// </li>
/// <li>
/// <p>The LAG's MACsec encryption mode.</p>
/// <p>Amazon Web Services assigns this value to each connection which is part of the LAG.</p>
/// </li>
/// <li>
/// <p>The tags</p>
/// </li>
/// </ul>
/// <note>
/// <p>If you adjust the threshold value for the minimum number of operational connections, ensure
/// that the new value does not cause the LAG to fall below the threshold and become
/// non-operational.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateLag {
    _private: (),
}
impl UpdateLag {
    /// Creates a new builder-style object to manufacture [`UpdateLagInput`](crate::input::UpdateLagInput)
    pub fn builder() -> crate::input::update_lag_input::Builder {
        crate::input::update_lag_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateLag {
    type Output = std::result::Result<crate::output::UpdateLagOutput, crate::error::UpdateLagError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_lag_error(response)
        } else {
            crate::operation_deser::parse_update_lag_response(response)
        }
    }
}

/// <p>Updates the specified attributes of the specified virtual private interface.</p>
/// <p>Setting the MTU of a virtual interface to 9001 (jumbo frames) can cause an update to
/// the underlying physical connection if it wasn't updated to support jumbo frames. Updating
/// the connection disrupts network connectivity for all virtual interfaces associated with
/// the connection for up to 30 seconds. To check whether your connection supports jumbo
/// frames, call <a>DescribeConnections</a>. To check whether your virtual q
/// interface supports jumbo frames, call <a>DescribeVirtualInterfaces</a>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateVirtualInterfaceAttributes {
    _private: (),
}
impl UpdateVirtualInterfaceAttributes {
    /// Creates a new builder-style object to manufacture [`UpdateVirtualInterfaceAttributesInput`](crate::input::UpdateVirtualInterfaceAttributesInput)
    pub fn builder() -> crate::input::update_virtual_interface_attributes_input::Builder {
        crate::input::update_virtual_interface_attributes_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateVirtualInterfaceAttributes {
    type Output = std::result::Result<
        crate::output::UpdateVirtualInterfaceAttributesOutput,
        crate::error::UpdateVirtualInterfaceAttributesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_virtual_interface_attributes_error(response)
        } else {
            crate::operation_deser::parse_update_virtual_interface_attributes_response(response)
        }
    }
}
