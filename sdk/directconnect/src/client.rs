// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    client: smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// An ergonomic service client for `OvertureService`.
///
/// This client allows ergonomic access to a `OvertureService`-shaped service.
/// Each method corresponds to an endpoint defined in the service's Smithy model,
/// and the request and response shapes are auto-generated from that same model.
///
/// # Using a Client
///
/// Once you have a client set up, you can access the service's endpoints
/// by calling the appropriate method on [`Client`]. Each such method
/// returns a request builder for that endpoint, with methods for setting
/// the various fields of the request. Once your request is complete, use
/// the `send` method to send the request. `send` returns a future, which
/// you then have to `.await` to get the service's response.
///
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#c-builder
/// [SigV4-signed requests]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#[derive(std::fmt::Debug)]
pub struct Client<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use smithy_client::Builder;

impl<C, M, R> From<smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    pub fn with_config(client: smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: smithy_client::bounds::SmithyConnector,
    M: smithy_client::bounds::SmithyMiddleware<C>,
    R: smithy_client::retry::NewRequestPolicy,
{
    pub fn accept_direct_connect_gateway_association_proposal(
        &self,
    ) -> fluent_builders::AcceptDirectConnectGatewayAssociationProposal<C, M, R> {
        fluent_builders::AcceptDirectConnectGatewayAssociationProposal::new(self.handle.clone())
    }
    pub fn allocate_connection_on_interconnect(
        &self,
    ) -> fluent_builders::AllocateConnectionOnInterconnect<C, M, R> {
        fluent_builders::AllocateConnectionOnInterconnect::new(self.handle.clone())
    }
    pub fn allocate_hosted_connection(&self) -> fluent_builders::AllocateHostedConnection<C, M, R> {
        fluent_builders::AllocateHostedConnection::new(self.handle.clone())
    }
    pub fn allocate_private_virtual_interface(
        &self,
    ) -> fluent_builders::AllocatePrivateVirtualInterface<C, M, R> {
        fluent_builders::AllocatePrivateVirtualInterface::new(self.handle.clone())
    }
    pub fn allocate_public_virtual_interface(
        &self,
    ) -> fluent_builders::AllocatePublicVirtualInterface<C, M, R> {
        fluent_builders::AllocatePublicVirtualInterface::new(self.handle.clone())
    }
    pub fn allocate_transit_virtual_interface(
        &self,
    ) -> fluent_builders::AllocateTransitVirtualInterface<C, M, R> {
        fluent_builders::AllocateTransitVirtualInterface::new(self.handle.clone())
    }
    pub fn associate_connection_with_lag(
        &self,
    ) -> fluent_builders::AssociateConnectionWithLag<C, M, R> {
        fluent_builders::AssociateConnectionWithLag::new(self.handle.clone())
    }
    pub fn associate_hosted_connection(
        &self,
    ) -> fluent_builders::AssociateHostedConnection<C, M, R> {
        fluent_builders::AssociateHostedConnection::new(self.handle.clone())
    }
    pub fn associate_mac_sec_key(&self) -> fluent_builders::AssociateMacSecKey<C, M, R> {
        fluent_builders::AssociateMacSecKey::new(self.handle.clone())
    }
    pub fn associate_virtual_interface(
        &self,
    ) -> fluent_builders::AssociateVirtualInterface<C, M, R> {
        fluent_builders::AssociateVirtualInterface::new(self.handle.clone())
    }
    pub fn confirm_connection(&self) -> fluent_builders::ConfirmConnection<C, M, R> {
        fluent_builders::ConfirmConnection::new(self.handle.clone())
    }
    pub fn confirm_private_virtual_interface(
        &self,
    ) -> fluent_builders::ConfirmPrivateVirtualInterface<C, M, R> {
        fluent_builders::ConfirmPrivateVirtualInterface::new(self.handle.clone())
    }
    pub fn confirm_public_virtual_interface(
        &self,
    ) -> fluent_builders::ConfirmPublicVirtualInterface<C, M, R> {
        fluent_builders::ConfirmPublicVirtualInterface::new(self.handle.clone())
    }
    pub fn confirm_transit_virtual_interface(
        &self,
    ) -> fluent_builders::ConfirmTransitVirtualInterface<C, M, R> {
        fluent_builders::ConfirmTransitVirtualInterface::new(self.handle.clone())
    }
    pub fn create_bgp_peer(&self) -> fluent_builders::CreateBGPPeer<C, M, R> {
        fluent_builders::CreateBGPPeer::new(self.handle.clone())
    }
    pub fn create_connection(&self) -> fluent_builders::CreateConnection<C, M, R> {
        fluent_builders::CreateConnection::new(self.handle.clone())
    }
    pub fn create_direct_connect_gateway(
        &self,
    ) -> fluent_builders::CreateDirectConnectGateway<C, M, R> {
        fluent_builders::CreateDirectConnectGateway::new(self.handle.clone())
    }
    pub fn create_direct_connect_gateway_association(
        &self,
    ) -> fluent_builders::CreateDirectConnectGatewayAssociation<C, M, R> {
        fluent_builders::CreateDirectConnectGatewayAssociation::new(self.handle.clone())
    }
    pub fn create_direct_connect_gateway_association_proposal(
        &self,
    ) -> fluent_builders::CreateDirectConnectGatewayAssociationProposal<C, M, R> {
        fluent_builders::CreateDirectConnectGatewayAssociationProposal::new(self.handle.clone())
    }
    pub fn create_interconnect(&self) -> fluent_builders::CreateInterconnect<C, M, R> {
        fluent_builders::CreateInterconnect::new(self.handle.clone())
    }
    pub fn create_lag(&self) -> fluent_builders::CreateLag<C, M, R> {
        fluent_builders::CreateLag::new(self.handle.clone())
    }
    pub fn create_private_virtual_interface(
        &self,
    ) -> fluent_builders::CreatePrivateVirtualInterface<C, M, R> {
        fluent_builders::CreatePrivateVirtualInterface::new(self.handle.clone())
    }
    pub fn create_public_virtual_interface(
        &self,
    ) -> fluent_builders::CreatePublicVirtualInterface<C, M, R> {
        fluent_builders::CreatePublicVirtualInterface::new(self.handle.clone())
    }
    pub fn create_transit_virtual_interface(
        &self,
    ) -> fluent_builders::CreateTransitVirtualInterface<C, M, R> {
        fluent_builders::CreateTransitVirtualInterface::new(self.handle.clone())
    }
    pub fn delete_bgp_peer(&self) -> fluent_builders::DeleteBGPPeer<C, M, R> {
        fluent_builders::DeleteBGPPeer::new(self.handle.clone())
    }
    pub fn delete_connection(&self) -> fluent_builders::DeleteConnection<C, M, R> {
        fluent_builders::DeleteConnection::new(self.handle.clone())
    }
    pub fn delete_direct_connect_gateway(
        &self,
    ) -> fluent_builders::DeleteDirectConnectGateway<C, M, R> {
        fluent_builders::DeleteDirectConnectGateway::new(self.handle.clone())
    }
    pub fn delete_direct_connect_gateway_association(
        &self,
    ) -> fluent_builders::DeleteDirectConnectGatewayAssociation<C, M, R> {
        fluent_builders::DeleteDirectConnectGatewayAssociation::new(self.handle.clone())
    }
    pub fn delete_direct_connect_gateway_association_proposal(
        &self,
    ) -> fluent_builders::DeleteDirectConnectGatewayAssociationProposal<C, M, R> {
        fluent_builders::DeleteDirectConnectGatewayAssociationProposal::new(self.handle.clone())
    }
    pub fn delete_interconnect(&self) -> fluent_builders::DeleteInterconnect<C, M, R> {
        fluent_builders::DeleteInterconnect::new(self.handle.clone())
    }
    pub fn delete_lag(&self) -> fluent_builders::DeleteLag<C, M, R> {
        fluent_builders::DeleteLag::new(self.handle.clone())
    }
    pub fn delete_virtual_interface(&self) -> fluent_builders::DeleteVirtualInterface<C, M, R> {
        fluent_builders::DeleteVirtualInterface::new(self.handle.clone())
    }
    pub fn describe_connection_loa(&self) -> fluent_builders::DescribeConnectionLoa<C, M, R> {
        fluent_builders::DescribeConnectionLoa::new(self.handle.clone())
    }
    pub fn describe_connections(&self) -> fluent_builders::DescribeConnections<C, M, R> {
        fluent_builders::DescribeConnections::new(self.handle.clone())
    }
    pub fn describe_connections_on_interconnect(
        &self,
    ) -> fluent_builders::DescribeConnectionsOnInterconnect<C, M, R> {
        fluent_builders::DescribeConnectionsOnInterconnect::new(self.handle.clone())
    }
    pub fn describe_direct_connect_gateway_association_proposals(
        &self,
    ) -> fluent_builders::DescribeDirectConnectGatewayAssociationProposals<C, M, R> {
        fluent_builders::DescribeDirectConnectGatewayAssociationProposals::new(self.handle.clone())
    }
    pub fn describe_direct_connect_gateway_associations(
        &self,
    ) -> fluent_builders::DescribeDirectConnectGatewayAssociations<C, M, R> {
        fluent_builders::DescribeDirectConnectGatewayAssociations::new(self.handle.clone())
    }
    pub fn describe_direct_connect_gateway_attachments(
        &self,
    ) -> fluent_builders::DescribeDirectConnectGatewayAttachments<C, M, R> {
        fluent_builders::DescribeDirectConnectGatewayAttachments::new(self.handle.clone())
    }
    pub fn describe_direct_connect_gateways(
        &self,
    ) -> fluent_builders::DescribeDirectConnectGateways<C, M, R> {
        fluent_builders::DescribeDirectConnectGateways::new(self.handle.clone())
    }
    pub fn describe_hosted_connections(
        &self,
    ) -> fluent_builders::DescribeHostedConnections<C, M, R> {
        fluent_builders::DescribeHostedConnections::new(self.handle.clone())
    }
    pub fn describe_interconnect_loa(&self) -> fluent_builders::DescribeInterconnectLoa<C, M, R> {
        fluent_builders::DescribeInterconnectLoa::new(self.handle.clone())
    }
    pub fn describe_interconnects(&self) -> fluent_builders::DescribeInterconnects<C, M, R> {
        fluent_builders::DescribeInterconnects::new(self.handle.clone())
    }
    pub fn describe_lags(&self) -> fluent_builders::DescribeLags<C, M, R> {
        fluent_builders::DescribeLags::new(self.handle.clone())
    }
    pub fn describe_loa(&self) -> fluent_builders::DescribeLoa<C, M, R> {
        fluent_builders::DescribeLoa::new(self.handle.clone())
    }
    pub fn describe_locations(&self) -> fluent_builders::DescribeLocations<C, M, R> {
        fluent_builders::DescribeLocations::new(self.handle.clone())
    }
    pub fn describe_tags(&self) -> fluent_builders::DescribeTags<C, M, R> {
        fluent_builders::DescribeTags::new(self.handle.clone())
    }
    pub fn describe_virtual_gateways(&self) -> fluent_builders::DescribeVirtualGateways<C, M, R> {
        fluent_builders::DescribeVirtualGateways::new(self.handle.clone())
    }
    pub fn describe_virtual_interfaces(
        &self,
    ) -> fluent_builders::DescribeVirtualInterfaces<C, M, R> {
        fluent_builders::DescribeVirtualInterfaces::new(self.handle.clone())
    }
    pub fn disassociate_connection_from_lag(
        &self,
    ) -> fluent_builders::DisassociateConnectionFromLag<C, M, R> {
        fluent_builders::DisassociateConnectionFromLag::new(self.handle.clone())
    }
    pub fn disassociate_mac_sec_key(&self) -> fluent_builders::DisassociateMacSecKey<C, M, R> {
        fluent_builders::DisassociateMacSecKey::new(self.handle.clone())
    }
    pub fn list_virtual_interface_test_history(
        &self,
    ) -> fluent_builders::ListVirtualInterfaceTestHistory<C, M, R> {
        fluent_builders::ListVirtualInterfaceTestHistory::new(self.handle.clone())
    }
    pub fn start_bgp_failover_test(&self) -> fluent_builders::StartBgpFailoverTest<C, M, R> {
        fluent_builders::StartBgpFailoverTest::new(self.handle.clone())
    }
    pub fn stop_bgp_failover_test(&self) -> fluent_builders::StopBgpFailoverTest<C, M, R> {
        fluent_builders::StopBgpFailoverTest::new(self.handle.clone())
    }
    pub fn tag_resource(&self) -> fluent_builders::TagResource<C, M, R> {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    pub fn untag_resource(&self) -> fluent_builders::UntagResource<C, M, R> {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    pub fn update_connection(&self) -> fluent_builders::UpdateConnection<C, M, R> {
        fluent_builders::UpdateConnection::new(self.handle.clone())
    }
    pub fn update_direct_connect_gateway_association(
        &self,
    ) -> fluent_builders::UpdateDirectConnectGatewayAssociation<C, M, R> {
        fluent_builders::UpdateDirectConnectGatewayAssociation::new(self.handle.clone())
    }
    pub fn update_lag(&self) -> fluent_builders::UpdateLag<C, M, R> {
        fluent_builders::UpdateLag::new(self.handle.clone())
    }
    pub fn update_virtual_interface_attributes(
        &self,
    ) -> fluent_builders::UpdateVirtualInterfaceAttributes<C, M, R> {
        fluent_builders::UpdateVirtualInterfaceAttributes::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct AcceptDirectConnectGatewayAssociationProposal<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::accept_direct_connect_gateway_association_proposal_input::Builder,
    }
    impl<C, M, R> AcceptDirectConnectGatewayAssociationProposal<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
                                pub async fn send(self) -> std::result::Result<crate::output::AcceptDirectConnectGatewayAssociationProposalOutput, smithy_http::result::SdkError<crate::error::AcceptDirectConnectGatewayAssociationProposalError>>
                                where
                                    R::Policy: smithy_client::bounds::SmithyRetryPolicy<crate::input::AcceptDirectConnectGatewayAssociationProposalInputOperationOutputAlias,
                                    crate::output::AcceptDirectConnectGatewayAssociationProposalOutput,
                                    crate::error::AcceptDirectConnectGatewayAssociationProposalError,
                                    crate::input::AcceptDirectConnectGatewayAssociationProposalInputOperationRetryAlias>,
                                {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Direct Connect gateway.</p>
        pub fn direct_connect_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.direct_connect_gateway_id(inp);
            self
        }
        pub fn set_direct_connect_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_direct_connect_gateway_id(input);
            self
        }
        /// <p>The ID of the request proposal.</p>
        pub fn proposal_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.proposal_id(inp);
            self
        }
        pub fn set_proposal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_proposal_id(input);
            self
        }
        /// <p>The ID of the account that owns the virtual private gateway or transit gateway.</p>
        pub fn associated_gateway_owner_account(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.associated_gateway_owner_account(inp);
            self
        }
        pub fn set_associated_gateway_owner_account(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_associated_gateway_owner_account(input);
            self
        }
        /// Appends an item to `overrideAllowedPrefixesToDirectConnectGateway`.
        ///
        /// To override the contents of this collection use [`set_override_allowed_prefixes_to_direct_connect_gateway`](Self::set_override_allowed_prefixes_to_direct_connect_gateway).
        /// <p>Overrides the Amazon VPC prefixes advertised to the Direct Connect gateway.</p>
        /// <p>For information about how to set the prefixes, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/multi-account-associate-vgw.html#allowed-prefixes">Allowed Prefixes</a> in the <i>Direct Connect User Guide</i>.</p>
        pub fn override_allowed_prefixes_to_direct_connect_gateway(
            mut self,
            inp: impl Into<crate::model::RouteFilterPrefix>,
        ) -> Self {
            self.inner = self
                .inner
                .override_allowed_prefixes_to_direct_connect_gateway(inp);
            self
        }
        pub fn set_override_allowed_prefixes_to_direct_connect_gateway(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RouteFilterPrefix>>,
        ) -> Self {
            self.inner = self
                .inner
                .set_override_allowed_prefixes_to_direct_connect_gateway(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AllocateConnectionOnInterconnect<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::allocate_connection_on_interconnect_input::Builder,
    }
    impl<C, M, R> AllocateConnectionOnInterconnect<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AllocateConnectionOnInterconnectOutput,
            smithy_http::result::SdkError<crate::error::AllocateConnectionOnInterconnectError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AllocateConnectionOnInterconnectInputOperationOutputAlias,
                crate::output::AllocateConnectionOnInterconnectOutput,
                crate::error::AllocateConnectionOnInterconnectError,
                crate::input::AllocateConnectionOnInterconnectInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The bandwidth of the connection. The possible values are 50Mbps, 100Mbps, 200Mbps,
        /// 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, and 10Gbps. Note that only those Direct Connect Partners
        /// who have met specific requirements
        /// are allowed to create a 1Gbps, 2Gbps, 5Gbps or 10Gbps hosted connection.</p>
        pub fn bandwidth(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bandwidth(inp);
            self
        }
        pub fn set_bandwidth(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bandwidth(input);
            self
        }
        /// <p>The name of the provisioned connection.</p>
        pub fn connection_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_name(inp);
            self
        }
        pub fn set_connection_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_name(input);
            self
        }
        /// <p>The ID of the account of the customer for whom the connection will be provisioned.</p>
        pub fn owner_account(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.owner_account(inp);
            self
        }
        pub fn set_owner_account(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_owner_account(input);
            self
        }
        /// <p>The ID of the interconnect on which the connection will be provisioned.</p>
        pub fn interconnect_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.interconnect_id(inp);
            self
        }
        pub fn set_interconnect_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_interconnect_id(input);
            self
        }
        /// <p>The dedicated VLAN provisioned to the connection.</p>
        pub fn vlan(mut self, inp: i32) -> Self {
            self.inner = self.inner.vlan(inp);
            self
        }
        pub fn set_vlan(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_vlan(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AllocateHostedConnection<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::allocate_hosted_connection_input::Builder,
    }
    impl<C, M, R> AllocateHostedConnection<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AllocateHostedConnectionOutput,
            smithy_http::result::SdkError<crate::error::AllocateHostedConnectionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AllocateHostedConnectionInputOperationOutputAlias,
                crate::output::AllocateHostedConnectionOutput,
                crate::error::AllocateHostedConnectionError,
                crate::input::AllocateHostedConnectionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the interconnect or LAG.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// <p>The ID of the account ID of the customer for the connection.</p>
        pub fn owner_account(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.owner_account(inp);
            self
        }
        pub fn set_owner_account(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_owner_account(input);
            self
        }
        /// <p>The bandwidth of the connection. The possible values are 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, 500Mbps, 1Gbps, 2Gbps, 5Gbps, and 10Gbps. Note that only those Direct Connect Partners who have met specific requirements are allowed to create a 1Gbps, 2Gbps, 5Gbps or 10Gbps hosted connection. </p>
        pub fn bandwidth(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bandwidth(inp);
            self
        }
        pub fn set_bandwidth(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bandwidth(input);
            self
        }
        /// <p>The name of the hosted connection.</p>
        pub fn connection_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_name(inp);
            self
        }
        pub fn set_connection_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_name(input);
            self
        }
        /// <p>The dedicated VLAN provisioned to the hosted connection.</p>
        pub fn vlan(mut self, inp: i32) -> Self {
            self.inner = self.inner.vlan(inp);
            self
        }
        pub fn set_vlan(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_vlan(input);
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags associated with the connection.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AllocatePrivateVirtualInterface<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::allocate_private_virtual_interface_input::Builder,
    }
    impl<C, M, R> AllocatePrivateVirtualInterface<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AllocatePrivateVirtualInterfaceOutput,
            smithy_http::result::SdkError<crate::error::AllocatePrivateVirtualInterfaceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AllocatePrivateVirtualInterfaceInputOperationOutputAlias,
                crate::output::AllocatePrivateVirtualInterfaceOutput,
                crate::error::AllocatePrivateVirtualInterfaceError,
                crate::input::AllocatePrivateVirtualInterfaceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the connection on which the private virtual interface is provisioned.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// <p>The ID of the account that owns the virtual private interface.</p>
        pub fn owner_account(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.owner_account(inp);
            self
        }
        pub fn set_owner_account(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_owner_account(input);
            self
        }
        /// <p>Information about the private virtual interface.</p>
        pub fn new_private_virtual_interface_allocation(
            mut self,
            inp: crate::model::NewPrivateVirtualInterfaceAllocation,
        ) -> Self {
            self.inner = self.inner.new_private_virtual_interface_allocation(inp);
            self
        }
        pub fn set_new_private_virtual_interface_allocation(
            mut self,
            input: std::option::Option<crate::model::NewPrivateVirtualInterfaceAllocation>,
        ) -> Self {
            self.inner = self
                .inner
                .set_new_private_virtual_interface_allocation(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AllocatePublicVirtualInterface<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::allocate_public_virtual_interface_input::Builder,
    }
    impl<C, M, R> AllocatePublicVirtualInterface<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AllocatePublicVirtualInterfaceOutput,
            smithy_http::result::SdkError<crate::error::AllocatePublicVirtualInterfaceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AllocatePublicVirtualInterfaceInputOperationOutputAlias,
                crate::output::AllocatePublicVirtualInterfaceOutput,
                crate::error::AllocatePublicVirtualInterfaceError,
                crate::input::AllocatePublicVirtualInterfaceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the connection on which the public virtual interface is provisioned.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// <p>The ID of the account that owns the public virtual interface.</p>
        pub fn owner_account(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.owner_account(inp);
            self
        }
        pub fn set_owner_account(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_owner_account(input);
            self
        }
        /// <p>Information about the public virtual interface.</p>
        pub fn new_public_virtual_interface_allocation(
            mut self,
            inp: crate::model::NewPublicVirtualInterfaceAllocation,
        ) -> Self {
            self.inner = self.inner.new_public_virtual_interface_allocation(inp);
            self
        }
        pub fn set_new_public_virtual_interface_allocation(
            mut self,
            input: std::option::Option<crate::model::NewPublicVirtualInterfaceAllocation>,
        ) -> Self {
            self.inner = self
                .inner
                .set_new_public_virtual_interface_allocation(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AllocateTransitVirtualInterface<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::allocate_transit_virtual_interface_input::Builder,
    }
    impl<C, M, R> AllocateTransitVirtualInterface<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AllocateTransitVirtualInterfaceOutput,
            smithy_http::result::SdkError<crate::error::AllocateTransitVirtualInterfaceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AllocateTransitVirtualInterfaceInputOperationOutputAlias,
                crate::output::AllocateTransitVirtualInterfaceOutput,
                crate::error::AllocateTransitVirtualInterfaceError,
                crate::input::AllocateTransitVirtualInterfaceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the connection on which the transit virtual interface is provisioned.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// <p>The ID of the account that owns the transit virtual interface.</p>
        pub fn owner_account(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.owner_account(inp);
            self
        }
        pub fn set_owner_account(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_owner_account(input);
            self
        }
        /// <p>Information about the transit virtual interface.</p>
        pub fn new_transit_virtual_interface_allocation(
            mut self,
            inp: crate::model::NewTransitVirtualInterfaceAllocation,
        ) -> Self {
            self.inner = self.inner.new_transit_virtual_interface_allocation(inp);
            self
        }
        pub fn set_new_transit_virtual_interface_allocation(
            mut self,
            input: std::option::Option<crate::model::NewTransitVirtualInterfaceAllocation>,
        ) -> Self {
            self.inner = self
                .inner
                .set_new_transit_virtual_interface_allocation(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AssociateConnectionWithLag<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::associate_connection_with_lag_input::Builder,
    }
    impl<C, M, R> AssociateConnectionWithLag<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateConnectionWithLagOutput,
            smithy_http::result::SdkError<crate::error::AssociateConnectionWithLagError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AssociateConnectionWithLagInputOperationOutputAlias,
                crate::output::AssociateConnectionWithLagOutput,
                crate::error::AssociateConnectionWithLagError,
                crate::input::AssociateConnectionWithLagInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the connection.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// <p>The ID of the LAG with which to associate the connection.</p>
        pub fn lag_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.lag_id(inp);
            self
        }
        pub fn set_lag_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_lag_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AssociateHostedConnection<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::associate_hosted_connection_input::Builder,
    }
    impl<C, M, R> AssociateHostedConnection<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateHostedConnectionOutput,
            smithy_http::result::SdkError<crate::error::AssociateHostedConnectionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AssociateHostedConnectionInputOperationOutputAlias,
                crate::output::AssociateHostedConnectionOutput,
                crate::error::AssociateHostedConnectionError,
                crate::input::AssociateHostedConnectionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the hosted connection.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// <p>The ID of the interconnect or the LAG.</p>
        pub fn parent_connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.parent_connection_id(inp);
            self
        }
        pub fn set_parent_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_parent_connection_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AssociateMacSecKey<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::associate_mac_sec_key_input::Builder,
    }
    impl<C, M, R> AssociateMacSecKey<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateMacSecKeyOutput,
            smithy_http::result::SdkError<crate::error::AssociateMacSecKeyError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AssociateMacSecKeyInputOperationOutputAlias,
                crate::output::AssociateMacSecKeyOutput,
                crate::error::AssociateMacSecKeyError,
                crate::input::AssociateMacSecKeyInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the dedicated connection (dxcon-xxxx), or the ID of the LAG (dxlag-xxxx).</p>
        /// <p>You can use <a>DescribeConnections</a> or <a>DescribeLags</a> to retrieve connection ID.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the MAC Security (MACsec) secret key to associate with the dedicated connection.</p>
        /// <p>You can use <a>DescribeConnections</a> or <a>DescribeLags</a> to retrieve the MAC Security (MACsec) secret key.</p>
        /// <p>If you use this request parameter, you do not use the <code>ckn</code> and <code>cak</code> request parameters.</p>
        pub fn secret_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_arn(inp);
            self
        }
        pub fn set_secret_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_arn(input);
            self
        }
        /// <p>The MAC Security (MACsec) CKN to associate with the dedicated connection.</p>
        /// <p>You can create the CKN/CAK pair using an industry standard tool.</p>
        /// <p> The valid values are 64 hexadecimal characters (0-9, A-E).</p>
        /// <p>If you use this request parameter, you must use the <code>cak</code> request parameter and not use the <code>secretARN</code> request parameter.</p>
        pub fn ckn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.ckn(inp);
            self
        }
        pub fn set_ckn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_ckn(input);
            self
        }
        /// <p>The MAC Security (MACsec) CAK to associate with the dedicated connection.</p>
        /// <p>You can create the CKN/CAK pair using an industry standard tool.</p>
        /// <p> The valid values are 64 hexadecimal characters (0-9, A-E).</p>
        /// <p>If you use this request parameter, you must use the <code>ckn</code> request parameter and not use the <code>secretARN</code> request parameter.</p>
        pub fn cak(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cak(inp);
            self
        }
        pub fn set_cak(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_cak(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AssociateVirtualInterface<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::associate_virtual_interface_input::Builder,
    }
    impl<C, M, R> AssociateVirtualInterface<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateVirtualInterfaceOutput,
            smithy_http::result::SdkError<crate::error::AssociateVirtualInterfaceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::AssociateVirtualInterfaceInputOperationOutputAlias,
                crate::output::AssociateVirtualInterfaceOutput,
                crate::error::AssociateVirtualInterfaceError,
                crate::input::AssociateVirtualInterfaceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the virtual interface.</p>
        pub fn virtual_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_interface_id(inp);
            self
        }
        pub fn set_virtual_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_interface_id(input);
            self
        }
        /// <p>The ID of the LAG or connection.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ConfirmConnection<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::confirm_connection_input::Builder,
    }
    impl<C, M, R> ConfirmConnection<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ConfirmConnectionOutput,
            smithy_http::result::SdkError<crate::error::ConfirmConnectionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ConfirmConnectionInputOperationOutputAlias,
                crate::output::ConfirmConnectionOutput,
                crate::error::ConfirmConnectionError,
                crate::input::ConfirmConnectionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the hosted connection.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ConfirmPrivateVirtualInterface<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::confirm_private_virtual_interface_input::Builder,
    }
    impl<C, M, R> ConfirmPrivateVirtualInterface<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ConfirmPrivateVirtualInterfaceOutput,
            smithy_http::result::SdkError<crate::error::ConfirmPrivateVirtualInterfaceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ConfirmPrivateVirtualInterfaceInputOperationOutputAlias,
                crate::output::ConfirmPrivateVirtualInterfaceOutput,
                crate::error::ConfirmPrivateVirtualInterfaceError,
                crate::input::ConfirmPrivateVirtualInterfaceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the virtual interface.</p>
        pub fn virtual_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_interface_id(inp);
            self
        }
        pub fn set_virtual_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_interface_id(input);
            self
        }
        /// <p>The ID of the virtual private gateway.</p>
        pub fn virtual_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_gateway_id(inp);
            self
        }
        pub fn set_virtual_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_gateway_id(input);
            self
        }
        /// <p>The ID of the Direct Connect gateway.</p>
        pub fn direct_connect_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.direct_connect_gateway_id(inp);
            self
        }
        pub fn set_direct_connect_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_direct_connect_gateway_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ConfirmPublicVirtualInterface<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::confirm_public_virtual_interface_input::Builder,
    }
    impl<C, M, R> ConfirmPublicVirtualInterface<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ConfirmPublicVirtualInterfaceOutput,
            smithy_http::result::SdkError<crate::error::ConfirmPublicVirtualInterfaceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ConfirmPublicVirtualInterfaceInputOperationOutputAlias,
                crate::output::ConfirmPublicVirtualInterfaceOutput,
                crate::error::ConfirmPublicVirtualInterfaceError,
                crate::input::ConfirmPublicVirtualInterfaceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the virtual interface.</p>
        pub fn virtual_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_interface_id(inp);
            self
        }
        pub fn set_virtual_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_interface_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ConfirmTransitVirtualInterface<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::confirm_transit_virtual_interface_input::Builder,
    }
    impl<C, M, R> ConfirmTransitVirtualInterface<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ConfirmTransitVirtualInterfaceOutput,
            smithy_http::result::SdkError<crate::error::ConfirmTransitVirtualInterfaceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ConfirmTransitVirtualInterfaceInputOperationOutputAlias,
                crate::output::ConfirmTransitVirtualInterfaceOutput,
                crate::error::ConfirmTransitVirtualInterfaceError,
                crate::input::ConfirmTransitVirtualInterfaceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the virtual interface.</p>
        pub fn virtual_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_interface_id(inp);
            self
        }
        pub fn set_virtual_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_interface_id(input);
            self
        }
        /// <p>The ID of the Direct Connect gateway.</p>
        pub fn direct_connect_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.direct_connect_gateway_id(inp);
            self
        }
        pub fn set_direct_connect_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_direct_connect_gateway_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateBGPPeer<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_bgp_peer_input::Builder,
    }
    impl<C, M, R> CreateBGPPeer<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateBgpPeerOutput,
            smithy_http::result::SdkError<crate::error::CreateBGPPeerError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateBgpPeerInputOperationOutputAlias,
                crate::output::CreateBgpPeerOutput,
                crate::error::CreateBGPPeerError,
                crate::input::CreateBgpPeerInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the virtual interface.</p>
        pub fn virtual_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_interface_id(inp);
            self
        }
        pub fn set_virtual_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_interface_id(input);
            self
        }
        /// <p>Information about the BGP peer.</p>
        pub fn new_bgp_peer(mut self, inp: crate::model::NewBgpPeer) -> Self {
            self.inner = self.inner.new_bgp_peer(inp);
            self
        }
        pub fn set_new_bgp_peer(
            mut self,
            input: std::option::Option<crate::model::NewBgpPeer>,
        ) -> Self {
            self.inner = self.inner.set_new_bgp_peer(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateConnection<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_connection_input::Builder,
    }
    impl<C, M, R> CreateConnection<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateConnectionOutput,
            smithy_http::result::SdkError<crate::error::CreateConnectionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateConnectionInputOperationOutputAlias,
                crate::output::CreateConnectionOutput,
                crate::error::CreateConnectionError,
                crate::input::CreateConnectionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The location of the connection.</p>
        pub fn location(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.location(inp);
            self
        }
        pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_location(input);
            self
        }
        /// <p>The bandwidth of the connection.</p>
        pub fn bandwidth(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bandwidth(inp);
            self
        }
        pub fn set_bandwidth(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bandwidth(input);
            self
        }
        /// <p>The name of the connection.</p>
        pub fn connection_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_name(inp);
            self
        }
        pub fn set_connection_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_name(input);
            self
        }
        /// <p>The ID of the LAG.</p>
        pub fn lag_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.lag_id(inp);
            self
        }
        pub fn set_lag_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_lag_id(input);
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags to associate with the lag.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The name of the service provider associated with the requested connection.</p>
        pub fn provider_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provider_name(inp);
            self
        }
        pub fn set_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provider_name(input);
            self
        }
        /// <p>Indicates whether you want the connection to support MAC Security (MACsec).</p>
        /// <p>MAC Security (MACsec) is only available on dedicated connections. For information about MAC Security (MACsec) prerequisties, see  <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/direct-connect-mac-sec-getting-started.html#mac-sec-prerequisites">MACsec prerequisties</a> in the <i>Direct Connect User Guide</i>.</p>
        pub fn request_mac_sec(mut self, inp: bool) -> Self {
            self.inner = self.inner.request_mac_sec(inp);
            self
        }
        pub fn set_request_mac_sec(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_request_mac_sec(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateDirectConnectGateway<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_direct_connect_gateway_input::Builder,
    }
    impl<C, M, R> CreateDirectConnectGateway<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateDirectConnectGatewayOutput,
            smithy_http::result::SdkError<crate::error::CreateDirectConnectGatewayError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateDirectConnectGatewayInputOperationOutputAlias,
                crate::output::CreateDirectConnectGatewayOutput,
                crate::error::CreateDirectConnectGatewayError,
                crate::input::CreateDirectConnectGatewayInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the Direct Connect gateway.</p>
        pub fn direct_connect_gateway_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.direct_connect_gateway_name(inp);
            self
        }
        pub fn set_direct_connect_gateway_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_direct_connect_gateway_name(input);
            self
        }
        /// <p>The autonomous system number (ASN) for Border Gateway Protocol (BGP) to be configured
        /// on the Amazon side of the connection. The ASN must be in the private range of 64,512 to
        /// 65,534 or 4,200,000,000 to 4,294,967,294. The default is 64512.</p>
        pub fn amazon_side_asn(mut self, inp: i64) -> Self {
            self.inner = self.inner.amazon_side_asn(inp);
            self
        }
        pub fn set_amazon_side_asn(mut self, input: std::option::Option<i64>) -> Self {
            self.inner = self.inner.set_amazon_side_asn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateDirectConnectGatewayAssociation<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_direct_connect_gateway_association_input::Builder,
    }
    impl<C, M, R> CreateDirectConnectGatewayAssociation<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateDirectConnectGatewayAssociationOutput,
            smithy_http::result::SdkError<crate::error::CreateDirectConnectGatewayAssociationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateDirectConnectGatewayAssociationInputOperationOutputAlias,
                crate::output::CreateDirectConnectGatewayAssociationOutput,
                crate::error::CreateDirectConnectGatewayAssociationError,
                crate::input::CreateDirectConnectGatewayAssociationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Direct Connect gateway.</p>
        pub fn direct_connect_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.direct_connect_gateway_id(inp);
            self
        }
        pub fn set_direct_connect_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_direct_connect_gateway_id(input);
            self
        }
        /// <p>The ID of the virtual private gateway or transit gateway.</p>
        pub fn gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.gateway_id(inp);
            self
        }
        pub fn set_gateway_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_gateway_id(input);
            self
        }
        /// Appends an item to `addAllowedPrefixesToDirectConnectGateway`.
        ///
        /// To override the contents of this collection use [`set_add_allowed_prefixes_to_direct_connect_gateway`](Self::set_add_allowed_prefixes_to_direct_connect_gateway).
        /// <p>The Amazon VPC prefixes to advertise to the Direct Connect gateway</p>
        /// <p>This parameter is required when you create an association to a transit gateway.</p>
        /// <p>For information about how to set the prefixes, see <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/multi-account-associate-vgw.html#allowed-prefixes">Allowed Prefixes</a> in the <i>Direct Connect User Guide</i>.</p>
        pub fn add_allowed_prefixes_to_direct_connect_gateway(
            mut self,
            inp: impl Into<crate::model::RouteFilterPrefix>,
        ) -> Self {
            self.inner = self
                .inner
                .add_allowed_prefixes_to_direct_connect_gateway(inp);
            self
        }
        pub fn set_add_allowed_prefixes_to_direct_connect_gateway(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RouteFilterPrefix>>,
        ) -> Self {
            self.inner = self
                .inner
                .set_add_allowed_prefixes_to_direct_connect_gateway(input);
            self
        }
        /// <p>The ID of the virtual private gateway.</p>
        pub fn virtual_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_gateway_id(inp);
            self
        }
        pub fn set_virtual_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_gateway_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateDirectConnectGatewayAssociationProposal<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_direct_connect_gateway_association_proposal_input::Builder,
    }
    impl<C, M, R> CreateDirectConnectGatewayAssociationProposal<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
                                pub async fn send(self) -> std::result::Result<crate::output::CreateDirectConnectGatewayAssociationProposalOutput, smithy_http::result::SdkError<crate::error::CreateDirectConnectGatewayAssociationProposalError>>
                                where
                                    R::Policy: smithy_client::bounds::SmithyRetryPolicy<crate::input::CreateDirectConnectGatewayAssociationProposalInputOperationOutputAlias,
                                    crate::output::CreateDirectConnectGatewayAssociationProposalOutput,
                                    crate::error::CreateDirectConnectGatewayAssociationProposalError,
                                    crate::input::CreateDirectConnectGatewayAssociationProposalInputOperationRetryAlias>,
                                {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Direct Connect gateway.</p>
        pub fn direct_connect_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.direct_connect_gateway_id(inp);
            self
        }
        pub fn set_direct_connect_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_direct_connect_gateway_id(input);
            self
        }
        /// <p>The ID of the account that owns the Direct Connect gateway.</p>
        pub fn direct_connect_gateway_owner_account(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.direct_connect_gateway_owner_account(inp);
            self
        }
        pub fn set_direct_connect_gateway_owner_account(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_direct_connect_gateway_owner_account(input);
            self
        }
        /// <p>The ID of the virtual private gateway or transit gateway.</p>
        pub fn gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.gateway_id(inp);
            self
        }
        pub fn set_gateway_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_gateway_id(input);
            self
        }
        /// Appends an item to `addAllowedPrefixesToDirectConnectGateway`.
        ///
        /// To override the contents of this collection use [`set_add_allowed_prefixes_to_direct_connect_gateway`](Self::set_add_allowed_prefixes_to_direct_connect_gateway).
        /// <p>The Amazon VPC prefixes to advertise to the Direct Connect gateway.</p>
        pub fn add_allowed_prefixes_to_direct_connect_gateway(
            mut self,
            inp: impl Into<crate::model::RouteFilterPrefix>,
        ) -> Self {
            self.inner = self
                .inner
                .add_allowed_prefixes_to_direct_connect_gateway(inp);
            self
        }
        pub fn set_add_allowed_prefixes_to_direct_connect_gateway(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RouteFilterPrefix>>,
        ) -> Self {
            self.inner = self
                .inner
                .set_add_allowed_prefixes_to_direct_connect_gateway(input);
            self
        }
        /// Appends an item to `removeAllowedPrefixesToDirectConnectGateway`.
        ///
        /// To override the contents of this collection use [`set_remove_allowed_prefixes_to_direct_connect_gateway`](Self::set_remove_allowed_prefixes_to_direct_connect_gateway).
        /// <p>The Amazon VPC prefixes to no longer advertise to the Direct Connect gateway.</p>
        pub fn remove_allowed_prefixes_to_direct_connect_gateway(
            mut self,
            inp: impl Into<crate::model::RouteFilterPrefix>,
        ) -> Self {
            self.inner = self
                .inner
                .remove_allowed_prefixes_to_direct_connect_gateway(inp);
            self
        }
        pub fn set_remove_allowed_prefixes_to_direct_connect_gateway(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RouteFilterPrefix>>,
        ) -> Self {
            self.inner = self
                .inner
                .set_remove_allowed_prefixes_to_direct_connect_gateway(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateInterconnect<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_interconnect_input::Builder,
    }
    impl<C, M, R> CreateInterconnect<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateInterconnectOutput,
            smithy_http::result::SdkError<crate::error::CreateInterconnectError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateInterconnectInputOperationOutputAlias,
                crate::output::CreateInterconnectOutput,
                crate::error::CreateInterconnectError,
                crate::input::CreateInterconnectInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the interconnect.</p>
        pub fn interconnect_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.interconnect_name(inp);
            self
        }
        pub fn set_interconnect_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_interconnect_name(input);
            self
        }
        /// <p>The port bandwidth, in Gbps. The possible values are 1 and 10.</p>
        pub fn bandwidth(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bandwidth(inp);
            self
        }
        pub fn set_bandwidth(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bandwidth(input);
            self
        }
        /// <p>The location of the interconnect.</p>
        pub fn location(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.location(inp);
            self
        }
        pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_location(input);
            self
        }
        /// <p>The ID of the LAG.</p>
        pub fn lag_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.lag_id(inp);
            self
        }
        pub fn set_lag_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_lag_id(input);
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags to associate with the interconnect.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The name of the service provider associated with the interconnect.</p>
        pub fn provider_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provider_name(inp);
            self
        }
        pub fn set_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provider_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateLag<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_lag_input::Builder,
    }
    impl<C, M, R> CreateLag<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateLagOutput,
            smithy_http::result::SdkError<crate::error::CreateLagError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateLagInputOperationOutputAlias,
                crate::output::CreateLagOutput,
                crate::error::CreateLagError,
                crate::input::CreateLagInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The number of physical dedicated connections initially provisioned and bundled by the
        /// LAG.</p>
        pub fn number_of_connections(mut self, inp: i32) -> Self {
            self.inner = self.inner.number_of_connections(inp);
            self
        }
        pub fn set_number_of_connections(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_number_of_connections(input);
            self
        }
        /// <p>The location for the LAG.</p>
        pub fn location(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.location(inp);
            self
        }
        pub fn set_location(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_location(input);
            self
        }
        /// <p>The bandwidth of the individual physical dedicated connections bundled by the LAG. The
        /// possible values are 1Gbps and 10Gbps. </p>
        pub fn connections_bandwidth(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connections_bandwidth(inp);
            self
        }
        pub fn set_connections_bandwidth(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connections_bandwidth(input);
            self
        }
        /// <p>The name of the LAG.</p>
        pub fn lag_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.lag_name(inp);
            self
        }
        pub fn set_lag_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_lag_name(input);
            self
        }
        /// <p>The ID of an existing dedicated connection to migrate to the LAG.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags to associate with the LAG.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// Appends an item to `childConnectionTags`.
        ///
        /// To override the contents of this collection use [`set_child_connection_tags`](Self::set_child_connection_tags).
        /// <p>The tags to associate with the automtically created LAGs.</p>
        pub fn child_connection_tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.child_connection_tags(inp);
            self
        }
        pub fn set_child_connection_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_child_connection_tags(input);
            self
        }
        /// <p>The name of the service provider associated with the LAG.</p>
        pub fn provider_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provider_name(inp);
            self
        }
        pub fn set_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provider_name(input);
            self
        }
        /// <p>Indicates whether the connection will support MAC Security (MACsec).</p>
        /// <note>
        /// <p>All connections in the LAG must be capable of  supporting MAC Security (MACsec). For information about MAC Security (MACsec) prerequisties, see  <a href="https://docs.aws.amazon.com/directconnect/latest/UserGuide/direct-connect-mac-sec-getting-started.html#mac-sec-prerequisites">MACsec prerequisties</a> in the <i>Direct Connect User Guide</i>.</p>
        /// </note>
        pub fn request_mac_sec(mut self, inp: bool) -> Self {
            self.inner = self.inner.request_mac_sec(inp);
            self
        }
        pub fn set_request_mac_sec(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_request_mac_sec(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreatePrivateVirtualInterface<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_private_virtual_interface_input::Builder,
    }
    impl<C, M, R> CreatePrivateVirtualInterface<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreatePrivateVirtualInterfaceOutput,
            smithy_http::result::SdkError<crate::error::CreatePrivateVirtualInterfaceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreatePrivateVirtualInterfaceInputOperationOutputAlias,
                crate::output::CreatePrivateVirtualInterfaceOutput,
                crate::error::CreatePrivateVirtualInterfaceError,
                crate::input::CreatePrivateVirtualInterfaceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the connection.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// <p>Information about the private virtual interface.</p>
        pub fn new_private_virtual_interface(
            mut self,
            inp: crate::model::NewPrivateVirtualInterface,
        ) -> Self {
            self.inner = self.inner.new_private_virtual_interface(inp);
            self
        }
        pub fn set_new_private_virtual_interface(
            mut self,
            input: std::option::Option<crate::model::NewPrivateVirtualInterface>,
        ) -> Self {
            self.inner = self.inner.set_new_private_virtual_interface(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreatePublicVirtualInterface<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_public_virtual_interface_input::Builder,
    }
    impl<C, M, R> CreatePublicVirtualInterface<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreatePublicVirtualInterfaceOutput,
            smithy_http::result::SdkError<crate::error::CreatePublicVirtualInterfaceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreatePublicVirtualInterfaceInputOperationOutputAlias,
                crate::output::CreatePublicVirtualInterfaceOutput,
                crate::error::CreatePublicVirtualInterfaceError,
                crate::input::CreatePublicVirtualInterfaceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the connection.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// <p>Information about the public virtual interface.</p>
        pub fn new_public_virtual_interface(
            mut self,
            inp: crate::model::NewPublicVirtualInterface,
        ) -> Self {
            self.inner = self.inner.new_public_virtual_interface(inp);
            self
        }
        pub fn set_new_public_virtual_interface(
            mut self,
            input: std::option::Option<crate::model::NewPublicVirtualInterface>,
        ) -> Self {
            self.inner = self.inner.set_new_public_virtual_interface(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateTransitVirtualInterface<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_transit_virtual_interface_input::Builder,
    }
    impl<C, M, R> CreateTransitVirtualInterface<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateTransitVirtualInterfaceOutput,
            smithy_http::result::SdkError<crate::error::CreateTransitVirtualInterfaceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateTransitVirtualInterfaceInputOperationOutputAlias,
                crate::output::CreateTransitVirtualInterfaceOutput,
                crate::error::CreateTransitVirtualInterfaceError,
                crate::input::CreateTransitVirtualInterfaceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the connection.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// <p>Information about the transit virtual interface.</p>
        pub fn new_transit_virtual_interface(
            mut self,
            inp: crate::model::NewTransitVirtualInterface,
        ) -> Self {
            self.inner = self.inner.new_transit_virtual_interface(inp);
            self
        }
        pub fn set_new_transit_virtual_interface(
            mut self,
            input: std::option::Option<crate::model::NewTransitVirtualInterface>,
        ) -> Self {
            self.inner = self.inner.set_new_transit_virtual_interface(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteBGPPeer<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_bgp_peer_input::Builder,
    }
    impl<C, M, R> DeleteBGPPeer<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteBgpPeerOutput,
            smithy_http::result::SdkError<crate::error::DeleteBGPPeerError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteBgpPeerInputOperationOutputAlias,
                crate::output::DeleteBgpPeerOutput,
                crate::error::DeleteBGPPeerError,
                crate::input::DeleteBgpPeerInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the virtual interface.</p>
        pub fn virtual_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_interface_id(inp);
            self
        }
        pub fn set_virtual_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_interface_id(input);
            self
        }
        /// <p>The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.</p>
        pub fn asn(mut self, inp: i32) -> Self {
            self.inner = self.inner.asn(inp);
            self
        }
        pub fn set_asn(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_asn(input);
            self
        }
        /// <p>The IP address assigned to the customer interface.</p>
        pub fn customer_address(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.customer_address(inp);
            self
        }
        pub fn set_customer_address(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_customer_address(input);
            self
        }
        /// <p>The ID of the BGP peer.</p>
        pub fn bgp_peer_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bgp_peer_id(inp);
            self
        }
        pub fn set_bgp_peer_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bgp_peer_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteConnection<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_connection_input::Builder,
    }
    impl<C, M, R> DeleteConnection<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteConnectionOutput,
            smithy_http::result::SdkError<crate::error::DeleteConnectionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteConnectionInputOperationOutputAlias,
                crate::output::DeleteConnectionOutput,
                crate::error::DeleteConnectionError,
                crate::input::DeleteConnectionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the connection.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteDirectConnectGateway<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_direct_connect_gateway_input::Builder,
    }
    impl<C, M, R> DeleteDirectConnectGateway<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteDirectConnectGatewayOutput,
            smithy_http::result::SdkError<crate::error::DeleteDirectConnectGatewayError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteDirectConnectGatewayInputOperationOutputAlias,
                crate::output::DeleteDirectConnectGatewayOutput,
                crate::error::DeleteDirectConnectGatewayError,
                crate::input::DeleteDirectConnectGatewayInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Direct Connect gateway.</p>
        pub fn direct_connect_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.direct_connect_gateway_id(inp);
            self
        }
        pub fn set_direct_connect_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_direct_connect_gateway_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteDirectConnectGatewayAssociation<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_direct_connect_gateway_association_input::Builder,
    }
    impl<C, M, R> DeleteDirectConnectGatewayAssociation<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteDirectConnectGatewayAssociationOutput,
            smithy_http::result::SdkError<crate::error::DeleteDirectConnectGatewayAssociationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteDirectConnectGatewayAssociationInputOperationOutputAlias,
                crate::output::DeleteDirectConnectGatewayAssociationOutput,
                crate::error::DeleteDirectConnectGatewayAssociationError,
                crate::input::DeleteDirectConnectGatewayAssociationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Direct Connect gateway association.</p>
        pub fn association_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.association_id(inp);
            self
        }
        pub fn set_association_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_association_id(input);
            self
        }
        /// <p>The ID of the Direct Connect gateway.</p>
        pub fn direct_connect_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.direct_connect_gateway_id(inp);
            self
        }
        pub fn set_direct_connect_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_direct_connect_gateway_id(input);
            self
        }
        /// <p>The ID of the virtual private gateway.</p>
        pub fn virtual_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_gateway_id(inp);
            self
        }
        pub fn set_virtual_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_gateway_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteDirectConnectGatewayAssociationProposal<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_direct_connect_gateway_association_proposal_input::Builder,
    }
    impl<C, M, R> DeleteDirectConnectGatewayAssociationProposal<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
                                pub async fn send(self) -> std::result::Result<crate::output::DeleteDirectConnectGatewayAssociationProposalOutput, smithy_http::result::SdkError<crate::error::DeleteDirectConnectGatewayAssociationProposalError>>
                                where
                                    R::Policy: smithy_client::bounds::SmithyRetryPolicy<crate::input::DeleteDirectConnectGatewayAssociationProposalInputOperationOutputAlias,
                                    crate::output::DeleteDirectConnectGatewayAssociationProposalOutput,
                                    crate::error::DeleteDirectConnectGatewayAssociationProposalError,
                                    crate::input::DeleteDirectConnectGatewayAssociationProposalInputOperationRetryAlias>,
                                {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the proposal.</p>
        pub fn proposal_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.proposal_id(inp);
            self
        }
        pub fn set_proposal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_proposal_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteInterconnect<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_interconnect_input::Builder,
    }
    impl<C, M, R> DeleteInterconnect<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteInterconnectOutput,
            smithy_http::result::SdkError<crate::error::DeleteInterconnectError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteInterconnectInputOperationOutputAlias,
                crate::output::DeleteInterconnectOutput,
                crate::error::DeleteInterconnectError,
                crate::input::DeleteInterconnectInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the interconnect.</p>
        pub fn interconnect_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.interconnect_id(inp);
            self
        }
        pub fn set_interconnect_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_interconnect_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteLag<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_lag_input::Builder,
    }
    impl<C, M, R> DeleteLag<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteLagOutput,
            smithy_http::result::SdkError<crate::error::DeleteLagError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteLagInputOperationOutputAlias,
                crate::output::DeleteLagOutput,
                crate::error::DeleteLagError,
                crate::input::DeleteLagInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the LAG.</p>
        pub fn lag_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.lag_id(inp);
            self
        }
        pub fn set_lag_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_lag_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteVirtualInterface<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_virtual_interface_input::Builder,
    }
    impl<C, M, R> DeleteVirtualInterface<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteVirtualInterfaceOutput,
            smithy_http::result::SdkError<crate::error::DeleteVirtualInterfaceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteVirtualInterfaceInputOperationOutputAlias,
                crate::output::DeleteVirtualInterfaceOutput,
                crate::error::DeleteVirtualInterfaceError,
                crate::input::DeleteVirtualInterfaceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the virtual interface.</p>
        pub fn virtual_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_interface_id(inp);
            self
        }
        pub fn set_virtual_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_interface_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeConnectionLoa<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_connection_loa_input::Builder,
    }
    impl<C, M, R> DescribeConnectionLoa<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeConnectionLoaOutput,
            smithy_http::result::SdkError<crate::error::DescribeConnectionLoaError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeConnectionLoaInputOperationOutputAlias,
                crate::output::DescribeConnectionLoaOutput,
                crate::error::DescribeConnectionLoaError,
                crate::input::DescribeConnectionLoaInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the connection.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// <p>The name of the APN partner or service provider who establishes connectivity on your behalf. If you specify this parameter,
        /// the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.</p>
        pub fn provider_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provider_name(inp);
            self
        }
        pub fn set_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provider_name(input);
            self
        }
        /// <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
        pub fn loa_content_type(mut self, inp: crate::model::LoaContentType) -> Self {
            self.inner = self.inner.loa_content_type(inp);
            self
        }
        pub fn set_loa_content_type(
            mut self,
            input: std::option::Option<crate::model::LoaContentType>,
        ) -> Self {
            self.inner = self.inner.set_loa_content_type(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeConnections<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_connections_input::Builder,
    }
    impl<C, M, R> DescribeConnections<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeConnectionsOutput,
            smithy_http::result::SdkError<crate::error::DescribeConnectionsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeConnectionsInputOperationOutputAlias,
                crate::output::DescribeConnectionsOutput,
                crate::error::DescribeConnectionsError,
                crate::input::DescribeConnectionsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the connection.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeConnectionsOnInterconnect<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_connections_on_interconnect_input::Builder,
    }
    impl<C, M, R> DescribeConnectionsOnInterconnect<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeConnectionsOnInterconnectOutput,
            smithy_http::result::SdkError<crate::error::DescribeConnectionsOnInterconnectError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeConnectionsOnInterconnectInputOperationOutputAlias,
                crate::output::DescribeConnectionsOnInterconnectOutput,
                crate::error::DescribeConnectionsOnInterconnectError,
                crate::input::DescribeConnectionsOnInterconnectInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the interconnect.</p>
        pub fn interconnect_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.interconnect_id(inp);
            self
        }
        pub fn set_interconnect_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_interconnect_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeDirectConnectGatewayAssociationProposals<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_direct_connect_gateway_association_proposals_input::Builder,
    }
    impl<C, M, R> DescribeDirectConnectGatewayAssociationProposals<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
                                pub async fn send(self) -> std::result::Result<crate::output::DescribeDirectConnectGatewayAssociationProposalsOutput, smithy_http::result::SdkError<crate::error::DescribeDirectConnectGatewayAssociationProposalsError>>
                                where
                                    R::Policy: smithy_client::bounds::SmithyRetryPolicy<crate::input::DescribeDirectConnectGatewayAssociationProposalsInputOperationOutputAlias,
                                    crate::output::DescribeDirectConnectGatewayAssociationProposalsOutput,
                                    crate::error::DescribeDirectConnectGatewayAssociationProposalsError,
                                    crate::input::DescribeDirectConnectGatewayAssociationProposalsInputOperationRetryAlias>,
                                {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Direct Connect gateway.</p>
        pub fn direct_connect_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.direct_connect_gateway_id(inp);
            self
        }
        pub fn set_direct_connect_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_direct_connect_gateway_id(input);
            self
        }
        /// <p>The ID of the proposal.</p>
        pub fn proposal_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.proposal_id(inp);
            self
        }
        pub fn set_proposal_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_proposal_id(input);
            self
        }
        /// <p>The ID of the associated gateway.</p>
        pub fn associated_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.associated_gateway_id(inp);
            self
        }
        pub fn set_associated_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_associated_gateway_id(input);
            self
        }
        /// <p>The maximum number of results to return with a single call.
        /// To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
        /// <p>If <code>MaxResults</code> is given a value larger than 100, only 100 results are
        /// returned.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeDirectConnectGatewayAssociations<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_direct_connect_gateway_associations_input::Builder,
    }
    impl<C, M, R> DescribeDirectConnectGatewayAssociations<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeDirectConnectGatewayAssociationsOutput,
            smithy_http::result::SdkError<
                crate::error::DescribeDirectConnectGatewayAssociationsError,
            >,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeDirectConnectGatewayAssociationsInputOperationOutputAlias,
                crate::output::DescribeDirectConnectGatewayAssociationsOutput,
                crate::error::DescribeDirectConnectGatewayAssociationsError,
                crate::input::DescribeDirectConnectGatewayAssociationsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Direct Connect gateway association.</p>
        pub fn association_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.association_id(inp);
            self
        }
        pub fn set_association_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_association_id(input);
            self
        }
        /// <p>The ID of the associated gateway.</p>
        pub fn associated_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.associated_gateway_id(inp);
            self
        }
        pub fn set_associated_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_associated_gateway_id(input);
            self
        }
        /// <p>The ID of the Direct Connect gateway.</p>
        pub fn direct_connect_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.direct_connect_gateway_id(inp);
            self
        }
        pub fn set_direct_connect_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_direct_connect_gateway_id(input);
            self
        }
        /// <p>The maximum number of results to return with a single call.
        /// To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
        /// <p>If <code>MaxResults</code> is given a value larger than 100, only 100 results are
        /// returned.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token provided in the previous call to retrieve the next page.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The ID of the virtual private gateway or transit gateway.</p>
        pub fn virtual_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_gateway_id(inp);
            self
        }
        pub fn set_virtual_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_gateway_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeDirectConnectGatewayAttachments<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_direct_connect_gateway_attachments_input::Builder,
    }
    impl<C, M, R> DescribeDirectConnectGatewayAttachments<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeDirectConnectGatewayAttachmentsOutput,
            smithy_http::result::SdkError<
                crate::error::DescribeDirectConnectGatewayAttachmentsError,
            >,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeDirectConnectGatewayAttachmentsInputOperationOutputAlias,
                crate::output::DescribeDirectConnectGatewayAttachmentsOutput,
                crate::error::DescribeDirectConnectGatewayAttachmentsError,
                crate::input::DescribeDirectConnectGatewayAttachmentsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Direct Connect gateway.</p>
        pub fn direct_connect_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.direct_connect_gateway_id(inp);
            self
        }
        pub fn set_direct_connect_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_direct_connect_gateway_id(input);
            self
        }
        /// <p>The ID of the virtual interface.</p>
        pub fn virtual_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_interface_id(inp);
            self
        }
        pub fn set_virtual_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_interface_id(input);
            self
        }
        /// <p>The maximum number of results to return with a single call.
        /// To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
        /// <p>If <code>MaxResults</code> is given a value larger than 100, only 100 results are
        /// returned.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token provided in the previous call to retrieve the next page.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeDirectConnectGateways<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_direct_connect_gateways_input::Builder,
    }
    impl<C, M, R> DescribeDirectConnectGateways<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeDirectConnectGatewaysOutput,
            smithy_http::result::SdkError<crate::error::DescribeDirectConnectGatewaysError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeDirectConnectGatewaysInputOperationOutputAlias,
                crate::output::DescribeDirectConnectGatewaysOutput,
                crate::error::DescribeDirectConnectGatewaysError,
                crate::input::DescribeDirectConnectGatewaysInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Direct Connect gateway.</p>
        pub fn direct_connect_gateway_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.direct_connect_gateway_id(inp);
            self
        }
        pub fn set_direct_connect_gateway_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_direct_connect_gateway_id(input);
            self
        }
        /// <p>The maximum number of results to return with a single call.
        /// To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
        /// <p>If <code>MaxResults</code> is given a value larger than 100, only 100 results are
        /// returned.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token provided in the previous call to retrieve the next page.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeHostedConnections<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_hosted_connections_input::Builder,
    }
    impl<C, M, R> DescribeHostedConnections<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeHostedConnectionsOutput,
            smithy_http::result::SdkError<crate::error::DescribeHostedConnectionsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeHostedConnectionsInputOperationOutputAlias,
                crate::output::DescribeHostedConnectionsOutput,
                crate::error::DescribeHostedConnectionsError,
                crate::input::DescribeHostedConnectionsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the interconnect or LAG.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeInterconnectLoa<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_interconnect_loa_input::Builder,
    }
    impl<C, M, R> DescribeInterconnectLoa<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeInterconnectLoaOutput,
            smithy_http::result::SdkError<crate::error::DescribeInterconnectLoaError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeInterconnectLoaInputOperationOutputAlias,
                crate::output::DescribeInterconnectLoaOutput,
                crate::error::DescribeInterconnectLoaError,
                crate::input::DescribeInterconnectLoaInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the interconnect.</p>
        pub fn interconnect_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.interconnect_id(inp);
            self
        }
        pub fn set_interconnect_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_interconnect_id(input);
            self
        }
        /// <p>The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.</p>
        pub fn provider_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provider_name(inp);
            self
        }
        pub fn set_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provider_name(input);
            self
        }
        /// <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
        pub fn loa_content_type(mut self, inp: crate::model::LoaContentType) -> Self {
            self.inner = self.inner.loa_content_type(inp);
            self
        }
        pub fn set_loa_content_type(
            mut self,
            input: std::option::Option<crate::model::LoaContentType>,
        ) -> Self {
            self.inner = self.inner.set_loa_content_type(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeInterconnects<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_interconnects_input::Builder,
    }
    impl<C, M, R> DescribeInterconnects<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeInterconnectsOutput,
            smithy_http::result::SdkError<crate::error::DescribeInterconnectsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeInterconnectsInputOperationOutputAlias,
                crate::output::DescribeInterconnectsOutput,
                crate::error::DescribeInterconnectsError,
                crate::input::DescribeInterconnectsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the interconnect.</p>
        pub fn interconnect_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.interconnect_id(inp);
            self
        }
        pub fn set_interconnect_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_interconnect_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeLags<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_lags_input::Builder,
    }
    impl<C, M, R> DescribeLags<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeLagsOutput,
            smithy_http::result::SdkError<crate::error::DescribeLagsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeLagsInputOperationOutputAlias,
                crate::output::DescribeLagsOutput,
                crate::error::DescribeLagsError,
                crate::input::DescribeLagsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the LAG.</p>
        pub fn lag_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.lag_id(inp);
            self
        }
        pub fn set_lag_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_lag_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeLoa<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_loa_input::Builder,
    }
    impl<C, M, R> DescribeLoa<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeLoaOutput,
            smithy_http::result::SdkError<crate::error::DescribeLoaError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeLoaInputOperationOutputAlias,
                crate::output::DescribeLoaOutput,
                crate::error::DescribeLoaError,
                crate::input::DescribeLoaInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of a connection, LAG, or interconnect.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// <p>The name of the service provider who establishes connectivity on your behalf. If you specify this parameter, the
        /// LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.</p>
        pub fn provider_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provider_name(inp);
            self
        }
        pub fn set_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provider_name(input);
            self
        }
        /// <p>The standard media type for the LOA-CFA document. The only supported value is application/pdf.</p>
        pub fn loa_content_type(mut self, inp: crate::model::LoaContentType) -> Self {
            self.inner = self.inner.loa_content_type(inp);
            self
        }
        pub fn set_loa_content_type(
            mut self,
            input: std::option::Option<crate::model::LoaContentType>,
        ) -> Self {
            self.inner = self.inner.set_loa_content_type(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeLocations<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_locations_input::Builder,
    }
    impl<C, M, R> DescribeLocations<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeLocationsOutput,
            smithy_http::result::SdkError<crate::error::DescribeLocationsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeLocationsInputOperationOutputAlias,
                crate::output::DescribeLocationsOutput,
                crate::error::DescribeLocationsError,
                crate::input::DescribeLocationsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeTags<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_tags_input::Builder,
    }
    impl<C, M, R> DescribeTags<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeTagsOutput,
            smithy_http::result::SdkError<crate::error::DescribeTagsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeTagsInputOperationOutputAlias,
                crate::output::DescribeTagsOutput,
                crate::error::DescribeTagsError,
                crate::input::DescribeTagsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// Appends an item to `resourceArns`.
        ///
        /// To override the contents of this collection use [`set_resource_arns`](Self::set_resource_arns).
        /// <p>The Amazon Resource Names (ARNs) of the resources.</p>
        pub fn resource_arns(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arns(inp);
            self
        }
        pub fn set_resource_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_resource_arns(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeVirtualGateways<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_virtual_gateways_input::Builder,
    }
    impl<C, M, R> DescribeVirtualGateways<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeVirtualGatewaysOutput,
            smithy_http::result::SdkError<crate::error::DescribeVirtualGatewaysError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeVirtualGatewaysInputOperationOutputAlias,
                crate::output::DescribeVirtualGatewaysOutput,
                crate::error::DescribeVirtualGatewaysError,
                crate::input::DescribeVirtualGatewaysInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeVirtualInterfaces<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_virtual_interfaces_input::Builder,
    }
    impl<C, M, R> DescribeVirtualInterfaces<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeVirtualInterfacesOutput,
            smithy_http::result::SdkError<crate::error::DescribeVirtualInterfacesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeVirtualInterfacesInputOperationOutputAlias,
                crate::output::DescribeVirtualInterfacesOutput,
                crate::error::DescribeVirtualInterfacesError,
                crate::input::DescribeVirtualInterfacesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the connection.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// <p>The ID of the virtual interface.</p>
        pub fn virtual_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_interface_id(inp);
            self
        }
        pub fn set_virtual_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_interface_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisassociateConnectionFromLag<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::disassociate_connection_from_lag_input::Builder,
    }
    impl<C, M, R> DisassociateConnectionFromLag<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociateConnectionFromLagOutput,
            smithy_http::result::SdkError<crate::error::DisassociateConnectionFromLagError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DisassociateConnectionFromLagInputOperationOutputAlias,
                crate::output::DisassociateConnectionFromLagOutput,
                crate::error::DisassociateConnectionFromLagError,
                crate::input::DisassociateConnectionFromLagInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the connection.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// <p>The ID of the LAG.</p>
        pub fn lag_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.lag_id(inp);
            self
        }
        pub fn set_lag_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_lag_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DisassociateMacSecKey<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::disassociate_mac_sec_key_input::Builder,
    }
    impl<C, M, R> DisassociateMacSecKey<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisassociateMacSecKeyOutput,
            smithy_http::result::SdkError<crate::error::DisassociateMacSecKeyError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DisassociateMacSecKeyInputOperationOutputAlias,
                crate::output::DisassociateMacSecKeyOutput,
                crate::error::DisassociateMacSecKeyError,
                crate::input::DisassociateMacSecKeyInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the dedicated connection (dxcon-xxxx), or the ID of the LAG (dxlag-xxxx).</p>
        /// <p>You can use <a>DescribeConnections</a> or <a>DescribeLags</a> to retrieve connection ID.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the MAC Security (MACsec) secret key.</p>
        /// <p>You can use <a>DescribeConnections</a> to retrieve the ARN of the MAC Security (MACsec) secret key.</p>
        pub fn secret_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_arn(inp);
            self
        }
        pub fn set_secret_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListVirtualInterfaceTestHistory<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::list_virtual_interface_test_history_input::Builder,
    }
    impl<C, M, R> ListVirtualInterfaceTestHistory<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListVirtualInterfaceTestHistoryOutput,
            smithy_http::result::SdkError<crate::error::ListVirtualInterfaceTestHistoryError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ListVirtualInterfaceTestHistoryInputOperationOutputAlias,
                crate::output::ListVirtualInterfaceTestHistoryOutput,
                crate::error::ListVirtualInterfaceTestHistoryError,
                crate::input::ListVirtualInterfaceTestHistoryInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the virtual interface failover test.</p>
        pub fn test_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.test_id(inp);
            self
        }
        pub fn set_test_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_test_id(input);
            self
        }
        /// <p>The ID of the virtual interface that was tested.</p>
        pub fn virtual_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_interface_id(inp);
            self
        }
        pub fn set_virtual_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_interface_id(input);
            self
        }
        /// Appends an item to `bgpPeers`.
        ///
        /// To override the contents of this collection use [`set_bgp_peers`](Self::set_bgp_peers).
        /// <p>The BGP peers that were placed in the DOWN state during the virtual interface failover test.</p>
        pub fn bgp_peers(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bgp_peers(inp);
            self
        }
        pub fn set_bgp_peers(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_bgp_peers(input);
            self
        }
        /// <p>The status of the virtual interface failover test.</p>
        pub fn status(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.status(inp);
            self
        }
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_status(input);
            self
        }
        /// <p>The maximum number of results to return with a single call.
        /// To retrieve the remaining results, make another call with the returned <code>nextToken</code> value.</p>
        /// <p>If <code>MaxResults</code> is given a value larger than 100, only 100 results are
        /// returned.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The token for the next page of results.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StartBgpFailoverTest<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::start_bgp_failover_test_input::Builder,
    }
    impl<C, M, R> StartBgpFailoverTest<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartBgpFailoverTestOutput,
            smithy_http::result::SdkError<crate::error::StartBgpFailoverTestError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StartBgpFailoverTestInputOperationOutputAlias,
                crate::output::StartBgpFailoverTestOutput,
                crate::error::StartBgpFailoverTestError,
                crate::input::StartBgpFailoverTestInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the virtual interface you want to test.</p>
        pub fn virtual_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_interface_id(inp);
            self
        }
        pub fn set_virtual_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_interface_id(input);
            self
        }
        /// Appends an item to `bgpPeers`.
        ///
        /// To override the contents of this collection use [`set_bgp_peers`](Self::set_bgp_peers).
        /// <p>The BGP peers to place in the DOWN state.</p>
        pub fn bgp_peers(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bgp_peers(inp);
            self
        }
        pub fn set_bgp_peers(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_bgp_peers(input);
            self
        }
        /// <p>The time in minutes that the virtual interface failover test will last.</p>
        /// <p>Maximum value: 180 minutes (3 hours).</p>
        /// <p>Default: 180 minutes (3 hours).</p>
        pub fn test_duration_in_minutes(mut self, inp: i32) -> Self {
            self.inner = self.inner.test_duration_in_minutes(inp);
            self
        }
        pub fn set_test_duration_in_minutes(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_test_duration_in_minutes(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StopBgpFailoverTest<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::stop_bgp_failover_test_input::Builder,
    }
    impl<C, M, R> StopBgpFailoverTest<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StopBgpFailoverTestOutput,
            smithy_http::result::SdkError<crate::error::StopBgpFailoverTestError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::StopBgpFailoverTestInputOperationOutputAlias,
                crate::output::StopBgpFailoverTestOutput,
                crate::error::StopBgpFailoverTestError,
                crate::input::StopBgpFailoverTestInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the virtual interface you no longer want to test.</p>
        pub fn virtual_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_interface_id(inp);
            self
        }
        pub fn set_virtual_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_interface_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TagResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl<C, M, R> TagResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            smithy_http::result::SdkError<crate::error::TagResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::TagResourceInputOperationOutputAlias,
                crate::output::TagResourceOutput,
                crate::error::TagResourceError,
                crate::input::TagResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the resource.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        /// <p>The tags to add.</p>
        pub fn tags(mut self, inp: impl Into<crate::model::Tag>) -> Self {
            self.inner = self.inner.tags(inp);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UntagResource<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl<C, M, R> UntagResource<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            smithy_http::result::SdkError<crate::error::UntagResourceError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UntagResourceInputOperationOutputAlias,
                crate::output::UntagResourceOutput,
                crate::error::UntagResourceError,
                crate::input::UntagResourceInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the resource.</p>
        pub fn resource_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(inp);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `tagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        /// <p>The tag keys of the tags to remove.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateConnection<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_connection_input::Builder,
    }
    impl<C, M, R> UpdateConnection<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateConnectionOutput,
            smithy_http::result::SdkError<crate::error::UpdateConnectionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateConnectionInputOperationOutputAlias,
                crate::output::UpdateConnectionOutput,
                crate::error::UpdateConnectionError,
                crate::input::UpdateConnectionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the dedicated connection.</p>
        /// <p>You can use <a>DescribeConnections</a> to retrieve the connection ID.</p>
        pub fn connection_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_id(inp);
            self
        }
        pub fn set_connection_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_id(input);
            self
        }
        /// <p>The name of the connection.</p>
        pub fn connection_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.connection_name(inp);
            self
        }
        pub fn set_connection_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_connection_name(input);
            self
        }
        /// <p>The connection MAC Security (MACsec) encryption mode.</p>
        /// <p>The valid values are <code>no_encrypt</code>, <code>should_encrypt</code>, and <code>must_encrypt</code>.</p>
        pub fn encryption_mode(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.encryption_mode(inp);
            self
        }
        pub fn set_encryption_mode(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_encryption_mode(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateDirectConnectGatewayAssociation<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_direct_connect_gateway_association_input::Builder,
    }
    impl<C, M, R> UpdateDirectConnectGatewayAssociation<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateDirectConnectGatewayAssociationOutput,
            smithy_http::result::SdkError<crate::error::UpdateDirectConnectGatewayAssociationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateDirectConnectGatewayAssociationInputOperationOutputAlias,
                crate::output::UpdateDirectConnectGatewayAssociationOutput,
                crate::error::UpdateDirectConnectGatewayAssociationError,
                crate::input::UpdateDirectConnectGatewayAssociationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Direct Connect gateway association.</p>
        pub fn association_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.association_id(inp);
            self
        }
        pub fn set_association_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_association_id(input);
            self
        }
        /// Appends an item to `addAllowedPrefixesToDirectConnectGateway`.
        ///
        /// To override the contents of this collection use [`set_add_allowed_prefixes_to_direct_connect_gateway`](Self::set_add_allowed_prefixes_to_direct_connect_gateway).
        /// <p>The Amazon VPC prefixes to advertise to the Direct Connect gateway.</p>
        pub fn add_allowed_prefixes_to_direct_connect_gateway(
            mut self,
            inp: impl Into<crate::model::RouteFilterPrefix>,
        ) -> Self {
            self.inner = self
                .inner
                .add_allowed_prefixes_to_direct_connect_gateway(inp);
            self
        }
        pub fn set_add_allowed_prefixes_to_direct_connect_gateway(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RouteFilterPrefix>>,
        ) -> Self {
            self.inner = self
                .inner
                .set_add_allowed_prefixes_to_direct_connect_gateway(input);
            self
        }
        /// Appends an item to `removeAllowedPrefixesToDirectConnectGateway`.
        ///
        /// To override the contents of this collection use [`set_remove_allowed_prefixes_to_direct_connect_gateway`](Self::set_remove_allowed_prefixes_to_direct_connect_gateway).
        /// <p>The Amazon VPC prefixes to no longer advertise to the Direct Connect gateway.</p>
        pub fn remove_allowed_prefixes_to_direct_connect_gateway(
            mut self,
            inp: impl Into<crate::model::RouteFilterPrefix>,
        ) -> Self {
            self.inner = self
                .inner
                .remove_allowed_prefixes_to_direct_connect_gateway(inp);
            self
        }
        pub fn set_remove_allowed_prefixes_to_direct_connect_gateway(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::RouteFilterPrefix>>,
        ) -> Self {
            self.inner = self
                .inner
                .set_remove_allowed_prefixes_to_direct_connect_gateway(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateLag<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_lag_input::Builder,
    }
    impl<C, M, R> UpdateLag<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateLagOutput,
            smithy_http::result::SdkError<crate::error::UpdateLagError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateLagInputOperationOutputAlias,
                crate::output::UpdateLagOutput,
                crate::error::UpdateLagError,
                crate::input::UpdateLagInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the LAG.</p>
        pub fn lag_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.lag_id(inp);
            self
        }
        pub fn set_lag_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_lag_id(input);
            self
        }
        /// <p>The name of the LAG.</p>
        pub fn lag_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.lag_name(inp);
            self
        }
        pub fn set_lag_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_lag_name(input);
            self
        }
        /// <p>The minimum number of physical connections that must be operational for the LAG itself to be operational.</p>
        pub fn minimum_links(mut self, inp: i32) -> Self {
            self.inner = self.inner.minimum_links(inp);
            self
        }
        pub fn set_minimum_links(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_minimum_links(input);
            self
        }
        /// <p>The LAG MAC Security (MACsec) encryption mode.</p>
        /// <p>Amazon Web Services applies the value to all connections which are part of the LAG.</p>
        pub fn encryption_mode(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.encryption_mode(inp);
            self
        }
        pub fn set_encryption_mode(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_encryption_mode(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateVirtualInterfaceAttributes<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_virtual_interface_attributes_input::Builder,
    }
    impl<C, M, R> UpdateVirtualInterfaceAttributes<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateVirtualInterfaceAttributesOutput,
            smithy_http::result::SdkError<crate::error::UpdateVirtualInterfaceAttributesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateVirtualInterfaceAttributesInputOperationOutputAlias,
                crate::output::UpdateVirtualInterfaceAttributesOutput,
                crate::error::UpdateVirtualInterfaceAttributesError,
                crate::input::UpdateVirtualInterfaceAttributesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the virtual private interface.</p>
        pub fn virtual_interface_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.virtual_interface_id(inp);
            self
        }
        pub fn set_virtual_interface_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_virtual_interface_id(input);
            self
        }
        /// <p>The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.</p>
        pub fn mtu(mut self, inp: i32) -> Self {
            self.inner = self.inner.mtu(inp);
            self
        }
        pub fn set_mtu(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_mtu(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, smithy_client::retry::Standard> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        smithy_client::retry::Standard,
    >
{
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
