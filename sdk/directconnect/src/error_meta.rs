// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>One or more parameters are not valid.</p>
    DirectConnectClientException(crate::error::DirectConnectClientException),
    /// <p>A server-side error occurred.</p>
    DirectConnectServerException(crate::error::DirectConnectServerException),
    /// <p>A tag key was specified more than once.</p>
    DuplicateTagKeysException(crate::error::DuplicateTagKeysException),
    /// <p>You have reached the limit on the number of tags that can be assigned.</p>
    TooManyTagsException(crate::error::TooManyTagsException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::DirectConnectClientException(inner) => inner.fmt(f),
            Error::DirectConnectServerException(inner) => inner.fmt(f),
            Error::DuplicateTagKeysException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::AcceptDirectConnectGatewayAssociationProposalError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AcceptDirectConnectGatewayAssociationProposalError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AcceptDirectConnectGatewayAssociationProposalError> for Error {
    fn from(err: crate::error::AcceptDirectConnectGatewayAssociationProposalError) -> Self {
        match err {
            crate::error::AcceptDirectConnectGatewayAssociationProposalError::DirectConnectClientException(inner) => Error::DirectConnectClientException(inner),
            crate::error::AcceptDirectConnectGatewayAssociationProposalError::DirectConnectServerException(inner) => Error::DirectConnectServerException(inner),
            crate::error::AcceptDirectConnectGatewayAssociationProposalError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::AllocateConnectionOnInterconnectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AllocateConnectionOnInterconnectError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AllocateConnectionOnInterconnectError> for Error {
    fn from(err: crate::error::AllocateConnectionOnInterconnectError) -> Self {
        match err {
            crate::error::AllocateConnectionOnInterconnectError::DirectConnectClientException(
                inner,
            ) => Error::DirectConnectClientException(inner),
            crate::error::AllocateConnectionOnInterconnectError::DirectConnectServerException(
                inner,
            ) => Error::DirectConnectServerException(inner),
            crate::error::AllocateConnectionOnInterconnectError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AllocateHostedConnectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AllocateHostedConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AllocateHostedConnectionError> for Error {
    fn from(err: crate::error::AllocateHostedConnectionError) -> Self {
        match err {
            crate::error::AllocateHostedConnectionError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::AllocateHostedConnectionError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::AllocateHostedConnectionError::DuplicateTagKeysException(inner) => {
                Error::DuplicateTagKeysException(inner)
            }
            crate::error::AllocateHostedConnectionError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::AllocateHostedConnectionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::AllocatePrivateVirtualInterfaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AllocatePrivateVirtualInterfaceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AllocatePrivateVirtualInterfaceError> for Error {
    fn from(err: crate::error::AllocatePrivateVirtualInterfaceError) -> Self {
        match err {
            crate::error::AllocatePrivateVirtualInterfaceError::DirectConnectClientException(
                inner,
            ) => Error::DirectConnectClientException(inner),
            crate::error::AllocatePrivateVirtualInterfaceError::DirectConnectServerException(
                inner,
            ) => Error::DirectConnectServerException(inner),
            crate::error::AllocatePrivateVirtualInterfaceError::DuplicateTagKeysException(
                inner,
            ) => Error::DuplicateTagKeysException(inner),
            crate::error::AllocatePrivateVirtualInterfaceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::AllocatePrivateVirtualInterfaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::AllocatePublicVirtualInterfaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AllocatePublicVirtualInterfaceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AllocatePublicVirtualInterfaceError> for Error {
    fn from(err: crate::error::AllocatePublicVirtualInterfaceError) -> Self {
        match err {
            crate::error::AllocatePublicVirtualInterfaceError::DirectConnectClientException(
                inner,
            ) => Error::DirectConnectClientException(inner),
            crate::error::AllocatePublicVirtualInterfaceError::DirectConnectServerException(
                inner,
            ) => Error::DirectConnectServerException(inner),
            crate::error::AllocatePublicVirtualInterfaceError::DuplicateTagKeysException(inner) => {
                Error::DuplicateTagKeysException(inner)
            }
            crate::error::AllocatePublicVirtualInterfaceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::AllocatePublicVirtualInterfaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::AllocateTransitVirtualInterfaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AllocateTransitVirtualInterfaceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AllocateTransitVirtualInterfaceError> for Error {
    fn from(err: crate::error::AllocateTransitVirtualInterfaceError) -> Self {
        match err {
            crate::error::AllocateTransitVirtualInterfaceError::DirectConnectClientException(
                inner,
            ) => Error::DirectConnectClientException(inner),
            crate::error::AllocateTransitVirtualInterfaceError::DirectConnectServerException(
                inner,
            ) => Error::DirectConnectServerException(inner),
            crate::error::AllocateTransitVirtualInterfaceError::DuplicateTagKeysException(
                inner,
            ) => Error::DuplicateTagKeysException(inner),
            crate::error::AllocateTransitVirtualInterfaceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::AllocateTransitVirtualInterfaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateConnectionWithLagError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateConnectionWithLagError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateConnectionWithLagError> for Error {
    fn from(err: crate::error::AssociateConnectionWithLagError) -> Self {
        match err {
            crate::error::AssociateConnectionWithLagError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::AssociateConnectionWithLagError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::AssociateConnectionWithLagError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateHostedConnectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateHostedConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateHostedConnectionError> for Error {
    fn from(err: crate::error::AssociateHostedConnectionError) -> Self {
        match err {
            crate::error::AssociateHostedConnectionError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::AssociateHostedConnectionError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::AssociateHostedConnectionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateMacSecKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateMacSecKeyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateMacSecKeyError> for Error {
    fn from(err: crate::error::AssociateMacSecKeyError) -> Self {
        match err {
            crate::error::AssociateMacSecKeyError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::AssociateMacSecKeyError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::AssociateMacSecKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateVirtualInterfaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateVirtualInterfaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateVirtualInterfaceError> for Error {
    fn from(err: crate::error::AssociateVirtualInterfaceError) -> Self {
        match err {
            crate::error::AssociateVirtualInterfaceError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::AssociateVirtualInterfaceError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::AssociateVirtualInterfaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ConfirmConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ConfirmConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ConfirmConnectionError> for Error {
    fn from(err: crate::error::ConfirmConnectionError) -> Self {
        match err {
            crate::error::ConfirmConnectionError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::ConfirmConnectionError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::ConfirmConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ConfirmCustomerAgreementError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ConfirmCustomerAgreementError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ConfirmCustomerAgreementError> for Error {
    fn from(err: crate::error::ConfirmCustomerAgreementError) -> Self {
        match err {
            crate::error::ConfirmCustomerAgreementError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::ConfirmCustomerAgreementError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::ConfirmCustomerAgreementError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ConfirmPrivateVirtualInterfaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ConfirmPrivateVirtualInterfaceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ConfirmPrivateVirtualInterfaceError> for Error {
    fn from(err: crate::error::ConfirmPrivateVirtualInterfaceError) -> Self {
        match err {
            crate::error::ConfirmPrivateVirtualInterfaceError::DirectConnectClientException(
                inner,
            ) => Error::DirectConnectClientException(inner),
            crate::error::ConfirmPrivateVirtualInterfaceError::DirectConnectServerException(
                inner,
            ) => Error::DirectConnectServerException(inner),
            crate::error::ConfirmPrivateVirtualInterfaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ConfirmPublicVirtualInterfaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ConfirmPublicVirtualInterfaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ConfirmPublicVirtualInterfaceError> for Error {
    fn from(err: crate::error::ConfirmPublicVirtualInterfaceError) -> Self {
        match err {
            crate::error::ConfirmPublicVirtualInterfaceError::DirectConnectClientException(
                inner,
            ) => Error::DirectConnectClientException(inner),
            crate::error::ConfirmPublicVirtualInterfaceError::DirectConnectServerException(
                inner,
            ) => Error::DirectConnectServerException(inner),
            crate::error::ConfirmPublicVirtualInterfaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ConfirmTransitVirtualInterfaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ConfirmTransitVirtualInterfaceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ConfirmTransitVirtualInterfaceError> for Error {
    fn from(err: crate::error::ConfirmTransitVirtualInterfaceError) -> Self {
        match err {
            crate::error::ConfirmTransitVirtualInterfaceError::DirectConnectClientException(
                inner,
            ) => Error::DirectConnectClientException(inner),
            crate::error::ConfirmTransitVirtualInterfaceError::DirectConnectServerException(
                inner,
            ) => Error::DirectConnectServerException(inner),
            crate::error::ConfirmTransitVirtualInterfaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBGPPeerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateBGPPeerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBGPPeerError> for Error {
    fn from(err: crate::error::CreateBGPPeerError) -> Self {
        match err {
            crate::error::CreateBGPPeerError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::CreateBGPPeerError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::CreateBGPPeerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateConnectionError> for Error {
    fn from(err: crate::error::CreateConnectionError) -> Self {
        match err {
            crate::error::CreateConnectionError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::CreateConnectionError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::CreateConnectionError::DuplicateTagKeysException(inner) => {
                Error::DuplicateTagKeysException(inner)
            }
            crate::error::CreateConnectionError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreateConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDirectConnectGatewayError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDirectConnectGatewayError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDirectConnectGatewayError> for Error {
    fn from(err: crate::error::CreateDirectConnectGatewayError) -> Self {
        match err {
            crate::error::CreateDirectConnectGatewayError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::CreateDirectConnectGatewayError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::CreateDirectConnectGatewayError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::CreateDirectConnectGatewayAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateDirectConnectGatewayAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDirectConnectGatewayAssociationError> for Error {
    fn from(err: crate::error::CreateDirectConnectGatewayAssociationError) -> Self {
        match err {
            crate::error::CreateDirectConnectGatewayAssociationError::DirectConnectClientException(inner) => Error::DirectConnectClientException(inner),
            crate::error::CreateDirectConnectGatewayAssociationError::DirectConnectServerException(inner) => Error::DirectConnectServerException(inner),
            crate::error::CreateDirectConnectGatewayAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::CreateDirectConnectGatewayAssociationProposalError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateDirectConnectGatewayAssociationProposalError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDirectConnectGatewayAssociationProposalError> for Error {
    fn from(err: crate::error::CreateDirectConnectGatewayAssociationProposalError) -> Self {
        match err {
            crate::error::CreateDirectConnectGatewayAssociationProposalError::DirectConnectClientException(inner) => Error::DirectConnectClientException(inner),
            crate::error::CreateDirectConnectGatewayAssociationProposalError::DirectConnectServerException(inner) => Error::DirectConnectServerException(inner),
            crate::error::CreateDirectConnectGatewayAssociationProposalError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateInterconnectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateInterconnectError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateInterconnectError> for Error {
    fn from(err: crate::error::CreateInterconnectError) -> Self {
        match err {
            crate::error::CreateInterconnectError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::CreateInterconnectError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::CreateInterconnectError::DuplicateTagKeysException(inner) => {
                Error::DuplicateTagKeysException(inner)
            }
            crate::error::CreateInterconnectError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreateInterconnectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateLagError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateLagError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLagError> for Error {
    fn from(err: crate::error::CreateLagError) -> Self {
        match err {
            crate::error::CreateLagError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::CreateLagError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::CreateLagError::DuplicateTagKeysException(inner) => {
                Error::DuplicateTagKeysException(inner)
            }
            crate::error::CreateLagError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreateLagError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePrivateVirtualInterfaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreatePrivateVirtualInterfaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePrivateVirtualInterfaceError> for Error {
    fn from(err: crate::error::CreatePrivateVirtualInterfaceError) -> Self {
        match err {
            crate::error::CreatePrivateVirtualInterfaceError::DirectConnectClientException(
                inner,
            ) => Error::DirectConnectClientException(inner),
            crate::error::CreatePrivateVirtualInterfaceError::DirectConnectServerException(
                inner,
            ) => Error::DirectConnectServerException(inner),
            crate::error::CreatePrivateVirtualInterfaceError::DuplicateTagKeysException(inner) => {
                Error::DuplicateTagKeysException(inner)
            }
            crate::error::CreatePrivateVirtualInterfaceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreatePrivateVirtualInterfaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePublicVirtualInterfaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreatePublicVirtualInterfaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePublicVirtualInterfaceError> for Error {
    fn from(err: crate::error::CreatePublicVirtualInterfaceError) -> Self {
        match err {
            crate::error::CreatePublicVirtualInterfaceError::DirectConnectClientException(
                inner,
            ) => Error::DirectConnectClientException(inner),
            crate::error::CreatePublicVirtualInterfaceError::DirectConnectServerException(
                inner,
            ) => Error::DirectConnectServerException(inner),
            crate::error::CreatePublicVirtualInterfaceError::DuplicateTagKeysException(inner) => {
                Error::DuplicateTagKeysException(inner)
            }
            crate::error::CreatePublicVirtualInterfaceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreatePublicVirtualInterfaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTransitVirtualInterfaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateTransitVirtualInterfaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTransitVirtualInterfaceError> for Error {
    fn from(err: crate::error::CreateTransitVirtualInterfaceError) -> Self {
        match err {
            crate::error::CreateTransitVirtualInterfaceError::DirectConnectClientException(
                inner,
            ) => Error::DirectConnectClientException(inner),
            crate::error::CreateTransitVirtualInterfaceError::DirectConnectServerException(
                inner,
            ) => Error::DirectConnectServerException(inner),
            crate::error::CreateTransitVirtualInterfaceError::DuplicateTagKeysException(inner) => {
                Error::DuplicateTagKeysException(inner)
            }
            crate::error::CreateTransitVirtualInterfaceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreateTransitVirtualInterfaceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBGPPeerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteBGPPeerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBGPPeerError> for Error {
    fn from(err: crate::error::DeleteBGPPeerError) -> Self {
        match err {
            crate::error::DeleteBGPPeerError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DeleteBGPPeerError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DeleteBGPPeerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteConnectionError> for Error {
    fn from(err: crate::error::DeleteConnectionError) -> Self {
        match err {
            crate::error::DeleteConnectionError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DeleteConnectionError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DeleteConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDirectConnectGatewayError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDirectConnectGatewayError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDirectConnectGatewayError> for Error {
    fn from(err: crate::error::DeleteDirectConnectGatewayError) -> Self {
        match err {
            crate::error::DeleteDirectConnectGatewayError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DeleteDirectConnectGatewayError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DeleteDirectConnectGatewayError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteDirectConnectGatewayAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteDirectConnectGatewayAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDirectConnectGatewayAssociationError> for Error {
    fn from(err: crate::error::DeleteDirectConnectGatewayAssociationError) -> Self {
        match err {
            crate::error::DeleteDirectConnectGatewayAssociationError::DirectConnectClientException(inner) => Error::DirectConnectClientException(inner),
            crate::error::DeleteDirectConnectGatewayAssociationError::DirectConnectServerException(inner) => Error::DirectConnectServerException(inner),
            crate::error::DeleteDirectConnectGatewayAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteDirectConnectGatewayAssociationProposalError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteDirectConnectGatewayAssociationProposalError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDirectConnectGatewayAssociationProposalError> for Error {
    fn from(err: crate::error::DeleteDirectConnectGatewayAssociationProposalError) -> Self {
        match err {
            crate::error::DeleteDirectConnectGatewayAssociationProposalError::DirectConnectClientException(inner) => Error::DirectConnectClientException(inner),
            crate::error::DeleteDirectConnectGatewayAssociationProposalError::DirectConnectServerException(inner) => Error::DirectConnectServerException(inner),
            crate::error::DeleteDirectConnectGatewayAssociationProposalError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteInterconnectError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteInterconnectError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteInterconnectError> for Error {
    fn from(err: crate::error::DeleteInterconnectError) -> Self {
        match err {
            crate::error::DeleteInterconnectError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DeleteInterconnectError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DeleteInterconnectError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLagError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteLagError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLagError> for Error {
    fn from(err: crate::error::DeleteLagError) -> Self {
        match err {
            crate::error::DeleteLagError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DeleteLagError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DeleteLagError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVirtualInterfaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVirtualInterfaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVirtualInterfaceError> for Error {
    fn from(err: crate::error::DeleteVirtualInterfaceError) -> Self {
        match err {
            crate::error::DeleteVirtualInterfaceError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DeleteVirtualInterfaceError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DeleteVirtualInterfaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeConnectionLoaError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeConnectionLoaError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConnectionLoaError> for Error {
    fn from(err: crate::error::DescribeConnectionLoaError) -> Self {
        match err {
            crate::error::DescribeConnectionLoaError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DescribeConnectionLoaError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DescribeConnectionLoaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeConnectionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeConnectionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConnectionsError> for Error {
    fn from(err: crate::error::DescribeConnectionsError) -> Self {
        match err {
            crate::error::DescribeConnectionsError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DescribeConnectionsError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DescribeConnectionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeConnectionsOnInterconnectError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeConnectionsOnInterconnectError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeConnectionsOnInterconnectError> for Error {
    fn from(err: crate::error::DescribeConnectionsOnInterconnectError) -> Self {
        match err {
            crate::error::DescribeConnectionsOnInterconnectError::DirectConnectClientException(
                inner,
            ) => Error::DirectConnectClientException(inner),
            crate::error::DescribeConnectionsOnInterconnectError::DirectConnectServerException(
                inner,
            ) => Error::DirectConnectServerException(inner),
            crate::error::DescribeConnectionsOnInterconnectError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCustomerMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeCustomerMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCustomerMetadataError> for Error {
    fn from(err: crate::error::DescribeCustomerMetadataError) -> Self {
        match err {
            crate::error::DescribeCustomerMetadataError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DescribeCustomerMetadataError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DescribeCustomerMetadataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeDirectConnectGatewayAssociationProposalsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeDirectConnectGatewayAssociationProposalsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDirectConnectGatewayAssociationProposalsError> for Error {
    fn from(err: crate::error::DescribeDirectConnectGatewayAssociationProposalsError) -> Self {
        match err {
            crate::error::DescribeDirectConnectGatewayAssociationProposalsError::DirectConnectClientException(inner) => Error::DirectConnectClientException(inner),
            crate::error::DescribeDirectConnectGatewayAssociationProposalsError::DirectConnectServerException(inner) => Error::DirectConnectServerException(inner),
            crate::error::DescribeDirectConnectGatewayAssociationProposalsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeDirectConnectGatewayAssociationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeDirectConnectGatewayAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDirectConnectGatewayAssociationsError> for Error {
    fn from(err: crate::error::DescribeDirectConnectGatewayAssociationsError) -> Self {
        match err {
            crate::error::DescribeDirectConnectGatewayAssociationsError::DirectConnectClientException(inner) => Error::DirectConnectClientException(inner),
            crate::error::DescribeDirectConnectGatewayAssociationsError::DirectConnectServerException(inner) => Error::DirectConnectServerException(inner),
            crate::error::DescribeDirectConnectGatewayAssociationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeDirectConnectGatewayAttachmentsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeDirectConnectGatewayAttachmentsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDirectConnectGatewayAttachmentsError> for Error {
    fn from(err: crate::error::DescribeDirectConnectGatewayAttachmentsError) -> Self {
        match err {
            crate::error::DescribeDirectConnectGatewayAttachmentsError::DirectConnectClientException(inner) => Error::DirectConnectClientException(inner),
            crate::error::DescribeDirectConnectGatewayAttachmentsError::DirectConnectServerException(inner) => Error::DirectConnectServerException(inner),
            crate::error::DescribeDirectConnectGatewayAttachmentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDirectConnectGatewaysError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDirectConnectGatewaysError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDirectConnectGatewaysError> for Error {
    fn from(err: crate::error::DescribeDirectConnectGatewaysError) -> Self {
        match err {
            crate::error::DescribeDirectConnectGatewaysError::DirectConnectClientException(
                inner,
            ) => Error::DirectConnectClientException(inner),
            crate::error::DescribeDirectConnectGatewaysError::DirectConnectServerException(
                inner,
            ) => Error::DirectConnectServerException(inner),
            crate::error::DescribeDirectConnectGatewaysError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeHostedConnectionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeHostedConnectionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeHostedConnectionsError> for Error {
    fn from(err: crate::error::DescribeHostedConnectionsError) -> Self {
        match err {
            crate::error::DescribeHostedConnectionsError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DescribeHostedConnectionsError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DescribeHostedConnectionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeInterconnectLoaError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeInterconnectLoaError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInterconnectLoaError> for Error {
    fn from(err: crate::error::DescribeInterconnectLoaError) -> Self {
        match err {
            crate::error::DescribeInterconnectLoaError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DescribeInterconnectLoaError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DescribeInterconnectLoaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeInterconnectsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeInterconnectsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInterconnectsError> for Error {
    fn from(err: crate::error::DescribeInterconnectsError) -> Self {
        match err {
            crate::error::DescribeInterconnectsError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DescribeInterconnectsError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DescribeInterconnectsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeLagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeLagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeLagsError> for Error {
    fn from(err: crate::error::DescribeLagsError) -> Self {
        match err {
            crate::error::DescribeLagsError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DescribeLagsError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DescribeLagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeLoaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeLoaError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeLoaError> for Error {
    fn from(err: crate::error::DescribeLoaError) -> Self {
        match err {
            crate::error::DescribeLoaError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DescribeLoaError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DescribeLoaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeLocationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeLocationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeLocationsError> for Error {
    fn from(err: crate::error::DescribeLocationsError) -> Self {
        match err {
            crate::error::DescribeLocationsError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DescribeLocationsError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DescribeLocationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRouterConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeRouterConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRouterConfigurationError> for Error {
    fn from(err: crate::error::DescribeRouterConfigurationError) -> Self {
        match err {
            crate::error::DescribeRouterConfigurationError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DescribeRouterConfigurationError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DescribeRouterConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTagsError> for Error {
    fn from(err: crate::error::DescribeTagsError) -> Self {
        match err {
            crate::error::DescribeTagsError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DescribeTagsError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DescribeTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeVirtualGatewaysError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeVirtualGatewaysError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeVirtualGatewaysError> for Error {
    fn from(err: crate::error::DescribeVirtualGatewaysError) -> Self {
        match err {
            crate::error::DescribeVirtualGatewaysError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DescribeVirtualGatewaysError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DescribeVirtualGatewaysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeVirtualInterfacesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeVirtualInterfacesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeVirtualInterfacesError> for Error {
    fn from(err: crate::error::DescribeVirtualInterfacesError) -> Self {
        match err {
            crate::error::DescribeVirtualInterfacesError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DescribeVirtualInterfacesError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DescribeVirtualInterfacesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateConnectionFromLagError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateConnectionFromLagError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateConnectionFromLagError> for Error {
    fn from(err: crate::error::DisassociateConnectionFromLagError) -> Self {
        match err {
            crate::error::DisassociateConnectionFromLagError::DirectConnectClientException(
                inner,
            ) => Error::DirectConnectClientException(inner),
            crate::error::DisassociateConnectionFromLagError::DirectConnectServerException(
                inner,
            ) => Error::DirectConnectServerException(inner),
            crate::error::DisassociateConnectionFromLagError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateMacSecKeyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateMacSecKeyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateMacSecKeyError> for Error {
    fn from(err: crate::error::DisassociateMacSecKeyError) -> Self {
        match err {
            crate::error::DisassociateMacSecKeyError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::DisassociateMacSecKeyError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::DisassociateMacSecKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListVirtualInterfaceTestHistoryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListVirtualInterfaceTestHistoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVirtualInterfaceTestHistoryError> for Error {
    fn from(err: crate::error::ListVirtualInterfaceTestHistoryError) -> Self {
        match err {
            crate::error::ListVirtualInterfaceTestHistoryError::DirectConnectClientException(
                inner,
            ) => Error::DirectConnectClientException(inner),
            crate::error::ListVirtualInterfaceTestHistoryError::DirectConnectServerException(
                inner,
            ) => Error::DirectConnectServerException(inner),
            crate::error::ListVirtualInterfaceTestHistoryError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartBgpFailoverTestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartBgpFailoverTestError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartBgpFailoverTestError> for Error {
    fn from(err: crate::error::StartBgpFailoverTestError) -> Self {
        match err {
            crate::error::StartBgpFailoverTestError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::StartBgpFailoverTestError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::StartBgpFailoverTestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopBgpFailoverTestError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopBgpFailoverTestError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopBgpFailoverTestError> for Error {
    fn from(err: crate::error::StopBgpFailoverTestError) -> Self {
        match err {
            crate::error::StopBgpFailoverTestError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::StopBgpFailoverTestError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::StopBgpFailoverTestError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::TagResourceError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::TagResourceError::DuplicateTagKeysException(inner) => {
                Error::DuplicateTagKeysException(inner)
            }
            crate::error::TagResourceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::UntagResourceError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateConnectionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateConnectionError> for Error {
    fn from(err: crate::error::UpdateConnectionError) -> Self {
        match err {
            crate::error::UpdateConnectionError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::UpdateConnectionError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::UpdateConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDirectConnectGatewayError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDirectConnectGatewayError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDirectConnectGatewayError> for Error {
    fn from(err: crate::error::UpdateDirectConnectGatewayError) -> Self {
        match err {
            crate::error::UpdateDirectConnectGatewayError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::UpdateDirectConnectGatewayError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::UpdateDirectConnectGatewayError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::UpdateDirectConnectGatewayAssociationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateDirectConnectGatewayAssociationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDirectConnectGatewayAssociationError> for Error {
    fn from(err: crate::error::UpdateDirectConnectGatewayAssociationError) -> Self {
        match err {
            crate::error::UpdateDirectConnectGatewayAssociationError::DirectConnectClientException(inner) => Error::DirectConnectClientException(inner),
            crate::error::UpdateDirectConnectGatewayAssociationError::DirectConnectServerException(inner) => Error::DirectConnectServerException(inner),
            crate::error::UpdateDirectConnectGatewayAssociationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateLagError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateLagError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateLagError> for Error {
    fn from(err: crate::error::UpdateLagError) -> Self {
        match err {
            crate::error::UpdateLagError::DirectConnectClientException(inner) => {
                Error::DirectConnectClientException(inner)
            }
            crate::error::UpdateLagError::DirectConnectServerException(inner) => {
                Error::DirectConnectServerException(inner)
            }
            crate::error::UpdateLagError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateVirtualInterfaceAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateVirtualInterfaceAttributesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVirtualInterfaceAttributesError> for Error {
    fn from(err: crate::error::UpdateVirtualInterfaceAttributesError) -> Self {
        match err {
            crate::error::UpdateVirtualInterfaceAttributesError::DirectConnectClientException(
                inner,
            ) => Error::DirectConnectClientException(inner),
            crate::error::UpdateVirtualInterfaceAttributesError::DirectConnectServerException(
                inner,
            ) => Error::DirectConnectServerException(inner),
            crate::error::UpdateVirtualInterfaceAttributesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::DirectConnectClientException(e) => e.request_id(),
            Self::DirectConnectServerException(e) => e.request_id(),
            Self::DuplicateTagKeysException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
