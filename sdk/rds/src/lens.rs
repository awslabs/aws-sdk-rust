// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_describe_certificates_output_marker(
    input: &crate::output::DescribeCertificatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_custom_availability_zones_output_marker(
    input: &crate::output::DescribeCustomAvailabilityZonesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_cluster_backtracks_output_marker(
    input: &crate::output::DescribeDbClusterBacktracksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_cluster_endpoints_output_marker(
    input: &crate::output::DescribeDbClusterEndpointsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_cluster_parameter_groups_output_marker(
    input: &crate::output::DescribeDbClusterParameterGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_cluster_parameters_output_marker(
    input: &crate::output::DescribeDbClusterParametersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_clusters_output_marker(
    input: &crate::output::DescribeDbClustersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_cluster_snapshots_output_marker(
    input: &crate::output::DescribeDbClusterSnapshotsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_engine_versions_output_marker(
    input: &crate::output::DescribeDbEngineVersionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_instance_automated_backups_output_marker(
    input: &crate::output::DescribeDbInstanceAutomatedBackupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_instances_output_marker(
    input: &crate::output::DescribeDbInstancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_log_files_output_marker(
    input: &crate::output::DescribeDbLogFilesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_parameter_groups_output_marker(
    input: &crate::output::DescribeDbParameterGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_parameters_output_marker(
    input: &crate::output::DescribeDbParametersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_proxies_output_marker(
    input: &crate::output::DescribeDbProxiesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_proxy_endpoints_output_marker(
    input: &crate::output::DescribeDbProxyEndpointsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_proxy_target_groups_output_marker(
    input: &crate::output::DescribeDbProxyTargetGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_proxy_targets_output_marker(
    input: &crate::output::DescribeDbProxyTargetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_security_groups_output_marker(
    input: &crate::output::DescribeDbSecurityGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_snapshots_output_marker(
    input: &crate::output::DescribeDbSnapshotsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_db_subnet_groups_output_marker(
    input: &crate::output::DescribeDbSubnetGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_engine_default_parameters_output_engine_defaults_marker(
    input: &crate::output::DescribeEngineDefaultParametersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.engine_defaults {
        None => return None,
        Some(t) => t,
    };
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_events_output_marker(
    input: &crate::output::DescribeEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_event_subscriptions_output_marker(
    input: &crate::output::DescribeEventSubscriptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_export_tasks_output_marker(
    input: &crate::output::DescribeExportTasksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_global_clusters_output_marker(
    input: &crate::output::DescribeGlobalClustersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_installation_media_output_marker(
    input: &crate::output::DescribeInstallationMediaOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_option_group_options_output_marker(
    input: &crate::output::DescribeOptionGroupOptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_option_groups_output_marker(
    input: &crate::output::DescribeOptionGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_orderable_db_instance_options_output_marker(
    input: &crate::output::DescribeOrderableDbInstanceOptionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_pending_maintenance_actions_output_marker(
    input: &crate::output::DescribePendingMaintenanceActionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_reserved_db_instances_output_marker(
    input: &crate::output::DescribeReservedDbInstancesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_reserved_db_instances_offerings_output_marker(
    input: &crate::output::DescribeReservedDbInstancesOfferingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_source_regions_output_marker(
    input: &crate::output::DescribeSourceRegionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_download_db_log_file_portion_output_marker(
    input: &crate::output::DownloadDbLogFilePortionOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_certificates_output_certificates(
    input: crate::output::DescribeCertificatesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Certificate>> {
    let input = match input.certificates {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_custom_availability_zones_output_custom_availability_zones(
    input: crate::output::DescribeCustomAvailabilityZonesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::CustomAvailabilityZone>> {
    let input = match input.custom_availability_zones {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_cluster_backtracks_output_db_cluster_backtracks(
    input: crate::output::DescribeDbClusterBacktracksOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DbClusterBacktrack>> {
    let input = match input.db_cluster_backtracks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_cluster_endpoints_output_db_cluster_endpoints(
    input: crate::output::DescribeDbClusterEndpointsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DbClusterEndpoint>> {
    let input = match input.db_cluster_endpoints {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_cluster_parameter_groups_output_db_cluster_parameter_groups(
    input: crate::output::DescribeDbClusterParameterGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DbClusterParameterGroup>> {
    let input = match input.db_cluster_parameter_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_cluster_parameters_output_parameters(
    input: crate::output::DescribeDbClusterParametersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Parameter>> {
    let input = match input.parameters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_clusters_output_db_clusters(
    input: crate::output::DescribeDbClustersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DbCluster>> {
    let input = match input.db_clusters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_cluster_snapshots_output_db_cluster_snapshots(
    input: crate::output::DescribeDbClusterSnapshotsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DbClusterSnapshot>> {
    let input = match input.db_cluster_snapshots {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_engine_versions_output_db_engine_versions(
    input: crate::output::DescribeDbEngineVersionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DbEngineVersion>> {
    let input = match input.db_engine_versions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_instance_automated_backups_output_db_instance_automated_backups(
    input: crate::output::DescribeDbInstanceAutomatedBackupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DbInstanceAutomatedBackup>> {
    let input = match input.db_instance_automated_backups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_instances_output_db_instances(
    input: crate::output::DescribeDbInstancesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DbInstance>> {
    let input = match input.db_instances {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_log_files_output_describe_db_log_files(
    input: crate::output::DescribeDbLogFilesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DescribeDbLogFilesDetails>> {
    let input = match input.describe_db_log_files {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_parameter_groups_output_db_parameter_groups(
    input: crate::output::DescribeDbParameterGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DbParameterGroup>> {
    let input = match input.db_parameter_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_parameters_output_parameters(
    input: crate::output::DescribeDbParametersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Parameter>> {
    let input = match input.parameters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_proxies_output_db_proxies(
    input: crate::output::DescribeDbProxiesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DbProxy>> {
    let input = match input.db_proxies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_proxy_endpoints_output_db_proxy_endpoints(
    input: crate::output::DescribeDbProxyEndpointsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DbProxyEndpoint>> {
    let input = match input.db_proxy_endpoints {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_proxy_target_groups_output_target_groups(
    input: crate::output::DescribeDbProxyTargetGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DbProxyTargetGroup>> {
    let input = match input.target_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_proxy_targets_output_targets(
    input: crate::output::DescribeDbProxyTargetsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DbProxyTarget>> {
    let input = match input.targets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_security_groups_output_db_security_groups(
    input: crate::output::DescribeDbSecurityGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DbSecurityGroup>> {
    let input = match input.db_security_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_snapshots_output_db_snapshots(
    input: crate::output::DescribeDbSnapshotsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DbSnapshot>> {
    let input = match input.db_snapshots {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_db_subnet_groups_output_db_subnet_groups(
    input: crate::output::DescribeDbSubnetGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::DbSubnetGroup>> {
    let input = match input.db_subnet_groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_engine_default_parameters_output_engine_defaults_parameters(
    input: crate::output::DescribeEngineDefaultParametersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Parameter>> {
    let input = match input.engine_defaults {
        None => return None,
        Some(t) => t,
    };
    let input = match input.parameters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_events_output_events(
    input: crate::output::DescribeEventsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Event>> {
    let input = match input.events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_event_subscriptions_output_event_subscriptions_list(
    input: crate::output::DescribeEventSubscriptionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::EventSubscription>> {
    let input = match input.event_subscriptions_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_export_tasks_output_export_tasks(
    input: crate::output::DescribeExportTasksOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ExportTask>> {
    let input = match input.export_tasks {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_global_clusters_output_global_clusters(
    input: crate::output::DescribeGlobalClustersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::GlobalCluster>> {
    let input = match input.global_clusters {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_installation_media_output_installation_media(
    input: crate::output::DescribeInstallationMediaOutput,
) -> std::option::Option<std::vec::Vec<crate::model::InstallationMedia>> {
    let input = match input.installation_media {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_option_group_options_output_option_group_options(
    input: crate::output::DescribeOptionGroupOptionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::OptionGroupOption>> {
    let input = match input.option_group_options {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_option_groups_output_option_groups_list(
    input: crate::output::DescribeOptionGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::OptionGroup>> {
    let input = match input.option_groups_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_orderable_db_instance_options_output_orderable_db_instance_options(
    input: crate::output::DescribeOrderableDbInstanceOptionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::OrderableDbInstanceOption>> {
    let input = match input.orderable_db_instance_options {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_pending_maintenance_actions_output_pending_maintenance_actions(
    input: crate::output::DescribePendingMaintenanceActionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ResourcePendingMaintenanceActions>> {
    let input = match input.pending_maintenance_actions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_reserved_db_instances_output_reserved_db_instances(
    input: crate::output::DescribeReservedDbInstancesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ReservedDbInstance>> {
    let input = match input.reserved_db_instances {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_reserved_db_instances_offerings_output_reserved_db_instances_offerings(
    input: crate::output::DescribeReservedDbInstancesOfferingsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ReservedDbInstancesOffering>> {
    let input = match input.reserved_db_instances_offerings {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_source_regions_output_source_regions(
    input: crate::output::DescribeSourceRegionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SourceRegion>> {
    let input = match input.source_regions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
