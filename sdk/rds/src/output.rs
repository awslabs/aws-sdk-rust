// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopDBInstanceAutomatedBackupsReplicationOutput {
    /// <p>An automated backup of a DB instance. It consists of system backups, transaction logs, and the database instance properties that
    /// existed at the time you deleted the source instance.</p>
    pub db_instance_automated_backup: std::option::Option<crate::model::DBInstanceAutomatedBackup>,
}
impl std::fmt::Debug for StopDBInstanceAutomatedBackupsReplicationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopDBInstanceAutomatedBackupsReplicationOutput");
        formatter.field(
            "db_instance_automated_backup",
            &self.db_instance_automated_backup,
        );
        formatter.finish()
    }
}
/// See [`StopDBInstanceAutomatedBackupsReplicationOutput`](crate::output::StopDBInstanceAutomatedBackupsReplicationOutput)
pub mod stop_db_instance_automated_backups_replication_output {
    /// A builder for [`StopDBInstanceAutomatedBackupsReplicationOutput`](crate::output::StopDBInstanceAutomatedBackupsReplicationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_automated_backup:
            std::option::Option<crate::model::DBInstanceAutomatedBackup>,
    }
    impl Builder {
        /// <p>An automated backup of a DB instance. It consists of system backups, transaction logs, and the database instance properties that
        /// existed at the time you deleted the source instance.</p>
        pub fn db_instance_automated_backup(
            mut self,
            input: crate::model::DBInstanceAutomatedBackup,
        ) -> Self {
            self.db_instance_automated_backup = Some(input);
            self
        }
        pub fn set_db_instance_automated_backup(
            mut self,
            input: std::option::Option<crate::model::DBInstanceAutomatedBackup>,
        ) -> Self {
            self.db_instance_automated_backup = input;
            self
        }
        /// Consumes the builder and constructs a [`StopDBInstanceAutomatedBackupsReplicationOutput`](crate::output::StopDBInstanceAutomatedBackupsReplicationOutput)
        pub fn build(self) -> crate::output::StopDBInstanceAutomatedBackupsReplicationOutput {
            crate::output::StopDBInstanceAutomatedBackupsReplicationOutput {
                db_instance_automated_backup: self.db_instance_automated_backup,
            }
        }
    }
}
impl StopDBInstanceAutomatedBackupsReplicationOutput {
    /// Creates a new builder-style object to manufacture [`StopDBInstanceAutomatedBackupsReplicationOutput`](crate::output::StopDBInstanceAutomatedBackupsReplicationOutput)
    pub fn builder() -> crate::output::stop_db_instance_automated_backups_replication_output::Builder
    {
        crate::output::stop_db_instance_automated_backups_replication_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopDBInstanceOutput {
    /// <p>Contains the details of an Amazon RDS DB instance.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
    /// </p>
    pub db_instance: std::option::Option<crate::model::DBInstance>,
}
impl std::fmt::Debug for StopDBInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopDBInstanceOutput");
        formatter.field("db_instance", &self.db_instance);
        formatter.finish()
    }
}
/// See [`StopDBInstanceOutput`](crate::output::StopDBInstanceOutput)
pub mod stop_db_instance_output {
    /// A builder for [`StopDBInstanceOutput`](crate::output::StopDBInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance: std::option::Option<crate::model::DBInstance>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB instance.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
        /// </p>
        pub fn db_instance(mut self, input: crate::model::DBInstance) -> Self {
            self.db_instance = Some(input);
            self
        }
        pub fn set_db_instance(
            mut self,
            input: std::option::Option<crate::model::DBInstance>,
        ) -> Self {
            self.db_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`StopDBInstanceOutput`](crate::output::StopDBInstanceOutput)
        pub fn build(self) -> crate::output::StopDBInstanceOutput {
            crate::output::StopDBInstanceOutput {
                db_instance: self.db_instance,
            }
        }
    }
}
impl StopDBInstanceOutput {
    /// Creates a new builder-style object to manufacture [`StopDBInstanceOutput`](crate::output::StopDBInstanceOutput)
    pub fn builder() -> crate::output::stop_db_instance_output::Builder {
        crate::output::stop_db_instance_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopDBClusterOutput {
    /// <p>Contains the details of an Amazon Aurora DB cluster.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
    /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
    /// </p>
    pub db_cluster: std::option::Option<crate::model::DBCluster>,
}
impl std::fmt::Debug for StopDBClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopDBClusterOutput");
        formatter.field("db_cluster", &self.db_cluster);
        formatter.finish()
    }
}
/// See [`StopDBClusterOutput`](crate::output::StopDBClusterOutput)
pub mod stop_db_cluster_output {
    /// A builder for [`StopDBClusterOutput`](crate::output::StopDBClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster: std::option::Option<crate::model::DBCluster>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon Aurora DB cluster.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
        /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
        /// </p>
        pub fn db_cluster(mut self, input: crate::model::DBCluster) -> Self {
            self.db_cluster = Some(input);
            self
        }
        pub fn set_db_cluster(
            mut self,
            input: std::option::Option<crate::model::DBCluster>,
        ) -> Self {
            self.db_cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`StopDBClusterOutput`](crate::output::StopDBClusterOutput)
        pub fn build(self) -> crate::output::StopDBClusterOutput {
            crate::output::StopDBClusterOutput {
                db_cluster: self.db_cluster,
            }
        }
    }
}
impl StopDBClusterOutput {
    /// Creates a new builder-style object to manufacture [`StopDBClusterOutput`](crate::output::StopDBClusterOutput)
    pub fn builder() -> crate::output::stop_db_cluster_output::Builder {
        crate::output::stop_db_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopActivityStreamOutput {
    /// <p>The AWS KMS key identifier used for encrypting messages in the database activity stream.</p>
    /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).</p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
    pub kinesis_stream_name: std::option::Option<std::string::String>,
    /// <p>The status of the database activity stream.</p>
    pub status: std::option::Option<crate::model::ActivityStreamStatus>,
}
impl std::fmt::Debug for StopActivityStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopActivityStreamOutput");
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("kinesis_stream_name", &self.kinesis_stream_name);
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`StopActivityStreamOutput`](crate::output::StopActivityStreamOutput)
pub mod stop_activity_stream_output {
    /// A builder for [`StopActivityStreamOutput`](crate::output::StopActivityStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) kinesis_stream_name: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ActivityStreamStatus>,
    }
    impl Builder {
        /// <p>The AWS KMS key identifier used for encrypting messages in the database activity stream.</p>
        /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).</p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
        pub fn kinesis_stream_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.kinesis_stream_name = Some(input.into());
            self
        }
        pub fn set_kinesis_stream_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.kinesis_stream_name = input;
            self
        }
        /// <p>The status of the database activity stream.</p>
        pub fn status(mut self, input: crate::model::ActivityStreamStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ActivityStreamStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Consumes the builder and constructs a [`StopActivityStreamOutput`](crate::output::StopActivityStreamOutput)
        pub fn build(self) -> crate::output::StopActivityStreamOutput {
            crate::output::StopActivityStreamOutput {
                kms_key_id: self.kms_key_id,
                kinesis_stream_name: self.kinesis_stream_name,
                status: self.status,
            }
        }
    }
}
impl StopActivityStreamOutput {
    /// Creates a new builder-style object to manufacture [`StopActivityStreamOutput`](crate::output::StopActivityStreamOutput)
    pub fn builder() -> crate::output::stop_activity_stream_output::Builder {
        crate::output::stop_activity_stream_output::Builder::default()
    }
}

/// <p>Contains the details of a snapshot export to Amazon S3.
/// </p>
/// <p>This data type is used as a response element in the <code>DescribeExportTasks</code> action.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartExportTaskOutput {
    /// <p>A unique identifier for the snapshot export task. This ID isn't an identifier for
    /// the Amazon S3 bucket where the snapshot is exported to. </p>
    pub export_task_identifier: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.</p>
    pub source_arn: std::option::Option<std::string::String>,
    /// <p>The data exported from the snapshot. Valid values are the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>database</code> - Export all the data from a specified database.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>database.table</code>
    /// <i>table-name</i> -
    /// Export a table of the snapshot. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>database.schema</code>
    /// <i>schema-name</i> - Export a database schema of the snapshot.
    /// This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>database.schema.table</code>
    /// <i>table-name</i> - Export a table of the database schema.
    /// This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p>
    /// </li>
    /// </ul>
    pub export_only: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The time that the snapshot was created.</p>
    pub snapshot_time: std::option::Option<smithy_types::Instant>,
    /// <p>The time that the snapshot export task started.</p>
    pub task_start_time: std::option::Option<smithy_types::Instant>,
    /// <p>The time that the snapshot export task completed.</p>
    pub task_end_time: std::option::Option<smithy_types::Instant>,
    /// <p>The Amazon S3 bucket that the snapshot is exported to.</p>
    pub s3_bucket: std::option::Option<std::string::String>,
    /// <p>The Amazon S3 bucket prefix that is the file name and path of the exported snapshot.</p>
    pub s3_prefix: std::option::Option<std::string::String>,
    /// <p>The name of the IAM role that is used to write to Amazon S3 when exporting a snapshot. </p>
    pub iam_role_arn: std::option::Option<std::string::String>,
    /// <p>The key identifier of the AWS KMS customer master key (CMK) that is used to encrypt the snapshot when it's exported to
    /// Amazon S3. The AWS KMS CMK identifier is its key ARN, key ID, alias ARN, or alias name. The IAM role used for the snapshot export
    /// must have encryption and decryption permissions to use this AWS KMS CMK. </p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The progress status of the export task.</p>
    pub status: std::option::Option<std::string::String>,
    /// <p>The progress of the snapshot export task as a percentage.</p>
    pub percent_progress: i32,
    /// <p>The total amount of data exported, in gigabytes.</p>
    pub total_extracted_data_in_gb: i32,
    /// <p>The reason the export failed, if it failed.</p>
    pub failure_cause: std::option::Option<std::string::String>,
    /// <p>A warning about the snapshot export task.</p>
    pub warning_message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for StartExportTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartExportTaskOutput");
        formatter.field("export_task_identifier", &self.export_task_identifier);
        formatter.field("source_arn", &self.source_arn);
        formatter.field("export_only", &self.export_only);
        formatter.field("snapshot_time", &self.snapshot_time);
        formatter.field("task_start_time", &self.task_start_time);
        formatter.field("task_end_time", &self.task_end_time);
        formatter.field("s3_bucket", &self.s3_bucket);
        formatter.field("s3_prefix", &self.s3_prefix);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("status", &self.status);
        formatter.field("percent_progress", &self.percent_progress);
        formatter.field(
            "total_extracted_data_in_gb",
            &self.total_extracted_data_in_gb,
        );
        formatter.field("failure_cause", &self.failure_cause);
        formatter.field("warning_message", &self.warning_message);
        formatter.finish()
    }
}
/// See [`StartExportTaskOutput`](crate::output::StartExportTaskOutput)
pub mod start_export_task_output {
    /// A builder for [`StartExportTaskOutput`](crate::output::StartExportTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) export_task_identifier: std::option::Option<std::string::String>,
        pub(crate) source_arn: std::option::Option<std::string::String>,
        pub(crate) export_only: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) snapshot_time: std::option::Option<smithy_types::Instant>,
        pub(crate) task_start_time: std::option::Option<smithy_types::Instant>,
        pub(crate) task_end_time: std::option::Option<smithy_types::Instant>,
        pub(crate) s3_bucket: std::option::Option<std::string::String>,
        pub(crate) s3_prefix: std::option::Option<std::string::String>,
        pub(crate) iam_role_arn: std::option::Option<std::string::String>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) percent_progress: std::option::Option<i32>,
        pub(crate) total_extracted_data_in_gb: std::option::Option<i32>,
        pub(crate) failure_cause: std::option::Option<std::string::String>,
        pub(crate) warning_message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A unique identifier for the snapshot export task. This ID isn't an identifier for
        /// the Amazon S3 bucket where the snapshot is exported to. </p>
        pub fn export_task_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.export_task_identifier = Some(input.into());
            self
        }
        pub fn set_export_task_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.export_task_identifier = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.</p>
        pub fn source_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_arn = Some(input.into());
            self
        }
        pub fn set_source_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.source_arn = input;
            self
        }
        pub fn export_only(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.export_only.unwrap_or_default();
            v.push(input.into());
            self.export_only = Some(v);
            self
        }
        pub fn set_export_only(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.export_only = input;
            self
        }
        /// <p>The time that the snapshot was created.</p>
        pub fn snapshot_time(mut self, input: smithy_types::Instant) -> Self {
            self.snapshot_time = Some(input);
            self
        }
        pub fn set_snapshot_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.snapshot_time = input;
            self
        }
        /// <p>The time that the snapshot export task started.</p>
        pub fn task_start_time(mut self, input: smithy_types::Instant) -> Self {
            self.task_start_time = Some(input);
            self
        }
        pub fn set_task_start_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.task_start_time = input;
            self
        }
        /// <p>The time that the snapshot export task completed.</p>
        pub fn task_end_time(mut self, input: smithy_types::Instant) -> Self {
            self.task_end_time = Some(input);
            self
        }
        pub fn set_task_end_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.task_end_time = input;
            self
        }
        /// <p>The Amazon S3 bucket that the snapshot is exported to.</p>
        pub fn s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_bucket = Some(input.into());
            self
        }
        pub fn set_s3_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.s3_bucket = input;
            self
        }
        /// <p>The Amazon S3 bucket prefix that is the file name and path of the exported snapshot.</p>
        pub fn s3_prefix(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_prefix = Some(input.into());
            self
        }
        pub fn set_s3_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.s3_prefix = input;
            self
        }
        /// <p>The name of the IAM role that is used to write to Amazon S3 when exporting a snapshot. </p>
        pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.iam_role_arn = Some(input.into());
            self
        }
        pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.iam_role_arn = input;
            self
        }
        /// <p>The key identifier of the AWS KMS customer master key (CMK) that is used to encrypt the snapshot when it's exported to
        /// Amazon S3. The AWS KMS CMK identifier is its key ARN, key ID, alias ARN, or alias name. The IAM role used for the snapshot export
        /// must have encryption and decryption permissions to use this AWS KMS CMK. </p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>The progress status of the export task.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// <p>The progress of the snapshot export task as a percentage.</p>
        pub fn percent_progress(mut self, input: i32) -> Self {
            self.percent_progress = Some(input);
            self
        }
        pub fn set_percent_progress(mut self, input: std::option::Option<i32>) -> Self {
            self.percent_progress = input;
            self
        }
        /// <p>The total amount of data exported, in gigabytes.</p>
        pub fn total_extracted_data_in_gb(mut self, input: i32) -> Self {
            self.total_extracted_data_in_gb = Some(input);
            self
        }
        pub fn set_total_extracted_data_in_gb(mut self, input: std::option::Option<i32>) -> Self {
            self.total_extracted_data_in_gb = input;
            self
        }
        /// <p>The reason the export failed, if it failed.</p>
        pub fn failure_cause(mut self, input: impl Into<std::string::String>) -> Self {
            self.failure_cause = Some(input.into());
            self
        }
        pub fn set_failure_cause(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.failure_cause = input;
            self
        }
        /// <p>A warning about the snapshot export task.</p>
        pub fn warning_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.warning_message = Some(input.into());
            self
        }
        pub fn set_warning_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.warning_message = input;
            self
        }
        /// Consumes the builder and constructs a [`StartExportTaskOutput`](crate::output::StartExportTaskOutput)
        pub fn build(self) -> crate::output::StartExportTaskOutput {
            crate::output::StartExportTaskOutput {
                export_task_identifier: self.export_task_identifier,
                source_arn: self.source_arn,
                export_only: self.export_only,
                snapshot_time: self.snapshot_time,
                task_start_time: self.task_start_time,
                task_end_time: self.task_end_time,
                s3_bucket: self.s3_bucket,
                s3_prefix: self.s3_prefix,
                iam_role_arn: self.iam_role_arn,
                kms_key_id: self.kms_key_id,
                status: self.status,
                percent_progress: self.percent_progress.unwrap_or_default(),
                total_extracted_data_in_gb: self.total_extracted_data_in_gb.unwrap_or_default(),
                failure_cause: self.failure_cause,
                warning_message: self.warning_message,
            }
        }
    }
}
impl StartExportTaskOutput {
    /// Creates a new builder-style object to manufacture [`StartExportTaskOutput`](crate::output::StartExportTaskOutput)
    pub fn builder() -> crate::output::start_export_task_output::Builder {
        crate::output::start_export_task_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartDBInstanceAutomatedBackupsReplicationOutput {
    /// <p>An automated backup of a DB instance. It consists of system backups, transaction logs, and the database instance properties that
    /// existed at the time you deleted the source instance.</p>
    pub db_instance_automated_backup: std::option::Option<crate::model::DBInstanceAutomatedBackup>,
}
impl std::fmt::Debug for StartDBInstanceAutomatedBackupsReplicationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartDBInstanceAutomatedBackupsReplicationOutput");
        formatter.field(
            "db_instance_automated_backup",
            &self.db_instance_automated_backup,
        );
        formatter.finish()
    }
}
/// See [`StartDBInstanceAutomatedBackupsReplicationOutput`](crate::output::StartDBInstanceAutomatedBackupsReplicationOutput)
pub mod start_db_instance_automated_backups_replication_output {
    /// A builder for [`StartDBInstanceAutomatedBackupsReplicationOutput`](crate::output::StartDBInstanceAutomatedBackupsReplicationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_automated_backup:
            std::option::Option<crate::model::DBInstanceAutomatedBackup>,
    }
    impl Builder {
        /// <p>An automated backup of a DB instance. It consists of system backups, transaction logs, and the database instance properties that
        /// existed at the time you deleted the source instance.</p>
        pub fn db_instance_automated_backup(
            mut self,
            input: crate::model::DBInstanceAutomatedBackup,
        ) -> Self {
            self.db_instance_automated_backup = Some(input);
            self
        }
        pub fn set_db_instance_automated_backup(
            mut self,
            input: std::option::Option<crate::model::DBInstanceAutomatedBackup>,
        ) -> Self {
            self.db_instance_automated_backup = input;
            self
        }
        /// Consumes the builder and constructs a [`StartDBInstanceAutomatedBackupsReplicationOutput`](crate::output::StartDBInstanceAutomatedBackupsReplicationOutput)
        pub fn build(self) -> crate::output::StartDBInstanceAutomatedBackupsReplicationOutput {
            crate::output::StartDBInstanceAutomatedBackupsReplicationOutput {
                db_instance_automated_backup: self.db_instance_automated_backup,
            }
        }
    }
}
impl StartDBInstanceAutomatedBackupsReplicationOutput {
    /// Creates a new builder-style object to manufacture [`StartDBInstanceAutomatedBackupsReplicationOutput`](crate::output::StartDBInstanceAutomatedBackupsReplicationOutput)
    pub fn builder(
    ) -> crate::output::start_db_instance_automated_backups_replication_output::Builder {
        crate::output::start_db_instance_automated_backups_replication_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartDBInstanceOutput {
    /// <p>Contains the details of an Amazon RDS DB instance.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
    /// </p>
    pub db_instance: std::option::Option<crate::model::DBInstance>,
}
impl std::fmt::Debug for StartDBInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartDBInstanceOutput");
        formatter.field("db_instance", &self.db_instance);
        formatter.finish()
    }
}
/// See [`StartDBInstanceOutput`](crate::output::StartDBInstanceOutput)
pub mod start_db_instance_output {
    /// A builder for [`StartDBInstanceOutput`](crate::output::StartDBInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance: std::option::Option<crate::model::DBInstance>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB instance.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
        /// </p>
        pub fn db_instance(mut self, input: crate::model::DBInstance) -> Self {
            self.db_instance = Some(input);
            self
        }
        pub fn set_db_instance(
            mut self,
            input: std::option::Option<crate::model::DBInstance>,
        ) -> Self {
            self.db_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`StartDBInstanceOutput`](crate::output::StartDBInstanceOutput)
        pub fn build(self) -> crate::output::StartDBInstanceOutput {
            crate::output::StartDBInstanceOutput {
                db_instance: self.db_instance,
            }
        }
    }
}
impl StartDBInstanceOutput {
    /// Creates a new builder-style object to manufacture [`StartDBInstanceOutput`](crate::output::StartDBInstanceOutput)
    pub fn builder() -> crate::output::start_db_instance_output::Builder {
        crate::output::start_db_instance_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartDBClusterOutput {
    /// <p>Contains the details of an Amazon Aurora DB cluster.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
    /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
    /// </p>
    pub db_cluster: std::option::Option<crate::model::DBCluster>,
}
impl std::fmt::Debug for StartDBClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartDBClusterOutput");
        formatter.field("db_cluster", &self.db_cluster);
        formatter.finish()
    }
}
/// See [`StartDBClusterOutput`](crate::output::StartDBClusterOutput)
pub mod start_db_cluster_output {
    /// A builder for [`StartDBClusterOutput`](crate::output::StartDBClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster: std::option::Option<crate::model::DBCluster>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon Aurora DB cluster.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
        /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
        /// </p>
        pub fn db_cluster(mut self, input: crate::model::DBCluster) -> Self {
            self.db_cluster = Some(input);
            self
        }
        pub fn set_db_cluster(
            mut self,
            input: std::option::Option<crate::model::DBCluster>,
        ) -> Self {
            self.db_cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`StartDBClusterOutput`](crate::output::StartDBClusterOutput)
        pub fn build(self) -> crate::output::StartDBClusterOutput {
            crate::output::StartDBClusterOutput {
                db_cluster: self.db_cluster,
            }
        }
    }
}
impl StartDBClusterOutput {
    /// Creates a new builder-style object to manufacture [`StartDBClusterOutput`](crate::output::StartDBClusterOutput)
    pub fn builder() -> crate::output::start_db_cluster_output::Builder {
        crate::output::start_db_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartActivityStreamOutput {
    /// <p>The AWS KMS key identifier for encryption of messages in the database activity stream.</p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The name of the Amazon Kinesis data stream to be used for the database activity stream.</p>
    pub kinesis_stream_name: std::option::Option<std::string::String>,
    /// <p>The status of the database activity stream.</p>
    pub status: std::option::Option<crate::model::ActivityStreamStatus>,
    /// <p>The mode of the database activity stream.</p>
    pub mode: std::option::Option<crate::model::ActivityStreamMode>,
    /// <p>Indicates whether or not the database activity stream will start as soon as possible,
    /// regardless of the maintenance window for the database.</p>
    pub apply_immediately: bool,
}
impl std::fmt::Debug for StartActivityStreamOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartActivityStreamOutput");
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("kinesis_stream_name", &self.kinesis_stream_name);
        formatter.field("status", &self.status);
        formatter.field("mode", &self.mode);
        formatter.field("apply_immediately", &self.apply_immediately);
        formatter.finish()
    }
}
/// See [`StartActivityStreamOutput`](crate::output::StartActivityStreamOutput)
pub mod start_activity_stream_output {
    /// A builder for [`StartActivityStreamOutput`](crate::output::StartActivityStreamOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) kinesis_stream_name: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::ActivityStreamStatus>,
        pub(crate) mode: std::option::Option<crate::model::ActivityStreamMode>,
        pub(crate) apply_immediately: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The AWS KMS key identifier for encryption of messages in the database activity stream.</p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>The name of the Amazon Kinesis data stream to be used for the database activity stream.</p>
        pub fn kinesis_stream_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.kinesis_stream_name = Some(input.into());
            self
        }
        pub fn set_kinesis_stream_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.kinesis_stream_name = input;
            self
        }
        /// <p>The status of the database activity stream.</p>
        pub fn status(mut self, input: crate::model::ActivityStreamStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::ActivityStreamStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>The mode of the database activity stream.</p>
        pub fn mode(mut self, input: crate::model::ActivityStreamMode) -> Self {
            self.mode = Some(input);
            self
        }
        pub fn set_mode(
            mut self,
            input: std::option::Option<crate::model::ActivityStreamMode>,
        ) -> Self {
            self.mode = input;
            self
        }
        /// <p>Indicates whether or not the database activity stream will start as soon as possible,
        /// regardless of the maintenance window for the database.</p>
        pub fn apply_immediately(mut self, input: bool) -> Self {
            self.apply_immediately = Some(input);
            self
        }
        pub fn set_apply_immediately(mut self, input: std::option::Option<bool>) -> Self {
            self.apply_immediately = input;
            self
        }
        /// Consumes the builder and constructs a [`StartActivityStreamOutput`](crate::output::StartActivityStreamOutput)
        pub fn build(self) -> crate::output::StartActivityStreamOutput {
            crate::output::StartActivityStreamOutput {
                kms_key_id: self.kms_key_id,
                kinesis_stream_name: self.kinesis_stream_name,
                status: self.status,
                mode: self.mode,
                apply_immediately: self.apply_immediately.unwrap_or_default(),
            }
        }
    }
}
impl StartActivityStreamOutput {
    /// Creates a new builder-style object to manufacture [`StartActivityStreamOutput`](crate::output::StartActivityStreamOutput)
    pub fn builder() -> crate::output::start_activity_stream_output::Builder {
        crate::output::start_activity_stream_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RevokeDBSecurityGroupIngressOutput {
    /// <p>Contains the details for an Amazon RDS DB security group.
    /// </p>
    /// <p>This data type is used as a response element
    /// in the <code>DescribeDBSecurityGroups</code> action.
    /// </p>
    pub db_security_group: std::option::Option<crate::model::DBSecurityGroup>,
}
impl std::fmt::Debug for RevokeDBSecurityGroupIngressOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RevokeDBSecurityGroupIngressOutput");
        formatter.field("db_security_group", &self.db_security_group);
        formatter.finish()
    }
}
/// See [`RevokeDBSecurityGroupIngressOutput`](crate::output::RevokeDBSecurityGroupIngressOutput)
pub mod revoke_db_security_group_ingress_output {
    /// A builder for [`RevokeDBSecurityGroupIngressOutput`](crate::output::RevokeDBSecurityGroupIngressOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_security_group: std::option::Option<crate::model::DBSecurityGroup>,
    }
    impl Builder {
        /// <p>Contains the details for an Amazon RDS DB security group.
        /// </p>
        /// <p>This data type is used as a response element
        /// in the <code>DescribeDBSecurityGroups</code> action.
        /// </p>
        pub fn db_security_group(mut self, input: crate::model::DBSecurityGroup) -> Self {
            self.db_security_group = Some(input);
            self
        }
        pub fn set_db_security_group(
            mut self,
            input: std::option::Option<crate::model::DBSecurityGroup>,
        ) -> Self {
            self.db_security_group = input;
            self
        }
        /// Consumes the builder and constructs a [`RevokeDBSecurityGroupIngressOutput`](crate::output::RevokeDBSecurityGroupIngressOutput)
        pub fn build(self) -> crate::output::RevokeDBSecurityGroupIngressOutput {
            crate::output::RevokeDBSecurityGroupIngressOutput {
                db_security_group: self.db_security_group,
            }
        }
    }
}
impl RevokeDBSecurityGroupIngressOutput {
    /// Creates a new builder-style object to manufacture [`RevokeDBSecurityGroupIngressOutput`](crate::output::RevokeDBSecurityGroupIngressOutput)
    pub fn builder() -> crate::output::revoke_db_security_group_ingress_output::Builder {
        crate::output::revoke_db_security_group_ingress_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreDBInstanceToPointInTimeOutput {
    /// <p>Contains the details of an Amazon RDS DB instance.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
    /// </p>
    pub db_instance: std::option::Option<crate::model::DBInstance>,
}
impl std::fmt::Debug for RestoreDBInstanceToPointInTimeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreDBInstanceToPointInTimeOutput");
        formatter.field("db_instance", &self.db_instance);
        formatter.finish()
    }
}
/// See [`RestoreDBInstanceToPointInTimeOutput`](crate::output::RestoreDBInstanceToPointInTimeOutput)
pub mod restore_db_instance_to_point_in_time_output {
    /// A builder for [`RestoreDBInstanceToPointInTimeOutput`](crate::output::RestoreDBInstanceToPointInTimeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance: std::option::Option<crate::model::DBInstance>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB instance.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
        /// </p>
        pub fn db_instance(mut self, input: crate::model::DBInstance) -> Self {
            self.db_instance = Some(input);
            self
        }
        pub fn set_db_instance(
            mut self,
            input: std::option::Option<crate::model::DBInstance>,
        ) -> Self {
            self.db_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`RestoreDBInstanceToPointInTimeOutput`](crate::output::RestoreDBInstanceToPointInTimeOutput)
        pub fn build(self) -> crate::output::RestoreDBInstanceToPointInTimeOutput {
            crate::output::RestoreDBInstanceToPointInTimeOutput {
                db_instance: self.db_instance,
            }
        }
    }
}
impl RestoreDBInstanceToPointInTimeOutput {
    /// Creates a new builder-style object to manufacture [`RestoreDBInstanceToPointInTimeOutput`](crate::output::RestoreDBInstanceToPointInTimeOutput)
    pub fn builder() -> crate::output::restore_db_instance_to_point_in_time_output::Builder {
        crate::output::restore_db_instance_to_point_in_time_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreDBInstanceFromS3Output {
    /// <p>Contains the details of an Amazon RDS DB instance.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
    /// </p>
    pub db_instance: std::option::Option<crate::model::DBInstance>,
}
impl std::fmt::Debug for RestoreDBInstanceFromS3Output {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreDBInstanceFromS3Output");
        formatter.field("db_instance", &self.db_instance);
        formatter.finish()
    }
}
/// See [`RestoreDBInstanceFromS3Output`](crate::output::RestoreDBInstanceFromS3Output)
pub mod restore_db_instance_from_s3_output {
    /// A builder for [`RestoreDBInstanceFromS3Output`](crate::output::RestoreDBInstanceFromS3Output)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance: std::option::Option<crate::model::DBInstance>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB instance.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
        /// </p>
        pub fn db_instance(mut self, input: crate::model::DBInstance) -> Self {
            self.db_instance = Some(input);
            self
        }
        pub fn set_db_instance(
            mut self,
            input: std::option::Option<crate::model::DBInstance>,
        ) -> Self {
            self.db_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`RestoreDBInstanceFromS3Output`](crate::output::RestoreDBInstanceFromS3Output)
        pub fn build(self) -> crate::output::RestoreDBInstanceFromS3Output {
            crate::output::RestoreDBInstanceFromS3Output {
                db_instance: self.db_instance,
            }
        }
    }
}
impl RestoreDBInstanceFromS3Output {
    /// Creates a new builder-style object to manufacture [`RestoreDBInstanceFromS3Output`](crate::output::RestoreDBInstanceFromS3Output)
    pub fn builder() -> crate::output::restore_db_instance_from_s3_output::Builder {
        crate::output::restore_db_instance_from_s3_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreDBInstanceFromDBSnapshotOutput {
    /// <p>Contains the details of an Amazon RDS DB instance.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
    /// </p>
    pub db_instance: std::option::Option<crate::model::DBInstance>,
}
impl std::fmt::Debug for RestoreDBInstanceFromDBSnapshotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreDBInstanceFromDBSnapshotOutput");
        formatter.field("db_instance", &self.db_instance);
        formatter.finish()
    }
}
/// See [`RestoreDBInstanceFromDBSnapshotOutput`](crate::output::RestoreDBInstanceFromDBSnapshotOutput)
pub mod restore_db_instance_from_db_snapshot_output {
    /// A builder for [`RestoreDBInstanceFromDBSnapshotOutput`](crate::output::RestoreDBInstanceFromDBSnapshotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance: std::option::Option<crate::model::DBInstance>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB instance.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
        /// </p>
        pub fn db_instance(mut self, input: crate::model::DBInstance) -> Self {
            self.db_instance = Some(input);
            self
        }
        pub fn set_db_instance(
            mut self,
            input: std::option::Option<crate::model::DBInstance>,
        ) -> Self {
            self.db_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`RestoreDBInstanceFromDBSnapshotOutput`](crate::output::RestoreDBInstanceFromDBSnapshotOutput)
        pub fn build(self) -> crate::output::RestoreDBInstanceFromDBSnapshotOutput {
            crate::output::RestoreDBInstanceFromDBSnapshotOutput {
                db_instance: self.db_instance,
            }
        }
    }
}
impl RestoreDBInstanceFromDBSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`RestoreDBInstanceFromDBSnapshotOutput`](crate::output::RestoreDBInstanceFromDBSnapshotOutput)
    pub fn builder() -> crate::output::restore_db_instance_from_db_snapshot_output::Builder {
        crate::output::restore_db_instance_from_db_snapshot_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreDBClusterToPointInTimeOutput {
    /// <p>Contains the details of an Amazon Aurora DB cluster.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
    /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
    /// </p>
    pub db_cluster: std::option::Option<crate::model::DBCluster>,
}
impl std::fmt::Debug for RestoreDBClusterToPointInTimeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreDBClusterToPointInTimeOutput");
        formatter.field("db_cluster", &self.db_cluster);
        formatter.finish()
    }
}
/// See [`RestoreDBClusterToPointInTimeOutput`](crate::output::RestoreDBClusterToPointInTimeOutput)
pub mod restore_db_cluster_to_point_in_time_output {
    /// A builder for [`RestoreDBClusterToPointInTimeOutput`](crate::output::RestoreDBClusterToPointInTimeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster: std::option::Option<crate::model::DBCluster>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon Aurora DB cluster.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
        /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
        /// </p>
        pub fn db_cluster(mut self, input: crate::model::DBCluster) -> Self {
            self.db_cluster = Some(input);
            self
        }
        pub fn set_db_cluster(
            mut self,
            input: std::option::Option<crate::model::DBCluster>,
        ) -> Self {
            self.db_cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`RestoreDBClusterToPointInTimeOutput`](crate::output::RestoreDBClusterToPointInTimeOutput)
        pub fn build(self) -> crate::output::RestoreDBClusterToPointInTimeOutput {
            crate::output::RestoreDBClusterToPointInTimeOutput {
                db_cluster: self.db_cluster,
            }
        }
    }
}
impl RestoreDBClusterToPointInTimeOutput {
    /// Creates a new builder-style object to manufacture [`RestoreDBClusterToPointInTimeOutput`](crate::output::RestoreDBClusterToPointInTimeOutput)
    pub fn builder() -> crate::output::restore_db_cluster_to_point_in_time_output::Builder {
        crate::output::restore_db_cluster_to_point_in_time_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreDBClusterFromSnapshotOutput {
    /// <p>Contains the details of an Amazon Aurora DB cluster.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
    /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
    /// </p>
    pub db_cluster: std::option::Option<crate::model::DBCluster>,
}
impl std::fmt::Debug for RestoreDBClusterFromSnapshotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreDBClusterFromSnapshotOutput");
        formatter.field("db_cluster", &self.db_cluster);
        formatter.finish()
    }
}
/// See [`RestoreDBClusterFromSnapshotOutput`](crate::output::RestoreDBClusterFromSnapshotOutput)
pub mod restore_db_cluster_from_snapshot_output {
    /// A builder for [`RestoreDBClusterFromSnapshotOutput`](crate::output::RestoreDBClusterFromSnapshotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster: std::option::Option<crate::model::DBCluster>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon Aurora DB cluster.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
        /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
        /// </p>
        pub fn db_cluster(mut self, input: crate::model::DBCluster) -> Self {
            self.db_cluster = Some(input);
            self
        }
        pub fn set_db_cluster(
            mut self,
            input: std::option::Option<crate::model::DBCluster>,
        ) -> Self {
            self.db_cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`RestoreDBClusterFromSnapshotOutput`](crate::output::RestoreDBClusterFromSnapshotOutput)
        pub fn build(self) -> crate::output::RestoreDBClusterFromSnapshotOutput {
            crate::output::RestoreDBClusterFromSnapshotOutput {
                db_cluster: self.db_cluster,
            }
        }
    }
}
impl RestoreDBClusterFromSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`RestoreDBClusterFromSnapshotOutput`](crate::output::RestoreDBClusterFromSnapshotOutput)
    pub fn builder() -> crate::output::restore_db_cluster_from_snapshot_output::Builder {
        crate::output::restore_db_cluster_from_snapshot_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreDBClusterFromS3Output {
    /// <p>Contains the details of an Amazon Aurora DB cluster.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
    /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
    /// </p>
    pub db_cluster: std::option::Option<crate::model::DBCluster>,
}
impl std::fmt::Debug for RestoreDBClusterFromS3Output {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreDBClusterFromS3Output");
        formatter.field("db_cluster", &self.db_cluster);
        formatter.finish()
    }
}
/// See [`RestoreDBClusterFromS3Output`](crate::output::RestoreDBClusterFromS3Output)
pub mod restore_db_cluster_from_s3_output {
    /// A builder for [`RestoreDBClusterFromS3Output`](crate::output::RestoreDBClusterFromS3Output)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster: std::option::Option<crate::model::DBCluster>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon Aurora DB cluster.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
        /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
        /// </p>
        pub fn db_cluster(mut self, input: crate::model::DBCluster) -> Self {
            self.db_cluster = Some(input);
            self
        }
        pub fn set_db_cluster(
            mut self,
            input: std::option::Option<crate::model::DBCluster>,
        ) -> Self {
            self.db_cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`RestoreDBClusterFromS3Output`](crate::output::RestoreDBClusterFromS3Output)
        pub fn build(self) -> crate::output::RestoreDBClusterFromS3Output {
            crate::output::RestoreDBClusterFromS3Output {
                db_cluster: self.db_cluster,
            }
        }
    }
}
impl RestoreDBClusterFromS3Output {
    /// Creates a new builder-style object to manufacture [`RestoreDBClusterFromS3Output`](crate::output::RestoreDBClusterFromS3Output)
    pub fn builder() -> crate::output::restore_db_cluster_from_s3_output::Builder {
        crate::output::restore_db_cluster_from_s3_output::Builder::default()
    }
}

/// <p>
/// Contains the result of a successful invocation of the
/// <code>ModifyDBParameterGroup</code> or <code>ResetDBParameterGroup</code> action.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResetDBParameterGroupOutput {
    /// <p>The name of the DB parameter group.</p>
    pub db_parameter_group_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ResetDBParameterGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResetDBParameterGroupOutput");
        formatter.field("db_parameter_group_name", &self.db_parameter_group_name);
        formatter.finish()
    }
}
/// See [`ResetDBParameterGroupOutput`](crate::output::ResetDBParameterGroupOutput)
pub mod reset_db_parameter_group_output {
    /// A builder for [`ResetDBParameterGroupOutput`](crate::output::ResetDBParameterGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_parameter_group_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB parameter group.</p>
        pub fn db_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_name = input;
            self
        }
        /// Consumes the builder and constructs a [`ResetDBParameterGroupOutput`](crate::output::ResetDBParameterGroupOutput)
        pub fn build(self) -> crate::output::ResetDBParameterGroupOutput {
            crate::output::ResetDBParameterGroupOutput {
                db_parameter_group_name: self.db_parameter_group_name,
            }
        }
    }
}
impl ResetDBParameterGroupOutput {
    /// Creates a new builder-style object to manufacture [`ResetDBParameterGroupOutput`](crate::output::ResetDBParameterGroupOutput)
    pub fn builder() -> crate::output::reset_db_parameter_group_output::Builder {
        crate::output::reset_db_parameter_group_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResetDBClusterParameterGroupOutput {
    /// <p>The name of the DB cluster parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 255 letters or numbers.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>This value is stored as a lowercase string.</p>
    /// </note>
    pub db_cluster_parameter_group_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ResetDBClusterParameterGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResetDBClusterParameterGroupOutput");
        formatter.field(
            "db_cluster_parameter_group_name",
            &self.db_cluster_parameter_group_name,
        );
        formatter.finish()
    }
}
/// See [`ResetDBClusterParameterGroupOutput`](crate::output::ResetDBClusterParameterGroupOutput)
pub mod reset_db_cluster_parameter_group_output {
    /// A builder for [`ResetDBClusterParameterGroupOutput`](crate::output::ResetDBClusterParameterGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_parameter_group_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB cluster parameter group.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be 1 to 255 letters or numbers.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>This value is stored as a lowercase string.</p>
        /// </note>
        pub fn db_cluster_parameter_group_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_cluster_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = input;
            self
        }
        /// Consumes the builder and constructs a [`ResetDBClusterParameterGroupOutput`](crate::output::ResetDBClusterParameterGroupOutput)
        pub fn build(self) -> crate::output::ResetDBClusterParameterGroupOutput {
            crate::output::ResetDBClusterParameterGroupOutput {
                db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
            }
        }
    }
}
impl ResetDBClusterParameterGroupOutput {
    /// Creates a new builder-style object to manufacture [`ResetDBClusterParameterGroupOutput`](crate::output::ResetDBClusterParameterGroupOutput)
    pub fn builder() -> crate::output::reset_db_cluster_parameter_group_output::Builder {
        crate::output::reset_db_cluster_parameter_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveTagsFromResourceOutput {}
impl std::fmt::Debug for RemoveTagsFromResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveTagsFromResourceOutput");
        formatter.finish()
    }
}
/// See [`RemoveTagsFromResourceOutput`](crate::output::RemoveTagsFromResourceOutput)
pub mod remove_tags_from_resource_output {
    /// A builder for [`RemoveTagsFromResourceOutput`](crate::output::RemoveTagsFromResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RemoveTagsFromResourceOutput`](crate::output::RemoveTagsFromResourceOutput)
        pub fn build(self) -> crate::output::RemoveTagsFromResourceOutput {
            crate::output::RemoveTagsFromResourceOutput {}
        }
    }
}
impl RemoveTagsFromResourceOutput {
    /// Creates a new builder-style object to manufacture [`RemoveTagsFromResourceOutput`](crate::output::RemoveTagsFromResourceOutput)
    pub fn builder() -> crate::output::remove_tags_from_resource_output::Builder {
        crate::output::remove_tags_from_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveSourceIdentifierFromSubscriptionOutput {
    /// <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
    pub event_subscription: std::option::Option<crate::model::EventSubscription>,
}
impl std::fmt::Debug for RemoveSourceIdentifierFromSubscriptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveSourceIdentifierFromSubscriptionOutput");
        formatter.field("event_subscription", &self.event_subscription);
        formatter.finish()
    }
}
/// See [`RemoveSourceIdentifierFromSubscriptionOutput`](crate::output::RemoveSourceIdentifierFromSubscriptionOutput)
pub mod remove_source_identifier_from_subscription_output {
    /// A builder for [`RemoveSourceIdentifierFromSubscriptionOutput`](crate::output::RemoveSourceIdentifierFromSubscriptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_subscription: std::option::Option<crate::model::EventSubscription>,
    }
    impl Builder {
        /// <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
        pub fn event_subscription(mut self, input: crate::model::EventSubscription) -> Self {
            self.event_subscription = Some(input);
            self
        }
        pub fn set_event_subscription(
            mut self,
            input: std::option::Option<crate::model::EventSubscription>,
        ) -> Self {
            self.event_subscription = input;
            self
        }
        /// Consumes the builder and constructs a [`RemoveSourceIdentifierFromSubscriptionOutput`](crate::output::RemoveSourceIdentifierFromSubscriptionOutput)
        pub fn build(self) -> crate::output::RemoveSourceIdentifierFromSubscriptionOutput {
            crate::output::RemoveSourceIdentifierFromSubscriptionOutput {
                event_subscription: self.event_subscription,
            }
        }
    }
}
impl RemoveSourceIdentifierFromSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`RemoveSourceIdentifierFromSubscriptionOutput`](crate::output::RemoveSourceIdentifierFromSubscriptionOutput)
    pub fn builder() -> crate::output::remove_source_identifier_from_subscription_output::Builder {
        crate::output::remove_source_identifier_from_subscription_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveRoleFromDBInstanceOutput {}
impl std::fmt::Debug for RemoveRoleFromDBInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveRoleFromDBInstanceOutput");
        formatter.finish()
    }
}
/// See [`RemoveRoleFromDBInstanceOutput`](crate::output::RemoveRoleFromDBInstanceOutput)
pub mod remove_role_from_db_instance_output {
    /// A builder for [`RemoveRoleFromDBInstanceOutput`](crate::output::RemoveRoleFromDBInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RemoveRoleFromDBInstanceOutput`](crate::output::RemoveRoleFromDBInstanceOutput)
        pub fn build(self) -> crate::output::RemoveRoleFromDBInstanceOutput {
            crate::output::RemoveRoleFromDBInstanceOutput {}
        }
    }
}
impl RemoveRoleFromDBInstanceOutput {
    /// Creates a new builder-style object to manufacture [`RemoveRoleFromDBInstanceOutput`](crate::output::RemoveRoleFromDBInstanceOutput)
    pub fn builder() -> crate::output::remove_role_from_db_instance_output::Builder {
        crate::output::remove_role_from_db_instance_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveRoleFromDBClusterOutput {}
impl std::fmt::Debug for RemoveRoleFromDBClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveRoleFromDBClusterOutput");
        formatter.finish()
    }
}
/// See [`RemoveRoleFromDBClusterOutput`](crate::output::RemoveRoleFromDBClusterOutput)
pub mod remove_role_from_db_cluster_output {
    /// A builder for [`RemoveRoleFromDBClusterOutput`](crate::output::RemoveRoleFromDBClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`RemoveRoleFromDBClusterOutput`](crate::output::RemoveRoleFromDBClusterOutput)
        pub fn build(self) -> crate::output::RemoveRoleFromDBClusterOutput {
            crate::output::RemoveRoleFromDBClusterOutput {}
        }
    }
}
impl RemoveRoleFromDBClusterOutput {
    /// Creates a new builder-style object to manufacture [`RemoveRoleFromDBClusterOutput`](crate::output::RemoveRoleFromDBClusterOutput)
    pub fn builder() -> crate::output::remove_role_from_db_cluster_output::Builder {
        crate::output::remove_role_from_db_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveFromGlobalClusterOutput {
    /// <p>A data type representing an Aurora global database.</p>
    pub global_cluster: std::option::Option<crate::model::GlobalCluster>,
}
impl std::fmt::Debug for RemoveFromGlobalClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveFromGlobalClusterOutput");
        formatter.field("global_cluster", &self.global_cluster);
        formatter.finish()
    }
}
/// See [`RemoveFromGlobalClusterOutput`](crate::output::RemoveFromGlobalClusterOutput)
pub mod remove_from_global_cluster_output {
    /// A builder for [`RemoveFromGlobalClusterOutput`](crate::output::RemoveFromGlobalClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) global_cluster: std::option::Option<crate::model::GlobalCluster>,
    }
    impl Builder {
        /// <p>A data type representing an Aurora global database.</p>
        pub fn global_cluster(mut self, input: crate::model::GlobalCluster) -> Self {
            self.global_cluster = Some(input);
            self
        }
        pub fn set_global_cluster(
            mut self,
            input: std::option::Option<crate::model::GlobalCluster>,
        ) -> Self {
            self.global_cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`RemoveFromGlobalClusterOutput`](crate::output::RemoveFromGlobalClusterOutput)
        pub fn build(self) -> crate::output::RemoveFromGlobalClusterOutput {
            crate::output::RemoveFromGlobalClusterOutput {
                global_cluster: self.global_cluster,
            }
        }
    }
}
impl RemoveFromGlobalClusterOutput {
    /// Creates a new builder-style object to manufacture [`RemoveFromGlobalClusterOutput`](crate::output::RemoveFromGlobalClusterOutput)
    pub fn builder() -> crate::output::remove_from_global_cluster_output::Builder {
        crate::output::remove_from_global_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegisterDBProxyTargetsOutput {
    /// <p>One or more <code>DBProxyTarget</code> objects that are created when you register targets with a target group.</p>
    pub db_proxy_targets: std::option::Option<std::vec::Vec<crate::model::DBProxyTarget>>,
}
impl std::fmt::Debug for RegisterDBProxyTargetsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterDBProxyTargetsOutput");
        formatter.field("db_proxy_targets", &self.db_proxy_targets);
        formatter.finish()
    }
}
/// See [`RegisterDBProxyTargetsOutput`](crate::output::RegisterDBProxyTargetsOutput)
pub mod register_db_proxy_targets_output {
    /// A builder for [`RegisterDBProxyTargetsOutput`](crate::output::RegisterDBProxyTargetsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_targets:
            std::option::Option<std::vec::Vec<crate::model::DBProxyTarget>>,
    }
    impl Builder {
        pub fn db_proxy_targets(mut self, input: impl Into<crate::model::DBProxyTarget>) -> Self {
            let mut v = self.db_proxy_targets.unwrap_or_default();
            v.push(input.into());
            self.db_proxy_targets = Some(v);
            self
        }
        pub fn set_db_proxy_targets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBProxyTarget>>,
        ) -> Self {
            self.db_proxy_targets = input;
            self
        }
        /// Consumes the builder and constructs a [`RegisterDBProxyTargetsOutput`](crate::output::RegisterDBProxyTargetsOutput)
        pub fn build(self) -> crate::output::RegisterDBProxyTargetsOutput {
            crate::output::RegisterDBProxyTargetsOutput {
                db_proxy_targets: self.db_proxy_targets,
            }
        }
    }
}
impl RegisterDBProxyTargetsOutput {
    /// Creates a new builder-style object to manufacture [`RegisterDBProxyTargetsOutput`](crate::output::RegisterDBProxyTargetsOutput)
    pub fn builder() -> crate::output::register_db_proxy_targets_output::Builder {
        crate::output::register_db_proxy_targets_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RebootDBInstanceOutput {
    /// <p>Contains the details of an Amazon RDS DB instance.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
    /// </p>
    pub db_instance: std::option::Option<crate::model::DBInstance>,
}
impl std::fmt::Debug for RebootDBInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RebootDBInstanceOutput");
        formatter.field("db_instance", &self.db_instance);
        formatter.finish()
    }
}
/// See [`RebootDBInstanceOutput`](crate::output::RebootDBInstanceOutput)
pub mod reboot_db_instance_output {
    /// A builder for [`RebootDBInstanceOutput`](crate::output::RebootDBInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance: std::option::Option<crate::model::DBInstance>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB instance.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
        /// </p>
        pub fn db_instance(mut self, input: crate::model::DBInstance) -> Self {
            self.db_instance = Some(input);
            self
        }
        pub fn set_db_instance(
            mut self,
            input: std::option::Option<crate::model::DBInstance>,
        ) -> Self {
            self.db_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`RebootDBInstanceOutput`](crate::output::RebootDBInstanceOutput)
        pub fn build(self) -> crate::output::RebootDBInstanceOutput {
            crate::output::RebootDBInstanceOutput {
                db_instance: self.db_instance,
            }
        }
    }
}
impl RebootDBInstanceOutput {
    /// Creates a new builder-style object to manufacture [`RebootDBInstanceOutput`](crate::output::RebootDBInstanceOutput)
    pub fn builder() -> crate::output::reboot_db_instance_output::Builder {
        crate::output::reboot_db_instance_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PurchaseReservedDBInstancesOfferingOutput {
    /// <p>
    /// This data type is used as a response element in the
    /// <code>DescribeReservedDBInstances</code> and
    /// <code>PurchaseReservedDBInstancesOffering</code> actions.
    /// </p>
    pub reserved_db_instance: std::option::Option<crate::model::ReservedDBInstance>,
}
impl std::fmt::Debug for PurchaseReservedDBInstancesOfferingOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PurchaseReservedDBInstancesOfferingOutput");
        formatter.field("reserved_db_instance", &self.reserved_db_instance);
        formatter.finish()
    }
}
/// See [`PurchaseReservedDBInstancesOfferingOutput`](crate::output::PurchaseReservedDBInstancesOfferingOutput)
pub mod purchase_reserved_db_instances_offering_output {
    /// A builder for [`PurchaseReservedDBInstancesOfferingOutput`](crate::output::PurchaseReservedDBInstancesOfferingOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_db_instance: std::option::Option<crate::model::ReservedDBInstance>,
    }
    impl Builder {
        /// <p>
        /// This data type is used as a response element in the
        /// <code>DescribeReservedDBInstances</code> and
        /// <code>PurchaseReservedDBInstancesOffering</code> actions.
        /// </p>
        pub fn reserved_db_instance(mut self, input: crate::model::ReservedDBInstance) -> Self {
            self.reserved_db_instance = Some(input);
            self
        }
        pub fn set_reserved_db_instance(
            mut self,
            input: std::option::Option<crate::model::ReservedDBInstance>,
        ) -> Self {
            self.reserved_db_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`PurchaseReservedDBInstancesOfferingOutput`](crate::output::PurchaseReservedDBInstancesOfferingOutput)
        pub fn build(self) -> crate::output::PurchaseReservedDBInstancesOfferingOutput {
            crate::output::PurchaseReservedDBInstancesOfferingOutput {
                reserved_db_instance: self.reserved_db_instance,
            }
        }
    }
}
impl PurchaseReservedDBInstancesOfferingOutput {
    /// Creates a new builder-style object to manufacture [`PurchaseReservedDBInstancesOfferingOutput`](crate::output::PurchaseReservedDBInstancesOfferingOutput)
    pub fn builder() -> crate::output::purchase_reserved_db_instances_offering_output::Builder {
        crate::output::purchase_reserved_db_instances_offering_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PromoteReadReplicaDBClusterOutput {
    /// <p>Contains the details of an Amazon Aurora DB cluster.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
    /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
    /// </p>
    pub db_cluster: std::option::Option<crate::model::DBCluster>,
}
impl std::fmt::Debug for PromoteReadReplicaDBClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PromoteReadReplicaDBClusterOutput");
        formatter.field("db_cluster", &self.db_cluster);
        formatter.finish()
    }
}
/// See [`PromoteReadReplicaDBClusterOutput`](crate::output::PromoteReadReplicaDBClusterOutput)
pub mod promote_read_replica_db_cluster_output {
    /// A builder for [`PromoteReadReplicaDBClusterOutput`](crate::output::PromoteReadReplicaDBClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster: std::option::Option<crate::model::DBCluster>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon Aurora DB cluster.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
        /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
        /// </p>
        pub fn db_cluster(mut self, input: crate::model::DBCluster) -> Self {
            self.db_cluster = Some(input);
            self
        }
        pub fn set_db_cluster(
            mut self,
            input: std::option::Option<crate::model::DBCluster>,
        ) -> Self {
            self.db_cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`PromoteReadReplicaDBClusterOutput`](crate::output::PromoteReadReplicaDBClusterOutput)
        pub fn build(self) -> crate::output::PromoteReadReplicaDBClusterOutput {
            crate::output::PromoteReadReplicaDBClusterOutput {
                db_cluster: self.db_cluster,
            }
        }
    }
}
impl PromoteReadReplicaDBClusterOutput {
    /// Creates a new builder-style object to manufacture [`PromoteReadReplicaDBClusterOutput`](crate::output::PromoteReadReplicaDBClusterOutput)
    pub fn builder() -> crate::output::promote_read_replica_db_cluster_output::Builder {
        crate::output::promote_read_replica_db_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PromoteReadReplicaOutput {
    /// <p>Contains the details of an Amazon RDS DB instance.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
    /// </p>
    pub db_instance: std::option::Option<crate::model::DBInstance>,
}
impl std::fmt::Debug for PromoteReadReplicaOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PromoteReadReplicaOutput");
        formatter.field("db_instance", &self.db_instance);
        formatter.finish()
    }
}
/// See [`PromoteReadReplicaOutput`](crate::output::PromoteReadReplicaOutput)
pub mod promote_read_replica_output {
    /// A builder for [`PromoteReadReplicaOutput`](crate::output::PromoteReadReplicaOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance: std::option::Option<crate::model::DBInstance>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB instance.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
        /// </p>
        pub fn db_instance(mut self, input: crate::model::DBInstance) -> Self {
            self.db_instance = Some(input);
            self
        }
        pub fn set_db_instance(
            mut self,
            input: std::option::Option<crate::model::DBInstance>,
        ) -> Self {
            self.db_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`PromoteReadReplicaOutput`](crate::output::PromoteReadReplicaOutput)
        pub fn build(self) -> crate::output::PromoteReadReplicaOutput {
            crate::output::PromoteReadReplicaOutput {
                db_instance: self.db_instance,
            }
        }
    }
}
impl PromoteReadReplicaOutput {
    /// Creates a new builder-style object to manufacture [`PromoteReadReplicaOutput`](crate::output::PromoteReadReplicaOutput)
    pub fn builder() -> crate::output::promote_read_replica_output::Builder {
        crate::output::promote_read_replica_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyOptionGroupOutput {
    /// <p></p>
    pub option_group: std::option::Option<crate::model::OptionGroup>,
}
impl std::fmt::Debug for ModifyOptionGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyOptionGroupOutput");
        formatter.field("option_group", &self.option_group);
        formatter.finish()
    }
}
/// See [`ModifyOptionGroupOutput`](crate::output::ModifyOptionGroupOutput)
pub mod modify_option_group_output {
    /// A builder for [`ModifyOptionGroupOutput`](crate::output::ModifyOptionGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) option_group: std::option::Option<crate::model::OptionGroup>,
    }
    impl Builder {
        /// <p></p>
        pub fn option_group(mut self, input: crate::model::OptionGroup) -> Self {
            self.option_group = Some(input);
            self
        }
        pub fn set_option_group(
            mut self,
            input: std::option::Option<crate::model::OptionGroup>,
        ) -> Self {
            self.option_group = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyOptionGroupOutput`](crate::output::ModifyOptionGroupOutput)
        pub fn build(self) -> crate::output::ModifyOptionGroupOutput {
            crate::output::ModifyOptionGroupOutput {
                option_group: self.option_group,
            }
        }
    }
}
impl ModifyOptionGroupOutput {
    /// Creates a new builder-style object to manufacture [`ModifyOptionGroupOutput`](crate::output::ModifyOptionGroupOutput)
    pub fn builder() -> crate::output::modify_option_group_output::Builder {
        crate::output::modify_option_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyGlobalClusterOutput {
    /// <p>A data type representing an Aurora global database.</p>
    pub global_cluster: std::option::Option<crate::model::GlobalCluster>,
}
impl std::fmt::Debug for ModifyGlobalClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyGlobalClusterOutput");
        formatter.field("global_cluster", &self.global_cluster);
        formatter.finish()
    }
}
/// See [`ModifyGlobalClusterOutput`](crate::output::ModifyGlobalClusterOutput)
pub mod modify_global_cluster_output {
    /// A builder for [`ModifyGlobalClusterOutput`](crate::output::ModifyGlobalClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) global_cluster: std::option::Option<crate::model::GlobalCluster>,
    }
    impl Builder {
        /// <p>A data type representing an Aurora global database.</p>
        pub fn global_cluster(mut self, input: crate::model::GlobalCluster) -> Self {
            self.global_cluster = Some(input);
            self
        }
        pub fn set_global_cluster(
            mut self,
            input: std::option::Option<crate::model::GlobalCluster>,
        ) -> Self {
            self.global_cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyGlobalClusterOutput`](crate::output::ModifyGlobalClusterOutput)
        pub fn build(self) -> crate::output::ModifyGlobalClusterOutput {
            crate::output::ModifyGlobalClusterOutput {
                global_cluster: self.global_cluster,
            }
        }
    }
}
impl ModifyGlobalClusterOutput {
    /// Creates a new builder-style object to manufacture [`ModifyGlobalClusterOutput`](crate::output::ModifyGlobalClusterOutput)
    pub fn builder() -> crate::output::modify_global_cluster_output::Builder {
        crate::output::modify_global_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyEventSubscriptionOutput {
    /// <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
    pub event_subscription: std::option::Option<crate::model::EventSubscription>,
}
impl std::fmt::Debug for ModifyEventSubscriptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyEventSubscriptionOutput");
        formatter.field("event_subscription", &self.event_subscription);
        formatter.finish()
    }
}
/// See [`ModifyEventSubscriptionOutput`](crate::output::ModifyEventSubscriptionOutput)
pub mod modify_event_subscription_output {
    /// A builder for [`ModifyEventSubscriptionOutput`](crate::output::ModifyEventSubscriptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_subscription: std::option::Option<crate::model::EventSubscription>,
    }
    impl Builder {
        /// <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
        pub fn event_subscription(mut self, input: crate::model::EventSubscription) -> Self {
            self.event_subscription = Some(input);
            self
        }
        pub fn set_event_subscription(
            mut self,
            input: std::option::Option<crate::model::EventSubscription>,
        ) -> Self {
            self.event_subscription = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyEventSubscriptionOutput`](crate::output::ModifyEventSubscriptionOutput)
        pub fn build(self) -> crate::output::ModifyEventSubscriptionOutput {
            crate::output::ModifyEventSubscriptionOutput {
                event_subscription: self.event_subscription,
            }
        }
    }
}
impl ModifyEventSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`ModifyEventSubscriptionOutput`](crate::output::ModifyEventSubscriptionOutput)
    pub fn builder() -> crate::output::modify_event_subscription_output::Builder {
        crate::output::modify_event_subscription_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBSubnetGroupOutput {
    /// <p>Contains the details of an Amazon RDS DB subnet group.
    /// </p>
    /// <p>This data type is used as a response element
    /// in the <code>DescribeDBSubnetGroups</code> action.
    /// </p>
    pub db_subnet_group: std::option::Option<crate::model::DBSubnetGroup>,
}
impl std::fmt::Debug for ModifyDBSubnetGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBSubnetGroupOutput");
        formatter.field("db_subnet_group", &self.db_subnet_group);
        formatter.finish()
    }
}
/// See [`ModifyDBSubnetGroupOutput`](crate::output::ModifyDBSubnetGroupOutput)
pub mod modify_db_subnet_group_output {
    /// A builder for [`ModifyDBSubnetGroupOutput`](crate::output::ModifyDBSubnetGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_subnet_group: std::option::Option<crate::model::DBSubnetGroup>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB subnet group.
        /// </p>
        /// <p>This data type is used as a response element
        /// in the <code>DescribeDBSubnetGroups</code> action.
        /// </p>
        pub fn db_subnet_group(mut self, input: crate::model::DBSubnetGroup) -> Self {
            self.db_subnet_group = Some(input);
            self
        }
        pub fn set_db_subnet_group(
            mut self,
            input: std::option::Option<crate::model::DBSubnetGroup>,
        ) -> Self {
            self.db_subnet_group = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBSubnetGroupOutput`](crate::output::ModifyDBSubnetGroupOutput)
        pub fn build(self) -> crate::output::ModifyDBSubnetGroupOutput {
            crate::output::ModifyDBSubnetGroupOutput {
                db_subnet_group: self.db_subnet_group,
            }
        }
    }
}
impl ModifyDBSubnetGroupOutput {
    /// Creates a new builder-style object to manufacture [`ModifyDBSubnetGroupOutput`](crate::output::ModifyDBSubnetGroupOutput)
    pub fn builder() -> crate::output::modify_db_subnet_group_output::Builder {
        crate::output::modify_db_subnet_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBSnapshotAttributeOutput {
    /// <p>Contains the results of a successful call to the <code>DescribeDBSnapshotAttributes</code>
    /// API action.</p>
    /// <p>Manual DB snapshot attributes are used to authorize other AWS accounts
    /// to copy or restore a manual DB snapshot. For more information, see the <code>ModifyDBSnapshotAttribute</code>
    /// API action.</p>
    pub db_snapshot_attributes_result:
        std::option::Option<crate::model::DBSnapshotAttributesResult>,
}
impl std::fmt::Debug for ModifyDBSnapshotAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBSnapshotAttributeOutput");
        formatter.field(
            "db_snapshot_attributes_result",
            &self.db_snapshot_attributes_result,
        );
        formatter.finish()
    }
}
/// See [`ModifyDBSnapshotAttributeOutput`](crate::output::ModifyDBSnapshotAttributeOutput)
pub mod modify_db_snapshot_attribute_output {
    /// A builder for [`ModifyDBSnapshotAttributeOutput`](crate::output::ModifyDBSnapshotAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_snapshot_attributes_result:
            std::option::Option<crate::model::DBSnapshotAttributesResult>,
    }
    impl Builder {
        /// <p>Contains the results of a successful call to the <code>DescribeDBSnapshotAttributes</code>
        /// API action.</p>
        /// <p>Manual DB snapshot attributes are used to authorize other AWS accounts
        /// to copy or restore a manual DB snapshot. For more information, see the <code>ModifyDBSnapshotAttribute</code>
        /// API action.</p>
        pub fn db_snapshot_attributes_result(
            mut self,
            input: crate::model::DBSnapshotAttributesResult,
        ) -> Self {
            self.db_snapshot_attributes_result = Some(input);
            self
        }
        pub fn set_db_snapshot_attributes_result(
            mut self,
            input: std::option::Option<crate::model::DBSnapshotAttributesResult>,
        ) -> Self {
            self.db_snapshot_attributes_result = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBSnapshotAttributeOutput`](crate::output::ModifyDBSnapshotAttributeOutput)
        pub fn build(self) -> crate::output::ModifyDBSnapshotAttributeOutput {
            crate::output::ModifyDBSnapshotAttributeOutput {
                db_snapshot_attributes_result: self.db_snapshot_attributes_result,
            }
        }
    }
}
impl ModifyDBSnapshotAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyDBSnapshotAttributeOutput`](crate::output::ModifyDBSnapshotAttributeOutput)
    pub fn builder() -> crate::output::modify_db_snapshot_attribute_output::Builder {
        crate::output::modify_db_snapshot_attribute_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBSnapshotOutput {
    /// <p>Contains the details of an Amazon RDS DB snapshot.
    /// </p>
    /// <p>This data type is used as a response element
    /// in the <code>DescribeDBSnapshots</code> action.
    /// </p>
    pub db_snapshot: std::option::Option<crate::model::DBSnapshot>,
}
impl std::fmt::Debug for ModifyDBSnapshotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBSnapshotOutput");
        formatter.field("db_snapshot", &self.db_snapshot);
        formatter.finish()
    }
}
/// See [`ModifyDBSnapshotOutput`](crate::output::ModifyDBSnapshotOutput)
pub mod modify_db_snapshot_output {
    /// A builder for [`ModifyDBSnapshotOutput`](crate::output::ModifyDBSnapshotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_snapshot: std::option::Option<crate::model::DBSnapshot>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB snapshot.
        /// </p>
        /// <p>This data type is used as a response element
        /// in the <code>DescribeDBSnapshots</code> action.
        /// </p>
        pub fn db_snapshot(mut self, input: crate::model::DBSnapshot) -> Self {
            self.db_snapshot = Some(input);
            self
        }
        pub fn set_db_snapshot(
            mut self,
            input: std::option::Option<crate::model::DBSnapshot>,
        ) -> Self {
            self.db_snapshot = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBSnapshotOutput`](crate::output::ModifyDBSnapshotOutput)
        pub fn build(self) -> crate::output::ModifyDBSnapshotOutput {
            crate::output::ModifyDBSnapshotOutput {
                db_snapshot: self.db_snapshot,
            }
        }
    }
}
impl ModifyDBSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`ModifyDBSnapshotOutput`](crate::output::ModifyDBSnapshotOutput)
    pub fn builder() -> crate::output::modify_db_snapshot_output::Builder {
        crate::output::modify_db_snapshot_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBProxyTargetGroupOutput {
    /// <p>The settings of the modified <code>DBProxyTarget</code>.</p>
    pub db_proxy_target_group: std::option::Option<crate::model::DBProxyTargetGroup>,
}
impl std::fmt::Debug for ModifyDBProxyTargetGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBProxyTargetGroupOutput");
        formatter.field("db_proxy_target_group", &self.db_proxy_target_group);
        formatter.finish()
    }
}
/// See [`ModifyDBProxyTargetGroupOutput`](crate::output::ModifyDBProxyTargetGroupOutput)
pub mod modify_db_proxy_target_group_output {
    /// A builder for [`ModifyDBProxyTargetGroupOutput`](crate::output::ModifyDBProxyTargetGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_target_group: std::option::Option<crate::model::DBProxyTargetGroup>,
    }
    impl Builder {
        /// <p>The settings of the modified <code>DBProxyTarget</code>.</p>
        pub fn db_proxy_target_group(mut self, input: crate::model::DBProxyTargetGroup) -> Self {
            self.db_proxy_target_group = Some(input);
            self
        }
        pub fn set_db_proxy_target_group(
            mut self,
            input: std::option::Option<crate::model::DBProxyTargetGroup>,
        ) -> Self {
            self.db_proxy_target_group = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBProxyTargetGroupOutput`](crate::output::ModifyDBProxyTargetGroupOutput)
        pub fn build(self) -> crate::output::ModifyDBProxyTargetGroupOutput {
            crate::output::ModifyDBProxyTargetGroupOutput {
                db_proxy_target_group: self.db_proxy_target_group,
            }
        }
    }
}
impl ModifyDBProxyTargetGroupOutput {
    /// Creates a new builder-style object to manufacture [`ModifyDBProxyTargetGroupOutput`](crate::output::ModifyDBProxyTargetGroupOutput)
    pub fn builder() -> crate::output::modify_db_proxy_target_group_output::Builder {
        crate::output::modify_db_proxy_target_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBProxyEndpointOutput {
    /// <p>The <code>DBProxyEndpoint</code> object representing the new settings for the DB proxy endpoint.</p>
    pub db_proxy_endpoint: std::option::Option<crate::model::DBProxyEndpoint>,
}
impl std::fmt::Debug for ModifyDBProxyEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBProxyEndpointOutput");
        formatter.field("db_proxy_endpoint", &self.db_proxy_endpoint);
        formatter.finish()
    }
}
/// See [`ModifyDBProxyEndpointOutput`](crate::output::ModifyDBProxyEndpointOutput)
pub mod modify_db_proxy_endpoint_output {
    /// A builder for [`ModifyDBProxyEndpointOutput`](crate::output::ModifyDBProxyEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_endpoint: std::option::Option<crate::model::DBProxyEndpoint>,
    }
    impl Builder {
        /// <p>The <code>DBProxyEndpoint</code> object representing the new settings for the DB proxy endpoint.</p>
        pub fn db_proxy_endpoint(mut self, input: crate::model::DBProxyEndpoint) -> Self {
            self.db_proxy_endpoint = Some(input);
            self
        }
        pub fn set_db_proxy_endpoint(
            mut self,
            input: std::option::Option<crate::model::DBProxyEndpoint>,
        ) -> Self {
            self.db_proxy_endpoint = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBProxyEndpointOutput`](crate::output::ModifyDBProxyEndpointOutput)
        pub fn build(self) -> crate::output::ModifyDBProxyEndpointOutput {
            crate::output::ModifyDBProxyEndpointOutput {
                db_proxy_endpoint: self.db_proxy_endpoint,
            }
        }
    }
}
impl ModifyDBProxyEndpointOutput {
    /// Creates a new builder-style object to manufacture [`ModifyDBProxyEndpointOutput`](crate::output::ModifyDBProxyEndpointOutput)
    pub fn builder() -> crate::output::modify_db_proxy_endpoint_output::Builder {
        crate::output::modify_db_proxy_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBProxyOutput {
    /// <p>The <code>DBProxy</code> object representing the new settings for the proxy.</p>
    pub db_proxy: std::option::Option<crate::model::DBProxy>,
}
impl std::fmt::Debug for ModifyDBProxyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBProxyOutput");
        formatter.field("db_proxy", &self.db_proxy);
        formatter.finish()
    }
}
/// See [`ModifyDBProxyOutput`](crate::output::ModifyDBProxyOutput)
pub mod modify_db_proxy_output {
    /// A builder for [`ModifyDBProxyOutput`](crate::output::ModifyDBProxyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy: std::option::Option<crate::model::DBProxy>,
    }
    impl Builder {
        /// <p>The <code>DBProxy</code> object representing the new settings for the proxy.</p>
        pub fn db_proxy(mut self, input: crate::model::DBProxy) -> Self {
            self.db_proxy = Some(input);
            self
        }
        pub fn set_db_proxy(mut self, input: std::option::Option<crate::model::DBProxy>) -> Self {
            self.db_proxy = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBProxyOutput`](crate::output::ModifyDBProxyOutput)
        pub fn build(self) -> crate::output::ModifyDBProxyOutput {
            crate::output::ModifyDBProxyOutput {
                db_proxy: self.db_proxy,
            }
        }
    }
}
impl ModifyDBProxyOutput {
    /// Creates a new builder-style object to manufacture [`ModifyDBProxyOutput`](crate::output::ModifyDBProxyOutput)
    pub fn builder() -> crate::output::modify_db_proxy_output::Builder {
        crate::output::modify_db_proxy_output::Builder::default()
    }
}

/// <p>
/// Contains the result of a successful invocation of the
/// <code>ModifyDBParameterGroup</code> or <code>ResetDBParameterGroup</code> action.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBParameterGroupOutput {
    /// <p>The name of the DB parameter group.</p>
    pub db_parameter_group_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ModifyDBParameterGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBParameterGroupOutput");
        formatter.field("db_parameter_group_name", &self.db_parameter_group_name);
        formatter.finish()
    }
}
/// See [`ModifyDBParameterGroupOutput`](crate::output::ModifyDBParameterGroupOutput)
pub mod modify_db_parameter_group_output {
    /// A builder for [`ModifyDBParameterGroupOutput`](crate::output::ModifyDBParameterGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_parameter_group_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB parameter group.</p>
        pub fn db_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_name = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBParameterGroupOutput`](crate::output::ModifyDBParameterGroupOutput)
        pub fn build(self) -> crate::output::ModifyDBParameterGroupOutput {
            crate::output::ModifyDBParameterGroupOutput {
                db_parameter_group_name: self.db_parameter_group_name,
            }
        }
    }
}
impl ModifyDBParameterGroupOutput {
    /// Creates a new builder-style object to manufacture [`ModifyDBParameterGroupOutput`](crate::output::ModifyDBParameterGroupOutput)
    pub fn builder() -> crate::output::modify_db_parameter_group_output::Builder {
        crate::output::modify_db_parameter_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBInstanceOutput {
    /// <p>Contains the details of an Amazon RDS DB instance.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
    /// </p>
    pub db_instance: std::option::Option<crate::model::DBInstance>,
}
impl std::fmt::Debug for ModifyDBInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBInstanceOutput");
        formatter.field("db_instance", &self.db_instance);
        formatter.finish()
    }
}
/// See [`ModifyDBInstanceOutput`](crate::output::ModifyDBInstanceOutput)
pub mod modify_db_instance_output {
    /// A builder for [`ModifyDBInstanceOutput`](crate::output::ModifyDBInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance: std::option::Option<crate::model::DBInstance>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB instance.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
        /// </p>
        pub fn db_instance(mut self, input: crate::model::DBInstance) -> Self {
            self.db_instance = Some(input);
            self
        }
        pub fn set_db_instance(
            mut self,
            input: std::option::Option<crate::model::DBInstance>,
        ) -> Self {
            self.db_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBInstanceOutput`](crate::output::ModifyDBInstanceOutput)
        pub fn build(self) -> crate::output::ModifyDBInstanceOutput {
            crate::output::ModifyDBInstanceOutput {
                db_instance: self.db_instance,
            }
        }
    }
}
impl ModifyDBInstanceOutput {
    /// Creates a new builder-style object to manufacture [`ModifyDBInstanceOutput`](crate::output::ModifyDBInstanceOutput)
    pub fn builder() -> crate::output::modify_db_instance_output::Builder {
        crate::output::modify_db_instance_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBClusterSnapshotAttributeOutput {
    /// <p>Contains the results of a successful call to the <code>DescribeDBClusterSnapshotAttributes</code>
    /// API action.</p>
    /// <p>Manual DB cluster snapshot attributes are used to authorize other AWS accounts
    /// to copy or restore a manual DB cluster snapshot. For more information, see the <code>ModifyDBClusterSnapshotAttribute</code>
    /// API action.</p>
    pub db_cluster_snapshot_attributes_result:
        std::option::Option<crate::model::DBClusterSnapshotAttributesResult>,
}
impl std::fmt::Debug for ModifyDBClusterSnapshotAttributeOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBClusterSnapshotAttributeOutput");
        formatter.field(
            "db_cluster_snapshot_attributes_result",
            &self.db_cluster_snapshot_attributes_result,
        );
        formatter.finish()
    }
}
/// See [`ModifyDBClusterSnapshotAttributeOutput`](crate::output::ModifyDBClusterSnapshotAttributeOutput)
pub mod modify_db_cluster_snapshot_attribute_output {
    /// A builder for [`ModifyDBClusterSnapshotAttributeOutput`](crate::output::ModifyDBClusterSnapshotAttributeOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_snapshot_attributes_result:
            std::option::Option<crate::model::DBClusterSnapshotAttributesResult>,
    }
    impl Builder {
        /// <p>Contains the results of a successful call to the <code>DescribeDBClusterSnapshotAttributes</code>
        /// API action.</p>
        /// <p>Manual DB cluster snapshot attributes are used to authorize other AWS accounts
        /// to copy or restore a manual DB cluster snapshot. For more information, see the <code>ModifyDBClusterSnapshotAttribute</code>
        /// API action.</p>
        pub fn db_cluster_snapshot_attributes_result(
            mut self,
            input: crate::model::DBClusterSnapshotAttributesResult,
        ) -> Self {
            self.db_cluster_snapshot_attributes_result = Some(input);
            self
        }
        pub fn set_db_cluster_snapshot_attributes_result(
            mut self,
            input: std::option::Option<crate::model::DBClusterSnapshotAttributesResult>,
        ) -> Self {
            self.db_cluster_snapshot_attributes_result = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBClusterSnapshotAttributeOutput`](crate::output::ModifyDBClusterSnapshotAttributeOutput)
        pub fn build(self) -> crate::output::ModifyDBClusterSnapshotAttributeOutput {
            crate::output::ModifyDBClusterSnapshotAttributeOutput {
                db_cluster_snapshot_attributes_result: self.db_cluster_snapshot_attributes_result,
            }
        }
    }
}
impl ModifyDBClusterSnapshotAttributeOutput {
    /// Creates a new builder-style object to manufacture [`ModifyDBClusterSnapshotAttributeOutput`](crate::output::ModifyDBClusterSnapshotAttributeOutput)
    pub fn builder() -> crate::output::modify_db_cluster_snapshot_attribute_output::Builder {
        crate::output::modify_db_cluster_snapshot_attribute_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBClusterParameterGroupOutput {
    /// <p>The name of the DB cluster parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 255 letters or numbers.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>This value is stored as a lowercase string.</p>
    /// </note>
    pub db_cluster_parameter_group_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ModifyDBClusterParameterGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBClusterParameterGroupOutput");
        formatter.field(
            "db_cluster_parameter_group_name",
            &self.db_cluster_parameter_group_name,
        );
        formatter.finish()
    }
}
/// See [`ModifyDBClusterParameterGroupOutput`](crate::output::ModifyDBClusterParameterGroupOutput)
pub mod modify_db_cluster_parameter_group_output {
    /// A builder for [`ModifyDBClusterParameterGroupOutput`](crate::output::ModifyDBClusterParameterGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_parameter_group_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB cluster parameter group.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be 1 to 255 letters or numbers.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>This value is stored as a lowercase string.</p>
        /// </note>
        pub fn db_cluster_parameter_group_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_cluster_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBClusterParameterGroupOutput`](crate::output::ModifyDBClusterParameterGroupOutput)
        pub fn build(self) -> crate::output::ModifyDBClusterParameterGroupOutput {
            crate::output::ModifyDBClusterParameterGroupOutput {
                db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
            }
        }
    }
}
impl ModifyDBClusterParameterGroupOutput {
    /// Creates a new builder-style object to manufacture [`ModifyDBClusterParameterGroupOutput`](crate::output::ModifyDBClusterParameterGroupOutput)
    pub fn builder() -> crate::output::modify_db_cluster_parameter_group_output::Builder {
        crate::output::modify_db_cluster_parameter_group_output::Builder::default()
    }
}

/// <p>This data type represents the information you need to connect to an Amazon Aurora DB cluster.
/// This data type is used as a response element in the following actions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>CreateDBClusterEndpoint</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>DescribeDBClusterEndpoints</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>ModifyDBClusterEndpoint</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>DeleteDBClusterEndpoint</code>
/// </p>
/// </li>
/// </ul>
/// <p>For the data structure that represents Amazon RDS DB instance endpoints,
/// see <code>Endpoint</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBClusterEndpointOutput {
    /// <p>The identifier associated with the endpoint. This parameter is stored as a lowercase string.</p>
    pub db_cluster_endpoint_identifier: std::option::Option<std::string::String>,
    /// <p>The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is
    /// stored as a lowercase string.</p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.</p>
    pub db_cluster_endpoint_resource_identifier: std::option::Option<std::string::String>,
    /// <p>The DNS address of the endpoint.</p>
    pub endpoint: std::option::Option<std::string::String>,
    /// <p>The current status of the endpoint. One of: <code>creating</code>, <code>available</code>, <code>deleting</code>, <code>inactive</code>, <code>modifying</code>. The <code>inactive</code> state applies to an endpoint that can't be used for a certain kind of cluster,
    /// such as a <code>writer</code> endpoint for a read-only secondary cluster in a global database.</p>
    pub status: std::option::Option<std::string::String>,
    /// <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>CUSTOM</code>.</p>
    pub endpoint_type: std::option::Option<std::string::String>,
    /// <p>The type associated with a custom endpoint. One of: <code>READER</code>,
    /// <code>WRITER</code>, <code>ANY</code>.</p>
    pub custom_endpoint_type: std::option::Option<std::string::String>,
    /// <p>List of DB instance identifiers that are part of the custom endpoint group.</p>
    pub static_members: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>List of DB instance identifiers that aren't part of the custom endpoint group.
    /// All other eligible instances are reachable through the custom endpoint.
    /// Only relevant if the list of static members is empty.</p>
    pub excluded_members: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The Amazon Resource Name (ARN) for the endpoint.</p>
    pub db_cluster_endpoint_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ModifyDBClusterEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBClusterEndpointOutput");
        formatter.field(
            "db_cluster_endpoint_identifier",
            &self.db_cluster_endpoint_identifier,
        );
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field(
            "db_cluster_endpoint_resource_identifier",
            &self.db_cluster_endpoint_resource_identifier,
        );
        formatter.field("endpoint", &self.endpoint);
        formatter.field("status", &self.status);
        formatter.field("endpoint_type", &self.endpoint_type);
        formatter.field("custom_endpoint_type", &self.custom_endpoint_type);
        formatter.field("static_members", &self.static_members);
        formatter.field("excluded_members", &self.excluded_members);
        formatter.field("db_cluster_endpoint_arn", &self.db_cluster_endpoint_arn);
        formatter.finish()
    }
}
/// See [`ModifyDBClusterEndpointOutput`](crate::output::ModifyDBClusterEndpointOutput)
pub mod modify_db_cluster_endpoint_output {
    /// A builder for [`ModifyDBClusterEndpointOutput`](crate::output::ModifyDBClusterEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_endpoint_identifier: std::option::Option<std::string::String>,
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) db_cluster_endpoint_resource_identifier:
            std::option::Option<std::string::String>,
        pub(crate) endpoint: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) endpoint_type: std::option::Option<std::string::String>,
        pub(crate) custom_endpoint_type: std::option::Option<std::string::String>,
        pub(crate) static_members: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) excluded_members: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) db_cluster_endpoint_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier associated with the endpoint. This parameter is stored as a lowercase string.</p>
        pub fn db_cluster_endpoint_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_endpoint_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_identifier = input;
            self
        }
        /// <p>The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is
        /// stored as a lowercase string.</p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.</p>
        pub fn db_cluster_endpoint_resource_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_resource_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_endpoint_resource_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_resource_identifier = input;
            self
        }
        /// <p>The DNS address of the endpoint.</p>
        pub fn endpoint(mut self, input: impl Into<std::string::String>) -> Self {
            self.endpoint = Some(input.into());
            self
        }
        pub fn set_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.endpoint = input;
            self
        }
        /// <p>The current status of the endpoint. One of: <code>creating</code>, <code>available</code>, <code>deleting</code>, <code>inactive</code>, <code>modifying</code>. The <code>inactive</code> state applies to an endpoint that can't be used for a certain kind of cluster,
        /// such as a <code>writer</code> endpoint for a read-only secondary cluster in a global database.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>CUSTOM</code>.</p>
        pub fn endpoint_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.endpoint_type = Some(input.into());
            self
        }
        pub fn set_endpoint_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.endpoint_type = input;
            self
        }
        /// <p>The type associated with a custom endpoint. One of: <code>READER</code>,
        /// <code>WRITER</code>, <code>ANY</code>.</p>
        pub fn custom_endpoint_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.custom_endpoint_type = Some(input.into());
            self
        }
        pub fn set_custom_endpoint_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.custom_endpoint_type = input;
            self
        }
        pub fn static_members(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.static_members.unwrap_or_default();
            v.push(input.into());
            self.static_members = Some(v);
            self
        }
        pub fn set_static_members(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.static_members = input;
            self
        }
        pub fn excluded_members(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.excluded_members.unwrap_or_default();
            v.push(input.into());
            self.excluded_members = Some(v);
            self
        }
        pub fn set_excluded_members(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.excluded_members = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the endpoint.</p>
        pub fn db_cluster_endpoint_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_endpoint_arn = Some(input.into());
            self
        }
        pub fn set_db_cluster_endpoint_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBClusterEndpointOutput`](crate::output::ModifyDBClusterEndpointOutput)
        pub fn build(self) -> crate::output::ModifyDBClusterEndpointOutput {
            crate::output::ModifyDBClusterEndpointOutput {
                db_cluster_endpoint_identifier: self.db_cluster_endpoint_identifier,
                db_cluster_identifier: self.db_cluster_identifier,
                db_cluster_endpoint_resource_identifier: self
                    .db_cluster_endpoint_resource_identifier,
                endpoint: self.endpoint,
                status: self.status,
                endpoint_type: self.endpoint_type,
                custom_endpoint_type: self.custom_endpoint_type,
                static_members: self.static_members,
                excluded_members: self.excluded_members,
                db_cluster_endpoint_arn: self.db_cluster_endpoint_arn,
            }
        }
    }
}
impl ModifyDBClusterEndpointOutput {
    /// Creates a new builder-style object to manufacture [`ModifyDBClusterEndpointOutput`](crate::output::ModifyDBClusterEndpointOutput)
    pub fn builder() -> crate::output::modify_db_cluster_endpoint_output::Builder {
        crate::output::modify_db_cluster_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBClusterOutput {
    /// <p>Contains the details of an Amazon Aurora DB cluster.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
    /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
    /// </p>
    pub db_cluster: std::option::Option<crate::model::DBCluster>,
}
impl std::fmt::Debug for ModifyDBClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBClusterOutput");
        formatter.field("db_cluster", &self.db_cluster);
        formatter.finish()
    }
}
/// See [`ModifyDBClusterOutput`](crate::output::ModifyDBClusterOutput)
pub mod modify_db_cluster_output {
    /// A builder for [`ModifyDBClusterOutput`](crate::output::ModifyDBClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster: std::option::Option<crate::model::DBCluster>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon Aurora DB cluster.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
        /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
        /// </p>
        pub fn db_cluster(mut self, input: crate::model::DBCluster) -> Self {
            self.db_cluster = Some(input);
            self
        }
        pub fn set_db_cluster(
            mut self,
            input: std::option::Option<crate::model::DBCluster>,
        ) -> Self {
            self.db_cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBClusterOutput`](crate::output::ModifyDBClusterOutput)
        pub fn build(self) -> crate::output::ModifyDBClusterOutput {
            crate::output::ModifyDBClusterOutput {
                db_cluster: self.db_cluster,
            }
        }
    }
}
impl ModifyDBClusterOutput {
    /// Creates a new builder-style object to manufacture [`ModifyDBClusterOutput`](crate::output::ModifyDBClusterOutput)
    pub fn builder() -> crate::output::modify_db_cluster_output::Builder {
        crate::output::modify_db_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyCurrentDBClusterCapacityOutput {
    /// <p>A user-supplied DB cluster identifier. This identifier is the unique key that
    /// identifies a DB cluster. </p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>A value that specifies the capacity that the DB cluster scales to next.</p>
    pub pending_capacity: std::option::Option<i32>,
    /// <p>The current capacity of the DB cluster.</p>
    pub current_capacity: std::option::Option<i32>,
    /// <p>The number of seconds before a call to <code>ModifyCurrentDBClusterCapacity</code> times out.</p>
    pub seconds_before_timeout: std::option::Option<i32>,
    /// <p>The timeout action of a call to <code>ModifyCurrentDBClusterCapacity</code>, either
    /// <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p>
    pub timeout_action: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ModifyCurrentDBClusterCapacityOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyCurrentDBClusterCapacityOutput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field("pending_capacity", &self.pending_capacity);
        formatter.field("current_capacity", &self.current_capacity);
        formatter.field("seconds_before_timeout", &self.seconds_before_timeout);
        formatter.field("timeout_action", &self.timeout_action);
        formatter.finish()
    }
}
/// See [`ModifyCurrentDBClusterCapacityOutput`](crate::output::ModifyCurrentDBClusterCapacityOutput)
pub mod modify_current_db_cluster_capacity_output {
    /// A builder for [`ModifyCurrentDBClusterCapacityOutput`](crate::output::ModifyCurrentDBClusterCapacityOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) pending_capacity: std::option::Option<i32>,
        pub(crate) current_capacity: std::option::Option<i32>,
        pub(crate) seconds_before_timeout: std::option::Option<i32>,
        pub(crate) timeout_action: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A user-supplied DB cluster identifier. This identifier is the unique key that
        /// identifies a DB cluster. </p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>A value that specifies the capacity that the DB cluster scales to next.</p>
        pub fn pending_capacity(mut self, input: i32) -> Self {
            self.pending_capacity = Some(input);
            self
        }
        pub fn set_pending_capacity(mut self, input: std::option::Option<i32>) -> Self {
            self.pending_capacity = input;
            self
        }
        /// <p>The current capacity of the DB cluster.</p>
        pub fn current_capacity(mut self, input: i32) -> Self {
            self.current_capacity = Some(input);
            self
        }
        pub fn set_current_capacity(mut self, input: std::option::Option<i32>) -> Self {
            self.current_capacity = input;
            self
        }
        /// <p>The number of seconds before a call to <code>ModifyCurrentDBClusterCapacity</code> times out.</p>
        pub fn seconds_before_timeout(mut self, input: i32) -> Self {
            self.seconds_before_timeout = Some(input);
            self
        }
        pub fn set_seconds_before_timeout(mut self, input: std::option::Option<i32>) -> Self {
            self.seconds_before_timeout = input;
            self
        }
        /// <p>The timeout action of a call to <code>ModifyCurrentDBClusterCapacity</code>, either
        /// <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p>
        pub fn timeout_action(mut self, input: impl Into<std::string::String>) -> Self {
            self.timeout_action = Some(input.into());
            self
        }
        pub fn set_timeout_action(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.timeout_action = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyCurrentDBClusterCapacityOutput`](crate::output::ModifyCurrentDBClusterCapacityOutput)
        pub fn build(self) -> crate::output::ModifyCurrentDBClusterCapacityOutput {
            crate::output::ModifyCurrentDBClusterCapacityOutput {
                db_cluster_identifier: self.db_cluster_identifier,
                pending_capacity: self.pending_capacity,
                current_capacity: self.current_capacity,
                seconds_before_timeout: self.seconds_before_timeout,
                timeout_action: self.timeout_action,
            }
        }
    }
}
impl ModifyCurrentDBClusterCapacityOutput {
    /// Creates a new builder-style object to manufacture [`ModifyCurrentDBClusterCapacityOutput`](crate::output::ModifyCurrentDBClusterCapacityOutput)
    pub fn builder() -> crate::output::modify_current_db_cluster_capacity_output::Builder {
        crate::output::modify_current_db_cluster_capacity_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyCertificatesOutput {
    /// <p>A CA certificate for an AWS account.</p>
    pub certificate: std::option::Option<crate::model::Certificate>,
}
impl std::fmt::Debug for ModifyCertificatesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyCertificatesOutput");
        formatter.field("certificate", &self.certificate);
        formatter.finish()
    }
}
/// See [`ModifyCertificatesOutput`](crate::output::ModifyCertificatesOutput)
pub mod modify_certificates_output {
    /// A builder for [`ModifyCertificatesOutput`](crate::output::ModifyCertificatesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) certificate: std::option::Option<crate::model::Certificate>,
    }
    impl Builder {
        /// <p>A CA certificate for an AWS account.</p>
        pub fn certificate(mut self, input: crate::model::Certificate) -> Self {
            self.certificate = Some(input);
            self
        }
        pub fn set_certificate(
            mut self,
            input: std::option::Option<crate::model::Certificate>,
        ) -> Self {
            self.certificate = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyCertificatesOutput`](crate::output::ModifyCertificatesOutput)
        pub fn build(self) -> crate::output::ModifyCertificatesOutput {
            crate::output::ModifyCertificatesOutput {
                certificate: self.certificate,
            }
        }
    }
}
impl ModifyCertificatesOutput {
    /// Creates a new builder-style object to manufacture [`ModifyCertificatesOutput`](crate::output::ModifyCertificatesOutput)
    pub fn builder() -> crate::output::modify_certificates_output::Builder {
        crate::output::modify_certificates_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>List of tags returned by the ListTagsForResource operation.</p>
    pub tag_list: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tag_list", &self.tag_list);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tag_list: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        pub fn tag_list(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tag_list.unwrap_or_default();
            v.push(input.into());
            self.tag_list = Some(v);
            self
        }
        pub fn set_tag_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tag_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tag_list: self.tag_list,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// <p>Contains the installation media for a DB engine that requires an on-premises
/// customer provided license, such as Microsoft SQL Server.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ImportInstallationMediaOutput {
    /// <p>The installation medium ID.</p>
    pub installation_media_id: std::option::Option<std::string::String>,
    /// <p>The custom Availability Zone (AZ) that contains the installation media.</p>
    pub custom_availability_zone_id: std::option::Option<std::string::String>,
    /// <p>The DB engine.</p>
    pub engine: std::option::Option<std::string::String>,
    /// <p>The engine version of the DB engine.</p>
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The path to the installation medium for the DB engine.</p>
    pub engine_installation_media_path: std::option::Option<std::string::String>,
    /// <p>The path to the installation medium for the operating system associated with the DB engine.</p>
    pub os_installation_media_path: std::option::Option<std::string::String>,
    /// <p>The status of the installation medium.</p>
    pub status: std::option::Option<std::string::String>,
    /// <p>If an installation media failure occurred, the cause of the failure.</p>
    pub failure_cause: std::option::Option<crate::model::InstallationMediaFailureCause>,
}
impl std::fmt::Debug for ImportInstallationMediaOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ImportInstallationMediaOutput");
        formatter.field("installation_media_id", &self.installation_media_id);
        formatter.field(
            "custom_availability_zone_id",
            &self.custom_availability_zone_id,
        );
        formatter.field("engine", &self.engine);
        formatter.field("engine_version", &self.engine_version);
        formatter.field(
            "engine_installation_media_path",
            &self.engine_installation_media_path,
        );
        formatter.field(
            "os_installation_media_path",
            &self.os_installation_media_path,
        );
        formatter.field("status", &self.status);
        formatter.field("failure_cause", &self.failure_cause);
        formatter.finish()
    }
}
/// See [`ImportInstallationMediaOutput`](crate::output::ImportInstallationMediaOutput)
pub mod import_installation_media_output {
    /// A builder for [`ImportInstallationMediaOutput`](crate::output::ImportInstallationMediaOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) installation_media_id: std::option::Option<std::string::String>,
        pub(crate) custom_availability_zone_id: std::option::Option<std::string::String>,
        pub(crate) engine: std::option::Option<std::string::String>,
        pub(crate) engine_version: std::option::Option<std::string::String>,
        pub(crate) engine_installation_media_path: std::option::Option<std::string::String>,
        pub(crate) os_installation_media_path: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) failure_cause: std::option::Option<crate::model::InstallationMediaFailureCause>,
    }
    impl Builder {
        /// <p>The installation medium ID.</p>
        pub fn installation_media_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.installation_media_id = Some(input.into());
            self
        }
        pub fn set_installation_media_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.installation_media_id = input;
            self
        }
        /// <p>The custom Availability Zone (AZ) that contains the installation media.</p>
        pub fn custom_availability_zone_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.custom_availability_zone_id = Some(input.into());
            self
        }
        pub fn set_custom_availability_zone_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.custom_availability_zone_id = input;
            self
        }
        /// <p>The DB engine.</p>
        pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine = Some(input.into());
            self
        }
        pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine = input;
            self
        }
        /// <p>The engine version of the DB engine.</p>
        pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_version = Some(input.into());
            self
        }
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_version = input;
            self
        }
        /// <p>The path to the installation medium for the DB engine.</p>
        pub fn engine_installation_media_path(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.engine_installation_media_path = Some(input.into());
            self
        }
        pub fn set_engine_installation_media_path(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_installation_media_path = input;
            self
        }
        /// <p>The path to the installation medium for the operating system associated with the DB engine.</p>
        pub fn os_installation_media_path(mut self, input: impl Into<std::string::String>) -> Self {
            self.os_installation_media_path = Some(input.into());
            self
        }
        pub fn set_os_installation_media_path(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.os_installation_media_path = input;
            self
        }
        /// <p>The status of the installation medium.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// <p>If an installation media failure occurred, the cause of the failure.</p>
        pub fn failure_cause(mut self, input: crate::model::InstallationMediaFailureCause) -> Self {
            self.failure_cause = Some(input);
            self
        }
        pub fn set_failure_cause(
            mut self,
            input: std::option::Option<crate::model::InstallationMediaFailureCause>,
        ) -> Self {
            self.failure_cause = input;
            self
        }
        /// Consumes the builder and constructs a [`ImportInstallationMediaOutput`](crate::output::ImportInstallationMediaOutput)
        pub fn build(self) -> crate::output::ImportInstallationMediaOutput {
            crate::output::ImportInstallationMediaOutput {
                installation_media_id: self.installation_media_id,
                custom_availability_zone_id: self.custom_availability_zone_id,
                engine: self.engine,
                engine_version: self.engine_version,
                engine_installation_media_path: self.engine_installation_media_path,
                os_installation_media_path: self.os_installation_media_path,
                status: self.status,
                failure_cause: self.failure_cause,
            }
        }
    }
}
impl ImportInstallationMediaOutput {
    /// Creates a new builder-style object to manufacture [`ImportInstallationMediaOutput`](crate::output::ImportInstallationMediaOutput)
    pub fn builder() -> crate::output::import_installation_media_output::Builder {
        crate::output::import_installation_media_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct FailoverGlobalClusterOutput {
    /// <p>A data type representing an Aurora global database.</p>
    pub global_cluster: std::option::Option<crate::model::GlobalCluster>,
}
impl std::fmt::Debug for FailoverGlobalClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("FailoverGlobalClusterOutput");
        formatter.field("global_cluster", &self.global_cluster);
        formatter.finish()
    }
}
/// See [`FailoverGlobalClusterOutput`](crate::output::FailoverGlobalClusterOutput)
pub mod failover_global_cluster_output {
    /// A builder for [`FailoverGlobalClusterOutput`](crate::output::FailoverGlobalClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) global_cluster: std::option::Option<crate::model::GlobalCluster>,
    }
    impl Builder {
        /// <p>A data type representing an Aurora global database.</p>
        pub fn global_cluster(mut self, input: crate::model::GlobalCluster) -> Self {
            self.global_cluster = Some(input);
            self
        }
        pub fn set_global_cluster(
            mut self,
            input: std::option::Option<crate::model::GlobalCluster>,
        ) -> Self {
            self.global_cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`FailoverGlobalClusterOutput`](crate::output::FailoverGlobalClusterOutput)
        pub fn build(self) -> crate::output::FailoverGlobalClusterOutput {
            crate::output::FailoverGlobalClusterOutput {
                global_cluster: self.global_cluster,
            }
        }
    }
}
impl FailoverGlobalClusterOutput {
    /// Creates a new builder-style object to manufacture [`FailoverGlobalClusterOutput`](crate::output::FailoverGlobalClusterOutput)
    pub fn builder() -> crate::output::failover_global_cluster_output::Builder {
        crate::output::failover_global_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct FailoverDBClusterOutput {
    /// <p>Contains the details of an Amazon Aurora DB cluster.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
    /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
    /// </p>
    pub db_cluster: std::option::Option<crate::model::DBCluster>,
}
impl std::fmt::Debug for FailoverDBClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("FailoverDBClusterOutput");
        formatter.field("db_cluster", &self.db_cluster);
        formatter.finish()
    }
}
/// See [`FailoverDBClusterOutput`](crate::output::FailoverDBClusterOutput)
pub mod failover_db_cluster_output {
    /// A builder for [`FailoverDBClusterOutput`](crate::output::FailoverDBClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster: std::option::Option<crate::model::DBCluster>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon Aurora DB cluster.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
        /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
        /// </p>
        pub fn db_cluster(mut self, input: crate::model::DBCluster) -> Self {
            self.db_cluster = Some(input);
            self
        }
        pub fn set_db_cluster(
            mut self,
            input: std::option::Option<crate::model::DBCluster>,
        ) -> Self {
            self.db_cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`FailoverDBClusterOutput`](crate::output::FailoverDBClusterOutput)
        pub fn build(self) -> crate::output::FailoverDBClusterOutput {
            crate::output::FailoverDBClusterOutput {
                db_cluster: self.db_cluster,
            }
        }
    }
}
impl FailoverDBClusterOutput {
    /// Creates a new builder-style object to manufacture [`FailoverDBClusterOutput`](crate::output::FailoverDBClusterOutput)
    pub fn builder() -> crate::output::failover_db_cluster_output::Builder {
        crate::output::failover_db_cluster_output::Builder::default()
    }
}

/// <p>This data type is used as a response element to <code>DownloadDBLogFilePortion</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DownloadDBLogFilePortionOutput {
    /// <p>Entries from the specified log file.</p>
    pub log_file_data: std::option::Option<std::string::String>,
    /// <p>A pagination token that can be used in a later DownloadDBLogFilePortion request.</p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>Boolean value that if true, indicates there is more data to be downloaded.</p>
    pub additional_data_pending: bool,
}
impl std::fmt::Debug for DownloadDBLogFilePortionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DownloadDBLogFilePortionOutput");
        formatter.field("log_file_data", &self.log_file_data);
        formatter.field("marker", &self.marker);
        formatter.field("additional_data_pending", &self.additional_data_pending);
        formatter.finish()
    }
}
/// See [`DownloadDBLogFilePortionOutput`](crate::output::DownloadDBLogFilePortionOutput)
pub mod download_db_log_file_portion_output {
    /// A builder for [`DownloadDBLogFilePortionOutput`](crate::output::DownloadDBLogFilePortionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) log_file_data: std::option::Option<std::string::String>,
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) additional_data_pending: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Entries from the specified log file.</p>
        pub fn log_file_data(mut self, input: impl Into<std::string::String>) -> Self {
            self.log_file_data = Some(input.into());
            self
        }
        pub fn set_log_file_data(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.log_file_data = input;
            self
        }
        /// <p>A pagination token that can be used in a later DownloadDBLogFilePortion request.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// <p>Boolean value that if true, indicates there is more data to be downloaded.</p>
        pub fn additional_data_pending(mut self, input: bool) -> Self {
            self.additional_data_pending = Some(input);
            self
        }
        pub fn set_additional_data_pending(mut self, input: std::option::Option<bool>) -> Self {
            self.additional_data_pending = input;
            self
        }
        /// Consumes the builder and constructs a [`DownloadDBLogFilePortionOutput`](crate::output::DownloadDBLogFilePortionOutput)
        pub fn build(self) -> crate::output::DownloadDBLogFilePortionOutput {
            crate::output::DownloadDBLogFilePortionOutput {
                log_file_data: self.log_file_data,
                marker: self.marker,
                additional_data_pending: self.additional_data_pending.unwrap_or_default(),
            }
        }
    }
}
impl DownloadDBLogFilePortionOutput {
    /// Creates a new builder-style object to manufacture [`DownloadDBLogFilePortionOutput`](crate::output::DownloadDBLogFilePortionOutput)
    pub fn builder() -> crate::output::download_db_log_file_portion_output::Builder {
        crate::output::download_db_log_file_portion_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeValidDBInstanceModificationsOutput {
    /// <p>Information about valid modifications that you can make to your DB instance.
    /// Contains the result of a successful call to the
    /// <code>DescribeValidDBInstanceModifications</code> action.
    /// You can use this information when you call
    /// <code>ModifyDBInstance</code>.
    /// </p>
    pub valid_db_instance_modifications_message:
        std::option::Option<crate::model::ValidDBInstanceModificationsMessage>,
}
impl std::fmt::Debug for DescribeValidDBInstanceModificationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeValidDBInstanceModificationsOutput");
        formatter.field(
            "valid_db_instance_modifications_message",
            &self.valid_db_instance_modifications_message,
        );
        formatter.finish()
    }
}
/// See [`DescribeValidDBInstanceModificationsOutput`](crate::output::DescribeValidDBInstanceModificationsOutput)
pub mod describe_valid_db_instance_modifications_output {
    /// A builder for [`DescribeValidDBInstanceModificationsOutput`](crate::output::DescribeValidDBInstanceModificationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) valid_db_instance_modifications_message:
            std::option::Option<crate::model::ValidDBInstanceModificationsMessage>,
    }
    impl Builder {
        /// <p>Information about valid modifications that you can make to your DB instance.
        /// Contains the result of a successful call to the
        /// <code>DescribeValidDBInstanceModifications</code> action.
        /// You can use this information when you call
        /// <code>ModifyDBInstance</code>.
        /// </p>
        pub fn valid_db_instance_modifications_message(
            mut self,
            input: crate::model::ValidDBInstanceModificationsMessage,
        ) -> Self {
            self.valid_db_instance_modifications_message = Some(input);
            self
        }
        pub fn set_valid_db_instance_modifications_message(
            mut self,
            input: std::option::Option<crate::model::ValidDBInstanceModificationsMessage>,
        ) -> Self {
            self.valid_db_instance_modifications_message = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeValidDBInstanceModificationsOutput`](crate::output::DescribeValidDBInstanceModificationsOutput)
        pub fn build(self) -> crate::output::DescribeValidDBInstanceModificationsOutput {
            crate::output::DescribeValidDBInstanceModificationsOutput {
                valid_db_instance_modifications_message: self
                    .valid_db_instance_modifications_message,
            }
        }
    }
}
impl DescribeValidDBInstanceModificationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeValidDBInstanceModificationsOutput`](crate::output::DescribeValidDBInstanceModificationsOutput)
    pub fn builder() -> crate::output::describe_valid_db_instance_modifications_output::Builder {
        crate::output::describe_valid_db_instance_modifications_output::Builder::default()
    }
}

/// <p>Contains the result of a successful invocation of the <code>DescribeSourceRegions</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSourceRegionsOutput {
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>A list of SourceRegion instances that contains each source AWS Region that the
    /// current AWS Region can get a read replica or a DB snapshot from.</p>
    pub source_regions: std::option::Option<std::vec::Vec<crate::model::SourceRegion>>,
}
impl std::fmt::Debug for DescribeSourceRegionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSourceRegionsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("source_regions", &self.source_regions);
        formatter.finish()
    }
}
/// See [`DescribeSourceRegionsOutput`](crate::output::DescribeSourceRegionsOutput)
pub mod describe_source_regions_output {
    /// A builder for [`DescribeSourceRegionsOutput`](crate::output::DescribeSourceRegionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) source_regions: std::option::Option<std::vec::Vec<crate::model::SourceRegion>>,
    }
    impl Builder {
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn source_regions(mut self, input: impl Into<crate::model::SourceRegion>) -> Self {
            let mut v = self.source_regions.unwrap_or_default();
            v.push(input.into());
            self.source_regions = Some(v);
            self
        }
        pub fn set_source_regions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SourceRegion>>,
        ) -> Self {
            self.source_regions = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSourceRegionsOutput`](crate::output::DescribeSourceRegionsOutput)
        pub fn build(self) -> crate::output::DescribeSourceRegionsOutput {
            crate::output::DescribeSourceRegionsOutput {
                marker: self.marker,
                source_regions: self.source_regions,
            }
        }
    }
}
impl DescribeSourceRegionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSourceRegionsOutput`](crate::output::DescribeSourceRegionsOutput)
    pub fn builder() -> crate::output::describe_source_regions_output::Builder {
        crate::output::describe_source_regions_output::Builder::default()
    }
}

/// <p>
/// Contains the result of a successful invocation of the <code>DescribeReservedDBInstancesOfferings</code> action.    
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReservedDBInstancesOfferingsOutput {
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>A list of reserved DB instance offerings.</p>
    pub reserved_db_instances_offerings:
        std::option::Option<std::vec::Vec<crate::model::ReservedDBInstancesOffering>>,
}
impl std::fmt::Debug for DescribeReservedDBInstancesOfferingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReservedDBInstancesOfferingsOutput");
        formatter.field("marker", &self.marker);
        formatter.field(
            "reserved_db_instances_offerings",
            &self.reserved_db_instances_offerings,
        );
        formatter.finish()
    }
}
/// See [`DescribeReservedDBInstancesOfferingsOutput`](crate::output::DescribeReservedDBInstancesOfferingsOutput)
pub mod describe_reserved_db_instances_offerings_output {
    /// A builder for [`DescribeReservedDBInstancesOfferingsOutput`](crate::output::DescribeReservedDBInstancesOfferingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) reserved_db_instances_offerings:
            std::option::Option<std::vec::Vec<crate::model::ReservedDBInstancesOffering>>,
    }
    impl Builder {
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn reserved_db_instances_offerings(
            mut self,
            input: impl Into<crate::model::ReservedDBInstancesOffering>,
        ) -> Self {
            let mut v = self.reserved_db_instances_offerings.unwrap_or_default();
            v.push(input.into());
            self.reserved_db_instances_offerings = Some(v);
            self
        }
        pub fn set_reserved_db_instances_offerings(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReservedDBInstancesOffering>>,
        ) -> Self {
            self.reserved_db_instances_offerings = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReservedDBInstancesOfferingsOutput`](crate::output::DescribeReservedDBInstancesOfferingsOutput)
        pub fn build(self) -> crate::output::DescribeReservedDBInstancesOfferingsOutput {
            crate::output::DescribeReservedDBInstancesOfferingsOutput {
                marker: self.marker,
                reserved_db_instances_offerings: self.reserved_db_instances_offerings,
            }
        }
    }
}
impl DescribeReservedDBInstancesOfferingsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReservedDBInstancesOfferingsOutput`](crate::output::DescribeReservedDBInstancesOfferingsOutput)
    pub fn builder() -> crate::output::describe_reserved_db_instances_offerings_output::Builder {
        crate::output::describe_reserved_db_instances_offerings_output::Builder::default()
    }
}

/// <p>
/// Contains the result of a successful invocation of the <code>DescribeReservedDBInstances</code> action.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReservedDBInstancesOutput {
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>A list of reserved DB instances.</p>
    pub reserved_db_instances: std::option::Option<std::vec::Vec<crate::model::ReservedDBInstance>>,
}
impl std::fmt::Debug for DescribeReservedDBInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReservedDBInstancesOutput");
        formatter.field("marker", &self.marker);
        formatter.field("reserved_db_instances", &self.reserved_db_instances);
        formatter.finish()
    }
}
/// See [`DescribeReservedDBInstancesOutput`](crate::output::DescribeReservedDBInstancesOutput)
pub mod describe_reserved_db_instances_output {
    /// A builder for [`DescribeReservedDBInstancesOutput`](crate::output::DescribeReservedDBInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) reserved_db_instances:
            std::option::Option<std::vec::Vec<crate::model::ReservedDBInstance>>,
    }
    impl Builder {
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn reserved_db_instances(
            mut self,
            input: impl Into<crate::model::ReservedDBInstance>,
        ) -> Self {
            let mut v = self.reserved_db_instances.unwrap_or_default();
            v.push(input.into());
            self.reserved_db_instances = Some(v);
            self
        }
        pub fn set_reserved_db_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReservedDBInstance>>,
        ) -> Self {
            self.reserved_db_instances = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReservedDBInstancesOutput`](crate::output::DescribeReservedDBInstancesOutput)
        pub fn build(self) -> crate::output::DescribeReservedDBInstancesOutput {
            crate::output::DescribeReservedDBInstancesOutput {
                marker: self.marker,
                reserved_db_instances: self.reserved_db_instances,
            }
        }
    }
}
impl DescribeReservedDBInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeReservedDBInstancesOutput`](crate::output::DescribeReservedDBInstancesOutput)
    pub fn builder() -> crate::output::describe_reserved_db_instances_output::Builder {
        crate::output::describe_reserved_db_instances_output::Builder::default()
    }
}

/// <p>Data returned from the <b>DescribePendingMaintenanceActions</b> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribePendingMaintenanceActionsOutput {
    /// <p>A list of the pending maintenance actions for the resource.</p>
    pub pending_maintenance_actions:
        std::option::Option<std::vec::Vec<crate::model::ResourcePendingMaintenanceActions>>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// <code>DescribePendingMaintenanceActions</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to a number of records specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribePendingMaintenanceActionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribePendingMaintenanceActionsOutput");
        formatter.field(
            "pending_maintenance_actions",
            &self.pending_maintenance_actions,
        );
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribePendingMaintenanceActionsOutput`](crate::output::DescribePendingMaintenanceActionsOutput)
pub mod describe_pending_maintenance_actions_output {
    /// A builder for [`DescribePendingMaintenanceActionsOutput`](crate::output::DescribePendingMaintenanceActionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) pending_maintenance_actions:
            std::option::Option<std::vec::Vec<crate::model::ResourcePendingMaintenanceActions>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn pending_maintenance_actions(
            mut self,
            input: impl Into<crate::model::ResourcePendingMaintenanceActions>,
        ) -> Self {
            let mut v = self.pending_maintenance_actions.unwrap_or_default();
            v.push(input.into());
            self.pending_maintenance_actions = Some(v);
            self
        }
        pub fn set_pending_maintenance_actions(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ResourcePendingMaintenanceActions>,
            >,
        ) -> Self {
            self.pending_maintenance_actions = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// <code>DescribePendingMaintenanceActions</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to a number of records specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribePendingMaintenanceActionsOutput`](crate::output::DescribePendingMaintenanceActionsOutput)
        pub fn build(self) -> crate::output::DescribePendingMaintenanceActionsOutput {
            crate::output::DescribePendingMaintenanceActionsOutput {
                pending_maintenance_actions: self.pending_maintenance_actions,
                marker: self.marker,
            }
        }
    }
}
impl DescribePendingMaintenanceActionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribePendingMaintenanceActionsOutput`](crate::output::DescribePendingMaintenanceActionsOutput)
    pub fn builder() -> crate::output::describe_pending_maintenance_actions_output::Builder {
        crate::output::describe_pending_maintenance_actions_output::Builder::default()
    }
}

/// <p>
/// Contains the result of a successful invocation of the <code>DescribeOrderableDBInstanceOptions</code> action.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeOrderableDBInstanceOptionsOutput {
    /// <p>An <code>OrderableDBInstanceOption</code> structure containing information about orderable options for the DB instance.</p>
    pub orderable_db_instance_options:
        std::option::Option<std::vec::Vec<crate::model::OrderableDBInstanceOption>>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// OrderableDBInstanceOptions request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code> .
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeOrderableDBInstanceOptionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeOrderableDBInstanceOptionsOutput");
        formatter.field(
            "orderable_db_instance_options",
            &self.orderable_db_instance_options,
        );
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribeOrderableDBInstanceOptionsOutput`](crate::output::DescribeOrderableDBInstanceOptionsOutput)
pub mod describe_orderable_db_instance_options_output {
    /// A builder for [`DescribeOrderableDBInstanceOptionsOutput`](crate::output::DescribeOrderableDBInstanceOptionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) orderable_db_instance_options:
            std::option::Option<std::vec::Vec<crate::model::OrderableDBInstanceOption>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn orderable_db_instance_options(
            mut self,
            input: impl Into<crate::model::OrderableDBInstanceOption>,
        ) -> Self {
            let mut v = self.orderable_db_instance_options.unwrap_or_default();
            v.push(input.into());
            self.orderable_db_instance_options = Some(v);
            self
        }
        pub fn set_orderable_db_instance_options(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::OrderableDBInstanceOption>>,
        ) -> Self {
            self.orderable_db_instance_options = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// OrderableDBInstanceOptions request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code> .
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeOrderableDBInstanceOptionsOutput`](crate::output::DescribeOrderableDBInstanceOptionsOutput)
        pub fn build(self) -> crate::output::DescribeOrderableDBInstanceOptionsOutput {
            crate::output::DescribeOrderableDBInstanceOptionsOutput {
                orderable_db_instance_options: self.orderable_db_instance_options,
                marker: self.marker,
            }
        }
    }
}
impl DescribeOrderableDBInstanceOptionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeOrderableDBInstanceOptionsOutput`](crate::output::DescribeOrderableDBInstanceOptionsOutput)
    pub fn builder() -> crate::output::describe_orderable_db_instance_options_output::Builder {
        crate::output::describe_orderable_db_instance_options_output::Builder::default()
    }
}

/// <p>List of option groups.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeOptionGroupsOutput {
    /// <p>List of option groups.</p>
    pub option_groups_list: std::option::Option<std::vec::Vec<crate::model::OptionGroup>>,
    /// <p>An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeOptionGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeOptionGroupsOutput");
        formatter.field("option_groups_list", &self.option_groups_list);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribeOptionGroupsOutput`](crate::output::DescribeOptionGroupsOutput)
pub mod describe_option_groups_output {
    /// A builder for [`DescribeOptionGroupsOutput`](crate::output::DescribeOptionGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) option_groups_list:
            std::option::Option<std::vec::Vec<crate::model::OptionGroup>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn option_groups_list(mut self, input: impl Into<crate::model::OptionGroup>) -> Self {
            let mut v = self.option_groups_list.unwrap_or_default();
            v.push(input.into());
            self.option_groups_list = Some(v);
            self
        }
        pub fn set_option_groups_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::OptionGroup>>,
        ) -> Self {
            self.option_groups_list = input;
            self
        }
        /// <p>An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeOptionGroupsOutput`](crate::output::DescribeOptionGroupsOutput)
        pub fn build(self) -> crate::output::DescribeOptionGroupsOutput {
            crate::output::DescribeOptionGroupsOutput {
                option_groups_list: self.option_groups_list,
                marker: self.marker,
            }
        }
    }
}
impl DescribeOptionGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeOptionGroupsOutput`](crate::output::DescribeOptionGroupsOutput)
    pub fn builder() -> crate::output::describe_option_groups_output::Builder {
        crate::output::describe_option_groups_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeOptionGroupOptionsOutput {
    /// <p>List of available option group options.</p>
    pub option_group_options: std::option::Option<std::vec::Vec<crate::model::OptionGroupOption>>,
    /// <p>An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeOptionGroupOptionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeOptionGroupOptionsOutput");
        formatter.field("option_group_options", &self.option_group_options);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribeOptionGroupOptionsOutput`](crate::output::DescribeOptionGroupOptionsOutput)
pub mod describe_option_group_options_output {
    /// A builder for [`DescribeOptionGroupOptionsOutput`](crate::output::DescribeOptionGroupOptionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) option_group_options:
            std::option::Option<std::vec::Vec<crate::model::OptionGroupOption>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn option_group_options(
            mut self,
            input: impl Into<crate::model::OptionGroupOption>,
        ) -> Self {
            let mut v = self.option_group_options.unwrap_or_default();
            v.push(input.into());
            self.option_group_options = Some(v);
            self
        }
        pub fn set_option_group_options(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::OptionGroupOption>>,
        ) -> Self {
            self.option_group_options = input;
            self
        }
        /// <p>An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeOptionGroupOptionsOutput`](crate::output::DescribeOptionGroupOptionsOutput)
        pub fn build(self) -> crate::output::DescribeOptionGroupOptionsOutput {
            crate::output::DescribeOptionGroupOptionsOutput {
                option_group_options: self.option_group_options,
                marker: self.marker,
            }
        }
    }
}
impl DescribeOptionGroupOptionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeOptionGroupOptionsOutput`](crate::output::DescribeOptionGroupOptionsOutput)
    pub fn builder() -> crate::output::describe_option_group_options_output::Builder {
        crate::output::describe_option_group_options_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInstallationMediaOutput {
    /// <p>An optional pagination token provided by a previous
    /// <a>DescribeInstallationMedia</a> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>The list of <a>InstallationMedia</a> objects for the AWS account.</p>
    pub installation_media: std::option::Option<std::vec::Vec<crate::model::InstallationMedia>>,
}
impl std::fmt::Debug for DescribeInstallationMediaOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInstallationMediaOutput");
        formatter.field("marker", &self.marker);
        formatter.field("installation_media", &self.installation_media);
        formatter.finish()
    }
}
/// See [`DescribeInstallationMediaOutput`](crate::output::DescribeInstallationMediaOutput)
pub mod describe_installation_media_output {
    /// A builder for [`DescribeInstallationMediaOutput`](crate::output::DescribeInstallationMediaOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) installation_media:
            std::option::Option<std::vec::Vec<crate::model::InstallationMedia>>,
    }
    impl Builder {
        /// <p>An optional pagination token provided by a previous
        /// <a>DescribeInstallationMedia</a> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn installation_media(
            mut self,
            input: impl Into<crate::model::InstallationMedia>,
        ) -> Self {
            let mut v = self.installation_media.unwrap_or_default();
            v.push(input.into());
            self.installation_media = Some(v);
            self
        }
        pub fn set_installation_media(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::InstallationMedia>>,
        ) -> Self {
            self.installation_media = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstallationMediaOutput`](crate::output::DescribeInstallationMediaOutput)
        pub fn build(self) -> crate::output::DescribeInstallationMediaOutput {
            crate::output::DescribeInstallationMediaOutput {
                marker: self.marker,
                installation_media: self.installation_media,
            }
        }
    }
}
impl DescribeInstallationMediaOutput {
    /// Creates a new builder-style object to manufacture [`DescribeInstallationMediaOutput`](crate::output::DescribeInstallationMediaOutput)
    pub fn builder() -> crate::output::describe_installation_media_output::Builder {
        crate::output::describe_installation_media_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeGlobalClustersOutput {
    /// <p>
    /// An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>
    /// The list of global clusters returned by this request.
    /// </p>
    pub global_clusters: std::option::Option<std::vec::Vec<crate::model::GlobalCluster>>,
}
impl std::fmt::Debug for DescribeGlobalClustersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeGlobalClustersOutput");
        formatter.field("marker", &self.marker);
        formatter.field("global_clusters", &self.global_clusters);
        formatter.finish()
    }
}
/// See [`DescribeGlobalClustersOutput`](crate::output::DescribeGlobalClustersOutput)
pub mod describe_global_clusters_output {
    /// A builder for [`DescribeGlobalClustersOutput`](crate::output::DescribeGlobalClustersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) global_clusters: std::option::Option<std::vec::Vec<crate::model::GlobalCluster>>,
    }
    impl Builder {
        /// <p>
        /// An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker, up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn global_clusters(mut self, input: impl Into<crate::model::GlobalCluster>) -> Self {
            let mut v = self.global_clusters.unwrap_or_default();
            v.push(input.into());
            self.global_clusters = Some(v);
            self
        }
        pub fn set_global_clusters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::GlobalCluster>>,
        ) -> Self {
            self.global_clusters = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeGlobalClustersOutput`](crate::output::DescribeGlobalClustersOutput)
        pub fn build(self) -> crate::output::DescribeGlobalClustersOutput {
            crate::output::DescribeGlobalClustersOutput {
                marker: self.marker,
                global_clusters: self.global_clusters,
            }
        }
    }
}
impl DescribeGlobalClustersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeGlobalClustersOutput`](crate::output::DescribeGlobalClustersOutput)
    pub fn builder() -> crate::output::describe_global_clusters_output::Builder {
        crate::output::describe_global_clusters_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeExportTasksOutput {
    /// <p>A pagination token that can be used in a later <code>DescribeExportTasks</code>
    /// request. A marker is used for pagination to identify the location to begin output for
    /// the next response of <code>DescribeExportTasks</code>.</p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>Information about an export of a snapshot to Amazon S3.</p>
    pub export_tasks: std::option::Option<std::vec::Vec<crate::model::ExportTask>>,
}
impl std::fmt::Debug for DescribeExportTasksOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeExportTasksOutput");
        formatter.field("marker", &self.marker);
        formatter.field("export_tasks", &self.export_tasks);
        formatter.finish()
    }
}
/// See [`DescribeExportTasksOutput`](crate::output::DescribeExportTasksOutput)
pub mod describe_export_tasks_output {
    /// A builder for [`DescribeExportTasksOutput`](crate::output::DescribeExportTasksOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) export_tasks: std::option::Option<std::vec::Vec<crate::model::ExportTask>>,
    }
    impl Builder {
        /// <p>A pagination token that can be used in a later <code>DescribeExportTasks</code>
        /// request. A marker is used for pagination to identify the location to begin output for
        /// the next response of <code>DescribeExportTasks</code>.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn export_tasks(mut self, input: impl Into<crate::model::ExportTask>) -> Self {
            let mut v = self.export_tasks.unwrap_or_default();
            v.push(input.into());
            self.export_tasks = Some(v);
            self
        }
        pub fn set_export_tasks(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExportTask>>,
        ) -> Self {
            self.export_tasks = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeExportTasksOutput`](crate::output::DescribeExportTasksOutput)
        pub fn build(self) -> crate::output::DescribeExportTasksOutput {
            crate::output::DescribeExportTasksOutput {
                marker: self.marker,
                export_tasks: self.export_tasks,
            }
        }
    }
}
impl DescribeExportTasksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeExportTasksOutput`](crate::output::DescribeExportTasksOutput)
    pub fn builder() -> crate::output::describe_export_tasks_output::Builder {
        crate::output::describe_export_tasks_output::Builder::default()
    }
}

/// <p>Data returned by the <b>DescribeEventSubscriptions</b> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEventSubscriptionsOutput {
    /// <p>
    /// An optional pagination token provided by a previous
    /// DescribeOrderableDBInstanceOptions request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>A list of EventSubscriptions data types.</p>
    pub event_subscriptions_list:
        std::option::Option<std::vec::Vec<crate::model::EventSubscription>>,
}
impl std::fmt::Debug for DescribeEventSubscriptionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEventSubscriptionsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("event_subscriptions_list", &self.event_subscriptions_list);
        formatter.finish()
    }
}
/// See [`DescribeEventSubscriptionsOutput`](crate::output::DescribeEventSubscriptionsOutput)
pub mod describe_event_subscriptions_output {
    /// A builder for [`DescribeEventSubscriptionsOutput`](crate::output::DescribeEventSubscriptionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) event_subscriptions_list:
            std::option::Option<std::vec::Vec<crate::model::EventSubscription>>,
    }
    impl Builder {
        /// <p>
        /// An optional pagination token provided by a previous
        /// DescribeOrderableDBInstanceOptions request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn event_subscriptions_list(
            mut self,
            input: impl Into<crate::model::EventSubscription>,
        ) -> Self {
            let mut v = self.event_subscriptions_list.unwrap_or_default();
            v.push(input.into());
            self.event_subscriptions_list = Some(v);
            self
        }
        pub fn set_event_subscriptions_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EventSubscription>>,
        ) -> Self {
            self.event_subscriptions_list = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEventSubscriptionsOutput`](crate::output::DescribeEventSubscriptionsOutput)
        pub fn build(self) -> crate::output::DescribeEventSubscriptionsOutput {
            crate::output::DescribeEventSubscriptionsOutput {
                marker: self.marker,
                event_subscriptions_list: self.event_subscriptions_list,
            }
        }
    }
}
impl DescribeEventSubscriptionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEventSubscriptionsOutput`](crate::output::DescribeEventSubscriptionsOutput)
    pub fn builder() -> crate::output::describe_event_subscriptions_output::Builder {
        crate::output::describe_event_subscriptions_output::Builder::default()
    }
}

/// <p>
/// Contains the result of a successful invocation of the <code>DescribeEvents</code> action.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEventsOutput {
    /// <p>
    /// An optional pagination token provided by a previous
    /// Events request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code> .
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>
    /// A list of <code>Event</code> instances.
    /// </p>
    pub events: std::option::Option<std::vec::Vec<crate::model::Event>>,
}
impl std::fmt::Debug for DescribeEventsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEventsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("events", &self.events);
        formatter.finish()
    }
}
/// See [`DescribeEventsOutput`](crate::output::DescribeEventsOutput)
pub mod describe_events_output {
    /// A builder for [`DescribeEventsOutput`](crate::output::DescribeEventsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) events: std::option::Option<std::vec::Vec<crate::model::Event>>,
    }
    impl Builder {
        /// <p>
        /// An optional pagination token provided by a previous
        /// Events request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code> .
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn events(mut self, input: impl Into<crate::model::Event>) -> Self {
            let mut v = self.events.unwrap_or_default();
            v.push(input.into());
            self.events = Some(v);
            self
        }
        pub fn set_events(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Event>>,
        ) -> Self {
            self.events = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEventsOutput`](crate::output::DescribeEventsOutput)
        pub fn build(self) -> crate::output::DescribeEventsOutput {
            crate::output::DescribeEventsOutput {
                marker: self.marker,
                events: self.events,
            }
        }
    }
}
impl DescribeEventsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEventsOutput`](crate::output::DescribeEventsOutput)
    pub fn builder() -> crate::output::describe_events_output::Builder {
        crate::output::describe_events_output::Builder::default()
    }
}

/// <p>Data returned from the <code>DescribeEventCategories</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEventCategoriesOutput {
    /// <p>A list of EventCategoriesMap data types.</p>
    pub event_categories_map_list:
        std::option::Option<std::vec::Vec<crate::model::EventCategoriesMap>>,
}
impl std::fmt::Debug for DescribeEventCategoriesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEventCategoriesOutput");
        formatter.field("event_categories_map_list", &self.event_categories_map_list);
        formatter.finish()
    }
}
/// See [`DescribeEventCategoriesOutput`](crate::output::DescribeEventCategoriesOutput)
pub mod describe_event_categories_output {
    /// A builder for [`DescribeEventCategoriesOutput`](crate::output::DescribeEventCategoriesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_categories_map_list:
            std::option::Option<std::vec::Vec<crate::model::EventCategoriesMap>>,
    }
    impl Builder {
        pub fn event_categories_map_list(
            mut self,
            input: impl Into<crate::model::EventCategoriesMap>,
        ) -> Self {
            let mut v = self.event_categories_map_list.unwrap_or_default();
            v.push(input.into());
            self.event_categories_map_list = Some(v);
            self
        }
        pub fn set_event_categories_map_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EventCategoriesMap>>,
        ) -> Self {
            self.event_categories_map_list = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEventCategoriesOutput`](crate::output::DescribeEventCategoriesOutput)
        pub fn build(self) -> crate::output::DescribeEventCategoriesOutput {
            crate::output::DescribeEventCategoriesOutput {
                event_categories_map_list: self.event_categories_map_list,
            }
        }
    }
}
impl DescribeEventCategoriesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEventCategoriesOutput`](crate::output::DescribeEventCategoriesOutput)
    pub fn builder() -> crate::output::describe_event_categories_output::Builder {
        crate::output::describe_event_categories_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEngineDefaultParametersOutput {
    /// <p>
    /// Contains the result of a successful invocation of the <code>DescribeEngineDefaultParameters</code> action.
    /// </p>
    pub engine_defaults: std::option::Option<crate::model::EngineDefaults>,
}
impl std::fmt::Debug for DescribeEngineDefaultParametersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEngineDefaultParametersOutput");
        formatter.field("engine_defaults", &self.engine_defaults);
        formatter.finish()
    }
}
/// See [`DescribeEngineDefaultParametersOutput`](crate::output::DescribeEngineDefaultParametersOutput)
pub mod describe_engine_default_parameters_output {
    /// A builder for [`DescribeEngineDefaultParametersOutput`](crate::output::DescribeEngineDefaultParametersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) engine_defaults: std::option::Option<crate::model::EngineDefaults>,
    }
    impl Builder {
        /// <p>
        /// Contains the result of a successful invocation of the <code>DescribeEngineDefaultParameters</code> action.
        /// </p>
        pub fn engine_defaults(mut self, input: crate::model::EngineDefaults) -> Self {
            self.engine_defaults = Some(input);
            self
        }
        pub fn set_engine_defaults(
            mut self,
            input: std::option::Option<crate::model::EngineDefaults>,
        ) -> Self {
            self.engine_defaults = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEngineDefaultParametersOutput`](crate::output::DescribeEngineDefaultParametersOutput)
        pub fn build(self) -> crate::output::DescribeEngineDefaultParametersOutput {
            crate::output::DescribeEngineDefaultParametersOutput {
                engine_defaults: self.engine_defaults,
            }
        }
    }
}
impl DescribeEngineDefaultParametersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEngineDefaultParametersOutput`](crate::output::DescribeEngineDefaultParametersOutput)
    pub fn builder() -> crate::output::describe_engine_default_parameters_output::Builder {
        crate::output::describe_engine_default_parameters_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEngineDefaultClusterParametersOutput {
    /// <p>
    /// Contains the result of a successful invocation of the <code>DescribeEngineDefaultParameters</code> action.
    /// </p>
    pub engine_defaults: std::option::Option<crate::model::EngineDefaults>,
}
impl std::fmt::Debug for DescribeEngineDefaultClusterParametersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEngineDefaultClusterParametersOutput");
        formatter.field("engine_defaults", &self.engine_defaults);
        formatter.finish()
    }
}
/// See [`DescribeEngineDefaultClusterParametersOutput`](crate::output::DescribeEngineDefaultClusterParametersOutput)
pub mod describe_engine_default_cluster_parameters_output {
    /// A builder for [`DescribeEngineDefaultClusterParametersOutput`](crate::output::DescribeEngineDefaultClusterParametersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) engine_defaults: std::option::Option<crate::model::EngineDefaults>,
    }
    impl Builder {
        /// <p>
        /// Contains the result of a successful invocation of the <code>DescribeEngineDefaultParameters</code> action.
        /// </p>
        pub fn engine_defaults(mut self, input: crate::model::EngineDefaults) -> Self {
            self.engine_defaults = Some(input);
            self
        }
        pub fn set_engine_defaults(
            mut self,
            input: std::option::Option<crate::model::EngineDefaults>,
        ) -> Self {
            self.engine_defaults = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEngineDefaultClusterParametersOutput`](crate::output::DescribeEngineDefaultClusterParametersOutput)
        pub fn build(self) -> crate::output::DescribeEngineDefaultClusterParametersOutput {
            crate::output::DescribeEngineDefaultClusterParametersOutput {
                engine_defaults: self.engine_defaults,
            }
        }
    }
}
impl DescribeEngineDefaultClusterParametersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeEngineDefaultClusterParametersOutput`](crate::output::DescribeEngineDefaultClusterParametersOutput)
    pub fn builder() -> crate::output::describe_engine_default_cluster_parameters_output::Builder {
        crate::output::describe_engine_default_cluster_parameters_output::Builder::default()
    }
}

/// <p>
/// Contains the result of a successful invocation of the <code>DescribeDBSubnetGroups</code> action.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBSubnetGroupsOutput {
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>
    /// A list of <code>DBSubnetGroup</code> instances.
    /// </p>
    pub db_subnet_groups: std::option::Option<std::vec::Vec<crate::model::DBSubnetGroup>>,
}
impl std::fmt::Debug for DescribeDBSubnetGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBSubnetGroupsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("db_subnet_groups", &self.db_subnet_groups);
        formatter.finish()
    }
}
/// See [`DescribeDBSubnetGroupsOutput`](crate::output::DescribeDBSubnetGroupsOutput)
pub mod describe_db_subnet_groups_output {
    /// A builder for [`DescribeDBSubnetGroupsOutput`](crate::output::DescribeDBSubnetGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) db_subnet_groups:
            std::option::Option<std::vec::Vec<crate::model::DBSubnetGroup>>,
    }
    impl Builder {
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn db_subnet_groups(mut self, input: impl Into<crate::model::DBSubnetGroup>) -> Self {
            let mut v = self.db_subnet_groups.unwrap_or_default();
            v.push(input.into());
            self.db_subnet_groups = Some(v);
            self
        }
        pub fn set_db_subnet_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBSubnetGroup>>,
        ) -> Self {
            self.db_subnet_groups = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBSubnetGroupsOutput`](crate::output::DescribeDBSubnetGroupsOutput)
        pub fn build(self) -> crate::output::DescribeDBSubnetGroupsOutput {
            crate::output::DescribeDBSubnetGroupsOutput {
                marker: self.marker,
                db_subnet_groups: self.db_subnet_groups,
            }
        }
    }
}
impl DescribeDBSubnetGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBSubnetGroupsOutput`](crate::output::DescribeDBSubnetGroupsOutput)
    pub fn builder() -> crate::output::describe_db_subnet_groups_output::Builder {
        crate::output::describe_db_subnet_groups_output::Builder::default()
    }
}

/// <p>
/// Contains the result of a successful invocation of the <code>DescribeDBSnapshots</code> action.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBSnapshotsOutput {
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>
    /// A list of <code>DBSnapshot</code> instances.
    /// </p>
    pub db_snapshots: std::option::Option<std::vec::Vec<crate::model::DBSnapshot>>,
}
impl std::fmt::Debug for DescribeDBSnapshotsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBSnapshotsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("db_snapshots", &self.db_snapshots);
        formatter.finish()
    }
}
/// See [`DescribeDBSnapshotsOutput`](crate::output::DescribeDBSnapshotsOutput)
pub mod describe_db_snapshots_output {
    /// A builder for [`DescribeDBSnapshotsOutput`](crate::output::DescribeDBSnapshotsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) db_snapshots: std::option::Option<std::vec::Vec<crate::model::DBSnapshot>>,
    }
    impl Builder {
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn db_snapshots(mut self, input: impl Into<crate::model::DBSnapshot>) -> Self {
            let mut v = self.db_snapshots.unwrap_or_default();
            v.push(input.into());
            self.db_snapshots = Some(v);
            self
        }
        pub fn set_db_snapshots(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBSnapshot>>,
        ) -> Self {
            self.db_snapshots = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBSnapshotsOutput`](crate::output::DescribeDBSnapshotsOutput)
        pub fn build(self) -> crate::output::DescribeDBSnapshotsOutput {
            crate::output::DescribeDBSnapshotsOutput {
                marker: self.marker,
                db_snapshots: self.db_snapshots,
            }
        }
    }
}
impl DescribeDBSnapshotsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBSnapshotsOutput`](crate::output::DescribeDBSnapshotsOutput)
    pub fn builder() -> crate::output::describe_db_snapshots_output::Builder {
        crate::output::describe_db_snapshots_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBSnapshotAttributesOutput {
    /// <p>Contains the results of a successful call to the <code>DescribeDBSnapshotAttributes</code>
    /// API action.</p>
    /// <p>Manual DB snapshot attributes are used to authorize other AWS accounts
    /// to copy or restore a manual DB snapshot. For more information, see the <code>ModifyDBSnapshotAttribute</code>
    /// API action.</p>
    pub db_snapshot_attributes_result:
        std::option::Option<crate::model::DBSnapshotAttributesResult>,
}
impl std::fmt::Debug for DescribeDBSnapshotAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBSnapshotAttributesOutput");
        formatter.field(
            "db_snapshot_attributes_result",
            &self.db_snapshot_attributes_result,
        );
        formatter.finish()
    }
}
/// See [`DescribeDBSnapshotAttributesOutput`](crate::output::DescribeDBSnapshotAttributesOutput)
pub mod describe_db_snapshot_attributes_output {
    /// A builder for [`DescribeDBSnapshotAttributesOutput`](crate::output::DescribeDBSnapshotAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_snapshot_attributes_result:
            std::option::Option<crate::model::DBSnapshotAttributesResult>,
    }
    impl Builder {
        /// <p>Contains the results of a successful call to the <code>DescribeDBSnapshotAttributes</code>
        /// API action.</p>
        /// <p>Manual DB snapshot attributes are used to authorize other AWS accounts
        /// to copy or restore a manual DB snapshot. For more information, see the <code>ModifyDBSnapshotAttribute</code>
        /// API action.</p>
        pub fn db_snapshot_attributes_result(
            mut self,
            input: crate::model::DBSnapshotAttributesResult,
        ) -> Self {
            self.db_snapshot_attributes_result = Some(input);
            self
        }
        pub fn set_db_snapshot_attributes_result(
            mut self,
            input: std::option::Option<crate::model::DBSnapshotAttributesResult>,
        ) -> Self {
            self.db_snapshot_attributes_result = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBSnapshotAttributesOutput`](crate::output::DescribeDBSnapshotAttributesOutput)
        pub fn build(self) -> crate::output::DescribeDBSnapshotAttributesOutput {
            crate::output::DescribeDBSnapshotAttributesOutput {
                db_snapshot_attributes_result: self.db_snapshot_attributes_result,
            }
        }
    }
}
impl DescribeDBSnapshotAttributesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBSnapshotAttributesOutput`](crate::output::DescribeDBSnapshotAttributesOutput)
    pub fn builder() -> crate::output::describe_db_snapshot_attributes_output::Builder {
        crate::output::describe_db_snapshot_attributes_output::Builder::default()
    }
}

/// <p>
/// Contains the result of a successful invocation of the <code>DescribeDBSecurityGroups</code> action.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBSecurityGroupsOutput {
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>
    /// A list of <code>DBSecurityGroup</code> instances.
    /// </p>
    pub db_security_groups: std::option::Option<std::vec::Vec<crate::model::DBSecurityGroup>>,
}
impl std::fmt::Debug for DescribeDBSecurityGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBSecurityGroupsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("db_security_groups", &self.db_security_groups);
        formatter.finish()
    }
}
/// See [`DescribeDBSecurityGroupsOutput`](crate::output::DescribeDBSecurityGroupsOutput)
pub mod describe_db_security_groups_output {
    /// A builder for [`DescribeDBSecurityGroupsOutput`](crate::output::DescribeDBSecurityGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) db_security_groups:
            std::option::Option<std::vec::Vec<crate::model::DBSecurityGroup>>,
    }
    impl Builder {
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn db_security_groups(
            mut self,
            input: impl Into<crate::model::DBSecurityGroup>,
        ) -> Self {
            let mut v = self.db_security_groups.unwrap_or_default();
            v.push(input.into());
            self.db_security_groups = Some(v);
            self
        }
        pub fn set_db_security_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBSecurityGroup>>,
        ) -> Self {
            self.db_security_groups = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBSecurityGroupsOutput`](crate::output::DescribeDBSecurityGroupsOutput)
        pub fn build(self) -> crate::output::DescribeDBSecurityGroupsOutput {
            crate::output::DescribeDBSecurityGroupsOutput {
                marker: self.marker,
                db_security_groups: self.db_security_groups,
            }
        }
    }
}
impl DescribeDBSecurityGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBSecurityGroupsOutput`](crate::output::DescribeDBSecurityGroupsOutput)
    pub fn builder() -> crate::output::describe_db_security_groups_output::Builder {
        crate::output::describe_db_security_groups_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBProxyTargetsOutput {
    /// <p>An arbitrary number of <code>DBProxyTarget</code> objects, containing details of the corresponding targets.</p>
    pub targets: std::option::Option<std::vec::Vec<crate::model::DBProxyTarget>>,
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBProxyTargetsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBProxyTargetsOutput");
        formatter.field("targets", &self.targets);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribeDBProxyTargetsOutput`](crate::output::DescribeDBProxyTargetsOutput)
pub mod describe_db_proxy_targets_output {
    /// A builder for [`DescribeDBProxyTargetsOutput`](crate::output::DescribeDBProxyTargetsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) targets: std::option::Option<std::vec::Vec<crate::model::DBProxyTarget>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn targets(mut self, input: impl Into<crate::model::DBProxyTarget>) -> Self {
            let mut v = self.targets.unwrap_or_default();
            v.push(input.into());
            self.targets = Some(v);
            self
        }
        pub fn set_targets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBProxyTarget>>,
        ) -> Self {
            self.targets = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBProxyTargetsOutput`](crate::output::DescribeDBProxyTargetsOutput)
        pub fn build(self) -> crate::output::DescribeDBProxyTargetsOutput {
            crate::output::DescribeDBProxyTargetsOutput {
                targets: self.targets,
                marker: self.marker,
            }
        }
    }
}
impl DescribeDBProxyTargetsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBProxyTargetsOutput`](crate::output::DescribeDBProxyTargetsOutput)
    pub fn builder() -> crate::output::describe_db_proxy_targets_output::Builder {
        crate::output::describe_db_proxy_targets_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBProxyTargetGroupsOutput {
    /// <p>An arbitrary number of <code>DBProxyTargetGroup</code> objects, containing details of the corresponding target groups.</p>
    pub target_groups: std::option::Option<std::vec::Vec<crate::model::DBProxyTargetGroup>>,
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBProxyTargetGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBProxyTargetGroupsOutput");
        formatter.field("target_groups", &self.target_groups);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribeDBProxyTargetGroupsOutput`](crate::output::DescribeDBProxyTargetGroupsOutput)
pub mod describe_db_proxy_target_groups_output {
    /// A builder for [`DescribeDBProxyTargetGroupsOutput`](crate::output::DescribeDBProxyTargetGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) target_groups:
            std::option::Option<std::vec::Vec<crate::model::DBProxyTargetGroup>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn target_groups(mut self, input: impl Into<crate::model::DBProxyTargetGroup>) -> Self {
            let mut v = self.target_groups.unwrap_or_default();
            v.push(input.into());
            self.target_groups = Some(v);
            self
        }
        pub fn set_target_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBProxyTargetGroup>>,
        ) -> Self {
            self.target_groups = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBProxyTargetGroupsOutput`](crate::output::DescribeDBProxyTargetGroupsOutput)
        pub fn build(self) -> crate::output::DescribeDBProxyTargetGroupsOutput {
            crate::output::DescribeDBProxyTargetGroupsOutput {
                target_groups: self.target_groups,
                marker: self.marker,
            }
        }
    }
}
impl DescribeDBProxyTargetGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBProxyTargetGroupsOutput`](crate::output::DescribeDBProxyTargetGroupsOutput)
    pub fn builder() -> crate::output::describe_db_proxy_target_groups_output::Builder {
        crate::output::describe_db_proxy_target_groups_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBProxyEndpointsOutput {
    /// <p>The list of <code>ProxyEndpoint</code> objects returned by the API operation.</p>
    pub db_proxy_endpoints: std::option::Option<std::vec::Vec<crate::model::DBProxyEndpoint>>,
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBProxyEndpointsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBProxyEndpointsOutput");
        formatter.field("db_proxy_endpoints", &self.db_proxy_endpoints);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribeDBProxyEndpointsOutput`](crate::output::DescribeDBProxyEndpointsOutput)
pub mod describe_db_proxy_endpoints_output {
    /// A builder for [`DescribeDBProxyEndpointsOutput`](crate::output::DescribeDBProxyEndpointsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_endpoints:
            std::option::Option<std::vec::Vec<crate::model::DBProxyEndpoint>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn db_proxy_endpoints(
            mut self,
            input: impl Into<crate::model::DBProxyEndpoint>,
        ) -> Self {
            let mut v = self.db_proxy_endpoints.unwrap_or_default();
            v.push(input.into());
            self.db_proxy_endpoints = Some(v);
            self
        }
        pub fn set_db_proxy_endpoints(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBProxyEndpoint>>,
        ) -> Self {
            self.db_proxy_endpoints = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBProxyEndpointsOutput`](crate::output::DescribeDBProxyEndpointsOutput)
        pub fn build(self) -> crate::output::DescribeDBProxyEndpointsOutput {
            crate::output::DescribeDBProxyEndpointsOutput {
                db_proxy_endpoints: self.db_proxy_endpoints,
                marker: self.marker,
            }
        }
    }
}
impl DescribeDBProxyEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBProxyEndpointsOutput`](crate::output::DescribeDBProxyEndpointsOutput)
    pub fn builder() -> crate::output::describe_db_proxy_endpoints_output::Builder {
        crate::output::describe_db_proxy_endpoints_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBProxiesOutput {
    /// <p>A return value representing an arbitrary number of <code>DBProxy</code> data structures.</p>
    pub db_proxies: std::option::Option<std::vec::Vec<crate::model::DBProxy>>,
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBProxiesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBProxiesOutput");
        formatter.field("db_proxies", &self.db_proxies);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribeDBProxiesOutput`](crate::output::DescribeDBProxiesOutput)
pub mod describe_db_proxies_output {
    /// A builder for [`DescribeDBProxiesOutput`](crate::output::DescribeDBProxiesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxies: std::option::Option<std::vec::Vec<crate::model::DBProxy>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn db_proxies(mut self, input: impl Into<crate::model::DBProxy>) -> Self {
            let mut v = self.db_proxies.unwrap_or_default();
            v.push(input.into());
            self.db_proxies = Some(v);
            self
        }
        pub fn set_db_proxies(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBProxy>>,
        ) -> Self {
            self.db_proxies = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBProxiesOutput`](crate::output::DescribeDBProxiesOutput)
        pub fn build(self) -> crate::output::DescribeDBProxiesOutput {
            crate::output::DescribeDBProxiesOutput {
                db_proxies: self.db_proxies,
                marker: self.marker,
            }
        }
    }
}
impl DescribeDBProxiesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBProxiesOutput`](crate::output::DescribeDBProxiesOutput)
    pub fn builder() -> crate::output::describe_db_proxies_output::Builder {
        crate::output::describe_db_proxies_output::Builder::default()
    }
}

/// <p>
/// Contains the result of a successful invocation of the <code>DescribeDBParameters</code> action.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBParametersOutput {
    /// <p>
    /// A list of <code>Parameter</code> values.
    /// </p>
    pub parameters: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBParametersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBParametersOutput");
        formatter.field("parameters", &self.parameters);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribeDBParametersOutput`](crate::output::DescribeDBParametersOutput)
pub mod describe_db_parameters_output {
    /// A builder for [`DescribeDBParametersOutput`](crate::output::DescribeDBParametersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) parameters: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn parameters(mut self, input: impl Into<crate::model::Parameter>) -> Self {
            let mut v = self.parameters.unwrap_or_default();
            v.push(input.into());
            self.parameters = Some(v);
            self
        }
        pub fn set_parameters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
        ) -> Self {
            self.parameters = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBParametersOutput`](crate::output::DescribeDBParametersOutput)
        pub fn build(self) -> crate::output::DescribeDBParametersOutput {
            crate::output::DescribeDBParametersOutput {
                parameters: self.parameters,
                marker: self.marker,
            }
        }
    }
}
impl DescribeDBParametersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBParametersOutput`](crate::output::DescribeDBParametersOutput)
    pub fn builder() -> crate::output::describe_db_parameters_output::Builder {
        crate::output::describe_db_parameters_output::Builder::default()
    }
}

/// <p>
/// Contains the result of a successful invocation of the <code>DescribeDBParameterGroups</code> action.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBParameterGroupsOutput {
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>
    /// A list of <code>DBParameterGroup</code> instances.
    /// </p>
    pub db_parameter_groups: std::option::Option<std::vec::Vec<crate::model::DBParameterGroup>>,
}
impl std::fmt::Debug for DescribeDBParameterGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBParameterGroupsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("db_parameter_groups", &self.db_parameter_groups);
        formatter.finish()
    }
}
/// See [`DescribeDBParameterGroupsOutput`](crate::output::DescribeDBParameterGroupsOutput)
pub mod describe_db_parameter_groups_output {
    /// A builder for [`DescribeDBParameterGroupsOutput`](crate::output::DescribeDBParameterGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) db_parameter_groups:
            std::option::Option<std::vec::Vec<crate::model::DBParameterGroup>>,
    }
    impl Builder {
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn db_parameter_groups(
            mut self,
            input: impl Into<crate::model::DBParameterGroup>,
        ) -> Self {
            let mut v = self.db_parameter_groups.unwrap_or_default();
            v.push(input.into());
            self.db_parameter_groups = Some(v);
            self
        }
        pub fn set_db_parameter_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBParameterGroup>>,
        ) -> Self {
            self.db_parameter_groups = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBParameterGroupsOutput`](crate::output::DescribeDBParameterGroupsOutput)
        pub fn build(self) -> crate::output::DescribeDBParameterGroupsOutput {
            crate::output::DescribeDBParameterGroupsOutput {
                marker: self.marker,
                db_parameter_groups: self.db_parameter_groups,
            }
        }
    }
}
impl DescribeDBParameterGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBParameterGroupsOutput`](crate::output::DescribeDBParameterGroupsOutput)
    pub fn builder() -> crate::output::describe_db_parameter_groups_output::Builder {
        crate::output::describe_db_parameter_groups_output::Builder::default()
    }
}

/// <p>
/// The response from a call to <code>DescribeDBLogFiles</code>.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBLogFilesOutput {
    /// <p>The DB log files returned.</p>
    pub describe_db_log_files:
        std::option::Option<std::vec::Vec<crate::model::DescribeDBLogFilesDetails>>,
    /// <p>A pagination token that can be used in a later DescribeDBLogFiles request.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBLogFilesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBLogFilesOutput");
        formatter.field("describe_db_log_files", &self.describe_db_log_files);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribeDBLogFilesOutput`](crate::output::DescribeDBLogFilesOutput)
pub mod describe_db_log_files_output {
    /// A builder for [`DescribeDBLogFilesOutput`](crate::output::DescribeDBLogFilesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) describe_db_log_files:
            std::option::Option<std::vec::Vec<crate::model::DescribeDBLogFilesDetails>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn describe_db_log_files(
            mut self,
            input: impl Into<crate::model::DescribeDBLogFilesDetails>,
        ) -> Self {
            let mut v = self.describe_db_log_files.unwrap_or_default();
            v.push(input.into());
            self.describe_db_log_files = Some(v);
            self
        }
        pub fn set_describe_db_log_files(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DescribeDBLogFilesDetails>>,
        ) -> Self {
            self.describe_db_log_files = input;
            self
        }
        /// <p>A pagination token that can be used in a later DescribeDBLogFiles request.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBLogFilesOutput`](crate::output::DescribeDBLogFilesOutput)
        pub fn build(self) -> crate::output::DescribeDBLogFilesOutput {
            crate::output::DescribeDBLogFilesOutput {
                describe_db_log_files: self.describe_db_log_files,
                marker: self.marker,
            }
        }
    }
}
impl DescribeDBLogFilesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBLogFilesOutput`](crate::output::DescribeDBLogFilesOutput)
    pub fn builder() -> crate::output::describe_db_log_files_output::Builder {
        crate::output::describe_db_log_files_output::Builder::default()
    }
}

/// <p>
/// Contains the result of a successful invocation of the <code>DescribeDBInstances</code> action.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBInstancesOutput {
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code> .
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>
    /// A list of <code>DBInstance</code> instances.
    /// </p>
    pub db_instances: std::option::Option<std::vec::Vec<crate::model::DBInstance>>,
}
impl std::fmt::Debug for DescribeDBInstancesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBInstancesOutput");
        formatter.field("marker", &self.marker);
        formatter.field("db_instances", &self.db_instances);
        formatter.finish()
    }
}
/// See [`DescribeDBInstancesOutput`](crate::output::DescribeDBInstancesOutput)
pub mod describe_db_instances_output {
    /// A builder for [`DescribeDBInstancesOutput`](crate::output::DescribeDBInstancesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) db_instances: std::option::Option<std::vec::Vec<crate::model::DBInstance>>,
    }
    impl Builder {
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code> .
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn db_instances(mut self, input: impl Into<crate::model::DBInstance>) -> Self {
            let mut v = self.db_instances.unwrap_or_default();
            v.push(input.into());
            self.db_instances = Some(v);
            self
        }
        pub fn set_db_instances(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBInstance>>,
        ) -> Self {
            self.db_instances = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBInstancesOutput`](crate::output::DescribeDBInstancesOutput)
        pub fn build(self) -> crate::output::DescribeDBInstancesOutput {
            crate::output::DescribeDBInstancesOutput {
                marker: self.marker,
                db_instances: self.db_instances,
            }
        }
    }
}
impl DescribeDBInstancesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBInstancesOutput`](crate::output::DescribeDBInstancesOutput)
    pub fn builder() -> crate::output::describe_db_instances_output::Builder {
        crate::output::describe_db_instances_output::Builder::default()
    }
}

/// <p>
/// Contains the result of a successful invocation of the <code>DescribeDBInstanceAutomatedBackups</code> action.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBInstanceAutomatedBackupsOutput {
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code> .
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>
    /// A list of <code>DBInstanceAutomatedBackup</code> instances.
    /// </p>
    pub db_instance_automated_backups:
        std::option::Option<std::vec::Vec<crate::model::DBInstanceAutomatedBackup>>,
}
impl std::fmt::Debug for DescribeDBInstanceAutomatedBackupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBInstanceAutomatedBackupsOutput");
        formatter.field("marker", &self.marker);
        formatter.field(
            "db_instance_automated_backups",
            &self.db_instance_automated_backups,
        );
        formatter.finish()
    }
}
/// See [`DescribeDBInstanceAutomatedBackupsOutput`](crate::output::DescribeDBInstanceAutomatedBackupsOutput)
pub mod describe_db_instance_automated_backups_output {
    /// A builder for [`DescribeDBInstanceAutomatedBackupsOutput`](crate::output::DescribeDBInstanceAutomatedBackupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) db_instance_automated_backups:
            std::option::Option<std::vec::Vec<crate::model::DBInstanceAutomatedBackup>>,
    }
    impl Builder {
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code> .
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn db_instance_automated_backups(
            mut self,
            input: impl Into<crate::model::DBInstanceAutomatedBackup>,
        ) -> Self {
            let mut v = self.db_instance_automated_backups.unwrap_or_default();
            v.push(input.into());
            self.db_instance_automated_backups = Some(v);
            self
        }
        pub fn set_db_instance_automated_backups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBInstanceAutomatedBackup>>,
        ) -> Self {
            self.db_instance_automated_backups = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBInstanceAutomatedBackupsOutput`](crate::output::DescribeDBInstanceAutomatedBackupsOutput)
        pub fn build(self) -> crate::output::DescribeDBInstanceAutomatedBackupsOutput {
            crate::output::DescribeDBInstanceAutomatedBackupsOutput {
                marker: self.marker,
                db_instance_automated_backups: self.db_instance_automated_backups,
            }
        }
    }
}
impl DescribeDBInstanceAutomatedBackupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBInstanceAutomatedBackupsOutput`](crate::output::DescribeDBInstanceAutomatedBackupsOutput)
    pub fn builder() -> crate::output::describe_db_instance_automated_backups_output::Builder {
        crate::output::describe_db_instance_automated_backups_output::Builder::default()
    }
}

/// <p>
/// Contains the result of a successful invocation of the <code>DescribeDBEngineVersions</code> action.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBEngineVersionsOutput {
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>
    /// A list of <code>DBEngineVersion</code> elements.
    /// </p>
    pub db_engine_versions: std::option::Option<std::vec::Vec<crate::model::DBEngineVersion>>,
}
impl std::fmt::Debug for DescribeDBEngineVersionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBEngineVersionsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("db_engine_versions", &self.db_engine_versions);
        formatter.finish()
    }
}
/// See [`DescribeDBEngineVersionsOutput`](crate::output::DescribeDBEngineVersionsOutput)
pub mod describe_db_engine_versions_output {
    /// A builder for [`DescribeDBEngineVersionsOutput`](crate::output::DescribeDBEngineVersionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) db_engine_versions:
            std::option::Option<std::vec::Vec<crate::model::DBEngineVersion>>,
    }
    impl Builder {
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn db_engine_versions(
            mut self,
            input: impl Into<crate::model::DBEngineVersion>,
        ) -> Self {
            let mut v = self.db_engine_versions.unwrap_or_default();
            v.push(input.into());
            self.db_engine_versions = Some(v);
            self
        }
        pub fn set_db_engine_versions(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBEngineVersion>>,
        ) -> Self {
            self.db_engine_versions = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBEngineVersionsOutput`](crate::output::DescribeDBEngineVersionsOutput)
        pub fn build(self) -> crate::output::DescribeDBEngineVersionsOutput {
            crate::output::DescribeDBEngineVersionsOutput {
                marker: self.marker,
                db_engine_versions: self.db_engine_versions,
            }
        }
    }
}
impl DescribeDBEngineVersionsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBEngineVersionsOutput`](crate::output::DescribeDBEngineVersionsOutput)
    pub fn builder() -> crate::output::describe_db_engine_versions_output::Builder {
        crate::output::describe_db_engine_versions_output::Builder::default()
    }
}

/// <p>
/// Provides a list of DB cluster snapshots for the user as the result of a call to the <code>DescribeDBClusterSnapshots</code> action.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBClusterSnapshotsOutput {
    /// <p>
    /// An optional pagination token provided by a previous
    /// <code>DescribeDBClusterSnapshots</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>Provides a list of DB cluster snapshots for the user.</p>
    pub db_cluster_snapshots: std::option::Option<std::vec::Vec<crate::model::DBClusterSnapshot>>,
}
impl std::fmt::Debug for DescribeDBClusterSnapshotsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBClusterSnapshotsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("db_cluster_snapshots", &self.db_cluster_snapshots);
        formatter.finish()
    }
}
/// See [`DescribeDBClusterSnapshotsOutput`](crate::output::DescribeDBClusterSnapshotsOutput)
pub mod describe_db_cluster_snapshots_output {
    /// A builder for [`DescribeDBClusterSnapshotsOutput`](crate::output::DescribeDBClusterSnapshotsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) db_cluster_snapshots:
            std::option::Option<std::vec::Vec<crate::model::DBClusterSnapshot>>,
    }
    impl Builder {
        /// <p>
        /// An optional pagination token provided by a previous
        /// <code>DescribeDBClusterSnapshots</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn db_cluster_snapshots(
            mut self,
            input: impl Into<crate::model::DBClusterSnapshot>,
        ) -> Self {
            let mut v = self.db_cluster_snapshots.unwrap_or_default();
            v.push(input.into());
            self.db_cluster_snapshots = Some(v);
            self
        }
        pub fn set_db_cluster_snapshots(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBClusterSnapshot>>,
        ) -> Self {
            self.db_cluster_snapshots = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBClusterSnapshotsOutput`](crate::output::DescribeDBClusterSnapshotsOutput)
        pub fn build(self) -> crate::output::DescribeDBClusterSnapshotsOutput {
            crate::output::DescribeDBClusterSnapshotsOutput {
                marker: self.marker,
                db_cluster_snapshots: self.db_cluster_snapshots,
            }
        }
    }
}
impl DescribeDBClusterSnapshotsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterSnapshotsOutput`](crate::output::DescribeDBClusterSnapshotsOutput)
    pub fn builder() -> crate::output::describe_db_cluster_snapshots_output::Builder {
        crate::output::describe_db_cluster_snapshots_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBClusterSnapshotAttributesOutput {
    /// <p>Contains the results of a successful call to the <code>DescribeDBClusterSnapshotAttributes</code>
    /// API action.</p>
    /// <p>Manual DB cluster snapshot attributes are used to authorize other AWS accounts
    /// to copy or restore a manual DB cluster snapshot. For more information, see the <code>ModifyDBClusterSnapshotAttribute</code>
    /// API action.</p>
    pub db_cluster_snapshot_attributes_result:
        std::option::Option<crate::model::DBClusterSnapshotAttributesResult>,
}
impl std::fmt::Debug for DescribeDBClusterSnapshotAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBClusterSnapshotAttributesOutput");
        formatter.field(
            "db_cluster_snapshot_attributes_result",
            &self.db_cluster_snapshot_attributes_result,
        );
        formatter.finish()
    }
}
/// See [`DescribeDBClusterSnapshotAttributesOutput`](crate::output::DescribeDBClusterSnapshotAttributesOutput)
pub mod describe_db_cluster_snapshot_attributes_output {
    /// A builder for [`DescribeDBClusterSnapshotAttributesOutput`](crate::output::DescribeDBClusterSnapshotAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_snapshot_attributes_result:
            std::option::Option<crate::model::DBClusterSnapshotAttributesResult>,
    }
    impl Builder {
        /// <p>Contains the results of a successful call to the <code>DescribeDBClusterSnapshotAttributes</code>
        /// API action.</p>
        /// <p>Manual DB cluster snapshot attributes are used to authorize other AWS accounts
        /// to copy or restore a manual DB cluster snapshot. For more information, see the <code>ModifyDBClusterSnapshotAttribute</code>
        /// API action.</p>
        pub fn db_cluster_snapshot_attributes_result(
            mut self,
            input: crate::model::DBClusterSnapshotAttributesResult,
        ) -> Self {
            self.db_cluster_snapshot_attributes_result = Some(input);
            self
        }
        pub fn set_db_cluster_snapshot_attributes_result(
            mut self,
            input: std::option::Option<crate::model::DBClusterSnapshotAttributesResult>,
        ) -> Self {
            self.db_cluster_snapshot_attributes_result = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBClusterSnapshotAttributesOutput`](crate::output::DescribeDBClusterSnapshotAttributesOutput)
        pub fn build(self) -> crate::output::DescribeDBClusterSnapshotAttributesOutput {
            crate::output::DescribeDBClusterSnapshotAttributesOutput {
                db_cluster_snapshot_attributes_result: self.db_cluster_snapshot_attributes_result,
            }
        }
    }
}
impl DescribeDBClusterSnapshotAttributesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterSnapshotAttributesOutput`](crate::output::DescribeDBClusterSnapshotAttributesOutput)
    pub fn builder() -> crate::output::describe_db_cluster_snapshot_attributes_output::Builder {
        crate::output::describe_db_cluster_snapshot_attributes_output::Builder::default()
    }
}

/// <p>Contains the result of a successful invocation of the <code>DescribeDBClusters</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBClustersOutput {
    /// <p>A pagination token that can be used in a later DescribeDBClusters request.</p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>Contains a list of DB clusters for the user.</p>
    pub db_clusters: std::option::Option<std::vec::Vec<crate::model::DBCluster>>,
}
impl std::fmt::Debug for DescribeDBClustersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBClustersOutput");
        formatter.field("marker", &self.marker);
        formatter.field("db_clusters", &self.db_clusters);
        formatter.finish()
    }
}
/// See [`DescribeDBClustersOutput`](crate::output::DescribeDBClustersOutput)
pub mod describe_db_clusters_output {
    /// A builder for [`DescribeDBClustersOutput`](crate::output::DescribeDBClustersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) db_clusters: std::option::Option<std::vec::Vec<crate::model::DBCluster>>,
    }
    impl Builder {
        /// <p>A pagination token that can be used in a later DescribeDBClusters request.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn db_clusters(mut self, input: impl Into<crate::model::DBCluster>) -> Self {
            let mut v = self.db_clusters.unwrap_or_default();
            v.push(input.into());
            self.db_clusters = Some(v);
            self
        }
        pub fn set_db_clusters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBCluster>>,
        ) -> Self {
            self.db_clusters = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBClustersOutput`](crate::output::DescribeDBClustersOutput)
        pub fn build(self) -> crate::output::DescribeDBClustersOutput {
            crate::output::DescribeDBClustersOutput {
                marker: self.marker,
                db_clusters: self.db_clusters,
            }
        }
    }
}
impl DescribeDBClustersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBClustersOutput`](crate::output::DescribeDBClustersOutput)
    pub fn builder() -> crate::output::describe_db_clusters_output::Builder {
        crate::output::describe_db_clusters_output::Builder::default()
    }
}

/// <p>Provides details about a DB cluster parameter group including the parameters in the DB cluster parameter group.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBClusterParametersOutput {
    /// <p>Provides a list of parameters for the DB cluster parameter group.</p>
    pub parameters: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// DescribeDBClusterParameters request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code> .
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBClusterParametersOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBClusterParametersOutput");
        formatter.field("parameters", &self.parameters);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribeDBClusterParametersOutput`](crate::output::DescribeDBClusterParametersOutput)
pub mod describe_db_cluster_parameters_output {
    /// A builder for [`DescribeDBClusterParametersOutput`](crate::output::DescribeDBClusterParametersOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) parameters: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn parameters(mut self, input: impl Into<crate::model::Parameter>) -> Self {
            let mut v = self.parameters.unwrap_or_default();
            v.push(input.into());
            self.parameters = Some(v);
            self
        }
        pub fn set_parameters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
        ) -> Self {
            self.parameters = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// DescribeDBClusterParameters request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code> .
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBClusterParametersOutput`](crate::output::DescribeDBClusterParametersOutput)
        pub fn build(self) -> crate::output::DescribeDBClusterParametersOutput {
            crate::output::DescribeDBClusterParametersOutput {
                parameters: self.parameters,
                marker: self.marker,
            }
        }
    }
}
impl DescribeDBClusterParametersOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterParametersOutput`](crate::output::DescribeDBClusterParametersOutput)
    pub fn builder() -> crate::output::describe_db_cluster_parameters_output::Builder {
        crate::output::describe_db_cluster_parameters_output::Builder::default()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBClusterParameterGroupsOutput {
    /// <p>
    /// An optional pagination token provided by a previous
    /// <code>DescribeDBClusterParameterGroups</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>A list of DB cluster parameter groups.</p>
    pub db_cluster_parameter_groups:
        std::option::Option<std::vec::Vec<crate::model::DBClusterParameterGroup>>,
}
impl std::fmt::Debug for DescribeDBClusterParameterGroupsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBClusterParameterGroupsOutput");
        formatter.field("marker", &self.marker);
        formatter.field(
            "db_cluster_parameter_groups",
            &self.db_cluster_parameter_groups,
        );
        formatter.finish()
    }
}
/// See [`DescribeDBClusterParameterGroupsOutput`](crate::output::DescribeDBClusterParameterGroupsOutput)
pub mod describe_db_cluster_parameter_groups_output {
    /// A builder for [`DescribeDBClusterParameterGroupsOutput`](crate::output::DescribeDBClusterParameterGroupsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) db_cluster_parameter_groups:
            std::option::Option<std::vec::Vec<crate::model::DBClusterParameterGroup>>,
    }
    impl Builder {
        /// <p>
        /// An optional pagination token provided by a previous
        /// <code>DescribeDBClusterParameterGroups</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn db_cluster_parameter_groups(
            mut self,
            input: impl Into<crate::model::DBClusterParameterGroup>,
        ) -> Self {
            let mut v = self.db_cluster_parameter_groups.unwrap_or_default();
            v.push(input.into());
            self.db_cluster_parameter_groups = Some(v);
            self
        }
        pub fn set_db_cluster_parameter_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBClusterParameterGroup>>,
        ) -> Self {
            self.db_cluster_parameter_groups = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBClusterParameterGroupsOutput`](crate::output::DescribeDBClusterParameterGroupsOutput)
        pub fn build(self) -> crate::output::DescribeDBClusterParameterGroupsOutput {
            crate::output::DescribeDBClusterParameterGroupsOutput {
                marker: self.marker,
                db_cluster_parameter_groups: self.db_cluster_parameter_groups,
            }
        }
    }
}
impl DescribeDBClusterParameterGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterParameterGroupsOutput`](crate::output::DescribeDBClusterParameterGroupsOutput)
    pub fn builder() -> crate::output::describe_db_cluster_parameter_groups_output::Builder {
        crate::output::describe_db_cluster_parameter_groups_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBClusterEndpointsOutput {
    /// <p> An optional pagination token provided by a previous
    /// <code>DescribeDBClusterEndpoints</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>Contains the details of the endpoints associated with the cluster
    /// and matching any filter conditions.</p>
    pub db_cluster_endpoints: std::option::Option<std::vec::Vec<crate::model::DBClusterEndpoint>>,
}
impl std::fmt::Debug for DescribeDBClusterEndpointsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBClusterEndpointsOutput");
        formatter.field("marker", &self.marker);
        formatter.field("db_cluster_endpoints", &self.db_cluster_endpoints);
        formatter.finish()
    }
}
/// See [`DescribeDBClusterEndpointsOutput`](crate::output::DescribeDBClusterEndpointsOutput)
pub mod describe_db_cluster_endpoints_output {
    /// A builder for [`DescribeDBClusterEndpointsOutput`](crate::output::DescribeDBClusterEndpointsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) db_cluster_endpoints:
            std::option::Option<std::vec::Vec<crate::model::DBClusterEndpoint>>,
    }
    impl Builder {
        /// <p> An optional pagination token provided by a previous
        /// <code>DescribeDBClusterEndpoints</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn db_cluster_endpoints(
            mut self,
            input: impl Into<crate::model::DBClusterEndpoint>,
        ) -> Self {
            let mut v = self.db_cluster_endpoints.unwrap_or_default();
            v.push(input.into());
            self.db_cluster_endpoints = Some(v);
            self
        }
        pub fn set_db_cluster_endpoints(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBClusterEndpoint>>,
        ) -> Self {
            self.db_cluster_endpoints = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBClusterEndpointsOutput`](crate::output::DescribeDBClusterEndpointsOutput)
        pub fn build(self) -> crate::output::DescribeDBClusterEndpointsOutput {
            crate::output::DescribeDBClusterEndpointsOutput {
                marker: self.marker,
                db_cluster_endpoints: self.db_cluster_endpoints,
            }
        }
    }
}
impl DescribeDBClusterEndpointsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterEndpointsOutput`](crate::output::DescribeDBClusterEndpointsOutput)
    pub fn builder() -> crate::output::describe_db_cluster_endpoints_output::Builder {
        crate::output::describe_db_cluster_endpoints_output::Builder::default()
    }
}

/// <p>Contains the result of a successful invocation of the <code>DescribeDBClusterBacktracks</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBClusterBacktracksOutput {
    /// <p>A pagination token that can be used in a later <code>DescribeDBClusterBacktracks</code> request.</p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>Contains a list of backtracks for the user.</p>
    pub db_cluster_backtracks: std::option::Option<std::vec::Vec<crate::model::DBClusterBacktrack>>,
}
impl std::fmt::Debug for DescribeDBClusterBacktracksOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBClusterBacktracksOutput");
        formatter.field("marker", &self.marker);
        formatter.field("db_cluster_backtracks", &self.db_cluster_backtracks);
        formatter.finish()
    }
}
/// See [`DescribeDBClusterBacktracksOutput`](crate::output::DescribeDBClusterBacktracksOutput)
pub mod describe_db_cluster_backtracks_output {
    /// A builder for [`DescribeDBClusterBacktracksOutput`](crate::output::DescribeDBClusterBacktracksOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) db_cluster_backtracks:
            std::option::Option<std::vec::Vec<crate::model::DBClusterBacktrack>>,
    }
    impl Builder {
        /// <p>A pagination token that can be used in a later <code>DescribeDBClusterBacktracks</code> request.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn db_cluster_backtracks(
            mut self,
            input: impl Into<crate::model::DBClusterBacktrack>,
        ) -> Self {
            let mut v = self.db_cluster_backtracks.unwrap_or_default();
            v.push(input.into());
            self.db_cluster_backtracks = Some(v);
            self
        }
        pub fn set_db_cluster_backtracks(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DBClusterBacktrack>>,
        ) -> Self {
            self.db_cluster_backtracks = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBClusterBacktracksOutput`](crate::output::DescribeDBClusterBacktracksOutput)
        pub fn build(self) -> crate::output::DescribeDBClusterBacktracksOutput {
            crate::output::DescribeDBClusterBacktracksOutput {
                marker: self.marker,
                db_cluster_backtracks: self.db_cluster_backtracks,
            }
        }
    }
}
impl DescribeDBClusterBacktracksOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterBacktracksOutput`](crate::output::DescribeDBClusterBacktracksOutput)
    pub fn builder() -> crate::output::describe_db_cluster_backtracks_output::Builder {
        crate::output::describe_db_cluster_backtracks_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCustomAvailabilityZonesOutput {
    /// <p>An optional pagination token provided by a previous
    /// <code>DescribeCustomAvailabilityZones</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>The list of <a>CustomAvailabilityZone</a> objects for the AWS account.</p>
    pub custom_availability_zones:
        std::option::Option<std::vec::Vec<crate::model::CustomAvailabilityZone>>,
}
impl std::fmt::Debug for DescribeCustomAvailabilityZonesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCustomAvailabilityZonesOutput");
        formatter.field("marker", &self.marker);
        formatter.field("custom_availability_zones", &self.custom_availability_zones);
        formatter.finish()
    }
}
/// See [`DescribeCustomAvailabilityZonesOutput`](crate::output::DescribeCustomAvailabilityZonesOutput)
pub mod describe_custom_availability_zones_output {
    /// A builder for [`DescribeCustomAvailabilityZonesOutput`](crate::output::DescribeCustomAvailabilityZonesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) custom_availability_zones:
            std::option::Option<std::vec::Vec<crate::model::CustomAvailabilityZone>>,
    }
    impl Builder {
        /// <p>An optional pagination token provided by a previous
        /// <code>DescribeCustomAvailabilityZones</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn custom_availability_zones(
            mut self,
            input: impl Into<crate::model::CustomAvailabilityZone>,
        ) -> Self {
            let mut v = self.custom_availability_zones.unwrap_or_default();
            v.push(input.into());
            self.custom_availability_zones = Some(v);
            self
        }
        pub fn set_custom_availability_zones(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CustomAvailabilityZone>>,
        ) -> Self {
            self.custom_availability_zones = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCustomAvailabilityZonesOutput`](crate::output::DescribeCustomAvailabilityZonesOutput)
        pub fn build(self) -> crate::output::DescribeCustomAvailabilityZonesOutput {
            crate::output::DescribeCustomAvailabilityZonesOutput {
                marker: self.marker,
                custom_availability_zones: self.custom_availability_zones,
            }
        }
    }
}
impl DescribeCustomAvailabilityZonesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCustomAvailabilityZonesOutput`](crate::output::DescribeCustomAvailabilityZonesOutput)
    pub fn builder() -> crate::output::describe_custom_availability_zones_output::Builder {
        crate::output::describe_custom_availability_zones_output::Builder::default()
    }
}

/// <p>Data returned by the <b>DescribeCertificates</b> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCertificatesOutput {
    /// <p>The list of <code>Certificate</code> objects for the AWS account.</p>
    pub certificates: std::option::Option<std::vec::Vec<crate::model::Certificate>>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// <code>DescribeCertificates</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code> .
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeCertificatesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCertificatesOutput");
        formatter.field("certificates", &self.certificates);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}
/// See [`DescribeCertificatesOutput`](crate::output::DescribeCertificatesOutput)
pub mod describe_certificates_output {
    /// A builder for [`DescribeCertificatesOutput`](crate::output::DescribeCertificatesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) certificates: std::option::Option<std::vec::Vec<crate::model::Certificate>>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn certificates(mut self, input: impl Into<crate::model::Certificate>) -> Self {
            let mut v = self.certificates.unwrap_or_default();
            v.push(input.into());
            self.certificates = Some(v);
            self
        }
        pub fn set_certificates(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Certificate>>,
        ) -> Self {
            self.certificates = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// <code>DescribeCertificates</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code> .
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCertificatesOutput`](crate::output::DescribeCertificatesOutput)
        pub fn build(self) -> crate::output::DescribeCertificatesOutput {
            crate::output::DescribeCertificatesOutput {
                certificates: self.certificates,
                marker: self.marker,
            }
        }
    }
}
impl DescribeCertificatesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCertificatesOutput`](crate::output::DescribeCertificatesOutput)
    pub fn builder() -> crate::output::describe_certificates_output::Builder {
        crate::output::describe_certificates_output::Builder::default()
    }
}

/// <p>Data returned by the <b>DescribeAccountAttributes</b> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAccountAttributesOutput {
    /// <p>A list of <code>AccountQuota</code> objects. Within this list, each quota has a name,
    /// a count of usage toward the quota maximum, and a maximum value for the quota.</p>
    pub account_quotas: std::option::Option<std::vec::Vec<crate::model::AccountQuota>>,
}
impl std::fmt::Debug for DescribeAccountAttributesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAccountAttributesOutput");
        formatter.field("account_quotas", &self.account_quotas);
        formatter.finish()
    }
}
/// See [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput)
pub mod describe_account_attributes_output {
    /// A builder for [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) account_quotas: std::option::Option<std::vec::Vec<crate::model::AccountQuota>>,
    }
    impl Builder {
        pub fn account_quotas(mut self, input: impl Into<crate::model::AccountQuota>) -> Self {
            let mut v = self.account_quotas.unwrap_or_default();
            v.push(input.into());
            self.account_quotas = Some(v);
            self
        }
        pub fn set_account_quotas(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AccountQuota>>,
        ) -> Self {
            self.account_quotas = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput)
        pub fn build(self) -> crate::output::DescribeAccountAttributesOutput {
            crate::output::DescribeAccountAttributesOutput {
                account_quotas: self.account_quotas,
            }
        }
    }
}
impl DescribeAccountAttributesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAccountAttributesOutput`](crate::output::DescribeAccountAttributesOutput)
    pub fn builder() -> crate::output::describe_account_attributes_output::Builder {
        crate::output::describe_account_attributes_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeregisterDBProxyTargetsOutput {}
impl std::fmt::Debug for DeregisterDBProxyTargetsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeregisterDBProxyTargetsOutput");
        formatter.finish()
    }
}
/// See [`DeregisterDBProxyTargetsOutput`](crate::output::DeregisterDBProxyTargetsOutput)
pub mod deregister_db_proxy_targets_output {
    /// A builder for [`DeregisterDBProxyTargetsOutput`](crate::output::DeregisterDBProxyTargetsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeregisterDBProxyTargetsOutput`](crate::output::DeregisterDBProxyTargetsOutput)
        pub fn build(self) -> crate::output::DeregisterDBProxyTargetsOutput {
            crate::output::DeregisterDBProxyTargetsOutput {}
        }
    }
}
impl DeregisterDBProxyTargetsOutput {
    /// Creates a new builder-style object to manufacture [`DeregisterDBProxyTargetsOutput`](crate::output::DeregisterDBProxyTargetsOutput)
    pub fn builder() -> crate::output::deregister_db_proxy_targets_output::Builder {
        crate::output::deregister_db_proxy_targets_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteOptionGroupOutput {}
impl std::fmt::Debug for DeleteOptionGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteOptionGroupOutput");
        formatter.finish()
    }
}
/// See [`DeleteOptionGroupOutput`](crate::output::DeleteOptionGroupOutput)
pub mod delete_option_group_output {
    /// A builder for [`DeleteOptionGroupOutput`](crate::output::DeleteOptionGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteOptionGroupOutput`](crate::output::DeleteOptionGroupOutput)
        pub fn build(self) -> crate::output::DeleteOptionGroupOutput {
            crate::output::DeleteOptionGroupOutput {}
        }
    }
}
impl DeleteOptionGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteOptionGroupOutput`](crate::output::DeleteOptionGroupOutput)
    pub fn builder() -> crate::output::delete_option_group_output::Builder {
        crate::output::delete_option_group_output::Builder::default()
    }
}

/// <p>Contains the installation media for a DB engine that requires an on-premises
/// customer provided license, such as Microsoft SQL Server.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteInstallationMediaOutput {
    /// <p>The installation medium ID.</p>
    pub installation_media_id: std::option::Option<std::string::String>,
    /// <p>The custom Availability Zone (AZ) that contains the installation media.</p>
    pub custom_availability_zone_id: std::option::Option<std::string::String>,
    /// <p>The DB engine.</p>
    pub engine: std::option::Option<std::string::String>,
    /// <p>The engine version of the DB engine.</p>
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The path to the installation medium for the DB engine.</p>
    pub engine_installation_media_path: std::option::Option<std::string::String>,
    /// <p>The path to the installation medium for the operating system associated with the DB engine.</p>
    pub os_installation_media_path: std::option::Option<std::string::String>,
    /// <p>The status of the installation medium.</p>
    pub status: std::option::Option<std::string::String>,
    /// <p>If an installation media failure occurred, the cause of the failure.</p>
    pub failure_cause: std::option::Option<crate::model::InstallationMediaFailureCause>,
}
impl std::fmt::Debug for DeleteInstallationMediaOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteInstallationMediaOutput");
        formatter.field("installation_media_id", &self.installation_media_id);
        formatter.field(
            "custom_availability_zone_id",
            &self.custom_availability_zone_id,
        );
        formatter.field("engine", &self.engine);
        formatter.field("engine_version", &self.engine_version);
        formatter.field(
            "engine_installation_media_path",
            &self.engine_installation_media_path,
        );
        formatter.field(
            "os_installation_media_path",
            &self.os_installation_media_path,
        );
        formatter.field("status", &self.status);
        formatter.field("failure_cause", &self.failure_cause);
        formatter.finish()
    }
}
/// See [`DeleteInstallationMediaOutput`](crate::output::DeleteInstallationMediaOutput)
pub mod delete_installation_media_output {
    /// A builder for [`DeleteInstallationMediaOutput`](crate::output::DeleteInstallationMediaOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) installation_media_id: std::option::Option<std::string::String>,
        pub(crate) custom_availability_zone_id: std::option::Option<std::string::String>,
        pub(crate) engine: std::option::Option<std::string::String>,
        pub(crate) engine_version: std::option::Option<std::string::String>,
        pub(crate) engine_installation_media_path: std::option::Option<std::string::String>,
        pub(crate) os_installation_media_path: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) failure_cause: std::option::Option<crate::model::InstallationMediaFailureCause>,
    }
    impl Builder {
        /// <p>The installation medium ID.</p>
        pub fn installation_media_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.installation_media_id = Some(input.into());
            self
        }
        pub fn set_installation_media_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.installation_media_id = input;
            self
        }
        /// <p>The custom Availability Zone (AZ) that contains the installation media.</p>
        pub fn custom_availability_zone_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.custom_availability_zone_id = Some(input.into());
            self
        }
        pub fn set_custom_availability_zone_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.custom_availability_zone_id = input;
            self
        }
        /// <p>The DB engine.</p>
        pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine = Some(input.into());
            self
        }
        pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine = input;
            self
        }
        /// <p>The engine version of the DB engine.</p>
        pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_version = Some(input.into());
            self
        }
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_version = input;
            self
        }
        /// <p>The path to the installation medium for the DB engine.</p>
        pub fn engine_installation_media_path(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.engine_installation_media_path = Some(input.into());
            self
        }
        pub fn set_engine_installation_media_path(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_installation_media_path = input;
            self
        }
        /// <p>The path to the installation medium for the operating system associated with the DB engine.</p>
        pub fn os_installation_media_path(mut self, input: impl Into<std::string::String>) -> Self {
            self.os_installation_media_path = Some(input.into());
            self
        }
        pub fn set_os_installation_media_path(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.os_installation_media_path = input;
            self
        }
        /// <p>The status of the installation medium.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// <p>If an installation media failure occurred, the cause of the failure.</p>
        pub fn failure_cause(mut self, input: crate::model::InstallationMediaFailureCause) -> Self {
            self.failure_cause = Some(input);
            self
        }
        pub fn set_failure_cause(
            mut self,
            input: std::option::Option<crate::model::InstallationMediaFailureCause>,
        ) -> Self {
            self.failure_cause = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteInstallationMediaOutput`](crate::output::DeleteInstallationMediaOutput)
        pub fn build(self) -> crate::output::DeleteInstallationMediaOutput {
            crate::output::DeleteInstallationMediaOutput {
                installation_media_id: self.installation_media_id,
                custom_availability_zone_id: self.custom_availability_zone_id,
                engine: self.engine,
                engine_version: self.engine_version,
                engine_installation_media_path: self.engine_installation_media_path,
                os_installation_media_path: self.os_installation_media_path,
                status: self.status,
                failure_cause: self.failure_cause,
            }
        }
    }
}
impl DeleteInstallationMediaOutput {
    /// Creates a new builder-style object to manufacture [`DeleteInstallationMediaOutput`](crate::output::DeleteInstallationMediaOutput)
    pub fn builder() -> crate::output::delete_installation_media_output::Builder {
        crate::output::delete_installation_media_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteGlobalClusterOutput {
    /// <p>A data type representing an Aurora global database.</p>
    pub global_cluster: std::option::Option<crate::model::GlobalCluster>,
}
impl std::fmt::Debug for DeleteGlobalClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteGlobalClusterOutput");
        formatter.field("global_cluster", &self.global_cluster);
        formatter.finish()
    }
}
/// See [`DeleteGlobalClusterOutput`](crate::output::DeleteGlobalClusterOutput)
pub mod delete_global_cluster_output {
    /// A builder for [`DeleteGlobalClusterOutput`](crate::output::DeleteGlobalClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) global_cluster: std::option::Option<crate::model::GlobalCluster>,
    }
    impl Builder {
        /// <p>A data type representing an Aurora global database.</p>
        pub fn global_cluster(mut self, input: crate::model::GlobalCluster) -> Self {
            self.global_cluster = Some(input);
            self
        }
        pub fn set_global_cluster(
            mut self,
            input: std::option::Option<crate::model::GlobalCluster>,
        ) -> Self {
            self.global_cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteGlobalClusterOutput`](crate::output::DeleteGlobalClusterOutput)
        pub fn build(self) -> crate::output::DeleteGlobalClusterOutput {
            crate::output::DeleteGlobalClusterOutput {
                global_cluster: self.global_cluster,
            }
        }
    }
}
impl DeleteGlobalClusterOutput {
    /// Creates a new builder-style object to manufacture [`DeleteGlobalClusterOutput`](crate::output::DeleteGlobalClusterOutput)
    pub fn builder() -> crate::output::delete_global_cluster_output::Builder {
        crate::output::delete_global_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteEventSubscriptionOutput {
    /// <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
    pub event_subscription: std::option::Option<crate::model::EventSubscription>,
}
impl std::fmt::Debug for DeleteEventSubscriptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteEventSubscriptionOutput");
        formatter.field("event_subscription", &self.event_subscription);
        formatter.finish()
    }
}
/// See [`DeleteEventSubscriptionOutput`](crate::output::DeleteEventSubscriptionOutput)
pub mod delete_event_subscription_output {
    /// A builder for [`DeleteEventSubscriptionOutput`](crate::output::DeleteEventSubscriptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_subscription: std::option::Option<crate::model::EventSubscription>,
    }
    impl Builder {
        /// <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
        pub fn event_subscription(mut self, input: crate::model::EventSubscription) -> Self {
            self.event_subscription = Some(input);
            self
        }
        pub fn set_event_subscription(
            mut self,
            input: std::option::Option<crate::model::EventSubscription>,
        ) -> Self {
            self.event_subscription = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteEventSubscriptionOutput`](crate::output::DeleteEventSubscriptionOutput)
        pub fn build(self) -> crate::output::DeleteEventSubscriptionOutput {
            crate::output::DeleteEventSubscriptionOutput {
                event_subscription: self.event_subscription,
            }
        }
    }
}
impl DeleteEventSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteEventSubscriptionOutput`](crate::output::DeleteEventSubscriptionOutput)
    pub fn builder() -> crate::output::delete_event_subscription_output::Builder {
        crate::output::delete_event_subscription_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBSubnetGroupOutput {}
impl std::fmt::Debug for DeleteDBSubnetGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBSubnetGroupOutput");
        formatter.finish()
    }
}
/// See [`DeleteDBSubnetGroupOutput`](crate::output::DeleteDBSubnetGroupOutput)
pub mod delete_db_subnet_group_output {
    /// A builder for [`DeleteDBSubnetGroupOutput`](crate::output::DeleteDBSubnetGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteDBSubnetGroupOutput`](crate::output::DeleteDBSubnetGroupOutput)
        pub fn build(self) -> crate::output::DeleteDBSubnetGroupOutput {
            crate::output::DeleteDBSubnetGroupOutput {}
        }
    }
}
impl DeleteDBSubnetGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDBSubnetGroupOutput`](crate::output::DeleteDBSubnetGroupOutput)
    pub fn builder() -> crate::output::delete_db_subnet_group_output::Builder {
        crate::output::delete_db_subnet_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBSnapshotOutput {
    /// <p>Contains the details of an Amazon RDS DB snapshot.
    /// </p>
    /// <p>This data type is used as a response element
    /// in the <code>DescribeDBSnapshots</code> action.
    /// </p>
    pub db_snapshot: std::option::Option<crate::model::DBSnapshot>,
}
impl std::fmt::Debug for DeleteDBSnapshotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBSnapshotOutput");
        formatter.field("db_snapshot", &self.db_snapshot);
        formatter.finish()
    }
}
/// See [`DeleteDBSnapshotOutput`](crate::output::DeleteDBSnapshotOutput)
pub mod delete_db_snapshot_output {
    /// A builder for [`DeleteDBSnapshotOutput`](crate::output::DeleteDBSnapshotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_snapshot: std::option::Option<crate::model::DBSnapshot>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB snapshot.
        /// </p>
        /// <p>This data type is used as a response element
        /// in the <code>DescribeDBSnapshots</code> action.
        /// </p>
        pub fn db_snapshot(mut self, input: crate::model::DBSnapshot) -> Self {
            self.db_snapshot = Some(input);
            self
        }
        pub fn set_db_snapshot(
            mut self,
            input: std::option::Option<crate::model::DBSnapshot>,
        ) -> Self {
            self.db_snapshot = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBSnapshotOutput`](crate::output::DeleteDBSnapshotOutput)
        pub fn build(self) -> crate::output::DeleteDBSnapshotOutput {
            crate::output::DeleteDBSnapshotOutput {
                db_snapshot: self.db_snapshot,
            }
        }
    }
}
impl DeleteDBSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDBSnapshotOutput`](crate::output::DeleteDBSnapshotOutput)
    pub fn builder() -> crate::output::delete_db_snapshot_output::Builder {
        crate::output::delete_db_snapshot_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBSecurityGroupOutput {}
impl std::fmt::Debug for DeleteDBSecurityGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBSecurityGroupOutput");
        formatter.finish()
    }
}
/// See [`DeleteDBSecurityGroupOutput`](crate::output::DeleteDBSecurityGroupOutput)
pub mod delete_db_security_group_output {
    /// A builder for [`DeleteDBSecurityGroupOutput`](crate::output::DeleteDBSecurityGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteDBSecurityGroupOutput`](crate::output::DeleteDBSecurityGroupOutput)
        pub fn build(self) -> crate::output::DeleteDBSecurityGroupOutput {
            crate::output::DeleteDBSecurityGroupOutput {}
        }
    }
}
impl DeleteDBSecurityGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDBSecurityGroupOutput`](crate::output::DeleteDBSecurityGroupOutput)
    pub fn builder() -> crate::output::delete_db_security_group_output::Builder {
        crate::output::delete_db_security_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBProxyEndpointOutput {
    /// <p>The data structure representing the details of the DB proxy endpoint that you delete.</p>
    pub db_proxy_endpoint: std::option::Option<crate::model::DBProxyEndpoint>,
}
impl std::fmt::Debug for DeleteDBProxyEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBProxyEndpointOutput");
        formatter.field("db_proxy_endpoint", &self.db_proxy_endpoint);
        formatter.finish()
    }
}
/// See [`DeleteDBProxyEndpointOutput`](crate::output::DeleteDBProxyEndpointOutput)
pub mod delete_db_proxy_endpoint_output {
    /// A builder for [`DeleteDBProxyEndpointOutput`](crate::output::DeleteDBProxyEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_endpoint: std::option::Option<crate::model::DBProxyEndpoint>,
    }
    impl Builder {
        /// <p>The data structure representing the details of the DB proxy endpoint that you delete.</p>
        pub fn db_proxy_endpoint(mut self, input: crate::model::DBProxyEndpoint) -> Self {
            self.db_proxy_endpoint = Some(input);
            self
        }
        pub fn set_db_proxy_endpoint(
            mut self,
            input: std::option::Option<crate::model::DBProxyEndpoint>,
        ) -> Self {
            self.db_proxy_endpoint = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBProxyEndpointOutput`](crate::output::DeleteDBProxyEndpointOutput)
        pub fn build(self) -> crate::output::DeleteDBProxyEndpointOutput {
            crate::output::DeleteDBProxyEndpointOutput {
                db_proxy_endpoint: self.db_proxy_endpoint,
            }
        }
    }
}
impl DeleteDBProxyEndpointOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDBProxyEndpointOutput`](crate::output::DeleteDBProxyEndpointOutput)
    pub fn builder() -> crate::output::delete_db_proxy_endpoint_output::Builder {
        crate::output::delete_db_proxy_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBProxyOutput {
    /// <p>The data structure representing the details of the DB proxy that you delete.</p>
    pub db_proxy: std::option::Option<crate::model::DBProxy>,
}
impl std::fmt::Debug for DeleteDBProxyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBProxyOutput");
        formatter.field("db_proxy", &self.db_proxy);
        formatter.finish()
    }
}
/// See [`DeleteDBProxyOutput`](crate::output::DeleteDBProxyOutput)
pub mod delete_db_proxy_output {
    /// A builder for [`DeleteDBProxyOutput`](crate::output::DeleteDBProxyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy: std::option::Option<crate::model::DBProxy>,
    }
    impl Builder {
        /// <p>The data structure representing the details of the DB proxy that you delete.</p>
        pub fn db_proxy(mut self, input: crate::model::DBProxy) -> Self {
            self.db_proxy = Some(input);
            self
        }
        pub fn set_db_proxy(mut self, input: std::option::Option<crate::model::DBProxy>) -> Self {
            self.db_proxy = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBProxyOutput`](crate::output::DeleteDBProxyOutput)
        pub fn build(self) -> crate::output::DeleteDBProxyOutput {
            crate::output::DeleteDBProxyOutput {
                db_proxy: self.db_proxy,
            }
        }
    }
}
impl DeleteDBProxyOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDBProxyOutput`](crate::output::DeleteDBProxyOutput)
    pub fn builder() -> crate::output::delete_db_proxy_output::Builder {
        crate::output::delete_db_proxy_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBParameterGroupOutput {}
impl std::fmt::Debug for DeleteDBParameterGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBParameterGroupOutput");
        formatter.finish()
    }
}
/// See [`DeleteDBParameterGroupOutput`](crate::output::DeleteDBParameterGroupOutput)
pub mod delete_db_parameter_group_output {
    /// A builder for [`DeleteDBParameterGroupOutput`](crate::output::DeleteDBParameterGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteDBParameterGroupOutput`](crate::output::DeleteDBParameterGroupOutput)
        pub fn build(self) -> crate::output::DeleteDBParameterGroupOutput {
            crate::output::DeleteDBParameterGroupOutput {}
        }
    }
}
impl DeleteDBParameterGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDBParameterGroupOutput`](crate::output::DeleteDBParameterGroupOutput)
    pub fn builder() -> crate::output::delete_db_parameter_group_output::Builder {
        crate::output::delete_db_parameter_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBInstanceAutomatedBackupOutput {
    /// <p>An automated backup of a DB instance. It consists of system backups, transaction logs, and the database instance properties that
    /// existed at the time you deleted the source instance.</p>
    pub db_instance_automated_backup: std::option::Option<crate::model::DBInstanceAutomatedBackup>,
}
impl std::fmt::Debug for DeleteDBInstanceAutomatedBackupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBInstanceAutomatedBackupOutput");
        formatter.field(
            "db_instance_automated_backup",
            &self.db_instance_automated_backup,
        );
        formatter.finish()
    }
}
/// See [`DeleteDBInstanceAutomatedBackupOutput`](crate::output::DeleteDBInstanceAutomatedBackupOutput)
pub mod delete_db_instance_automated_backup_output {
    /// A builder for [`DeleteDBInstanceAutomatedBackupOutput`](crate::output::DeleteDBInstanceAutomatedBackupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_automated_backup:
            std::option::Option<crate::model::DBInstanceAutomatedBackup>,
    }
    impl Builder {
        /// <p>An automated backup of a DB instance. It consists of system backups, transaction logs, and the database instance properties that
        /// existed at the time you deleted the source instance.</p>
        pub fn db_instance_automated_backup(
            mut self,
            input: crate::model::DBInstanceAutomatedBackup,
        ) -> Self {
            self.db_instance_automated_backup = Some(input);
            self
        }
        pub fn set_db_instance_automated_backup(
            mut self,
            input: std::option::Option<crate::model::DBInstanceAutomatedBackup>,
        ) -> Self {
            self.db_instance_automated_backup = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBInstanceAutomatedBackupOutput`](crate::output::DeleteDBInstanceAutomatedBackupOutput)
        pub fn build(self) -> crate::output::DeleteDBInstanceAutomatedBackupOutput {
            crate::output::DeleteDBInstanceAutomatedBackupOutput {
                db_instance_automated_backup: self.db_instance_automated_backup,
            }
        }
    }
}
impl DeleteDBInstanceAutomatedBackupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDBInstanceAutomatedBackupOutput`](crate::output::DeleteDBInstanceAutomatedBackupOutput)
    pub fn builder() -> crate::output::delete_db_instance_automated_backup_output::Builder {
        crate::output::delete_db_instance_automated_backup_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBInstanceOutput {
    /// <p>Contains the details of an Amazon RDS DB instance.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
    /// </p>
    pub db_instance: std::option::Option<crate::model::DBInstance>,
}
impl std::fmt::Debug for DeleteDBInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBInstanceOutput");
        formatter.field("db_instance", &self.db_instance);
        formatter.finish()
    }
}
/// See [`DeleteDBInstanceOutput`](crate::output::DeleteDBInstanceOutput)
pub mod delete_db_instance_output {
    /// A builder for [`DeleteDBInstanceOutput`](crate::output::DeleteDBInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance: std::option::Option<crate::model::DBInstance>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB instance.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
        /// </p>
        pub fn db_instance(mut self, input: crate::model::DBInstance) -> Self {
            self.db_instance = Some(input);
            self
        }
        pub fn set_db_instance(
            mut self,
            input: std::option::Option<crate::model::DBInstance>,
        ) -> Self {
            self.db_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBInstanceOutput`](crate::output::DeleteDBInstanceOutput)
        pub fn build(self) -> crate::output::DeleteDBInstanceOutput {
            crate::output::DeleteDBInstanceOutput {
                db_instance: self.db_instance,
            }
        }
    }
}
impl DeleteDBInstanceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDBInstanceOutput`](crate::output::DeleteDBInstanceOutput)
    pub fn builder() -> crate::output::delete_db_instance_output::Builder {
        crate::output::delete_db_instance_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBClusterSnapshotOutput {
    /// <p>Contains the details for an Amazon RDS DB cluster snapshot
    /// </p>
    /// <p>This data type is used as a response element
    /// in the <code>DescribeDBClusterSnapshots</code> action.
    /// </p>
    pub db_cluster_snapshot: std::option::Option<crate::model::DBClusterSnapshot>,
}
impl std::fmt::Debug for DeleteDBClusterSnapshotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBClusterSnapshotOutput");
        formatter.field("db_cluster_snapshot", &self.db_cluster_snapshot);
        formatter.finish()
    }
}
/// See [`DeleteDBClusterSnapshotOutput`](crate::output::DeleteDBClusterSnapshotOutput)
pub mod delete_db_cluster_snapshot_output {
    /// A builder for [`DeleteDBClusterSnapshotOutput`](crate::output::DeleteDBClusterSnapshotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_snapshot: std::option::Option<crate::model::DBClusterSnapshot>,
    }
    impl Builder {
        /// <p>Contains the details for an Amazon RDS DB cluster snapshot
        /// </p>
        /// <p>This data type is used as a response element
        /// in the <code>DescribeDBClusterSnapshots</code> action.
        /// </p>
        pub fn db_cluster_snapshot(mut self, input: crate::model::DBClusterSnapshot) -> Self {
            self.db_cluster_snapshot = Some(input);
            self
        }
        pub fn set_db_cluster_snapshot(
            mut self,
            input: std::option::Option<crate::model::DBClusterSnapshot>,
        ) -> Self {
            self.db_cluster_snapshot = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBClusterSnapshotOutput`](crate::output::DeleteDBClusterSnapshotOutput)
        pub fn build(self) -> crate::output::DeleteDBClusterSnapshotOutput {
            crate::output::DeleteDBClusterSnapshotOutput {
                db_cluster_snapshot: self.db_cluster_snapshot,
            }
        }
    }
}
impl DeleteDBClusterSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDBClusterSnapshotOutput`](crate::output::DeleteDBClusterSnapshotOutput)
    pub fn builder() -> crate::output::delete_db_cluster_snapshot_output::Builder {
        crate::output::delete_db_cluster_snapshot_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBClusterParameterGroupOutput {}
impl std::fmt::Debug for DeleteDBClusterParameterGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBClusterParameterGroupOutput");
        formatter.finish()
    }
}
/// See [`DeleteDBClusterParameterGroupOutput`](crate::output::DeleteDBClusterParameterGroupOutput)
pub mod delete_db_cluster_parameter_group_output {
    /// A builder for [`DeleteDBClusterParameterGroupOutput`](crate::output::DeleteDBClusterParameterGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteDBClusterParameterGroupOutput`](crate::output::DeleteDBClusterParameterGroupOutput)
        pub fn build(self) -> crate::output::DeleteDBClusterParameterGroupOutput {
            crate::output::DeleteDBClusterParameterGroupOutput {}
        }
    }
}
impl DeleteDBClusterParameterGroupOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDBClusterParameterGroupOutput`](crate::output::DeleteDBClusterParameterGroupOutput)
    pub fn builder() -> crate::output::delete_db_cluster_parameter_group_output::Builder {
        crate::output::delete_db_cluster_parameter_group_output::Builder::default()
    }
}

/// <p>This data type represents the information you need to connect to an Amazon Aurora DB cluster.
/// This data type is used as a response element in the following actions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>CreateDBClusterEndpoint</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>DescribeDBClusterEndpoints</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>ModifyDBClusterEndpoint</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>DeleteDBClusterEndpoint</code>
/// </p>
/// </li>
/// </ul>
/// <p>For the data structure that represents Amazon RDS DB instance endpoints,
/// see <code>Endpoint</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBClusterEndpointOutput {
    /// <p>The identifier associated with the endpoint. This parameter is stored as a lowercase string.</p>
    pub db_cluster_endpoint_identifier: std::option::Option<std::string::String>,
    /// <p>The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is
    /// stored as a lowercase string.</p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.</p>
    pub db_cluster_endpoint_resource_identifier: std::option::Option<std::string::String>,
    /// <p>The DNS address of the endpoint.</p>
    pub endpoint: std::option::Option<std::string::String>,
    /// <p>The current status of the endpoint. One of: <code>creating</code>, <code>available</code>, <code>deleting</code>, <code>inactive</code>, <code>modifying</code>. The <code>inactive</code> state applies to an endpoint that can't be used for a certain kind of cluster,
    /// such as a <code>writer</code> endpoint for a read-only secondary cluster in a global database.</p>
    pub status: std::option::Option<std::string::String>,
    /// <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>CUSTOM</code>.</p>
    pub endpoint_type: std::option::Option<std::string::String>,
    /// <p>The type associated with a custom endpoint. One of: <code>READER</code>,
    /// <code>WRITER</code>, <code>ANY</code>.</p>
    pub custom_endpoint_type: std::option::Option<std::string::String>,
    /// <p>List of DB instance identifiers that are part of the custom endpoint group.</p>
    pub static_members: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>List of DB instance identifiers that aren't part of the custom endpoint group.
    /// All other eligible instances are reachable through the custom endpoint.
    /// Only relevant if the list of static members is empty.</p>
    pub excluded_members: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The Amazon Resource Name (ARN) for the endpoint.</p>
    pub db_cluster_endpoint_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteDBClusterEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBClusterEndpointOutput");
        formatter.field(
            "db_cluster_endpoint_identifier",
            &self.db_cluster_endpoint_identifier,
        );
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field(
            "db_cluster_endpoint_resource_identifier",
            &self.db_cluster_endpoint_resource_identifier,
        );
        formatter.field("endpoint", &self.endpoint);
        formatter.field("status", &self.status);
        formatter.field("endpoint_type", &self.endpoint_type);
        formatter.field("custom_endpoint_type", &self.custom_endpoint_type);
        formatter.field("static_members", &self.static_members);
        formatter.field("excluded_members", &self.excluded_members);
        formatter.field("db_cluster_endpoint_arn", &self.db_cluster_endpoint_arn);
        formatter.finish()
    }
}
/// See [`DeleteDBClusterEndpointOutput`](crate::output::DeleteDBClusterEndpointOutput)
pub mod delete_db_cluster_endpoint_output {
    /// A builder for [`DeleteDBClusterEndpointOutput`](crate::output::DeleteDBClusterEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_endpoint_identifier: std::option::Option<std::string::String>,
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) db_cluster_endpoint_resource_identifier:
            std::option::Option<std::string::String>,
        pub(crate) endpoint: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) endpoint_type: std::option::Option<std::string::String>,
        pub(crate) custom_endpoint_type: std::option::Option<std::string::String>,
        pub(crate) static_members: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) excluded_members: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) db_cluster_endpoint_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier associated with the endpoint. This parameter is stored as a lowercase string.</p>
        pub fn db_cluster_endpoint_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_endpoint_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_identifier = input;
            self
        }
        /// <p>The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is
        /// stored as a lowercase string.</p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.</p>
        pub fn db_cluster_endpoint_resource_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_resource_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_endpoint_resource_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_resource_identifier = input;
            self
        }
        /// <p>The DNS address of the endpoint.</p>
        pub fn endpoint(mut self, input: impl Into<std::string::String>) -> Self {
            self.endpoint = Some(input.into());
            self
        }
        pub fn set_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.endpoint = input;
            self
        }
        /// <p>The current status of the endpoint. One of: <code>creating</code>, <code>available</code>, <code>deleting</code>, <code>inactive</code>, <code>modifying</code>. The <code>inactive</code> state applies to an endpoint that can't be used for a certain kind of cluster,
        /// such as a <code>writer</code> endpoint for a read-only secondary cluster in a global database.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>CUSTOM</code>.</p>
        pub fn endpoint_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.endpoint_type = Some(input.into());
            self
        }
        pub fn set_endpoint_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.endpoint_type = input;
            self
        }
        /// <p>The type associated with a custom endpoint. One of: <code>READER</code>,
        /// <code>WRITER</code>, <code>ANY</code>.</p>
        pub fn custom_endpoint_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.custom_endpoint_type = Some(input.into());
            self
        }
        pub fn set_custom_endpoint_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.custom_endpoint_type = input;
            self
        }
        pub fn static_members(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.static_members.unwrap_or_default();
            v.push(input.into());
            self.static_members = Some(v);
            self
        }
        pub fn set_static_members(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.static_members = input;
            self
        }
        pub fn excluded_members(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.excluded_members.unwrap_or_default();
            v.push(input.into());
            self.excluded_members = Some(v);
            self
        }
        pub fn set_excluded_members(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.excluded_members = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the endpoint.</p>
        pub fn db_cluster_endpoint_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_endpoint_arn = Some(input.into());
            self
        }
        pub fn set_db_cluster_endpoint_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBClusterEndpointOutput`](crate::output::DeleteDBClusterEndpointOutput)
        pub fn build(self) -> crate::output::DeleteDBClusterEndpointOutput {
            crate::output::DeleteDBClusterEndpointOutput {
                db_cluster_endpoint_identifier: self.db_cluster_endpoint_identifier,
                db_cluster_identifier: self.db_cluster_identifier,
                db_cluster_endpoint_resource_identifier: self
                    .db_cluster_endpoint_resource_identifier,
                endpoint: self.endpoint,
                status: self.status,
                endpoint_type: self.endpoint_type,
                custom_endpoint_type: self.custom_endpoint_type,
                static_members: self.static_members,
                excluded_members: self.excluded_members,
                db_cluster_endpoint_arn: self.db_cluster_endpoint_arn,
            }
        }
    }
}
impl DeleteDBClusterEndpointOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDBClusterEndpointOutput`](crate::output::DeleteDBClusterEndpointOutput)
    pub fn builder() -> crate::output::delete_db_cluster_endpoint_output::Builder {
        crate::output::delete_db_cluster_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBClusterOutput {
    /// <p>Contains the details of an Amazon Aurora DB cluster.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
    /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
    /// </p>
    pub db_cluster: std::option::Option<crate::model::DBCluster>,
}
impl std::fmt::Debug for DeleteDBClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBClusterOutput");
        formatter.field("db_cluster", &self.db_cluster);
        formatter.finish()
    }
}
/// See [`DeleteDBClusterOutput`](crate::output::DeleteDBClusterOutput)
pub mod delete_db_cluster_output {
    /// A builder for [`DeleteDBClusterOutput`](crate::output::DeleteDBClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster: std::option::Option<crate::model::DBCluster>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon Aurora DB cluster.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
        /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
        /// </p>
        pub fn db_cluster(mut self, input: crate::model::DBCluster) -> Self {
            self.db_cluster = Some(input);
            self
        }
        pub fn set_db_cluster(
            mut self,
            input: std::option::Option<crate::model::DBCluster>,
        ) -> Self {
            self.db_cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBClusterOutput`](crate::output::DeleteDBClusterOutput)
        pub fn build(self) -> crate::output::DeleteDBClusterOutput {
            crate::output::DeleteDBClusterOutput {
                db_cluster: self.db_cluster,
            }
        }
    }
}
impl DeleteDBClusterOutput {
    /// Creates a new builder-style object to manufacture [`DeleteDBClusterOutput`](crate::output::DeleteDBClusterOutput)
    pub fn builder() -> crate::output::delete_db_cluster_output::Builder {
        crate::output::delete_db_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteCustomAvailabilityZoneOutput {
    /// <p>A custom Availability Zone (AZ) is an on-premises AZ that is integrated with a VMware vSphere cluster.</p>
    /// <p>For more information about RDS on VMware, see the
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html">
    /// RDS on VMware User Guide.</a>
    /// </p>
    pub custom_availability_zone: std::option::Option<crate::model::CustomAvailabilityZone>,
}
impl std::fmt::Debug for DeleteCustomAvailabilityZoneOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteCustomAvailabilityZoneOutput");
        formatter.field("custom_availability_zone", &self.custom_availability_zone);
        formatter.finish()
    }
}
/// See [`DeleteCustomAvailabilityZoneOutput`](crate::output::DeleteCustomAvailabilityZoneOutput)
pub mod delete_custom_availability_zone_output {
    /// A builder for [`DeleteCustomAvailabilityZoneOutput`](crate::output::DeleteCustomAvailabilityZoneOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) custom_availability_zone:
            std::option::Option<crate::model::CustomAvailabilityZone>,
    }
    impl Builder {
        /// <p>A custom Availability Zone (AZ) is an on-premises AZ that is integrated with a VMware vSphere cluster.</p>
        /// <p>For more information about RDS on VMware, see the
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html">
        /// RDS on VMware User Guide.</a>
        /// </p>
        pub fn custom_availability_zone(
            mut self,
            input: crate::model::CustomAvailabilityZone,
        ) -> Self {
            self.custom_availability_zone = Some(input);
            self
        }
        pub fn set_custom_availability_zone(
            mut self,
            input: std::option::Option<crate::model::CustomAvailabilityZone>,
        ) -> Self {
            self.custom_availability_zone = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCustomAvailabilityZoneOutput`](crate::output::DeleteCustomAvailabilityZoneOutput)
        pub fn build(self) -> crate::output::DeleteCustomAvailabilityZoneOutput {
            crate::output::DeleteCustomAvailabilityZoneOutput {
                custom_availability_zone: self.custom_availability_zone,
            }
        }
    }
}
impl DeleteCustomAvailabilityZoneOutput {
    /// Creates a new builder-style object to manufacture [`DeleteCustomAvailabilityZoneOutput`](crate::output::DeleteCustomAvailabilityZoneOutput)
    pub fn builder() -> crate::output::delete_custom_availability_zone_output::Builder {
        crate::output::delete_custom_availability_zone_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateOptionGroupOutput {
    /// <p></p>
    pub option_group: std::option::Option<crate::model::OptionGroup>,
}
impl std::fmt::Debug for CreateOptionGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateOptionGroupOutput");
        formatter.field("option_group", &self.option_group);
        formatter.finish()
    }
}
/// See [`CreateOptionGroupOutput`](crate::output::CreateOptionGroupOutput)
pub mod create_option_group_output {
    /// A builder for [`CreateOptionGroupOutput`](crate::output::CreateOptionGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) option_group: std::option::Option<crate::model::OptionGroup>,
    }
    impl Builder {
        /// <p></p>
        pub fn option_group(mut self, input: crate::model::OptionGroup) -> Self {
            self.option_group = Some(input);
            self
        }
        pub fn set_option_group(
            mut self,
            input: std::option::Option<crate::model::OptionGroup>,
        ) -> Self {
            self.option_group = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateOptionGroupOutput`](crate::output::CreateOptionGroupOutput)
        pub fn build(self) -> crate::output::CreateOptionGroupOutput {
            crate::output::CreateOptionGroupOutput {
                option_group: self.option_group,
            }
        }
    }
}
impl CreateOptionGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateOptionGroupOutput`](crate::output::CreateOptionGroupOutput)
    pub fn builder() -> crate::output::create_option_group_output::Builder {
        crate::output::create_option_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGlobalClusterOutput {
    /// <p>A data type representing an Aurora global database.</p>
    pub global_cluster: std::option::Option<crate::model::GlobalCluster>,
}
impl std::fmt::Debug for CreateGlobalClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGlobalClusterOutput");
        formatter.field("global_cluster", &self.global_cluster);
        formatter.finish()
    }
}
/// See [`CreateGlobalClusterOutput`](crate::output::CreateGlobalClusterOutput)
pub mod create_global_cluster_output {
    /// A builder for [`CreateGlobalClusterOutput`](crate::output::CreateGlobalClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) global_cluster: std::option::Option<crate::model::GlobalCluster>,
    }
    impl Builder {
        /// <p>A data type representing an Aurora global database.</p>
        pub fn global_cluster(mut self, input: crate::model::GlobalCluster) -> Self {
            self.global_cluster = Some(input);
            self
        }
        pub fn set_global_cluster(
            mut self,
            input: std::option::Option<crate::model::GlobalCluster>,
        ) -> Self {
            self.global_cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateGlobalClusterOutput`](crate::output::CreateGlobalClusterOutput)
        pub fn build(self) -> crate::output::CreateGlobalClusterOutput {
            crate::output::CreateGlobalClusterOutput {
                global_cluster: self.global_cluster,
            }
        }
    }
}
impl CreateGlobalClusterOutput {
    /// Creates a new builder-style object to manufacture [`CreateGlobalClusterOutput`](crate::output::CreateGlobalClusterOutput)
    pub fn builder() -> crate::output::create_global_cluster_output::Builder {
        crate::output::create_global_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateEventSubscriptionOutput {
    /// <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
    pub event_subscription: std::option::Option<crate::model::EventSubscription>,
}
impl std::fmt::Debug for CreateEventSubscriptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateEventSubscriptionOutput");
        formatter.field("event_subscription", &self.event_subscription);
        formatter.finish()
    }
}
/// See [`CreateEventSubscriptionOutput`](crate::output::CreateEventSubscriptionOutput)
pub mod create_event_subscription_output {
    /// A builder for [`CreateEventSubscriptionOutput`](crate::output::CreateEventSubscriptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_subscription: std::option::Option<crate::model::EventSubscription>,
    }
    impl Builder {
        /// <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
        pub fn event_subscription(mut self, input: crate::model::EventSubscription) -> Self {
            self.event_subscription = Some(input);
            self
        }
        pub fn set_event_subscription(
            mut self,
            input: std::option::Option<crate::model::EventSubscription>,
        ) -> Self {
            self.event_subscription = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateEventSubscriptionOutput`](crate::output::CreateEventSubscriptionOutput)
        pub fn build(self) -> crate::output::CreateEventSubscriptionOutput {
            crate::output::CreateEventSubscriptionOutput {
                event_subscription: self.event_subscription,
            }
        }
    }
}
impl CreateEventSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`CreateEventSubscriptionOutput`](crate::output::CreateEventSubscriptionOutput)
    pub fn builder() -> crate::output::create_event_subscription_output::Builder {
        crate::output::create_event_subscription_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBSubnetGroupOutput {
    /// <p>Contains the details of an Amazon RDS DB subnet group.
    /// </p>
    /// <p>This data type is used as a response element
    /// in the <code>DescribeDBSubnetGroups</code> action.
    /// </p>
    pub db_subnet_group: std::option::Option<crate::model::DBSubnetGroup>,
}
impl std::fmt::Debug for CreateDBSubnetGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBSubnetGroupOutput");
        formatter.field("db_subnet_group", &self.db_subnet_group);
        formatter.finish()
    }
}
/// See [`CreateDBSubnetGroupOutput`](crate::output::CreateDBSubnetGroupOutput)
pub mod create_db_subnet_group_output {
    /// A builder for [`CreateDBSubnetGroupOutput`](crate::output::CreateDBSubnetGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_subnet_group: std::option::Option<crate::model::DBSubnetGroup>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB subnet group.
        /// </p>
        /// <p>This data type is used as a response element
        /// in the <code>DescribeDBSubnetGroups</code> action.
        /// </p>
        pub fn db_subnet_group(mut self, input: crate::model::DBSubnetGroup) -> Self {
            self.db_subnet_group = Some(input);
            self
        }
        pub fn set_db_subnet_group(
            mut self,
            input: std::option::Option<crate::model::DBSubnetGroup>,
        ) -> Self {
            self.db_subnet_group = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBSubnetGroupOutput`](crate::output::CreateDBSubnetGroupOutput)
        pub fn build(self) -> crate::output::CreateDBSubnetGroupOutput {
            crate::output::CreateDBSubnetGroupOutput {
                db_subnet_group: self.db_subnet_group,
            }
        }
    }
}
impl CreateDBSubnetGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateDBSubnetGroupOutput`](crate::output::CreateDBSubnetGroupOutput)
    pub fn builder() -> crate::output::create_db_subnet_group_output::Builder {
        crate::output::create_db_subnet_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBSnapshotOutput {
    /// <p>Contains the details of an Amazon RDS DB snapshot.
    /// </p>
    /// <p>This data type is used as a response element
    /// in the <code>DescribeDBSnapshots</code> action.
    /// </p>
    pub db_snapshot: std::option::Option<crate::model::DBSnapshot>,
}
impl std::fmt::Debug for CreateDBSnapshotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBSnapshotOutput");
        formatter.field("db_snapshot", &self.db_snapshot);
        formatter.finish()
    }
}
/// See [`CreateDBSnapshotOutput`](crate::output::CreateDBSnapshotOutput)
pub mod create_db_snapshot_output {
    /// A builder for [`CreateDBSnapshotOutput`](crate::output::CreateDBSnapshotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_snapshot: std::option::Option<crate::model::DBSnapshot>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB snapshot.
        /// </p>
        /// <p>This data type is used as a response element
        /// in the <code>DescribeDBSnapshots</code> action.
        /// </p>
        pub fn db_snapshot(mut self, input: crate::model::DBSnapshot) -> Self {
            self.db_snapshot = Some(input);
            self
        }
        pub fn set_db_snapshot(
            mut self,
            input: std::option::Option<crate::model::DBSnapshot>,
        ) -> Self {
            self.db_snapshot = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBSnapshotOutput`](crate::output::CreateDBSnapshotOutput)
        pub fn build(self) -> crate::output::CreateDBSnapshotOutput {
            crate::output::CreateDBSnapshotOutput {
                db_snapshot: self.db_snapshot,
            }
        }
    }
}
impl CreateDBSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`CreateDBSnapshotOutput`](crate::output::CreateDBSnapshotOutput)
    pub fn builder() -> crate::output::create_db_snapshot_output::Builder {
        crate::output::create_db_snapshot_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBSecurityGroupOutput {
    /// <p>Contains the details for an Amazon RDS DB security group.
    /// </p>
    /// <p>This data type is used as a response element
    /// in the <code>DescribeDBSecurityGroups</code> action.
    /// </p>
    pub db_security_group: std::option::Option<crate::model::DBSecurityGroup>,
}
impl std::fmt::Debug for CreateDBSecurityGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBSecurityGroupOutput");
        formatter.field("db_security_group", &self.db_security_group);
        formatter.finish()
    }
}
/// See [`CreateDBSecurityGroupOutput`](crate::output::CreateDBSecurityGroupOutput)
pub mod create_db_security_group_output {
    /// A builder for [`CreateDBSecurityGroupOutput`](crate::output::CreateDBSecurityGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_security_group: std::option::Option<crate::model::DBSecurityGroup>,
    }
    impl Builder {
        /// <p>Contains the details for an Amazon RDS DB security group.
        /// </p>
        /// <p>This data type is used as a response element
        /// in the <code>DescribeDBSecurityGroups</code> action.
        /// </p>
        pub fn db_security_group(mut self, input: crate::model::DBSecurityGroup) -> Self {
            self.db_security_group = Some(input);
            self
        }
        pub fn set_db_security_group(
            mut self,
            input: std::option::Option<crate::model::DBSecurityGroup>,
        ) -> Self {
            self.db_security_group = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBSecurityGroupOutput`](crate::output::CreateDBSecurityGroupOutput)
        pub fn build(self) -> crate::output::CreateDBSecurityGroupOutput {
            crate::output::CreateDBSecurityGroupOutput {
                db_security_group: self.db_security_group,
            }
        }
    }
}
impl CreateDBSecurityGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateDBSecurityGroupOutput`](crate::output::CreateDBSecurityGroupOutput)
    pub fn builder() -> crate::output::create_db_security_group_output::Builder {
        crate::output::create_db_security_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBProxyEndpointOutput {
    /// <p>The <code>DBProxyEndpoint</code> object that is created by the API operation.
    /// The DB proxy endpoint that you create might provide capabilities such as read/write
    /// or read-only operations, or using a different VPC than the proxy's default VPC.</p>
    pub db_proxy_endpoint: std::option::Option<crate::model::DBProxyEndpoint>,
}
impl std::fmt::Debug for CreateDBProxyEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBProxyEndpointOutput");
        formatter.field("db_proxy_endpoint", &self.db_proxy_endpoint);
        formatter.finish()
    }
}
/// See [`CreateDBProxyEndpointOutput`](crate::output::CreateDBProxyEndpointOutput)
pub mod create_db_proxy_endpoint_output {
    /// A builder for [`CreateDBProxyEndpointOutput`](crate::output::CreateDBProxyEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_endpoint: std::option::Option<crate::model::DBProxyEndpoint>,
    }
    impl Builder {
        /// <p>The <code>DBProxyEndpoint</code> object that is created by the API operation.
        /// The DB proxy endpoint that you create might provide capabilities such as read/write
        /// or read-only operations, or using a different VPC than the proxy's default VPC.</p>
        pub fn db_proxy_endpoint(mut self, input: crate::model::DBProxyEndpoint) -> Self {
            self.db_proxy_endpoint = Some(input);
            self
        }
        pub fn set_db_proxy_endpoint(
            mut self,
            input: std::option::Option<crate::model::DBProxyEndpoint>,
        ) -> Self {
            self.db_proxy_endpoint = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBProxyEndpointOutput`](crate::output::CreateDBProxyEndpointOutput)
        pub fn build(self) -> crate::output::CreateDBProxyEndpointOutput {
            crate::output::CreateDBProxyEndpointOutput {
                db_proxy_endpoint: self.db_proxy_endpoint,
            }
        }
    }
}
impl CreateDBProxyEndpointOutput {
    /// Creates a new builder-style object to manufacture [`CreateDBProxyEndpointOutput`](crate::output::CreateDBProxyEndpointOutput)
    pub fn builder() -> crate::output::create_db_proxy_endpoint_output::Builder {
        crate::output::create_db_proxy_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBProxyOutput {
    /// <p>The <code>DBProxy</code> structure corresponding to the new proxy.</p>
    pub db_proxy: std::option::Option<crate::model::DBProxy>,
}
impl std::fmt::Debug for CreateDBProxyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBProxyOutput");
        formatter.field("db_proxy", &self.db_proxy);
        formatter.finish()
    }
}
/// See [`CreateDBProxyOutput`](crate::output::CreateDBProxyOutput)
pub mod create_db_proxy_output {
    /// A builder for [`CreateDBProxyOutput`](crate::output::CreateDBProxyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy: std::option::Option<crate::model::DBProxy>,
    }
    impl Builder {
        /// <p>The <code>DBProxy</code> structure corresponding to the new proxy.</p>
        pub fn db_proxy(mut self, input: crate::model::DBProxy) -> Self {
            self.db_proxy = Some(input);
            self
        }
        pub fn set_db_proxy(mut self, input: std::option::Option<crate::model::DBProxy>) -> Self {
            self.db_proxy = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBProxyOutput`](crate::output::CreateDBProxyOutput)
        pub fn build(self) -> crate::output::CreateDBProxyOutput {
            crate::output::CreateDBProxyOutput {
                db_proxy: self.db_proxy,
            }
        }
    }
}
impl CreateDBProxyOutput {
    /// Creates a new builder-style object to manufacture [`CreateDBProxyOutput`](crate::output::CreateDBProxyOutput)
    pub fn builder() -> crate::output::create_db_proxy_output::Builder {
        crate::output::create_db_proxy_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBParameterGroupOutput {
    /// <p>Contains the details of an Amazon RDS DB parameter group.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBParameterGroups</code> action.
    /// </p>
    pub db_parameter_group: std::option::Option<crate::model::DBParameterGroup>,
}
impl std::fmt::Debug for CreateDBParameterGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBParameterGroupOutput");
        formatter.field("db_parameter_group", &self.db_parameter_group);
        formatter.finish()
    }
}
/// See [`CreateDBParameterGroupOutput`](crate::output::CreateDBParameterGroupOutput)
pub mod create_db_parameter_group_output {
    /// A builder for [`CreateDBParameterGroupOutput`](crate::output::CreateDBParameterGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_parameter_group: std::option::Option<crate::model::DBParameterGroup>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB parameter group.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBParameterGroups</code> action.
        /// </p>
        pub fn db_parameter_group(mut self, input: crate::model::DBParameterGroup) -> Self {
            self.db_parameter_group = Some(input);
            self
        }
        pub fn set_db_parameter_group(
            mut self,
            input: std::option::Option<crate::model::DBParameterGroup>,
        ) -> Self {
            self.db_parameter_group = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBParameterGroupOutput`](crate::output::CreateDBParameterGroupOutput)
        pub fn build(self) -> crate::output::CreateDBParameterGroupOutput {
            crate::output::CreateDBParameterGroupOutput {
                db_parameter_group: self.db_parameter_group,
            }
        }
    }
}
impl CreateDBParameterGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateDBParameterGroupOutput`](crate::output::CreateDBParameterGroupOutput)
    pub fn builder() -> crate::output::create_db_parameter_group_output::Builder {
        crate::output::create_db_parameter_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBInstanceReadReplicaOutput {
    /// <p>Contains the details of an Amazon RDS DB instance.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
    /// </p>
    pub db_instance: std::option::Option<crate::model::DBInstance>,
}
impl std::fmt::Debug for CreateDBInstanceReadReplicaOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBInstanceReadReplicaOutput");
        formatter.field("db_instance", &self.db_instance);
        formatter.finish()
    }
}
/// See [`CreateDBInstanceReadReplicaOutput`](crate::output::CreateDBInstanceReadReplicaOutput)
pub mod create_db_instance_read_replica_output {
    /// A builder for [`CreateDBInstanceReadReplicaOutput`](crate::output::CreateDBInstanceReadReplicaOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance: std::option::Option<crate::model::DBInstance>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB instance.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
        /// </p>
        pub fn db_instance(mut self, input: crate::model::DBInstance) -> Self {
            self.db_instance = Some(input);
            self
        }
        pub fn set_db_instance(
            mut self,
            input: std::option::Option<crate::model::DBInstance>,
        ) -> Self {
            self.db_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBInstanceReadReplicaOutput`](crate::output::CreateDBInstanceReadReplicaOutput)
        pub fn build(self) -> crate::output::CreateDBInstanceReadReplicaOutput {
            crate::output::CreateDBInstanceReadReplicaOutput {
                db_instance: self.db_instance,
            }
        }
    }
}
impl CreateDBInstanceReadReplicaOutput {
    /// Creates a new builder-style object to manufacture [`CreateDBInstanceReadReplicaOutput`](crate::output::CreateDBInstanceReadReplicaOutput)
    pub fn builder() -> crate::output::create_db_instance_read_replica_output::Builder {
        crate::output::create_db_instance_read_replica_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBInstanceOutput {
    /// <p>Contains the details of an Amazon RDS DB instance.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
    /// </p>
    pub db_instance: std::option::Option<crate::model::DBInstance>,
}
impl std::fmt::Debug for CreateDBInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBInstanceOutput");
        formatter.field("db_instance", &self.db_instance);
        formatter.finish()
    }
}
/// See [`CreateDBInstanceOutput`](crate::output::CreateDBInstanceOutput)
pub mod create_db_instance_output {
    /// A builder for [`CreateDBInstanceOutput`](crate::output::CreateDBInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance: std::option::Option<crate::model::DBInstance>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB instance.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBInstances</code> action.
        /// </p>
        pub fn db_instance(mut self, input: crate::model::DBInstance) -> Self {
            self.db_instance = Some(input);
            self
        }
        pub fn set_db_instance(
            mut self,
            input: std::option::Option<crate::model::DBInstance>,
        ) -> Self {
            self.db_instance = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBInstanceOutput`](crate::output::CreateDBInstanceOutput)
        pub fn build(self) -> crate::output::CreateDBInstanceOutput {
            crate::output::CreateDBInstanceOutput {
                db_instance: self.db_instance,
            }
        }
    }
}
impl CreateDBInstanceOutput {
    /// Creates a new builder-style object to manufacture [`CreateDBInstanceOutput`](crate::output::CreateDBInstanceOutput)
    pub fn builder() -> crate::output::create_db_instance_output::Builder {
        crate::output::create_db_instance_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBClusterSnapshotOutput {
    /// <p>Contains the details for an Amazon RDS DB cluster snapshot
    /// </p>
    /// <p>This data type is used as a response element
    /// in the <code>DescribeDBClusterSnapshots</code> action.
    /// </p>
    pub db_cluster_snapshot: std::option::Option<crate::model::DBClusterSnapshot>,
}
impl std::fmt::Debug for CreateDBClusterSnapshotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBClusterSnapshotOutput");
        formatter.field("db_cluster_snapshot", &self.db_cluster_snapshot);
        formatter.finish()
    }
}
/// See [`CreateDBClusterSnapshotOutput`](crate::output::CreateDBClusterSnapshotOutput)
pub mod create_db_cluster_snapshot_output {
    /// A builder for [`CreateDBClusterSnapshotOutput`](crate::output::CreateDBClusterSnapshotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_snapshot: std::option::Option<crate::model::DBClusterSnapshot>,
    }
    impl Builder {
        /// <p>Contains the details for an Amazon RDS DB cluster snapshot
        /// </p>
        /// <p>This data type is used as a response element
        /// in the <code>DescribeDBClusterSnapshots</code> action.
        /// </p>
        pub fn db_cluster_snapshot(mut self, input: crate::model::DBClusterSnapshot) -> Self {
            self.db_cluster_snapshot = Some(input);
            self
        }
        pub fn set_db_cluster_snapshot(
            mut self,
            input: std::option::Option<crate::model::DBClusterSnapshot>,
        ) -> Self {
            self.db_cluster_snapshot = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBClusterSnapshotOutput`](crate::output::CreateDBClusterSnapshotOutput)
        pub fn build(self) -> crate::output::CreateDBClusterSnapshotOutput {
            crate::output::CreateDBClusterSnapshotOutput {
                db_cluster_snapshot: self.db_cluster_snapshot,
            }
        }
    }
}
impl CreateDBClusterSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`CreateDBClusterSnapshotOutput`](crate::output::CreateDBClusterSnapshotOutput)
    pub fn builder() -> crate::output::create_db_cluster_snapshot_output::Builder {
        crate::output::create_db_cluster_snapshot_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBClusterParameterGroupOutput {
    /// <p>Contains the details of an Amazon RDS DB cluster parameter group.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBClusterParameterGroups</code> action.
    /// </p>
    pub db_cluster_parameter_group: std::option::Option<crate::model::DBClusterParameterGroup>,
}
impl std::fmt::Debug for CreateDBClusterParameterGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBClusterParameterGroupOutput");
        formatter.field(
            "db_cluster_parameter_group",
            &self.db_cluster_parameter_group,
        );
        formatter.finish()
    }
}
/// See [`CreateDBClusterParameterGroupOutput`](crate::output::CreateDBClusterParameterGroupOutput)
pub mod create_db_cluster_parameter_group_output {
    /// A builder for [`CreateDBClusterParameterGroupOutput`](crate::output::CreateDBClusterParameterGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_parameter_group:
            std::option::Option<crate::model::DBClusterParameterGroup>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB cluster parameter group.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBClusterParameterGroups</code> action.
        /// </p>
        pub fn db_cluster_parameter_group(
            mut self,
            input: crate::model::DBClusterParameterGroup,
        ) -> Self {
            self.db_cluster_parameter_group = Some(input);
            self
        }
        pub fn set_db_cluster_parameter_group(
            mut self,
            input: std::option::Option<crate::model::DBClusterParameterGroup>,
        ) -> Self {
            self.db_cluster_parameter_group = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBClusterParameterGroupOutput`](crate::output::CreateDBClusterParameterGroupOutput)
        pub fn build(self) -> crate::output::CreateDBClusterParameterGroupOutput {
            crate::output::CreateDBClusterParameterGroupOutput {
                db_cluster_parameter_group: self.db_cluster_parameter_group,
            }
        }
    }
}
impl CreateDBClusterParameterGroupOutput {
    /// Creates a new builder-style object to manufacture [`CreateDBClusterParameterGroupOutput`](crate::output::CreateDBClusterParameterGroupOutput)
    pub fn builder() -> crate::output::create_db_cluster_parameter_group_output::Builder {
        crate::output::create_db_cluster_parameter_group_output::Builder::default()
    }
}

/// <p>This data type represents the information you need to connect to an Amazon Aurora DB cluster.
/// This data type is used as a response element in the following actions:</p>
/// <ul>
/// <li>
/// <p>
/// <code>CreateDBClusterEndpoint</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>DescribeDBClusterEndpoints</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>ModifyDBClusterEndpoint</code>
/// </p>
/// </li>
/// <li>
/// <p>
/// <code>DeleteDBClusterEndpoint</code>
/// </p>
/// </li>
/// </ul>
/// <p>For the data structure that represents Amazon RDS DB instance endpoints,
/// see <code>Endpoint</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBClusterEndpointOutput {
    /// <p>The identifier associated with the endpoint. This parameter is stored as a lowercase string.</p>
    pub db_cluster_endpoint_identifier: std::option::Option<std::string::String>,
    /// <p>The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is
    /// stored as a lowercase string.</p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.</p>
    pub db_cluster_endpoint_resource_identifier: std::option::Option<std::string::String>,
    /// <p>The DNS address of the endpoint.</p>
    pub endpoint: std::option::Option<std::string::String>,
    /// <p>The current status of the endpoint. One of: <code>creating</code>, <code>available</code>, <code>deleting</code>, <code>inactive</code>, <code>modifying</code>. The <code>inactive</code> state applies to an endpoint that can't be used for a certain kind of cluster,
    /// such as a <code>writer</code> endpoint for a read-only secondary cluster in a global database.</p>
    pub status: std::option::Option<std::string::String>,
    /// <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>CUSTOM</code>.</p>
    pub endpoint_type: std::option::Option<std::string::String>,
    /// <p>The type associated with a custom endpoint. One of: <code>READER</code>,
    /// <code>WRITER</code>, <code>ANY</code>.</p>
    pub custom_endpoint_type: std::option::Option<std::string::String>,
    /// <p>List of DB instance identifiers that are part of the custom endpoint group.</p>
    pub static_members: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>List of DB instance identifiers that aren't part of the custom endpoint group.
    /// All other eligible instances are reachable through the custom endpoint.
    /// Only relevant if the list of static members is empty.</p>
    pub excluded_members: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The Amazon Resource Name (ARN) for the endpoint.</p>
    pub db_cluster_endpoint_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateDBClusterEndpointOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBClusterEndpointOutput");
        formatter.field(
            "db_cluster_endpoint_identifier",
            &self.db_cluster_endpoint_identifier,
        );
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field(
            "db_cluster_endpoint_resource_identifier",
            &self.db_cluster_endpoint_resource_identifier,
        );
        formatter.field("endpoint", &self.endpoint);
        formatter.field("status", &self.status);
        formatter.field("endpoint_type", &self.endpoint_type);
        formatter.field("custom_endpoint_type", &self.custom_endpoint_type);
        formatter.field("static_members", &self.static_members);
        formatter.field("excluded_members", &self.excluded_members);
        formatter.field("db_cluster_endpoint_arn", &self.db_cluster_endpoint_arn);
        formatter.finish()
    }
}
/// See [`CreateDBClusterEndpointOutput`](crate::output::CreateDBClusterEndpointOutput)
pub mod create_db_cluster_endpoint_output {
    /// A builder for [`CreateDBClusterEndpointOutput`](crate::output::CreateDBClusterEndpointOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_endpoint_identifier: std::option::Option<std::string::String>,
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) db_cluster_endpoint_resource_identifier:
            std::option::Option<std::string::String>,
        pub(crate) endpoint: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) endpoint_type: std::option::Option<std::string::String>,
        pub(crate) custom_endpoint_type: std::option::Option<std::string::String>,
        pub(crate) static_members: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) excluded_members: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) db_cluster_endpoint_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier associated with the endpoint. This parameter is stored as a lowercase string.</p>
        pub fn db_cluster_endpoint_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_endpoint_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_identifier = input;
            self
        }
        /// <p>The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is
        /// stored as a lowercase string.</p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.</p>
        pub fn db_cluster_endpoint_resource_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_resource_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_endpoint_resource_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_resource_identifier = input;
            self
        }
        /// <p>The DNS address of the endpoint.</p>
        pub fn endpoint(mut self, input: impl Into<std::string::String>) -> Self {
            self.endpoint = Some(input.into());
            self
        }
        pub fn set_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.endpoint = input;
            self
        }
        /// <p>The current status of the endpoint. One of: <code>creating</code>, <code>available</code>, <code>deleting</code>, <code>inactive</code>, <code>modifying</code>. The <code>inactive</code> state applies to an endpoint that can't be used for a certain kind of cluster,
        /// such as a <code>writer</code> endpoint for a read-only secondary cluster in a global database.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>CUSTOM</code>.</p>
        pub fn endpoint_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.endpoint_type = Some(input.into());
            self
        }
        pub fn set_endpoint_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.endpoint_type = input;
            self
        }
        /// <p>The type associated with a custom endpoint. One of: <code>READER</code>,
        /// <code>WRITER</code>, <code>ANY</code>.</p>
        pub fn custom_endpoint_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.custom_endpoint_type = Some(input.into());
            self
        }
        pub fn set_custom_endpoint_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.custom_endpoint_type = input;
            self
        }
        pub fn static_members(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.static_members.unwrap_or_default();
            v.push(input.into());
            self.static_members = Some(v);
            self
        }
        pub fn set_static_members(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.static_members = input;
            self
        }
        pub fn excluded_members(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.excluded_members.unwrap_or_default();
            v.push(input.into());
            self.excluded_members = Some(v);
            self
        }
        pub fn set_excluded_members(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.excluded_members = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) for the endpoint.</p>
        pub fn db_cluster_endpoint_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_endpoint_arn = Some(input.into());
            self
        }
        pub fn set_db_cluster_endpoint_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBClusterEndpointOutput`](crate::output::CreateDBClusterEndpointOutput)
        pub fn build(self) -> crate::output::CreateDBClusterEndpointOutput {
            crate::output::CreateDBClusterEndpointOutput {
                db_cluster_endpoint_identifier: self.db_cluster_endpoint_identifier,
                db_cluster_identifier: self.db_cluster_identifier,
                db_cluster_endpoint_resource_identifier: self
                    .db_cluster_endpoint_resource_identifier,
                endpoint: self.endpoint,
                status: self.status,
                endpoint_type: self.endpoint_type,
                custom_endpoint_type: self.custom_endpoint_type,
                static_members: self.static_members,
                excluded_members: self.excluded_members,
                db_cluster_endpoint_arn: self.db_cluster_endpoint_arn,
            }
        }
    }
}
impl CreateDBClusterEndpointOutput {
    /// Creates a new builder-style object to manufacture [`CreateDBClusterEndpointOutput`](crate::output::CreateDBClusterEndpointOutput)
    pub fn builder() -> crate::output::create_db_cluster_endpoint_output::Builder {
        crate::output::create_db_cluster_endpoint_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBClusterOutput {
    /// <p>Contains the details of an Amazon Aurora DB cluster.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
    /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
    /// </p>
    pub db_cluster: std::option::Option<crate::model::DBCluster>,
}
impl std::fmt::Debug for CreateDBClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBClusterOutput");
        formatter.field("db_cluster", &self.db_cluster);
        formatter.finish()
    }
}
/// See [`CreateDBClusterOutput`](crate::output::CreateDBClusterOutput)
pub mod create_db_cluster_output {
    /// A builder for [`CreateDBClusterOutput`](crate::output::CreateDBClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster: std::option::Option<crate::model::DBCluster>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon Aurora DB cluster.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBClusters</code>,
        /// <code>StopDBCluster</code>, and <code>StartDBCluster</code> actions.
        /// </p>
        pub fn db_cluster(mut self, input: crate::model::DBCluster) -> Self {
            self.db_cluster = Some(input);
            self
        }
        pub fn set_db_cluster(
            mut self,
            input: std::option::Option<crate::model::DBCluster>,
        ) -> Self {
            self.db_cluster = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBClusterOutput`](crate::output::CreateDBClusterOutput)
        pub fn build(self) -> crate::output::CreateDBClusterOutput {
            crate::output::CreateDBClusterOutput {
                db_cluster: self.db_cluster,
            }
        }
    }
}
impl CreateDBClusterOutput {
    /// Creates a new builder-style object to manufacture [`CreateDBClusterOutput`](crate::output::CreateDBClusterOutput)
    pub fn builder() -> crate::output::create_db_cluster_output::Builder {
        crate::output::create_db_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateCustomAvailabilityZoneOutput {
    /// <p>A custom Availability Zone (AZ) is an on-premises AZ that is integrated with a VMware vSphere cluster.</p>
    /// <p>For more information about RDS on VMware, see the
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html">
    /// RDS on VMware User Guide.</a>
    /// </p>
    pub custom_availability_zone: std::option::Option<crate::model::CustomAvailabilityZone>,
}
impl std::fmt::Debug for CreateCustomAvailabilityZoneOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCustomAvailabilityZoneOutput");
        formatter.field("custom_availability_zone", &self.custom_availability_zone);
        formatter.finish()
    }
}
/// See [`CreateCustomAvailabilityZoneOutput`](crate::output::CreateCustomAvailabilityZoneOutput)
pub mod create_custom_availability_zone_output {
    /// A builder for [`CreateCustomAvailabilityZoneOutput`](crate::output::CreateCustomAvailabilityZoneOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) custom_availability_zone:
            std::option::Option<crate::model::CustomAvailabilityZone>,
    }
    impl Builder {
        /// <p>A custom Availability Zone (AZ) is an on-premises AZ that is integrated with a VMware vSphere cluster.</p>
        /// <p>For more information about RDS on VMware, see the
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html">
        /// RDS on VMware User Guide.</a>
        /// </p>
        pub fn custom_availability_zone(
            mut self,
            input: crate::model::CustomAvailabilityZone,
        ) -> Self {
            self.custom_availability_zone = Some(input);
            self
        }
        pub fn set_custom_availability_zone(
            mut self,
            input: std::option::Option<crate::model::CustomAvailabilityZone>,
        ) -> Self {
            self.custom_availability_zone = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateCustomAvailabilityZoneOutput`](crate::output::CreateCustomAvailabilityZoneOutput)
        pub fn build(self) -> crate::output::CreateCustomAvailabilityZoneOutput {
            crate::output::CreateCustomAvailabilityZoneOutput {
                custom_availability_zone: self.custom_availability_zone,
            }
        }
    }
}
impl CreateCustomAvailabilityZoneOutput {
    /// Creates a new builder-style object to manufacture [`CreateCustomAvailabilityZoneOutput`](crate::output::CreateCustomAvailabilityZoneOutput)
    pub fn builder() -> crate::output::create_custom_availability_zone_output::Builder {
        crate::output::create_custom_availability_zone_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CopyOptionGroupOutput {
    /// <p></p>
    pub option_group: std::option::Option<crate::model::OptionGroup>,
}
impl std::fmt::Debug for CopyOptionGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CopyOptionGroupOutput");
        formatter.field("option_group", &self.option_group);
        formatter.finish()
    }
}
/// See [`CopyOptionGroupOutput`](crate::output::CopyOptionGroupOutput)
pub mod copy_option_group_output {
    /// A builder for [`CopyOptionGroupOutput`](crate::output::CopyOptionGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) option_group: std::option::Option<crate::model::OptionGroup>,
    }
    impl Builder {
        /// <p></p>
        pub fn option_group(mut self, input: crate::model::OptionGroup) -> Self {
            self.option_group = Some(input);
            self
        }
        pub fn set_option_group(
            mut self,
            input: std::option::Option<crate::model::OptionGroup>,
        ) -> Self {
            self.option_group = input;
            self
        }
        /// Consumes the builder and constructs a [`CopyOptionGroupOutput`](crate::output::CopyOptionGroupOutput)
        pub fn build(self) -> crate::output::CopyOptionGroupOutput {
            crate::output::CopyOptionGroupOutput {
                option_group: self.option_group,
            }
        }
    }
}
impl CopyOptionGroupOutput {
    /// Creates a new builder-style object to manufacture [`CopyOptionGroupOutput`](crate::output::CopyOptionGroupOutput)
    pub fn builder() -> crate::output::copy_option_group_output::Builder {
        crate::output::copy_option_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CopyDBSnapshotOutput {
    /// <p>Contains the details of an Amazon RDS DB snapshot.
    /// </p>
    /// <p>This data type is used as a response element
    /// in the <code>DescribeDBSnapshots</code> action.
    /// </p>
    pub db_snapshot: std::option::Option<crate::model::DBSnapshot>,
}
impl std::fmt::Debug for CopyDBSnapshotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CopyDBSnapshotOutput");
        formatter.field("db_snapshot", &self.db_snapshot);
        formatter.finish()
    }
}
/// See [`CopyDBSnapshotOutput`](crate::output::CopyDBSnapshotOutput)
pub mod copy_db_snapshot_output {
    /// A builder for [`CopyDBSnapshotOutput`](crate::output::CopyDBSnapshotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_snapshot: std::option::Option<crate::model::DBSnapshot>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB snapshot.
        /// </p>
        /// <p>This data type is used as a response element
        /// in the <code>DescribeDBSnapshots</code> action.
        /// </p>
        pub fn db_snapshot(mut self, input: crate::model::DBSnapshot) -> Self {
            self.db_snapshot = Some(input);
            self
        }
        pub fn set_db_snapshot(
            mut self,
            input: std::option::Option<crate::model::DBSnapshot>,
        ) -> Self {
            self.db_snapshot = input;
            self
        }
        /// Consumes the builder and constructs a [`CopyDBSnapshotOutput`](crate::output::CopyDBSnapshotOutput)
        pub fn build(self) -> crate::output::CopyDBSnapshotOutput {
            crate::output::CopyDBSnapshotOutput {
                db_snapshot: self.db_snapshot,
            }
        }
    }
}
impl CopyDBSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`CopyDBSnapshotOutput`](crate::output::CopyDBSnapshotOutput)
    pub fn builder() -> crate::output::copy_db_snapshot_output::Builder {
        crate::output::copy_db_snapshot_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CopyDBParameterGroupOutput {
    /// <p>Contains the details of an Amazon RDS DB parameter group.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBParameterGroups</code> action.
    /// </p>
    pub db_parameter_group: std::option::Option<crate::model::DBParameterGroup>,
}
impl std::fmt::Debug for CopyDBParameterGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CopyDBParameterGroupOutput");
        formatter.field("db_parameter_group", &self.db_parameter_group);
        formatter.finish()
    }
}
/// See [`CopyDBParameterGroupOutput`](crate::output::CopyDBParameterGroupOutput)
pub mod copy_db_parameter_group_output {
    /// A builder for [`CopyDBParameterGroupOutput`](crate::output::CopyDBParameterGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_parameter_group: std::option::Option<crate::model::DBParameterGroup>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB parameter group.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBParameterGroups</code> action.
        /// </p>
        pub fn db_parameter_group(mut self, input: crate::model::DBParameterGroup) -> Self {
            self.db_parameter_group = Some(input);
            self
        }
        pub fn set_db_parameter_group(
            mut self,
            input: std::option::Option<crate::model::DBParameterGroup>,
        ) -> Self {
            self.db_parameter_group = input;
            self
        }
        /// Consumes the builder and constructs a [`CopyDBParameterGroupOutput`](crate::output::CopyDBParameterGroupOutput)
        pub fn build(self) -> crate::output::CopyDBParameterGroupOutput {
            crate::output::CopyDBParameterGroupOutput {
                db_parameter_group: self.db_parameter_group,
            }
        }
    }
}
impl CopyDBParameterGroupOutput {
    /// Creates a new builder-style object to manufacture [`CopyDBParameterGroupOutput`](crate::output::CopyDBParameterGroupOutput)
    pub fn builder() -> crate::output::copy_db_parameter_group_output::Builder {
        crate::output::copy_db_parameter_group_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CopyDBClusterSnapshotOutput {
    /// <p>Contains the details for an Amazon RDS DB cluster snapshot
    /// </p>
    /// <p>This data type is used as a response element
    /// in the <code>DescribeDBClusterSnapshots</code> action.
    /// </p>
    pub db_cluster_snapshot: std::option::Option<crate::model::DBClusterSnapshot>,
}
impl std::fmt::Debug for CopyDBClusterSnapshotOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CopyDBClusterSnapshotOutput");
        formatter.field("db_cluster_snapshot", &self.db_cluster_snapshot);
        formatter.finish()
    }
}
/// See [`CopyDBClusterSnapshotOutput`](crate::output::CopyDBClusterSnapshotOutput)
pub mod copy_db_cluster_snapshot_output {
    /// A builder for [`CopyDBClusterSnapshotOutput`](crate::output::CopyDBClusterSnapshotOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_snapshot: std::option::Option<crate::model::DBClusterSnapshot>,
    }
    impl Builder {
        /// <p>Contains the details for an Amazon RDS DB cluster snapshot
        /// </p>
        /// <p>This data type is used as a response element
        /// in the <code>DescribeDBClusterSnapshots</code> action.
        /// </p>
        pub fn db_cluster_snapshot(mut self, input: crate::model::DBClusterSnapshot) -> Self {
            self.db_cluster_snapshot = Some(input);
            self
        }
        pub fn set_db_cluster_snapshot(
            mut self,
            input: std::option::Option<crate::model::DBClusterSnapshot>,
        ) -> Self {
            self.db_cluster_snapshot = input;
            self
        }
        /// Consumes the builder and constructs a [`CopyDBClusterSnapshotOutput`](crate::output::CopyDBClusterSnapshotOutput)
        pub fn build(self) -> crate::output::CopyDBClusterSnapshotOutput {
            crate::output::CopyDBClusterSnapshotOutput {
                db_cluster_snapshot: self.db_cluster_snapshot,
            }
        }
    }
}
impl CopyDBClusterSnapshotOutput {
    /// Creates a new builder-style object to manufacture [`CopyDBClusterSnapshotOutput`](crate::output::CopyDBClusterSnapshotOutput)
    pub fn builder() -> crate::output::copy_db_cluster_snapshot_output::Builder {
        crate::output::copy_db_cluster_snapshot_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CopyDBClusterParameterGroupOutput {
    /// <p>Contains the details of an Amazon RDS DB cluster parameter group.
    /// </p>
    /// <p>This data type is used as a response element in the <code>DescribeDBClusterParameterGroups</code> action.
    /// </p>
    pub db_cluster_parameter_group: std::option::Option<crate::model::DBClusterParameterGroup>,
}
impl std::fmt::Debug for CopyDBClusterParameterGroupOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CopyDBClusterParameterGroupOutput");
        formatter.field(
            "db_cluster_parameter_group",
            &self.db_cluster_parameter_group,
        );
        formatter.finish()
    }
}
/// See [`CopyDBClusterParameterGroupOutput`](crate::output::CopyDBClusterParameterGroupOutput)
pub mod copy_db_cluster_parameter_group_output {
    /// A builder for [`CopyDBClusterParameterGroupOutput`](crate::output::CopyDBClusterParameterGroupOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_parameter_group:
            std::option::Option<crate::model::DBClusterParameterGroup>,
    }
    impl Builder {
        /// <p>Contains the details of an Amazon RDS DB cluster parameter group.
        /// </p>
        /// <p>This data type is used as a response element in the <code>DescribeDBClusterParameterGroups</code> action.
        /// </p>
        pub fn db_cluster_parameter_group(
            mut self,
            input: crate::model::DBClusterParameterGroup,
        ) -> Self {
            self.db_cluster_parameter_group = Some(input);
            self
        }
        pub fn set_db_cluster_parameter_group(
            mut self,
            input: std::option::Option<crate::model::DBClusterParameterGroup>,
        ) -> Self {
            self.db_cluster_parameter_group = input;
            self
        }
        /// Consumes the builder and constructs a [`CopyDBClusterParameterGroupOutput`](crate::output::CopyDBClusterParameterGroupOutput)
        pub fn build(self) -> crate::output::CopyDBClusterParameterGroupOutput {
            crate::output::CopyDBClusterParameterGroupOutput {
                db_cluster_parameter_group: self.db_cluster_parameter_group,
            }
        }
    }
}
impl CopyDBClusterParameterGroupOutput {
    /// Creates a new builder-style object to manufacture [`CopyDBClusterParameterGroupOutput`](crate::output::CopyDBClusterParameterGroupOutput)
    pub fn builder() -> crate::output::copy_db_cluster_parameter_group_output::Builder {
        crate::output::copy_db_cluster_parameter_group_output::Builder::default()
    }
}

/// <p>Contains the details of a snapshot export to Amazon S3.
/// </p>
/// <p>This data type is used as a response element in the <code>DescribeExportTasks</code> action.
/// </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelExportTaskOutput {
    /// <p>A unique identifier for the snapshot export task. This ID isn't an identifier for
    /// the Amazon S3 bucket where the snapshot is exported to. </p>
    pub export_task_identifier: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.</p>
    pub source_arn: std::option::Option<std::string::String>,
    /// <p>The data exported from the snapshot. Valid values are the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>database</code> - Export all the data from a specified database.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>database.table</code>
    /// <i>table-name</i> -
    /// Export a table of the snapshot. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>database.schema</code>
    /// <i>schema-name</i> - Export a database schema of the snapshot.
    /// This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>database.schema.table</code>
    /// <i>table-name</i> - Export a table of the database schema.
    /// This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p>
    /// </li>
    /// </ul>
    pub export_only: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The time that the snapshot was created.</p>
    pub snapshot_time: std::option::Option<smithy_types::Instant>,
    /// <p>The time that the snapshot export task started.</p>
    pub task_start_time: std::option::Option<smithy_types::Instant>,
    /// <p>The time that the snapshot export task completed.</p>
    pub task_end_time: std::option::Option<smithy_types::Instant>,
    /// <p>The Amazon S3 bucket that the snapshot is exported to.</p>
    pub s3_bucket: std::option::Option<std::string::String>,
    /// <p>The Amazon S3 bucket prefix that is the file name and path of the exported snapshot.</p>
    pub s3_prefix: std::option::Option<std::string::String>,
    /// <p>The name of the IAM role that is used to write to Amazon S3 when exporting a snapshot. </p>
    pub iam_role_arn: std::option::Option<std::string::String>,
    /// <p>The key identifier of the AWS KMS customer master key (CMK) that is used to encrypt the snapshot when it's exported to
    /// Amazon S3. The AWS KMS CMK identifier is its key ARN, key ID, alias ARN, or alias name. The IAM role used for the snapshot export
    /// must have encryption and decryption permissions to use this AWS KMS CMK. </p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The progress status of the export task.</p>
    pub status: std::option::Option<std::string::String>,
    /// <p>The progress of the snapshot export task as a percentage.</p>
    pub percent_progress: i32,
    /// <p>The total amount of data exported, in gigabytes.</p>
    pub total_extracted_data_in_gb: i32,
    /// <p>The reason the export failed, if it failed.</p>
    pub failure_cause: std::option::Option<std::string::String>,
    /// <p>A warning about the snapshot export task.</p>
    pub warning_message: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CancelExportTaskOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelExportTaskOutput");
        formatter.field("export_task_identifier", &self.export_task_identifier);
        formatter.field("source_arn", &self.source_arn);
        formatter.field("export_only", &self.export_only);
        formatter.field("snapshot_time", &self.snapshot_time);
        formatter.field("task_start_time", &self.task_start_time);
        formatter.field("task_end_time", &self.task_end_time);
        formatter.field("s3_bucket", &self.s3_bucket);
        formatter.field("s3_prefix", &self.s3_prefix);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("status", &self.status);
        formatter.field("percent_progress", &self.percent_progress);
        formatter.field(
            "total_extracted_data_in_gb",
            &self.total_extracted_data_in_gb,
        );
        formatter.field("failure_cause", &self.failure_cause);
        formatter.field("warning_message", &self.warning_message);
        formatter.finish()
    }
}
/// See [`CancelExportTaskOutput`](crate::output::CancelExportTaskOutput)
pub mod cancel_export_task_output {
    /// A builder for [`CancelExportTaskOutput`](crate::output::CancelExportTaskOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) export_task_identifier: std::option::Option<std::string::String>,
        pub(crate) source_arn: std::option::Option<std::string::String>,
        pub(crate) export_only: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) snapshot_time: std::option::Option<smithy_types::Instant>,
        pub(crate) task_start_time: std::option::Option<smithy_types::Instant>,
        pub(crate) task_end_time: std::option::Option<smithy_types::Instant>,
        pub(crate) s3_bucket: std::option::Option<std::string::String>,
        pub(crate) s3_prefix: std::option::Option<std::string::String>,
        pub(crate) iam_role_arn: std::option::Option<std::string::String>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) percent_progress: std::option::Option<i32>,
        pub(crate) total_extracted_data_in_gb: std::option::Option<i32>,
        pub(crate) failure_cause: std::option::Option<std::string::String>,
        pub(crate) warning_message: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A unique identifier for the snapshot export task. This ID isn't an identifier for
        /// the Amazon S3 bucket where the snapshot is exported to. </p>
        pub fn export_task_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.export_task_identifier = Some(input.into());
            self
        }
        pub fn set_export_task_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.export_task_identifier = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.</p>
        pub fn source_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_arn = Some(input.into());
            self
        }
        pub fn set_source_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.source_arn = input;
            self
        }
        pub fn export_only(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.export_only.unwrap_or_default();
            v.push(input.into());
            self.export_only = Some(v);
            self
        }
        pub fn set_export_only(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.export_only = input;
            self
        }
        /// <p>The time that the snapshot was created.</p>
        pub fn snapshot_time(mut self, input: smithy_types::Instant) -> Self {
            self.snapshot_time = Some(input);
            self
        }
        pub fn set_snapshot_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.snapshot_time = input;
            self
        }
        /// <p>The time that the snapshot export task started.</p>
        pub fn task_start_time(mut self, input: smithy_types::Instant) -> Self {
            self.task_start_time = Some(input);
            self
        }
        pub fn set_task_start_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.task_start_time = input;
            self
        }
        /// <p>The time that the snapshot export task completed.</p>
        pub fn task_end_time(mut self, input: smithy_types::Instant) -> Self {
            self.task_end_time = Some(input);
            self
        }
        pub fn set_task_end_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.task_end_time = input;
            self
        }
        /// <p>The Amazon S3 bucket that the snapshot is exported to.</p>
        pub fn s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_bucket = Some(input.into());
            self
        }
        pub fn set_s3_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.s3_bucket = input;
            self
        }
        /// <p>The Amazon S3 bucket prefix that is the file name and path of the exported snapshot.</p>
        pub fn s3_prefix(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_prefix = Some(input.into());
            self
        }
        pub fn set_s3_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.s3_prefix = input;
            self
        }
        /// <p>The name of the IAM role that is used to write to Amazon S3 when exporting a snapshot. </p>
        pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.iam_role_arn = Some(input.into());
            self
        }
        pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.iam_role_arn = input;
            self
        }
        /// <p>The key identifier of the AWS KMS customer master key (CMK) that is used to encrypt the snapshot when it's exported to
        /// Amazon S3. The AWS KMS CMK identifier is its key ARN, key ID, alias ARN, or alias name. The IAM role used for the snapshot export
        /// must have encryption and decryption permissions to use this AWS KMS CMK. </p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>The progress status of the export task.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// <p>The progress of the snapshot export task as a percentage.</p>
        pub fn percent_progress(mut self, input: i32) -> Self {
            self.percent_progress = Some(input);
            self
        }
        pub fn set_percent_progress(mut self, input: std::option::Option<i32>) -> Self {
            self.percent_progress = input;
            self
        }
        /// <p>The total amount of data exported, in gigabytes.</p>
        pub fn total_extracted_data_in_gb(mut self, input: i32) -> Self {
            self.total_extracted_data_in_gb = Some(input);
            self
        }
        pub fn set_total_extracted_data_in_gb(mut self, input: std::option::Option<i32>) -> Self {
            self.total_extracted_data_in_gb = input;
            self
        }
        /// <p>The reason the export failed, if it failed.</p>
        pub fn failure_cause(mut self, input: impl Into<std::string::String>) -> Self {
            self.failure_cause = Some(input.into());
            self
        }
        pub fn set_failure_cause(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.failure_cause = input;
            self
        }
        /// <p>A warning about the snapshot export task.</p>
        pub fn warning_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.warning_message = Some(input.into());
            self
        }
        pub fn set_warning_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.warning_message = input;
            self
        }
        /// Consumes the builder and constructs a [`CancelExportTaskOutput`](crate::output::CancelExportTaskOutput)
        pub fn build(self) -> crate::output::CancelExportTaskOutput {
            crate::output::CancelExportTaskOutput {
                export_task_identifier: self.export_task_identifier,
                source_arn: self.source_arn,
                export_only: self.export_only,
                snapshot_time: self.snapshot_time,
                task_start_time: self.task_start_time,
                task_end_time: self.task_end_time,
                s3_bucket: self.s3_bucket,
                s3_prefix: self.s3_prefix,
                iam_role_arn: self.iam_role_arn,
                kms_key_id: self.kms_key_id,
                status: self.status,
                percent_progress: self.percent_progress.unwrap_or_default(),
                total_extracted_data_in_gb: self.total_extracted_data_in_gb.unwrap_or_default(),
                failure_cause: self.failure_cause,
                warning_message: self.warning_message,
            }
        }
    }
}
impl CancelExportTaskOutput {
    /// Creates a new builder-style object to manufacture [`CancelExportTaskOutput`](crate::output::CancelExportTaskOutput)
    pub fn builder() -> crate::output::cancel_export_task_output::Builder {
        crate::output::cancel_export_task_output::Builder::default()
    }
}

/// <p>This data type is used as a response element in the <code>DescribeDBClusterBacktracks</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BacktrackDBClusterOutput {
    /// <p>Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.</p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>Contains the backtrack identifier.</p>
    pub backtrack_identifier: std::option::Option<std::string::String>,
    /// <p>The timestamp of the time to which the DB cluster was backtracked.</p>
    pub backtrack_to: std::option::Option<smithy_types::Instant>,
    /// <p>The timestamp of the time from which the DB cluster was backtracked.</p>
    pub backtracked_from: std::option::Option<smithy_types::Instant>,
    /// <p>The timestamp of the time at which the backtrack was requested.</p>
    pub backtrack_request_creation_time: std::option::Option<smithy_types::Instant>,
    /// <p>The status of the backtrack. This property returns one of the following
    /// values:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>applying</code> - The backtrack is currently being applied to or rolled back from the DB cluster.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>completed</code> - The backtrack has successfully been applied to or rolled back from the DB cluster.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>failed</code> - An error occurred while the backtrack was applied to or rolled back from the DB cluster.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>pending</code> - The backtrack is currently pending application to or rollback from the DB cluster.</p>
    /// </li>
    /// </ul>
    pub status: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for BacktrackDBClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BacktrackDBClusterOutput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field("backtrack_identifier", &self.backtrack_identifier);
        formatter.field("backtrack_to", &self.backtrack_to);
        formatter.field("backtracked_from", &self.backtracked_from);
        formatter.field(
            "backtrack_request_creation_time",
            &self.backtrack_request_creation_time,
        );
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`BacktrackDBClusterOutput`](crate::output::BacktrackDBClusterOutput)
pub mod backtrack_db_cluster_output {
    /// A builder for [`BacktrackDBClusterOutput`](crate::output::BacktrackDBClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) backtrack_identifier: std::option::Option<std::string::String>,
        pub(crate) backtrack_to: std::option::Option<smithy_types::Instant>,
        pub(crate) backtracked_from: std::option::Option<smithy_types::Instant>,
        pub(crate) backtrack_request_creation_time: std::option::Option<smithy_types::Instant>,
        pub(crate) status: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.</p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>Contains the backtrack identifier.</p>
        pub fn backtrack_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.backtrack_identifier = Some(input.into());
            self
        }
        pub fn set_backtrack_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backtrack_identifier = input;
            self
        }
        /// <p>The timestamp of the time to which the DB cluster was backtracked.</p>
        pub fn backtrack_to(mut self, input: smithy_types::Instant) -> Self {
            self.backtrack_to = Some(input);
            self
        }
        pub fn set_backtrack_to(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.backtrack_to = input;
            self
        }
        /// <p>The timestamp of the time from which the DB cluster was backtracked.</p>
        pub fn backtracked_from(mut self, input: smithy_types::Instant) -> Self {
            self.backtracked_from = Some(input);
            self
        }
        pub fn set_backtracked_from(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.backtracked_from = input;
            self
        }
        /// <p>The timestamp of the time at which the backtrack was requested.</p>
        pub fn backtrack_request_creation_time(mut self, input: smithy_types::Instant) -> Self {
            self.backtrack_request_creation_time = Some(input);
            self
        }
        pub fn set_backtrack_request_creation_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.backtrack_request_creation_time = input;
            self
        }
        /// <p>The status of the backtrack. This property returns one of the following
        /// values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>applying</code> - The backtrack is currently being applied to or rolled back from the DB cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>completed</code> - The backtrack has successfully been applied to or rolled back from the DB cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>failed</code> - An error occurred while the backtrack was applied to or rolled back from the DB cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>pending</code> - The backtrack is currently pending application to or rollback from the DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// Consumes the builder and constructs a [`BacktrackDBClusterOutput`](crate::output::BacktrackDBClusterOutput)
        pub fn build(self) -> crate::output::BacktrackDBClusterOutput {
            crate::output::BacktrackDBClusterOutput {
                db_cluster_identifier: self.db_cluster_identifier,
                backtrack_identifier: self.backtrack_identifier,
                backtrack_to: self.backtrack_to,
                backtracked_from: self.backtracked_from,
                backtrack_request_creation_time: self.backtrack_request_creation_time,
                status: self.status,
            }
        }
    }
}
impl BacktrackDBClusterOutput {
    /// Creates a new builder-style object to manufacture [`BacktrackDBClusterOutput`](crate::output::BacktrackDBClusterOutput)
    pub fn builder() -> crate::output::backtrack_db_cluster_output::Builder {
        crate::output::backtrack_db_cluster_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AuthorizeDBSecurityGroupIngressOutput {
    /// <p>Contains the details for an Amazon RDS DB security group.
    /// </p>
    /// <p>This data type is used as a response element
    /// in the <code>DescribeDBSecurityGroups</code> action.
    /// </p>
    pub db_security_group: std::option::Option<crate::model::DBSecurityGroup>,
}
impl std::fmt::Debug for AuthorizeDBSecurityGroupIngressOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AuthorizeDBSecurityGroupIngressOutput");
        formatter.field("db_security_group", &self.db_security_group);
        formatter.finish()
    }
}
/// See [`AuthorizeDBSecurityGroupIngressOutput`](crate::output::AuthorizeDBSecurityGroupIngressOutput)
pub mod authorize_db_security_group_ingress_output {
    /// A builder for [`AuthorizeDBSecurityGroupIngressOutput`](crate::output::AuthorizeDBSecurityGroupIngressOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_security_group: std::option::Option<crate::model::DBSecurityGroup>,
    }
    impl Builder {
        /// <p>Contains the details for an Amazon RDS DB security group.
        /// </p>
        /// <p>This data type is used as a response element
        /// in the <code>DescribeDBSecurityGroups</code> action.
        /// </p>
        pub fn db_security_group(mut self, input: crate::model::DBSecurityGroup) -> Self {
            self.db_security_group = Some(input);
            self
        }
        pub fn set_db_security_group(
            mut self,
            input: std::option::Option<crate::model::DBSecurityGroup>,
        ) -> Self {
            self.db_security_group = input;
            self
        }
        /// Consumes the builder and constructs a [`AuthorizeDBSecurityGroupIngressOutput`](crate::output::AuthorizeDBSecurityGroupIngressOutput)
        pub fn build(self) -> crate::output::AuthorizeDBSecurityGroupIngressOutput {
            crate::output::AuthorizeDBSecurityGroupIngressOutput {
                db_security_group: self.db_security_group,
            }
        }
    }
}
impl AuthorizeDBSecurityGroupIngressOutput {
    /// Creates a new builder-style object to manufacture [`AuthorizeDBSecurityGroupIngressOutput`](crate::output::AuthorizeDBSecurityGroupIngressOutput)
    pub fn builder() -> crate::output::authorize_db_security_group_ingress_output::Builder {
        crate::output::authorize_db_security_group_ingress_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ApplyPendingMaintenanceActionOutput {
    /// <p>Describes the pending maintenance actions for a resource.</p>
    pub resource_pending_maintenance_actions:
        std::option::Option<crate::model::ResourcePendingMaintenanceActions>,
}
impl std::fmt::Debug for ApplyPendingMaintenanceActionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ApplyPendingMaintenanceActionOutput");
        formatter.field(
            "resource_pending_maintenance_actions",
            &self.resource_pending_maintenance_actions,
        );
        formatter.finish()
    }
}
/// See [`ApplyPendingMaintenanceActionOutput`](crate::output::ApplyPendingMaintenanceActionOutput)
pub mod apply_pending_maintenance_action_output {
    /// A builder for [`ApplyPendingMaintenanceActionOutput`](crate::output::ApplyPendingMaintenanceActionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_pending_maintenance_actions:
            std::option::Option<crate::model::ResourcePendingMaintenanceActions>,
    }
    impl Builder {
        /// <p>Describes the pending maintenance actions for a resource.</p>
        pub fn resource_pending_maintenance_actions(
            mut self,
            input: crate::model::ResourcePendingMaintenanceActions,
        ) -> Self {
            self.resource_pending_maintenance_actions = Some(input);
            self
        }
        pub fn set_resource_pending_maintenance_actions(
            mut self,
            input: std::option::Option<crate::model::ResourcePendingMaintenanceActions>,
        ) -> Self {
            self.resource_pending_maintenance_actions = input;
            self
        }
        /// Consumes the builder and constructs a [`ApplyPendingMaintenanceActionOutput`](crate::output::ApplyPendingMaintenanceActionOutput)
        pub fn build(self) -> crate::output::ApplyPendingMaintenanceActionOutput {
            crate::output::ApplyPendingMaintenanceActionOutput {
                resource_pending_maintenance_actions: self.resource_pending_maintenance_actions,
            }
        }
    }
}
impl ApplyPendingMaintenanceActionOutput {
    /// Creates a new builder-style object to manufacture [`ApplyPendingMaintenanceActionOutput`](crate::output::ApplyPendingMaintenanceActionOutput)
    pub fn builder() -> crate::output::apply_pending_maintenance_action_output::Builder {
        crate::output::apply_pending_maintenance_action_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddTagsToResourceOutput {}
impl std::fmt::Debug for AddTagsToResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddTagsToResourceOutput");
        formatter.finish()
    }
}
/// See [`AddTagsToResourceOutput`](crate::output::AddTagsToResourceOutput)
pub mod add_tags_to_resource_output {
    /// A builder for [`AddTagsToResourceOutput`](crate::output::AddTagsToResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AddTagsToResourceOutput`](crate::output::AddTagsToResourceOutput)
        pub fn build(self) -> crate::output::AddTagsToResourceOutput {
            crate::output::AddTagsToResourceOutput {}
        }
    }
}
impl AddTagsToResourceOutput {
    /// Creates a new builder-style object to manufacture [`AddTagsToResourceOutput`](crate::output::AddTagsToResourceOutput)
    pub fn builder() -> crate::output::add_tags_to_resource_output::Builder {
        crate::output::add_tags_to_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddSourceIdentifierToSubscriptionOutput {
    /// <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
    pub event_subscription: std::option::Option<crate::model::EventSubscription>,
}
impl std::fmt::Debug for AddSourceIdentifierToSubscriptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddSourceIdentifierToSubscriptionOutput");
        formatter.field("event_subscription", &self.event_subscription);
        formatter.finish()
    }
}
/// See [`AddSourceIdentifierToSubscriptionOutput`](crate::output::AddSourceIdentifierToSubscriptionOutput)
pub mod add_source_identifier_to_subscription_output {
    /// A builder for [`AddSourceIdentifierToSubscriptionOutput`](crate::output::AddSourceIdentifierToSubscriptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) event_subscription: std::option::Option<crate::model::EventSubscription>,
    }
    impl Builder {
        /// <p>Contains the results of a successful invocation of the <code>DescribeEventSubscriptions</code> action.</p>
        pub fn event_subscription(mut self, input: crate::model::EventSubscription) -> Self {
            self.event_subscription = Some(input);
            self
        }
        pub fn set_event_subscription(
            mut self,
            input: std::option::Option<crate::model::EventSubscription>,
        ) -> Self {
            self.event_subscription = input;
            self
        }
        /// Consumes the builder and constructs a [`AddSourceIdentifierToSubscriptionOutput`](crate::output::AddSourceIdentifierToSubscriptionOutput)
        pub fn build(self) -> crate::output::AddSourceIdentifierToSubscriptionOutput {
            crate::output::AddSourceIdentifierToSubscriptionOutput {
                event_subscription: self.event_subscription,
            }
        }
    }
}
impl AddSourceIdentifierToSubscriptionOutput {
    /// Creates a new builder-style object to manufacture [`AddSourceIdentifierToSubscriptionOutput`](crate::output::AddSourceIdentifierToSubscriptionOutput)
    pub fn builder() -> crate::output::add_source_identifier_to_subscription_output::Builder {
        crate::output::add_source_identifier_to_subscription_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddRoleToDBInstanceOutput {}
impl std::fmt::Debug for AddRoleToDBInstanceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddRoleToDBInstanceOutput");
        formatter.finish()
    }
}
/// See [`AddRoleToDBInstanceOutput`](crate::output::AddRoleToDBInstanceOutput)
pub mod add_role_to_db_instance_output {
    /// A builder for [`AddRoleToDBInstanceOutput`](crate::output::AddRoleToDBInstanceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AddRoleToDBInstanceOutput`](crate::output::AddRoleToDBInstanceOutput)
        pub fn build(self) -> crate::output::AddRoleToDBInstanceOutput {
            crate::output::AddRoleToDBInstanceOutput {}
        }
    }
}
impl AddRoleToDBInstanceOutput {
    /// Creates a new builder-style object to manufacture [`AddRoleToDBInstanceOutput`](crate::output::AddRoleToDBInstanceOutput)
    pub fn builder() -> crate::output::add_role_to_db_instance_output::Builder {
        crate::output::add_role_to_db_instance_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddRoleToDBClusterOutput {}
impl std::fmt::Debug for AddRoleToDBClusterOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddRoleToDBClusterOutput");
        formatter.finish()
    }
}
/// See [`AddRoleToDBClusterOutput`](crate::output::AddRoleToDBClusterOutput)
pub mod add_role_to_db_cluster_output {
    /// A builder for [`AddRoleToDBClusterOutput`](crate::output::AddRoleToDBClusterOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AddRoleToDBClusterOutput`](crate::output::AddRoleToDBClusterOutput)
        pub fn build(self) -> crate::output::AddRoleToDBClusterOutput {
            crate::output::AddRoleToDBClusterOutput {}
        }
    }
}
impl AddRoleToDBClusterOutput {
    /// Creates a new builder-style object to manufacture [`AddRoleToDBClusterOutput`](crate::output::AddRoleToDBClusterOutput)
    pub fn builder() -> crate::output::add_role_to_db_cluster_output::Builder {
        crate::output::add_role_to_db_cluster_output::Builder::default()
    }
}
