// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_add_role_to_db_cluster(
    input: &crate::input::AddRoleToDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddRoleToDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2) = &input.db_cluster_identifier {
        scope_1.string(var_2);
    }
    #[allow(unused_mut)]
    let mut scope_3 = writer.prefix("RoleArn");
    if let Some(var_4) = &input.role_arn {
        scope_3.string(var_4);
    }
    #[allow(unused_mut)]
    let mut scope_5 = writer.prefix("FeatureName");
    if let Some(var_6) = &input.feature_name {
        scope_5.string(var_6);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_role_to_db_instance(
    input: &crate::input::AddRoleToDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddRoleToDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_7 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_8) = &input.db_instance_identifier {
        scope_7.string(var_8);
    }
    #[allow(unused_mut)]
    let mut scope_9 = writer.prefix("RoleArn");
    if let Some(var_10) = &input.role_arn {
        scope_9.string(var_10);
    }
    #[allow(unused_mut)]
    let mut scope_11 = writer.prefix("FeatureName");
    if let Some(var_12) = &input.feature_name {
        scope_11.string(var_12);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_source_identifier_to_subscription(
    input: &crate::input::AddSourceIdentifierToSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AddSourceIdentifierToSubscription",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_13 = writer.prefix("SubscriptionName");
    if let Some(var_14) = &input.subscription_name {
        scope_13.string(var_14);
    }
    #[allow(unused_mut)]
    let mut scope_15 = writer.prefix("SourceIdentifier");
    if let Some(var_16) = &input.source_identifier {
        scope_15.string(var_16);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_add_tags_to_resource(
    input: &crate::input::AddTagsToResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "AddTagsToResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_17 = writer.prefix("ResourceName");
    if let Some(var_18) = &input.resource_name {
        scope_17.string(var_18);
    }
    #[allow(unused_mut)]
    let mut scope_19 = writer.prefix("Tags");
    if let Some(var_20) = &input.tags {
        let mut list_22 = scope_19.start_list(false, Some("Tag"));
        for item_21 in var_20 {
            #[allow(unused_mut)]
            let mut entry_23 = list_22.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_23, item_21)?;
        }
        list_22.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_apply_pending_maintenance_action(
    input: &crate::input::ApplyPendingMaintenanceActionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ApplyPendingMaintenanceAction", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_24 = writer.prefix("ResourceIdentifier");
    if let Some(var_25) = &input.resource_identifier {
        scope_24.string(var_25);
    }
    #[allow(unused_mut)]
    let mut scope_26 = writer.prefix("ApplyAction");
    if let Some(var_27) = &input.apply_action {
        scope_26.string(var_27);
    }
    #[allow(unused_mut)]
    let mut scope_28 = writer.prefix("OptInType");
    if let Some(var_29) = &input.opt_in_type {
        scope_28.string(var_29);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_authorize_db_security_group_ingress(
    input: &crate::input::AuthorizeDbSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "AuthorizeDBSecurityGroupIngress",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_30 = writer.prefix("DBSecurityGroupName");
    if let Some(var_31) = &input.db_security_group_name {
        scope_30.string(var_31);
    }
    #[allow(unused_mut)]
    let mut scope_32 = writer.prefix("CIDRIP");
    if let Some(var_33) = &input.cidrip {
        scope_32.string(var_33);
    }
    #[allow(unused_mut)]
    let mut scope_34 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_35) = &input.ec2_security_group_name {
        scope_34.string(var_35);
    }
    #[allow(unused_mut)]
    let mut scope_36 = writer.prefix("EC2SecurityGroupId");
    if let Some(var_37) = &input.ec2_security_group_id {
        scope_36.string(var_37);
    }
    #[allow(unused_mut)]
    let mut scope_38 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_39) = &input.ec2_security_group_owner_id {
        scope_38.string(var_39);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_backtrack_db_cluster(
    input: &crate::input::BacktrackDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "BacktrackDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_40 = writer.prefix("DBClusterIdentifier");
    if let Some(var_41) = &input.db_cluster_identifier {
        scope_40.string(var_41);
    }
    #[allow(unused_mut)]
    let mut scope_42 = writer.prefix("BacktrackTo");
    if let Some(var_43) = &input.backtrack_to {
        scope_42.date_time(var_43, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_44 = writer.prefix("Force");
    if let Some(var_45) = &input.force {
        scope_44.boolean(*var_45);
    }
    #[allow(unused_mut)]
    let mut scope_46 = writer.prefix("UseEarliestTimeOnPointInTimeUnavailable");
    if let Some(var_47) = &input.use_earliest_time_on_point_in_time_unavailable {
        scope_46.boolean(*var_47);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_cancel_export_task(
    input: &crate::input::CancelExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CancelExportTask", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_48 = writer.prefix("ExportTaskIdentifier");
    if let Some(var_49) = &input.export_task_identifier {
        scope_48.string(var_49);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_cluster_parameter_group(
    input: &crate::input::CopyDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_50 = writer.prefix("SourceDBClusterParameterGroupIdentifier");
    if let Some(var_51) = &input.source_db_cluster_parameter_group_identifier {
        scope_50.string(var_51);
    }
    #[allow(unused_mut)]
    let mut scope_52 = writer.prefix("TargetDBClusterParameterGroupIdentifier");
    if let Some(var_53) = &input.target_db_cluster_parameter_group_identifier {
        scope_52.string(var_53);
    }
    #[allow(unused_mut)]
    let mut scope_54 = writer.prefix("TargetDBClusterParameterGroupDescription");
    if let Some(var_55) = &input.target_db_cluster_parameter_group_description {
        scope_54.string(var_55);
    }
    #[allow(unused_mut)]
    let mut scope_56 = writer.prefix("Tags");
    if let Some(var_57) = &input.tags {
        let mut list_59 = scope_56.start_list(false, Some("Tag"));
        for item_58 in var_57 {
            #[allow(unused_mut)]
            let mut entry_60 = list_59.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_60, item_58)?;
        }
        list_59.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_cluster_snapshot(
    input: &crate::input::CopyDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_61 = writer.prefix("SourceDBClusterSnapshotIdentifier");
    if let Some(var_62) = &input.source_db_cluster_snapshot_identifier {
        scope_61.string(var_62);
    }
    #[allow(unused_mut)]
    let mut scope_63 = writer.prefix("TargetDBClusterSnapshotIdentifier");
    if let Some(var_64) = &input.target_db_cluster_snapshot_identifier {
        scope_63.string(var_64);
    }
    #[allow(unused_mut)]
    let mut scope_65 = writer.prefix("KmsKeyId");
    if let Some(var_66) = &input.kms_key_id {
        scope_65.string(var_66);
    }
    #[allow(unused_mut)]
    let mut scope_67 = writer.prefix("PreSignedUrl");
    if let Some(var_68) = &input.pre_signed_url {
        scope_67.string(var_68);
    }
    #[allow(unused_mut)]
    let mut scope_69 = writer.prefix("CopyTags");
    if let Some(var_70) = &input.copy_tags {
        scope_69.boolean(*var_70);
    }
    #[allow(unused_mut)]
    let mut scope_71 = writer.prefix("Tags");
    if let Some(var_72) = &input.tags {
        let mut list_74 = scope_71.start_list(false, Some("Tag"));
        for item_73 in var_72 {
            #[allow(unused_mut)]
            let mut entry_75 = list_74.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_75, item_73)?;
        }
        list_74.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_parameter_group(
    input: &crate::input::CopyDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CopyDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_76 = writer.prefix("SourceDBParameterGroupIdentifier");
    if let Some(var_77) = &input.source_db_parameter_group_identifier {
        scope_76.string(var_77);
    }
    #[allow(unused_mut)]
    let mut scope_78 = writer.prefix("TargetDBParameterGroupIdentifier");
    if let Some(var_79) = &input.target_db_parameter_group_identifier {
        scope_78.string(var_79);
    }
    #[allow(unused_mut)]
    let mut scope_80 = writer.prefix("TargetDBParameterGroupDescription");
    if let Some(var_81) = &input.target_db_parameter_group_description {
        scope_80.string(var_81);
    }
    #[allow(unused_mut)]
    let mut scope_82 = writer.prefix("Tags");
    if let Some(var_83) = &input.tags {
        let mut list_85 = scope_82.start_list(false, Some("Tag"));
        for item_84 in var_83 {
            #[allow(unused_mut)]
            let mut entry_86 = list_85.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_86, item_84)?;
        }
        list_85.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_db_snapshot(
    input: &crate::input::CopyDbSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_87 = writer.prefix("SourceDBSnapshotIdentifier");
    if let Some(var_88) = &input.source_db_snapshot_identifier {
        scope_87.string(var_88);
    }
    #[allow(unused_mut)]
    let mut scope_89 = writer.prefix("TargetDBSnapshotIdentifier");
    if let Some(var_90) = &input.target_db_snapshot_identifier {
        scope_89.string(var_90);
    }
    #[allow(unused_mut)]
    let mut scope_91 = writer.prefix("KmsKeyId");
    if let Some(var_92) = &input.kms_key_id {
        scope_91.string(var_92);
    }
    #[allow(unused_mut)]
    let mut scope_93 = writer.prefix("Tags");
    if let Some(var_94) = &input.tags {
        let mut list_96 = scope_93.start_list(false, Some("Tag"));
        for item_95 in var_94 {
            #[allow(unused_mut)]
            let mut entry_97 = list_96.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_97, item_95)?;
        }
        list_96.finish();
    }
    #[allow(unused_mut)]
    let mut scope_98 = writer.prefix("CopyTags");
    if let Some(var_99) = &input.copy_tags {
        scope_98.boolean(*var_99);
    }
    #[allow(unused_mut)]
    let mut scope_100 = writer.prefix("PreSignedUrl");
    if let Some(var_101) = &input.pre_signed_url {
        scope_100.string(var_101);
    }
    #[allow(unused_mut)]
    let mut scope_102 = writer.prefix("OptionGroupName");
    if let Some(var_103) = &input.option_group_name {
        scope_102.string(var_103);
    }
    #[allow(unused_mut)]
    let mut scope_104 = writer.prefix("TargetCustomAvailabilityZone");
    if let Some(var_105) = &input.target_custom_availability_zone {
        scope_104.string(var_105);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_copy_option_group(
    input: &crate::input::CopyOptionGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CopyOptionGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_106 = writer.prefix("SourceOptionGroupIdentifier");
    if let Some(var_107) = &input.source_option_group_identifier {
        scope_106.string(var_107);
    }
    #[allow(unused_mut)]
    let mut scope_108 = writer.prefix("TargetOptionGroupIdentifier");
    if let Some(var_109) = &input.target_option_group_identifier {
        scope_108.string(var_109);
    }
    #[allow(unused_mut)]
    let mut scope_110 = writer.prefix("TargetOptionGroupDescription");
    if let Some(var_111) = &input.target_option_group_description {
        scope_110.string(var_111);
    }
    #[allow(unused_mut)]
    let mut scope_112 = writer.prefix("Tags");
    if let Some(var_113) = &input.tags {
        let mut list_115 = scope_112.start_list(false, Some("Tag"));
        for item_114 in var_113 {
            #[allow(unused_mut)]
            let mut entry_116 = list_115.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_116, item_114)?;
        }
        list_115.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_custom_availability_zone(
    input: &crate::input::CreateCustomAvailabilityZoneInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomAvailabilityZone", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_117 = writer.prefix("CustomAvailabilityZoneName");
    if let Some(var_118) = &input.custom_availability_zone_name {
        scope_117.string(var_118);
    }
    #[allow(unused_mut)]
    let mut scope_119 = writer.prefix("ExistingVpnId");
    if let Some(var_120) = &input.existing_vpn_id {
        scope_119.string(var_120);
    }
    #[allow(unused_mut)]
    let mut scope_121 = writer.prefix("NewVpnTunnelName");
    if let Some(var_122) = &input.new_vpn_tunnel_name {
        scope_121.string(var_122);
    }
    #[allow(unused_mut)]
    let mut scope_123 = writer.prefix("VpnTunnelOriginatorIP");
    if let Some(var_124) = &input.vpn_tunnel_originator_ip {
        scope_123.string(var_124);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_custom_db_engine_version(
    input: &crate::input::CreateCustomDbEngineVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateCustomDBEngineVersion", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_125 = writer.prefix("Engine");
    if let Some(var_126) = &input.engine {
        scope_125.string(var_126);
    }
    #[allow(unused_mut)]
    let mut scope_127 = writer.prefix("EngineVersion");
    if let Some(var_128) = &input.engine_version {
        scope_127.string(var_128);
    }
    #[allow(unused_mut)]
    let mut scope_129 = writer.prefix("DatabaseInstallationFilesS3BucketName");
    if let Some(var_130) = &input.database_installation_files_s3_bucket_name {
        scope_129.string(var_130);
    }
    #[allow(unused_mut)]
    let mut scope_131 = writer.prefix("DatabaseInstallationFilesS3Prefix");
    if let Some(var_132) = &input.database_installation_files_s3_prefix {
        scope_131.string(var_132);
    }
    #[allow(unused_mut)]
    let mut scope_133 = writer.prefix("KMSKeyId");
    if let Some(var_134) = &input.kms_key_id {
        scope_133.string(var_134);
    }
    #[allow(unused_mut)]
    let mut scope_135 = writer.prefix("Description");
    if let Some(var_136) = &input.description {
        scope_135.string(var_136);
    }
    #[allow(unused_mut)]
    let mut scope_137 = writer.prefix("Manifest");
    if let Some(var_138) = &input.manifest {
        scope_137.string(var_138);
    }
    #[allow(unused_mut)]
    let mut scope_139 = writer.prefix("Tags");
    if let Some(var_140) = &input.tags {
        let mut list_142 = scope_139.start_list(false, Some("Tag"));
        for item_141 in var_140 {
            #[allow(unused_mut)]
            let mut entry_143 = list_142.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_143, item_141)?;
        }
        list_142.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster(
    input: &crate::input::CreateDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_144 = writer.prefix("AvailabilityZones");
    if let Some(var_145) = &input.availability_zones {
        let mut list_147 = scope_144.start_list(false, Some("AvailabilityZone"));
        for item_146 in var_145 {
            #[allow(unused_mut)]
            let mut entry_148 = list_147.entry();
            entry_148.string(item_146);
        }
        list_147.finish();
    }
    #[allow(unused_mut)]
    let mut scope_149 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_150) = &input.backup_retention_period {
        scope_149.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_150).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_151 = writer.prefix("CharacterSetName");
    if let Some(var_152) = &input.character_set_name {
        scope_151.string(var_152);
    }
    #[allow(unused_mut)]
    let mut scope_153 = writer.prefix("DatabaseName");
    if let Some(var_154) = &input.database_name {
        scope_153.string(var_154);
    }
    #[allow(unused_mut)]
    let mut scope_155 = writer.prefix("DBClusterIdentifier");
    if let Some(var_156) = &input.db_cluster_identifier {
        scope_155.string(var_156);
    }
    #[allow(unused_mut)]
    let mut scope_157 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_158) = &input.db_cluster_parameter_group_name {
        scope_157.string(var_158);
    }
    #[allow(unused_mut)]
    let mut scope_159 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_160) = &input.vpc_security_group_ids {
        let mut list_162 = scope_159.start_list(false, Some("VpcSecurityGroupId"));
        for item_161 in var_160 {
            #[allow(unused_mut)]
            let mut entry_163 = list_162.entry();
            entry_163.string(item_161);
        }
        list_162.finish();
    }
    #[allow(unused_mut)]
    let mut scope_164 = writer.prefix("DBSubnetGroupName");
    if let Some(var_165) = &input.db_subnet_group_name {
        scope_164.string(var_165);
    }
    #[allow(unused_mut)]
    let mut scope_166 = writer.prefix("Engine");
    if let Some(var_167) = &input.engine {
        scope_166.string(var_167);
    }
    #[allow(unused_mut)]
    let mut scope_168 = writer.prefix("EngineVersion");
    if let Some(var_169) = &input.engine_version {
        scope_168.string(var_169);
    }
    #[allow(unused_mut)]
    let mut scope_170 = writer.prefix("Port");
    if let Some(var_171) = &input.port {
        scope_170.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_171).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_172 = writer.prefix("MasterUsername");
    if let Some(var_173) = &input.master_username {
        scope_172.string(var_173);
    }
    #[allow(unused_mut)]
    let mut scope_174 = writer.prefix("MasterUserPassword");
    if let Some(var_175) = &input.master_user_password {
        scope_174.string(var_175);
    }
    #[allow(unused_mut)]
    let mut scope_176 = writer.prefix("OptionGroupName");
    if let Some(var_177) = &input.option_group_name {
        scope_176.string(var_177);
    }
    #[allow(unused_mut)]
    let mut scope_178 = writer.prefix("PreferredBackupWindow");
    if let Some(var_179) = &input.preferred_backup_window {
        scope_178.string(var_179);
    }
    #[allow(unused_mut)]
    let mut scope_180 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_181) = &input.preferred_maintenance_window {
        scope_180.string(var_181);
    }
    #[allow(unused_mut)]
    let mut scope_182 = writer.prefix("ReplicationSourceIdentifier");
    if let Some(var_183) = &input.replication_source_identifier {
        scope_182.string(var_183);
    }
    #[allow(unused_mut)]
    let mut scope_184 = writer.prefix("Tags");
    if let Some(var_185) = &input.tags {
        let mut list_187 = scope_184.start_list(false, Some("Tag"));
        for item_186 in var_185 {
            #[allow(unused_mut)]
            let mut entry_188 = list_187.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_188, item_186)?;
        }
        list_187.finish();
    }
    #[allow(unused_mut)]
    let mut scope_189 = writer.prefix("StorageEncrypted");
    if let Some(var_190) = &input.storage_encrypted {
        scope_189.boolean(*var_190);
    }
    #[allow(unused_mut)]
    let mut scope_191 = writer.prefix("KmsKeyId");
    if let Some(var_192) = &input.kms_key_id {
        scope_191.string(var_192);
    }
    #[allow(unused_mut)]
    let mut scope_193 = writer.prefix("PreSignedUrl");
    if let Some(var_194) = &input.pre_signed_url {
        scope_193.string(var_194);
    }
    #[allow(unused_mut)]
    let mut scope_195 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_196) = &input.enable_iam_database_authentication {
        scope_195.boolean(*var_196);
    }
    #[allow(unused_mut)]
    let mut scope_197 = writer.prefix("BacktrackWindow");
    if let Some(var_198) = &input.backtrack_window {
        scope_197.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_198).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_199 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_200) = &input.enable_cloudwatch_logs_exports {
        let mut list_202 = scope_199.start_list(false, None);
        for item_201 in var_200 {
            #[allow(unused_mut)]
            let mut entry_203 = list_202.entry();
            entry_203.string(item_201);
        }
        list_202.finish();
    }
    #[allow(unused_mut)]
    let mut scope_204 = writer.prefix("EngineMode");
    if let Some(var_205) = &input.engine_mode {
        scope_204.string(var_205);
    }
    #[allow(unused_mut)]
    let mut scope_206 = writer.prefix("ScalingConfiguration");
    if let Some(var_207) = &input.scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_scaling_configuration(
            scope_206, var_207,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_208 = writer.prefix("DeletionProtection");
    if let Some(var_209) = &input.deletion_protection {
        scope_208.boolean(*var_209);
    }
    #[allow(unused_mut)]
    let mut scope_210 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_211) = &input.global_cluster_identifier {
        scope_210.string(var_211);
    }
    #[allow(unused_mut)]
    let mut scope_212 = writer.prefix("EnableHttpEndpoint");
    if let Some(var_213) = &input.enable_http_endpoint {
        scope_212.boolean(*var_213);
    }
    #[allow(unused_mut)]
    let mut scope_214 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_215) = &input.copy_tags_to_snapshot {
        scope_214.boolean(*var_215);
    }
    #[allow(unused_mut)]
    let mut scope_216 = writer.prefix("Domain");
    if let Some(var_217) = &input.domain {
        scope_216.string(var_217);
    }
    #[allow(unused_mut)]
    let mut scope_218 = writer.prefix("DomainIAMRoleName");
    if let Some(var_219) = &input.domain_iam_role_name {
        scope_218.string(var_219);
    }
    #[allow(unused_mut)]
    let mut scope_220 = writer.prefix("EnableGlobalWriteForwarding");
    if let Some(var_221) = &input.enable_global_write_forwarding {
        scope_220.boolean(*var_221);
    }
    #[allow(unused_mut)]
    let mut scope_222 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_223) = &input.db_cluster_instance_class {
        scope_222.string(var_223);
    }
    #[allow(unused_mut)]
    let mut scope_224 = writer.prefix("AllocatedStorage");
    if let Some(var_225) = &input.allocated_storage {
        scope_224.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_225).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_226 = writer.prefix("StorageType");
    if let Some(var_227) = &input.storage_type {
        scope_226.string(var_227);
    }
    #[allow(unused_mut)]
    let mut scope_228 = writer.prefix("Iops");
    if let Some(var_229) = &input.iops {
        scope_228.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_229).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_230 = writer.prefix("PubliclyAccessible");
    if let Some(var_231) = &input.publicly_accessible {
        scope_230.boolean(*var_231);
    }
    #[allow(unused_mut)]
    let mut scope_232 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_233) = &input.auto_minor_version_upgrade {
        scope_232.boolean(*var_233);
    }
    #[allow(unused_mut)]
    let mut scope_234 = writer.prefix("MonitoringInterval");
    if let Some(var_235) = &input.monitoring_interval {
        scope_234.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_235).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_236 = writer.prefix("MonitoringRoleArn");
    if let Some(var_237) = &input.monitoring_role_arn {
        scope_236.string(var_237);
    }
    #[allow(unused_mut)]
    let mut scope_238 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_239) = &input.enable_performance_insights {
        scope_238.boolean(*var_239);
    }
    #[allow(unused_mut)]
    let mut scope_240 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_241) = &input.performance_insights_kms_key_id {
        scope_240.string(var_241);
    }
    #[allow(unused_mut)]
    let mut scope_242 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_243) = &input.performance_insights_retention_period {
        scope_242.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_243).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_endpoint(
    input: &crate::input::CreateDbClusterEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_244 = writer.prefix("DBClusterIdentifier");
    if let Some(var_245) = &input.db_cluster_identifier {
        scope_244.string(var_245);
    }
    #[allow(unused_mut)]
    let mut scope_246 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_247) = &input.db_cluster_endpoint_identifier {
        scope_246.string(var_247);
    }
    #[allow(unused_mut)]
    let mut scope_248 = writer.prefix("EndpointType");
    if let Some(var_249) = &input.endpoint_type {
        scope_248.string(var_249);
    }
    #[allow(unused_mut)]
    let mut scope_250 = writer.prefix("StaticMembers");
    if let Some(var_251) = &input.static_members {
        let mut list_253 = scope_250.start_list(false, None);
        for item_252 in var_251 {
            #[allow(unused_mut)]
            let mut entry_254 = list_253.entry();
            entry_254.string(item_252);
        }
        list_253.finish();
    }
    #[allow(unused_mut)]
    let mut scope_255 = writer.prefix("ExcludedMembers");
    if let Some(var_256) = &input.excluded_members {
        let mut list_258 = scope_255.start_list(false, None);
        for item_257 in var_256 {
            #[allow(unused_mut)]
            let mut entry_259 = list_258.entry();
            entry_259.string(item_257);
        }
        list_258.finish();
    }
    #[allow(unused_mut)]
    let mut scope_260 = writer.prefix("Tags");
    if let Some(var_261) = &input.tags {
        let mut list_263 = scope_260.start_list(false, Some("Tag"));
        for item_262 in var_261 {
            #[allow(unused_mut)]
            let mut entry_264 = list_263.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_264, item_262)?;
        }
        list_263.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_parameter_group(
    input: &crate::input::CreateDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_265 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_266) = &input.db_cluster_parameter_group_name {
        scope_265.string(var_266);
    }
    #[allow(unused_mut)]
    let mut scope_267 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_268) = &input.db_parameter_group_family {
        scope_267.string(var_268);
    }
    #[allow(unused_mut)]
    let mut scope_269 = writer.prefix("Description");
    if let Some(var_270) = &input.description {
        scope_269.string(var_270);
    }
    #[allow(unused_mut)]
    let mut scope_271 = writer.prefix("Tags");
    if let Some(var_272) = &input.tags {
        let mut list_274 = scope_271.start_list(false, Some("Tag"));
        for item_273 in var_272 {
            #[allow(unused_mut)]
            let mut entry_275 = list_274.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_275, item_273)?;
        }
        list_274.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_cluster_snapshot(
    input: &crate::input::CreateDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_276 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_277) = &input.db_cluster_snapshot_identifier {
        scope_276.string(var_277);
    }
    #[allow(unused_mut)]
    let mut scope_278 = writer.prefix("DBClusterIdentifier");
    if let Some(var_279) = &input.db_cluster_identifier {
        scope_278.string(var_279);
    }
    #[allow(unused_mut)]
    let mut scope_280 = writer.prefix("Tags");
    if let Some(var_281) = &input.tags {
        let mut list_283 = scope_280.start_list(false, Some("Tag"));
        for item_282 in var_281 {
            #[allow(unused_mut)]
            let mut entry_284 = list_283.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_284, item_282)?;
        }
        list_283.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_instance(
    input: &crate::input::CreateDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_285 = writer.prefix("DBName");
    if let Some(var_286) = &input.db_name {
        scope_285.string(var_286);
    }
    #[allow(unused_mut)]
    let mut scope_287 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_288) = &input.db_instance_identifier {
        scope_287.string(var_288);
    }
    #[allow(unused_mut)]
    let mut scope_289 = writer.prefix("AllocatedStorage");
    if let Some(var_290) = &input.allocated_storage {
        scope_289.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_290).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_291 = writer.prefix("DBInstanceClass");
    if let Some(var_292) = &input.db_instance_class {
        scope_291.string(var_292);
    }
    #[allow(unused_mut)]
    let mut scope_293 = writer.prefix("Engine");
    if let Some(var_294) = &input.engine {
        scope_293.string(var_294);
    }
    #[allow(unused_mut)]
    let mut scope_295 = writer.prefix("MasterUsername");
    if let Some(var_296) = &input.master_username {
        scope_295.string(var_296);
    }
    #[allow(unused_mut)]
    let mut scope_297 = writer.prefix("MasterUserPassword");
    if let Some(var_298) = &input.master_user_password {
        scope_297.string(var_298);
    }
    #[allow(unused_mut)]
    let mut scope_299 = writer.prefix("DBSecurityGroups");
    if let Some(var_300) = &input.db_security_groups {
        let mut list_302 = scope_299.start_list(false, Some("DBSecurityGroupName"));
        for item_301 in var_300 {
            #[allow(unused_mut)]
            let mut entry_303 = list_302.entry();
            entry_303.string(item_301);
        }
        list_302.finish();
    }
    #[allow(unused_mut)]
    let mut scope_304 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_305) = &input.vpc_security_group_ids {
        let mut list_307 = scope_304.start_list(false, Some("VpcSecurityGroupId"));
        for item_306 in var_305 {
            #[allow(unused_mut)]
            let mut entry_308 = list_307.entry();
            entry_308.string(item_306);
        }
        list_307.finish();
    }
    #[allow(unused_mut)]
    let mut scope_309 = writer.prefix("AvailabilityZone");
    if let Some(var_310) = &input.availability_zone {
        scope_309.string(var_310);
    }
    #[allow(unused_mut)]
    let mut scope_311 = writer.prefix("DBSubnetGroupName");
    if let Some(var_312) = &input.db_subnet_group_name {
        scope_311.string(var_312);
    }
    #[allow(unused_mut)]
    let mut scope_313 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_314) = &input.preferred_maintenance_window {
        scope_313.string(var_314);
    }
    #[allow(unused_mut)]
    let mut scope_315 = writer.prefix("DBParameterGroupName");
    if let Some(var_316) = &input.db_parameter_group_name {
        scope_315.string(var_316);
    }
    #[allow(unused_mut)]
    let mut scope_317 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_318) = &input.backup_retention_period {
        scope_317.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_318).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_319 = writer.prefix("PreferredBackupWindow");
    if let Some(var_320) = &input.preferred_backup_window {
        scope_319.string(var_320);
    }
    #[allow(unused_mut)]
    let mut scope_321 = writer.prefix("Port");
    if let Some(var_322) = &input.port {
        scope_321.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_322).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_323 = writer.prefix("MultiAZ");
    if let Some(var_324) = &input.multi_az {
        scope_323.boolean(*var_324);
    }
    #[allow(unused_mut)]
    let mut scope_325 = writer.prefix("EngineVersion");
    if let Some(var_326) = &input.engine_version {
        scope_325.string(var_326);
    }
    #[allow(unused_mut)]
    let mut scope_327 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_328) = &input.auto_minor_version_upgrade {
        scope_327.boolean(*var_328);
    }
    #[allow(unused_mut)]
    let mut scope_329 = writer.prefix("LicenseModel");
    if let Some(var_330) = &input.license_model {
        scope_329.string(var_330);
    }
    #[allow(unused_mut)]
    let mut scope_331 = writer.prefix("Iops");
    if let Some(var_332) = &input.iops {
        scope_331.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_332).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_333 = writer.prefix("OptionGroupName");
    if let Some(var_334) = &input.option_group_name {
        scope_333.string(var_334);
    }
    #[allow(unused_mut)]
    let mut scope_335 = writer.prefix("CharacterSetName");
    if let Some(var_336) = &input.character_set_name {
        scope_335.string(var_336);
    }
    #[allow(unused_mut)]
    let mut scope_337 = writer.prefix("NcharCharacterSetName");
    if let Some(var_338) = &input.nchar_character_set_name {
        scope_337.string(var_338);
    }
    #[allow(unused_mut)]
    let mut scope_339 = writer.prefix("PubliclyAccessible");
    if let Some(var_340) = &input.publicly_accessible {
        scope_339.boolean(*var_340);
    }
    #[allow(unused_mut)]
    let mut scope_341 = writer.prefix("Tags");
    if let Some(var_342) = &input.tags {
        let mut list_344 = scope_341.start_list(false, Some("Tag"));
        for item_343 in var_342 {
            #[allow(unused_mut)]
            let mut entry_345 = list_344.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_345, item_343)?;
        }
        list_344.finish();
    }
    #[allow(unused_mut)]
    let mut scope_346 = writer.prefix("DBClusterIdentifier");
    if let Some(var_347) = &input.db_cluster_identifier {
        scope_346.string(var_347);
    }
    #[allow(unused_mut)]
    let mut scope_348 = writer.prefix("StorageType");
    if let Some(var_349) = &input.storage_type {
        scope_348.string(var_349);
    }
    #[allow(unused_mut)]
    let mut scope_350 = writer.prefix("TdeCredentialArn");
    if let Some(var_351) = &input.tde_credential_arn {
        scope_350.string(var_351);
    }
    #[allow(unused_mut)]
    let mut scope_352 = writer.prefix("TdeCredentialPassword");
    if let Some(var_353) = &input.tde_credential_password {
        scope_352.string(var_353);
    }
    #[allow(unused_mut)]
    let mut scope_354 = writer.prefix("StorageEncrypted");
    if let Some(var_355) = &input.storage_encrypted {
        scope_354.boolean(*var_355);
    }
    #[allow(unused_mut)]
    let mut scope_356 = writer.prefix("KmsKeyId");
    if let Some(var_357) = &input.kms_key_id {
        scope_356.string(var_357);
    }
    #[allow(unused_mut)]
    let mut scope_358 = writer.prefix("Domain");
    if let Some(var_359) = &input.domain {
        scope_358.string(var_359);
    }
    #[allow(unused_mut)]
    let mut scope_360 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_361) = &input.copy_tags_to_snapshot {
        scope_360.boolean(*var_361);
    }
    #[allow(unused_mut)]
    let mut scope_362 = writer.prefix("MonitoringInterval");
    if let Some(var_363) = &input.monitoring_interval {
        scope_362.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_363).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_364 = writer.prefix("MonitoringRoleArn");
    if let Some(var_365) = &input.monitoring_role_arn {
        scope_364.string(var_365);
    }
    #[allow(unused_mut)]
    let mut scope_366 = writer.prefix("DomainIAMRoleName");
    if let Some(var_367) = &input.domain_iam_role_name {
        scope_366.string(var_367);
    }
    #[allow(unused_mut)]
    let mut scope_368 = writer.prefix("PromotionTier");
    if let Some(var_369) = &input.promotion_tier {
        scope_368.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_369).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_370 = writer.prefix("Timezone");
    if let Some(var_371) = &input.timezone {
        scope_370.string(var_371);
    }
    #[allow(unused_mut)]
    let mut scope_372 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_373) = &input.enable_iam_database_authentication {
        scope_372.boolean(*var_373);
    }
    #[allow(unused_mut)]
    let mut scope_374 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_375) = &input.enable_performance_insights {
        scope_374.boolean(*var_375);
    }
    #[allow(unused_mut)]
    let mut scope_376 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_377) = &input.performance_insights_kms_key_id {
        scope_376.string(var_377);
    }
    #[allow(unused_mut)]
    let mut scope_378 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_379) = &input.performance_insights_retention_period {
        scope_378.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_379).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_380 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_381) = &input.enable_cloudwatch_logs_exports {
        let mut list_383 = scope_380.start_list(false, None);
        for item_382 in var_381 {
            #[allow(unused_mut)]
            let mut entry_384 = list_383.entry();
            entry_384.string(item_382);
        }
        list_383.finish();
    }
    #[allow(unused_mut)]
    let mut scope_385 = writer.prefix("ProcessorFeatures");
    if let Some(var_386) = &input.processor_features {
        let mut list_388 = scope_385.start_list(false, Some("ProcessorFeature"));
        for item_387 in var_386 {
            #[allow(unused_mut)]
            let mut entry_389 = list_388.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_389, item_387,
            )?;
        }
        list_388.finish();
    }
    #[allow(unused_mut)]
    let mut scope_390 = writer.prefix("DeletionProtection");
    if let Some(var_391) = &input.deletion_protection {
        scope_390.boolean(*var_391);
    }
    #[allow(unused_mut)]
    let mut scope_392 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_393) = &input.max_allocated_storage {
        scope_392.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_393).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_394 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_395) = &input.enable_customer_owned_ip {
        scope_394.boolean(*var_395);
    }
    #[allow(unused_mut)]
    let mut scope_396 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_397) = &input.custom_iam_instance_profile {
        scope_396.string(var_397);
    }
    #[allow(unused_mut)]
    let mut scope_398 = writer.prefix("BackupTarget");
    if let Some(var_399) = &input.backup_target {
        scope_398.string(var_399);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_instance_read_replica(
    input: &crate::input::CreateDbInstanceReadReplicaInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBInstanceReadReplica", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_400 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_401) = &input.db_instance_identifier {
        scope_400.string(var_401);
    }
    #[allow(unused_mut)]
    let mut scope_402 = writer.prefix("SourceDBInstanceIdentifier");
    if let Some(var_403) = &input.source_db_instance_identifier {
        scope_402.string(var_403);
    }
    #[allow(unused_mut)]
    let mut scope_404 = writer.prefix("DBInstanceClass");
    if let Some(var_405) = &input.db_instance_class {
        scope_404.string(var_405);
    }
    #[allow(unused_mut)]
    let mut scope_406 = writer.prefix("AvailabilityZone");
    if let Some(var_407) = &input.availability_zone {
        scope_406.string(var_407);
    }
    #[allow(unused_mut)]
    let mut scope_408 = writer.prefix("Port");
    if let Some(var_409) = &input.port {
        scope_408.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_409).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_410 = writer.prefix("MultiAZ");
    if let Some(var_411) = &input.multi_az {
        scope_410.boolean(*var_411);
    }
    #[allow(unused_mut)]
    let mut scope_412 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_413) = &input.auto_minor_version_upgrade {
        scope_412.boolean(*var_413);
    }
    #[allow(unused_mut)]
    let mut scope_414 = writer.prefix("Iops");
    if let Some(var_415) = &input.iops {
        scope_414.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_415).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_416 = writer.prefix("OptionGroupName");
    if let Some(var_417) = &input.option_group_name {
        scope_416.string(var_417);
    }
    #[allow(unused_mut)]
    let mut scope_418 = writer.prefix("DBParameterGroupName");
    if let Some(var_419) = &input.db_parameter_group_name {
        scope_418.string(var_419);
    }
    #[allow(unused_mut)]
    let mut scope_420 = writer.prefix("PubliclyAccessible");
    if let Some(var_421) = &input.publicly_accessible {
        scope_420.boolean(*var_421);
    }
    #[allow(unused_mut)]
    let mut scope_422 = writer.prefix("Tags");
    if let Some(var_423) = &input.tags {
        let mut list_425 = scope_422.start_list(false, Some("Tag"));
        for item_424 in var_423 {
            #[allow(unused_mut)]
            let mut entry_426 = list_425.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_426, item_424)?;
        }
        list_425.finish();
    }
    #[allow(unused_mut)]
    let mut scope_427 = writer.prefix("DBSubnetGroupName");
    if let Some(var_428) = &input.db_subnet_group_name {
        scope_427.string(var_428);
    }
    #[allow(unused_mut)]
    let mut scope_429 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_430) = &input.vpc_security_group_ids {
        let mut list_432 = scope_429.start_list(false, Some("VpcSecurityGroupId"));
        for item_431 in var_430 {
            #[allow(unused_mut)]
            let mut entry_433 = list_432.entry();
            entry_433.string(item_431);
        }
        list_432.finish();
    }
    #[allow(unused_mut)]
    let mut scope_434 = writer.prefix("StorageType");
    if let Some(var_435) = &input.storage_type {
        scope_434.string(var_435);
    }
    #[allow(unused_mut)]
    let mut scope_436 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_437) = &input.copy_tags_to_snapshot {
        scope_436.boolean(*var_437);
    }
    #[allow(unused_mut)]
    let mut scope_438 = writer.prefix("MonitoringInterval");
    if let Some(var_439) = &input.monitoring_interval {
        scope_438.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_439).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_440 = writer.prefix("MonitoringRoleArn");
    if let Some(var_441) = &input.monitoring_role_arn {
        scope_440.string(var_441);
    }
    #[allow(unused_mut)]
    let mut scope_442 = writer.prefix("KmsKeyId");
    if let Some(var_443) = &input.kms_key_id {
        scope_442.string(var_443);
    }
    #[allow(unused_mut)]
    let mut scope_444 = writer.prefix("PreSignedUrl");
    if let Some(var_445) = &input.pre_signed_url {
        scope_444.string(var_445);
    }
    #[allow(unused_mut)]
    let mut scope_446 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_447) = &input.enable_iam_database_authentication {
        scope_446.boolean(*var_447);
    }
    #[allow(unused_mut)]
    let mut scope_448 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_449) = &input.enable_performance_insights {
        scope_448.boolean(*var_449);
    }
    #[allow(unused_mut)]
    let mut scope_450 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_451) = &input.performance_insights_kms_key_id {
        scope_450.string(var_451);
    }
    #[allow(unused_mut)]
    let mut scope_452 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_453) = &input.performance_insights_retention_period {
        scope_452.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_453).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_454 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_455) = &input.enable_cloudwatch_logs_exports {
        let mut list_457 = scope_454.start_list(false, None);
        for item_456 in var_455 {
            #[allow(unused_mut)]
            let mut entry_458 = list_457.entry();
            entry_458.string(item_456);
        }
        list_457.finish();
    }
    #[allow(unused_mut)]
    let mut scope_459 = writer.prefix("ProcessorFeatures");
    if let Some(var_460) = &input.processor_features {
        let mut list_462 = scope_459.start_list(false, Some("ProcessorFeature"));
        for item_461 in var_460 {
            #[allow(unused_mut)]
            let mut entry_463 = list_462.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_463, item_461,
            )?;
        }
        list_462.finish();
    }
    #[allow(unused_mut)]
    let mut scope_464 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_465) = &input.use_default_processor_features {
        scope_464.boolean(*var_465);
    }
    #[allow(unused_mut)]
    let mut scope_466 = writer.prefix("DeletionProtection");
    if let Some(var_467) = &input.deletion_protection {
        scope_466.boolean(*var_467);
    }
    #[allow(unused_mut)]
    let mut scope_468 = writer.prefix("Domain");
    if let Some(var_469) = &input.domain {
        scope_468.string(var_469);
    }
    #[allow(unused_mut)]
    let mut scope_470 = writer.prefix("DomainIAMRoleName");
    if let Some(var_471) = &input.domain_iam_role_name {
        scope_470.string(var_471);
    }
    #[allow(unused_mut)]
    let mut scope_472 = writer.prefix("ReplicaMode");
    if let Some(var_473) = &input.replica_mode {
        scope_472.string(var_473.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_474 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_475) = &input.max_allocated_storage {
        scope_474.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_475).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_476 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_477) = &input.custom_iam_instance_profile {
        scope_476.string(var_477);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_parameter_group(
    input: &crate::input::CreateDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_478 = writer.prefix("DBParameterGroupName");
    if let Some(var_479) = &input.db_parameter_group_name {
        scope_478.string(var_479);
    }
    #[allow(unused_mut)]
    let mut scope_480 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_481) = &input.db_parameter_group_family {
        scope_480.string(var_481);
    }
    #[allow(unused_mut)]
    let mut scope_482 = writer.prefix("Description");
    if let Some(var_483) = &input.description {
        scope_482.string(var_483);
    }
    #[allow(unused_mut)]
    let mut scope_484 = writer.prefix("Tags");
    if let Some(var_485) = &input.tags {
        let mut list_487 = scope_484.start_list(false, Some("Tag"));
        for item_486 in var_485 {
            #[allow(unused_mut)]
            let mut entry_488 = list_487.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_488, item_486)?;
        }
        list_487.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_proxy(
    input: &crate::input::CreateDbProxyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBProxy", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_489 = writer.prefix("DBProxyName");
    if let Some(var_490) = &input.db_proxy_name {
        scope_489.string(var_490);
    }
    #[allow(unused_mut)]
    let mut scope_491 = writer.prefix("EngineFamily");
    if let Some(var_492) = &input.engine_family {
        scope_491.string(var_492.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_493 = writer.prefix("Auth");
    if let Some(var_494) = &input.auth {
        let mut list_496 = scope_493.start_list(false, None);
        for item_495 in var_494 {
            #[allow(unused_mut)]
            let mut entry_497 = list_496.entry();
            crate::query_ser::serialize_structure_crate_model_user_auth_config(
                entry_497, item_495,
            )?;
        }
        list_496.finish();
    }
    #[allow(unused_mut)]
    let mut scope_498 = writer.prefix("RoleArn");
    if let Some(var_499) = &input.role_arn {
        scope_498.string(var_499);
    }
    #[allow(unused_mut)]
    let mut scope_500 = writer.prefix("VpcSubnetIds");
    if let Some(var_501) = &input.vpc_subnet_ids {
        let mut list_503 = scope_500.start_list(false, None);
        for item_502 in var_501 {
            #[allow(unused_mut)]
            let mut entry_504 = list_503.entry();
            entry_504.string(item_502);
        }
        list_503.finish();
    }
    #[allow(unused_mut)]
    let mut scope_505 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_506) = &input.vpc_security_group_ids {
        let mut list_508 = scope_505.start_list(false, None);
        for item_507 in var_506 {
            #[allow(unused_mut)]
            let mut entry_509 = list_508.entry();
            entry_509.string(item_507);
        }
        list_508.finish();
    }
    #[allow(unused_mut)]
    let mut scope_510 = writer.prefix("RequireTLS");
    if input.require_tls {
        scope_510.boolean(input.require_tls);
    }
    #[allow(unused_mut)]
    let mut scope_511 = writer.prefix("IdleClientTimeout");
    if let Some(var_512) = &input.idle_client_timeout {
        scope_511.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_512).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_513 = writer.prefix("DebugLogging");
    if input.debug_logging {
        scope_513.boolean(input.debug_logging);
    }
    #[allow(unused_mut)]
    let mut scope_514 = writer.prefix("Tags");
    if let Some(var_515) = &input.tags {
        let mut list_517 = scope_514.start_list(false, Some("Tag"));
        for item_516 in var_515 {
            #[allow(unused_mut)]
            let mut entry_518 = list_517.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_518, item_516)?;
        }
        list_517.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_proxy_endpoint(
    input: &crate::input::CreateDbProxyEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBProxyEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_519 = writer.prefix("DBProxyName");
    if let Some(var_520) = &input.db_proxy_name {
        scope_519.string(var_520);
    }
    #[allow(unused_mut)]
    let mut scope_521 = writer.prefix("DBProxyEndpointName");
    if let Some(var_522) = &input.db_proxy_endpoint_name {
        scope_521.string(var_522);
    }
    #[allow(unused_mut)]
    let mut scope_523 = writer.prefix("VpcSubnetIds");
    if let Some(var_524) = &input.vpc_subnet_ids {
        let mut list_526 = scope_523.start_list(false, None);
        for item_525 in var_524 {
            #[allow(unused_mut)]
            let mut entry_527 = list_526.entry();
            entry_527.string(item_525);
        }
        list_526.finish();
    }
    #[allow(unused_mut)]
    let mut scope_528 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_529) = &input.vpc_security_group_ids {
        let mut list_531 = scope_528.start_list(false, None);
        for item_530 in var_529 {
            #[allow(unused_mut)]
            let mut entry_532 = list_531.entry();
            entry_532.string(item_530);
        }
        list_531.finish();
    }
    #[allow(unused_mut)]
    let mut scope_533 = writer.prefix("TargetRole");
    if let Some(var_534) = &input.target_role {
        scope_533.string(var_534.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_535 = writer.prefix("Tags");
    if let Some(var_536) = &input.tags {
        let mut list_538 = scope_535.start_list(false, Some("Tag"));
        for item_537 in var_536 {
            #[allow(unused_mut)]
            let mut entry_539 = list_538.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_539, item_537)?;
        }
        list_538.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_security_group(
    input: &crate::input::CreateDbSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBSecurityGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_540 = writer.prefix("DBSecurityGroupName");
    if let Some(var_541) = &input.db_security_group_name {
        scope_540.string(var_541);
    }
    #[allow(unused_mut)]
    let mut scope_542 = writer.prefix("DBSecurityGroupDescription");
    if let Some(var_543) = &input.db_security_group_description {
        scope_542.string(var_543);
    }
    #[allow(unused_mut)]
    let mut scope_544 = writer.prefix("Tags");
    if let Some(var_545) = &input.tags {
        let mut list_547 = scope_544.start_list(false, Some("Tag"));
        for item_546 in var_545 {
            #[allow(unused_mut)]
            let mut entry_548 = list_547.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_548, item_546)?;
        }
        list_547.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_snapshot(
    input: &crate::input::CreateDbSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "CreateDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_549 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_550) = &input.db_snapshot_identifier {
        scope_549.string(var_550);
    }
    #[allow(unused_mut)]
    let mut scope_551 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_552) = &input.db_instance_identifier {
        scope_551.string(var_552);
    }
    #[allow(unused_mut)]
    let mut scope_553 = writer.prefix("Tags");
    if let Some(var_554) = &input.tags {
        let mut list_556 = scope_553.start_list(false, Some("Tag"));
        for item_555 in var_554 {
            #[allow(unused_mut)]
            let mut entry_557 = list_556.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_557, item_555)?;
        }
        list_556.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_db_subnet_group(
    input: &crate::input::CreateDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_558 = writer.prefix("DBSubnetGroupName");
    if let Some(var_559) = &input.db_subnet_group_name {
        scope_558.string(var_559);
    }
    #[allow(unused_mut)]
    let mut scope_560 = writer.prefix("DBSubnetGroupDescription");
    if let Some(var_561) = &input.db_subnet_group_description {
        scope_560.string(var_561);
    }
    #[allow(unused_mut)]
    let mut scope_562 = writer.prefix("SubnetIds");
    if let Some(var_563) = &input.subnet_ids {
        let mut list_565 = scope_562.start_list(false, Some("SubnetIdentifier"));
        for item_564 in var_563 {
            #[allow(unused_mut)]
            let mut entry_566 = list_565.entry();
            entry_566.string(item_564);
        }
        list_565.finish();
    }
    #[allow(unused_mut)]
    let mut scope_567 = writer.prefix("Tags");
    if let Some(var_568) = &input.tags {
        let mut list_570 = scope_567.start_list(false, Some("Tag"));
        for item_569 in var_568 {
            #[allow(unused_mut)]
            let mut entry_571 = list_570.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_571, item_569)?;
        }
        list_570.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_event_subscription(
    input: &crate::input::CreateEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_572 = writer.prefix("SubscriptionName");
    if let Some(var_573) = &input.subscription_name {
        scope_572.string(var_573);
    }
    #[allow(unused_mut)]
    let mut scope_574 = writer.prefix("SnsTopicArn");
    if let Some(var_575) = &input.sns_topic_arn {
        scope_574.string(var_575);
    }
    #[allow(unused_mut)]
    let mut scope_576 = writer.prefix("SourceType");
    if let Some(var_577) = &input.source_type {
        scope_576.string(var_577);
    }
    #[allow(unused_mut)]
    let mut scope_578 = writer.prefix("EventCategories");
    if let Some(var_579) = &input.event_categories {
        let mut list_581 = scope_578.start_list(false, Some("EventCategory"));
        for item_580 in var_579 {
            #[allow(unused_mut)]
            let mut entry_582 = list_581.entry();
            entry_582.string(item_580);
        }
        list_581.finish();
    }
    #[allow(unused_mut)]
    let mut scope_583 = writer.prefix("SourceIds");
    if let Some(var_584) = &input.source_ids {
        let mut list_586 = scope_583.start_list(false, Some("SourceId"));
        for item_585 in var_584 {
            #[allow(unused_mut)]
            let mut entry_587 = list_586.entry();
            entry_587.string(item_585);
        }
        list_586.finish();
    }
    #[allow(unused_mut)]
    let mut scope_588 = writer.prefix("Enabled");
    if let Some(var_589) = &input.enabled {
        scope_588.boolean(*var_589);
    }
    #[allow(unused_mut)]
    let mut scope_590 = writer.prefix("Tags");
    if let Some(var_591) = &input.tags {
        let mut list_593 = scope_590.start_list(false, Some("Tag"));
        for item_592 in var_591 {
            #[allow(unused_mut)]
            let mut entry_594 = list_593.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_594, item_592)?;
        }
        list_593.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_global_cluster(
    input: &crate::input::CreateGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_595 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_596) = &input.global_cluster_identifier {
        scope_595.string(var_596);
    }
    #[allow(unused_mut)]
    let mut scope_597 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_598) = &input.source_db_cluster_identifier {
        scope_597.string(var_598);
    }
    #[allow(unused_mut)]
    let mut scope_599 = writer.prefix("Engine");
    if let Some(var_600) = &input.engine {
        scope_599.string(var_600);
    }
    #[allow(unused_mut)]
    let mut scope_601 = writer.prefix("EngineVersion");
    if let Some(var_602) = &input.engine_version {
        scope_601.string(var_602);
    }
    #[allow(unused_mut)]
    let mut scope_603 = writer.prefix("DeletionProtection");
    if let Some(var_604) = &input.deletion_protection {
        scope_603.boolean(*var_604);
    }
    #[allow(unused_mut)]
    let mut scope_605 = writer.prefix("DatabaseName");
    if let Some(var_606) = &input.database_name {
        scope_605.string(var_606);
    }
    #[allow(unused_mut)]
    let mut scope_607 = writer.prefix("StorageEncrypted");
    if let Some(var_608) = &input.storage_encrypted {
        scope_607.boolean(*var_608);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_create_option_group(
    input: &crate::input::CreateOptionGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "CreateOptionGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_609 = writer.prefix("OptionGroupName");
    if let Some(var_610) = &input.option_group_name {
        scope_609.string(var_610);
    }
    #[allow(unused_mut)]
    let mut scope_611 = writer.prefix("EngineName");
    if let Some(var_612) = &input.engine_name {
        scope_611.string(var_612);
    }
    #[allow(unused_mut)]
    let mut scope_613 = writer.prefix("MajorEngineVersion");
    if let Some(var_614) = &input.major_engine_version {
        scope_613.string(var_614);
    }
    #[allow(unused_mut)]
    let mut scope_615 = writer.prefix("OptionGroupDescription");
    if let Some(var_616) = &input.option_group_description {
        scope_615.string(var_616);
    }
    #[allow(unused_mut)]
    let mut scope_617 = writer.prefix("Tags");
    if let Some(var_618) = &input.tags {
        let mut list_620 = scope_617.start_list(false, Some("Tag"));
        for item_619 in var_618 {
            #[allow(unused_mut)]
            let mut entry_621 = list_620.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_621, item_619)?;
        }
        list_620.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_custom_availability_zone(
    input: &crate::input::DeleteCustomAvailabilityZoneInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomAvailabilityZone", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_622 = writer.prefix("CustomAvailabilityZoneId");
    if let Some(var_623) = &input.custom_availability_zone_id {
        scope_622.string(var_623);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_custom_db_engine_version(
    input: &crate::input::DeleteCustomDbEngineVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteCustomDBEngineVersion", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_624 = writer.prefix("Engine");
    if let Some(var_625) = &input.engine {
        scope_624.string(var_625);
    }
    #[allow(unused_mut)]
    let mut scope_626 = writer.prefix("EngineVersion");
    if let Some(var_627) = &input.engine_version {
        scope_626.string(var_627);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster(
    input: &crate::input::DeleteDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_628 = writer.prefix("DBClusterIdentifier");
    if let Some(var_629) = &input.db_cluster_identifier {
        scope_628.string(var_629);
    }
    #[allow(unused_mut)]
    let mut scope_630 = writer.prefix("SkipFinalSnapshot");
    if input.skip_final_snapshot {
        scope_630.boolean(input.skip_final_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_631 = writer.prefix("FinalDBSnapshotIdentifier");
    if let Some(var_632) = &input.final_db_snapshot_identifier {
        scope_631.string(var_632);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_endpoint(
    input: &crate::input::DeleteDbClusterEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_633 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_634) = &input.db_cluster_endpoint_identifier {
        scope_633.string(var_634);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_parameter_group(
    input: &crate::input::DeleteDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_635 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_636) = &input.db_cluster_parameter_group_name {
        scope_635.string(var_636);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_cluster_snapshot(
    input: &crate::input::DeleteDbClusterSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBClusterSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_637 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_638) = &input.db_cluster_snapshot_identifier {
        scope_637.string(var_638);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_instance(
    input: &crate::input::DeleteDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_639 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_640) = &input.db_instance_identifier {
        scope_639.string(var_640);
    }
    #[allow(unused_mut)]
    let mut scope_641 = writer.prefix("SkipFinalSnapshot");
    if input.skip_final_snapshot {
        scope_641.boolean(input.skip_final_snapshot);
    }
    #[allow(unused_mut)]
    let mut scope_642 = writer.prefix("FinalDBSnapshotIdentifier");
    if let Some(var_643) = &input.final_db_snapshot_identifier {
        scope_642.string(var_643);
    }
    #[allow(unused_mut)]
    let mut scope_644 = writer.prefix("DeleteAutomatedBackups");
    if let Some(var_645) = &input.delete_automated_backups {
        scope_644.boolean(*var_645);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_instance_automated_backup(
    input: &crate::input::DeleteDbInstanceAutomatedBackupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DeleteDBInstanceAutomatedBackup",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_646 = writer.prefix("DbiResourceId");
    if let Some(var_647) = &input.dbi_resource_id {
        scope_646.string(var_647);
    }
    #[allow(unused_mut)]
    let mut scope_648 = writer.prefix("DBInstanceAutomatedBackupsArn");
    if let Some(var_649) = &input.db_instance_automated_backups_arn {
        scope_648.string(var_649);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_parameter_group(
    input: &crate::input::DeleteDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_650 = writer.prefix("DBParameterGroupName");
    if let Some(var_651) = &input.db_parameter_group_name {
        scope_650.string(var_651);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_proxy(
    input: &crate::input::DeleteDbProxyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBProxy", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_652 = writer.prefix("DBProxyName");
    if let Some(var_653) = &input.db_proxy_name {
        scope_652.string(var_653);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_proxy_endpoint(
    input: &crate::input::DeleteDbProxyEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBProxyEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_654 = writer.prefix("DBProxyEndpointName");
    if let Some(var_655) = &input.db_proxy_endpoint_name {
        scope_654.string(var_655);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_security_group(
    input: &crate::input::DeleteDbSecurityGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBSecurityGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_656 = writer.prefix("DBSecurityGroupName");
    if let Some(var_657) = &input.db_security_group_name {
        scope_656.string(var_657);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_snapshot(
    input: &crate::input::DeleteDbSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_658 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_659) = &input.db_snapshot_identifier {
        scope_658.string(var_659);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_db_subnet_group(
    input: &crate::input::DeleteDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_660 = writer.prefix("DBSubnetGroupName");
    if let Some(var_661) = &input.db_subnet_group_name {
        scope_660.string(var_661);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_event_subscription(
    input: &crate::input::DeleteEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_662 = writer.prefix("SubscriptionName");
    if let Some(var_663) = &input.subscription_name {
        scope_662.string(var_663);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_global_cluster(
    input: &crate::input::DeleteGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_664 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_665) = &input.global_cluster_identifier {
        scope_664.string(var_665);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_installation_media(
    input: &crate::input::DeleteInstallationMediaInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteInstallationMedia", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_666 = writer.prefix("InstallationMediaId");
    if let Some(var_667) = &input.installation_media_id {
        scope_666.string(var_667);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_delete_option_group(
    input: &crate::input::DeleteOptionGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeleteOptionGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_668 = writer.prefix("OptionGroupName");
    if let Some(var_669) = &input.option_group_name {
        scope_668.string(var_669);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_deregister_db_proxy_targets(
    input: &crate::input::DeregisterDbProxyTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DeregisterDBProxyTargets", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_670 = writer.prefix("DBProxyName");
    if let Some(var_671) = &input.db_proxy_name {
        scope_670.string(var_671);
    }
    #[allow(unused_mut)]
    let mut scope_672 = writer.prefix("TargetGroupName");
    if let Some(var_673) = &input.target_group_name {
        scope_672.string(var_673);
    }
    #[allow(unused_mut)]
    let mut scope_674 = writer.prefix("DBInstanceIdentifiers");
    if let Some(var_675) = &input.db_instance_identifiers {
        let mut list_677 = scope_674.start_list(false, None);
        for item_676 in var_675 {
            #[allow(unused_mut)]
            let mut entry_678 = list_677.entry();
            entry_678.string(item_676);
        }
        list_677.finish();
    }
    #[allow(unused_mut)]
    let mut scope_679 = writer.prefix("DBClusterIdentifiers");
    if let Some(var_680) = &input.db_cluster_identifiers {
        let mut list_682 = scope_679.start_list(false, None);
        for item_681 in var_680 {
            #[allow(unused_mut)]
            let mut entry_683 = list_682.entry();
            entry_683.string(item_681);
        }
        list_682.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_account_attributes(
    input: &crate::input::DescribeAccountAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let _ = input;
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeAccountAttributes", "2014-10-31");
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_certificates(
    input: &crate::input::DescribeCertificatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeCertificates", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_684 = writer.prefix("CertificateIdentifier");
    if let Some(var_685) = &input.certificate_identifier {
        scope_684.string(var_685);
    }
    #[allow(unused_mut)]
    let mut scope_686 = writer.prefix("Filters");
    if let Some(var_687) = &input.filters {
        let mut list_689 = scope_686.start_list(false, Some("Filter"));
        for item_688 in var_687 {
            #[allow(unused_mut)]
            let mut entry_690 = list_689.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_690, item_688)?;
        }
        list_689.finish();
    }
    #[allow(unused_mut)]
    let mut scope_691 = writer.prefix("MaxRecords");
    if let Some(var_692) = &input.max_records {
        scope_691.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_692).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_693 = writer.prefix("Marker");
    if let Some(var_694) = &input.marker {
        scope_693.string(var_694);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_custom_availability_zones(
    input: &crate::input::DescribeCustomAvailabilityZonesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeCustomAvailabilityZones",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_695 = writer.prefix("CustomAvailabilityZoneId");
    if let Some(var_696) = &input.custom_availability_zone_id {
        scope_695.string(var_696);
    }
    #[allow(unused_mut)]
    let mut scope_697 = writer.prefix("Filters");
    if let Some(var_698) = &input.filters {
        let mut list_700 = scope_697.start_list(false, Some("Filter"));
        for item_699 in var_698 {
            #[allow(unused_mut)]
            let mut entry_701 = list_700.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_701, item_699)?;
        }
        list_700.finish();
    }
    #[allow(unused_mut)]
    let mut scope_702 = writer.prefix("MaxRecords");
    if let Some(var_703) = &input.max_records {
        scope_702.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_703).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_704 = writer.prefix("Marker");
    if let Some(var_705) = &input.marker {
        scope_704.string(var_705);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_backtracks(
    input: &crate::input::DescribeDbClusterBacktracksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterBacktracks", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_706 = writer.prefix("DBClusterIdentifier");
    if let Some(var_707) = &input.db_cluster_identifier {
        scope_706.string(var_707);
    }
    #[allow(unused_mut)]
    let mut scope_708 = writer.prefix("BacktrackIdentifier");
    if let Some(var_709) = &input.backtrack_identifier {
        scope_708.string(var_709);
    }
    #[allow(unused_mut)]
    let mut scope_710 = writer.prefix("Filters");
    if let Some(var_711) = &input.filters {
        let mut list_713 = scope_710.start_list(false, Some("Filter"));
        for item_712 in var_711 {
            #[allow(unused_mut)]
            let mut entry_714 = list_713.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_714, item_712)?;
        }
        list_713.finish();
    }
    #[allow(unused_mut)]
    let mut scope_715 = writer.prefix("MaxRecords");
    if let Some(var_716) = &input.max_records {
        scope_715.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_716).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_717 = writer.prefix("Marker");
    if let Some(var_718) = &input.marker {
        scope_717.string(var_718);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_endpoints(
    input: &crate::input::DescribeDbClusterEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterEndpoints", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_719 = writer.prefix("DBClusterIdentifier");
    if let Some(var_720) = &input.db_cluster_identifier {
        scope_719.string(var_720);
    }
    #[allow(unused_mut)]
    let mut scope_721 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_722) = &input.db_cluster_endpoint_identifier {
        scope_721.string(var_722);
    }
    #[allow(unused_mut)]
    let mut scope_723 = writer.prefix("Filters");
    if let Some(var_724) = &input.filters {
        let mut list_726 = scope_723.start_list(false, Some("Filter"));
        for item_725 in var_724 {
            #[allow(unused_mut)]
            let mut entry_727 = list_726.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_727, item_725)?;
        }
        list_726.finish();
    }
    #[allow(unused_mut)]
    let mut scope_728 = writer.prefix("MaxRecords");
    if let Some(var_729) = &input.max_records {
        scope_728.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_729).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_730 = writer.prefix("Marker");
    if let Some(var_731) = &input.marker {
        scope_730.string(var_731);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_parameter_groups(
    input: &crate::input::DescribeDbClusterParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDBClusterParameterGroups",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_732 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_733) = &input.db_cluster_parameter_group_name {
        scope_732.string(var_733);
    }
    #[allow(unused_mut)]
    let mut scope_734 = writer.prefix("Filters");
    if let Some(var_735) = &input.filters {
        let mut list_737 = scope_734.start_list(false, Some("Filter"));
        for item_736 in var_735 {
            #[allow(unused_mut)]
            let mut entry_738 = list_737.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_738, item_736)?;
        }
        list_737.finish();
    }
    #[allow(unused_mut)]
    let mut scope_739 = writer.prefix("MaxRecords");
    if let Some(var_740) = &input.max_records {
        scope_739.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_740).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_741 = writer.prefix("Marker");
    if let Some(var_742) = &input.marker {
        scope_741.string(var_742);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_parameters(
    input: &crate::input::DescribeDbClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterParameters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_743 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_744) = &input.db_cluster_parameter_group_name {
        scope_743.string(var_744);
    }
    #[allow(unused_mut)]
    let mut scope_745 = writer.prefix("Source");
    if let Some(var_746) = &input.source {
        scope_745.string(var_746);
    }
    #[allow(unused_mut)]
    let mut scope_747 = writer.prefix("Filters");
    if let Some(var_748) = &input.filters {
        let mut list_750 = scope_747.start_list(false, Some("Filter"));
        for item_749 in var_748 {
            #[allow(unused_mut)]
            let mut entry_751 = list_750.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_751, item_749)?;
        }
        list_750.finish();
    }
    #[allow(unused_mut)]
    let mut scope_752 = writer.prefix("MaxRecords");
    if let Some(var_753) = &input.max_records {
        scope_752.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_753).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_754 = writer.prefix("Marker");
    if let Some(var_755) = &input.marker {
        scope_754.string(var_755);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_clusters(
    input: &crate::input::DescribeDbClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_756 = writer.prefix("DBClusterIdentifier");
    if let Some(var_757) = &input.db_cluster_identifier {
        scope_756.string(var_757);
    }
    #[allow(unused_mut)]
    let mut scope_758 = writer.prefix("Filters");
    if let Some(var_759) = &input.filters {
        let mut list_761 = scope_758.start_list(false, Some("Filter"));
        for item_760 in var_759 {
            #[allow(unused_mut)]
            let mut entry_762 = list_761.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_762, item_760)?;
        }
        list_761.finish();
    }
    #[allow(unused_mut)]
    let mut scope_763 = writer.prefix("MaxRecords");
    if let Some(var_764) = &input.max_records {
        scope_763.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_764).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_765 = writer.prefix("Marker");
    if let Some(var_766) = &input.marker {
        scope_765.string(var_766);
    }
    #[allow(unused_mut)]
    let mut scope_767 = writer.prefix("IncludeShared");
    if input.include_shared {
        scope_767.boolean(input.include_shared);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_snapshot_attributes(
    input: &crate::input::DescribeDbClusterSnapshotAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDBClusterSnapshotAttributes",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_768 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_769) = &input.db_cluster_snapshot_identifier {
        scope_768.string(var_769);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_cluster_snapshots(
    input: &crate::input::DescribeDbClusterSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBClusterSnapshots", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_770 = writer.prefix("DBClusterIdentifier");
    if let Some(var_771) = &input.db_cluster_identifier {
        scope_770.string(var_771);
    }
    #[allow(unused_mut)]
    let mut scope_772 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_773) = &input.db_cluster_snapshot_identifier {
        scope_772.string(var_773);
    }
    #[allow(unused_mut)]
    let mut scope_774 = writer.prefix("SnapshotType");
    if let Some(var_775) = &input.snapshot_type {
        scope_774.string(var_775);
    }
    #[allow(unused_mut)]
    let mut scope_776 = writer.prefix("Filters");
    if let Some(var_777) = &input.filters {
        let mut list_779 = scope_776.start_list(false, Some("Filter"));
        for item_778 in var_777 {
            #[allow(unused_mut)]
            let mut entry_780 = list_779.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_780, item_778)?;
        }
        list_779.finish();
    }
    #[allow(unused_mut)]
    let mut scope_781 = writer.prefix("MaxRecords");
    if let Some(var_782) = &input.max_records {
        scope_781.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_782).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_783 = writer.prefix("Marker");
    if let Some(var_784) = &input.marker {
        scope_783.string(var_784);
    }
    #[allow(unused_mut)]
    let mut scope_785 = writer.prefix("IncludeShared");
    if input.include_shared {
        scope_785.boolean(input.include_shared);
    }
    #[allow(unused_mut)]
    let mut scope_786 = writer.prefix("IncludePublic");
    if input.include_public {
        scope_786.boolean(input.include_public);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_engine_versions(
    input: &crate::input::DescribeDbEngineVersionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBEngineVersions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_787 = writer.prefix("Engine");
    if let Some(var_788) = &input.engine {
        scope_787.string(var_788);
    }
    #[allow(unused_mut)]
    let mut scope_789 = writer.prefix("EngineVersion");
    if let Some(var_790) = &input.engine_version {
        scope_789.string(var_790);
    }
    #[allow(unused_mut)]
    let mut scope_791 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_792) = &input.db_parameter_group_family {
        scope_791.string(var_792);
    }
    #[allow(unused_mut)]
    let mut scope_793 = writer.prefix("Filters");
    if let Some(var_794) = &input.filters {
        let mut list_796 = scope_793.start_list(false, Some("Filter"));
        for item_795 in var_794 {
            #[allow(unused_mut)]
            let mut entry_797 = list_796.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_797, item_795)?;
        }
        list_796.finish();
    }
    #[allow(unused_mut)]
    let mut scope_798 = writer.prefix("MaxRecords");
    if let Some(var_799) = &input.max_records {
        scope_798.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_799).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_800 = writer.prefix("Marker");
    if let Some(var_801) = &input.marker {
        scope_800.string(var_801);
    }
    #[allow(unused_mut)]
    let mut scope_802 = writer.prefix("DefaultOnly");
    if input.default_only {
        scope_802.boolean(input.default_only);
    }
    #[allow(unused_mut)]
    let mut scope_803 = writer.prefix("ListSupportedCharacterSets");
    if let Some(var_804) = &input.list_supported_character_sets {
        scope_803.boolean(*var_804);
    }
    #[allow(unused_mut)]
    let mut scope_805 = writer.prefix("ListSupportedTimezones");
    if let Some(var_806) = &input.list_supported_timezones {
        scope_805.boolean(*var_806);
    }
    #[allow(unused_mut)]
    let mut scope_807 = writer.prefix("IncludeAll");
    if let Some(var_808) = &input.include_all {
        scope_807.boolean(*var_808);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_instance_automated_backups(
    input: &crate::input::DescribeDbInstanceAutomatedBackupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeDBInstanceAutomatedBackups",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_809 = writer.prefix("DbiResourceId");
    if let Some(var_810) = &input.dbi_resource_id {
        scope_809.string(var_810);
    }
    #[allow(unused_mut)]
    let mut scope_811 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_812) = &input.db_instance_identifier {
        scope_811.string(var_812);
    }
    #[allow(unused_mut)]
    let mut scope_813 = writer.prefix("Filters");
    if let Some(var_814) = &input.filters {
        let mut list_816 = scope_813.start_list(false, Some("Filter"));
        for item_815 in var_814 {
            #[allow(unused_mut)]
            let mut entry_817 = list_816.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_817, item_815)?;
        }
        list_816.finish();
    }
    #[allow(unused_mut)]
    let mut scope_818 = writer.prefix("MaxRecords");
    if let Some(var_819) = &input.max_records {
        scope_818.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_819).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_820 = writer.prefix("Marker");
    if let Some(var_821) = &input.marker {
        scope_820.string(var_821);
    }
    #[allow(unused_mut)]
    let mut scope_822 = writer.prefix("DBInstanceAutomatedBackupsArn");
    if let Some(var_823) = &input.db_instance_automated_backups_arn {
        scope_822.string(var_823);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_instances(
    input: &crate::input::DescribeDbInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBInstances", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_824 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_825) = &input.db_instance_identifier {
        scope_824.string(var_825);
    }
    #[allow(unused_mut)]
    let mut scope_826 = writer.prefix("Filters");
    if let Some(var_827) = &input.filters {
        let mut list_829 = scope_826.start_list(false, Some("Filter"));
        for item_828 in var_827 {
            #[allow(unused_mut)]
            let mut entry_830 = list_829.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_830, item_828)?;
        }
        list_829.finish();
    }
    #[allow(unused_mut)]
    let mut scope_831 = writer.prefix("MaxRecords");
    if let Some(var_832) = &input.max_records {
        scope_831.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_832).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_833 = writer.prefix("Marker");
    if let Some(var_834) = &input.marker {
        scope_833.string(var_834);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_log_files(
    input: &crate::input::DescribeDbLogFilesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBLogFiles", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_835 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_836) = &input.db_instance_identifier {
        scope_835.string(var_836);
    }
    #[allow(unused_mut)]
    let mut scope_837 = writer.prefix("FilenameContains");
    if let Some(var_838) = &input.filename_contains {
        scope_837.string(var_838);
    }
    #[allow(unused_mut)]
    let mut scope_839 = writer.prefix("FileLastWritten");
    if input.file_last_written != 0 {
        scope_839.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.file_last_written).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_840 = writer.prefix("FileSize");
    if input.file_size != 0 {
        scope_840.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.file_size).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_841 = writer.prefix("Filters");
    if let Some(var_842) = &input.filters {
        let mut list_844 = scope_841.start_list(false, Some("Filter"));
        for item_843 in var_842 {
            #[allow(unused_mut)]
            let mut entry_845 = list_844.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_845, item_843)?;
        }
        list_844.finish();
    }
    #[allow(unused_mut)]
    let mut scope_846 = writer.prefix("MaxRecords");
    if let Some(var_847) = &input.max_records {
        scope_846.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_847).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_848 = writer.prefix("Marker");
    if let Some(var_849) = &input.marker {
        scope_848.string(var_849);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_parameter_groups(
    input: &crate::input::DescribeDbParameterGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBParameterGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_850 = writer.prefix("DBParameterGroupName");
    if let Some(var_851) = &input.db_parameter_group_name {
        scope_850.string(var_851);
    }
    #[allow(unused_mut)]
    let mut scope_852 = writer.prefix("Filters");
    if let Some(var_853) = &input.filters {
        let mut list_855 = scope_852.start_list(false, Some("Filter"));
        for item_854 in var_853 {
            #[allow(unused_mut)]
            let mut entry_856 = list_855.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_856, item_854)?;
        }
        list_855.finish();
    }
    #[allow(unused_mut)]
    let mut scope_857 = writer.prefix("MaxRecords");
    if let Some(var_858) = &input.max_records {
        scope_857.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_858).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_859 = writer.prefix("Marker");
    if let Some(var_860) = &input.marker {
        scope_859.string(var_860);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_parameters(
    input: &crate::input::DescribeDbParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBParameters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_861 = writer.prefix("DBParameterGroupName");
    if let Some(var_862) = &input.db_parameter_group_name {
        scope_861.string(var_862);
    }
    #[allow(unused_mut)]
    let mut scope_863 = writer.prefix("Source");
    if let Some(var_864) = &input.source {
        scope_863.string(var_864);
    }
    #[allow(unused_mut)]
    let mut scope_865 = writer.prefix("Filters");
    if let Some(var_866) = &input.filters {
        let mut list_868 = scope_865.start_list(false, Some("Filter"));
        for item_867 in var_866 {
            #[allow(unused_mut)]
            let mut entry_869 = list_868.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_869, item_867)?;
        }
        list_868.finish();
    }
    #[allow(unused_mut)]
    let mut scope_870 = writer.prefix("MaxRecords");
    if let Some(var_871) = &input.max_records {
        scope_870.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_871).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_872 = writer.prefix("Marker");
    if let Some(var_873) = &input.marker {
        scope_872.string(var_873);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_proxies(
    input: &crate::input::DescribeDbProxiesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBProxies", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_874 = writer.prefix("DBProxyName");
    if let Some(var_875) = &input.db_proxy_name {
        scope_874.string(var_875);
    }
    #[allow(unused_mut)]
    let mut scope_876 = writer.prefix("Filters");
    if let Some(var_877) = &input.filters {
        let mut list_879 = scope_876.start_list(false, Some("Filter"));
        for item_878 in var_877 {
            #[allow(unused_mut)]
            let mut entry_880 = list_879.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_880, item_878)?;
        }
        list_879.finish();
    }
    #[allow(unused_mut)]
    let mut scope_881 = writer.prefix("Marker");
    if let Some(var_882) = &input.marker {
        scope_881.string(var_882);
    }
    #[allow(unused_mut)]
    let mut scope_883 = writer.prefix("MaxRecords");
    if let Some(var_884) = &input.max_records {
        scope_883.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_884).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_proxy_endpoints(
    input: &crate::input::DescribeDbProxyEndpointsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBProxyEndpoints", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_885 = writer.prefix("DBProxyName");
    if let Some(var_886) = &input.db_proxy_name {
        scope_885.string(var_886);
    }
    #[allow(unused_mut)]
    let mut scope_887 = writer.prefix("DBProxyEndpointName");
    if let Some(var_888) = &input.db_proxy_endpoint_name {
        scope_887.string(var_888);
    }
    #[allow(unused_mut)]
    let mut scope_889 = writer.prefix("Filters");
    if let Some(var_890) = &input.filters {
        let mut list_892 = scope_889.start_list(false, Some("Filter"));
        for item_891 in var_890 {
            #[allow(unused_mut)]
            let mut entry_893 = list_892.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_893, item_891)?;
        }
        list_892.finish();
    }
    #[allow(unused_mut)]
    let mut scope_894 = writer.prefix("Marker");
    if let Some(var_895) = &input.marker {
        scope_894.string(var_895);
    }
    #[allow(unused_mut)]
    let mut scope_896 = writer.prefix("MaxRecords");
    if let Some(var_897) = &input.max_records {
        scope_896.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_897).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_proxy_target_groups(
    input: &crate::input::DescribeDbProxyTargetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBProxyTargetGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_898 = writer.prefix("DBProxyName");
    if let Some(var_899) = &input.db_proxy_name {
        scope_898.string(var_899);
    }
    #[allow(unused_mut)]
    let mut scope_900 = writer.prefix("TargetGroupName");
    if let Some(var_901) = &input.target_group_name {
        scope_900.string(var_901);
    }
    #[allow(unused_mut)]
    let mut scope_902 = writer.prefix("Filters");
    if let Some(var_903) = &input.filters {
        let mut list_905 = scope_902.start_list(false, Some("Filter"));
        for item_904 in var_903 {
            #[allow(unused_mut)]
            let mut entry_906 = list_905.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_906, item_904)?;
        }
        list_905.finish();
    }
    #[allow(unused_mut)]
    let mut scope_907 = writer.prefix("Marker");
    if let Some(var_908) = &input.marker {
        scope_907.string(var_908);
    }
    #[allow(unused_mut)]
    let mut scope_909 = writer.prefix("MaxRecords");
    if let Some(var_910) = &input.max_records {
        scope_909.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_910).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_proxy_targets(
    input: &crate::input::DescribeDbProxyTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBProxyTargets", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_911 = writer.prefix("DBProxyName");
    if let Some(var_912) = &input.db_proxy_name {
        scope_911.string(var_912);
    }
    #[allow(unused_mut)]
    let mut scope_913 = writer.prefix("TargetGroupName");
    if let Some(var_914) = &input.target_group_name {
        scope_913.string(var_914);
    }
    #[allow(unused_mut)]
    let mut scope_915 = writer.prefix("Filters");
    if let Some(var_916) = &input.filters {
        let mut list_918 = scope_915.start_list(false, Some("Filter"));
        for item_917 in var_916 {
            #[allow(unused_mut)]
            let mut entry_919 = list_918.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_919, item_917)?;
        }
        list_918.finish();
    }
    #[allow(unused_mut)]
    let mut scope_920 = writer.prefix("Marker");
    if let Some(var_921) = &input.marker {
        scope_920.string(var_921);
    }
    #[allow(unused_mut)]
    let mut scope_922 = writer.prefix("MaxRecords");
    if let Some(var_923) = &input.max_records {
        scope_922.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_923).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_security_groups(
    input: &crate::input::DescribeDbSecurityGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSecurityGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_924 = writer.prefix("DBSecurityGroupName");
    if let Some(var_925) = &input.db_security_group_name {
        scope_924.string(var_925);
    }
    #[allow(unused_mut)]
    let mut scope_926 = writer.prefix("Filters");
    if let Some(var_927) = &input.filters {
        let mut list_929 = scope_926.start_list(false, Some("Filter"));
        for item_928 in var_927 {
            #[allow(unused_mut)]
            let mut entry_930 = list_929.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_930, item_928)?;
        }
        list_929.finish();
    }
    #[allow(unused_mut)]
    let mut scope_931 = writer.prefix("MaxRecords");
    if let Some(var_932) = &input.max_records {
        scope_931.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_932).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_933 = writer.prefix("Marker");
    if let Some(var_934) = &input.marker {
        scope_933.string(var_934);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_snapshot_attributes(
    input: &crate::input::DescribeDbSnapshotAttributesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSnapshotAttributes", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_935 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_936) = &input.db_snapshot_identifier {
        scope_935.string(var_936);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_snapshots(
    input: &crate::input::DescribeDbSnapshotsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSnapshots", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_937 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_938) = &input.db_instance_identifier {
        scope_937.string(var_938);
    }
    #[allow(unused_mut)]
    let mut scope_939 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_940) = &input.db_snapshot_identifier {
        scope_939.string(var_940);
    }
    #[allow(unused_mut)]
    let mut scope_941 = writer.prefix("SnapshotType");
    if let Some(var_942) = &input.snapshot_type {
        scope_941.string(var_942);
    }
    #[allow(unused_mut)]
    let mut scope_943 = writer.prefix("Filters");
    if let Some(var_944) = &input.filters {
        let mut list_946 = scope_943.start_list(false, Some("Filter"));
        for item_945 in var_944 {
            #[allow(unused_mut)]
            let mut entry_947 = list_946.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_947, item_945)?;
        }
        list_946.finish();
    }
    #[allow(unused_mut)]
    let mut scope_948 = writer.prefix("MaxRecords");
    if let Some(var_949) = &input.max_records {
        scope_948.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_949).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_950 = writer.prefix("Marker");
    if let Some(var_951) = &input.marker {
        scope_950.string(var_951);
    }
    #[allow(unused_mut)]
    let mut scope_952 = writer.prefix("IncludeShared");
    if input.include_shared {
        scope_952.boolean(input.include_shared);
    }
    #[allow(unused_mut)]
    let mut scope_953 = writer.prefix("IncludePublic");
    if input.include_public {
        scope_953.boolean(input.include_public);
    }
    #[allow(unused_mut)]
    let mut scope_954 = writer.prefix("DbiResourceId");
    if let Some(var_955) = &input.dbi_resource_id {
        scope_954.string(var_955);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_db_subnet_groups(
    input: &crate::input::DescribeDbSubnetGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeDBSubnetGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_956 = writer.prefix("DBSubnetGroupName");
    if let Some(var_957) = &input.db_subnet_group_name {
        scope_956.string(var_957);
    }
    #[allow(unused_mut)]
    let mut scope_958 = writer.prefix("Filters");
    if let Some(var_959) = &input.filters {
        let mut list_961 = scope_958.start_list(false, Some("Filter"));
        for item_960 in var_959 {
            #[allow(unused_mut)]
            let mut entry_962 = list_961.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_962, item_960)?;
        }
        list_961.finish();
    }
    #[allow(unused_mut)]
    let mut scope_963 = writer.prefix("MaxRecords");
    if let Some(var_964) = &input.max_records {
        scope_963.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_964).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_965 = writer.prefix("Marker");
    if let Some(var_966) = &input.marker {
        scope_965.string(var_966);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_cluster_parameters(
    input: &crate::input::DescribeEngineDefaultClusterParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEngineDefaultClusterParameters",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_967 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_968) = &input.db_parameter_group_family {
        scope_967.string(var_968);
    }
    #[allow(unused_mut)]
    let mut scope_969 = writer.prefix("Filters");
    if let Some(var_970) = &input.filters {
        let mut list_972 = scope_969.start_list(false, Some("Filter"));
        for item_971 in var_970 {
            #[allow(unused_mut)]
            let mut entry_973 = list_972.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_973, item_971)?;
        }
        list_972.finish();
    }
    #[allow(unused_mut)]
    let mut scope_974 = writer.prefix("MaxRecords");
    if let Some(var_975) = &input.max_records {
        scope_974.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_975).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_976 = writer.prefix("Marker");
    if let Some(var_977) = &input.marker {
        scope_976.string(var_977);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_engine_default_parameters(
    input: &crate::input::DescribeEngineDefaultParametersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeEngineDefaultParameters",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_978 = writer.prefix("DBParameterGroupFamily");
    if let Some(var_979) = &input.db_parameter_group_family {
        scope_978.string(var_979);
    }
    #[allow(unused_mut)]
    let mut scope_980 = writer.prefix("Filters");
    if let Some(var_981) = &input.filters {
        let mut list_983 = scope_980.start_list(false, Some("Filter"));
        for item_982 in var_981 {
            #[allow(unused_mut)]
            let mut entry_984 = list_983.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_984, item_982)?;
        }
        list_983.finish();
    }
    #[allow(unused_mut)]
    let mut scope_985 = writer.prefix("MaxRecords");
    if let Some(var_986) = &input.max_records {
        scope_985.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_986).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_987 = writer.prefix("Marker");
    if let Some(var_988) = &input.marker {
        scope_987.string(var_988);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_categories(
    input: &crate::input::DescribeEventCategoriesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventCategories", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_989 = writer.prefix("SourceType");
    if let Some(var_990) = &input.source_type {
        scope_989.string(var_990);
    }
    #[allow(unused_mut)]
    let mut scope_991 = writer.prefix("Filters");
    if let Some(var_992) = &input.filters {
        let mut list_994 = scope_991.start_list(false, Some("Filter"));
        for item_993 in var_992 {
            #[allow(unused_mut)]
            let mut entry_995 = list_994.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_995, item_993)?;
        }
        list_994.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_events(
    input: &crate::input::DescribeEventsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "DescribeEvents", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_996 = writer.prefix("SourceIdentifier");
    if let Some(var_997) = &input.source_identifier {
        scope_996.string(var_997);
    }
    #[allow(unused_mut)]
    let mut scope_998 = writer.prefix("SourceType");
    if let Some(var_999) = &input.source_type {
        scope_998.string(var_999.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1000 = writer.prefix("StartTime");
    if let Some(var_1001) = &input.start_time {
        scope_1000.date_time(var_1001, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1002 = writer.prefix("EndTime");
    if let Some(var_1003) = &input.end_time {
        scope_1002.date_time(var_1003, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1004 = writer.prefix("Duration");
    if let Some(var_1005) = &input.duration {
        scope_1004.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1005).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1006 = writer.prefix("EventCategories");
    if let Some(var_1007) = &input.event_categories {
        let mut list_1009 = scope_1006.start_list(false, Some("EventCategory"));
        for item_1008 in var_1007 {
            #[allow(unused_mut)]
            let mut entry_1010 = list_1009.entry();
            entry_1010.string(item_1008);
        }
        list_1009.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1011 = writer.prefix("Filters");
    if let Some(var_1012) = &input.filters {
        let mut list_1014 = scope_1011.start_list(false, Some("Filter"));
        for item_1013 in var_1012 {
            #[allow(unused_mut)]
            let mut entry_1015 = list_1014.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1015, item_1013)?;
        }
        list_1014.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1016 = writer.prefix("MaxRecords");
    if let Some(var_1017) = &input.max_records {
        scope_1016.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1017).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1018 = writer.prefix("Marker");
    if let Some(var_1019) = &input.marker {
        scope_1018.string(var_1019);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_event_subscriptions(
    input: &crate::input::DescribeEventSubscriptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeEventSubscriptions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1020 = writer.prefix("SubscriptionName");
    if let Some(var_1021) = &input.subscription_name {
        scope_1020.string(var_1021);
    }
    #[allow(unused_mut)]
    let mut scope_1022 = writer.prefix("Filters");
    if let Some(var_1023) = &input.filters {
        let mut list_1025 = scope_1022.start_list(false, Some("Filter"));
        for item_1024 in var_1023 {
            #[allow(unused_mut)]
            let mut entry_1026 = list_1025.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1026, item_1024)?;
        }
        list_1025.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1027 = writer.prefix("MaxRecords");
    if let Some(var_1028) = &input.max_records {
        scope_1027.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1028).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1029 = writer.prefix("Marker");
    if let Some(var_1030) = &input.marker {
        scope_1029.string(var_1030);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_export_tasks(
    input: &crate::input::DescribeExportTasksInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeExportTasks", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1031 = writer.prefix("ExportTaskIdentifier");
    if let Some(var_1032) = &input.export_task_identifier {
        scope_1031.string(var_1032);
    }
    #[allow(unused_mut)]
    let mut scope_1033 = writer.prefix("SourceArn");
    if let Some(var_1034) = &input.source_arn {
        scope_1033.string(var_1034);
    }
    #[allow(unused_mut)]
    let mut scope_1035 = writer.prefix("Filters");
    if let Some(var_1036) = &input.filters {
        let mut list_1038 = scope_1035.start_list(false, Some("Filter"));
        for item_1037 in var_1036 {
            #[allow(unused_mut)]
            let mut entry_1039 = list_1038.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1039, item_1037)?;
        }
        list_1038.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1040 = writer.prefix("Marker");
    if let Some(var_1041) = &input.marker {
        scope_1040.string(var_1041);
    }
    #[allow(unused_mut)]
    let mut scope_1042 = writer.prefix("MaxRecords");
    if let Some(var_1043) = &input.max_records {
        scope_1042.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1043).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_global_clusters(
    input: &crate::input::DescribeGlobalClustersInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeGlobalClusters", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1044 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_1045) = &input.global_cluster_identifier {
        scope_1044.string(var_1045);
    }
    #[allow(unused_mut)]
    let mut scope_1046 = writer.prefix("Filters");
    if let Some(var_1047) = &input.filters {
        let mut list_1049 = scope_1046.start_list(false, Some("Filter"));
        for item_1048 in var_1047 {
            #[allow(unused_mut)]
            let mut entry_1050 = list_1049.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1050, item_1048)?;
        }
        list_1049.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1051 = writer.prefix("MaxRecords");
    if let Some(var_1052) = &input.max_records {
        scope_1051.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1052).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1053 = writer.prefix("Marker");
    if let Some(var_1054) = &input.marker {
        scope_1053.string(var_1054);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_installation_media(
    input: &crate::input::DescribeInstallationMediaInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeInstallationMedia", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1055 = writer.prefix("InstallationMediaId");
    if let Some(var_1056) = &input.installation_media_id {
        scope_1055.string(var_1056);
    }
    #[allow(unused_mut)]
    let mut scope_1057 = writer.prefix("Filters");
    if let Some(var_1058) = &input.filters {
        let mut list_1060 = scope_1057.start_list(false, Some("Filter"));
        for item_1059 in var_1058 {
            #[allow(unused_mut)]
            let mut entry_1061 = list_1060.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1061, item_1059)?;
        }
        list_1060.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1062 = writer.prefix("MaxRecords");
    if let Some(var_1063) = &input.max_records {
        scope_1062.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1063).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1064 = writer.prefix("Marker");
    if let Some(var_1065) = &input.marker {
        scope_1064.string(var_1065);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_option_group_options(
    input: &crate::input::DescribeOptionGroupOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeOptionGroupOptions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1066 = writer.prefix("EngineName");
    if let Some(var_1067) = &input.engine_name {
        scope_1066.string(var_1067);
    }
    #[allow(unused_mut)]
    let mut scope_1068 = writer.prefix("MajorEngineVersion");
    if let Some(var_1069) = &input.major_engine_version {
        scope_1068.string(var_1069);
    }
    #[allow(unused_mut)]
    let mut scope_1070 = writer.prefix("Filters");
    if let Some(var_1071) = &input.filters {
        let mut list_1073 = scope_1070.start_list(false, Some("Filter"));
        for item_1072 in var_1071 {
            #[allow(unused_mut)]
            let mut entry_1074 = list_1073.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1074, item_1072)?;
        }
        list_1073.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1075 = writer.prefix("MaxRecords");
    if let Some(var_1076) = &input.max_records {
        scope_1075.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1076).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1077 = writer.prefix("Marker");
    if let Some(var_1078) = &input.marker {
        scope_1077.string(var_1078);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_option_groups(
    input: &crate::input::DescribeOptionGroupsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeOptionGroups", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1079 = writer.prefix("OptionGroupName");
    if let Some(var_1080) = &input.option_group_name {
        scope_1079.string(var_1080);
    }
    #[allow(unused_mut)]
    let mut scope_1081 = writer.prefix("Filters");
    if let Some(var_1082) = &input.filters {
        let mut list_1084 = scope_1081.start_list(false, Some("Filter"));
        for item_1083 in var_1082 {
            #[allow(unused_mut)]
            let mut entry_1085 = list_1084.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1085, item_1083)?;
        }
        list_1084.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1086 = writer.prefix("Marker");
    if let Some(var_1087) = &input.marker {
        scope_1086.string(var_1087);
    }
    #[allow(unused_mut)]
    let mut scope_1088 = writer.prefix("MaxRecords");
    if let Some(var_1089) = &input.max_records {
        scope_1088.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1089).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1090 = writer.prefix("EngineName");
    if let Some(var_1091) = &input.engine_name {
        scope_1090.string(var_1091);
    }
    #[allow(unused_mut)]
    let mut scope_1092 = writer.prefix("MajorEngineVersion");
    if let Some(var_1093) = &input.major_engine_version {
        scope_1092.string(var_1093);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_orderable_db_instance_options(
    input: &crate::input::DescribeOrderableDbInstanceOptionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeOrderableDBInstanceOptions",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1094 = writer.prefix("Engine");
    if let Some(var_1095) = &input.engine {
        scope_1094.string(var_1095);
    }
    #[allow(unused_mut)]
    let mut scope_1096 = writer.prefix("EngineVersion");
    if let Some(var_1097) = &input.engine_version {
        scope_1096.string(var_1097);
    }
    #[allow(unused_mut)]
    let mut scope_1098 = writer.prefix("DBInstanceClass");
    if let Some(var_1099) = &input.db_instance_class {
        scope_1098.string(var_1099);
    }
    #[allow(unused_mut)]
    let mut scope_1100 = writer.prefix("LicenseModel");
    if let Some(var_1101) = &input.license_model {
        scope_1100.string(var_1101);
    }
    #[allow(unused_mut)]
    let mut scope_1102 = writer.prefix("AvailabilityZoneGroup");
    if let Some(var_1103) = &input.availability_zone_group {
        scope_1102.string(var_1103);
    }
    #[allow(unused_mut)]
    let mut scope_1104 = writer.prefix("Vpc");
    if let Some(var_1105) = &input.vpc {
        scope_1104.boolean(*var_1105);
    }
    #[allow(unused_mut)]
    let mut scope_1106 = writer.prefix("Filters");
    if let Some(var_1107) = &input.filters {
        let mut list_1109 = scope_1106.start_list(false, Some("Filter"));
        for item_1108 in var_1107 {
            #[allow(unused_mut)]
            let mut entry_1110 = list_1109.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1110, item_1108)?;
        }
        list_1109.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1111 = writer.prefix("MaxRecords");
    if let Some(var_1112) = &input.max_records {
        scope_1111.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1112).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1113 = writer.prefix("Marker");
    if let Some(var_1114) = &input.marker {
        scope_1113.string(var_1114);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_pending_maintenance_actions(
    input: &crate::input::DescribePendingMaintenanceActionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribePendingMaintenanceActions",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1115 = writer.prefix("ResourceIdentifier");
    if let Some(var_1116) = &input.resource_identifier {
        scope_1115.string(var_1116);
    }
    #[allow(unused_mut)]
    let mut scope_1117 = writer.prefix("Filters");
    if let Some(var_1118) = &input.filters {
        let mut list_1120 = scope_1117.start_list(false, Some("Filter"));
        for item_1119 in var_1118 {
            #[allow(unused_mut)]
            let mut entry_1121 = list_1120.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1121, item_1119)?;
        }
        list_1120.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1122 = writer.prefix("Marker");
    if let Some(var_1123) = &input.marker {
        scope_1122.string(var_1123);
    }
    #[allow(unused_mut)]
    let mut scope_1124 = writer.prefix("MaxRecords");
    if let Some(var_1125) = &input.max_records {
        scope_1124.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1125).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_db_instances(
    input: &crate::input::DescribeReservedDbInstancesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeReservedDBInstances", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1126 = writer.prefix("ReservedDBInstanceId");
    if let Some(var_1127) = &input.reserved_db_instance_id {
        scope_1126.string(var_1127);
    }
    #[allow(unused_mut)]
    let mut scope_1128 = writer.prefix("ReservedDBInstancesOfferingId");
    if let Some(var_1129) = &input.reserved_db_instances_offering_id {
        scope_1128.string(var_1129);
    }
    #[allow(unused_mut)]
    let mut scope_1130 = writer.prefix("DBInstanceClass");
    if let Some(var_1131) = &input.db_instance_class {
        scope_1130.string(var_1131);
    }
    #[allow(unused_mut)]
    let mut scope_1132 = writer.prefix("Duration");
    if let Some(var_1133) = &input.duration {
        scope_1132.string(var_1133);
    }
    #[allow(unused_mut)]
    let mut scope_1134 = writer.prefix("ProductDescription");
    if let Some(var_1135) = &input.product_description {
        scope_1134.string(var_1135);
    }
    #[allow(unused_mut)]
    let mut scope_1136 = writer.prefix("OfferingType");
    if let Some(var_1137) = &input.offering_type {
        scope_1136.string(var_1137);
    }
    #[allow(unused_mut)]
    let mut scope_1138 = writer.prefix("MultiAZ");
    if let Some(var_1139) = &input.multi_az {
        scope_1138.boolean(*var_1139);
    }
    #[allow(unused_mut)]
    let mut scope_1140 = writer.prefix("LeaseId");
    if let Some(var_1141) = &input.lease_id {
        scope_1140.string(var_1141);
    }
    #[allow(unused_mut)]
    let mut scope_1142 = writer.prefix("Filters");
    if let Some(var_1143) = &input.filters {
        let mut list_1145 = scope_1142.start_list(false, Some("Filter"));
        for item_1144 in var_1143 {
            #[allow(unused_mut)]
            let mut entry_1146 = list_1145.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1146, item_1144)?;
        }
        list_1145.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1147 = writer.prefix("MaxRecords");
    if let Some(var_1148) = &input.max_records {
        scope_1147.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1148).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1149 = writer.prefix("Marker");
    if let Some(var_1150) = &input.marker {
        scope_1149.string(var_1150);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_reserved_db_instances_offerings(
    input: &crate::input::DescribeReservedDbInstancesOfferingsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeReservedDBInstancesOfferings",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1151 = writer.prefix("ReservedDBInstancesOfferingId");
    if let Some(var_1152) = &input.reserved_db_instances_offering_id {
        scope_1151.string(var_1152);
    }
    #[allow(unused_mut)]
    let mut scope_1153 = writer.prefix("DBInstanceClass");
    if let Some(var_1154) = &input.db_instance_class {
        scope_1153.string(var_1154);
    }
    #[allow(unused_mut)]
    let mut scope_1155 = writer.prefix("Duration");
    if let Some(var_1156) = &input.duration {
        scope_1155.string(var_1156);
    }
    #[allow(unused_mut)]
    let mut scope_1157 = writer.prefix("ProductDescription");
    if let Some(var_1158) = &input.product_description {
        scope_1157.string(var_1158);
    }
    #[allow(unused_mut)]
    let mut scope_1159 = writer.prefix("OfferingType");
    if let Some(var_1160) = &input.offering_type {
        scope_1159.string(var_1160);
    }
    #[allow(unused_mut)]
    let mut scope_1161 = writer.prefix("MultiAZ");
    if let Some(var_1162) = &input.multi_az {
        scope_1161.boolean(*var_1162);
    }
    #[allow(unused_mut)]
    let mut scope_1163 = writer.prefix("Filters");
    if let Some(var_1164) = &input.filters {
        let mut list_1166 = scope_1163.start_list(false, Some("Filter"));
        for item_1165 in var_1164 {
            #[allow(unused_mut)]
            let mut entry_1167 = list_1166.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1167, item_1165)?;
        }
        list_1166.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1168 = writer.prefix("MaxRecords");
    if let Some(var_1169) = &input.max_records {
        scope_1168.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1169).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1170 = writer.prefix("Marker");
    if let Some(var_1171) = &input.marker {
        scope_1170.string(var_1171);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_source_regions(
    input: &crate::input::DescribeSourceRegionsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DescribeSourceRegions", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1172 = writer.prefix("RegionName");
    if let Some(var_1173) = &input.region_name {
        scope_1172.string(var_1173);
    }
    #[allow(unused_mut)]
    let mut scope_1174 = writer.prefix("MaxRecords");
    if let Some(var_1175) = &input.max_records {
        scope_1174.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1175).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1176 = writer.prefix("Marker");
    if let Some(var_1177) = &input.marker {
        scope_1176.string(var_1177);
    }
    #[allow(unused_mut)]
    let mut scope_1178 = writer.prefix("Filters");
    if let Some(var_1179) = &input.filters {
        let mut list_1181 = scope_1178.start_list(false, Some("Filter"));
        for item_1180 in var_1179 {
            #[allow(unused_mut)]
            let mut entry_1182 = list_1181.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1182, item_1180)?;
        }
        list_1181.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_describe_valid_db_instance_modifications(
    input: &crate::input::DescribeValidDbInstanceModificationsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "DescribeValidDBInstanceModifications",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1183 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1184) = &input.db_instance_identifier {
        scope_1183.string(var_1184);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_download_db_log_file_portion(
    input: &crate::input::DownloadDbLogFilePortionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "DownloadDBLogFilePortion", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1185 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1186) = &input.db_instance_identifier {
        scope_1185.string(var_1186);
    }
    #[allow(unused_mut)]
    let mut scope_1187 = writer.prefix("LogFileName");
    if let Some(var_1188) = &input.log_file_name {
        scope_1187.string(var_1188);
    }
    #[allow(unused_mut)]
    let mut scope_1189 = writer.prefix("Marker");
    if let Some(var_1190) = &input.marker {
        scope_1189.string(var_1190);
    }
    #[allow(unused_mut)]
    let mut scope_1191 = writer.prefix("NumberOfLines");
    if input.number_of_lines != 0 {
        scope_1191.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.number_of_lines).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_db_cluster(
    input: &crate::input::FailoverDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "FailoverDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1192 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1193) = &input.db_cluster_identifier {
        scope_1192.string(var_1193);
    }
    #[allow(unused_mut)]
    let mut scope_1194 = writer.prefix("TargetDBInstanceIdentifier");
    if let Some(var_1195) = &input.target_db_instance_identifier {
        scope_1194.string(var_1195);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_failover_global_cluster(
    input: &crate::input::FailoverGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "FailoverGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1196 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_1197) = &input.global_cluster_identifier {
        scope_1196.string(var_1197);
    }
    #[allow(unused_mut)]
    let mut scope_1198 = writer.prefix("TargetDbClusterIdentifier");
    if let Some(var_1199) = &input.target_db_cluster_identifier {
        scope_1198.string(var_1199);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_import_installation_media(
    input: &crate::input::ImportInstallationMediaInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ImportInstallationMedia", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1200 = writer.prefix("CustomAvailabilityZoneId");
    if let Some(var_1201) = &input.custom_availability_zone_id {
        scope_1200.string(var_1201);
    }
    #[allow(unused_mut)]
    let mut scope_1202 = writer.prefix("Engine");
    if let Some(var_1203) = &input.engine {
        scope_1202.string(var_1203);
    }
    #[allow(unused_mut)]
    let mut scope_1204 = writer.prefix("EngineVersion");
    if let Some(var_1205) = &input.engine_version {
        scope_1204.string(var_1205);
    }
    #[allow(unused_mut)]
    let mut scope_1206 = writer.prefix("EngineInstallationMediaPath");
    if let Some(var_1207) = &input.engine_installation_media_path {
        scope_1206.string(var_1207);
    }
    #[allow(unused_mut)]
    let mut scope_1208 = writer.prefix("OSInstallationMediaPath");
    if let Some(var_1209) = &input.os_installation_media_path {
        scope_1208.string(var_1209);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_list_tags_for_resource(
    input: &crate::input::ListTagsForResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ListTagsForResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1210 = writer.prefix("ResourceName");
    if let Some(var_1211) = &input.resource_name {
        scope_1210.string(var_1211);
    }
    #[allow(unused_mut)]
    let mut scope_1212 = writer.prefix("Filters");
    if let Some(var_1213) = &input.filters {
        let mut list_1215 = scope_1212.start_list(false, Some("Filter"));
        for item_1214 in var_1213 {
            #[allow(unused_mut)]
            let mut entry_1216 = list_1215.entry();
            crate::query_ser::serialize_structure_crate_model_filter(entry_1216, item_1214)?;
        }
        list_1215.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_certificates(
    input: &crate::input::ModifyCertificatesInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCertificates", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1217 = writer.prefix("CertificateIdentifier");
    if let Some(var_1218) = &input.certificate_identifier {
        scope_1217.string(var_1218);
    }
    #[allow(unused_mut)]
    let mut scope_1219 = writer.prefix("RemoveCustomerOverride");
    if let Some(var_1220) = &input.remove_customer_override {
        scope_1219.boolean(*var_1220);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_current_db_cluster_capacity(
    input: &crate::input::ModifyCurrentDbClusterCapacityInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyCurrentDBClusterCapacity",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1221 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1222) = &input.db_cluster_identifier {
        scope_1221.string(var_1222);
    }
    #[allow(unused_mut)]
    let mut scope_1223 = writer.prefix("Capacity");
    if let Some(var_1224) = &input.capacity {
        scope_1223.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1224).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1225 = writer.prefix("SecondsBeforeTimeout");
    if let Some(var_1226) = &input.seconds_before_timeout {
        scope_1225.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1226).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1227 = writer.prefix("TimeoutAction");
    if let Some(var_1228) = &input.timeout_action {
        scope_1227.string(var_1228);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_custom_db_engine_version(
    input: &crate::input::ModifyCustomDbEngineVersionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyCustomDBEngineVersion", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1229 = writer.prefix("Engine");
    if let Some(var_1230) = &input.engine {
        scope_1229.string(var_1230);
    }
    #[allow(unused_mut)]
    let mut scope_1231 = writer.prefix("EngineVersion");
    if let Some(var_1232) = &input.engine_version {
        scope_1231.string(var_1232);
    }
    #[allow(unused_mut)]
    let mut scope_1233 = writer.prefix("Description");
    if let Some(var_1234) = &input.description {
        scope_1233.string(var_1234);
    }
    #[allow(unused_mut)]
    let mut scope_1235 = writer.prefix("Status");
    if let Some(var_1236) = &input.status {
        scope_1235.string(var_1236.as_str());
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster(
    input: &crate::input::ModifyDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1237 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1238) = &input.db_cluster_identifier {
        scope_1237.string(var_1238);
    }
    #[allow(unused_mut)]
    let mut scope_1239 = writer.prefix("NewDBClusterIdentifier");
    if let Some(var_1240) = &input.new_db_cluster_identifier {
        scope_1239.string(var_1240);
    }
    #[allow(unused_mut)]
    let mut scope_1241 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_1241.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_1242 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1243) = &input.backup_retention_period {
        scope_1242.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1243).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1244 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1245) = &input.db_cluster_parameter_group_name {
        scope_1244.string(var_1245);
    }
    #[allow(unused_mut)]
    let mut scope_1246 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1247) = &input.vpc_security_group_ids {
        let mut list_1249 = scope_1246.start_list(false, Some("VpcSecurityGroupId"));
        for item_1248 in var_1247 {
            #[allow(unused_mut)]
            let mut entry_1250 = list_1249.entry();
            entry_1250.string(item_1248);
        }
        list_1249.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1251 = writer.prefix("Port");
    if let Some(var_1252) = &input.port {
        scope_1251.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1252).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1253 = writer.prefix("MasterUserPassword");
    if let Some(var_1254) = &input.master_user_password {
        scope_1253.string(var_1254);
    }
    #[allow(unused_mut)]
    let mut scope_1255 = writer.prefix("OptionGroupName");
    if let Some(var_1256) = &input.option_group_name {
        scope_1255.string(var_1256);
    }
    #[allow(unused_mut)]
    let mut scope_1257 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1258) = &input.preferred_backup_window {
        scope_1257.string(var_1258);
    }
    #[allow(unused_mut)]
    let mut scope_1259 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1260) = &input.preferred_maintenance_window {
        scope_1259.string(var_1260);
    }
    #[allow(unused_mut)]
    let mut scope_1261 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1262) = &input.enable_iam_database_authentication {
        scope_1261.boolean(*var_1262);
    }
    #[allow(unused_mut)]
    let mut scope_1263 = writer.prefix("BacktrackWindow");
    if let Some(var_1264) = &input.backtrack_window {
        scope_1263.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1264).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1265 = writer.prefix("CloudwatchLogsExportConfiguration");
    if let Some(var_1266) = &input.cloudwatch_logs_export_configuration {
        crate::query_ser::serialize_structure_crate_model_cloudwatch_logs_export_configuration(
            scope_1265, var_1266,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1267 = writer.prefix("EngineVersion");
    if let Some(var_1268) = &input.engine_version {
        scope_1267.string(var_1268);
    }
    #[allow(unused_mut)]
    let mut scope_1269 = writer.prefix("AllowMajorVersionUpgrade");
    if input.allow_major_version_upgrade {
        scope_1269.boolean(input.allow_major_version_upgrade);
    }
    #[allow(unused_mut)]
    let mut scope_1270 = writer.prefix("DBInstanceParameterGroupName");
    if let Some(var_1271) = &input.db_instance_parameter_group_name {
        scope_1270.string(var_1271);
    }
    #[allow(unused_mut)]
    let mut scope_1272 = writer.prefix("Domain");
    if let Some(var_1273) = &input.domain {
        scope_1272.string(var_1273);
    }
    #[allow(unused_mut)]
    let mut scope_1274 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1275) = &input.domain_iam_role_name {
        scope_1274.string(var_1275);
    }
    #[allow(unused_mut)]
    let mut scope_1276 = writer.prefix("ScalingConfiguration");
    if let Some(var_1277) = &input.scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_scaling_configuration(
            scope_1276, var_1277,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1278 = writer.prefix("DeletionProtection");
    if let Some(var_1279) = &input.deletion_protection {
        scope_1278.boolean(*var_1279);
    }
    #[allow(unused_mut)]
    let mut scope_1280 = writer.prefix("EnableHttpEndpoint");
    if let Some(var_1281) = &input.enable_http_endpoint {
        scope_1280.boolean(*var_1281);
    }
    #[allow(unused_mut)]
    let mut scope_1282 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1283) = &input.copy_tags_to_snapshot {
        scope_1282.boolean(*var_1283);
    }
    #[allow(unused_mut)]
    let mut scope_1284 = writer.prefix("EnableGlobalWriteForwarding");
    if let Some(var_1285) = &input.enable_global_write_forwarding {
        scope_1284.boolean(*var_1285);
    }
    #[allow(unused_mut)]
    let mut scope_1286 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_1287) = &input.db_cluster_instance_class {
        scope_1286.string(var_1287);
    }
    #[allow(unused_mut)]
    let mut scope_1288 = writer.prefix("AllocatedStorage");
    if let Some(var_1289) = &input.allocated_storage {
        scope_1288.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1289).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1290 = writer.prefix("StorageType");
    if let Some(var_1291) = &input.storage_type {
        scope_1290.string(var_1291);
    }
    #[allow(unused_mut)]
    let mut scope_1292 = writer.prefix("Iops");
    if let Some(var_1293) = &input.iops {
        scope_1292.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1293).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1294 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1295) = &input.auto_minor_version_upgrade {
        scope_1294.boolean(*var_1295);
    }
    #[allow(unused_mut)]
    let mut scope_1296 = writer.prefix("MonitoringInterval");
    if let Some(var_1297) = &input.monitoring_interval {
        scope_1296.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1297).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1298 = writer.prefix("MonitoringRoleArn");
    if let Some(var_1299) = &input.monitoring_role_arn {
        scope_1298.string(var_1299);
    }
    #[allow(unused_mut)]
    let mut scope_1300 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_1301) = &input.enable_performance_insights {
        scope_1300.boolean(*var_1301);
    }
    #[allow(unused_mut)]
    let mut scope_1302 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_1303) = &input.performance_insights_kms_key_id {
        scope_1302.string(var_1303);
    }
    #[allow(unused_mut)]
    let mut scope_1304 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_1305) = &input.performance_insights_retention_period {
        scope_1304.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1305).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_endpoint(
    input: &crate::input::ModifyDbClusterEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1306 = writer.prefix("DBClusterEndpointIdentifier");
    if let Some(var_1307) = &input.db_cluster_endpoint_identifier {
        scope_1306.string(var_1307);
    }
    #[allow(unused_mut)]
    let mut scope_1308 = writer.prefix("EndpointType");
    if let Some(var_1309) = &input.endpoint_type {
        scope_1308.string(var_1309);
    }
    #[allow(unused_mut)]
    let mut scope_1310 = writer.prefix("StaticMembers");
    if let Some(var_1311) = &input.static_members {
        let mut list_1313 = scope_1310.start_list(false, None);
        for item_1312 in var_1311 {
            #[allow(unused_mut)]
            let mut entry_1314 = list_1313.entry();
            entry_1314.string(item_1312);
        }
        list_1313.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1315 = writer.prefix("ExcludedMembers");
    if let Some(var_1316) = &input.excluded_members {
        let mut list_1318 = scope_1315.start_list(false, None);
        for item_1317 in var_1316 {
            #[allow(unused_mut)]
            let mut entry_1319 = list_1318.entry();
            entry_1319.string(item_1317);
        }
        list_1318.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_parameter_group(
    input: &crate::input::ModifyDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1320 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1321) = &input.db_cluster_parameter_group_name {
        scope_1320.string(var_1321);
    }
    #[allow(unused_mut)]
    let mut scope_1322 = writer.prefix("Parameters");
    if let Some(var_1323) = &input.parameters {
        let mut list_1325 = scope_1322.start_list(false, Some("Parameter"));
        for item_1324 in var_1323 {
            #[allow(unused_mut)]
            let mut entry_1326 = list_1325.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1326, item_1324)?;
        }
        list_1325.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_cluster_snapshot_attribute(
    input: &crate::input::ModifyDbClusterSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "ModifyDBClusterSnapshotAttribute",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1327 = writer.prefix("DBClusterSnapshotIdentifier");
    if let Some(var_1328) = &input.db_cluster_snapshot_identifier {
        scope_1327.string(var_1328);
    }
    #[allow(unused_mut)]
    let mut scope_1329 = writer.prefix("AttributeName");
    if let Some(var_1330) = &input.attribute_name {
        scope_1329.string(var_1330);
    }
    #[allow(unused_mut)]
    let mut scope_1331 = writer.prefix("ValuesToAdd");
    if let Some(var_1332) = &input.values_to_add {
        let mut list_1334 = scope_1331.start_list(false, Some("AttributeValue"));
        for item_1333 in var_1332 {
            #[allow(unused_mut)]
            let mut entry_1335 = list_1334.entry();
            entry_1335.string(item_1333);
        }
        list_1334.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1336 = writer.prefix("ValuesToRemove");
    if let Some(var_1337) = &input.values_to_remove {
        let mut list_1339 = scope_1336.start_list(false, Some("AttributeValue"));
        for item_1338 in var_1337 {
            #[allow(unused_mut)]
            let mut entry_1340 = list_1339.entry();
            entry_1340.string(item_1338);
        }
        list_1339.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_instance(
    input: &crate::input::ModifyDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1341 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1342) = &input.db_instance_identifier {
        scope_1341.string(var_1342);
    }
    #[allow(unused_mut)]
    let mut scope_1343 = writer.prefix("AllocatedStorage");
    if let Some(var_1344) = &input.allocated_storage {
        scope_1343.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1344).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1345 = writer.prefix("DBInstanceClass");
    if let Some(var_1346) = &input.db_instance_class {
        scope_1345.string(var_1346);
    }
    #[allow(unused_mut)]
    let mut scope_1347 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1348) = &input.db_subnet_group_name {
        scope_1347.string(var_1348);
    }
    #[allow(unused_mut)]
    let mut scope_1349 = writer.prefix("DBSecurityGroups");
    if let Some(var_1350) = &input.db_security_groups {
        let mut list_1352 = scope_1349.start_list(false, Some("DBSecurityGroupName"));
        for item_1351 in var_1350 {
            #[allow(unused_mut)]
            let mut entry_1353 = list_1352.entry();
            entry_1353.string(item_1351);
        }
        list_1352.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1354 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1355) = &input.vpc_security_group_ids {
        let mut list_1357 = scope_1354.start_list(false, Some("VpcSecurityGroupId"));
        for item_1356 in var_1355 {
            #[allow(unused_mut)]
            let mut entry_1358 = list_1357.entry();
            entry_1358.string(item_1356);
        }
        list_1357.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1359 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_1359.boolean(input.apply_immediately);
    }
    #[allow(unused_mut)]
    let mut scope_1360 = writer.prefix("MasterUserPassword");
    if let Some(var_1361) = &input.master_user_password {
        scope_1360.string(var_1361);
    }
    #[allow(unused_mut)]
    let mut scope_1362 = writer.prefix("DBParameterGroupName");
    if let Some(var_1363) = &input.db_parameter_group_name {
        scope_1362.string(var_1363);
    }
    #[allow(unused_mut)]
    let mut scope_1364 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1365) = &input.backup_retention_period {
        scope_1364.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1365).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1366 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1367) = &input.preferred_backup_window {
        scope_1366.string(var_1367);
    }
    #[allow(unused_mut)]
    let mut scope_1368 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1369) = &input.preferred_maintenance_window {
        scope_1368.string(var_1369);
    }
    #[allow(unused_mut)]
    let mut scope_1370 = writer.prefix("MultiAZ");
    if let Some(var_1371) = &input.multi_az {
        scope_1370.boolean(*var_1371);
    }
    #[allow(unused_mut)]
    let mut scope_1372 = writer.prefix("EngineVersion");
    if let Some(var_1373) = &input.engine_version {
        scope_1372.string(var_1373);
    }
    #[allow(unused_mut)]
    let mut scope_1374 = writer.prefix("AllowMajorVersionUpgrade");
    if input.allow_major_version_upgrade {
        scope_1374.boolean(input.allow_major_version_upgrade);
    }
    #[allow(unused_mut)]
    let mut scope_1375 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1376) = &input.auto_minor_version_upgrade {
        scope_1375.boolean(*var_1376);
    }
    #[allow(unused_mut)]
    let mut scope_1377 = writer.prefix("LicenseModel");
    if let Some(var_1378) = &input.license_model {
        scope_1377.string(var_1378);
    }
    #[allow(unused_mut)]
    let mut scope_1379 = writer.prefix("Iops");
    if let Some(var_1380) = &input.iops {
        scope_1379.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1380).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1381 = writer.prefix("OptionGroupName");
    if let Some(var_1382) = &input.option_group_name {
        scope_1381.string(var_1382);
    }
    #[allow(unused_mut)]
    let mut scope_1383 = writer.prefix("NewDBInstanceIdentifier");
    if let Some(var_1384) = &input.new_db_instance_identifier {
        scope_1383.string(var_1384);
    }
    #[allow(unused_mut)]
    let mut scope_1385 = writer.prefix("StorageType");
    if let Some(var_1386) = &input.storage_type {
        scope_1385.string(var_1386);
    }
    #[allow(unused_mut)]
    let mut scope_1387 = writer.prefix("TdeCredentialArn");
    if let Some(var_1388) = &input.tde_credential_arn {
        scope_1387.string(var_1388);
    }
    #[allow(unused_mut)]
    let mut scope_1389 = writer.prefix("TdeCredentialPassword");
    if let Some(var_1390) = &input.tde_credential_password {
        scope_1389.string(var_1390);
    }
    #[allow(unused_mut)]
    let mut scope_1391 = writer.prefix("CACertificateIdentifier");
    if let Some(var_1392) = &input.ca_certificate_identifier {
        scope_1391.string(var_1392);
    }
    #[allow(unused_mut)]
    let mut scope_1393 = writer.prefix("Domain");
    if let Some(var_1394) = &input.domain {
        scope_1393.string(var_1394);
    }
    #[allow(unused_mut)]
    let mut scope_1395 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1396) = &input.copy_tags_to_snapshot {
        scope_1395.boolean(*var_1396);
    }
    #[allow(unused_mut)]
    let mut scope_1397 = writer.prefix("MonitoringInterval");
    if let Some(var_1398) = &input.monitoring_interval {
        scope_1397.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1398).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1399 = writer.prefix("DBPortNumber");
    if let Some(var_1400) = &input.db_port_number {
        scope_1399.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1400).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1401 = writer.prefix("PubliclyAccessible");
    if let Some(var_1402) = &input.publicly_accessible {
        scope_1401.boolean(*var_1402);
    }
    #[allow(unused_mut)]
    let mut scope_1403 = writer.prefix("MonitoringRoleArn");
    if let Some(var_1404) = &input.monitoring_role_arn {
        scope_1403.string(var_1404);
    }
    #[allow(unused_mut)]
    let mut scope_1405 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1406) = &input.domain_iam_role_name {
        scope_1405.string(var_1406);
    }
    #[allow(unused_mut)]
    let mut scope_1407 = writer.prefix("PromotionTier");
    if let Some(var_1408) = &input.promotion_tier {
        scope_1407.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1408).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1409 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1410) = &input.enable_iam_database_authentication {
        scope_1409.boolean(*var_1410);
    }
    #[allow(unused_mut)]
    let mut scope_1411 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_1412) = &input.enable_performance_insights {
        scope_1411.boolean(*var_1412);
    }
    #[allow(unused_mut)]
    let mut scope_1413 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_1414) = &input.performance_insights_kms_key_id {
        scope_1413.string(var_1414);
    }
    #[allow(unused_mut)]
    let mut scope_1415 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_1416) = &input.performance_insights_retention_period {
        scope_1415.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1416).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1417 = writer.prefix("CloudwatchLogsExportConfiguration");
    if let Some(var_1418) = &input.cloudwatch_logs_export_configuration {
        crate::query_ser::serialize_structure_crate_model_cloudwatch_logs_export_configuration(
            scope_1417, var_1418,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1419 = writer.prefix("ProcessorFeatures");
    if let Some(var_1420) = &input.processor_features {
        let mut list_1422 = scope_1419.start_list(false, Some("ProcessorFeature"));
        for item_1421 in var_1420 {
            #[allow(unused_mut)]
            let mut entry_1423 = list_1422.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_1423, item_1421,
            )?;
        }
        list_1422.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1424 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_1425) = &input.use_default_processor_features {
        scope_1424.boolean(*var_1425);
    }
    #[allow(unused_mut)]
    let mut scope_1426 = writer.prefix("DeletionProtection");
    if let Some(var_1427) = &input.deletion_protection {
        scope_1426.boolean(*var_1427);
    }
    #[allow(unused_mut)]
    let mut scope_1428 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_1429) = &input.max_allocated_storage {
        scope_1428.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1429).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1430 = writer.prefix("CertificateRotationRestart");
    if let Some(var_1431) = &input.certificate_rotation_restart {
        scope_1430.boolean(*var_1431);
    }
    #[allow(unused_mut)]
    let mut scope_1432 = writer.prefix("ReplicaMode");
    if let Some(var_1433) = &input.replica_mode {
        scope_1432.string(var_1433.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1434 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_1435) = &input.enable_customer_owned_ip {
        scope_1434.boolean(*var_1435);
    }
    #[allow(unused_mut)]
    let mut scope_1436 = writer.prefix("AwsBackupRecoveryPointArn");
    if let Some(var_1437) = &input.aws_backup_recovery_point_arn {
        scope_1436.string(var_1437);
    }
    #[allow(unused_mut)]
    let mut scope_1438 = writer.prefix("AutomationMode");
    if let Some(var_1439) = &input.automation_mode {
        scope_1438.string(var_1439.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_1440 = writer.prefix("ResumeFullAutomationModeMinutes");
    if let Some(var_1441) = &input.resume_full_automation_mode_minutes {
        scope_1440.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1441).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_parameter_group(
    input: &crate::input::ModifyDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1442 = writer.prefix("DBParameterGroupName");
    if let Some(var_1443) = &input.db_parameter_group_name {
        scope_1442.string(var_1443);
    }
    #[allow(unused_mut)]
    let mut scope_1444 = writer.prefix("Parameters");
    if let Some(var_1445) = &input.parameters {
        let mut list_1447 = scope_1444.start_list(false, Some("Parameter"));
        for item_1446 in var_1445 {
            #[allow(unused_mut)]
            let mut entry_1448 = list_1447.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1448, item_1446)?;
        }
        list_1447.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_proxy(
    input: &crate::input::ModifyDbProxyInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBProxy", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1449 = writer.prefix("DBProxyName");
    if let Some(var_1450) = &input.db_proxy_name {
        scope_1449.string(var_1450);
    }
    #[allow(unused_mut)]
    let mut scope_1451 = writer.prefix("NewDBProxyName");
    if let Some(var_1452) = &input.new_db_proxy_name {
        scope_1451.string(var_1452);
    }
    #[allow(unused_mut)]
    let mut scope_1453 = writer.prefix("Auth");
    if let Some(var_1454) = &input.auth {
        let mut list_1456 = scope_1453.start_list(false, None);
        for item_1455 in var_1454 {
            #[allow(unused_mut)]
            let mut entry_1457 = list_1456.entry();
            crate::query_ser::serialize_structure_crate_model_user_auth_config(
                entry_1457, item_1455,
            )?;
        }
        list_1456.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1458 = writer.prefix("RequireTLS");
    if let Some(var_1459) = &input.require_tls {
        scope_1458.boolean(*var_1459);
    }
    #[allow(unused_mut)]
    let mut scope_1460 = writer.prefix("IdleClientTimeout");
    if let Some(var_1461) = &input.idle_client_timeout {
        scope_1460.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1461).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1462 = writer.prefix("DebugLogging");
    if let Some(var_1463) = &input.debug_logging {
        scope_1462.boolean(*var_1463);
    }
    #[allow(unused_mut)]
    let mut scope_1464 = writer.prefix("RoleArn");
    if let Some(var_1465) = &input.role_arn {
        scope_1464.string(var_1465);
    }
    #[allow(unused_mut)]
    let mut scope_1466 = writer.prefix("SecurityGroups");
    if let Some(var_1467) = &input.security_groups {
        let mut list_1469 = scope_1466.start_list(false, None);
        for item_1468 in var_1467 {
            #[allow(unused_mut)]
            let mut entry_1470 = list_1469.entry();
            entry_1470.string(item_1468);
        }
        list_1469.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_proxy_endpoint(
    input: &crate::input::ModifyDbProxyEndpointInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBProxyEndpoint", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1471 = writer.prefix("DBProxyEndpointName");
    if let Some(var_1472) = &input.db_proxy_endpoint_name {
        scope_1471.string(var_1472);
    }
    #[allow(unused_mut)]
    let mut scope_1473 = writer.prefix("NewDBProxyEndpointName");
    if let Some(var_1474) = &input.new_db_proxy_endpoint_name {
        scope_1473.string(var_1474);
    }
    #[allow(unused_mut)]
    let mut scope_1475 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1476) = &input.vpc_security_group_ids {
        let mut list_1478 = scope_1475.start_list(false, None);
        for item_1477 in var_1476 {
            #[allow(unused_mut)]
            let mut entry_1479 = list_1478.entry();
            entry_1479.string(item_1477);
        }
        list_1478.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_proxy_target_group(
    input: &crate::input::ModifyDbProxyTargetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBProxyTargetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1480 = writer.prefix("TargetGroupName");
    if let Some(var_1481) = &input.target_group_name {
        scope_1480.string(var_1481);
    }
    #[allow(unused_mut)]
    let mut scope_1482 = writer.prefix("DBProxyName");
    if let Some(var_1483) = &input.db_proxy_name {
        scope_1482.string(var_1483);
    }
    #[allow(unused_mut)]
    let mut scope_1484 = writer.prefix("ConnectionPoolConfig");
    if let Some(var_1485) = &input.connection_pool_config {
        crate::query_ser::serialize_structure_crate_model_connection_pool_configuration(
            scope_1484, var_1485,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1486 = writer.prefix("NewName");
    if let Some(var_1487) = &input.new_name {
        scope_1486.string(var_1487);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_snapshot(
    input: &crate::input::ModifyDbSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1488 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_1489) = &input.db_snapshot_identifier {
        scope_1488.string(var_1489);
    }
    #[allow(unused_mut)]
    let mut scope_1490 = writer.prefix("EngineVersion");
    if let Some(var_1491) = &input.engine_version {
        scope_1490.string(var_1491);
    }
    #[allow(unused_mut)]
    let mut scope_1492 = writer.prefix("OptionGroupName");
    if let Some(var_1493) = &input.option_group_name {
        scope_1492.string(var_1493);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_snapshot_attribute(
    input: &crate::input::ModifyDbSnapshotAttributeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBSnapshotAttribute", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1494 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_1495) = &input.db_snapshot_identifier {
        scope_1494.string(var_1495);
    }
    #[allow(unused_mut)]
    let mut scope_1496 = writer.prefix("AttributeName");
    if let Some(var_1497) = &input.attribute_name {
        scope_1496.string(var_1497);
    }
    #[allow(unused_mut)]
    let mut scope_1498 = writer.prefix("ValuesToAdd");
    if let Some(var_1499) = &input.values_to_add {
        let mut list_1501 = scope_1498.start_list(false, Some("AttributeValue"));
        for item_1500 in var_1499 {
            #[allow(unused_mut)]
            let mut entry_1502 = list_1501.entry();
            entry_1502.string(item_1500);
        }
        list_1501.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1503 = writer.prefix("ValuesToRemove");
    if let Some(var_1504) = &input.values_to_remove {
        let mut list_1506 = scope_1503.start_list(false, Some("AttributeValue"));
        for item_1505 in var_1504 {
            #[allow(unused_mut)]
            let mut entry_1507 = list_1506.entry();
            entry_1507.string(item_1505);
        }
        list_1506.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_db_subnet_group(
    input: &crate::input::ModifyDbSubnetGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyDBSubnetGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1508 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1509) = &input.db_subnet_group_name {
        scope_1508.string(var_1509);
    }
    #[allow(unused_mut)]
    let mut scope_1510 = writer.prefix("DBSubnetGroupDescription");
    if let Some(var_1511) = &input.db_subnet_group_description {
        scope_1510.string(var_1511);
    }
    #[allow(unused_mut)]
    let mut scope_1512 = writer.prefix("SubnetIds");
    if let Some(var_1513) = &input.subnet_ids {
        let mut list_1515 = scope_1512.start_list(false, Some("SubnetIdentifier"));
        for item_1514 in var_1513 {
            #[allow(unused_mut)]
            let mut entry_1516 = list_1515.entry();
            entry_1516.string(item_1514);
        }
        list_1515.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_event_subscription(
    input: &crate::input::ModifyEventSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyEventSubscription", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1517 = writer.prefix("SubscriptionName");
    if let Some(var_1518) = &input.subscription_name {
        scope_1517.string(var_1518);
    }
    #[allow(unused_mut)]
    let mut scope_1519 = writer.prefix("SnsTopicArn");
    if let Some(var_1520) = &input.sns_topic_arn {
        scope_1519.string(var_1520);
    }
    #[allow(unused_mut)]
    let mut scope_1521 = writer.prefix("SourceType");
    if let Some(var_1522) = &input.source_type {
        scope_1521.string(var_1522);
    }
    #[allow(unused_mut)]
    let mut scope_1523 = writer.prefix("EventCategories");
    if let Some(var_1524) = &input.event_categories {
        let mut list_1526 = scope_1523.start_list(false, Some("EventCategory"));
        for item_1525 in var_1524 {
            #[allow(unused_mut)]
            let mut entry_1527 = list_1526.entry();
            entry_1527.string(item_1525);
        }
        list_1526.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1528 = writer.prefix("Enabled");
    if let Some(var_1529) = &input.enabled {
        scope_1528.boolean(*var_1529);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_global_cluster(
    input: &crate::input::ModifyGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1530 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_1531) = &input.global_cluster_identifier {
        scope_1530.string(var_1531);
    }
    #[allow(unused_mut)]
    let mut scope_1532 = writer.prefix("NewGlobalClusterIdentifier");
    if let Some(var_1533) = &input.new_global_cluster_identifier {
        scope_1532.string(var_1533);
    }
    #[allow(unused_mut)]
    let mut scope_1534 = writer.prefix("DeletionProtection");
    if let Some(var_1535) = &input.deletion_protection {
        scope_1534.boolean(*var_1535);
    }
    #[allow(unused_mut)]
    let mut scope_1536 = writer.prefix("EngineVersion");
    if let Some(var_1537) = &input.engine_version {
        scope_1536.string(var_1537);
    }
    #[allow(unused_mut)]
    let mut scope_1538 = writer.prefix("AllowMajorVersionUpgrade");
    if let Some(var_1539) = &input.allow_major_version_upgrade {
        scope_1538.boolean(*var_1539);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_modify_option_group(
    input: &crate::input::ModifyOptionGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ModifyOptionGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1540 = writer.prefix("OptionGroupName");
    if let Some(var_1541) = &input.option_group_name {
        scope_1540.string(var_1541);
    }
    #[allow(unused_mut)]
    let mut scope_1542 = writer.prefix("OptionsToInclude");
    if let Some(var_1543) = &input.options_to_include {
        let mut list_1545 = scope_1542.start_list(false, Some("OptionConfiguration"));
        for item_1544 in var_1543 {
            #[allow(unused_mut)]
            let mut entry_1546 = list_1545.entry();
            crate::query_ser::serialize_structure_crate_model_option_configuration(
                entry_1546, item_1544,
            )?;
        }
        list_1545.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1547 = writer.prefix("OptionsToRemove");
    if let Some(var_1548) = &input.options_to_remove {
        let mut list_1550 = scope_1547.start_list(false, None);
        for item_1549 in var_1548 {
            #[allow(unused_mut)]
            let mut entry_1551 = list_1550.entry();
            entry_1551.string(item_1549);
        }
        list_1550.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1552 = writer.prefix("ApplyImmediately");
    if input.apply_immediately {
        scope_1552.boolean(input.apply_immediately);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_promote_read_replica(
    input: &crate::input::PromoteReadReplicaInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PromoteReadReplica", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1553 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1554) = &input.db_instance_identifier {
        scope_1553.string(var_1554);
    }
    #[allow(unused_mut)]
    let mut scope_1555 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1556) = &input.backup_retention_period {
        scope_1555.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1556).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1557 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1558) = &input.preferred_backup_window {
        scope_1557.string(var_1558);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_promote_read_replica_db_cluster(
    input: &crate::input::PromoteReadReplicaDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "PromoteReadReplicaDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1559 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1560) = &input.db_cluster_identifier {
        scope_1559.string(var_1560);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_purchase_reserved_db_instances_offering(
    input: &crate::input::PurchaseReservedDbInstancesOfferingInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "PurchaseReservedDBInstancesOffering",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1561 = writer.prefix("ReservedDBInstancesOfferingId");
    if let Some(var_1562) = &input.reserved_db_instances_offering_id {
        scope_1561.string(var_1562);
    }
    #[allow(unused_mut)]
    let mut scope_1563 = writer.prefix("ReservedDBInstanceId");
    if let Some(var_1564) = &input.reserved_db_instance_id {
        scope_1563.string(var_1564);
    }
    #[allow(unused_mut)]
    let mut scope_1565 = writer.prefix("DBInstanceCount");
    if let Some(var_1566) = &input.db_instance_count {
        scope_1565.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1566).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1567 = writer.prefix("Tags");
    if let Some(var_1568) = &input.tags {
        let mut list_1570 = scope_1567.start_list(false, Some("Tag"));
        for item_1569 in var_1568 {
            #[allow(unused_mut)]
            let mut entry_1571 = list_1570.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1571, item_1569)?;
        }
        list_1570.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_db_cluster(
    input: &crate::input::RebootDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1572 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1573) = &input.db_cluster_identifier {
        scope_1572.string(var_1573);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reboot_db_instance(
    input: &crate::input::RebootDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "RebootDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1574 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1575) = &input.db_instance_identifier {
        scope_1574.string(var_1575);
    }
    #[allow(unused_mut)]
    let mut scope_1576 = writer.prefix("ForceFailover");
    if let Some(var_1577) = &input.force_failover {
        scope_1576.boolean(*var_1577);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_register_db_proxy_targets(
    input: &crate::input::RegisterDbProxyTargetsInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RegisterDBProxyTargets", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1578 = writer.prefix("DBProxyName");
    if let Some(var_1579) = &input.db_proxy_name {
        scope_1578.string(var_1579);
    }
    #[allow(unused_mut)]
    let mut scope_1580 = writer.prefix("TargetGroupName");
    if let Some(var_1581) = &input.target_group_name {
        scope_1580.string(var_1581);
    }
    #[allow(unused_mut)]
    let mut scope_1582 = writer.prefix("DBInstanceIdentifiers");
    if let Some(var_1583) = &input.db_instance_identifiers {
        let mut list_1585 = scope_1582.start_list(false, None);
        for item_1584 in var_1583 {
            #[allow(unused_mut)]
            let mut entry_1586 = list_1585.entry();
            entry_1586.string(item_1584);
        }
        list_1585.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1587 = writer.prefix("DBClusterIdentifiers");
    if let Some(var_1588) = &input.db_cluster_identifiers {
        let mut list_1590 = scope_1587.start_list(false, None);
        for item_1589 in var_1588 {
            #[allow(unused_mut)]
            let mut entry_1591 = list_1590.entry();
            entry_1591.string(item_1589);
        }
        list_1590.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_from_global_cluster(
    input: &crate::input::RemoveFromGlobalClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveFromGlobalCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1592 = writer.prefix("GlobalClusterIdentifier");
    if let Some(var_1593) = &input.global_cluster_identifier {
        scope_1592.string(var_1593);
    }
    #[allow(unused_mut)]
    let mut scope_1594 = writer.prefix("DbClusterIdentifier");
    if let Some(var_1595) = &input.db_cluster_identifier {
        scope_1594.string(var_1595);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_role_from_db_cluster(
    input: &crate::input::RemoveRoleFromDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveRoleFromDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1596 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1597) = &input.db_cluster_identifier {
        scope_1596.string(var_1597);
    }
    #[allow(unused_mut)]
    let mut scope_1598 = writer.prefix("RoleArn");
    if let Some(var_1599) = &input.role_arn {
        scope_1598.string(var_1599);
    }
    #[allow(unused_mut)]
    let mut scope_1600 = writer.prefix("FeatureName");
    if let Some(var_1601) = &input.feature_name {
        scope_1600.string(var_1601);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_role_from_db_instance(
    input: &crate::input::RemoveRoleFromDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveRoleFromDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1602 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1603) = &input.db_instance_identifier {
        scope_1602.string(var_1603);
    }
    #[allow(unused_mut)]
    let mut scope_1604 = writer.prefix("RoleArn");
    if let Some(var_1605) = &input.role_arn {
        scope_1604.string(var_1605);
    }
    #[allow(unused_mut)]
    let mut scope_1606 = writer.prefix("FeatureName");
    if let Some(var_1607) = &input.feature_name {
        scope_1606.string(var_1607);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_source_identifier_from_subscription(
    input: &crate::input::RemoveSourceIdentifierFromSubscriptionInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RemoveSourceIdentifierFromSubscription",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1608 = writer.prefix("SubscriptionName");
    if let Some(var_1609) = &input.subscription_name {
        scope_1608.string(var_1609);
    }
    #[allow(unused_mut)]
    let mut scope_1610 = writer.prefix("SourceIdentifier");
    if let Some(var_1611) = &input.source_identifier {
        scope_1610.string(var_1611);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_remove_tags_from_resource(
    input: &crate::input::RemoveTagsFromResourceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RemoveTagsFromResource", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1612 = writer.prefix("ResourceName");
    if let Some(var_1613) = &input.resource_name {
        scope_1612.string(var_1613);
    }
    #[allow(unused_mut)]
    let mut scope_1614 = writer.prefix("TagKeys");
    if let Some(var_1615) = &input.tag_keys {
        let mut list_1617 = scope_1614.start_list(false, None);
        for item_1616 in var_1615 {
            #[allow(unused_mut)]
            let mut entry_1618 = list_1617.entry();
            entry_1618.string(item_1616);
        }
        list_1617.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_db_cluster_parameter_group(
    input: &crate::input::ResetDbClusterParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetDBClusterParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1619 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1620) = &input.db_cluster_parameter_group_name {
        scope_1619.string(var_1620);
    }
    #[allow(unused_mut)]
    let mut scope_1621 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_1621.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_1622 = writer.prefix("Parameters");
    if let Some(var_1623) = &input.parameters {
        let mut list_1625 = scope_1622.start_list(false, Some("Parameter"));
        for item_1624 in var_1623 {
            #[allow(unused_mut)]
            let mut entry_1626 = list_1625.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1626, item_1624)?;
        }
        list_1625.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_reset_db_parameter_group(
    input: &crate::input::ResetDbParameterGroupInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "ResetDBParameterGroup", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1627 = writer.prefix("DBParameterGroupName");
    if let Some(var_1628) = &input.db_parameter_group_name {
        scope_1627.string(var_1628);
    }
    #[allow(unused_mut)]
    let mut scope_1629 = writer.prefix("ResetAllParameters");
    if input.reset_all_parameters {
        scope_1629.boolean(input.reset_all_parameters);
    }
    #[allow(unused_mut)]
    let mut scope_1630 = writer.prefix("Parameters");
    if let Some(var_1631) = &input.parameters {
        let mut list_1633 = scope_1630.start_list(false, Some("Parameter"));
        for item_1632 in var_1631 {
            #[allow(unused_mut)]
            let mut entry_1634 = list_1633.entry();
            crate::query_ser::serialize_structure_crate_model_parameter(entry_1634, item_1632)?;
        }
        list_1633.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_from_s3(
    input: &crate::input::RestoreDbClusterFromS3Input,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterFromS3", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1635 = writer.prefix("AvailabilityZones");
    if let Some(var_1636) = &input.availability_zones {
        let mut list_1638 = scope_1635.start_list(false, Some("AvailabilityZone"));
        for item_1637 in var_1636 {
            #[allow(unused_mut)]
            let mut entry_1639 = list_1638.entry();
            entry_1639.string(item_1637);
        }
        list_1638.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1640 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1641) = &input.backup_retention_period {
        scope_1640.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1641).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1642 = writer.prefix("CharacterSetName");
    if let Some(var_1643) = &input.character_set_name {
        scope_1642.string(var_1643);
    }
    #[allow(unused_mut)]
    let mut scope_1644 = writer.prefix("DatabaseName");
    if let Some(var_1645) = &input.database_name {
        scope_1644.string(var_1645);
    }
    #[allow(unused_mut)]
    let mut scope_1646 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1647) = &input.db_cluster_identifier {
        scope_1646.string(var_1647);
    }
    #[allow(unused_mut)]
    let mut scope_1648 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1649) = &input.db_cluster_parameter_group_name {
        scope_1648.string(var_1649);
    }
    #[allow(unused_mut)]
    let mut scope_1650 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1651) = &input.vpc_security_group_ids {
        let mut list_1653 = scope_1650.start_list(false, Some("VpcSecurityGroupId"));
        for item_1652 in var_1651 {
            #[allow(unused_mut)]
            let mut entry_1654 = list_1653.entry();
            entry_1654.string(item_1652);
        }
        list_1653.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1655 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1656) = &input.db_subnet_group_name {
        scope_1655.string(var_1656);
    }
    #[allow(unused_mut)]
    let mut scope_1657 = writer.prefix("Engine");
    if let Some(var_1658) = &input.engine {
        scope_1657.string(var_1658);
    }
    #[allow(unused_mut)]
    let mut scope_1659 = writer.prefix("EngineVersion");
    if let Some(var_1660) = &input.engine_version {
        scope_1659.string(var_1660);
    }
    #[allow(unused_mut)]
    let mut scope_1661 = writer.prefix("Port");
    if let Some(var_1662) = &input.port {
        scope_1661.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1662).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1663 = writer.prefix("MasterUsername");
    if let Some(var_1664) = &input.master_username {
        scope_1663.string(var_1664);
    }
    #[allow(unused_mut)]
    let mut scope_1665 = writer.prefix("MasterUserPassword");
    if let Some(var_1666) = &input.master_user_password {
        scope_1665.string(var_1666);
    }
    #[allow(unused_mut)]
    let mut scope_1667 = writer.prefix("OptionGroupName");
    if let Some(var_1668) = &input.option_group_name {
        scope_1667.string(var_1668);
    }
    #[allow(unused_mut)]
    let mut scope_1669 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1670) = &input.preferred_backup_window {
        scope_1669.string(var_1670);
    }
    #[allow(unused_mut)]
    let mut scope_1671 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1672) = &input.preferred_maintenance_window {
        scope_1671.string(var_1672);
    }
    #[allow(unused_mut)]
    let mut scope_1673 = writer.prefix("Tags");
    if let Some(var_1674) = &input.tags {
        let mut list_1676 = scope_1673.start_list(false, Some("Tag"));
        for item_1675 in var_1674 {
            #[allow(unused_mut)]
            let mut entry_1677 = list_1676.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1677, item_1675)?;
        }
        list_1676.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1678 = writer.prefix("StorageEncrypted");
    if let Some(var_1679) = &input.storage_encrypted {
        scope_1678.boolean(*var_1679);
    }
    #[allow(unused_mut)]
    let mut scope_1680 = writer.prefix("KmsKeyId");
    if let Some(var_1681) = &input.kms_key_id {
        scope_1680.string(var_1681);
    }
    #[allow(unused_mut)]
    let mut scope_1682 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1683) = &input.enable_iam_database_authentication {
        scope_1682.boolean(*var_1683);
    }
    #[allow(unused_mut)]
    let mut scope_1684 = writer.prefix("SourceEngine");
    if let Some(var_1685) = &input.source_engine {
        scope_1684.string(var_1685);
    }
    #[allow(unused_mut)]
    let mut scope_1686 = writer.prefix("SourceEngineVersion");
    if let Some(var_1687) = &input.source_engine_version {
        scope_1686.string(var_1687);
    }
    #[allow(unused_mut)]
    let mut scope_1688 = writer.prefix("S3BucketName");
    if let Some(var_1689) = &input.s3_bucket_name {
        scope_1688.string(var_1689);
    }
    #[allow(unused_mut)]
    let mut scope_1690 = writer.prefix("S3Prefix");
    if let Some(var_1691) = &input.s3_prefix {
        scope_1690.string(var_1691);
    }
    #[allow(unused_mut)]
    let mut scope_1692 = writer.prefix("S3IngestionRoleArn");
    if let Some(var_1693) = &input.s3_ingestion_role_arn {
        scope_1692.string(var_1693);
    }
    #[allow(unused_mut)]
    let mut scope_1694 = writer.prefix("BacktrackWindow");
    if let Some(var_1695) = &input.backtrack_window {
        scope_1694.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1695).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1696 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1697) = &input.enable_cloudwatch_logs_exports {
        let mut list_1699 = scope_1696.start_list(false, None);
        for item_1698 in var_1697 {
            #[allow(unused_mut)]
            let mut entry_1700 = list_1699.entry();
            entry_1700.string(item_1698);
        }
        list_1699.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1701 = writer.prefix("DeletionProtection");
    if let Some(var_1702) = &input.deletion_protection {
        scope_1701.boolean(*var_1702);
    }
    #[allow(unused_mut)]
    let mut scope_1703 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1704) = &input.copy_tags_to_snapshot {
        scope_1703.boolean(*var_1704);
    }
    #[allow(unused_mut)]
    let mut scope_1705 = writer.prefix("Domain");
    if let Some(var_1706) = &input.domain {
        scope_1705.string(var_1706);
    }
    #[allow(unused_mut)]
    let mut scope_1707 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1708) = &input.domain_iam_role_name {
        scope_1707.string(var_1708);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_from_snapshot(
    input: &crate::input::RestoreDbClusterFromSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterFromSnapshot", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1709 = writer.prefix("AvailabilityZones");
    if let Some(var_1710) = &input.availability_zones {
        let mut list_1712 = scope_1709.start_list(false, Some("AvailabilityZone"));
        for item_1711 in var_1710 {
            #[allow(unused_mut)]
            let mut entry_1713 = list_1712.entry();
            entry_1713.string(item_1711);
        }
        list_1712.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1714 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1715) = &input.db_cluster_identifier {
        scope_1714.string(var_1715);
    }
    #[allow(unused_mut)]
    let mut scope_1716 = writer.prefix("SnapshotIdentifier");
    if let Some(var_1717) = &input.snapshot_identifier {
        scope_1716.string(var_1717);
    }
    #[allow(unused_mut)]
    let mut scope_1718 = writer.prefix("Engine");
    if let Some(var_1719) = &input.engine {
        scope_1718.string(var_1719);
    }
    #[allow(unused_mut)]
    let mut scope_1720 = writer.prefix("EngineVersion");
    if let Some(var_1721) = &input.engine_version {
        scope_1720.string(var_1721);
    }
    #[allow(unused_mut)]
    let mut scope_1722 = writer.prefix("Port");
    if let Some(var_1723) = &input.port {
        scope_1722.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1723).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1724 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1725) = &input.db_subnet_group_name {
        scope_1724.string(var_1725);
    }
    #[allow(unused_mut)]
    let mut scope_1726 = writer.prefix("DatabaseName");
    if let Some(var_1727) = &input.database_name {
        scope_1726.string(var_1727);
    }
    #[allow(unused_mut)]
    let mut scope_1728 = writer.prefix("OptionGroupName");
    if let Some(var_1729) = &input.option_group_name {
        scope_1728.string(var_1729);
    }
    #[allow(unused_mut)]
    let mut scope_1730 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1731) = &input.vpc_security_group_ids {
        let mut list_1733 = scope_1730.start_list(false, Some("VpcSecurityGroupId"));
        for item_1732 in var_1731 {
            #[allow(unused_mut)]
            let mut entry_1734 = list_1733.entry();
            entry_1734.string(item_1732);
        }
        list_1733.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1735 = writer.prefix("Tags");
    if let Some(var_1736) = &input.tags {
        let mut list_1738 = scope_1735.start_list(false, Some("Tag"));
        for item_1737 in var_1736 {
            #[allow(unused_mut)]
            let mut entry_1739 = list_1738.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1739, item_1737)?;
        }
        list_1738.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1740 = writer.prefix("KmsKeyId");
    if let Some(var_1741) = &input.kms_key_id {
        scope_1740.string(var_1741);
    }
    #[allow(unused_mut)]
    let mut scope_1742 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1743) = &input.enable_iam_database_authentication {
        scope_1742.boolean(*var_1743);
    }
    #[allow(unused_mut)]
    let mut scope_1744 = writer.prefix("BacktrackWindow");
    if let Some(var_1745) = &input.backtrack_window {
        scope_1744.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1745).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1746 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1747) = &input.enable_cloudwatch_logs_exports {
        let mut list_1749 = scope_1746.start_list(false, None);
        for item_1748 in var_1747 {
            #[allow(unused_mut)]
            let mut entry_1750 = list_1749.entry();
            entry_1750.string(item_1748);
        }
        list_1749.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1751 = writer.prefix("EngineMode");
    if let Some(var_1752) = &input.engine_mode {
        scope_1751.string(var_1752);
    }
    #[allow(unused_mut)]
    let mut scope_1753 = writer.prefix("ScalingConfiguration");
    if let Some(var_1754) = &input.scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_scaling_configuration(
            scope_1753, var_1754,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1755 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1756) = &input.db_cluster_parameter_group_name {
        scope_1755.string(var_1756);
    }
    #[allow(unused_mut)]
    let mut scope_1757 = writer.prefix("DeletionProtection");
    if let Some(var_1758) = &input.deletion_protection {
        scope_1757.boolean(*var_1758);
    }
    #[allow(unused_mut)]
    let mut scope_1759 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1760) = &input.copy_tags_to_snapshot {
        scope_1759.boolean(*var_1760);
    }
    #[allow(unused_mut)]
    let mut scope_1761 = writer.prefix("Domain");
    if let Some(var_1762) = &input.domain {
        scope_1761.string(var_1762);
    }
    #[allow(unused_mut)]
    let mut scope_1763 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1764) = &input.domain_iam_role_name {
        scope_1763.string(var_1764);
    }
    #[allow(unused_mut)]
    let mut scope_1765 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_1766) = &input.db_cluster_instance_class {
        scope_1765.string(var_1766);
    }
    #[allow(unused_mut)]
    let mut scope_1767 = writer.prefix("StorageType");
    if let Some(var_1768) = &input.storage_type {
        scope_1767.string(var_1768);
    }
    #[allow(unused_mut)]
    let mut scope_1769 = writer.prefix("Iops");
    if let Some(var_1770) = &input.iops {
        scope_1769.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1770).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1771 = writer.prefix("PubliclyAccessible");
    if let Some(var_1772) = &input.publicly_accessible {
        scope_1771.boolean(*var_1772);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_cluster_to_point_in_time(
    input: &crate::input::RestoreDbClusterToPointInTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBClusterToPointInTime", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1773 = writer.prefix("DBClusterIdentifier");
    if let Some(var_1774) = &input.db_cluster_identifier {
        scope_1773.string(var_1774);
    }
    #[allow(unused_mut)]
    let mut scope_1775 = writer.prefix("RestoreType");
    if let Some(var_1776) = &input.restore_type {
        scope_1775.string(var_1776);
    }
    #[allow(unused_mut)]
    let mut scope_1777 = writer.prefix("SourceDBClusterIdentifier");
    if let Some(var_1778) = &input.source_db_cluster_identifier {
        scope_1777.string(var_1778);
    }
    #[allow(unused_mut)]
    let mut scope_1779 = writer.prefix("RestoreToTime");
    if let Some(var_1780) = &input.restore_to_time {
        scope_1779.date_time(var_1780, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_1781 = writer.prefix("UseLatestRestorableTime");
    if input.use_latest_restorable_time {
        scope_1781.boolean(input.use_latest_restorable_time);
    }
    #[allow(unused_mut)]
    let mut scope_1782 = writer.prefix("Port");
    if let Some(var_1783) = &input.port {
        scope_1782.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1783).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1784 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1785) = &input.db_subnet_group_name {
        scope_1784.string(var_1785);
    }
    #[allow(unused_mut)]
    let mut scope_1786 = writer.prefix("OptionGroupName");
    if let Some(var_1787) = &input.option_group_name {
        scope_1786.string(var_1787);
    }
    #[allow(unused_mut)]
    let mut scope_1788 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1789) = &input.vpc_security_group_ids {
        let mut list_1791 = scope_1788.start_list(false, Some("VpcSecurityGroupId"));
        for item_1790 in var_1789 {
            #[allow(unused_mut)]
            let mut entry_1792 = list_1791.entry();
            entry_1792.string(item_1790);
        }
        list_1791.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1793 = writer.prefix("Tags");
    if let Some(var_1794) = &input.tags {
        let mut list_1796 = scope_1793.start_list(false, Some("Tag"));
        for item_1795 in var_1794 {
            #[allow(unused_mut)]
            let mut entry_1797 = list_1796.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1797, item_1795)?;
        }
        list_1796.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1798 = writer.prefix("KmsKeyId");
    if let Some(var_1799) = &input.kms_key_id {
        scope_1798.string(var_1799);
    }
    #[allow(unused_mut)]
    let mut scope_1800 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1801) = &input.enable_iam_database_authentication {
        scope_1800.boolean(*var_1801);
    }
    #[allow(unused_mut)]
    let mut scope_1802 = writer.prefix("BacktrackWindow");
    if let Some(var_1803) = &input.backtrack_window {
        scope_1802.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1803).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1804 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1805) = &input.enable_cloudwatch_logs_exports {
        let mut list_1807 = scope_1804.start_list(false, None);
        for item_1806 in var_1805 {
            #[allow(unused_mut)]
            let mut entry_1808 = list_1807.entry();
            entry_1808.string(item_1806);
        }
        list_1807.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1809 = writer.prefix("DBClusterParameterGroupName");
    if let Some(var_1810) = &input.db_cluster_parameter_group_name {
        scope_1809.string(var_1810);
    }
    #[allow(unused_mut)]
    let mut scope_1811 = writer.prefix("DeletionProtection");
    if let Some(var_1812) = &input.deletion_protection {
        scope_1811.boolean(*var_1812);
    }
    #[allow(unused_mut)]
    let mut scope_1813 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1814) = &input.copy_tags_to_snapshot {
        scope_1813.boolean(*var_1814);
    }
    #[allow(unused_mut)]
    let mut scope_1815 = writer.prefix("Domain");
    if let Some(var_1816) = &input.domain {
        scope_1815.string(var_1816);
    }
    #[allow(unused_mut)]
    let mut scope_1817 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1818) = &input.domain_iam_role_name {
        scope_1817.string(var_1818);
    }
    #[allow(unused_mut)]
    let mut scope_1819 = writer.prefix("ScalingConfiguration");
    if let Some(var_1820) = &input.scaling_configuration {
        crate::query_ser::serialize_structure_crate_model_scaling_configuration(
            scope_1819, var_1820,
        )?;
    }
    #[allow(unused_mut)]
    let mut scope_1821 = writer.prefix("EngineMode");
    if let Some(var_1822) = &input.engine_mode {
        scope_1821.string(var_1822);
    }
    #[allow(unused_mut)]
    let mut scope_1823 = writer.prefix("DBClusterInstanceClass");
    if let Some(var_1824) = &input.db_cluster_instance_class {
        scope_1823.string(var_1824);
    }
    #[allow(unused_mut)]
    let mut scope_1825 = writer.prefix("StorageType");
    if let Some(var_1826) = &input.storage_type {
        scope_1825.string(var_1826);
    }
    #[allow(unused_mut)]
    let mut scope_1827 = writer.prefix("PubliclyAccessible");
    if let Some(var_1828) = &input.publicly_accessible {
        scope_1827.boolean(*var_1828);
    }
    #[allow(unused_mut)]
    let mut scope_1829 = writer.prefix("Iops");
    if let Some(var_1830) = &input.iops {
        scope_1829.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1830).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_instance_from_db_snapshot(
    input: &crate::input::RestoreDbInstanceFromDbSnapshotInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreDBInstanceFromDBSnapshot",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_1831 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1832) = &input.db_instance_identifier {
        scope_1831.string(var_1832);
    }
    #[allow(unused_mut)]
    let mut scope_1833 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_1834) = &input.db_snapshot_identifier {
        scope_1833.string(var_1834);
    }
    #[allow(unused_mut)]
    let mut scope_1835 = writer.prefix("DBInstanceClass");
    if let Some(var_1836) = &input.db_instance_class {
        scope_1835.string(var_1836);
    }
    #[allow(unused_mut)]
    let mut scope_1837 = writer.prefix("Port");
    if let Some(var_1838) = &input.port {
        scope_1837.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1838).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1839 = writer.prefix("AvailabilityZone");
    if let Some(var_1840) = &input.availability_zone {
        scope_1839.string(var_1840);
    }
    #[allow(unused_mut)]
    let mut scope_1841 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1842) = &input.db_subnet_group_name {
        scope_1841.string(var_1842);
    }
    #[allow(unused_mut)]
    let mut scope_1843 = writer.prefix("MultiAZ");
    if let Some(var_1844) = &input.multi_az {
        scope_1843.boolean(*var_1844);
    }
    #[allow(unused_mut)]
    let mut scope_1845 = writer.prefix("PubliclyAccessible");
    if let Some(var_1846) = &input.publicly_accessible {
        scope_1845.boolean(*var_1846);
    }
    #[allow(unused_mut)]
    let mut scope_1847 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1848) = &input.auto_minor_version_upgrade {
        scope_1847.boolean(*var_1848);
    }
    #[allow(unused_mut)]
    let mut scope_1849 = writer.prefix("LicenseModel");
    if let Some(var_1850) = &input.license_model {
        scope_1849.string(var_1850);
    }
    #[allow(unused_mut)]
    let mut scope_1851 = writer.prefix("DBName");
    if let Some(var_1852) = &input.db_name {
        scope_1851.string(var_1852);
    }
    #[allow(unused_mut)]
    let mut scope_1853 = writer.prefix("Engine");
    if let Some(var_1854) = &input.engine {
        scope_1853.string(var_1854);
    }
    #[allow(unused_mut)]
    let mut scope_1855 = writer.prefix("Iops");
    if let Some(var_1856) = &input.iops {
        scope_1855.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1856).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1857 = writer.prefix("OptionGroupName");
    if let Some(var_1858) = &input.option_group_name {
        scope_1857.string(var_1858);
    }
    #[allow(unused_mut)]
    let mut scope_1859 = writer.prefix("Tags");
    if let Some(var_1860) = &input.tags {
        let mut list_1862 = scope_1859.start_list(false, Some("Tag"));
        for item_1861 in var_1860 {
            #[allow(unused_mut)]
            let mut entry_1863 = list_1862.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1863, item_1861)?;
        }
        list_1862.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1864 = writer.prefix("StorageType");
    if let Some(var_1865) = &input.storage_type {
        scope_1864.string(var_1865);
    }
    #[allow(unused_mut)]
    let mut scope_1866 = writer.prefix("TdeCredentialArn");
    if let Some(var_1867) = &input.tde_credential_arn {
        scope_1866.string(var_1867);
    }
    #[allow(unused_mut)]
    let mut scope_1868 = writer.prefix("TdeCredentialPassword");
    if let Some(var_1869) = &input.tde_credential_password {
        scope_1868.string(var_1869);
    }
    #[allow(unused_mut)]
    let mut scope_1870 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1871) = &input.vpc_security_group_ids {
        let mut list_1873 = scope_1870.start_list(false, Some("VpcSecurityGroupId"));
        for item_1872 in var_1871 {
            #[allow(unused_mut)]
            let mut entry_1874 = list_1873.entry();
            entry_1874.string(item_1872);
        }
        list_1873.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1875 = writer.prefix("Domain");
    if let Some(var_1876) = &input.domain {
        scope_1875.string(var_1876);
    }
    #[allow(unused_mut)]
    let mut scope_1877 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1878) = &input.copy_tags_to_snapshot {
        scope_1877.boolean(*var_1878);
    }
    #[allow(unused_mut)]
    let mut scope_1879 = writer.prefix("DomainIAMRoleName");
    if let Some(var_1880) = &input.domain_iam_role_name {
        scope_1879.string(var_1880);
    }
    #[allow(unused_mut)]
    let mut scope_1881 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1882) = &input.enable_iam_database_authentication {
        scope_1881.boolean(*var_1882);
    }
    #[allow(unused_mut)]
    let mut scope_1883 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1884) = &input.enable_cloudwatch_logs_exports {
        let mut list_1886 = scope_1883.start_list(false, None);
        for item_1885 in var_1884 {
            #[allow(unused_mut)]
            let mut entry_1887 = list_1886.entry();
            entry_1887.string(item_1885);
        }
        list_1886.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1888 = writer.prefix("ProcessorFeatures");
    if let Some(var_1889) = &input.processor_features {
        let mut list_1891 = scope_1888.start_list(false, Some("ProcessorFeature"));
        for item_1890 in var_1889 {
            #[allow(unused_mut)]
            let mut entry_1892 = list_1891.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_1892, item_1890,
            )?;
        }
        list_1891.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1893 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_1894) = &input.use_default_processor_features {
        scope_1893.boolean(*var_1894);
    }
    #[allow(unused_mut)]
    let mut scope_1895 = writer.prefix("DBParameterGroupName");
    if let Some(var_1896) = &input.db_parameter_group_name {
        scope_1895.string(var_1896);
    }
    #[allow(unused_mut)]
    let mut scope_1897 = writer.prefix("DeletionProtection");
    if let Some(var_1898) = &input.deletion_protection {
        scope_1897.boolean(*var_1898);
    }
    #[allow(unused_mut)]
    let mut scope_1899 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_1900) = &input.enable_customer_owned_ip {
        scope_1899.boolean(*var_1900);
    }
    #[allow(unused_mut)]
    let mut scope_1901 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_1902) = &input.custom_iam_instance_profile {
        scope_1901.string(var_1902);
    }
    #[allow(unused_mut)]
    let mut scope_1903 = writer.prefix("BackupTarget");
    if let Some(var_1904) = &input.backup_target {
        scope_1903.string(var_1904);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_instance_from_s3(
    input: &crate::input::RestoreDbInstanceFromS3Input,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RestoreDBInstanceFromS3", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_1905 = writer.prefix("DBName");
    if let Some(var_1906) = &input.db_name {
        scope_1905.string(var_1906);
    }
    #[allow(unused_mut)]
    let mut scope_1907 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_1908) = &input.db_instance_identifier {
        scope_1907.string(var_1908);
    }
    #[allow(unused_mut)]
    let mut scope_1909 = writer.prefix("AllocatedStorage");
    if let Some(var_1910) = &input.allocated_storage {
        scope_1909.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1910).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1911 = writer.prefix("DBInstanceClass");
    if let Some(var_1912) = &input.db_instance_class {
        scope_1911.string(var_1912);
    }
    #[allow(unused_mut)]
    let mut scope_1913 = writer.prefix("Engine");
    if let Some(var_1914) = &input.engine {
        scope_1913.string(var_1914);
    }
    #[allow(unused_mut)]
    let mut scope_1915 = writer.prefix("MasterUsername");
    if let Some(var_1916) = &input.master_username {
        scope_1915.string(var_1916);
    }
    #[allow(unused_mut)]
    let mut scope_1917 = writer.prefix("MasterUserPassword");
    if let Some(var_1918) = &input.master_user_password {
        scope_1917.string(var_1918);
    }
    #[allow(unused_mut)]
    let mut scope_1919 = writer.prefix("DBSecurityGroups");
    if let Some(var_1920) = &input.db_security_groups {
        let mut list_1922 = scope_1919.start_list(false, Some("DBSecurityGroupName"));
        for item_1921 in var_1920 {
            #[allow(unused_mut)]
            let mut entry_1923 = list_1922.entry();
            entry_1923.string(item_1921);
        }
        list_1922.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1924 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_1925) = &input.vpc_security_group_ids {
        let mut list_1927 = scope_1924.start_list(false, Some("VpcSecurityGroupId"));
        for item_1926 in var_1925 {
            #[allow(unused_mut)]
            let mut entry_1928 = list_1927.entry();
            entry_1928.string(item_1926);
        }
        list_1927.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1929 = writer.prefix("AvailabilityZone");
    if let Some(var_1930) = &input.availability_zone {
        scope_1929.string(var_1930);
    }
    #[allow(unused_mut)]
    let mut scope_1931 = writer.prefix("DBSubnetGroupName");
    if let Some(var_1932) = &input.db_subnet_group_name {
        scope_1931.string(var_1932);
    }
    #[allow(unused_mut)]
    let mut scope_1933 = writer.prefix("PreferredMaintenanceWindow");
    if let Some(var_1934) = &input.preferred_maintenance_window {
        scope_1933.string(var_1934);
    }
    #[allow(unused_mut)]
    let mut scope_1935 = writer.prefix("DBParameterGroupName");
    if let Some(var_1936) = &input.db_parameter_group_name {
        scope_1935.string(var_1936);
    }
    #[allow(unused_mut)]
    let mut scope_1937 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_1938) = &input.backup_retention_period {
        scope_1937.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1938).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1939 = writer.prefix("PreferredBackupWindow");
    if let Some(var_1940) = &input.preferred_backup_window {
        scope_1939.string(var_1940);
    }
    #[allow(unused_mut)]
    let mut scope_1941 = writer.prefix("Port");
    if let Some(var_1942) = &input.port {
        scope_1941.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1942).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1943 = writer.prefix("MultiAZ");
    if let Some(var_1944) = &input.multi_az {
        scope_1943.boolean(*var_1944);
    }
    #[allow(unused_mut)]
    let mut scope_1945 = writer.prefix("EngineVersion");
    if let Some(var_1946) = &input.engine_version {
        scope_1945.string(var_1946);
    }
    #[allow(unused_mut)]
    let mut scope_1947 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_1948) = &input.auto_minor_version_upgrade {
        scope_1947.boolean(*var_1948);
    }
    #[allow(unused_mut)]
    let mut scope_1949 = writer.prefix("LicenseModel");
    if let Some(var_1950) = &input.license_model {
        scope_1949.string(var_1950);
    }
    #[allow(unused_mut)]
    let mut scope_1951 = writer.prefix("Iops");
    if let Some(var_1952) = &input.iops {
        scope_1951.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1952).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1953 = writer.prefix("OptionGroupName");
    if let Some(var_1954) = &input.option_group_name {
        scope_1953.string(var_1954);
    }
    #[allow(unused_mut)]
    let mut scope_1955 = writer.prefix("PubliclyAccessible");
    if let Some(var_1956) = &input.publicly_accessible {
        scope_1955.boolean(*var_1956);
    }
    #[allow(unused_mut)]
    let mut scope_1957 = writer.prefix("Tags");
    if let Some(var_1958) = &input.tags {
        let mut list_1960 = scope_1957.start_list(false, Some("Tag"));
        for item_1959 in var_1958 {
            #[allow(unused_mut)]
            let mut entry_1961 = list_1960.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_1961, item_1959)?;
        }
        list_1960.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1962 = writer.prefix("StorageType");
    if let Some(var_1963) = &input.storage_type {
        scope_1962.string(var_1963);
    }
    #[allow(unused_mut)]
    let mut scope_1964 = writer.prefix("StorageEncrypted");
    if let Some(var_1965) = &input.storage_encrypted {
        scope_1964.boolean(*var_1965);
    }
    #[allow(unused_mut)]
    let mut scope_1966 = writer.prefix("KmsKeyId");
    if let Some(var_1967) = &input.kms_key_id {
        scope_1966.string(var_1967);
    }
    #[allow(unused_mut)]
    let mut scope_1968 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_1969) = &input.copy_tags_to_snapshot {
        scope_1968.boolean(*var_1969);
    }
    #[allow(unused_mut)]
    let mut scope_1970 = writer.prefix("MonitoringInterval");
    if let Some(var_1971) = &input.monitoring_interval {
        scope_1970.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1971).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1972 = writer.prefix("MonitoringRoleArn");
    if let Some(var_1973) = &input.monitoring_role_arn {
        scope_1972.string(var_1973);
    }
    #[allow(unused_mut)]
    let mut scope_1974 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_1975) = &input.enable_iam_database_authentication {
        scope_1974.boolean(*var_1975);
    }
    #[allow(unused_mut)]
    let mut scope_1976 = writer.prefix("SourceEngine");
    if let Some(var_1977) = &input.source_engine {
        scope_1976.string(var_1977);
    }
    #[allow(unused_mut)]
    let mut scope_1978 = writer.prefix("SourceEngineVersion");
    if let Some(var_1979) = &input.source_engine_version {
        scope_1978.string(var_1979);
    }
    #[allow(unused_mut)]
    let mut scope_1980 = writer.prefix("S3BucketName");
    if let Some(var_1981) = &input.s3_bucket_name {
        scope_1980.string(var_1981);
    }
    #[allow(unused_mut)]
    let mut scope_1982 = writer.prefix("S3Prefix");
    if let Some(var_1983) = &input.s3_prefix {
        scope_1982.string(var_1983);
    }
    #[allow(unused_mut)]
    let mut scope_1984 = writer.prefix("S3IngestionRoleArn");
    if let Some(var_1985) = &input.s3_ingestion_role_arn {
        scope_1984.string(var_1985);
    }
    #[allow(unused_mut)]
    let mut scope_1986 = writer.prefix("EnablePerformanceInsights");
    if let Some(var_1987) = &input.enable_performance_insights {
        scope_1986.boolean(*var_1987);
    }
    #[allow(unused_mut)]
    let mut scope_1988 = writer.prefix("PerformanceInsightsKMSKeyId");
    if let Some(var_1989) = &input.performance_insights_kms_key_id {
        scope_1988.string(var_1989);
    }
    #[allow(unused_mut)]
    let mut scope_1990 = writer.prefix("PerformanceInsightsRetentionPeriod");
    if let Some(var_1991) = &input.performance_insights_retention_period {
        scope_1990.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_1991).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_1992 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_1993) = &input.enable_cloudwatch_logs_exports {
        let mut list_1995 = scope_1992.start_list(false, None);
        for item_1994 in var_1993 {
            #[allow(unused_mut)]
            let mut entry_1996 = list_1995.entry();
            entry_1996.string(item_1994);
        }
        list_1995.finish();
    }
    #[allow(unused_mut)]
    let mut scope_1997 = writer.prefix("ProcessorFeatures");
    if let Some(var_1998) = &input.processor_features {
        let mut list_2000 = scope_1997.start_list(false, Some("ProcessorFeature"));
        for item_1999 in var_1998 {
            #[allow(unused_mut)]
            let mut entry_2001 = list_2000.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_2001, item_1999,
            )?;
        }
        list_2000.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2002 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_2003) = &input.use_default_processor_features {
        scope_2002.boolean(*var_2003);
    }
    #[allow(unused_mut)]
    let mut scope_2004 = writer.prefix("DeletionProtection");
    if let Some(var_2005) = &input.deletion_protection {
        scope_2004.boolean(*var_2005);
    }
    #[allow(unused_mut)]
    let mut scope_2006 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_2007) = &input.max_allocated_storage {
        scope_2006.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2007).into()),
        );
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_restore_db_instance_to_point_in_time(
    input: &crate::input::RestoreDbInstanceToPointInTimeInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "RestoreDBInstanceToPointInTime",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_2008 = writer.prefix("SourceDBInstanceIdentifier");
    if let Some(var_2009) = &input.source_db_instance_identifier {
        scope_2008.string(var_2009);
    }
    #[allow(unused_mut)]
    let mut scope_2010 = writer.prefix("TargetDBInstanceIdentifier");
    if let Some(var_2011) = &input.target_db_instance_identifier {
        scope_2010.string(var_2011);
    }
    #[allow(unused_mut)]
    let mut scope_2012 = writer.prefix("RestoreTime");
    if let Some(var_2013) = &input.restore_time {
        scope_2012.date_time(var_2013, aws_smithy_types::date_time::Format::DateTime)?;
    }
    #[allow(unused_mut)]
    let mut scope_2014 = writer.prefix("UseLatestRestorableTime");
    if input.use_latest_restorable_time {
        scope_2014.boolean(input.use_latest_restorable_time);
    }
    #[allow(unused_mut)]
    let mut scope_2015 = writer.prefix("DBInstanceClass");
    if let Some(var_2016) = &input.db_instance_class {
        scope_2015.string(var_2016);
    }
    #[allow(unused_mut)]
    let mut scope_2017 = writer.prefix("Port");
    if let Some(var_2018) = &input.port {
        scope_2017.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2018).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2019 = writer.prefix("AvailabilityZone");
    if let Some(var_2020) = &input.availability_zone {
        scope_2019.string(var_2020);
    }
    #[allow(unused_mut)]
    let mut scope_2021 = writer.prefix("DBSubnetGroupName");
    if let Some(var_2022) = &input.db_subnet_group_name {
        scope_2021.string(var_2022);
    }
    #[allow(unused_mut)]
    let mut scope_2023 = writer.prefix("MultiAZ");
    if let Some(var_2024) = &input.multi_az {
        scope_2023.boolean(*var_2024);
    }
    #[allow(unused_mut)]
    let mut scope_2025 = writer.prefix("PubliclyAccessible");
    if let Some(var_2026) = &input.publicly_accessible {
        scope_2025.boolean(*var_2026);
    }
    #[allow(unused_mut)]
    let mut scope_2027 = writer.prefix("AutoMinorVersionUpgrade");
    if let Some(var_2028) = &input.auto_minor_version_upgrade {
        scope_2027.boolean(*var_2028);
    }
    #[allow(unused_mut)]
    let mut scope_2029 = writer.prefix("LicenseModel");
    if let Some(var_2030) = &input.license_model {
        scope_2029.string(var_2030);
    }
    #[allow(unused_mut)]
    let mut scope_2031 = writer.prefix("DBName");
    if let Some(var_2032) = &input.db_name {
        scope_2031.string(var_2032);
    }
    #[allow(unused_mut)]
    let mut scope_2033 = writer.prefix("Engine");
    if let Some(var_2034) = &input.engine {
        scope_2033.string(var_2034);
    }
    #[allow(unused_mut)]
    let mut scope_2035 = writer.prefix("Iops");
    if let Some(var_2036) = &input.iops {
        scope_2035.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2036).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2037 = writer.prefix("OptionGroupName");
    if let Some(var_2038) = &input.option_group_name {
        scope_2037.string(var_2038);
    }
    #[allow(unused_mut)]
    let mut scope_2039 = writer.prefix("CopyTagsToSnapshot");
    if let Some(var_2040) = &input.copy_tags_to_snapshot {
        scope_2039.boolean(*var_2040);
    }
    #[allow(unused_mut)]
    let mut scope_2041 = writer.prefix("Tags");
    if let Some(var_2042) = &input.tags {
        let mut list_2044 = scope_2041.start_list(false, Some("Tag"));
        for item_2043 in var_2042 {
            #[allow(unused_mut)]
            let mut entry_2045 = list_2044.entry();
            crate::query_ser::serialize_structure_crate_model_tag(entry_2045, item_2043)?;
        }
        list_2044.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2046 = writer.prefix("StorageType");
    if let Some(var_2047) = &input.storage_type {
        scope_2046.string(var_2047);
    }
    #[allow(unused_mut)]
    let mut scope_2048 = writer.prefix("TdeCredentialArn");
    if let Some(var_2049) = &input.tde_credential_arn {
        scope_2048.string(var_2049);
    }
    #[allow(unused_mut)]
    let mut scope_2050 = writer.prefix("TdeCredentialPassword");
    if let Some(var_2051) = &input.tde_credential_password {
        scope_2050.string(var_2051);
    }
    #[allow(unused_mut)]
    let mut scope_2052 = writer.prefix("VpcSecurityGroupIds");
    if let Some(var_2053) = &input.vpc_security_group_ids {
        let mut list_2055 = scope_2052.start_list(false, Some("VpcSecurityGroupId"));
        for item_2054 in var_2053 {
            #[allow(unused_mut)]
            let mut entry_2056 = list_2055.entry();
            entry_2056.string(item_2054);
        }
        list_2055.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2057 = writer.prefix("Domain");
    if let Some(var_2058) = &input.domain {
        scope_2057.string(var_2058);
    }
    #[allow(unused_mut)]
    let mut scope_2059 = writer.prefix("DomainIAMRoleName");
    if let Some(var_2060) = &input.domain_iam_role_name {
        scope_2059.string(var_2060);
    }
    #[allow(unused_mut)]
    let mut scope_2061 = writer.prefix("EnableIAMDatabaseAuthentication");
    if let Some(var_2062) = &input.enable_iam_database_authentication {
        scope_2061.boolean(*var_2062);
    }
    #[allow(unused_mut)]
    let mut scope_2063 = writer.prefix("EnableCloudwatchLogsExports");
    if let Some(var_2064) = &input.enable_cloudwatch_logs_exports {
        let mut list_2066 = scope_2063.start_list(false, None);
        for item_2065 in var_2064 {
            #[allow(unused_mut)]
            let mut entry_2067 = list_2066.entry();
            entry_2067.string(item_2065);
        }
        list_2066.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2068 = writer.prefix("ProcessorFeatures");
    if let Some(var_2069) = &input.processor_features {
        let mut list_2071 = scope_2068.start_list(false, Some("ProcessorFeature"));
        for item_2070 in var_2069 {
            #[allow(unused_mut)]
            let mut entry_2072 = list_2071.entry();
            crate::query_ser::serialize_structure_crate_model_processor_feature(
                entry_2072, item_2070,
            )?;
        }
        list_2071.finish();
    }
    #[allow(unused_mut)]
    let mut scope_2073 = writer.prefix("UseDefaultProcessorFeatures");
    if let Some(var_2074) = &input.use_default_processor_features {
        scope_2073.boolean(*var_2074);
    }
    #[allow(unused_mut)]
    let mut scope_2075 = writer.prefix("DBParameterGroupName");
    if let Some(var_2076) = &input.db_parameter_group_name {
        scope_2075.string(var_2076);
    }
    #[allow(unused_mut)]
    let mut scope_2077 = writer.prefix("DeletionProtection");
    if let Some(var_2078) = &input.deletion_protection {
        scope_2077.boolean(*var_2078);
    }
    #[allow(unused_mut)]
    let mut scope_2079 = writer.prefix("SourceDbiResourceId");
    if let Some(var_2080) = &input.source_dbi_resource_id {
        scope_2079.string(var_2080);
    }
    #[allow(unused_mut)]
    let mut scope_2081 = writer.prefix("MaxAllocatedStorage");
    if let Some(var_2082) = &input.max_allocated_storage {
        scope_2081.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2082).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2083 = writer.prefix("SourceDBInstanceAutomatedBackupsArn");
    if let Some(var_2084) = &input.source_db_instance_automated_backups_arn {
        scope_2083.string(var_2084);
    }
    #[allow(unused_mut)]
    let mut scope_2085 = writer.prefix("EnableCustomerOwnedIp");
    if let Some(var_2086) = &input.enable_customer_owned_ip {
        scope_2085.boolean(*var_2086);
    }
    #[allow(unused_mut)]
    let mut scope_2087 = writer.prefix("CustomIamInstanceProfile");
    if let Some(var_2088) = &input.custom_iam_instance_profile {
        scope_2087.string(var_2088);
    }
    #[allow(unused_mut)]
    let mut scope_2089 = writer.prefix("BackupTarget");
    if let Some(var_2090) = &input.backup_target {
        scope_2089.string(var_2090);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_revoke_db_security_group_ingress(
    input: &crate::input::RevokeDbSecurityGroupIngressInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "RevokeDBSecurityGroupIngress", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2091 = writer.prefix("DBSecurityGroupName");
    if let Some(var_2092) = &input.db_security_group_name {
        scope_2091.string(var_2092);
    }
    #[allow(unused_mut)]
    let mut scope_2093 = writer.prefix("CIDRIP");
    if let Some(var_2094) = &input.cidrip {
        scope_2093.string(var_2094);
    }
    #[allow(unused_mut)]
    let mut scope_2095 = writer.prefix("EC2SecurityGroupName");
    if let Some(var_2096) = &input.ec2_security_group_name {
        scope_2095.string(var_2096);
    }
    #[allow(unused_mut)]
    let mut scope_2097 = writer.prefix("EC2SecurityGroupId");
    if let Some(var_2098) = &input.ec2_security_group_id {
        scope_2097.string(var_2098);
    }
    #[allow(unused_mut)]
    let mut scope_2099 = writer.prefix("EC2SecurityGroupOwnerId");
    if let Some(var_2100) = &input.ec2_security_group_owner_id {
        scope_2099.string(var_2100);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_activity_stream(
    input: &crate::input::StartActivityStreamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StartActivityStream", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2101 = writer.prefix("ResourceArn");
    if let Some(var_2102) = &input.resource_arn {
        scope_2101.string(var_2102);
    }
    #[allow(unused_mut)]
    let mut scope_2103 = writer.prefix("Mode");
    if let Some(var_2104) = &input.mode {
        scope_2103.string(var_2104.as_str());
    }
    #[allow(unused_mut)]
    let mut scope_2105 = writer.prefix("KmsKeyId");
    if let Some(var_2106) = &input.kms_key_id {
        scope_2105.string(var_2106);
    }
    #[allow(unused_mut)]
    let mut scope_2107 = writer.prefix("ApplyImmediately");
    if let Some(var_2108) = &input.apply_immediately {
        scope_2107.boolean(*var_2108);
    }
    #[allow(unused_mut)]
    let mut scope_2109 = writer.prefix("EngineNativeAuditFieldsIncluded");
    if let Some(var_2110) = &input.engine_native_audit_fields_included {
        scope_2109.boolean(*var_2110);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_db_cluster(
    input: &crate::input::StartDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2111 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2112) = &input.db_cluster_identifier {
        scope_2111.string(var_2112);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_db_instance(
    input: &crate::input::StartDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2113 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_2114) = &input.db_instance_identifier {
        scope_2113.string(var_2114);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_db_instance_automated_backups_replication(
    input: &crate::input::StartDbInstanceAutomatedBackupsReplicationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StartDBInstanceAutomatedBackupsReplication",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_2115 = writer.prefix("SourceDBInstanceArn");
    if let Some(var_2116) = &input.source_db_instance_arn {
        scope_2115.string(var_2116);
    }
    #[allow(unused_mut)]
    let mut scope_2117 = writer.prefix("BackupRetentionPeriod");
    if let Some(var_2118) = &input.backup_retention_period {
        scope_2117.number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2118).into()),
        );
    }
    #[allow(unused_mut)]
    let mut scope_2119 = writer.prefix("KmsKeyId");
    if let Some(var_2120) = &input.kms_key_id {
        scope_2119.string(var_2120);
    }
    #[allow(unused_mut)]
    let mut scope_2121 = writer.prefix("PreSignedUrl");
    if let Some(var_2122) = &input.pre_signed_url {
        scope_2121.string(var_2122);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_start_export_task(
    input: &crate::input::StartExportTaskInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StartExportTask", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2123 = writer.prefix("ExportTaskIdentifier");
    if let Some(var_2124) = &input.export_task_identifier {
        scope_2123.string(var_2124);
    }
    #[allow(unused_mut)]
    let mut scope_2125 = writer.prefix("SourceArn");
    if let Some(var_2126) = &input.source_arn {
        scope_2125.string(var_2126);
    }
    #[allow(unused_mut)]
    let mut scope_2127 = writer.prefix("S3BucketName");
    if let Some(var_2128) = &input.s3_bucket_name {
        scope_2127.string(var_2128);
    }
    #[allow(unused_mut)]
    let mut scope_2129 = writer.prefix("IamRoleArn");
    if let Some(var_2130) = &input.iam_role_arn {
        scope_2129.string(var_2130);
    }
    #[allow(unused_mut)]
    let mut scope_2131 = writer.prefix("KmsKeyId");
    if let Some(var_2132) = &input.kms_key_id {
        scope_2131.string(var_2132);
    }
    #[allow(unused_mut)]
    let mut scope_2133 = writer.prefix("S3Prefix");
    if let Some(var_2134) = &input.s3_prefix {
        scope_2133.string(var_2134);
    }
    #[allow(unused_mut)]
    let mut scope_2135 = writer.prefix("ExportOnly");
    if let Some(var_2136) = &input.export_only {
        let mut list_2138 = scope_2135.start_list(false, None);
        for item_2137 in var_2136 {
            #[allow(unused_mut)]
            let mut entry_2139 = list_2138.entry();
            entry_2139.string(item_2137);
        }
        list_2138.finish();
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_activity_stream(
    input: &crate::input::StopActivityStreamInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer =
        aws_smithy_query::QueryWriter::new(&mut out, "StopActivityStream", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2140 = writer.prefix("ResourceArn");
    if let Some(var_2141) = &input.resource_arn {
        scope_2140.string(var_2141);
    }
    #[allow(unused_mut)]
    let mut scope_2142 = writer.prefix("ApplyImmediately");
    if let Some(var_2143) = &input.apply_immediately {
        scope_2142.boolean(*var_2143);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_db_cluster(
    input: &crate::input::StopDbClusterInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopDBCluster", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2144 = writer.prefix("DBClusterIdentifier");
    if let Some(var_2145) = &input.db_cluster_identifier {
        scope_2144.string(var_2145);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_db_instance(
    input: &crate::input::StopDbInstanceInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(&mut out, "StopDBInstance", "2014-10-31");
    #[allow(unused_mut)]
    let mut scope_2146 = writer.prefix("DBInstanceIdentifier");
    if let Some(var_2147) = &input.db_instance_identifier {
        scope_2146.string(var_2147);
    }
    #[allow(unused_mut)]
    let mut scope_2148 = writer.prefix("DBSnapshotIdentifier");
    if let Some(var_2149) = &input.db_snapshot_identifier {
        scope_2148.string(var_2149);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}

pub fn serialize_operation_crate_operation_stop_db_instance_automated_backups_replication(
    input: &crate::input::StopDbInstanceAutomatedBackupsReplicationInput,
) -> Result<aws_smithy_http::body::SdkBody, aws_smithy_http::operation::SerializationError> {
    let mut out = String::new();
    #[allow(unused_mut)]
    let mut writer = aws_smithy_query::QueryWriter::new(
        &mut out,
        "StopDBInstanceAutomatedBackupsReplication",
        "2014-10-31",
    );
    #[allow(unused_mut)]
    let mut scope_2150 = writer.prefix("SourceDBInstanceArn");
    if let Some(var_2151) = &input.source_db_instance_arn {
        scope_2150.string(var_2151);
    }
    writer.finish();
    Ok(aws_smithy_http::body::SdkBody::from(out))
}
