// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Available option.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OptionGroupOption {
    /// <p>The name of the option.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the option.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The name of the engine that this option can be applied to.</p>
    pub engine_name: ::std::option::Option<::std::string::String>,
    /// <p>Indicates the major engine version that the option is available for.</p>
    pub major_engine_version: ::std::option::Option<::std::string::String>,
    /// <p>The minimum required engine version for the option to be applied.</p>
    pub minimum_required_minor_engine_version: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the option requires a port.</p>
    pub port_required: ::std::option::Option<bool>,
    /// <p>If the option requires a port, specifies the default port for the option.</p>
    pub default_port: ::std::option::Option<i32>,
    /// <p>The options that are prerequisites for this option.</p>
    pub options_depended_on: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The options that conflict with this option.</p>
    pub options_conflicts_with: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Persistent options can't be removed from an option group while DB instances are associated with the option group. If you disassociate all DB instances from the option group, your can remove the persistent option from the option group.</p>
    pub persistent: ::std::option::Option<bool>,
    /// <p>Permanent options can never be removed from an option group. An option group containing a permanent option can't be removed from a DB instance.</p>
    pub permanent: ::std::option::Option<bool>,
    /// <p>If true, you must enable the Auto Minor Version Upgrade setting for your DB instance before you can use this option. You can enable Auto Minor Version Upgrade when you first create your DB instance, or by modifying your DB instance later.</p>
    pub requires_auto_minor_engine_version_upgrade: ::std::option::Option<bool>,
    /// <p>If true, you can only use this option with a DB instance that is in a VPC.</p>
    pub vpc_only: ::std::option::Option<bool>,
    /// <p>If true, you can change the option to an earlier version of the option. This only applies to options that have different versions available.</p>
    pub supports_option_version_downgrade: ::std::option::Option<bool>,
    /// <p>The option settings that are available (and the default value) for each option in an option group.</p>
    pub option_group_option_settings: ::std::option::Option<::std::vec::Vec<crate::types::OptionGroupOptionSetting>>,
    /// <p>The versions that are available for the option.</p>
    pub option_group_option_versions: ::std::option::Option<::std::vec::Vec<crate::types::OptionVersion>>,
    /// <p>Indicates whether the option can be copied across Amazon Web Services accounts.</p>
    pub copyable_cross_account: ::std::option::Option<bool>,
}
impl OptionGroupOption {
    /// <p>The name of the option.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the option.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the engine that this option can be applied to.</p>
    pub fn engine_name(&self) -> ::std::option::Option<&str> {
        self.engine_name.as_deref()
    }
    /// <p>Indicates the major engine version that the option is available for.</p>
    pub fn major_engine_version(&self) -> ::std::option::Option<&str> {
        self.major_engine_version.as_deref()
    }
    /// <p>The minimum required engine version for the option to be applied.</p>
    pub fn minimum_required_minor_engine_version(&self) -> ::std::option::Option<&str> {
        self.minimum_required_minor_engine_version.as_deref()
    }
    /// <p>Indicates whether the option requires a port.</p>
    pub fn port_required(&self) -> ::std::option::Option<bool> {
        self.port_required
    }
    /// <p>If the option requires a port, specifies the default port for the option.</p>
    pub fn default_port(&self) -> ::std::option::Option<i32> {
        self.default_port
    }
    /// <p>The options that are prerequisites for this option.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.options_depended_on.is_none()`.
    pub fn options_depended_on(&self) -> &[::std::string::String] {
        self.options_depended_on.as_deref().unwrap_or_default()
    }
    /// <p>The options that conflict with this option.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.options_conflicts_with.is_none()`.
    pub fn options_conflicts_with(&self) -> &[::std::string::String] {
        self.options_conflicts_with.as_deref().unwrap_or_default()
    }
    /// <p>Persistent options can't be removed from an option group while DB instances are associated with the option group. If you disassociate all DB instances from the option group, your can remove the persistent option from the option group.</p>
    pub fn persistent(&self) -> ::std::option::Option<bool> {
        self.persistent
    }
    /// <p>Permanent options can never be removed from an option group. An option group containing a permanent option can't be removed from a DB instance.</p>
    pub fn permanent(&self) -> ::std::option::Option<bool> {
        self.permanent
    }
    /// <p>If true, you must enable the Auto Minor Version Upgrade setting for your DB instance before you can use this option. You can enable Auto Minor Version Upgrade when you first create your DB instance, or by modifying your DB instance later.</p>
    pub fn requires_auto_minor_engine_version_upgrade(&self) -> ::std::option::Option<bool> {
        self.requires_auto_minor_engine_version_upgrade
    }
    /// <p>If true, you can only use this option with a DB instance that is in a VPC.</p>
    pub fn vpc_only(&self) -> ::std::option::Option<bool> {
        self.vpc_only
    }
    /// <p>If true, you can change the option to an earlier version of the option. This only applies to options that have different versions available.</p>
    pub fn supports_option_version_downgrade(&self) -> ::std::option::Option<bool> {
        self.supports_option_version_downgrade
    }
    /// <p>The option settings that are available (and the default value) for each option in an option group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.option_group_option_settings.is_none()`.
    pub fn option_group_option_settings(&self) -> &[crate::types::OptionGroupOptionSetting] {
        self.option_group_option_settings.as_deref().unwrap_or_default()
    }
    /// <p>The versions that are available for the option.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.option_group_option_versions.is_none()`.
    pub fn option_group_option_versions(&self) -> &[crate::types::OptionVersion] {
        self.option_group_option_versions.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether the option can be copied across Amazon Web Services accounts.</p>
    pub fn copyable_cross_account(&self) -> ::std::option::Option<bool> {
        self.copyable_cross_account
    }
}
impl OptionGroupOption {
    /// Creates a new builder-style object to manufacture [`OptionGroupOption`](crate::types::OptionGroupOption).
    pub fn builder() -> crate::types::builders::OptionGroupOptionBuilder {
        crate::types::builders::OptionGroupOptionBuilder::default()
    }
}

/// A builder for [`OptionGroupOption`](crate::types::OptionGroupOption).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OptionGroupOptionBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) engine_name: ::std::option::Option<::std::string::String>,
    pub(crate) major_engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) minimum_required_minor_engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) port_required: ::std::option::Option<bool>,
    pub(crate) default_port: ::std::option::Option<i32>,
    pub(crate) options_depended_on: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) options_conflicts_with: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) persistent: ::std::option::Option<bool>,
    pub(crate) permanent: ::std::option::Option<bool>,
    pub(crate) requires_auto_minor_engine_version_upgrade: ::std::option::Option<bool>,
    pub(crate) vpc_only: ::std::option::Option<bool>,
    pub(crate) supports_option_version_downgrade: ::std::option::Option<bool>,
    pub(crate) option_group_option_settings: ::std::option::Option<::std::vec::Vec<crate::types::OptionGroupOptionSetting>>,
    pub(crate) option_group_option_versions: ::std::option::Option<::std::vec::Vec<crate::types::OptionVersion>>,
    pub(crate) copyable_cross_account: ::std::option::Option<bool>,
}
impl OptionGroupOptionBuilder {
    /// <p>The name of the option.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the option.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the option.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the option.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the option.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the option.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The name of the engine that this option can be applied to.</p>
    pub fn engine_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the engine that this option can be applied to.</p>
    pub fn set_engine_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_name = input;
        self
    }
    /// <p>The name of the engine that this option can be applied to.</p>
    pub fn get_engine_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_name
    }
    /// <p>Indicates the major engine version that the option is available for.</p>
    pub fn major_engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.major_engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the major engine version that the option is available for.</p>
    pub fn set_major_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.major_engine_version = input;
        self
    }
    /// <p>Indicates the major engine version that the option is available for.</p>
    pub fn get_major_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.major_engine_version
    }
    /// <p>The minimum required engine version for the option to be applied.</p>
    pub fn minimum_required_minor_engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.minimum_required_minor_engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The minimum required engine version for the option to be applied.</p>
    pub fn set_minimum_required_minor_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.minimum_required_minor_engine_version = input;
        self
    }
    /// <p>The minimum required engine version for the option to be applied.</p>
    pub fn get_minimum_required_minor_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.minimum_required_minor_engine_version
    }
    /// <p>Indicates whether the option requires a port.</p>
    pub fn port_required(mut self, input: bool) -> Self {
        self.port_required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the option requires a port.</p>
    pub fn set_port_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.port_required = input;
        self
    }
    /// <p>Indicates whether the option requires a port.</p>
    pub fn get_port_required(&self) -> &::std::option::Option<bool> {
        &self.port_required
    }
    /// <p>If the option requires a port, specifies the default port for the option.</p>
    pub fn default_port(mut self, input: i32) -> Self {
        self.default_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the option requires a port, specifies the default port for the option.</p>
    pub fn set_default_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.default_port = input;
        self
    }
    /// <p>If the option requires a port, specifies the default port for the option.</p>
    pub fn get_default_port(&self) -> &::std::option::Option<i32> {
        &self.default_port
    }
    /// Appends an item to `options_depended_on`.
    ///
    /// To override the contents of this collection use [`set_options_depended_on`](Self::set_options_depended_on).
    ///
    /// <p>The options that are prerequisites for this option.</p>
    pub fn options_depended_on(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.options_depended_on.unwrap_or_default();
        v.push(input.into());
        self.options_depended_on = ::std::option::Option::Some(v);
        self
    }
    /// <p>The options that are prerequisites for this option.</p>
    pub fn set_options_depended_on(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.options_depended_on = input;
        self
    }
    /// <p>The options that are prerequisites for this option.</p>
    pub fn get_options_depended_on(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.options_depended_on
    }
    /// Appends an item to `options_conflicts_with`.
    ///
    /// To override the contents of this collection use [`set_options_conflicts_with`](Self::set_options_conflicts_with).
    ///
    /// <p>The options that conflict with this option.</p>
    pub fn options_conflicts_with(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.options_conflicts_with.unwrap_or_default();
        v.push(input.into());
        self.options_conflicts_with = ::std::option::Option::Some(v);
        self
    }
    /// <p>The options that conflict with this option.</p>
    pub fn set_options_conflicts_with(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.options_conflicts_with = input;
        self
    }
    /// <p>The options that conflict with this option.</p>
    pub fn get_options_conflicts_with(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.options_conflicts_with
    }
    /// <p>Persistent options can't be removed from an option group while DB instances are associated with the option group. If you disassociate all DB instances from the option group, your can remove the persistent option from the option group.</p>
    pub fn persistent(mut self, input: bool) -> Self {
        self.persistent = ::std::option::Option::Some(input);
        self
    }
    /// <p>Persistent options can't be removed from an option group while DB instances are associated with the option group. If you disassociate all DB instances from the option group, your can remove the persistent option from the option group.</p>
    pub fn set_persistent(mut self, input: ::std::option::Option<bool>) -> Self {
        self.persistent = input;
        self
    }
    /// <p>Persistent options can't be removed from an option group while DB instances are associated with the option group. If you disassociate all DB instances from the option group, your can remove the persistent option from the option group.</p>
    pub fn get_persistent(&self) -> &::std::option::Option<bool> {
        &self.persistent
    }
    /// <p>Permanent options can never be removed from an option group. An option group containing a permanent option can't be removed from a DB instance.</p>
    pub fn permanent(mut self, input: bool) -> Self {
        self.permanent = ::std::option::Option::Some(input);
        self
    }
    /// <p>Permanent options can never be removed from an option group. An option group containing a permanent option can't be removed from a DB instance.</p>
    pub fn set_permanent(mut self, input: ::std::option::Option<bool>) -> Self {
        self.permanent = input;
        self
    }
    /// <p>Permanent options can never be removed from an option group. An option group containing a permanent option can't be removed from a DB instance.</p>
    pub fn get_permanent(&self) -> &::std::option::Option<bool> {
        &self.permanent
    }
    /// <p>If true, you must enable the Auto Minor Version Upgrade setting for your DB instance before you can use this option. You can enable Auto Minor Version Upgrade when you first create your DB instance, or by modifying your DB instance later.</p>
    pub fn requires_auto_minor_engine_version_upgrade(mut self, input: bool) -> Self {
        self.requires_auto_minor_engine_version_upgrade = ::std::option::Option::Some(input);
        self
    }
    /// <p>If true, you must enable the Auto Minor Version Upgrade setting for your DB instance before you can use this option. You can enable Auto Minor Version Upgrade when you first create your DB instance, or by modifying your DB instance later.</p>
    pub fn set_requires_auto_minor_engine_version_upgrade(mut self, input: ::std::option::Option<bool>) -> Self {
        self.requires_auto_minor_engine_version_upgrade = input;
        self
    }
    /// <p>If true, you must enable the Auto Minor Version Upgrade setting for your DB instance before you can use this option. You can enable Auto Minor Version Upgrade when you first create your DB instance, or by modifying your DB instance later.</p>
    pub fn get_requires_auto_minor_engine_version_upgrade(&self) -> &::std::option::Option<bool> {
        &self.requires_auto_minor_engine_version_upgrade
    }
    /// <p>If true, you can only use this option with a DB instance that is in a VPC.</p>
    pub fn vpc_only(mut self, input: bool) -> Self {
        self.vpc_only = ::std::option::Option::Some(input);
        self
    }
    /// <p>If true, you can only use this option with a DB instance that is in a VPC.</p>
    pub fn set_vpc_only(mut self, input: ::std::option::Option<bool>) -> Self {
        self.vpc_only = input;
        self
    }
    /// <p>If true, you can only use this option with a DB instance that is in a VPC.</p>
    pub fn get_vpc_only(&self) -> &::std::option::Option<bool> {
        &self.vpc_only
    }
    /// <p>If true, you can change the option to an earlier version of the option. This only applies to options that have different versions available.</p>
    pub fn supports_option_version_downgrade(mut self, input: bool) -> Self {
        self.supports_option_version_downgrade = ::std::option::Option::Some(input);
        self
    }
    /// <p>If true, you can change the option to an earlier version of the option. This only applies to options that have different versions available.</p>
    pub fn set_supports_option_version_downgrade(mut self, input: ::std::option::Option<bool>) -> Self {
        self.supports_option_version_downgrade = input;
        self
    }
    /// <p>If true, you can change the option to an earlier version of the option. This only applies to options that have different versions available.</p>
    pub fn get_supports_option_version_downgrade(&self) -> &::std::option::Option<bool> {
        &self.supports_option_version_downgrade
    }
    /// Appends an item to `option_group_option_settings`.
    ///
    /// To override the contents of this collection use [`set_option_group_option_settings`](Self::set_option_group_option_settings).
    ///
    /// <p>The option settings that are available (and the default value) for each option in an option group.</p>
    pub fn option_group_option_settings(mut self, input: crate::types::OptionGroupOptionSetting) -> Self {
        let mut v = self.option_group_option_settings.unwrap_or_default();
        v.push(input);
        self.option_group_option_settings = ::std::option::Option::Some(v);
        self
    }
    /// <p>The option settings that are available (and the default value) for each option in an option group.</p>
    pub fn set_option_group_option_settings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OptionGroupOptionSetting>>) -> Self {
        self.option_group_option_settings = input;
        self
    }
    /// <p>The option settings that are available (and the default value) for each option in an option group.</p>
    pub fn get_option_group_option_settings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OptionGroupOptionSetting>> {
        &self.option_group_option_settings
    }
    /// Appends an item to `option_group_option_versions`.
    ///
    /// To override the contents of this collection use [`set_option_group_option_versions`](Self::set_option_group_option_versions).
    ///
    /// <p>The versions that are available for the option.</p>
    pub fn option_group_option_versions(mut self, input: crate::types::OptionVersion) -> Self {
        let mut v = self.option_group_option_versions.unwrap_or_default();
        v.push(input);
        self.option_group_option_versions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The versions that are available for the option.</p>
    pub fn set_option_group_option_versions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OptionVersion>>) -> Self {
        self.option_group_option_versions = input;
        self
    }
    /// <p>The versions that are available for the option.</p>
    pub fn get_option_group_option_versions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OptionVersion>> {
        &self.option_group_option_versions
    }
    /// <p>Indicates whether the option can be copied across Amazon Web Services accounts.</p>
    pub fn copyable_cross_account(mut self, input: bool) -> Self {
        self.copyable_cross_account = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the option can be copied across Amazon Web Services accounts.</p>
    pub fn set_copyable_cross_account(mut self, input: ::std::option::Option<bool>) -> Self {
        self.copyable_cross_account = input;
        self
    }
    /// <p>Indicates whether the option can be copied across Amazon Web Services accounts.</p>
    pub fn get_copyable_cross_account(&self) -> &::std::option::Option<bool> {
        &self.copyable_cross_account
    }
    /// Consumes the builder and constructs a [`OptionGroupOption`](crate::types::OptionGroupOption).
    pub fn build(self) -> crate::types::OptionGroupOption {
        crate::types::OptionGroupOption {
            name: self.name,
            description: self.description,
            engine_name: self.engine_name,
            major_engine_version: self.major_engine_version,
            minimum_required_minor_engine_version: self.minimum_required_minor_engine_version,
            port_required: self.port_required,
            default_port: self.default_port,
            options_depended_on: self.options_depended_on,
            options_conflicts_with: self.options_conflicts_with,
            persistent: self.persistent,
            permanent: self.permanent,
            requires_auto_minor_engine_version_upgrade: self.requires_auto_minor_engine_version_upgrade,
            vpc_only: self.vpc_only,
            supports_option_version_downgrade: self.supports_option_version_downgrade,
            option_group_option_settings: self.option_group_option_settings,
            option_group_option_versions: self.option_group_option_versions,
            copyable_cross_account: self.copyable_cross_account,
        }
    }
}
