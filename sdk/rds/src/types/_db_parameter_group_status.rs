// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The status of the DB parameter group.</p>
/// <p>This data type is used as a response element in the following actions:</p>
/// <ul>
/// <li>
/// <p><code>CreateDBInstance</code></p></li>
/// <li>
/// <p><code>CreateDBInstanceReadReplica</code></p></li>
/// <li>
/// <p><code>DeleteDBInstance</code></p></li>
/// <li>
/// <p><code>ModifyDBInstance</code></p></li>
/// <li>
/// <p><code>RebootDBInstance</code></p></li>
/// <li>
/// <p><code>RestoreDBInstanceFromDBSnapshot</code></p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DbParameterGroupStatus {
    /// <p>The name of the DB parameter group.</p>
    pub db_parameter_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The status of parameter updates. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>applying</code>: The parameter group change is being applied to the database.</p></li>
    /// <li>
    /// <p><code>failed-to-apply</code>: The parameter group is in an invalid state.</p></li>
    /// <li>
    /// <p><code>in-sync</code>: The parameter group change is synchronized with the database.</p></li>
    /// <li>
    /// <p><code>pending-database-upgrade</code>: The parameter group change will be applied after the DB instance is upgraded.</p></li>
    /// <li>
    /// <p><code>pending-reboot</code>: The parameter group change will be applied after the DB instance reboots.</p></li>
    /// </ul>
    pub parameter_apply_status: ::std::option::Option<::std::string::String>,
}
impl DbParameterGroupStatus {
    /// <p>The name of the DB parameter group.</p>
    pub fn db_parameter_group_name(&self) -> ::std::option::Option<&str> {
        self.db_parameter_group_name.as_deref()
    }
    /// <p>The status of parameter updates. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>applying</code>: The parameter group change is being applied to the database.</p></li>
    /// <li>
    /// <p><code>failed-to-apply</code>: The parameter group is in an invalid state.</p></li>
    /// <li>
    /// <p><code>in-sync</code>: The parameter group change is synchronized with the database.</p></li>
    /// <li>
    /// <p><code>pending-database-upgrade</code>: The parameter group change will be applied after the DB instance is upgraded.</p></li>
    /// <li>
    /// <p><code>pending-reboot</code>: The parameter group change will be applied after the DB instance reboots.</p></li>
    /// </ul>
    pub fn parameter_apply_status(&self) -> ::std::option::Option<&str> {
        self.parameter_apply_status.as_deref()
    }
}
impl DbParameterGroupStatus {
    /// Creates a new builder-style object to manufacture [`DbParameterGroupStatus`](crate::types::DbParameterGroupStatus).
    pub fn builder() -> crate::types::builders::DbParameterGroupStatusBuilder {
        crate::types::builders::DbParameterGroupStatusBuilder::default()
    }
}

/// A builder for [`DbParameterGroupStatus`](crate::types::DbParameterGroupStatus).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DbParameterGroupStatusBuilder {
    pub(crate) db_parameter_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) parameter_apply_status: ::std::option::Option<::std::string::String>,
}
impl DbParameterGroupStatusBuilder {
    /// <p>The name of the DB parameter group.</p>
    pub fn db_parameter_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_parameter_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the DB parameter group.</p>
    pub fn set_db_parameter_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_parameter_group_name = input;
        self
    }
    /// <p>The name of the DB parameter group.</p>
    pub fn get_db_parameter_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_parameter_group_name
    }
    /// <p>The status of parameter updates. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>applying</code>: The parameter group change is being applied to the database.</p></li>
    /// <li>
    /// <p><code>failed-to-apply</code>: The parameter group is in an invalid state.</p></li>
    /// <li>
    /// <p><code>in-sync</code>: The parameter group change is synchronized with the database.</p></li>
    /// <li>
    /// <p><code>pending-database-upgrade</code>: The parameter group change will be applied after the DB instance is upgraded.</p></li>
    /// <li>
    /// <p><code>pending-reboot</code>: The parameter group change will be applied after the DB instance reboots.</p></li>
    /// </ul>
    pub fn parameter_apply_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parameter_apply_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of parameter updates. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>applying</code>: The parameter group change is being applied to the database.</p></li>
    /// <li>
    /// <p><code>failed-to-apply</code>: The parameter group is in an invalid state.</p></li>
    /// <li>
    /// <p><code>in-sync</code>: The parameter group change is synchronized with the database.</p></li>
    /// <li>
    /// <p><code>pending-database-upgrade</code>: The parameter group change will be applied after the DB instance is upgraded.</p></li>
    /// <li>
    /// <p><code>pending-reboot</code>: The parameter group change will be applied after the DB instance reboots.</p></li>
    /// </ul>
    pub fn set_parameter_apply_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parameter_apply_status = input;
        self
    }
    /// <p>The status of parameter updates. Valid values are:</p>
    /// <ul>
    /// <li>
    /// <p><code>applying</code>: The parameter group change is being applied to the database.</p></li>
    /// <li>
    /// <p><code>failed-to-apply</code>: The parameter group is in an invalid state.</p></li>
    /// <li>
    /// <p><code>in-sync</code>: The parameter group change is synchronized with the database.</p></li>
    /// <li>
    /// <p><code>pending-database-upgrade</code>: The parameter group change will be applied after the DB instance is upgraded.</p></li>
    /// <li>
    /// <p><code>pending-reboot</code>: The parameter group change will be applied after the DB instance reboots.</p></li>
    /// </ul>
    pub fn get_parameter_apply_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.parameter_apply_status
    }
    /// Consumes the builder and constructs a [`DbParameterGroupStatus`](crate::types::DbParameterGroupStatus).
    pub fn build(self) -> crate::types::DbParameterGroupStatus {
        crate::types::DbParameterGroupStatus {
            db_parameter_group_name: self.db_parameter_group_name,
            parameter_apply_status: self.parameter_apply_status,
        }
    }
}
