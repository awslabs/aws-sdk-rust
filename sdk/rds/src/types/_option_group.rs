// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OptionGroup {
    /// <p>Specifies the name of the option group.</p>
    #[doc(hidden)]
    pub option_group_name: std::option::Option<std::string::String>,
    /// <p>Provides a description of the option group.</p>
    #[doc(hidden)]
    pub option_group_description: std::option::Option<std::string::String>,
    /// <p>Indicates the name of the engine that this option group can be applied to.</p>
    #[doc(hidden)]
    pub engine_name: std::option::Option<std::string::String>,
    /// <p>Indicates the major engine version associated with this option group.</p>
    #[doc(hidden)]
    pub major_engine_version: std::option::Option<std::string::String>,
    /// <p>Indicates what options are available in the option group.</p>
    #[doc(hidden)]
    pub options: std::option::Option<std::vec::Vec<crate::types::Option>>,
    /// <p>Indicates whether this option group can be applied to both VPC and non-VPC instances. The value <code>true</code> indicates the option group can be applied to both VPC and non-VPC instances.</p>
    #[doc(hidden)]
    pub allows_vpc_and_non_vpc_instance_memberships: bool,
    /// <p>If <b>AllowsVpcAndNonVpcInstanceMemberships</b> is <code>false</code>, this field is blank. If <b>AllowsVpcAndNonVpcInstanceMemberships</b> is <code>true</code> and this field is blank, then this option group can be applied to both VPC and non-VPC instances. If this field contains a value, then this option group can only be applied to instances that are in the VPC indicated by this field.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>Specifies the Amazon Resource Name (ARN) for the option group.</p>
    #[doc(hidden)]
    pub option_group_arn: std::option::Option<std::string::String>,
    /// <p>Specifies the name of the option group from which this option group is copied.</p>
    #[doc(hidden)]
    pub source_option_group: std::option::Option<std::string::String>,
    /// <p>Specifies the Amazon Web Services account ID for the option group from which this option group is copied.</p>
    #[doc(hidden)]
    pub source_account_id: std::option::Option<std::string::String>,
    /// <p>Indicates when the option group was copied.</p>
    #[doc(hidden)]
    pub copy_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl OptionGroup {
    /// <p>Specifies the name of the option group.</p>
    pub fn option_group_name(&self) -> std::option::Option<&str> {
        self.option_group_name.as_deref()
    }
    /// <p>Provides a description of the option group.</p>
    pub fn option_group_description(&self) -> std::option::Option<&str> {
        self.option_group_description.as_deref()
    }
    /// <p>Indicates the name of the engine that this option group can be applied to.</p>
    pub fn engine_name(&self) -> std::option::Option<&str> {
        self.engine_name.as_deref()
    }
    /// <p>Indicates the major engine version associated with this option group.</p>
    pub fn major_engine_version(&self) -> std::option::Option<&str> {
        self.major_engine_version.as_deref()
    }
    /// <p>Indicates what options are available in the option group.</p>
    pub fn options(&self) -> std::option::Option<&[crate::types::Option]> {
        self.options.as_deref()
    }
    /// <p>Indicates whether this option group can be applied to both VPC and non-VPC instances. The value <code>true</code> indicates the option group can be applied to both VPC and non-VPC instances.</p>
    pub fn allows_vpc_and_non_vpc_instance_memberships(&self) -> bool {
        self.allows_vpc_and_non_vpc_instance_memberships
    }
    /// <p>If <b>AllowsVpcAndNonVpcInstanceMemberships</b> is <code>false</code>, this field is blank. If <b>AllowsVpcAndNonVpcInstanceMemberships</b> is <code>true</code> and this field is blank, then this option group can be applied to both VPC and non-VPC instances. If this field contains a value, then this option group can only be applied to instances that are in the VPC indicated by this field.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>Specifies the Amazon Resource Name (ARN) for the option group.</p>
    pub fn option_group_arn(&self) -> std::option::Option<&str> {
        self.option_group_arn.as_deref()
    }
    /// <p>Specifies the name of the option group from which this option group is copied.</p>
    pub fn source_option_group(&self) -> std::option::Option<&str> {
        self.source_option_group.as_deref()
    }
    /// <p>Specifies the Amazon Web Services account ID for the option group from which this option group is copied.</p>
    pub fn source_account_id(&self) -> std::option::Option<&str> {
        self.source_account_id.as_deref()
    }
    /// <p>Indicates when the option group was copied.</p>
    pub fn copy_timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.copy_timestamp.as_ref()
    }
}
impl OptionGroup {
    /// Creates a new builder-style object to manufacture [`OptionGroup`](crate::types::OptionGroup).
    pub fn builder() -> crate::types::builders::OptionGroupBuilder {
        crate::types::builders::OptionGroupBuilder::default()
    }
}

/// A builder for [`OptionGroup`](crate::types::OptionGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OptionGroupBuilder {
    pub(crate) option_group_name: std::option::Option<std::string::String>,
    pub(crate) option_group_description: std::option::Option<std::string::String>,
    pub(crate) engine_name: std::option::Option<std::string::String>,
    pub(crate) major_engine_version: std::option::Option<std::string::String>,
    pub(crate) options: std::option::Option<std::vec::Vec<crate::types::Option>>,
    pub(crate) allows_vpc_and_non_vpc_instance_memberships: std::option::Option<bool>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) option_group_arn: std::option::Option<std::string::String>,
    pub(crate) source_option_group: std::option::Option<std::string::String>,
    pub(crate) source_account_id: std::option::Option<std::string::String>,
    pub(crate) copy_timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl OptionGroupBuilder {
    /// <p>Specifies the name of the option group.</p>
    pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.option_group_name = Some(input.into());
        self
    }
    /// <p>Specifies the name of the option group.</p>
    pub fn set_option_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.option_group_name = input;
        self
    }
    /// <p>Provides a description of the option group.</p>
    pub fn option_group_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.option_group_description = Some(input.into());
        self
    }
    /// <p>Provides a description of the option group.</p>
    pub fn set_option_group_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.option_group_description = input;
        self
    }
    /// <p>Indicates the name of the engine that this option group can be applied to.</p>
    pub fn engine_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_name = Some(input.into());
        self
    }
    /// <p>Indicates the name of the engine that this option group can be applied to.</p>
    pub fn set_engine_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_name = input;
        self
    }
    /// <p>Indicates the major engine version associated with this option group.</p>
    pub fn major_engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.major_engine_version = Some(input.into());
        self
    }
    /// <p>Indicates the major engine version associated with this option group.</p>
    pub fn set_major_engine_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.major_engine_version = input;
        self
    }
    /// Appends an item to `options`.
    ///
    /// To override the contents of this collection use [`set_options`](Self::set_options).
    ///
    /// <p>Indicates what options are available in the option group.</p>
    pub fn options(mut self, input: crate::types::Option) -> Self {
        let mut v = self.options.unwrap_or_default();
        v.push(input);
        self.options = Some(v);
        self
    }
    /// <p>Indicates what options are available in the option group.</p>
    pub fn set_options(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Option>>,
    ) -> Self {
        self.options = input;
        self
    }
    /// <p>Indicates whether this option group can be applied to both VPC and non-VPC instances. The value <code>true</code> indicates the option group can be applied to both VPC and non-VPC instances.</p>
    pub fn allows_vpc_and_non_vpc_instance_memberships(mut self, input: bool) -> Self {
        self.allows_vpc_and_non_vpc_instance_memberships = Some(input);
        self
    }
    /// <p>Indicates whether this option group can be applied to both VPC and non-VPC instances. The value <code>true</code> indicates the option group can be applied to both VPC and non-VPC instances.</p>
    pub fn set_allows_vpc_and_non_vpc_instance_memberships(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.allows_vpc_and_non_vpc_instance_memberships = input;
        self
    }
    /// <p>If <b>AllowsVpcAndNonVpcInstanceMemberships</b> is <code>false</code>, this field is blank. If <b>AllowsVpcAndNonVpcInstanceMemberships</b> is <code>true</code> and this field is blank, then this option group can be applied to both VPC and non-VPC instances. If this field contains a value, then this option group can only be applied to instances that are in the VPC indicated by this field.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>If <b>AllowsVpcAndNonVpcInstanceMemberships</b> is <code>false</code>, this field is blank. If <b>AllowsVpcAndNonVpcInstanceMemberships</b> is <code>true</code> and this field is blank, then this option group can be applied to both VPC and non-VPC instances. If this field contains a value, then this option group can only be applied to instances that are in the VPC indicated by this field.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) for the option group.</p>
    pub fn option_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.option_group_arn = Some(input.into());
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) for the option group.</p>
    pub fn set_option_group_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.option_group_arn = input;
        self
    }
    /// <p>Specifies the name of the option group from which this option group is copied.</p>
    pub fn source_option_group(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_option_group = Some(input.into());
        self
    }
    /// <p>Specifies the name of the option group from which this option group is copied.</p>
    pub fn set_source_option_group(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_option_group = input;
        self
    }
    /// <p>Specifies the Amazon Web Services account ID for the option group from which this option group is copied.</p>
    pub fn source_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_account_id = Some(input.into());
        self
    }
    /// <p>Specifies the Amazon Web Services account ID for the option group from which this option group is copied.</p>
    pub fn set_source_account_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_account_id = input;
        self
    }
    /// <p>Indicates when the option group was copied.</p>
    pub fn copy_timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.copy_timestamp = Some(input);
        self
    }
    /// <p>Indicates when the option group was copied.</p>
    pub fn set_copy_timestamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.copy_timestamp = input;
        self
    }
    /// Consumes the builder and constructs a [`OptionGroup`](crate::types::OptionGroup).
    pub fn build(self) -> crate::types::OptionGroup {
        crate::types::OptionGroup {
            option_group_name: self.option_group_name,
            option_group_description: self.option_group_description,
            engine_name: self.engine_name,
            major_engine_version: self.major_engine_version,
            options: self.options,
            allows_vpc_and_non_vpc_instance_memberships: self
                .allows_vpc_and_non_vpc_instance_memberships
                .unwrap_or_default(),
            vpc_id: self.vpc_id,
            option_group_arn: self.option_group_arn,
            source_option_group: self.source_option_group,
            source_account_id: self.source_account_id,
            copy_timestamp: self.copy_timestamp,
        }
    }
}
