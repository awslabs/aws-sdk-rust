// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This data type is used as a response element in the <code>DescribeReservedDBInstances</code> and <code>PurchaseReservedDBInstancesOffering</code> actions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReservedDbInstance {
    /// <p>The unique identifier for the reservation.</p>
    #[doc(hidden)]
    pub reserved_db_instance_id: std::option::Option<std::string::String>,
    /// <p>The offering identifier.</p>
    #[doc(hidden)]
    pub reserved_db_instances_offering_id: std::option::Option<std::string::String>,
    /// <p>The DB instance class for the reserved DB instance.</p>
    #[doc(hidden)]
    pub db_instance_class: std::option::Option<std::string::String>,
    /// <p>The time the reservation started.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The duration of the reservation in seconds.</p>
    #[doc(hidden)]
    pub duration: i32,
    /// <p>The fixed price charged for this reserved DB instance.</p>
    #[doc(hidden)]
    pub fixed_price: f64,
    /// <p>The hourly price charged for this reserved DB instance.</p>
    #[doc(hidden)]
    pub usage_price: f64,
    /// <p>The currency code for the reserved DB instance.</p>
    #[doc(hidden)]
    pub currency_code: std::option::Option<std::string::String>,
    /// <p>The number of reserved DB instances.</p>
    #[doc(hidden)]
    pub db_instance_count: i32,
    /// <p>The description of the reserved DB instance.</p>
    #[doc(hidden)]
    pub product_description: std::option::Option<std::string::String>,
    /// <p>The offering type of this reserved DB instance.</p>
    #[doc(hidden)]
    pub offering_type: std::option::Option<std::string::String>,
    /// <p>Indicates if the reservation applies to Multi-AZ deployments.</p>
    #[doc(hidden)]
    pub multi_az: bool,
    /// <p>The state of the reserved DB instance.</p>
    #[doc(hidden)]
    pub state: std::option::Option<std::string::String>,
    /// <p>The recurring price charged to run this reserved DB instance.</p>
    #[doc(hidden)]
    pub recurring_charges: std::option::Option<std::vec::Vec<crate::types::RecurringCharge>>,
    /// <p>The Amazon Resource Name (ARN) for the reserved DB instance.</p>
    #[doc(hidden)]
    pub reserved_db_instance_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the lease associated with the reserved DB instance.</p> <note>
    /// <p>Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.</p>
    /// </note>
    #[doc(hidden)]
    pub lease_id: std::option::Option<std::string::String>,
}
impl ReservedDbInstance {
    /// <p>The unique identifier for the reservation.</p>
    pub fn reserved_db_instance_id(&self) -> std::option::Option<&str> {
        self.reserved_db_instance_id.as_deref()
    }
    /// <p>The offering identifier.</p>
    pub fn reserved_db_instances_offering_id(&self) -> std::option::Option<&str> {
        self.reserved_db_instances_offering_id.as_deref()
    }
    /// <p>The DB instance class for the reserved DB instance.</p>
    pub fn db_instance_class(&self) -> std::option::Option<&str> {
        self.db_instance_class.as_deref()
    }
    /// <p>The time the reservation started.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The duration of the reservation in seconds.</p>
    pub fn duration(&self) -> i32 {
        self.duration
    }
    /// <p>The fixed price charged for this reserved DB instance.</p>
    pub fn fixed_price(&self) -> f64 {
        self.fixed_price
    }
    /// <p>The hourly price charged for this reserved DB instance.</p>
    pub fn usage_price(&self) -> f64 {
        self.usage_price
    }
    /// <p>The currency code for the reserved DB instance.</p>
    pub fn currency_code(&self) -> std::option::Option<&str> {
        self.currency_code.as_deref()
    }
    /// <p>The number of reserved DB instances.</p>
    pub fn db_instance_count(&self) -> i32 {
        self.db_instance_count
    }
    /// <p>The description of the reserved DB instance.</p>
    pub fn product_description(&self) -> std::option::Option<&str> {
        self.product_description.as_deref()
    }
    /// <p>The offering type of this reserved DB instance.</p>
    pub fn offering_type(&self) -> std::option::Option<&str> {
        self.offering_type.as_deref()
    }
    /// <p>Indicates if the reservation applies to Multi-AZ deployments.</p>
    pub fn multi_az(&self) -> bool {
        self.multi_az
    }
    /// <p>The state of the reserved DB instance.</p>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>The recurring price charged to run this reserved DB instance.</p>
    pub fn recurring_charges(&self) -> std::option::Option<&[crate::types::RecurringCharge]> {
        self.recurring_charges.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the reserved DB instance.</p>
    pub fn reserved_db_instance_arn(&self) -> std::option::Option<&str> {
        self.reserved_db_instance_arn.as_deref()
    }
    /// <p>The unique identifier for the lease associated with the reserved DB instance.</p> <note>
    /// <p>Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.</p>
    /// </note>
    pub fn lease_id(&self) -> std::option::Option<&str> {
        self.lease_id.as_deref()
    }
}
impl ReservedDbInstance {
    /// Creates a new builder-style object to manufacture [`ReservedDbInstance`](crate::types::ReservedDbInstance).
    pub fn builder() -> crate::types::builders::ReservedDbInstanceBuilder {
        crate::types::builders::ReservedDbInstanceBuilder::default()
    }
}

/// A builder for [`ReservedDbInstance`](crate::types::ReservedDbInstance).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReservedDbInstanceBuilder {
    pub(crate) reserved_db_instance_id: std::option::Option<std::string::String>,
    pub(crate) reserved_db_instances_offering_id: std::option::Option<std::string::String>,
    pub(crate) db_instance_class: std::option::Option<std::string::String>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) duration: std::option::Option<i32>,
    pub(crate) fixed_price: std::option::Option<f64>,
    pub(crate) usage_price: std::option::Option<f64>,
    pub(crate) currency_code: std::option::Option<std::string::String>,
    pub(crate) db_instance_count: std::option::Option<i32>,
    pub(crate) product_description: std::option::Option<std::string::String>,
    pub(crate) offering_type: std::option::Option<std::string::String>,
    pub(crate) multi_az: std::option::Option<bool>,
    pub(crate) state: std::option::Option<std::string::String>,
    pub(crate) recurring_charges: std::option::Option<std::vec::Vec<crate::types::RecurringCharge>>,
    pub(crate) reserved_db_instance_arn: std::option::Option<std::string::String>,
    pub(crate) lease_id: std::option::Option<std::string::String>,
}
impl ReservedDbInstanceBuilder {
    /// <p>The unique identifier for the reservation.</p>
    pub fn reserved_db_instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.reserved_db_instance_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the reservation.</p>
    pub fn set_reserved_db_instance_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reserved_db_instance_id = input;
        self
    }
    /// <p>The offering identifier.</p>
    pub fn reserved_db_instances_offering_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.reserved_db_instances_offering_id = Some(input.into());
        self
    }
    /// <p>The offering identifier.</p>
    pub fn set_reserved_db_instances_offering_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reserved_db_instances_offering_id = input;
        self
    }
    /// <p>The DB instance class for the reserved DB instance.</p>
    pub fn db_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_instance_class = Some(input.into());
        self
    }
    /// <p>The DB instance class for the reserved DB instance.</p>
    pub fn set_db_instance_class(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_instance_class = input;
        self
    }
    /// <p>The time the reservation started.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The time the reservation started.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The duration of the reservation in seconds.</p>
    pub fn duration(mut self, input: i32) -> Self {
        self.duration = Some(input);
        self
    }
    /// <p>The duration of the reservation in seconds.</p>
    pub fn set_duration(mut self, input: std::option::Option<i32>) -> Self {
        self.duration = input;
        self
    }
    /// <p>The fixed price charged for this reserved DB instance.</p>
    pub fn fixed_price(mut self, input: f64) -> Self {
        self.fixed_price = Some(input);
        self
    }
    /// <p>The fixed price charged for this reserved DB instance.</p>
    pub fn set_fixed_price(mut self, input: std::option::Option<f64>) -> Self {
        self.fixed_price = input;
        self
    }
    /// <p>The hourly price charged for this reserved DB instance.</p>
    pub fn usage_price(mut self, input: f64) -> Self {
        self.usage_price = Some(input);
        self
    }
    /// <p>The hourly price charged for this reserved DB instance.</p>
    pub fn set_usage_price(mut self, input: std::option::Option<f64>) -> Self {
        self.usage_price = input;
        self
    }
    /// <p>The currency code for the reserved DB instance.</p>
    pub fn currency_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.currency_code = Some(input.into());
        self
    }
    /// <p>The currency code for the reserved DB instance.</p>
    pub fn set_currency_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.currency_code = input;
        self
    }
    /// <p>The number of reserved DB instances.</p>
    pub fn db_instance_count(mut self, input: i32) -> Self {
        self.db_instance_count = Some(input);
        self
    }
    /// <p>The number of reserved DB instances.</p>
    pub fn set_db_instance_count(mut self, input: std::option::Option<i32>) -> Self {
        self.db_instance_count = input;
        self
    }
    /// <p>The description of the reserved DB instance.</p>
    pub fn product_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.product_description = Some(input.into());
        self
    }
    /// <p>The description of the reserved DB instance.</p>
    pub fn set_product_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.product_description = input;
        self
    }
    /// <p>The offering type of this reserved DB instance.</p>
    pub fn offering_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.offering_type = Some(input.into());
        self
    }
    /// <p>The offering type of this reserved DB instance.</p>
    pub fn set_offering_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.offering_type = input;
        self
    }
    /// <p>Indicates if the reservation applies to Multi-AZ deployments.</p>
    pub fn multi_az(mut self, input: bool) -> Self {
        self.multi_az = Some(input);
        self
    }
    /// <p>Indicates if the reservation applies to Multi-AZ deployments.</p>
    pub fn set_multi_az(mut self, input: std::option::Option<bool>) -> Self {
        self.multi_az = input;
        self
    }
    /// <p>The state of the reserved DB instance.</p>
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.state = Some(input.into());
        self
    }
    /// <p>The state of the reserved DB instance.</p>
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// Appends an item to `recurring_charges`.
    ///
    /// To override the contents of this collection use [`set_recurring_charges`](Self::set_recurring_charges).
    ///
    /// <p>The recurring price charged to run this reserved DB instance.</p>
    pub fn recurring_charges(mut self, input: crate::types::RecurringCharge) -> Self {
        let mut v = self.recurring_charges.unwrap_or_default();
        v.push(input);
        self.recurring_charges = Some(v);
        self
    }
    /// <p>The recurring price charged to run this reserved DB instance.</p>
    pub fn set_recurring_charges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RecurringCharge>>,
    ) -> Self {
        self.recurring_charges = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the reserved DB instance.</p>
    pub fn reserved_db_instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.reserved_db_instance_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the reserved DB instance.</p>
    pub fn set_reserved_db_instance_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reserved_db_instance_arn = input;
        self
    }
    /// <p>The unique identifier for the lease associated with the reserved DB instance.</p> <note>
    /// <p>Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.</p>
    /// </note>
    pub fn lease_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.lease_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the lease associated with the reserved DB instance.</p> <note>
    /// <p>Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.</p>
    /// </note>
    pub fn set_lease_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lease_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ReservedDbInstance`](crate::types::ReservedDbInstance).
    pub fn build(self) -> crate::types::ReservedDbInstance {
        crate::types::ReservedDbInstance {
            reserved_db_instance_id: self.reserved_db_instance_id,
            reserved_db_instances_offering_id: self.reserved_db_instances_offering_id,
            db_instance_class: self.db_instance_class,
            start_time: self.start_time,
            duration: self.duration.unwrap_or_default(),
            fixed_price: self.fixed_price.unwrap_or_default(),
            usage_price: self.usage_price.unwrap_or_default(),
            currency_code: self.currency_code,
            db_instance_count: self.db_instance_count.unwrap_or_default(),
            product_description: self.product_description,
            offering_type: self.offering_type,
            multi_az: self.multi_az.unwrap_or_default(),
            state: self.state,
            recurring_charges: self.recurring_charges,
            reserved_db_instance_arn: self.reserved_db_instance_arn,
            lease_id: self.lease_id,
        }
    }
}
