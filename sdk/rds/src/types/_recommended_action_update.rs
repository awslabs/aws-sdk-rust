// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The recommended status to update for the specified recommendation action ID.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecommendedActionUpdate {
    /// <p>A unique identifier of the updated recommendation action.</p>
    pub action_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the updated recommendation action.</p>
    /// <ul>
    /// <li>
    /// <p><code>applied</code></p></li>
    /// <li>
    /// <p><code>scheduled</code></p></li>
    /// </ul>
    pub status: ::std::option::Option<::std::string::String>,
}
impl RecommendedActionUpdate {
    /// <p>A unique identifier of the updated recommendation action.</p>
    pub fn action_id(&self) -> ::std::option::Option<&str> {
        self.action_id.as_deref()
    }
    /// <p>The status of the updated recommendation action.</p>
    /// <ul>
    /// <li>
    /// <p><code>applied</code></p></li>
    /// <li>
    /// <p><code>scheduled</code></p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl RecommendedActionUpdate {
    /// Creates a new builder-style object to manufacture [`RecommendedActionUpdate`](crate::types::RecommendedActionUpdate).
    pub fn builder() -> crate::types::builders::RecommendedActionUpdateBuilder {
        crate::types::builders::RecommendedActionUpdateBuilder::default()
    }
}

/// A builder for [`RecommendedActionUpdate`](crate::types::RecommendedActionUpdate).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecommendedActionUpdateBuilder {
    pub(crate) action_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
}
impl RecommendedActionUpdateBuilder {
    /// <p>A unique identifier of the updated recommendation action.</p>
    /// This field is required.
    pub fn action_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier of the updated recommendation action.</p>
    pub fn set_action_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_id = input;
        self
    }
    /// <p>A unique identifier of the updated recommendation action.</p>
    pub fn get_action_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_id
    }
    /// <p>The status of the updated recommendation action.</p>
    /// <ul>
    /// <li>
    /// <p><code>applied</code></p></li>
    /// <li>
    /// <p><code>scheduled</code></p></li>
    /// </ul>
    /// This field is required.
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the updated recommendation action.</p>
    /// <ul>
    /// <li>
    /// <p><code>applied</code></p></li>
    /// <li>
    /// <p><code>scheduled</code></p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the updated recommendation action.</p>
    /// <ul>
    /// <li>
    /// <p><code>applied</code></p></li>
    /// <li>
    /// <p><code>scheduled</code></p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// Consumes the builder and constructs a [`RecommendedActionUpdate`](crate::types::RecommendedActionUpdate).
    pub fn build(self) -> crate::types::RecommendedActionUpdate {
        crate::types::RecommendedActionUpdate {
            action_id: self.action_id,
            status: self.status,
        }
    }
}
