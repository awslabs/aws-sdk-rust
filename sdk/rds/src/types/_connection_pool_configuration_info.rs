// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Displays the settings that control the size and behavior of the connection pool associated with a <code>DBProxyTarget</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConnectionPoolConfigurationInfo {
    /// <p>The maximum size of the connection pool for each target in a target group. The value is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p>
    #[doc(hidden)]
    pub max_connections_percent: i32,
    /// <p>Controls how actively the proxy closes idle database connections in the connection pool. The value is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. With a high value, the proxy leaves a high percentage of idle database connections open. A low value causes the proxy to close more idle connections and return them to the database.</p>
    #[doc(hidden)]
    pub max_idle_connections_percent: i32,
    /// <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p>
    #[doc(hidden)]
    pub connection_borrow_timeout: i32,
    /// <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior. This setting is only supported for MySQL engine family databases. Currently, the only allowed value is <code>EXCLUDE_VARIABLE_SETS</code>.</p>
    #[doc(hidden)]
    pub session_pinning_filters: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. This setting is empty by default. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>.</p>
    #[doc(hidden)]
    pub init_query: std::option::Option<std::string::String>,
}
impl ConnectionPoolConfigurationInfo {
    /// <p>The maximum size of the connection pool for each target in a target group. The value is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p>
    pub fn max_connections_percent(&self) -> i32 {
        self.max_connections_percent
    }
    /// <p>Controls how actively the proxy closes idle database connections in the connection pool. The value is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. With a high value, the proxy leaves a high percentage of idle database connections open. A low value causes the proxy to close more idle connections and return them to the database.</p>
    pub fn max_idle_connections_percent(&self) -> i32 {
        self.max_idle_connections_percent
    }
    /// <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p>
    pub fn connection_borrow_timeout(&self) -> i32 {
        self.connection_borrow_timeout
    }
    /// <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior. This setting is only supported for MySQL engine family databases. Currently, the only allowed value is <code>EXCLUDE_VARIABLE_SETS</code>.</p>
    pub fn session_pinning_filters(&self) -> std::option::Option<&[std::string::String]> {
        self.session_pinning_filters.as_deref()
    }
    /// <p>One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. This setting is empty by default. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>.</p>
    pub fn init_query(&self) -> std::option::Option<&str> {
        self.init_query.as_deref()
    }
}
impl ConnectionPoolConfigurationInfo {
    /// Creates a new builder-style object to manufacture [`ConnectionPoolConfigurationInfo`](crate::types::ConnectionPoolConfigurationInfo).
    pub fn builder() -> crate::types::builders::ConnectionPoolConfigurationInfoBuilder {
        crate::types::builders::ConnectionPoolConfigurationInfoBuilder::default()
    }
}

/// A builder for [`ConnectionPoolConfigurationInfo`](crate::types::ConnectionPoolConfigurationInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConnectionPoolConfigurationInfoBuilder {
    pub(crate) max_connections_percent: std::option::Option<i32>,
    pub(crate) max_idle_connections_percent: std::option::Option<i32>,
    pub(crate) connection_borrow_timeout: std::option::Option<i32>,
    pub(crate) session_pinning_filters: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) init_query: std::option::Option<std::string::String>,
}
impl ConnectionPoolConfigurationInfoBuilder {
    /// <p>The maximum size of the connection pool for each target in a target group. The value is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p>
    pub fn max_connections_percent(mut self, input: i32) -> Self {
        self.max_connections_percent = Some(input);
        self
    }
    /// <p>The maximum size of the connection pool for each target in a target group. The value is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group.</p>
    pub fn set_max_connections_percent(mut self, input: std::option::Option<i32>) -> Self {
        self.max_connections_percent = input;
        self
    }
    /// <p>Controls how actively the proxy closes idle database connections in the connection pool. The value is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. With a high value, the proxy leaves a high percentage of idle database connections open. A low value causes the proxy to close more idle connections and return them to the database.</p>
    pub fn max_idle_connections_percent(mut self, input: i32) -> Self {
        self.max_idle_connections_percent = Some(input);
        self
    }
    /// <p>Controls how actively the proxy closes idle database connections in the connection pool. The value is expressed as a percentage of the <code>max_connections</code> setting for the RDS DB instance or Aurora DB cluster used by the target group. With a high value, the proxy leaves a high percentage of idle database connections open. A low value causes the proxy to close more idle connections and return them to the database.</p>
    pub fn set_max_idle_connections_percent(mut self, input: std::option::Option<i32>) -> Self {
        self.max_idle_connections_percent = input;
        self
    }
    /// <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p>
    pub fn connection_borrow_timeout(mut self, input: i32) -> Self {
        self.connection_borrow_timeout = Some(input);
        self
    }
    /// <p>The number of seconds for a proxy to wait for a connection to become available in the connection pool. Only applies when the proxy has opened its maximum number of connections and all connections are busy with client sessions.</p>
    pub fn set_connection_borrow_timeout(mut self, input: std::option::Option<i32>) -> Self {
        self.connection_borrow_timeout = input;
        self
    }
    /// Appends an item to `session_pinning_filters`.
    ///
    /// To override the contents of this collection use [`set_session_pinning_filters`](Self::set_session_pinning_filters).
    ///
    /// <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior. This setting is only supported for MySQL engine family databases. Currently, the only allowed value is <code>EXCLUDE_VARIABLE_SETS</code>.</p>
    pub fn session_pinning_filters(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.session_pinning_filters.unwrap_or_default();
        v.push(input.into());
        self.session_pinning_filters = Some(v);
        self
    }
    /// <p>Each item in the list represents a class of SQL operations that normally cause all later statements in a session using a proxy to be pinned to the same underlying database connection. Including an item in the list exempts that class of SQL operations from the pinning behavior. This setting is only supported for MySQL engine family databases. Currently, the only allowed value is <code>EXCLUDE_VARIABLE_SETS</code>.</p>
    pub fn set_session_pinning_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.session_pinning_filters = input;
        self
    }
    /// <p>One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. This setting is empty by default. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>.</p>
    pub fn init_query(mut self, input: impl Into<std::string::String>) -> Self {
        self.init_query = Some(input.into());
        self
    }
    /// <p>One or more SQL statements for the proxy to run when opening each new database connection. Typically used with <code>SET</code> statements to make sure that each connection has identical settings such as time zone and character set. This setting is empty by default. For multiple statements, use semicolons as the separator. You can also include multiple variables in a single <code>SET</code> statement, such as <code>SET x=1, y=2</code>.</p>
    pub fn set_init_query(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.init_query = input;
        self
    }
    /// Consumes the builder and constructs a [`ConnectionPoolConfigurationInfo`](crate::types::ConnectionPoolConfigurationInfo).
    pub fn build(self) -> crate::types::ConnectionPoolConfigurationInfo {
        crate::types::ConnectionPoolConfigurationInfo {
            max_connections_percent: self.max_connections_percent.unwrap_or_default(),
            max_idle_connections_percent: self.max_idle_connections_percent.unwrap_or_default(),
            connection_borrow_timeout: self.connection_borrow_timeout.unwrap_or_default(),
            session_pinning_filters: self.session_pinning_filters,
            init_query: self.init_query,
        }
    }
}
