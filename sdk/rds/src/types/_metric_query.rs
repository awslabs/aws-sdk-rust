// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The query to retrieve metric data points.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricQuery {
    /// <p>The Performance Insights query that you can use to retrieve Performance Insights metric data points.</p>
    pub performance_insights_metric_query: ::std::option::Option<crate::types::PerformanceInsightsMetricQuery>,
}
impl MetricQuery {
    /// <p>The Performance Insights query that you can use to retrieve Performance Insights metric data points.</p>
    pub fn performance_insights_metric_query(&self) -> ::std::option::Option<&crate::types::PerformanceInsightsMetricQuery> {
        self.performance_insights_metric_query.as_ref()
    }
}
impl MetricQuery {
    /// Creates a new builder-style object to manufacture [`MetricQuery`](crate::types::MetricQuery).
    pub fn builder() -> crate::types::builders::MetricQueryBuilder {
        crate::types::builders::MetricQueryBuilder::default()
    }
}

/// A builder for [`MetricQuery`](crate::types::MetricQuery).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MetricQueryBuilder {
    pub(crate) performance_insights_metric_query: ::std::option::Option<crate::types::PerformanceInsightsMetricQuery>,
}
impl MetricQueryBuilder {
    /// <p>The Performance Insights query that you can use to retrieve Performance Insights metric data points.</p>
    pub fn performance_insights_metric_query(mut self, input: crate::types::PerformanceInsightsMetricQuery) -> Self {
        self.performance_insights_metric_query = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Performance Insights query that you can use to retrieve Performance Insights metric data points.</p>
    pub fn set_performance_insights_metric_query(mut self, input: ::std::option::Option<crate::types::PerformanceInsightsMetricQuery>) -> Self {
        self.performance_insights_metric_query = input;
        self
    }
    /// <p>The Performance Insights query that you can use to retrieve Performance Insights metric data points.</p>
    pub fn get_performance_insights_metric_query(&self) -> &::std::option::Option<crate::types::PerformanceInsightsMetricQuery> {
        &self.performance_insights_metric_query
    }
    /// Consumes the builder and constructs a [`MetricQuery`](crate::types::MetricQuery).
    pub fn build(self) -> crate::types::MetricQuery {
        crate::types::MetricQuery {
            performance_insights_metric_query: self.performance_insights_metric_query,
        }
    }
}
