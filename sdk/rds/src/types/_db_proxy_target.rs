// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details for an RDS Proxy target. It represents an RDS DB instance or Aurora DB cluster that the proxy can connect to. One or more targets are associated with an RDS Proxy target group.</p>
/// <p>This data type is used as a response element in the <code>DescribeDBProxyTargets</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DbProxyTarget {
    /// <p>The Amazon Resource Name (ARN) for the RDS DB instance or Aurora DB cluster.</p>
    #[doc(hidden)]
    pub target_arn: std::option::Option<std::string::String>,
    /// <p>The writer endpoint for the RDS DB instance or Aurora DB cluster.</p>
    #[doc(hidden)]
    pub endpoint: std::option::Option<std::string::String>,
    /// <p>The DB cluster identifier when the target represents an Aurora DB cluster. This field is blank when the target represents an RDS DB instance.</p>
    #[doc(hidden)]
    pub tracked_cluster_id: std::option::Option<std::string::String>,
    /// <p>The identifier representing the target. It can be the instance identifier for an RDS DB instance, or the cluster identifier for an Aurora DB cluster.</p>
    #[doc(hidden)]
    pub rds_resource_id: std::option::Option<std::string::String>,
    /// <p>The port that the RDS Proxy uses to connect to the target RDS DB instance or Aurora DB cluster.</p>
    #[doc(hidden)]
    pub port: i32,
    /// <p>Specifies the kind of database, such as an RDS DB instance or an Aurora DB cluster, that the target represents.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::TargetType>,
    /// <p>A value that indicates whether the target of the proxy can be used for read/write or read-only operations.</p>
    #[doc(hidden)]
    pub role: std::option::Option<crate::types::TargetRole>,
    /// <p>Information about the connection health of the RDS Proxy target.</p>
    #[doc(hidden)]
    pub target_health: std::option::Option<crate::types::TargetHealth>,
}
impl DbProxyTarget {
    /// <p>The Amazon Resource Name (ARN) for the RDS DB instance or Aurora DB cluster.</p>
    pub fn target_arn(&self) -> std::option::Option<&str> {
        self.target_arn.as_deref()
    }
    /// <p>The writer endpoint for the RDS DB instance or Aurora DB cluster.</p>
    pub fn endpoint(&self) -> std::option::Option<&str> {
        self.endpoint.as_deref()
    }
    /// <p>The DB cluster identifier when the target represents an Aurora DB cluster. This field is blank when the target represents an RDS DB instance.</p>
    pub fn tracked_cluster_id(&self) -> std::option::Option<&str> {
        self.tracked_cluster_id.as_deref()
    }
    /// <p>The identifier representing the target. It can be the instance identifier for an RDS DB instance, or the cluster identifier for an Aurora DB cluster.</p>
    pub fn rds_resource_id(&self) -> std::option::Option<&str> {
        self.rds_resource_id.as_deref()
    }
    /// <p>The port that the RDS Proxy uses to connect to the target RDS DB instance or Aurora DB cluster.</p>
    pub fn port(&self) -> i32 {
        self.port
    }
    /// <p>Specifies the kind of database, such as an RDS DB instance or an Aurora DB cluster, that the target represents.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::TargetType> {
        self.r#type.as_ref()
    }
    /// <p>A value that indicates whether the target of the proxy can be used for read/write or read-only operations.</p>
    pub fn role(&self) -> std::option::Option<&crate::types::TargetRole> {
        self.role.as_ref()
    }
    /// <p>Information about the connection health of the RDS Proxy target.</p>
    pub fn target_health(&self) -> std::option::Option<&crate::types::TargetHealth> {
        self.target_health.as_ref()
    }
}
impl DbProxyTarget {
    /// Creates a new builder-style object to manufacture [`DbProxyTarget`](crate::types::DbProxyTarget).
    pub fn builder() -> crate::types::builders::DbProxyTargetBuilder {
        crate::types::builders::DbProxyTargetBuilder::default()
    }
}

/// A builder for [`DbProxyTarget`](crate::types::DbProxyTarget).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DbProxyTargetBuilder {
    pub(crate) target_arn: std::option::Option<std::string::String>,
    pub(crate) endpoint: std::option::Option<std::string::String>,
    pub(crate) tracked_cluster_id: std::option::Option<std::string::String>,
    pub(crate) rds_resource_id: std::option::Option<std::string::String>,
    pub(crate) port: std::option::Option<i32>,
    pub(crate) r#type: std::option::Option<crate::types::TargetType>,
    pub(crate) role: std::option::Option<crate::types::TargetRole>,
    pub(crate) target_health: std::option::Option<crate::types::TargetHealth>,
}
impl DbProxyTargetBuilder {
    /// <p>The Amazon Resource Name (ARN) for the RDS DB instance or Aurora DB cluster.</p>
    pub fn target_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the RDS DB instance or Aurora DB cluster.</p>
    pub fn set_target_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The writer endpoint for the RDS DB instance or Aurora DB cluster.</p>
    pub fn endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint = Some(input.into());
        self
    }
    /// <p>The writer endpoint for the RDS DB instance or Aurora DB cluster.</p>
    pub fn set_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The DB cluster identifier when the target represents an Aurora DB cluster. This field is blank when the target represents an RDS DB instance.</p>
    pub fn tracked_cluster_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.tracked_cluster_id = Some(input.into());
        self
    }
    /// <p>The DB cluster identifier when the target represents an Aurora DB cluster. This field is blank when the target represents an RDS DB instance.</p>
    pub fn set_tracked_cluster_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.tracked_cluster_id = input;
        self
    }
    /// <p>The identifier representing the target. It can be the instance identifier for an RDS DB instance, or the cluster identifier for an Aurora DB cluster.</p>
    pub fn rds_resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.rds_resource_id = Some(input.into());
        self
    }
    /// <p>The identifier representing the target. It can be the instance identifier for an RDS DB instance, or the cluster identifier for an Aurora DB cluster.</p>
    pub fn set_rds_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rds_resource_id = input;
        self
    }
    /// <p>The port that the RDS Proxy uses to connect to the target RDS DB instance or Aurora DB cluster.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>The port that the RDS Proxy uses to connect to the target RDS DB instance or Aurora DB cluster.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>Specifies the kind of database, such as an RDS DB instance or an Aurora DB cluster, that the target represents.</p>
    pub fn r#type(mut self, input: crate::types::TargetType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>Specifies the kind of database, such as an RDS DB instance or an Aurora DB cluster, that the target represents.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::TargetType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>A value that indicates whether the target of the proxy can be used for read/write or read-only operations.</p>
    pub fn role(mut self, input: crate::types::TargetRole) -> Self {
        self.role = Some(input);
        self
    }
    /// <p>A value that indicates whether the target of the proxy can be used for read/write or read-only operations.</p>
    pub fn set_role(mut self, input: std::option::Option<crate::types::TargetRole>) -> Self {
        self.role = input;
        self
    }
    /// <p>Information about the connection health of the RDS Proxy target.</p>
    pub fn target_health(mut self, input: crate::types::TargetHealth) -> Self {
        self.target_health = Some(input);
        self
    }
    /// <p>Information about the connection health of the RDS Proxy target.</p>
    pub fn set_target_health(
        mut self,
        input: std::option::Option<crate::types::TargetHealth>,
    ) -> Self {
        self.target_health = input;
        self
    }
    /// Consumes the builder and constructs a [`DbProxyTarget`](crate::types::DbProxyTarget).
    pub fn build(self) -> crate::types::DbProxyTarget {
        crate::types::DbProxyTarget {
            target_arn: self.target_arn,
            endpoint: self.endpoint,
            tracked_cluster_id: self.tracked_cluster_id,
            rds_resource_id: self.rds_resource_id,
            port: self.port.unwrap_or_default(),
            r#type: self.r#type,
            role: self.role,
            target_health: self.target_health,
        }
    }
}
