// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PendingCloudwatchLogsExports {
    /// <p>Log types that are in the process of being deactivated. After they are deactivated, these log types aren't exported to CloudWatch Logs.</p>
    #[doc(hidden)]
    pub log_types_to_enable: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Log types that are in the process of being enabled. After they are enabled, these log types are exported to CloudWatch Logs.</p>
    #[doc(hidden)]
    pub log_types_to_disable: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl PendingCloudwatchLogsExports {
    /// <p>Log types that are in the process of being deactivated. After they are deactivated, these log types aren't exported to CloudWatch Logs.</p>
    pub fn log_types_to_enable(&self) -> std::option::Option<&[std::string::String]> {
        self.log_types_to_enable.as_deref()
    }
    /// <p>Log types that are in the process of being enabled. After they are enabled, these log types are exported to CloudWatch Logs.</p>
    pub fn log_types_to_disable(&self) -> std::option::Option<&[std::string::String]> {
        self.log_types_to_disable.as_deref()
    }
}
impl PendingCloudwatchLogsExports {
    /// Creates a new builder-style object to manufacture [`PendingCloudwatchLogsExports`](crate::types::PendingCloudwatchLogsExports).
    pub fn builder() -> crate::types::builders::PendingCloudwatchLogsExportsBuilder {
        crate::types::builders::PendingCloudwatchLogsExportsBuilder::default()
    }
}

/// A builder for [`PendingCloudwatchLogsExports`](crate::types::PendingCloudwatchLogsExports).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PendingCloudwatchLogsExportsBuilder {
    pub(crate) log_types_to_enable: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) log_types_to_disable: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl PendingCloudwatchLogsExportsBuilder {
    /// Appends an item to `log_types_to_enable`.
    ///
    /// To override the contents of this collection use [`set_log_types_to_enable`](Self::set_log_types_to_enable).
    ///
    /// <p>Log types that are in the process of being deactivated. After they are deactivated, these log types aren't exported to CloudWatch Logs.</p>
    pub fn log_types_to_enable(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.log_types_to_enable.unwrap_or_default();
        v.push(input.into());
        self.log_types_to_enable = Some(v);
        self
    }
    /// <p>Log types that are in the process of being deactivated. After they are deactivated, these log types aren't exported to CloudWatch Logs.</p>
    pub fn set_log_types_to_enable(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.log_types_to_enable = input;
        self
    }
    /// Appends an item to `log_types_to_disable`.
    ///
    /// To override the contents of this collection use [`set_log_types_to_disable`](Self::set_log_types_to_disable).
    ///
    /// <p>Log types that are in the process of being enabled. After they are enabled, these log types are exported to CloudWatch Logs.</p>
    pub fn log_types_to_disable(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.log_types_to_disable.unwrap_or_default();
        v.push(input.into());
        self.log_types_to_disable = Some(v);
        self
    }
    /// <p>Log types that are in the process of being enabled. After they are enabled, these log types are exported to CloudWatch Logs.</p>
    pub fn set_log_types_to_disable(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.log_types_to_disable = input;
        self
    }
    /// Consumes the builder and constructs a [`PendingCloudwatchLogsExports`](crate::types::PendingCloudwatchLogsExports).
    pub fn build(self) -> crate::types::PendingCloudwatchLogsExports {
        crate::types::PendingCloudwatchLogsExports {
            log_types_to_enable: self.log_types_to_enable,
            log_types_to_disable: self.log_types_to_disable,
        }
    }
}
