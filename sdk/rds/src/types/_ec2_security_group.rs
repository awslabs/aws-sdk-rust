// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This data type is used as a response element in the following actions:</p>
/// <ul>
/// <li> <p> <code>AuthorizeDBSecurityGroupIngress</code> </p> </li>
/// <li> <p> <code>DescribeDBSecurityGroups</code> </p> </li>
/// <li> <p> <code>RevokeDBSecurityGroupIngress</code> </p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Ec2SecurityGroup {
    /// <p>Provides the status of the EC2 security group. Status can be "authorizing", "authorized", "revoking", and "revoked".</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>Specifies the name of the EC2 security group.</p>
    #[doc(hidden)]
    pub ec2_security_group_name: std::option::Option<std::string::String>,
    /// <p>Specifies the id of the EC2 security group.</p>
    #[doc(hidden)]
    pub ec2_security_group_id: std::option::Option<std::string::String>,
    /// <p>Specifies the Amazon Web Services ID of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> field.</p>
    #[doc(hidden)]
    pub ec2_security_group_owner_id: std::option::Option<std::string::String>,
}
impl Ec2SecurityGroup {
    /// <p>Provides the status of the EC2 security group. Status can be "authorizing", "authorized", "revoking", and "revoked".</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Specifies the name of the EC2 security group.</p>
    pub fn ec2_security_group_name(&self) -> std::option::Option<&str> {
        self.ec2_security_group_name.as_deref()
    }
    /// <p>Specifies the id of the EC2 security group.</p>
    pub fn ec2_security_group_id(&self) -> std::option::Option<&str> {
        self.ec2_security_group_id.as_deref()
    }
    /// <p>Specifies the Amazon Web Services ID of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> field.</p>
    pub fn ec2_security_group_owner_id(&self) -> std::option::Option<&str> {
        self.ec2_security_group_owner_id.as_deref()
    }
}
impl Ec2SecurityGroup {
    /// Creates a new builder-style object to manufacture [`Ec2SecurityGroup`](crate::types::Ec2SecurityGroup).
    pub fn builder() -> crate::types::builders::Ec2SecurityGroupBuilder {
        crate::types::builders::Ec2SecurityGroupBuilder::default()
    }
}

/// A builder for [`Ec2SecurityGroup`](crate::types::Ec2SecurityGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct Ec2SecurityGroupBuilder {
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) ec2_security_group_name: std::option::Option<std::string::String>,
    pub(crate) ec2_security_group_id: std::option::Option<std::string::String>,
    pub(crate) ec2_security_group_owner_id: std::option::Option<std::string::String>,
}
impl Ec2SecurityGroupBuilder {
    /// <p>Provides the status of the EC2 security group. Status can be "authorizing", "authorized", "revoking", and "revoked".</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>Provides the status of the EC2 security group. Status can be "authorizing", "authorized", "revoking", and "revoked".</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>Specifies the name of the EC2 security group.</p>
    pub fn ec2_security_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.ec2_security_group_name = Some(input.into());
        self
    }
    /// <p>Specifies the name of the EC2 security group.</p>
    pub fn set_ec2_security_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ec2_security_group_name = input;
        self
    }
    /// <p>Specifies the id of the EC2 security group.</p>
    pub fn ec2_security_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ec2_security_group_id = Some(input.into());
        self
    }
    /// <p>Specifies the id of the EC2 security group.</p>
    pub fn set_ec2_security_group_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ec2_security_group_id = input;
        self
    }
    /// <p>Specifies the Amazon Web Services ID of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> field.</p>
    pub fn ec2_security_group_owner_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.ec2_security_group_owner_id = Some(input.into());
        self
    }
    /// <p>Specifies the Amazon Web Services ID of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> field.</p>
    pub fn set_ec2_security_group_owner_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ec2_security_group_owner_id = input;
        self
    }
    /// Consumes the builder and constructs a [`Ec2SecurityGroup`](crate::types::Ec2SecurityGroup).
    pub fn build(self) -> crate::types::Ec2SecurityGroup {
        crate::types::Ec2SecurityGroup {
            status: self.status,
            ec2_security_group_name: self.ec2_security_group_name,
            ec2_security_group_id: self.ec2_security_group_id,
            ec2_security_group_owner_id: self.ec2_security_group_owner_id,
        }
    }
}
