// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details about a task for a blue/green deployment.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html">Using Amazon RDS Blue/Green Deployments for database updates</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/blue-green-deployments.html"> Using Amazon RDS Blue/Green Deployments for database updates</a> in the <i>Amazon Aurora User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BlueGreenDeploymentTask {
    /// <p>The name of the blue/green deployment task.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The status of the blue/green deployment task.</p>
    /// <p>Values:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> - The resources are being prepared for deployment.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - The resource is being deployed.</p> </li>
    /// <li> <p> <code>COMPLETED</code> - The resource has been deployed.</p> </li>
    /// <li> <p> <code>FAILED</code> - Deployment of the resource failed.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
}
impl BlueGreenDeploymentTask {
    /// <p>The name of the blue/green deployment task.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The status of the blue/green deployment task.</p>
    /// <p>Values:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> - The resources are being prepared for deployment.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - The resource is being deployed.</p> </li>
    /// <li> <p> <code>COMPLETED</code> - The resource has been deployed.</p> </li>
    /// <li> <p> <code>FAILED</code> - Deployment of the resource failed.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl BlueGreenDeploymentTask {
    /// Creates a new builder-style object to manufacture [`BlueGreenDeploymentTask`](crate::types::BlueGreenDeploymentTask).
    pub fn builder() -> crate::types::builders::BlueGreenDeploymentTaskBuilder {
        crate::types::builders::BlueGreenDeploymentTaskBuilder::default()
    }
}

/// A builder for [`BlueGreenDeploymentTask`](crate::types::BlueGreenDeploymentTask).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BlueGreenDeploymentTaskBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
}
impl BlueGreenDeploymentTaskBuilder {
    /// <p>The name of the blue/green deployment task.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the blue/green deployment task.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The status of the blue/green deployment task.</p>
    /// <p>Values:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> - The resources are being prepared for deployment.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - The resource is being deployed.</p> </li>
    /// <li> <p> <code>COMPLETED</code> - The resource has been deployed.</p> </li>
    /// <li> <p> <code>FAILED</code> - Deployment of the resource failed.</p> </li>
    /// </ul>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The status of the blue/green deployment task.</p>
    /// <p>Values:</p>
    /// <ul>
    /// <li> <p> <code>PENDING</code> - The resources are being prepared for deployment.</p> </li>
    /// <li> <p> <code>IN_PROGRESS</code> - The resource is being deployed.</p> </li>
    /// <li> <p> <code>COMPLETED</code> - The resource has been deployed.</p> </li>
    /// <li> <p> <code>FAILED</code> - Deployment of the resource failed.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`BlueGreenDeploymentTask`](crate::types::BlueGreenDeploymentTask).
    pub fn build(self) -> crate::types::BlueGreenDeploymentTask {
        crate::types::BlueGreenDeploymentTask {
            name: self.name,
            status: self.status,
        }
    }
}
