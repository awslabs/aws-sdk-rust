// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details of an Amazon RDS DB instance.</p>
/// <p>This data type is used as a response element in the operations <code>CreateDBInstance</code>, <code>CreateDBInstanceReadReplica</code>, <code>DeleteDBInstance</code>, <code>DescribeDBInstances</code>, <code>ModifyDBInstance</code>, <code>PromoteReadReplica</code>, <code>RebootDBInstance</code>, <code>RestoreDBInstanceFromDBSnapshot</code>, <code>RestoreDBInstanceFromS3</code>, <code>RestoreDBInstanceToPointInTime</code>, <code>StartDBInstance</code>, and <code>StopDBInstance</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DbInstance {
    /// <p>The user-supplied database identifier. This identifier is the unique key that identifies a DB instance.</p>
    pub db_instance_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of the compute and memory capacity class of the DB instance.</p>
    pub db_instance_class: ::std::option::Option<::std::string::String>,
    /// <p>The database engine used for this DB instance.</p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The current state of this database.</p>
    /// <p>For information about DB instance statuses, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/accessing-monitoring.html#Overview.DBInstance.Status">Viewing DB instance status</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub db_instance_status: ::std::option::Option<::std::string::String>,
    /// <p>The time when a stopped DB instance is restarted automatically.</p>
    pub automatic_restart_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The master username for the DB instance.</p>
    pub master_username: ::std::option::Option<::std::string::String>,
    /// <p>Contains the initial database name that you provided (if required) when you created the DB instance. This name is returned for the life of your DB instance. For an RDS for Oracle CDB instance, the name identifies the PDB rather than the CDB.</p>
    pub db_name: ::std::option::Option<::std::string::String>,
    /// <p>The connection endpoint for the DB instance.</p> <note>
    /// <p>The endpoint might not be shown for instances with the status of <code>creating</code>.</p>
    /// </note>
    pub endpoint: ::std::option::Option<crate::types::Endpoint>,
    /// <p>The amount of storage in gibibytes (GiB) allocated for the DB instance.</p>
    pub allocated_storage: ::std::option::Option<i32>,
    /// <p>The date and time when the DB instance was created.</p>
    pub instance_create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>.</p>
    pub preferred_backup_window: ::std::option::Option<::std::string::String>,
    /// <p>The number of days for which automatic DB snapshots are retained.</p>
    pub backup_retention_period: ::std::option::Option<i32>,
    /// <p>A list of DB security group elements containing <code>DBSecurityGroup.Name</code> and <code>DBSecurityGroup.Status</code> subelements.</p>
    pub db_security_groups: ::std::option::Option<::std::vec::Vec<crate::types::DbSecurityGroupMembership>>,
    /// <p>The list of Amazon EC2 VPC security groups that the DB instance belongs to.</p>
    pub vpc_security_groups: ::std::option::Option<::std::vec::Vec<crate::types::VpcSecurityGroupMembership>>,
    /// <p>The list of DB parameter groups applied to this DB instance.</p>
    pub db_parameter_groups: ::std::option::Option<::std::vec::Vec<crate::types::DbParameterGroupStatus>>,
    /// <p>The name of the Availability Zone where the DB instance is located.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>Information about the subnet group associated with the DB instance, including the name, description, and subnets in the subnet group.</p>
    pub db_subnet_group: ::std::option::Option<crate::types::DbSubnetGroup>,
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    pub preferred_maintenance_window: ::std::option::Option<::std::string::String>,
    /// <p>Information about pending changes to the DB instance. This information is returned only when there are pending changes. Specific changes are identified by subelements.</p>
    pub pending_modified_values: ::std::option::Option<crate::types::PendingModifiedValues>,
    /// <p>The latest time to which a database in this DB instance can be restored with point-in-time restore.</p>
    pub latest_restorable_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates whether the DB instance is a Multi-AZ deployment. This setting doesn't apply to RDS Custom DB instances.</p>
    pub multi_az: ::std::option::Option<bool>,
    /// <p>The version of the database engine.</p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether minor version patches are applied automatically.</p>
    pub auto_minor_version_upgrade: ::std::option::Option<bool>,
    /// <p>The identifier of the source DB instance if this DB instance is a read replica.</p>
    pub read_replica_source_db_instance_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The identifiers of the read replicas associated with this DB instance.</p>
    pub read_replica_db_instance_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The identifiers of Aurora DB clusters to which the RDS DB instance is replicated as a read replica. For example, when you create an Aurora read replica of an RDS for MySQL DB instance, the Aurora MySQL DB cluster for the Aurora read replica is shown. This output doesn't contain information about cross-Region Aurora read replicas.</p> <note>
    /// <p>Currently, each RDS DB instance can have only one Aurora read replica.</p>
    /// </note>
    pub read_replica_db_cluster_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The open mode of an Oracle read replica. The default is <code>open-read-only</code>. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working with Oracle Read Replicas for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> <note>
    /// <p>This attribute is only supported in RDS for Oracle.</p>
    /// </note>
    pub replica_mode: ::std::option::Option<crate::types::ReplicaMode>,
    /// <p>The license model information for this DB instance. This setting doesn't apply to RDS Custom DB instances.</p>
    pub license_model: ::std::option::Option<::std::string::String>,
    /// <p>The Provisioned IOPS (I/O operations per second) value for the DB instance.</p>
    pub iops: ::std::option::Option<i32>,
    /// <p>The list of option group memberships for this DB instance.</p>
    pub option_group_memberships: ::std::option::Option<::std::vec::Vec<crate::types::OptionGroupMembership>>,
    /// <p>If present, specifies the name of the character set that this instance is associated with.</p>
    pub character_set_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the NCHAR character set for the Oracle DB instance. This character set specifies the Unicode encoding for data stored in table columns of type NCHAR, NCLOB, or NVARCHAR2.</p>
    pub nchar_character_set_name: ::std::option::Option<::std::string::String>,
    /// <p>If present, specifies the name of the secondary Availability Zone for a DB instance with multi-AZ support.</p>
    pub secondary_availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the DB instance is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    pub publicly_accessible: ::std::option::Option<bool>,
    /// <p>The status of a read replica. If the DB instance isn't a read replica, the value is blank.</p>
    pub status_infos: ::std::option::Option<::std::vec::Vec<crate::types::DbInstanceStatusInfo>>,
    /// <p>The storage type associated with the DB instance.</p>
    pub storage_type: ::std::option::Option<::std::string::String>,
    /// <p>The ARN from the key store with which the instance is associated for TDE encryption.</p>
    pub tde_credential_arn: ::std::option::Option<::std::string::String>,
    /// <p>The port that the DB instance listens on. If the DB instance is part of a DB cluster, this can be a different port than the DB cluster port.</p>
    pub db_instance_port: ::std::option::Option<i32>,
    /// <p>If the DB instance is a member of a DB cluster, indicates the name of the DB cluster that the DB instance is a member of.</p>
    pub db_cluster_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the DB instance is encrypted.</p>
    pub storage_encrypted: ::std::option::Option<bool>,
    /// <p>If <code>StorageEncrypted</code> is enabled, the Amazon Web Services KMS key identifier for the encrypted DB instance.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region-unique, immutable identifier for the DB instance. This identifier is found in Amazon Web Services CloudTrail log entries whenever the Amazon Web Services KMS key for the DB instance is accessed.</p>
    pub dbi_resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the CA certificate for this DB instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub ca_certificate_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The Active Directory Domain membership records associated with the DB instance.</p>
    pub domain_memberships: ::std::option::Option<::std::vec::Vec<crate::types::DomainMembership>>,
    /// <p>Indicates whether tags are copied from the DB instance to snapshots of the DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>DBCluster</code>.</p>
    pub copy_tags_to_snapshot: ::std::option::Option<bool>,
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.</p>
    pub monitoring_interval: ::std::option::Option<i32>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon CloudWatch Logs log stream that receives the Enhanced Monitoring metrics data for the DB instance.</p>
    pub enhanced_monitoring_resource_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.</p>
    pub monitoring_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The order of priority in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.AuroraHighAvailability.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub promotion_tier: ::std::option::Option<i32>,
    /// <p>The Amazon Resource Name (ARN) for the DB instance.</p>
    pub db_instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>The time zone of the DB instance. In most cases, the <code>Timezone</code> element is empty. <code>Timezone</code> content appears only for Microsoft SQL Server DB instances that were created with a time zone specified.</p>
    pub timezone: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled for the DB instance.</p>
    /// <p>For a list of engine versions that support IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RDS_Fea_Regions_DB-eng.Feature.IamDatabaseAuthentication.html">IAM database authentication</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.Aurora_Fea_Regions_DB-eng.Feature.IAMdbauth.html">IAM database authentication in Aurora</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub iam_database_authentication_enabled: ::std::option::Option<bool>,
    /// <p>Indicates whether Performance Insights is enabled for the DB instance.</p>
    pub performance_insights_enabled: ::std::option::Option<bool>,
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub performance_insights_kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The number of days to retain Performance Insights data.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>7</code> </p> </li>
    /// <li> <p> <i>month</i> * 31, where <i>month</i> is a number of months from 1-23. Examples: <code>93</code> (3 months * 31), <code>341</code> (11 months * 31), <code>589</code> (19 months * 31)</p> </li>
    /// <li> <p> <code>731</code> </p> </li>
    /// </ul>
    /// <p>Default: <code>7</code> days</p>
    pub performance_insights_retention_period: ::std::option::Option<i32>,
    /// <p>A list of log types that this DB instance is configured to export to CloudWatch Logs.</p>
    /// <p>Log types vary by DB engine. For information about the log types for each DB engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html">Monitoring Amazon RDS log files</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub enabled_cloudwatch_logs_exports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub processor_features: ::std::option::Option<::std::vec::Vec<crate::types::ProcessorFeature>>,
    /// <p>Indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p>
    pub deletion_protection: ::std::option::Option<bool>,
    /// <p>The Amazon Web Services Identity and Access Management (IAM) roles associated with the DB instance.</p>
    pub associated_roles: ::std::option::Option<::std::vec::Vec<crate::types::DbInstanceRole>>,
    /// <p>The listener connection endpoint for SQL Server Always On.</p>
    pub listener_endpoint: ::std::option::Option<crate::types::Endpoint>,
    /// <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    pub max_allocated_storage: ::std::option::Option<i32>,
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub tag_list: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The list of replicated automated backups associated with the DB instance.</p>
    pub db_instance_automated_backups_replications: ::std::option::Option<::std::vec::Vec<crate::types::DbInstanceAutomatedBackupsReplication>>,
    /// <p>Indicates whether a customer-owned IP address (CoIP) is enabled for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP </i>provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub customer_owned_ip_enabled: ::std::option::Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub aws_backup_recovery_point_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the database activity stream.</p>
    pub activity_stream_status: ::std::option::Option<crate::types::ActivityStreamStatus>,
    /// <p>The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub activity_stream_kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
    pub activity_stream_kinesis_stream_name: ::std::option::Option<::std::string::String>,
    /// <p>The mode of the database activity stream. Database events such as a change or access generate an activity stream event. RDS for Oracle always handles these events asynchronously.</p>
    pub activity_stream_mode: ::std::option::Option<crate::types::ActivityStreamMode>,
    /// <p>Indicates whether engine-native audit fields are included in the database activity stream.</p>
    pub activity_stream_engine_native_audit_fields_included: ::std::option::Option<bool>,
    /// <p>The automation mode of the RDS Custom DB instance: <code>full</code> or <code>all paused</code>. If <code>full</code>, the DB instance automates monitoring and instance recovery. If <code>all paused</code>, the instance pauses automation for the duration set by <code>--resume-full-automation-mode-minutes</code>.</p>
    pub automation_mode: ::std::option::Option<crate::types::AutomationMode>,
    /// <p>The number of minutes to pause the automation. When the time period ends, RDS Custom resumes full automation. The minimum value is 60 (default). The maximum value is 1,440.</p>
    pub resume_full_automation_mode_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>The profile must exist in your account.</p> </li>
    /// <li> <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p> </li>
    /// <li> <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p> </li>
    /// </ul>
    /// <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub custom_iam_instance_profile: ::std::option::Option<::std::string::String>,
    /// <p>The location where automated backups and manual snapshots are stored: Amazon Web Services Outposts or the Amazon Web Services Region.</p>
    pub backup_target: ::std::option::Option<::std::string::String>,
    /// <p>The network type of the DB instance.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>Valid Values: <code>IPV4 | DUAL</code> </p>
    pub network_type: ::std::option::Option<::std::string::String>,
    /// <p>The status of the policy state of the activity stream.</p>
    pub activity_stream_policy_status: ::std::option::Option<crate::types::ActivityStreamPolicyStatus>,
    /// <p>The storage throughput for the DB instance.</p>
    /// <p>This setting applies only to the <code>gp3</code> storage type.</p>
    pub storage_throughput: ::std::option::Option<i32>,
    /// <p>The Oracle system ID (Oracle SID) for a container database (CDB). The Oracle SID is also the name of the CDB. This setting is only valid for RDS Custom DB instances.</p>
    pub db_system_id: ::std::option::Option<::std::string::String>,
    /// <p>The secret managed by RDS in Amazon Web Services Secrets Manager for the master user password.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub master_user_secret: ::std::option::Option<crate::types::MasterUserSecret>,
    /// <p>The details of the DB instance's server certificate.</p>
    pub certificate_details: ::std::option::Option<crate::types::CertificateDetails>,
    /// <p>The identifier of the source DB cluster if this DB instance is a read replica.</p>
    pub read_replica_source_db_cluster_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The progress of the storage optimization operation as a percentage.</p>
    pub percent_progress: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the DB instance has a dedicated log volume (DLV) enabled.</p>
    pub dedicated_log_volume: ::std::option::Option<bool>,
    /// <p>Indicates whether an upgrade is recommended for the storage file system configuration on the DB instance. To migrate to the preferred configuration, you can either create a blue/green deployment, or create a read replica from the DB instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.UpgradeFileSystem">Upgrading the storage file system for a DB instance</a>.</p>
    pub is_storage_config_upgrade_available: ::std::option::Option<bool>,
}
impl DbInstance {
    /// <p>The user-supplied database identifier. This identifier is the unique key that identifies a DB instance.</p>
    pub fn db_instance_identifier(&self) -> ::std::option::Option<&str> {
        self.db_instance_identifier.as_deref()
    }
    /// <p>The name of the compute and memory capacity class of the DB instance.</p>
    pub fn db_instance_class(&self) -> ::std::option::Option<&str> {
        self.db_instance_class.as_deref()
    }
    /// <p>The database engine used for this DB instance.</p>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The current state of this database.</p>
    /// <p>For information about DB instance statuses, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/accessing-monitoring.html#Overview.DBInstance.Status">Viewing DB instance status</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn db_instance_status(&self) -> ::std::option::Option<&str> {
        self.db_instance_status.as_deref()
    }
    /// <p>The time when a stopped DB instance is restarted automatically.</p>
    pub fn automatic_restart_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.automatic_restart_time.as_ref()
    }
    /// <p>The master username for the DB instance.</p>
    pub fn master_username(&self) -> ::std::option::Option<&str> {
        self.master_username.as_deref()
    }
    /// <p>Contains the initial database name that you provided (if required) when you created the DB instance. This name is returned for the life of your DB instance. For an RDS for Oracle CDB instance, the name identifies the PDB rather than the CDB.</p>
    pub fn db_name(&self) -> ::std::option::Option<&str> {
        self.db_name.as_deref()
    }
    /// <p>The connection endpoint for the DB instance.</p> <note>
    /// <p>The endpoint might not be shown for instances with the status of <code>creating</code>.</p>
    /// </note>
    pub fn endpoint(&self) -> ::std::option::Option<&crate::types::Endpoint> {
        self.endpoint.as_ref()
    }
    /// <p>The amount of storage in gibibytes (GiB) allocated for the DB instance.</p>
    pub fn allocated_storage(&self) -> ::std::option::Option<i32> {
        self.allocated_storage
    }
    /// <p>The date and time when the DB instance was created.</p>
    pub fn instance_create_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.instance_create_time.as_ref()
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>.</p>
    pub fn preferred_backup_window(&self) -> ::std::option::Option<&str> {
        self.preferred_backup_window.as_deref()
    }
    /// <p>The number of days for which automatic DB snapshots are retained.</p>
    pub fn backup_retention_period(&self) -> ::std::option::Option<i32> {
        self.backup_retention_period
    }
    /// <p>A list of DB security group elements containing <code>DBSecurityGroup.Name</code> and <code>DBSecurityGroup.Status</code> subelements.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.db_security_groups.is_none()`.
    pub fn db_security_groups(&self) -> &[crate::types::DbSecurityGroupMembership] {
        self.db_security_groups.as_deref().unwrap_or_default()
    }
    /// <p>The list of Amazon EC2 VPC security groups that the DB instance belongs to.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vpc_security_groups.is_none()`.
    pub fn vpc_security_groups(&self) -> &[crate::types::VpcSecurityGroupMembership] {
        self.vpc_security_groups.as_deref().unwrap_or_default()
    }
    /// <p>The list of DB parameter groups applied to this DB instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.db_parameter_groups.is_none()`.
    pub fn db_parameter_groups(&self) -> &[crate::types::DbParameterGroupStatus] {
        self.db_parameter_groups.as_deref().unwrap_or_default()
    }
    /// <p>The name of the Availability Zone where the DB instance is located.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>Information about the subnet group associated with the DB instance, including the name, description, and subnets in the subnet group.</p>
    pub fn db_subnet_group(&self) -> ::std::option::Option<&crate::types::DbSubnetGroup> {
        self.db_subnet_group.as_ref()
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    pub fn preferred_maintenance_window(&self) -> ::std::option::Option<&str> {
        self.preferred_maintenance_window.as_deref()
    }
    /// <p>Information about pending changes to the DB instance. This information is returned only when there are pending changes. Specific changes are identified by subelements.</p>
    pub fn pending_modified_values(&self) -> ::std::option::Option<&crate::types::PendingModifiedValues> {
        self.pending_modified_values.as_ref()
    }
    /// <p>The latest time to which a database in this DB instance can be restored with point-in-time restore.</p>
    pub fn latest_restorable_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.latest_restorable_time.as_ref()
    }
    /// <p>Indicates whether the DB instance is a Multi-AZ deployment. This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn multi_az(&self) -> ::std::option::Option<bool> {
        self.multi_az
    }
    /// <p>The version of the database engine.</p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>Indicates whether minor version patches are applied automatically.</p>
    pub fn auto_minor_version_upgrade(&self) -> ::std::option::Option<bool> {
        self.auto_minor_version_upgrade
    }
    /// <p>The identifier of the source DB instance if this DB instance is a read replica.</p>
    pub fn read_replica_source_db_instance_identifier(&self) -> ::std::option::Option<&str> {
        self.read_replica_source_db_instance_identifier.as_deref()
    }
    /// <p>The identifiers of the read replicas associated with this DB instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.read_replica_db_instance_identifiers.is_none()`.
    pub fn read_replica_db_instance_identifiers(&self) -> &[::std::string::String] {
        self.read_replica_db_instance_identifiers.as_deref().unwrap_or_default()
    }
    /// <p>The identifiers of Aurora DB clusters to which the RDS DB instance is replicated as a read replica. For example, when you create an Aurora read replica of an RDS for MySQL DB instance, the Aurora MySQL DB cluster for the Aurora read replica is shown. This output doesn't contain information about cross-Region Aurora read replicas.</p> <note>
    /// <p>Currently, each RDS DB instance can have only one Aurora read replica.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.read_replica_db_cluster_identifiers.is_none()`.
    pub fn read_replica_db_cluster_identifiers(&self) -> &[::std::string::String] {
        self.read_replica_db_cluster_identifiers.as_deref().unwrap_or_default()
    }
    /// <p>The open mode of an Oracle read replica. The default is <code>open-read-only</code>. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working with Oracle Read Replicas for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> <note>
    /// <p>This attribute is only supported in RDS for Oracle.</p>
    /// </note>
    pub fn replica_mode(&self) -> ::std::option::Option<&crate::types::ReplicaMode> {
        self.replica_mode.as_ref()
    }
    /// <p>The license model information for this DB instance. This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn license_model(&self) -> ::std::option::Option<&str> {
        self.license_model.as_deref()
    }
    /// <p>The Provisioned IOPS (I/O operations per second) value for the DB instance.</p>
    pub fn iops(&self) -> ::std::option::Option<i32> {
        self.iops
    }
    /// <p>The list of option group memberships for this DB instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.option_group_memberships.is_none()`.
    pub fn option_group_memberships(&self) -> &[crate::types::OptionGroupMembership] {
        self.option_group_memberships.as_deref().unwrap_or_default()
    }
    /// <p>If present, specifies the name of the character set that this instance is associated with.</p>
    pub fn character_set_name(&self) -> ::std::option::Option<&str> {
        self.character_set_name.as_deref()
    }
    /// <p>The name of the NCHAR character set for the Oracle DB instance. This character set specifies the Unicode encoding for data stored in table columns of type NCHAR, NCLOB, or NVARCHAR2.</p>
    pub fn nchar_character_set_name(&self) -> ::std::option::Option<&str> {
        self.nchar_character_set_name.as_deref()
    }
    /// <p>If present, specifies the name of the secondary Availability Zone for a DB instance with multi-AZ support.</p>
    pub fn secondary_availability_zone(&self) -> ::std::option::Option<&str> {
        self.secondary_availability_zone.as_deref()
    }
    /// <p>Indicates whether the DB instance is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    pub fn publicly_accessible(&self) -> ::std::option::Option<bool> {
        self.publicly_accessible
    }
    /// <p>The status of a read replica. If the DB instance isn't a read replica, the value is blank.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.status_infos.is_none()`.
    pub fn status_infos(&self) -> &[crate::types::DbInstanceStatusInfo] {
        self.status_infos.as_deref().unwrap_or_default()
    }
    /// <p>The storage type associated with the DB instance.</p>
    pub fn storage_type(&self) -> ::std::option::Option<&str> {
        self.storage_type.as_deref()
    }
    /// <p>The ARN from the key store with which the instance is associated for TDE encryption.</p>
    pub fn tde_credential_arn(&self) -> ::std::option::Option<&str> {
        self.tde_credential_arn.as_deref()
    }
    /// <p>The port that the DB instance listens on. If the DB instance is part of a DB cluster, this can be a different port than the DB cluster port.</p>
    pub fn db_instance_port(&self) -> ::std::option::Option<i32> {
        self.db_instance_port
    }
    /// <p>If the DB instance is a member of a DB cluster, indicates the name of the DB cluster that the DB instance is a member of.</p>
    pub fn db_cluster_identifier(&self) -> ::std::option::Option<&str> {
        self.db_cluster_identifier.as_deref()
    }
    /// <p>Indicates whether the DB instance is encrypted.</p>
    pub fn storage_encrypted(&self) -> ::std::option::Option<bool> {
        self.storage_encrypted
    }
    /// <p>If <code>StorageEncrypted</code> is enabled, the Amazon Web Services KMS key identifier for the encrypted DB instance.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The Amazon Web Services Region-unique, immutable identifier for the DB instance. This identifier is found in Amazon Web Services CloudTrail log entries whenever the Amazon Web Services KMS key for the DB instance is accessed.</p>
    pub fn dbi_resource_id(&self) -> ::std::option::Option<&str> {
        self.dbi_resource_id.as_deref()
    }
    /// <p>The identifier of the CA certificate for this DB instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn ca_certificate_identifier(&self) -> ::std::option::Option<&str> {
        self.ca_certificate_identifier.as_deref()
    }
    /// <p>The Active Directory Domain membership records associated with the DB instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.domain_memberships.is_none()`.
    pub fn domain_memberships(&self) -> &[crate::types::DomainMembership] {
        self.domain_memberships.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether tags are copied from the DB instance to snapshots of the DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>DBCluster</code>.</p>
    pub fn copy_tags_to_snapshot(&self) -> ::std::option::Option<bool> {
        self.copy_tags_to_snapshot
    }
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.</p>
    pub fn monitoring_interval(&self) -> ::std::option::Option<i32> {
        self.monitoring_interval
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon CloudWatch Logs log stream that receives the Enhanced Monitoring metrics data for the DB instance.</p>
    pub fn enhanced_monitoring_resource_arn(&self) -> ::std::option::Option<&str> {
        self.enhanced_monitoring_resource_arn.as_deref()
    }
    /// <p>The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.</p>
    pub fn monitoring_role_arn(&self) -> ::std::option::Option<&str> {
        self.monitoring_role_arn.as_deref()
    }
    /// <p>The order of priority in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.AuroraHighAvailability.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn promotion_tier(&self) -> ::std::option::Option<i32> {
        self.promotion_tier
    }
    /// <p>The Amazon Resource Name (ARN) for the DB instance.</p>
    pub fn db_instance_arn(&self) -> ::std::option::Option<&str> {
        self.db_instance_arn.as_deref()
    }
    /// <p>The time zone of the DB instance. In most cases, the <code>Timezone</code> element is empty. <code>Timezone</code> content appears only for Microsoft SQL Server DB instances that were created with a time zone specified.</p>
    pub fn timezone(&self) -> ::std::option::Option<&str> {
        self.timezone.as_deref()
    }
    /// <p>Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled for the DB instance.</p>
    /// <p>For a list of engine versions that support IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RDS_Fea_Regions_DB-eng.Feature.IamDatabaseAuthentication.html">IAM database authentication</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.Aurora_Fea_Regions_DB-eng.Feature.IAMdbauth.html">IAM database authentication in Aurora</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn iam_database_authentication_enabled(&self) -> ::std::option::Option<bool> {
        self.iam_database_authentication_enabled
    }
    /// <p>Indicates whether Performance Insights is enabled for the DB instance.</p>
    pub fn performance_insights_enabled(&self) -> ::std::option::Option<bool> {
        self.performance_insights_enabled
    }
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn performance_insights_kms_key_id(&self) -> ::std::option::Option<&str> {
        self.performance_insights_kms_key_id.as_deref()
    }
    /// <p>The number of days to retain Performance Insights data.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>7</code> </p> </li>
    /// <li> <p> <i>month</i> * 31, where <i>month</i> is a number of months from 1-23. Examples: <code>93</code> (3 months * 31), <code>341</code> (11 months * 31), <code>589</code> (19 months * 31)</p> </li>
    /// <li> <p> <code>731</code> </p> </li>
    /// </ul>
    /// <p>Default: <code>7</code> days</p>
    pub fn performance_insights_retention_period(&self) -> ::std::option::Option<i32> {
        self.performance_insights_retention_period
    }
    /// <p>A list of log types that this DB instance is configured to export to CloudWatch Logs.</p>
    /// <p>Log types vary by DB engine. For information about the log types for each DB engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html">Monitoring Amazon RDS log files</a> in the <i>Amazon RDS User Guide.</i> </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.enabled_cloudwatch_logs_exports.is_none()`.
    pub fn enabled_cloudwatch_logs_exports(&self) -> &[::std::string::String] {
        self.enabled_cloudwatch_logs_exports.as_deref().unwrap_or_default()
    }
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.processor_features.is_none()`.
    pub fn processor_features(&self) -> &[crate::types::ProcessorFeature] {
        self.processor_features.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p>
    pub fn deletion_protection(&self) -> ::std::option::Option<bool> {
        self.deletion_protection
    }
    /// <p>The Amazon Web Services Identity and Access Management (IAM) roles associated with the DB instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.associated_roles.is_none()`.
    pub fn associated_roles(&self) -> &[crate::types::DbInstanceRole] {
        self.associated_roles.as_deref().unwrap_or_default()
    }
    /// <p>The listener connection endpoint for SQL Server Always On.</p>
    pub fn listener_endpoint(&self) -> ::std::option::Option<&crate::types::Endpoint> {
        self.listener_endpoint.as_ref()
    }
    /// <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    pub fn max_allocated_storage(&self) -> ::std::option::Option<i32> {
        self.max_allocated_storage
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tag_list.is_none()`.
    pub fn tag_list(&self) -> &[crate::types::Tag] {
        self.tag_list.as_deref().unwrap_or_default()
    }
    /// <p>The list of replicated automated backups associated with the DB instance.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.db_instance_automated_backups_replications.is_none()`.
    pub fn db_instance_automated_backups_replications(&self) -> &[crate::types::DbInstanceAutomatedBackupsReplication] {
        self.db_instance_automated_backups_replications.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether a customer-owned IP address (CoIP) is enabled for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP </i>provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub fn customer_owned_ip_enabled(&self) -> ::std::option::Option<bool> {
        self.customer_owned_ip_enabled
    }
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub fn aws_backup_recovery_point_arn(&self) -> ::std::option::Option<&str> {
        self.aws_backup_recovery_point_arn.as_deref()
    }
    /// <p>The status of the database activity stream.</p>
    pub fn activity_stream_status(&self) -> ::std::option::Option<&crate::types::ActivityStreamStatus> {
        self.activity_stream_status.as_ref()
    }
    /// <p>The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn activity_stream_kms_key_id(&self) -> ::std::option::Option<&str> {
        self.activity_stream_kms_key_id.as_deref()
    }
    /// <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
    pub fn activity_stream_kinesis_stream_name(&self) -> ::std::option::Option<&str> {
        self.activity_stream_kinesis_stream_name.as_deref()
    }
    /// <p>The mode of the database activity stream. Database events such as a change or access generate an activity stream event. RDS for Oracle always handles these events asynchronously.</p>
    pub fn activity_stream_mode(&self) -> ::std::option::Option<&crate::types::ActivityStreamMode> {
        self.activity_stream_mode.as_ref()
    }
    /// <p>Indicates whether engine-native audit fields are included in the database activity stream.</p>
    pub fn activity_stream_engine_native_audit_fields_included(&self) -> ::std::option::Option<bool> {
        self.activity_stream_engine_native_audit_fields_included
    }
    /// <p>The automation mode of the RDS Custom DB instance: <code>full</code> or <code>all paused</code>. If <code>full</code>, the DB instance automates monitoring and instance recovery. If <code>all paused</code>, the instance pauses automation for the duration set by <code>--resume-full-automation-mode-minutes</code>.</p>
    pub fn automation_mode(&self) -> ::std::option::Option<&crate::types::AutomationMode> {
        self.automation_mode.as_ref()
    }
    /// <p>The number of minutes to pause the automation. When the time period ends, RDS Custom resumes full automation. The minimum value is 60 (default). The maximum value is 1,440.</p>
    pub fn resume_full_automation_mode_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.resume_full_automation_mode_time.as_ref()
    }
    /// <p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>The profile must exist in your account.</p> </li>
    /// <li> <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p> </li>
    /// <li> <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p> </li>
    /// </ul>
    /// <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn custom_iam_instance_profile(&self) -> ::std::option::Option<&str> {
        self.custom_iam_instance_profile.as_deref()
    }
    /// <p>The location where automated backups and manual snapshots are stored: Amazon Web Services Outposts or the Amazon Web Services Region.</p>
    pub fn backup_target(&self) -> ::std::option::Option<&str> {
        self.backup_target.as_deref()
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>Valid Values: <code>IPV4 | DUAL</code> </p>
    pub fn network_type(&self) -> ::std::option::Option<&str> {
        self.network_type.as_deref()
    }
    /// <p>The status of the policy state of the activity stream.</p>
    pub fn activity_stream_policy_status(&self) -> ::std::option::Option<&crate::types::ActivityStreamPolicyStatus> {
        self.activity_stream_policy_status.as_ref()
    }
    /// <p>The storage throughput for the DB instance.</p>
    /// <p>This setting applies only to the <code>gp3</code> storage type.</p>
    pub fn storage_throughput(&self) -> ::std::option::Option<i32> {
        self.storage_throughput
    }
    /// <p>The Oracle system ID (Oracle SID) for a container database (CDB). The Oracle SID is also the name of the CDB. This setting is only valid for RDS Custom DB instances.</p>
    pub fn db_system_id(&self) -> ::std::option::Option<&str> {
        self.db_system_id.as_deref()
    }
    /// <p>The secret managed by RDS in Amazon Web Services Secrets Manager for the master user password.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn master_user_secret(&self) -> ::std::option::Option<&crate::types::MasterUserSecret> {
        self.master_user_secret.as_ref()
    }
    /// <p>The details of the DB instance's server certificate.</p>
    pub fn certificate_details(&self) -> ::std::option::Option<&crate::types::CertificateDetails> {
        self.certificate_details.as_ref()
    }
    /// <p>The identifier of the source DB cluster if this DB instance is a read replica.</p>
    pub fn read_replica_source_db_cluster_identifier(&self) -> ::std::option::Option<&str> {
        self.read_replica_source_db_cluster_identifier.as_deref()
    }
    /// <p>The progress of the storage optimization operation as a percentage.</p>
    pub fn percent_progress(&self) -> ::std::option::Option<&str> {
        self.percent_progress.as_deref()
    }
    /// <p>Indicates whether the DB instance has a dedicated log volume (DLV) enabled.</p>
    pub fn dedicated_log_volume(&self) -> ::std::option::Option<bool> {
        self.dedicated_log_volume
    }
    /// <p>Indicates whether an upgrade is recommended for the storage file system configuration on the DB instance. To migrate to the preferred configuration, you can either create a blue/green deployment, or create a read replica from the DB instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.UpgradeFileSystem">Upgrading the storage file system for a DB instance</a>.</p>
    pub fn is_storage_config_upgrade_available(&self) -> ::std::option::Option<bool> {
        self.is_storage_config_upgrade_available
    }
}
impl DbInstance {
    /// Creates a new builder-style object to manufacture [`DbInstance`](crate::types::DbInstance).
    pub fn builder() -> crate::types::builders::DbInstanceBuilder {
        crate::types::builders::DbInstanceBuilder::default()
    }
}

/// A builder for [`DbInstance`](crate::types::DbInstance).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DbInstanceBuilder {
    pub(crate) db_instance_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) db_instance_class: ::std::option::Option<::std::string::String>,
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) db_instance_status: ::std::option::Option<::std::string::String>,
    pub(crate) automatic_restart_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) master_username: ::std::option::Option<::std::string::String>,
    pub(crate) db_name: ::std::option::Option<::std::string::String>,
    pub(crate) endpoint: ::std::option::Option<crate::types::Endpoint>,
    pub(crate) allocated_storage: ::std::option::Option<i32>,
    pub(crate) instance_create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) preferred_backup_window: ::std::option::Option<::std::string::String>,
    pub(crate) backup_retention_period: ::std::option::Option<i32>,
    pub(crate) db_security_groups: ::std::option::Option<::std::vec::Vec<crate::types::DbSecurityGroupMembership>>,
    pub(crate) vpc_security_groups: ::std::option::Option<::std::vec::Vec<crate::types::VpcSecurityGroupMembership>>,
    pub(crate) db_parameter_groups: ::std::option::Option<::std::vec::Vec<crate::types::DbParameterGroupStatus>>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) db_subnet_group: ::std::option::Option<crate::types::DbSubnetGroup>,
    pub(crate) preferred_maintenance_window: ::std::option::Option<::std::string::String>,
    pub(crate) pending_modified_values: ::std::option::Option<crate::types::PendingModifiedValues>,
    pub(crate) latest_restorable_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) multi_az: ::std::option::Option<bool>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) auto_minor_version_upgrade: ::std::option::Option<bool>,
    pub(crate) read_replica_source_db_instance_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) read_replica_db_instance_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) read_replica_db_cluster_identifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) replica_mode: ::std::option::Option<crate::types::ReplicaMode>,
    pub(crate) license_model: ::std::option::Option<::std::string::String>,
    pub(crate) iops: ::std::option::Option<i32>,
    pub(crate) option_group_memberships: ::std::option::Option<::std::vec::Vec<crate::types::OptionGroupMembership>>,
    pub(crate) character_set_name: ::std::option::Option<::std::string::String>,
    pub(crate) nchar_character_set_name: ::std::option::Option<::std::string::String>,
    pub(crate) secondary_availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) publicly_accessible: ::std::option::Option<bool>,
    pub(crate) status_infos: ::std::option::Option<::std::vec::Vec<crate::types::DbInstanceStatusInfo>>,
    pub(crate) storage_type: ::std::option::Option<::std::string::String>,
    pub(crate) tde_credential_arn: ::std::option::Option<::std::string::String>,
    pub(crate) db_instance_port: ::std::option::Option<i32>,
    pub(crate) db_cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) storage_encrypted: ::std::option::Option<bool>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) dbi_resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) ca_certificate_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) domain_memberships: ::std::option::Option<::std::vec::Vec<crate::types::DomainMembership>>,
    pub(crate) copy_tags_to_snapshot: ::std::option::Option<bool>,
    pub(crate) monitoring_interval: ::std::option::Option<i32>,
    pub(crate) enhanced_monitoring_resource_arn: ::std::option::Option<::std::string::String>,
    pub(crate) monitoring_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) promotion_tier: ::std::option::Option<i32>,
    pub(crate) db_instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) timezone: ::std::option::Option<::std::string::String>,
    pub(crate) iam_database_authentication_enabled: ::std::option::Option<bool>,
    pub(crate) performance_insights_enabled: ::std::option::Option<bool>,
    pub(crate) performance_insights_kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) performance_insights_retention_period: ::std::option::Option<i32>,
    pub(crate) enabled_cloudwatch_logs_exports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) processor_features: ::std::option::Option<::std::vec::Vec<crate::types::ProcessorFeature>>,
    pub(crate) deletion_protection: ::std::option::Option<bool>,
    pub(crate) associated_roles: ::std::option::Option<::std::vec::Vec<crate::types::DbInstanceRole>>,
    pub(crate) listener_endpoint: ::std::option::Option<crate::types::Endpoint>,
    pub(crate) max_allocated_storage: ::std::option::Option<i32>,
    pub(crate) tag_list: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) db_instance_automated_backups_replications:
        ::std::option::Option<::std::vec::Vec<crate::types::DbInstanceAutomatedBackupsReplication>>,
    pub(crate) customer_owned_ip_enabled: ::std::option::Option<bool>,
    pub(crate) aws_backup_recovery_point_arn: ::std::option::Option<::std::string::String>,
    pub(crate) activity_stream_status: ::std::option::Option<crate::types::ActivityStreamStatus>,
    pub(crate) activity_stream_kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) activity_stream_kinesis_stream_name: ::std::option::Option<::std::string::String>,
    pub(crate) activity_stream_mode: ::std::option::Option<crate::types::ActivityStreamMode>,
    pub(crate) activity_stream_engine_native_audit_fields_included: ::std::option::Option<bool>,
    pub(crate) automation_mode: ::std::option::Option<crate::types::AutomationMode>,
    pub(crate) resume_full_automation_mode_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) custom_iam_instance_profile: ::std::option::Option<::std::string::String>,
    pub(crate) backup_target: ::std::option::Option<::std::string::String>,
    pub(crate) network_type: ::std::option::Option<::std::string::String>,
    pub(crate) activity_stream_policy_status: ::std::option::Option<crate::types::ActivityStreamPolicyStatus>,
    pub(crate) storage_throughput: ::std::option::Option<i32>,
    pub(crate) db_system_id: ::std::option::Option<::std::string::String>,
    pub(crate) master_user_secret: ::std::option::Option<crate::types::MasterUserSecret>,
    pub(crate) certificate_details: ::std::option::Option<crate::types::CertificateDetails>,
    pub(crate) read_replica_source_db_cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) percent_progress: ::std::option::Option<::std::string::String>,
    pub(crate) dedicated_log_volume: ::std::option::Option<bool>,
    pub(crate) is_storage_config_upgrade_available: ::std::option::Option<bool>,
}
impl DbInstanceBuilder {
    /// <p>The user-supplied database identifier. This identifier is the unique key that identifies a DB instance.</p>
    pub fn db_instance_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user-supplied database identifier. This identifier is the unique key that identifies a DB instance.</p>
    pub fn set_db_instance_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_identifier = input;
        self
    }
    /// <p>The user-supplied database identifier. This identifier is the unique key that identifies a DB instance.</p>
    pub fn get_db_instance_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_identifier
    }
    /// <p>The name of the compute and memory capacity class of the DB instance.</p>
    pub fn db_instance_class(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_class = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the compute and memory capacity class of the DB instance.</p>
    pub fn set_db_instance_class(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_class = input;
        self
    }
    /// <p>The name of the compute and memory capacity class of the DB instance.</p>
    pub fn get_db_instance_class(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_class
    }
    /// <p>The database engine used for this DB instance.</p>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database engine used for this DB instance.</p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The database engine used for this DB instance.</p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The current state of this database.</p>
    /// <p>For information about DB instance statuses, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/accessing-monitoring.html#Overview.DBInstance.Status">Viewing DB instance status</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn db_instance_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current state of this database.</p>
    /// <p>For information about DB instance statuses, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/accessing-monitoring.html#Overview.DBInstance.Status">Viewing DB instance status</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn set_db_instance_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_status = input;
        self
    }
    /// <p>The current state of this database.</p>
    /// <p>For information about DB instance statuses, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/accessing-monitoring.html#Overview.DBInstance.Status">Viewing DB instance status</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn get_db_instance_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_status
    }
    /// <p>The time when a stopped DB instance is restarted automatically.</p>
    pub fn automatic_restart_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.automatic_restart_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when a stopped DB instance is restarted automatically.</p>
    pub fn set_automatic_restart_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.automatic_restart_time = input;
        self
    }
    /// <p>The time when a stopped DB instance is restarted automatically.</p>
    pub fn get_automatic_restart_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.automatic_restart_time
    }
    /// <p>The master username for the DB instance.</p>
    pub fn master_username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.master_username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The master username for the DB instance.</p>
    pub fn set_master_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.master_username = input;
        self
    }
    /// <p>The master username for the DB instance.</p>
    pub fn get_master_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.master_username
    }
    /// <p>Contains the initial database name that you provided (if required) when you created the DB instance. This name is returned for the life of your DB instance. For an RDS for Oracle CDB instance, the name identifies the PDB rather than the CDB.</p>
    pub fn db_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Contains the initial database name that you provided (if required) when you created the DB instance. This name is returned for the life of your DB instance. For an RDS for Oracle CDB instance, the name identifies the PDB rather than the CDB.</p>
    pub fn set_db_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_name = input;
        self
    }
    /// <p>Contains the initial database name that you provided (if required) when you created the DB instance. This name is returned for the life of your DB instance. For an RDS for Oracle CDB instance, the name identifies the PDB rather than the CDB.</p>
    pub fn get_db_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_name
    }
    /// <p>The connection endpoint for the DB instance.</p> <note>
    /// <p>The endpoint might not be shown for instances with the status of <code>creating</code>.</p>
    /// </note>
    pub fn endpoint(mut self, input: crate::types::Endpoint) -> Self {
        self.endpoint = ::std::option::Option::Some(input);
        self
    }
    /// <p>The connection endpoint for the DB instance.</p> <note>
    /// <p>The endpoint might not be shown for instances with the status of <code>creating</code>.</p>
    /// </note>
    pub fn set_endpoint(mut self, input: ::std::option::Option<crate::types::Endpoint>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The connection endpoint for the DB instance.</p> <note>
    /// <p>The endpoint might not be shown for instances with the status of <code>creating</code>.</p>
    /// </note>
    pub fn get_endpoint(&self) -> &::std::option::Option<crate::types::Endpoint> {
        &self.endpoint
    }
    /// <p>The amount of storage in gibibytes (GiB) allocated for the DB instance.</p>
    pub fn allocated_storage(mut self, input: i32) -> Self {
        self.allocated_storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of storage in gibibytes (GiB) allocated for the DB instance.</p>
    pub fn set_allocated_storage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.allocated_storage = input;
        self
    }
    /// <p>The amount of storage in gibibytes (GiB) allocated for the DB instance.</p>
    pub fn get_allocated_storage(&self) -> &::std::option::Option<i32> {
        &self.allocated_storage
    }
    /// <p>The date and time when the DB instance was created.</p>
    pub fn instance_create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.instance_create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the DB instance was created.</p>
    pub fn set_instance_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.instance_create_time = input;
        self
    }
    /// <p>The date and time when the DB instance was created.</p>
    pub fn get_instance_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.instance_create_time
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>.</p>
    pub fn preferred_backup_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.preferred_backup_window = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>.</p>
    pub fn set_preferred_backup_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.preferred_backup_window = input;
        self
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>.</p>
    pub fn get_preferred_backup_window(&self) -> &::std::option::Option<::std::string::String> {
        &self.preferred_backup_window
    }
    /// <p>The number of days for which automatic DB snapshots are retained.</p>
    pub fn backup_retention_period(mut self, input: i32) -> Self {
        self.backup_retention_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days for which automatic DB snapshots are retained.</p>
    pub fn set_backup_retention_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.backup_retention_period = input;
        self
    }
    /// <p>The number of days for which automatic DB snapshots are retained.</p>
    pub fn get_backup_retention_period(&self) -> &::std::option::Option<i32> {
        &self.backup_retention_period
    }
    /// Appends an item to `db_security_groups`.
    ///
    /// To override the contents of this collection use [`set_db_security_groups`](Self::set_db_security_groups).
    ///
    /// <p>A list of DB security group elements containing <code>DBSecurityGroup.Name</code> and <code>DBSecurityGroup.Status</code> subelements.</p>
    pub fn db_security_groups(mut self, input: crate::types::DbSecurityGroupMembership) -> Self {
        let mut v = self.db_security_groups.unwrap_or_default();
        v.push(input);
        self.db_security_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of DB security group elements containing <code>DBSecurityGroup.Name</code> and <code>DBSecurityGroup.Status</code> subelements.</p>
    pub fn set_db_security_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DbSecurityGroupMembership>>) -> Self {
        self.db_security_groups = input;
        self
    }
    /// <p>A list of DB security group elements containing <code>DBSecurityGroup.Name</code> and <code>DBSecurityGroup.Status</code> subelements.</p>
    pub fn get_db_security_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DbSecurityGroupMembership>> {
        &self.db_security_groups
    }
    /// Appends an item to `vpc_security_groups`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_groups`](Self::set_vpc_security_groups).
    ///
    /// <p>The list of Amazon EC2 VPC security groups that the DB instance belongs to.</p>
    pub fn vpc_security_groups(mut self, input: crate::types::VpcSecurityGroupMembership) -> Self {
        let mut v = self.vpc_security_groups.unwrap_or_default();
        v.push(input);
        self.vpc_security_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of Amazon EC2 VPC security groups that the DB instance belongs to.</p>
    pub fn set_vpc_security_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::VpcSecurityGroupMembership>>) -> Self {
        self.vpc_security_groups = input;
        self
    }
    /// <p>The list of Amazon EC2 VPC security groups that the DB instance belongs to.</p>
    pub fn get_vpc_security_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::VpcSecurityGroupMembership>> {
        &self.vpc_security_groups
    }
    /// Appends an item to `db_parameter_groups`.
    ///
    /// To override the contents of this collection use [`set_db_parameter_groups`](Self::set_db_parameter_groups).
    ///
    /// <p>The list of DB parameter groups applied to this DB instance.</p>
    pub fn db_parameter_groups(mut self, input: crate::types::DbParameterGroupStatus) -> Self {
        let mut v = self.db_parameter_groups.unwrap_or_default();
        v.push(input);
        self.db_parameter_groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of DB parameter groups applied to this DB instance.</p>
    pub fn set_db_parameter_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DbParameterGroupStatus>>) -> Self {
        self.db_parameter_groups = input;
        self
    }
    /// <p>The list of DB parameter groups applied to this DB instance.</p>
    pub fn get_db_parameter_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DbParameterGroupStatus>> {
        &self.db_parameter_groups
    }
    /// <p>The name of the Availability Zone where the DB instance is located.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Availability Zone where the DB instance is located.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The name of the Availability Zone where the DB instance is located.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>Information about the subnet group associated with the DB instance, including the name, description, and subnets in the subnet group.</p>
    pub fn db_subnet_group(mut self, input: crate::types::DbSubnetGroup) -> Self {
        self.db_subnet_group = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the subnet group associated with the DB instance, including the name, description, and subnets in the subnet group.</p>
    pub fn set_db_subnet_group(mut self, input: ::std::option::Option<crate::types::DbSubnetGroup>) -> Self {
        self.db_subnet_group = input;
        self
    }
    /// <p>Information about the subnet group associated with the DB instance, including the name, description, and subnets in the subnet group.</p>
    pub fn get_db_subnet_group(&self) -> &::std::option::Option<crate::types::DbSubnetGroup> {
        &self.db_subnet_group
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    pub fn preferred_maintenance_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.preferred_maintenance_window = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    pub fn set_preferred_maintenance_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.preferred_maintenance_window = input;
        self
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    pub fn get_preferred_maintenance_window(&self) -> &::std::option::Option<::std::string::String> {
        &self.preferred_maintenance_window
    }
    /// <p>Information about pending changes to the DB instance. This information is returned only when there are pending changes. Specific changes are identified by subelements.</p>
    pub fn pending_modified_values(mut self, input: crate::types::PendingModifiedValues) -> Self {
        self.pending_modified_values = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about pending changes to the DB instance. This information is returned only when there are pending changes. Specific changes are identified by subelements.</p>
    pub fn set_pending_modified_values(mut self, input: ::std::option::Option<crate::types::PendingModifiedValues>) -> Self {
        self.pending_modified_values = input;
        self
    }
    /// <p>Information about pending changes to the DB instance. This information is returned only when there are pending changes. Specific changes are identified by subelements.</p>
    pub fn get_pending_modified_values(&self) -> &::std::option::Option<crate::types::PendingModifiedValues> {
        &self.pending_modified_values
    }
    /// <p>The latest time to which a database in this DB instance can be restored with point-in-time restore.</p>
    pub fn latest_restorable_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.latest_restorable_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The latest time to which a database in this DB instance can be restored with point-in-time restore.</p>
    pub fn set_latest_restorable_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.latest_restorable_time = input;
        self
    }
    /// <p>The latest time to which a database in this DB instance can be restored with point-in-time restore.</p>
    pub fn get_latest_restorable_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.latest_restorable_time
    }
    /// <p>Indicates whether the DB instance is a Multi-AZ deployment. This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn multi_az(mut self, input: bool) -> Self {
        self.multi_az = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the DB instance is a Multi-AZ deployment. This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn set_multi_az(mut self, input: ::std::option::Option<bool>) -> Self {
        self.multi_az = input;
        self
    }
    /// <p>Indicates whether the DB instance is a Multi-AZ deployment. This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn get_multi_az(&self) -> &::std::option::Option<bool> {
        &self.multi_az
    }
    /// <p>The version of the database engine.</p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the database engine.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The version of the database engine.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p>Indicates whether minor version patches are applied automatically.</p>
    pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
        self.auto_minor_version_upgrade = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether minor version patches are applied automatically.</p>
    pub fn set_auto_minor_version_upgrade(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_minor_version_upgrade = input;
        self
    }
    /// <p>Indicates whether minor version patches are applied automatically.</p>
    pub fn get_auto_minor_version_upgrade(&self) -> &::std::option::Option<bool> {
        &self.auto_minor_version_upgrade
    }
    /// <p>The identifier of the source DB instance if this DB instance is a read replica.</p>
    pub fn read_replica_source_db_instance_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.read_replica_source_db_instance_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the source DB instance if this DB instance is a read replica.</p>
    pub fn set_read_replica_source_db_instance_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.read_replica_source_db_instance_identifier = input;
        self
    }
    /// <p>The identifier of the source DB instance if this DB instance is a read replica.</p>
    pub fn get_read_replica_source_db_instance_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.read_replica_source_db_instance_identifier
    }
    /// Appends an item to `read_replica_db_instance_identifiers`.
    ///
    /// To override the contents of this collection use [`set_read_replica_db_instance_identifiers`](Self::set_read_replica_db_instance_identifiers).
    ///
    /// <p>The identifiers of the read replicas associated with this DB instance.</p>
    pub fn read_replica_db_instance_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.read_replica_db_instance_identifiers.unwrap_or_default();
        v.push(input.into());
        self.read_replica_db_instance_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifiers of the read replicas associated with this DB instance.</p>
    pub fn set_read_replica_db_instance_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.read_replica_db_instance_identifiers = input;
        self
    }
    /// <p>The identifiers of the read replicas associated with this DB instance.</p>
    pub fn get_read_replica_db_instance_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.read_replica_db_instance_identifiers
    }
    /// Appends an item to `read_replica_db_cluster_identifiers`.
    ///
    /// To override the contents of this collection use [`set_read_replica_db_cluster_identifiers`](Self::set_read_replica_db_cluster_identifiers).
    ///
    /// <p>The identifiers of Aurora DB clusters to which the RDS DB instance is replicated as a read replica. For example, when you create an Aurora read replica of an RDS for MySQL DB instance, the Aurora MySQL DB cluster for the Aurora read replica is shown. This output doesn't contain information about cross-Region Aurora read replicas.</p> <note>
    /// <p>Currently, each RDS DB instance can have only one Aurora read replica.</p>
    /// </note>
    pub fn read_replica_db_cluster_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.read_replica_db_cluster_identifiers.unwrap_or_default();
        v.push(input.into());
        self.read_replica_db_cluster_identifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>The identifiers of Aurora DB clusters to which the RDS DB instance is replicated as a read replica. For example, when you create an Aurora read replica of an RDS for MySQL DB instance, the Aurora MySQL DB cluster for the Aurora read replica is shown. This output doesn't contain information about cross-Region Aurora read replicas.</p> <note>
    /// <p>Currently, each RDS DB instance can have only one Aurora read replica.</p>
    /// </note>
    pub fn set_read_replica_db_cluster_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.read_replica_db_cluster_identifiers = input;
        self
    }
    /// <p>The identifiers of Aurora DB clusters to which the RDS DB instance is replicated as a read replica. For example, when you create an Aurora read replica of an RDS for MySQL DB instance, the Aurora MySQL DB cluster for the Aurora read replica is shown. This output doesn't contain information about cross-Region Aurora read replicas.</p> <note>
    /// <p>Currently, each RDS DB instance can have only one Aurora read replica.</p>
    /// </note>
    pub fn get_read_replica_db_cluster_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.read_replica_db_cluster_identifiers
    }
    /// <p>The open mode of an Oracle read replica. The default is <code>open-read-only</code>. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working with Oracle Read Replicas for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> <note>
    /// <p>This attribute is only supported in RDS for Oracle.</p>
    /// </note>
    pub fn replica_mode(mut self, input: crate::types::ReplicaMode) -> Self {
        self.replica_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The open mode of an Oracle read replica. The default is <code>open-read-only</code>. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working with Oracle Read Replicas for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> <note>
    /// <p>This attribute is only supported in RDS for Oracle.</p>
    /// </note>
    pub fn set_replica_mode(mut self, input: ::std::option::Option<crate::types::ReplicaMode>) -> Self {
        self.replica_mode = input;
        self
    }
    /// <p>The open mode of an Oracle read replica. The default is <code>open-read-only</code>. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working with Oracle Read Replicas for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p> <note>
    /// <p>This attribute is only supported in RDS for Oracle.</p>
    /// </note>
    pub fn get_replica_mode(&self) -> &::std::option::Option<crate::types::ReplicaMode> {
        &self.replica_mode
    }
    /// <p>The license model information for this DB instance. This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn license_model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.license_model = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The license model information for this DB instance. This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn set_license_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.license_model = input;
        self
    }
    /// <p>The license model information for this DB instance. This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn get_license_model(&self) -> &::std::option::Option<::std::string::String> {
        &self.license_model
    }
    /// <p>The Provisioned IOPS (I/O operations per second) value for the DB instance.</p>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Provisioned IOPS (I/O operations per second) value for the DB instance.</p>
    pub fn set_iops(mut self, input: ::std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// <p>The Provisioned IOPS (I/O operations per second) value for the DB instance.</p>
    pub fn get_iops(&self) -> &::std::option::Option<i32> {
        &self.iops
    }
    /// Appends an item to `option_group_memberships`.
    ///
    /// To override the contents of this collection use [`set_option_group_memberships`](Self::set_option_group_memberships).
    ///
    /// <p>The list of option group memberships for this DB instance.</p>
    pub fn option_group_memberships(mut self, input: crate::types::OptionGroupMembership) -> Self {
        let mut v = self.option_group_memberships.unwrap_or_default();
        v.push(input);
        self.option_group_memberships = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of option group memberships for this DB instance.</p>
    pub fn set_option_group_memberships(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::OptionGroupMembership>>) -> Self {
        self.option_group_memberships = input;
        self
    }
    /// <p>The list of option group memberships for this DB instance.</p>
    pub fn get_option_group_memberships(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::OptionGroupMembership>> {
        &self.option_group_memberships
    }
    /// <p>If present, specifies the name of the character set that this instance is associated with.</p>
    pub fn character_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.character_set_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If present, specifies the name of the character set that this instance is associated with.</p>
    pub fn set_character_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.character_set_name = input;
        self
    }
    /// <p>If present, specifies the name of the character set that this instance is associated with.</p>
    pub fn get_character_set_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.character_set_name
    }
    /// <p>The name of the NCHAR character set for the Oracle DB instance. This character set specifies the Unicode encoding for data stored in table columns of type NCHAR, NCLOB, or NVARCHAR2.</p>
    pub fn nchar_character_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.nchar_character_set_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the NCHAR character set for the Oracle DB instance. This character set specifies the Unicode encoding for data stored in table columns of type NCHAR, NCLOB, or NVARCHAR2.</p>
    pub fn set_nchar_character_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.nchar_character_set_name = input;
        self
    }
    /// <p>The name of the NCHAR character set for the Oracle DB instance. This character set specifies the Unicode encoding for data stored in table columns of type NCHAR, NCLOB, or NVARCHAR2.</p>
    pub fn get_nchar_character_set_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.nchar_character_set_name
    }
    /// <p>If present, specifies the name of the secondary Availability Zone for a DB instance with multi-AZ support.</p>
    pub fn secondary_availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secondary_availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If present, specifies the name of the secondary Availability Zone for a DB instance with multi-AZ support.</p>
    pub fn set_secondary_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secondary_availability_zone = input;
        self
    }
    /// <p>If present, specifies the name of the secondary Availability Zone for a DB instance with multi-AZ support.</p>
    pub fn get_secondary_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.secondary_availability_zone
    }
    /// <p>Indicates whether the DB instance is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.publicly_accessible = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the DB instance is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    pub fn set_publicly_accessible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.publicly_accessible = input;
        self
    }
    /// <p>Indicates whether the DB instance is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    pub fn get_publicly_accessible(&self) -> &::std::option::Option<bool> {
        &self.publicly_accessible
    }
    /// Appends an item to `status_infos`.
    ///
    /// To override the contents of this collection use [`set_status_infos`](Self::set_status_infos).
    ///
    /// <p>The status of a read replica. If the DB instance isn't a read replica, the value is blank.</p>
    pub fn status_infos(mut self, input: crate::types::DbInstanceStatusInfo) -> Self {
        let mut v = self.status_infos.unwrap_or_default();
        v.push(input);
        self.status_infos = ::std::option::Option::Some(v);
        self
    }
    /// <p>The status of a read replica. If the DB instance isn't a read replica, the value is blank.</p>
    pub fn set_status_infos(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DbInstanceStatusInfo>>) -> Self {
        self.status_infos = input;
        self
    }
    /// <p>The status of a read replica. If the DB instance isn't a read replica, the value is blank.</p>
    pub fn get_status_infos(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DbInstanceStatusInfo>> {
        &self.status_infos
    }
    /// <p>The storage type associated with the DB instance.</p>
    pub fn storage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The storage type associated with the DB instance.</p>
    pub fn set_storage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_type = input;
        self
    }
    /// <p>The storage type associated with the DB instance.</p>
    pub fn get_storage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_type
    }
    /// <p>The ARN from the key store with which the instance is associated for TDE encryption.</p>
    pub fn tde_credential_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tde_credential_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN from the key store with which the instance is associated for TDE encryption.</p>
    pub fn set_tde_credential_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tde_credential_arn = input;
        self
    }
    /// <p>The ARN from the key store with which the instance is associated for TDE encryption.</p>
    pub fn get_tde_credential_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.tde_credential_arn
    }
    /// <p>The port that the DB instance listens on. If the DB instance is part of a DB cluster, this can be a different port than the DB cluster port.</p>
    pub fn db_instance_port(mut self, input: i32) -> Self {
        self.db_instance_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port that the DB instance listens on. If the DB instance is part of a DB cluster, this can be a different port than the DB cluster port.</p>
    pub fn set_db_instance_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.db_instance_port = input;
        self
    }
    /// <p>The port that the DB instance listens on. If the DB instance is part of a DB cluster, this can be a different port than the DB cluster port.</p>
    pub fn get_db_instance_port(&self) -> &::std::option::Option<i32> {
        &self.db_instance_port
    }
    /// <p>If the DB instance is a member of a DB cluster, indicates the name of the DB cluster that the DB instance is a member of.</p>
    pub fn db_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If the DB instance is a member of a DB cluster, indicates the name of the DB cluster that the DB instance is a member of.</p>
    pub fn set_db_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_identifier = input;
        self
    }
    /// <p>If the DB instance is a member of a DB cluster, indicates the name of the DB cluster that the DB instance is a member of.</p>
    pub fn get_db_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_identifier
    }
    /// <p>Indicates whether the DB instance is encrypted.</p>
    pub fn storage_encrypted(mut self, input: bool) -> Self {
        self.storage_encrypted = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the DB instance is encrypted.</p>
    pub fn set_storage_encrypted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.storage_encrypted = input;
        self
    }
    /// <p>Indicates whether the DB instance is encrypted.</p>
    pub fn get_storage_encrypted(&self) -> &::std::option::Option<bool> {
        &self.storage_encrypted
    }
    /// <p>If <code>StorageEncrypted</code> is enabled, the Amazon Web Services KMS key identifier for the encrypted DB instance.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If <code>StorageEncrypted</code> is enabled, the Amazon Web Services KMS key identifier for the encrypted DB instance.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>If <code>StorageEncrypted</code> is enabled, the Amazon Web Services KMS key identifier for the encrypted DB instance.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>The Amazon Web Services Region-unique, immutable identifier for the DB instance. This identifier is found in Amazon Web Services CloudTrail log entries whenever the Amazon Web Services KMS key for the DB instance is accessed.</p>
    pub fn dbi_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dbi_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region-unique, immutable identifier for the DB instance. This identifier is found in Amazon Web Services CloudTrail log entries whenever the Amazon Web Services KMS key for the DB instance is accessed.</p>
    pub fn set_dbi_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dbi_resource_id = input;
        self
    }
    /// <p>The Amazon Web Services Region-unique, immutable identifier for the DB instance. This identifier is found in Amazon Web Services CloudTrail log entries whenever the Amazon Web Services KMS key for the DB instance is accessed.</p>
    pub fn get_dbi_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.dbi_resource_id
    }
    /// <p>The identifier of the CA certificate for this DB instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn ca_certificate_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ca_certificate_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the CA certificate for this DB instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_ca_certificate_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ca_certificate_identifier = input;
        self
    }
    /// <p>The identifier of the CA certificate for this DB instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn get_ca_certificate_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.ca_certificate_identifier
    }
    /// Appends an item to `domain_memberships`.
    ///
    /// To override the contents of this collection use [`set_domain_memberships`](Self::set_domain_memberships).
    ///
    /// <p>The Active Directory Domain membership records associated with the DB instance.</p>
    pub fn domain_memberships(mut self, input: crate::types::DomainMembership) -> Self {
        let mut v = self.domain_memberships.unwrap_or_default();
        v.push(input);
        self.domain_memberships = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Active Directory Domain membership records associated with the DB instance.</p>
    pub fn set_domain_memberships(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DomainMembership>>) -> Self {
        self.domain_memberships = input;
        self
    }
    /// <p>The Active Directory Domain membership records associated with the DB instance.</p>
    pub fn get_domain_memberships(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DomainMembership>> {
        &self.domain_memberships
    }
    /// <p>Indicates whether tags are copied from the DB instance to snapshots of the DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>DBCluster</code>.</p>
    pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
        self.copy_tags_to_snapshot = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether tags are copied from the DB instance to snapshots of the DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>DBCluster</code>.</p>
    pub fn set_copy_tags_to_snapshot(mut self, input: ::std::option::Option<bool>) -> Self {
        self.copy_tags_to_snapshot = input;
        self
    }
    /// <p>Indicates whether tags are copied from the DB instance to snapshots of the DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting. For more information, see <code>DBCluster</code>.</p>
    pub fn get_copy_tags_to_snapshot(&self) -> &::std::option::Option<bool> {
        &self.copy_tags_to_snapshot
    }
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.</p>
    pub fn monitoring_interval(mut self, input: i32) -> Self {
        self.monitoring_interval = ::std::option::Option::Some(input);
        self
    }
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.</p>
    pub fn set_monitoring_interval(mut self, input: ::std::option::Option<i32>) -> Self {
        self.monitoring_interval = input;
        self
    }
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.</p>
    pub fn get_monitoring_interval(&self) -> &::std::option::Option<i32> {
        &self.monitoring_interval
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon CloudWatch Logs log stream that receives the Enhanced Monitoring metrics data for the DB instance.</p>
    pub fn enhanced_monitoring_resource_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.enhanced_monitoring_resource_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon CloudWatch Logs log stream that receives the Enhanced Monitoring metrics data for the DB instance.</p>
    pub fn set_enhanced_monitoring_resource_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.enhanced_monitoring_resource_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon CloudWatch Logs log stream that receives the Enhanced Monitoring metrics data for the DB instance.</p>
    pub fn get_enhanced_monitoring_resource_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.enhanced_monitoring_resource_arn
    }
    /// <p>The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.</p>
    pub fn monitoring_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.monitoring_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.</p>
    pub fn set_monitoring_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.monitoring_role_arn = input;
        self
    }
    /// <p>The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.</p>
    pub fn get_monitoring_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.monitoring_role_arn
    }
    /// <p>The order of priority in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.AuroraHighAvailability.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn promotion_tier(mut self, input: i32) -> Self {
        self.promotion_tier = ::std::option::Option::Some(input);
        self
    }
    /// <p>The order of priority in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.AuroraHighAvailability.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_promotion_tier(mut self, input: ::std::option::Option<i32>) -> Self {
        self.promotion_tier = input;
        self
    }
    /// <p>The order of priority in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.AuroraHighAvailability.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn get_promotion_tier(&self) -> &::std::option::Option<i32> {
        &self.promotion_tier
    }
    /// <p>The Amazon Resource Name (ARN) for the DB instance.</p>
    pub fn db_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the DB instance.</p>
    pub fn set_db_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the DB instance.</p>
    pub fn get_db_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_arn
    }
    /// <p>The time zone of the DB instance. In most cases, the <code>Timezone</code> element is empty. <code>Timezone</code> content appears only for Microsoft SQL Server DB instances that were created with a time zone specified.</p>
    pub fn timezone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.timezone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time zone of the DB instance. In most cases, the <code>Timezone</code> element is empty. <code>Timezone</code> content appears only for Microsoft SQL Server DB instances that were created with a time zone specified.</p>
    pub fn set_timezone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.timezone = input;
        self
    }
    /// <p>The time zone of the DB instance. In most cases, the <code>Timezone</code> element is empty. <code>Timezone</code> content appears only for Microsoft SQL Server DB instances that were created with a time zone specified.</p>
    pub fn get_timezone(&self) -> &::std::option::Option<::std::string::String> {
        &self.timezone
    }
    /// <p>Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled for the DB instance.</p>
    /// <p>For a list of engine versions that support IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RDS_Fea_Regions_DB-eng.Feature.IamDatabaseAuthentication.html">IAM database authentication</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.Aurora_Fea_Regions_DB-eng.Feature.IAMdbauth.html">IAM database authentication in Aurora</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn iam_database_authentication_enabled(mut self, input: bool) -> Self {
        self.iam_database_authentication_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled for the DB instance.</p>
    /// <p>For a list of engine versions that support IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RDS_Fea_Regions_DB-eng.Feature.IamDatabaseAuthentication.html">IAM database authentication</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.Aurora_Fea_Regions_DB-eng.Feature.IAMdbauth.html">IAM database authentication in Aurora</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_iam_database_authentication_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.iam_database_authentication_enabled = input;
        self
    }
    /// <p>Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled for the DB instance.</p>
    /// <p>For a list of engine versions that support IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RDS_Fea_Regions_DB-eng.Feature.IamDatabaseAuthentication.html">IAM database authentication</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.Aurora_Fea_Regions_DB-eng.Feature.IAMdbauth.html">IAM database authentication in Aurora</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn get_iam_database_authentication_enabled(&self) -> &::std::option::Option<bool> {
        &self.iam_database_authentication_enabled
    }
    /// <p>Indicates whether Performance Insights is enabled for the DB instance.</p>
    pub fn performance_insights_enabled(mut self, input: bool) -> Self {
        self.performance_insights_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether Performance Insights is enabled for the DB instance.</p>
    pub fn set_performance_insights_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.performance_insights_enabled = input;
        self
    }
    /// <p>Indicates whether Performance Insights is enabled for the DB instance.</p>
    pub fn get_performance_insights_enabled(&self) -> &::std::option::Option<bool> {
        &self.performance_insights_enabled
    }
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn performance_insights_kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.performance_insights_kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn set_performance_insights_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.performance_insights_kms_key_id = input;
        self
    }
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn get_performance_insights_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.performance_insights_kms_key_id
    }
    /// <p>The number of days to retain Performance Insights data.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>7</code> </p> </li>
    /// <li> <p> <i>month</i> * 31, where <i>month</i> is a number of months from 1-23. Examples: <code>93</code> (3 months * 31), <code>341</code> (11 months * 31), <code>589</code> (19 months * 31)</p> </li>
    /// <li> <p> <code>731</code> </p> </li>
    /// </ul>
    /// <p>Default: <code>7</code> days</p>
    pub fn performance_insights_retention_period(mut self, input: i32) -> Self {
        self.performance_insights_retention_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days to retain Performance Insights data.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>7</code> </p> </li>
    /// <li> <p> <i>month</i> * 31, where <i>month</i> is a number of months from 1-23. Examples: <code>93</code> (3 months * 31), <code>341</code> (11 months * 31), <code>589</code> (19 months * 31)</p> </li>
    /// <li> <p> <code>731</code> </p> </li>
    /// </ul>
    /// <p>Default: <code>7</code> days</p>
    pub fn set_performance_insights_retention_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.performance_insights_retention_period = input;
        self
    }
    /// <p>The number of days to retain Performance Insights data.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>7</code> </p> </li>
    /// <li> <p> <i>month</i> * 31, where <i>month</i> is a number of months from 1-23. Examples: <code>93</code> (3 months * 31), <code>341</code> (11 months * 31), <code>589</code> (19 months * 31)</p> </li>
    /// <li> <p> <code>731</code> </p> </li>
    /// </ul>
    /// <p>Default: <code>7</code> days</p>
    pub fn get_performance_insights_retention_period(&self) -> &::std::option::Option<i32> {
        &self.performance_insights_retention_period
    }
    /// Appends an item to `enabled_cloudwatch_logs_exports`.
    ///
    /// To override the contents of this collection use [`set_enabled_cloudwatch_logs_exports`](Self::set_enabled_cloudwatch_logs_exports).
    ///
    /// <p>A list of log types that this DB instance is configured to export to CloudWatch Logs.</p>
    /// <p>Log types vary by DB engine. For information about the log types for each DB engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html">Monitoring Amazon RDS log files</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn enabled_cloudwatch_logs_exports(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.enabled_cloudwatch_logs_exports.unwrap_or_default();
        v.push(input.into());
        self.enabled_cloudwatch_logs_exports = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of log types that this DB instance is configured to export to CloudWatch Logs.</p>
    /// <p>Log types vary by DB engine. For information about the log types for each DB engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html">Monitoring Amazon RDS log files</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn set_enabled_cloudwatch_logs_exports(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.enabled_cloudwatch_logs_exports = input;
        self
    }
    /// <p>A list of log types that this DB instance is configured to export to CloudWatch Logs.</p>
    /// <p>Log types vary by DB engine. For information about the log types for each DB engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html">Monitoring Amazon RDS log files</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn get_enabled_cloudwatch_logs_exports(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.enabled_cloudwatch_logs_exports
    }
    /// Appends an item to `processor_features`.
    ///
    /// To override the contents of this collection use [`set_processor_features`](Self::set_processor_features).
    ///
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub fn processor_features(mut self, input: crate::types::ProcessorFeature) -> Self {
        let mut v = self.processor_features.unwrap_or_default();
        v.push(input);
        self.processor_features = ::std::option::Option::Some(v);
        self
    }
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub fn set_processor_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProcessorFeature>>) -> Self {
        self.processor_features = input;
        self
    }
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub fn get_processor_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProcessorFeature>> {
        &self.processor_features
    }
    /// <p>Indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p>
    pub fn deletion_protection(mut self, input: bool) -> Self {
        self.deletion_protection = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p>
    pub fn set_deletion_protection(mut self, input: ::std::option::Option<bool>) -> Self {
        self.deletion_protection = input;
        self
    }
    /// <p>Indicates whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p>
    pub fn get_deletion_protection(&self) -> &::std::option::Option<bool> {
        &self.deletion_protection
    }
    /// Appends an item to `associated_roles`.
    ///
    /// To override the contents of this collection use [`set_associated_roles`](Self::set_associated_roles).
    ///
    /// <p>The Amazon Web Services Identity and Access Management (IAM) roles associated with the DB instance.</p>
    pub fn associated_roles(mut self, input: crate::types::DbInstanceRole) -> Self {
        let mut v = self.associated_roles.unwrap_or_default();
        v.push(input);
        self.associated_roles = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Web Services Identity and Access Management (IAM) roles associated with the DB instance.</p>
    pub fn set_associated_roles(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DbInstanceRole>>) -> Self {
        self.associated_roles = input;
        self
    }
    /// <p>The Amazon Web Services Identity and Access Management (IAM) roles associated with the DB instance.</p>
    pub fn get_associated_roles(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DbInstanceRole>> {
        &self.associated_roles
    }
    /// <p>The listener connection endpoint for SQL Server Always On.</p>
    pub fn listener_endpoint(mut self, input: crate::types::Endpoint) -> Self {
        self.listener_endpoint = ::std::option::Option::Some(input);
        self
    }
    /// <p>The listener connection endpoint for SQL Server Always On.</p>
    pub fn set_listener_endpoint(mut self, input: ::std::option::Option<crate::types::Endpoint>) -> Self {
        self.listener_endpoint = input;
        self
    }
    /// <p>The listener connection endpoint for SQL Server Always On.</p>
    pub fn get_listener_endpoint(&self) -> &::std::option::Option<crate::types::Endpoint> {
        &self.listener_endpoint
    }
    /// <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    pub fn max_allocated_storage(mut self, input: i32) -> Self {
        self.max_allocated_storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    pub fn set_max_allocated_storage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_allocated_storage = input;
        self
    }
    /// <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    pub fn get_max_allocated_storage(&self) -> &::std::option::Option<i32> {
        &self.max_allocated_storage
    }
    /// Appends an item to `tag_list`.
    ///
    /// To override the contents of this collection use [`set_tag_list`](Self::set_tag_list).
    ///
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn tag_list(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tag_list.unwrap_or_default();
        v.push(input);
        self.tag_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn set_tag_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tag_list = input;
        self
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn get_tag_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tag_list
    }
    /// Appends an item to `db_instance_automated_backups_replications`.
    ///
    /// To override the contents of this collection use [`set_db_instance_automated_backups_replications`](Self::set_db_instance_automated_backups_replications).
    ///
    /// <p>The list of replicated automated backups associated with the DB instance.</p>
    pub fn db_instance_automated_backups_replications(mut self, input: crate::types::DbInstanceAutomatedBackupsReplication) -> Self {
        let mut v = self.db_instance_automated_backups_replications.unwrap_or_default();
        v.push(input);
        self.db_instance_automated_backups_replications = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of replicated automated backups associated with the DB instance.</p>
    pub fn set_db_instance_automated_backups_replications(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::DbInstanceAutomatedBackupsReplication>>,
    ) -> Self {
        self.db_instance_automated_backups_replications = input;
        self
    }
    /// <p>The list of replicated automated backups associated with the DB instance.</p>
    pub fn get_db_instance_automated_backups_replications(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::DbInstanceAutomatedBackupsReplication>> {
        &self.db_instance_automated_backups_replications
    }
    /// <p>Indicates whether a customer-owned IP address (CoIP) is enabled for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP </i>provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub fn customer_owned_ip_enabled(mut self, input: bool) -> Self {
        self.customer_owned_ip_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether a customer-owned IP address (CoIP) is enabled for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP </i>provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub fn set_customer_owned_ip_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.customer_owned_ip_enabled = input;
        self
    }
    /// <p>Indicates whether a customer-owned IP address (CoIP) is enabled for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP </i>provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub fn get_customer_owned_ip_enabled(&self) -> &::std::option::Option<bool> {
        &self.customer_owned_ip_enabled
    }
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub fn aws_backup_recovery_point_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_backup_recovery_point_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub fn set_aws_backup_recovery_point_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_backup_recovery_point_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub fn get_aws_backup_recovery_point_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_backup_recovery_point_arn
    }
    /// <p>The status of the database activity stream.</p>
    pub fn activity_stream_status(mut self, input: crate::types::ActivityStreamStatus) -> Self {
        self.activity_stream_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the database activity stream.</p>
    pub fn set_activity_stream_status(mut self, input: ::std::option::Option<crate::types::ActivityStreamStatus>) -> Self {
        self.activity_stream_status = input;
        self
    }
    /// <p>The status of the database activity stream.</p>
    pub fn get_activity_stream_status(&self) -> &::std::option::Option<crate::types::ActivityStreamStatus> {
        &self.activity_stream_status
    }
    /// <p>The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn activity_stream_kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.activity_stream_kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn set_activity_stream_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.activity_stream_kms_key_id = input;
        self
    }
    /// <p>The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn get_activity_stream_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.activity_stream_kms_key_id
    }
    /// <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
    pub fn activity_stream_kinesis_stream_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.activity_stream_kinesis_stream_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
    pub fn set_activity_stream_kinesis_stream_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.activity_stream_kinesis_stream_name = input;
        self
    }
    /// <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
    pub fn get_activity_stream_kinesis_stream_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.activity_stream_kinesis_stream_name
    }
    /// <p>The mode of the database activity stream. Database events such as a change or access generate an activity stream event. RDS for Oracle always handles these events asynchronously.</p>
    pub fn activity_stream_mode(mut self, input: crate::types::ActivityStreamMode) -> Self {
        self.activity_stream_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The mode of the database activity stream. Database events such as a change or access generate an activity stream event. RDS for Oracle always handles these events asynchronously.</p>
    pub fn set_activity_stream_mode(mut self, input: ::std::option::Option<crate::types::ActivityStreamMode>) -> Self {
        self.activity_stream_mode = input;
        self
    }
    /// <p>The mode of the database activity stream. Database events such as a change or access generate an activity stream event. RDS for Oracle always handles these events asynchronously.</p>
    pub fn get_activity_stream_mode(&self) -> &::std::option::Option<crate::types::ActivityStreamMode> {
        &self.activity_stream_mode
    }
    /// <p>Indicates whether engine-native audit fields are included in the database activity stream.</p>
    pub fn activity_stream_engine_native_audit_fields_included(mut self, input: bool) -> Self {
        self.activity_stream_engine_native_audit_fields_included = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether engine-native audit fields are included in the database activity stream.</p>
    pub fn set_activity_stream_engine_native_audit_fields_included(mut self, input: ::std::option::Option<bool>) -> Self {
        self.activity_stream_engine_native_audit_fields_included = input;
        self
    }
    /// <p>Indicates whether engine-native audit fields are included in the database activity stream.</p>
    pub fn get_activity_stream_engine_native_audit_fields_included(&self) -> &::std::option::Option<bool> {
        &self.activity_stream_engine_native_audit_fields_included
    }
    /// <p>The automation mode of the RDS Custom DB instance: <code>full</code> or <code>all paused</code>. If <code>full</code>, the DB instance automates monitoring and instance recovery. If <code>all paused</code>, the instance pauses automation for the duration set by <code>--resume-full-automation-mode-minutes</code>.</p>
    pub fn automation_mode(mut self, input: crate::types::AutomationMode) -> Self {
        self.automation_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The automation mode of the RDS Custom DB instance: <code>full</code> or <code>all paused</code>. If <code>full</code>, the DB instance automates monitoring and instance recovery. If <code>all paused</code>, the instance pauses automation for the duration set by <code>--resume-full-automation-mode-minutes</code>.</p>
    pub fn set_automation_mode(mut self, input: ::std::option::Option<crate::types::AutomationMode>) -> Self {
        self.automation_mode = input;
        self
    }
    /// <p>The automation mode of the RDS Custom DB instance: <code>full</code> or <code>all paused</code>. If <code>full</code>, the DB instance automates monitoring and instance recovery. If <code>all paused</code>, the instance pauses automation for the duration set by <code>--resume-full-automation-mode-minutes</code>.</p>
    pub fn get_automation_mode(&self) -> &::std::option::Option<crate::types::AutomationMode> {
        &self.automation_mode
    }
    /// <p>The number of minutes to pause the automation. When the time period ends, RDS Custom resumes full automation. The minimum value is 60 (default). The maximum value is 1,440.</p>
    pub fn resume_full_automation_mode_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.resume_full_automation_mode_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of minutes to pause the automation. When the time period ends, RDS Custom resumes full automation. The minimum value is 60 (default). The maximum value is 1,440.</p>
    pub fn set_resume_full_automation_mode_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.resume_full_automation_mode_time = input;
        self
    }
    /// <p>The number of minutes to pause the automation. When the time period ends, RDS Custom resumes full automation. The minimum value is 60 (default). The maximum value is 1,440.</p>
    pub fn get_resume_full_automation_mode_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.resume_full_automation_mode_time
    }
    /// <p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>The profile must exist in your account.</p> </li>
    /// <li> <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p> </li>
    /// <li> <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p> </li>
    /// </ul>
    /// <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn custom_iam_instance_profile(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_iam_instance_profile = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>The profile must exist in your account.</p> </li>
    /// <li> <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p> </li>
    /// <li> <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p> </li>
    /// </ul>
    /// <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn set_custom_iam_instance_profile(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_iam_instance_profile = input;
        self
    }
    /// <p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:</p>
    /// <ul>
    /// <li> <p>The profile must exist in your account.</p> </li>
    /// <li> <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p> </li>
    /// <li> <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p> </li>
    /// </ul>
    /// <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn get_custom_iam_instance_profile(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_iam_instance_profile
    }
    /// <p>The location where automated backups and manual snapshots are stored: Amazon Web Services Outposts or the Amazon Web Services Region.</p>
    pub fn backup_target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_target = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location where automated backups and manual snapshots are stored: Amazon Web Services Outposts or the Amazon Web Services Region.</p>
    pub fn set_backup_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_target = input;
        self
    }
    /// <p>The location where automated backups and manual snapshots are stored: Amazon Web Services Outposts or the Amazon Web Services Region.</p>
    pub fn get_backup_target(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_target
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>Valid Values: <code>IPV4 | DUAL</code> </p>
    pub fn network_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>Valid Values: <code>IPV4 | DUAL</code> </p>
    pub fn set_network_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_type = input;
        self
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>Valid Values: <code>IPV4 | DUAL</code> </p>
    pub fn get_network_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_type
    }
    /// <p>The status of the policy state of the activity stream.</p>
    pub fn activity_stream_policy_status(mut self, input: crate::types::ActivityStreamPolicyStatus) -> Self {
        self.activity_stream_policy_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the policy state of the activity stream.</p>
    pub fn set_activity_stream_policy_status(mut self, input: ::std::option::Option<crate::types::ActivityStreamPolicyStatus>) -> Self {
        self.activity_stream_policy_status = input;
        self
    }
    /// <p>The status of the policy state of the activity stream.</p>
    pub fn get_activity_stream_policy_status(&self) -> &::std::option::Option<crate::types::ActivityStreamPolicyStatus> {
        &self.activity_stream_policy_status
    }
    /// <p>The storage throughput for the DB instance.</p>
    /// <p>This setting applies only to the <code>gp3</code> storage type.</p>
    pub fn storage_throughput(mut self, input: i32) -> Self {
        self.storage_throughput = ::std::option::Option::Some(input);
        self
    }
    /// <p>The storage throughput for the DB instance.</p>
    /// <p>This setting applies only to the <code>gp3</code> storage type.</p>
    pub fn set_storage_throughput(mut self, input: ::std::option::Option<i32>) -> Self {
        self.storage_throughput = input;
        self
    }
    /// <p>The storage throughput for the DB instance.</p>
    /// <p>This setting applies only to the <code>gp3</code> storage type.</p>
    pub fn get_storage_throughput(&self) -> &::std::option::Option<i32> {
        &self.storage_throughput
    }
    /// <p>The Oracle system ID (Oracle SID) for a container database (CDB). The Oracle SID is also the name of the CDB. This setting is only valid for RDS Custom DB instances.</p>
    pub fn db_system_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_system_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Oracle system ID (Oracle SID) for a container database (CDB). The Oracle SID is also the name of the CDB. This setting is only valid for RDS Custom DB instances.</p>
    pub fn set_db_system_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_system_id = input;
        self
    }
    /// <p>The Oracle system ID (Oracle SID) for a container database (CDB). The Oracle SID is also the name of the CDB. This setting is only valid for RDS Custom DB instances.</p>
    pub fn get_db_system_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_system_id
    }
    /// <p>The secret managed by RDS in Amazon Web Services Secrets Manager for the master user password.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn master_user_secret(mut self, input: crate::types::MasterUserSecret) -> Self {
        self.master_user_secret = ::std::option::Option::Some(input);
        self
    }
    /// <p>The secret managed by RDS in Amazon Web Services Secrets Manager for the master user password.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn set_master_user_secret(mut self, input: ::std::option::Option<crate::types::MasterUserSecret>) -> Self {
        self.master_user_secret = input;
        self
    }
    /// <p>The secret managed by RDS in Amazon Web Services Secrets Manager for the master user password.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn get_master_user_secret(&self) -> &::std::option::Option<crate::types::MasterUserSecret> {
        &self.master_user_secret
    }
    /// <p>The details of the DB instance's server certificate.</p>
    pub fn certificate_details(mut self, input: crate::types::CertificateDetails) -> Self {
        self.certificate_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The details of the DB instance's server certificate.</p>
    pub fn set_certificate_details(mut self, input: ::std::option::Option<crate::types::CertificateDetails>) -> Self {
        self.certificate_details = input;
        self
    }
    /// <p>The details of the DB instance's server certificate.</p>
    pub fn get_certificate_details(&self) -> &::std::option::Option<crate::types::CertificateDetails> {
        &self.certificate_details
    }
    /// <p>The identifier of the source DB cluster if this DB instance is a read replica.</p>
    pub fn read_replica_source_db_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.read_replica_source_db_cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the source DB cluster if this DB instance is a read replica.</p>
    pub fn set_read_replica_source_db_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.read_replica_source_db_cluster_identifier = input;
        self
    }
    /// <p>The identifier of the source DB cluster if this DB instance is a read replica.</p>
    pub fn get_read_replica_source_db_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.read_replica_source_db_cluster_identifier
    }
    /// <p>The progress of the storage optimization operation as a percentage.</p>
    pub fn percent_progress(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.percent_progress = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The progress of the storage optimization operation as a percentage.</p>
    pub fn set_percent_progress(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.percent_progress = input;
        self
    }
    /// <p>The progress of the storage optimization operation as a percentage.</p>
    pub fn get_percent_progress(&self) -> &::std::option::Option<::std::string::String> {
        &self.percent_progress
    }
    /// <p>Indicates whether the DB instance has a dedicated log volume (DLV) enabled.</p>
    pub fn dedicated_log_volume(mut self, input: bool) -> Self {
        self.dedicated_log_volume = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the DB instance has a dedicated log volume (DLV) enabled.</p>
    pub fn set_dedicated_log_volume(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dedicated_log_volume = input;
        self
    }
    /// <p>Indicates whether the DB instance has a dedicated log volume (DLV) enabled.</p>
    pub fn get_dedicated_log_volume(&self) -> &::std::option::Option<bool> {
        &self.dedicated_log_volume
    }
    /// <p>Indicates whether an upgrade is recommended for the storage file system configuration on the DB instance. To migrate to the preferred configuration, you can either create a blue/green deployment, or create a read replica from the DB instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.UpgradeFileSystem">Upgrading the storage file system for a DB instance</a>.</p>
    pub fn is_storage_config_upgrade_available(mut self, input: bool) -> Self {
        self.is_storage_config_upgrade_available = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether an upgrade is recommended for the storage file system configuration on the DB instance. To migrate to the preferred configuration, you can either create a blue/green deployment, or create a read replica from the DB instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.UpgradeFileSystem">Upgrading the storage file system for a DB instance</a>.</p>
    pub fn set_is_storage_config_upgrade_available(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_storage_config_upgrade_available = input;
        self
    }
    /// <p>Indicates whether an upgrade is recommended for the storage file system configuration on the DB instance. To migrate to the preferred configuration, you can either create a blue/green deployment, or create a read replica from the DB instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.UpgradeFileSystem">Upgrading the storage file system for a DB instance</a>.</p>
    pub fn get_is_storage_config_upgrade_available(&self) -> &::std::option::Option<bool> {
        &self.is_storage_config_upgrade_available
    }
    /// Consumes the builder and constructs a [`DbInstance`](crate::types::DbInstance).
    pub fn build(self) -> crate::types::DbInstance {
        crate::types::DbInstance {
            db_instance_identifier: self.db_instance_identifier,
            db_instance_class: self.db_instance_class,
            engine: self.engine,
            db_instance_status: self.db_instance_status,
            automatic_restart_time: self.automatic_restart_time,
            master_username: self.master_username,
            db_name: self.db_name,
            endpoint: self.endpoint,
            allocated_storage: self.allocated_storage,
            instance_create_time: self.instance_create_time,
            preferred_backup_window: self.preferred_backup_window,
            backup_retention_period: self.backup_retention_period,
            db_security_groups: self.db_security_groups,
            vpc_security_groups: self.vpc_security_groups,
            db_parameter_groups: self.db_parameter_groups,
            availability_zone: self.availability_zone,
            db_subnet_group: self.db_subnet_group,
            preferred_maintenance_window: self.preferred_maintenance_window,
            pending_modified_values: self.pending_modified_values,
            latest_restorable_time: self.latest_restorable_time,
            multi_az: self.multi_az,
            engine_version: self.engine_version,
            auto_minor_version_upgrade: self.auto_minor_version_upgrade,
            read_replica_source_db_instance_identifier: self.read_replica_source_db_instance_identifier,
            read_replica_db_instance_identifiers: self.read_replica_db_instance_identifiers,
            read_replica_db_cluster_identifiers: self.read_replica_db_cluster_identifiers,
            replica_mode: self.replica_mode,
            license_model: self.license_model,
            iops: self.iops,
            option_group_memberships: self.option_group_memberships,
            character_set_name: self.character_set_name,
            nchar_character_set_name: self.nchar_character_set_name,
            secondary_availability_zone: self.secondary_availability_zone,
            publicly_accessible: self.publicly_accessible,
            status_infos: self.status_infos,
            storage_type: self.storage_type,
            tde_credential_arn: self.tde_credential_arn,
            db_instance_port: self.db_instance_port,
            db_cluster_identifier: self.db_cluster_identifier,
            storage_encrypted: self.storage_encrypted,
            kms_key_id: self.kms_key_id,
            dbi_resource_id: self.dbi_resource_id,
            ca_certificate_identifier: self.ca_certificate_identifier,
            domain_memberships: self.domain_memberships,
            copy_tags_to_snapshot: self.copy_tags_to_snapshot,
            monitoring_interval: self.monitoring_interval,
            enhanced_monitoring_resource_arn: self.enhanced_monitoring_resource_arn,
            monitoring_role_arn: self.monitoring_role_arn,
            promotion_tier: self.promotion_tier,
            db_instance_arn: self.db_instance_arn,
            timezone: self.timezone,
            iam_database_authentication_enabled: self.iam_database_authentication_enabled,
            performance_insights_enabled: self.performance_insights_enabled,
            performance_insights_kms_key_id: self.performance_insights_kms_key_id,
            performance_insights_retention_period: self.performance_insights_retention_period,
            enabled_cloudwatch_logs_exports: self.enabled_cloudwatch_logs_exports,
            processor_features: self.processor_features,
            deletion_protection: self.deletion_protection,
            associated_roles: self.associated_roles,
            listener_endpoint: self.listener_endpoint,
            max_allocated_storage: self.max_allocated_storage,
            tag_list: self.tag_list,
            db_instance_automated_backups_replications: self.db_instance_automated_backups_replications,
            customer_owned_ip_enabled: self.customer_owned_ip_enabled,
            aws_backup_recovery_point_arn: self.aws_backup_recovery_point_arn,
            activity_stream_status: self.activity_stream_status,
            activity_stream_kms_key_id: self.activity_stream_kms_key_id,
            activity_stream_kinesis_stream_name: self.activity_stream_kinesis_stream_name,
            activity_stream_mode: self.activity_stream_mode,
            activity_stream_engine_native_audit_fields_included: self.activity_stream_engine_native_audit_fields_included,
            automation_mode: self.automation_mode,
            resume_full_automation_mode_time: self.resume_full_automation_mode_time,
            custom_iam_instance_profile: self.custom_iam_instance_profile,
            backup_target: self.backup_target,
            network_type: self.network_type,
            activity_stream_policy_status: self.activity_stream_policy_status,
            storage_throughput: self.storage_throughput,
            db_system_id: self.db_system_id,
            master_user_secret: self.master_user_secret,
            certificate_details: self.certificate_details,
            read_replica_source_db_cluster_identifier: self.read_replica_source_db_cluster_identifier,
            percent_progress: self.percent_progress,
            dedicated_log_volume: self.dedicated_log_volume,
            is_storage_config_upgrade_available: self.is_storage_config_upgrade_available,
        }
    }
}
