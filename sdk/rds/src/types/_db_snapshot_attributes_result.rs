// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the results of a successful call to the <code>DescribeDBSnapshotAttributes</code> API action.</p>
/// <p>Manual DB snapshot attributes are used to authorize other Amazon Web Services accounts to copy or restore a manual DB snapshot. For more information, see the <code>ModifyDBSnapshotAttribute</code> API action.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DbSnapshotAttributesResult {
    /// <p>The identifier of the manual DB snapshot that the attributes apply to.</p>
    pub db_snapshot_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The list of attributes and values for the manual DB snapshot.</p>
    pub db_snapshot_attributes: ::std::option::Option<::std::vec::Vec<crate::types::DbSnapshotAttribute>>,
}
impl DbSnapshotAttributesResult {
    /// <p>The identifier of the manual DB snapshot that the attributes apply to.</p>
    pub fn db_snapshot_identifier(&self) -> ::std::option::Option<&str> {
        self.db_snapshot_identifier.as_deref()
    }
    /// <p>The list of attributes and values for the manual DB snapshot.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.db_snapshot_attributes.is_none()`.
    pub fn db_snapshot_attributes(&self) -> &[crate::types::DbSnapshotAttribute] {
        self.db_snapshot_attributes.as_deref().unwrap_or_default()
    }
}
impl DbSnapshotAttributesResult {
    /// Creates a new builder-style object to manufacture [`DbSnapshotAttributesResult`](crate::types::DbSnapshotAttributesResult).
    pub fn builder() -> crate::types::builders::DbSnapshotAttributesResultBuilder {
        crate::types::builders::DbSnapshotAttributesResultBuilder::default()
    }
}

/// A builder for [`DbSnapshotAttributesResult`](crate::types::DbSnapshotAttributesResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DbSnapshotAttributesResultBuilder {
    pub(crate) db_snapshot_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) db_snapshot_attributes: ::std::option::Option<::std::vec::Vec<crate::types::DbSnapshotAttribute>>,
}
impl DbSnapshotAttributesResultBuilder {
    /// <p>The identifier of the manual DB snapshot that the attributes apply to.</p>
    pub fn db_snapshot_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_snapshot_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the manual DB snapshot that the attributes apply to.</p>
    pub fn set_db_snapshot_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_snapshot_identifier = input;
        self
    }
    /// <p>The identifier of the manual DB snapshot that the attributes apply to.</p>
    pub fn get_db_snapshot_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_snapshot_identifier
    }
    /// Appends an item to `db_snapshot_attributes`.
    ///
    /// To override the contents of this collection use [`set_db_snapshot_attributes`](Self::set_db_snapshot_attributes).
    ///
    /// <p>The list of attributes and values for the manual DB snapshot.</p>
    pub fn db_snapshot_attributes(mut self, input: crate::types::DbSnapshotAttribute) -> Self {
        let mut v = self.db_snapshot_attributes.unwrap_or_default();
        v.push(input);
        self.db_snapshot_attributes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of attributes and values for the manual DB snapshot.</p>
    pub fn set_db_snapshot_attributes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DbSnapshotAttribute>>) -> Self {
        self.db_snapshot_attributes = input;
        self
    }
    /// <p>The list of attributes and values for the manual DB snapshot.</p>
    pub fn get_db_snapshot_attributes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DbSnapshotAttribute>> {
        &self.db_snapshot_attributes
    }
    /// Consumes the builder and constructs a [`DbSnapshotAttributesResult`](crate::types::DbSnapshotAttributesResult).
    pub fn build(self) -> crate::types::DbSnapshotAttributesResult {
        crate::types::DbSnapshotAttributesResult {
            db_snapshot_identifier: self.db_snapshot_identifier,
            db_snapshot_attributes: self.db_snapshot_attributes,
        }
    }
}
