// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The version for an option. Option group option versions are returned by the <code>DescribeOptionGroupOptions</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OptionVersion {
    /// <p>The version of the option.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
    /// <p>True if the version is the default version of the option, and otherwise false.</p>
    #[doc(hidden)]
    pub is_default: bool,
}
impl OptionVersion {
    /// <p>The version of the option.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>True if the version is the default version of the option, and otherwise false.</p>
    pub fn is_default(&self) -> bool {
        self.is_default
    }
}
impl OptionVersion {
    /// Creates a new builder-style object to manufacture [`OptionVersion`](crate::types::OptionVersion).
    pub fn builder() -> crate::types::builders::OptionVersionBuilder {
        crate::types::builders::OptionVersionBuilder::default()
    }
}

/// A builder for [`OptionVersion`](crate::types::OptionVersion).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OptionVersionBuilder {
    pub(crate) version: std::option::Option<std::string::String>,
    pub(crate) is_default: std::option::Option<bool>,
}
impl OptionVersionBuilder {
    /// <p>The version of the option.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>The version of the option.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>True if the version is the default version of the option, and otherwise false.</p>
    pub fn is_default(mut self, input: bool) -> Self {
        self.is_default = Some(input);
        self
    }
    /// <p>True if the version is the default version of the option, and otherwise false.</p>
    pub fn set_is_default(mut self, input: std::option::Option<bool>) -> Self {
        self.is_default = input;
        self
    }
    /// Consumes the builder and constructs a [`OptionVersion`](crate::types::OptionVersion).
    pub fn build(self) -> crate::types::OptionVersion {
        crate::types::OptionVersion {
            version: self.version,
            is_default: self.is_default.unwrap_or_default(),
        }
    }
}
