// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This data type is used as a response element in the <code>ModifyDBInstance</code> operation and contains changes that will be applied during the next maintenance window.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PendingModifiedValues {
    /// <p>The name of the compute and memory capacity class for the DB instance.</p>
    #[doc(hidden)]
    pub db_instance_class: std::option::Option<std::string::String>,
    /// <p>The allocated storage size for the DB instance specified in gibibytes (GiB).</p>
    #[doc(hidden)]
    pub allocated_storage: std::option::Option<i32>,
    /// <p>The master credentials for the DB instance.</p>
    #[doc(hidden)]
    pub master_user_password: std::option::Option<std::string::String>,
    /// <p>The port for the DB instance.</p>
    #[doc(hidden)]
    pub port: std::option::Option<i32>,
    /// <p>The number of days for which automated backups are retained.</p>
    #[doc(hidden)]
    pub backup_retention_period: std::option::Option<i32>,
    /// <p>A value that indicates that the Single-AZ DB instance will change to a Multi-AZ deployment.</p>
    #[doc(hidden)]
    pub multi_az: std::option::Option<bool>,
    /// <p>The database engine version.</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The license model for the DB instance.</p>
    /// <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
    #[doc(hidden)]
    pub license_model: std::option::Option<std::string::String>,
    /// <p>The Provisioned IOPS value for the DB instance.</p>
    #[doc(hidden)]
    pub iops: std::option::Option<i32>,
    /// <p>The database identifier for the DB instance.</p>
    #[doc(hidden)]
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>The storage type of the DB instance.</p>
    #[doc(hidden)]
    pub storage_type: std::option::Option<std::string::String>,
    /// <p>The identifier of the CA certificate for the DB instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    #[doc(hidden)]
    pub ca_certificate_identifier: std::option::Option<std::string::String>,
    /// <p>The DB subnet group for the DB instance.</p>
    #[doc(hidden)]
    pub db_subnet_group_name: std::option::Option<std::string::String>,
    /// <p>A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated.</p>
    #[doc(hidden)]
    pub pending_cloudwatch_logs_exports:
        std::option::Option<crate::types::PendingCloudwatchLogsExports>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    #[doc(hidden)]
    pub processor_features: std::option::Option<std::vec::Vec<crate::types::ProcessorFeature>>,
    /// <p>Whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
    #[doc(hidden)]
    pub iam_database_authentication_enabled: std::option::Option<bool>,
    /// <p>The automation mode of the RDS Custom DB instance: <code>full</code> or <code>all-paused</code>. If <code>full</code>, the DB instance automates monitoring and instance recovery. If <code>all-paused</code>, the instance pauses automation for the duration set by <code>--resume-full-automation-mode-minutes</code>.</p>
    #[doc(hidden)]
    pub automation_mode: std::option::Option<crate::types::AutomationMode>,
    /// <p>The number of minutes to pause the automation. When the time period ends, RDS Custom resumes full automation. The minimum value is 60 (default). The maximum value is 1,440.</p>
    #[doc(hidden)]
    pub resume_full_automation_mode_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The storage throughput of the DB instance.</p>
    #[doc(hidden)]
    pub storage_throughput: std::option::Option<i32>,
}
impl PendingModifiedValues {
    /// <p>The name of the compute and memory capacity class for the DB instance.</p>
    pub fn db_instance_class(&self) -> std::option::Option<&str> {
        self.db_instance_class.as_deref()
    }
    /// <p>The allocated storage size for the DB instance specified in gibibytes (GiB).</p>
    pub fn allocated_storage(&self) -> std::option::Option<i32> {
        self.allocated_storage
    }
    /// <p>The master credentials for the DB instance.</p>
    pub fn master_user_password(&self) -> std::option::Option<&str> {
        self.master_user_password.as_deref()
    }
    /// <p>The port for the DB instance.</p>
    pub fn port(&self) -> std::option::Option<i32> {
        self.port
    }
    /// <p>The number of days for which automated backups are retained.</p>
    pub fn backup_retention_period(&self) -> std::option::Option<i32> {
        self.backup_retention_period
    }
    /// <p>A value that indicates that the Single-AZ DB instance will change to a Multi-AZ deployment.</p>
    pub fn multi_az(&self) -> std::option::Option<bool> {
        self.multi_az
    }
    /// <p>The database engine version.</p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The license model for the DB instance.</p>
    /// <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
    pub fn license_model(&self) -> std::option::Option<&str> {
        self.license_model.as_deref()
    }
    /// <p>The Provisioned IOPS value for the DB instance.</p>
    pub fn iops(&self) -> std::option::Option<i32> {
        self.iops
    }
    /// <p>The database identifier for the DB instance.</p>
    pub fn db_instance_identifier(&self) -> std::option::Option<&str> {
        self.db_instance_identifier.as_deref()
    }
    /// <p>The storage type of the DB instance.</p>
    pub fn storage_type(&self) -> std::option::Option<&str> {
        self.storage_type.as_deref()
    }
    /// <p>The identifier of the CA certificate for the DB instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn ca_certificate_identifier(&self) -> std::option::Option<&str> {
        self.ca_certificate_identifier.as_deref()
    }
    /// <p>The DB subnet group for the DB instance.</p>
    pub fn db_subnet_group_name(&self) -> std::option::Option<&str> {
        self.db_subnet_group_name.as_deref()
    }
    /// <p>A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated.</p>
    pub fn pending_cloudwatch_logs_exports(
        &self,
    ) -> std::option::Option<&crate::types::PendingCloudwatchLogsExports> {
        self.pending_cloudwatch_logs_exports.as_ref()
    }
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub fn processor_features(&self) -> std::option::Option<&[crate::types::ProcessorFeature]> {
        self.processor_features.as_deref()
    }
    /// <p>Whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
    pub fn iam_database_authentication_enabled(&self) -> std::option::Option<bool> {
        self.iam_database_authentication_enabled
    }
    /// <p>The automation mode of the RDS Custom DB instance: <code>full</code> or <code>all-paused</code>. If <code>full</code>, the DB instance automates monitoring and instance recovery. If <code>all-paused</code>, the instance pauses automation for the duration set by <code>--resume-full-automation-mode-minutes</code>.</p>
    pub fn automation_mode(&self) -> std::option::Option<&crate::types::AutomationMode> {
        self.automation_mode.as_ref()
    }
    /// <p>The number of minutes to pause the automation. When the time period ends, RDS Custom resumes full automation. The minimum value is 60 (default). The maximum value is 1,440.</p>
    pub fn resume_full_automation_mode_time(
        &self,
    ) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.resume_full_automation_mode_time.as_ref()
    }
    /// <p>The storage throughput of the DB instance.</p>
    pub fn storage_throughput(&self) -> std::option::Option<i32> {
        self.storage_throughput
    }
}
impl PendingModifiedValues {
    /// Creates a new builder-style object to manufacture [`PendingModifiedValues`](crate::types::PendingModifiedValues).
    pub fn builder() -> crate::types::builders::PendingModifiedValuesBuilder {
        crate::types::builders::PendingModifiedValuesBuilder::default()
    }
}

/// A builder for [`PendingModifiedValues`](crate::types::PendingModifiedValues).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PendingModifiedValuesBuilder {
    pub(crate) db_instance_class: std::option::Option<std::string::String>,
    pub(crate) allocated_storage: std::option::Option<i32>,
    pub(crate) master_user_password: std::option::Option<std::string::String>,
    pub(crate) port: std::option::Option<i32>,
    pub(crate) backup_retention_period: std::option::Option<i32>,
    pub(crate) multi_az: std::option::Option<bool>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) license_model: std::option::Option<std::string::String>,
    pub(crate) iops: std::option::Option<i32>,
    pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
    pub(crate) storage_type: std::option::Option<std::string::String>,
    pub(crate) ca_certificate_identifier: std::option::Option<std::string::String>,
    pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
    pub(crate) pending_cloudwatch_logs_exports:
        std::option::Option<crate::types::PendingCloudwatchLogsExports>,
    pub(crate) processor_features:
        std::option::Option<std::vec::Vec<crate::types::ProcessorFeature>>,
    pub(crate) iam_database_authentication_enabled: std::option::Option<bool>,
    pub(crate) automation_mode: std::option::Option<crate::types::AutomationMode>,
    pub(crate) resume_full_automation_mode_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) storage_throughput: std::option::Option<i32>,
}
impl PendingModifiedValuesBuilder {
    /// <p>The name of the compute and memory capacity class for the DB instance.</p>
    pub fn db_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_instance_class = Some(input.into());
        self
    }
    /// <p>The name of the compute and memory capacity class for the DB instance.</p>
    pub fn set_db_instance_class(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_instance_class = input;
        self
    }
    /// <p>The allocated storage size for the DB instance specified in gibibytes (GiB).</p>
    pub fn allocated_storage(mut self, input: i32) -> Self {
        self.allocated_storage = Some(input);
        self
    }
    /// <p>The allocated storage size for the DB instance specified in gibibytes (GiB).</p>
    pub fn set_allocated_storage(mut self, input: std::option::Option<i32>) -> Self {
        self.allocated_storage = input;
        self
    }
    /// <p>The master credentials for the DB instance.</p>
    pub fn master_user_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.master_user_password = Some(input.into());
        self
    }
    /// <p>The master credentials for the DB instance.</p>
    pub fn set_master_user_password(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.master_user_password = input;
        self
    }
    /// <p>The port for the DB instance.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>The port for the DB instance.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The number of days for which automated backups are retained.</p>
    pub fn backup_retention_period(mut self, input: i32) -> Self {
        self.backup_retention_period = Some(input);
        self
    }
    /// <p>The number of days for which automated backups are retained.</p>
    pub fn set_backup_retention_period(mut self, input: std::option::Option<i32>) -> Self {
        self.backup_retention_period = input;
        self
    }
    /// <p>A value that indicates that the Single-AZ DB instance will change to a Multi-AZ deployment.</p>
    pub fn multi_az(mut self, input: bool) -> Self {
        self.multi_az = Some(input);
        self
    }
    /// <p>A value that indicates that the Single-AZ DB instance will change to a Multi-AZ deployment.</p>
    pub fn set_multi_az(mut self, input: std::option::Option<bool>) -> Self {
        self.multi_az = input;
        self
    }
    /// <p>The database engine version.</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>The database engine version.</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The license model for the DB instance.</p>
    /// <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
    pub fn license_model(mut self, input: impl Into<std::string::String>) -> Self {
        self.license_model = Some(input.into());
        self
    }
    /// <p>The license model for the DB instance.</p>
    /// <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p>
    pub fn set_license_model(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.license_model = input;
        self
    }
    /// <p>The Provisioned IOPS value for the DB instance.</p>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = Some(input);
        self
    }
    /// <p>The Provisioned IOPS value for the DB instance.</p>
    pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// <p>The database identifier for the DB instance.</p>
    pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_instance_identifier = Some(input.into());
        self
    }
    /// <p>The database identifier for the DB instance.</p>
    pub fn set_db_instance_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_instance_identifier = input;
        self
    }
    /// <p>The storage type of the DB instance.</p>
    pub fn storage_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.storage_type = Some(input.into());
        self
    }
    /// <p>The storage type of the DB instance.</p>
    pub fn set_storage_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.storage_type = input;
        self
    }
    /// <p>The identifier of the CA certificate for the DB instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn ca_certificate_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.ca_certificate_identifier = Some(input.into());
        self
    }
    /// <p>The identifier of the CA certificate for the DB instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_ca_certificate_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.ca_certificate_identifier = input;
        self
    }
    /// <p>The DB subnet group for the DB instance.</p>
    pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_subnet_group_name = Some(input.into());
        self
    }
    /// <p>The DB subnet group for the DB instance.</p>
    pub fn set_db_subnet_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_subnet_group_name = input;
        self
    }
    /// <p>A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated.</p>
    pub fn pending_cloudwatch_logs_exports(
        mut self,
        input: crate::types::PendingCloudwatchLogsExports,
    ) -> Self {
        self.pending_cloudwatch_logs_exports = Some(input);
        self
    }
    /// <p>A list of the log types whose configuration is still pending. In other words, these log types are in the process of being activated or deactivated.</p>
    pub fn set_pending_cloudwatch_logs_exports(
        mut self,
        input: std::option::Option<crate::types::PendingCloudwatchLogsExports>,
    ) -> Self {
        self.pending_cloudwatch_logs_exports = input;
        self
    }
    /// Appends an item to `processor_features`.
    ///
    /// To override the contents of this collection use [`set_processor_features`](Self::set_processor_features).
    ///
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub fn processor_features(mut self, input: crate::types::ProcessorFeature) -> Self {
        let mut v = self.processor_features.unwrap_or_default();
        v.push(input);
        self.processor_features = Some(v);
        self
    }
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub fn set_processor_features(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ProcessorFeature>>,
    ) -> Self {
        self.processor_features = input;
        self
    }
    /// <p>Whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
    pub fn iam_database_authentication_enabled(mut self, input: bool) -> Self {
        self.iam_database_authentication_enabled = Some(input);
        self
    }
    /// <p>Whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
    pub fn set_iam_database_authentication_enabled(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.iam_database_authentication_enabled = input;
        self
    }
    /// <p>The automation mode of the RDS Custom DB instance: <code>full</code> or <code>all-paused</code>. If <code>full</code>, the DB instance automates monitoring and instance recovery. If <code>all-paused</code>, the instance pauses automation for the duration set by <code>--resume-full-automation-mode-minutes</code>.</p>
    pub fn automation_mode(mut self, input: crate::types::AutomationMode) -> Self {
        self.automation_mode = Some(input);
        self
    }
    /// <p>The automation mode of the RDS Custom DB instance: <code>full</code> or <code>all-paused</code>. If <code>full</code>, the DB instance automates monitoring and instance recovery. If <code>all-paused</code>, the instance pauses automation for the duration set by <code>--resume-full-automation-mode-minutes</code>.</p>
    pub fn set_automation_mode(
        mut self,
        input: std::option::Option<crate::types::AutomationMode>,
    ) -> Self {
        self.automation_mode = input;
        self
    }
    /// <p>The number of minutes to pause the automation. When the time period ends, RDS Custom resumes full automation. The minimum value is 60 (default). The maximum value is 1,440.</p>
    pub fn resume_full_automation_mode_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.resume_full_automation_mode_time = Some(input);
        self
    }
    /// <p>The number of minutes to pause the automation. When the time period ends, RDS Custom resumes full automation. The minimum value is 60 (default). The maximum value is 1,440.</p>
    pub fn set_resume_full_automation_mode_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.resume_full_automation_mode_time = input;
        self
    }
    /// <p>The storage throughput of the DB instance.</p>
    pub fn storage_throughput(mut self, input: i32) -> Self {
        self.storage_throughput = Some(input);
        self
    }
    /// <p>The storage throughput of the DB instance.</p>
    pub fn set_storage_throughput(mut self, input: std::option::Option<i32>) -> Self {
        self.storage_throughput = input;
        self
    }
    /// Consumes the builder and constructs a [`PendingModifiedValues`](crate::types::PendingModifiedValues).
    pub fn build(self) -> crate::types::PendingModifiedValues {
        crate::types::PendingModifiedValues {
            db_instance_class: self.db_instance_class,
            allocated_storage: self.allocated_storage,
            master_user_password: self.master_user_password,
            port: self.port,
            backup_retention_period: self.backup_retention_period,
            multi_az: self.multi_az,
            engine_version: self.engine_version,
            license_model: self.license_model,
            iops: self.iops,
            db_instance_identifier: self.db_instance_identifier,
            storage_type: self.storage_type,
            ca_certificate_identifier: self.ca_certificate_identifier,
            db_subnet_group_name: self.db_subnet_group_name,
            pending_cloudwatch_logs_exports: self.pending_cloudwatch_logs_exports,
            processor_features: self.processor_features,
            iam_database_authentication_enabled: self.iam_database_authentication_enabled,
            automation_mode: self.automation_mode,
            resume_full_automation_mode_time: self.resume_full_automation_mode_time,
            storage_throughput: self.storage_throughput,
        }
    }
}
