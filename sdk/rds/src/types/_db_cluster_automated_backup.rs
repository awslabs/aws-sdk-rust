// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An automated backup of a DB cluster. It consists of system backups, transaction logs, and the database cluster properties that existed at the time you deleted the source cluster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DbClusterAutomatedBackup {
    /// <p>The name of the database engine for this automated backup.</p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The VPC ID associated with the DB cluster.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the automated backups.</p>
    pub db_cluster_automated_backups_arn: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the source DB cluster, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub db_cluster_identifier: ::std::option::Option<::std::string::String>,
    /// <p>Earliest and latest time an instance can be restored to:</p>
    pub restore_window: ::std::option::Option<crate::types::RestoreWindow>,
    /// <p>The master user name of the automated backup.</p>
    pub master_username: ::std::option::Option<::std::string::String>,
    /// <p>The resource ID for the source DB cluster, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub db_cluster_resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region associated with the automated backup.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The license model information for this DB cluster automated backup.</p>
    pub license_model: ::std::option::Option<::std::string::String>,
    /// <p>A list of status information for an automated backup:</p>
    /// <ul>
    /// <li> <p> <code>retained</code> - Automated backups for deleted clusters.</p> </li>
    /// </ul>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
    pub iam_database_authentication_enabled: ::std::option::Option<bool>,
    /// <p>The time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
    pub cluster_create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Indicates whether the source DB cluster is encrypted.</p>
    pub storage_encrypted: ::std::option::Option<bool>,
    /// <p>For all database engines except Amazon Aurora, <code>AllocatedStorage</code> specifies the allocated storage size in gibibytes (GiB). For Aurora, <code>AllocatedStorage</code> always returns 1, because Aurora DB cluster storage size isn't fixed, but instead automatically adjusts as needed.</p>
    pub allocated_storage: ::std::option::Option<i32>,
    /// <p>The version of the database engine for the automated backup.</p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the source DB cluster.</p>
    pub db_cluster_arn: ::std::option::Option<::std::string::String>,
    /// <p>The retention period for the automated backups.</p>
    pub backup_retention_period: ::std::option::Option<i32>,
    /// <p>The engine mode of the database engine for the automated backup.</p>
    pub engine_mode: ::std::option::Option<::std::string::String>,
    /// <p>The Availability Zones where instances in the DB cluster can be created. For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>.</p>
    pub availability_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The port number that the automated backup used for connections.</p>
    /// <p>Default: Inherits from the source DB cluster</p>
    /// <p>Valid Values: <code>1150-65535</code> </p>
    pub port: ::std::option::Option<i32>,
    /// <p>The Amazon Web Services KMS key ID for an automated backup.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The storage type associated with the DB cluster.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub storage_type: ::std::option::Option<::std::string::String>,
    /// <p>The IOPS (I/O operations per second) value for the automated backup.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub iops: ::std::option::Option<i32>,
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub aws_backup_recovery_point_arn: ::std::option::Option<::std::string::String>,
}
impl DbClusterAutomatedBackup {
    /// <p>The name of the database engine for this automated backup.</p>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The VPC ID associated with the DB cluster.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the automated backups.</p>
    pub fn db_cluster_automated_backups_arn(&self) -> ::std::option::Option<&str> {
        self.db_cluster_automated_backups_arn.as_deref()
    }
    /// <p>The identifier for the source DB cluster, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub fn db_cluster_identifier(&self) -> ::std::option::Option<&str> {
        self.db_cluster_identifier.as_deref()
    }
    /// <p>Earliest and latest time an instance can be restored to:</p>
    pub fn restore_window(&self) -> ::std::option::Option<&crate::types::RestoreWindow> {
        self.restore_window.as_ref()
    }
    /// <p>The master user name of the automated backup.</p>
    pub fn master_username(&self) -> ::std::option::Option<&str> {
        self.master_username.as_deref()
    }
    /// <p>The resource ID for the source DB cluster, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub fn db_cluster_resource_id(&self) -> ::std::option::Option<&str> {
        self.db_cluster_resource_id.as_deref()
    }
    /// <p>The Amazon Web Services Region associated with the automated backup.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The license model information for this DB cluster automated backup.</p>
    pub fn license_model(&self) -> ::std::option::Option<&str> {
        self.license_model.as_deref()
    }
    /// <p>A list of status information for an automated backup:</p>
    /// <ul>
    /// <li> <p> <code>retained</code> - Automated backups for deleted clusters.</p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
    pub fn iam_database_authentication_enabled(&self) -> ::std::option::Option<bool> {
        self.iam_database_authentication_enabled
    }
    /// <p>The time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
    pub fn cluster_create_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.cluster_create_time.as_ref()
    }
    /// <p>Indicates whether the source DB cluster is encrypted.</p>
    pub fn storage_encrypted(&self) -> ::std::option::Option<bool> {
        self.storage_encrypted
    }
    /// <p>For all database engines except Amazon Aurora, <code>AllocatedStorage</code> specifies the allocated storage size in gibibytes (GiB). For Aurora, <code>AllocatedStorage</code> always returns 1, because Aurora DB cluster storage size isn't fixed, but instead automatically adjusts as needed.</p>
    pub fn allocated_storage(&self) -> ::std::option::Option<i32> {
        self.allocated_storage
    }
    /// <p>The version of the database engine for the automated backup.</p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the source DB cluster.</p>
    pub fn db_cluster_arn(&self) -> ::std::option::Option<&str> {
        self.db_cluster_arn.as_deref()
    }
    /// <p>The retention period for the automated backups.</p>
    pub fn backup_retention_period(&self) -> ::std::option::Option<i32> {
        self.backup_retention_period
    }
    /// <p>The engine mode of the database engine for the automated backup.</p>
    pub fn engine_mode(&self) -> ::std::option::Option<&str> {
        self.engine_mode.as_deref()
    }
    /// <p>The Availability Zones where instances in the DB cluster can be created. For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.availability_zones.is_none()`.
    pub fn availability_zones(&self) -> &[::std::string::String] {
        self.availability_zones.as_deref().unwrap_or_default()
    }
    /// <p>The port number that the automated backup used for connections.</p>
    /// <p>Default: Inherits from the source DB cluster</p>
    /// <p>Valid Values: <code>1150-65535</code> </p>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// <p>The Amazon Web Services KMS key ID for an automated backup.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The storage type associated with the DB cluster.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn storage_type(&self) -> ::std::option::Option<&str> {
        self.storage_type.as_deref()
    }
    /// <p>The IOPS (I/O operations per second) value for the automated backup.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn iops(&self) -> ::std::option::Option<i32> {
        self.iops
    }
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub fn aws_backup_recovery_point_arn(&self) -> ::std::option::Option<&str> {
        self.aws_backup_recovery_point_arn.as_deref()
    }
}
impl DbClusterAutomatedBackup {
    /// Creates a new builder-style object to manufacture [`DbClusterAutomatedBackup`](crate::types::DbClusterAutomatedBackup).
    pub fn builder() -> crate::types::builders::DbClusterAutomatedBackupBuilder {
        crate::types::builders::DbClusterAutomatedBackupBuilder::default()
    }
}

/// A builder for [`DbClusterAutomatedBackup`](crate::types::DbClusterAutomatedBackup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DbClusterAutomatedBackupBuilder {
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) db_cluster_automated_backups_arn: ::std::option::Option<::std::string::String>,
    pub(crate) db_cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) restore_window: ::std::option::Option<crate::types::RestoreWindow>,
    pub(crate) master_username: ::std::option::Option<::std::string::String>,
    pub(crate) db_cluster_resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) license_model: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) iam_database_authentication_enabled: ::std::option::Option<bool>,
    pub(crate) cluster_create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) storage_encrypted: ::std::option::Option<bool>,
    pub(crate) allocated_storage: ::std::option::Option<i32>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) db_cluster_arn: ::std::option::Option<::std::string::String>,
    pub(crate) backup_retention_period: ::std::option::Option<i32>,
    pub(crate) engine_mode: ::std::option::Option<::std::string::String>,
    pub(crate) availability_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) storage_type: ::std::option::Option<::std::string::String>,
    pub(crate) iops: ::std::option::Option<i32>,
    pub(crate) aws_backup_recovery_point_arn: ::std::option::Option<::std::string::String>,
}
impl DbClusterAutomatedBackupBuilder {
    /// <p>The name of the database engine for this automated backup.</p>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database engine for this automated backup.</p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The name of the database engine for this automated backup.</p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The VPC ID associated with the DB cluster.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VPC ID associated with the DB cluster.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The VPC ID associated with the DB cluster.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The Amazon Resource Name (ARN) for the automated backups.</p>
    pub fn db_cluster_automated_backups_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_automated_backups_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the automated backups.</p>
    pub fn set_db_cluster_automated_backups_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_automated_backups_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the automated backups.</p>
    pub fn get_db_cluster_automated_backups_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_automated_backups_arn
    }
    /// <p>The identifier for the source DB cluster, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub fn db_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the source DB cluster, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub fn set_db_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_identifier = input;
        self
    }
    /// <p>The identifier for the source DB cluster, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub fn get_db_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_identifier
    }
    /// <p>Earliest and latest time an instance can be restored to:</p>
    pub fn restore_window(mut self, input: crate::types::RestoreWindow) -> Self {
        self.restore_window = ::std::option::Option::Some(input);
        self
    }
    /// <p>Earliest and latest time an instance can be restored to:</p>
    pub fn set_restore_window(mut self, input: ::std::option::Option<crate::types::RestoreWindow>) -> Self {
        self.restore_window = input;
        self
    }
    /// <p>Earliest and latest time an instance can be restored to:</p>
    pub fn get_restore_window(&self) -> &::std::option::Option<crate::types::RestoreWindow> {
        &self.restore_window
    }
    /// <p>The master user name of the automated backup.</p>
    pub fn master_username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.master_username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The master user name of the automated backup.</p>
    pub fn set_master_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.master_username = input;
        self
    }
    /// <p>The master user name of the automated backup.</p>
    pub fn get_master_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.master_username
    }
    /// <p>The resource ID for the source DB cluster, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub fn db_cluster_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource ID for the source DB cluster, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub fn set_db_cluster_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_resource_id = input;
        self
    }
    /// <p>The resource ID for the source DB cluster, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub fn get_db_cluster_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_resource_id
    }
    /// <p>The Amazon Web Services Region associated with the automated backup.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region associated with the automated backup.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region associated with the automated backup.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The license model information for this DB cluster automated backup.</p>
    pub fn license_model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.license_model = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The license model information for this DB cluster automated backup.</p>
    pub fn set_license_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.license_model = input;
        self
    }
    /// <p>The license model information for this DB cluster automated backup.</p>
    pub fn get_license_model(&self) -> &::std::option::Option<::std::string::String> {
        &self.license_model
    }
    /// <p>A list of status information for an automated backup:</p>
    /// <ul>
    /// <li> <p> <code>retained</code> - Automated backups for deleted clusters.</p> </li>
    /// </ul>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A list of status information for an automated backup:</p>
    /// <ul>
    /// <li> <p> <code>retained</code> - Automated backups for deleted clusters.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>A list of status information for an automated backup:</p>
    /// <ul>
    /// <li> <p> <code>retained</code> - Automated backups for deleted clusters.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
    pub fn iam_database_authentication_enabled(mut self, input: bool) -> Self {
        self.iam_database_authentication_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
    pub fn set_iam_database_authentication_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.iam_database_authentication_enabled = input;
        self
    }
    /// <p>Indicates whether mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
    pub fn get_iam_database_authentication_enabled(&self) -> &::std::option::Option<bool> {
        &self.iam_database_authentication_enabled
    }
    /// <p>The time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
    pub fn cluster_create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.cluster_create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
    pub fn set_cluster_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.cluster_create_time = input;
        self
    }
    /// <p>The time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
    pub fn get_cluster_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.cluster_create_time
    }
    /// <p>Indicates whether the source DB cluster is encrypted.</p>
    pub fn storage_encrypted(mut self, input: bool) -> Self {
        self.storage_encrypted = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the source DB cluster is encrypted.</p>
    pub fn set_storage_encrypted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.storage_encrypted = input;
        self
    }
    /// <p>Indicates whether the source DB cluster is encrypted.</p>
    pub fn get_storage_encrypted(&self) -> &::std::option::Option<bool> {
        &self.storage_encrypted
    }
    /// <p>For all database engines except Amazon Aurora, <code>AllocatedStorage</code> specifies the allocated storage size in gibibytes (GiB). For Aurora, <code>AllocatedStorage</code> always returns 1, because Aurora DB cluster storage size isn't fixed, but instead automatically adjusts as needed.</p>
    pub fn allocated_storage(mut self, input: i32) -> Self {
        self.allocated_storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>For all database engines except Amazon Aurora, <code>AllocatedStorage</code> specifies the allocated storage size in gibibytes (GiB). For Aurora, <code>AllocatedStorage</code> always returns 1, because Aurora DB cluster storage size isn't fixed, but instead automatically adjusts as needed.</p>
    pub fn set_allocated_storage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.allocated_storage = input;
        self
    }
    /// <p>For all database engines except Amazon Aurora, <code>AllocatedStorage</code> specifies the allocated storage size in gibibytes (GiB). For Aurora, <code>AllocatedStorage</code> always returns 1, because Aurora DB cluster storage size isn't fixed, but instead automatically adjusts as needed.</p>
    pub fn get_allocated_storage(&self) -> &::std::option::Option<i32> {
        &self.allocated_storage
    }
    /// <p>The version of the database engine for the automated backup.</p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the database engine for the automated backup.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The version of the database engine for the automated backup.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p>The Amazon Resource Name (ARN) for the source DB cluster.</p>
    pub fn db_cluster_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the source DB cluster.</p>
    pub fn set_db_cluster_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the source DB cluster.</p>
    pub fn get_db_cluster_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_arn
    }
    /// <p>The retention period for the automated backups.</p>
    pub fn backup_retention_period(mut self, input: i32) -> Self {
        self.backup_retention_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The retention period for the automated backups.</p>
    pub fn set_backup_retention_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.backup_retention_period = input;
        self
    }
    /// <p>The retention period for the automated backups.</p>
    pub fn get_backup_retention_period(&self) -> &::std::option::Option<i32> {
        &self.backup_retention_period
    }
    /// <p>The engine mode of the database engine for the automated backup.</p>
    pub fn engine_mode(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_mode = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The engine mode of the database engine for the automated backup.</p>
    pub fn set_engine_mode(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_mode = input;
        self
    }
    /// <p>The engine mode of the database engine for the automated backup.</p>
    pub fn get_engine_mode(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_mode
    }
    /// Appends an item to `availability_zones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>The Availability Zones where instances in the DB cluster can be created. For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>.</p>
    pub fn availability_zones(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.availability_zones.unwrap_or_default();
        v.push(input.into());
        self.availability_zones = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Availability Zones where instances in the DB cluster can be created. For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>.</p>
    pub fn set_availability_zones(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.availability_zones = input;
        self
    }
    /// <p>The Availability Zones where instances in the DB cluster can be created. For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>.</p>
    pub fn get_availability_zones(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.availability_zones
    }
    /// <p>The port number that the automated backup used for connections.</p>
    /// <p>Default: Inherits from the source DB cluster</p>
    /// <p>Valid Values: <code>1150-65535</code> </p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port number that the automated backup used for connections.</p>
    /// <p>Default: Inherits from the source DB cluster</p>
    /// <p>Valid Values: <code>1150-65535</code> </p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port number that the automated backup used for connections.</p>
    /// <p>Default: Inherits from the source DB cluster</p>
    /// <p>Valid Values: <code>1150-65535</code> </p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The Amazon Web Services KMS key ID for an automated backup.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key ID for an automated backup.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The Amazon Web Services KMS key ID for an automated backup.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>The storage type associated with the DB cluster.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn storage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The storage type associated with the DB cluster.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn set_storage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_type = input;
        self
    }
    /// <p>The storage type associated with the DB cluster.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn get_storage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_type
    }
    /// <p>The IOPS (I/O operations per second) value for the automated backup.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IOPS (I/O operations per second) value for the automated backup.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn set_iops(mut self, input: ::std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// <p>The IOPS (I/O operations per second) value for the automated backup.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn get_iops(&self) -> &::std::option::Option<i32> {
        &self.iops
    }
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub fn aws_backup_recovery_point_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_backup_recovery_point_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub fn set_aws_backup_recovery_point_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_backup_recovery_point_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub fn get_aws_backup_recovery_point_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_backup_recovery_point_arn
    }
    /// Consumes the builder and constructs a [`DbClusterAutomatedBackup`](crate::types::DbClusterAutomatedBackup).
    pub fn build(self) -> crate::types::DbClusterAutomatedBackup {
        crate::types::DbClusterAutomatedBackup {
            engine: self.engine,
            vpc_id: self.vpc_id,
            db_cluster_automated_backups_arn: self.db_cluster_automated_backups_arn,
            db_cluster_identifier: self.db_cluster_identifier,
            restore_window: self.restore_window,
            master_username: self.master_username,
            db_cluster_resource_id: self.db_cluster_resource_id,
            region: self.region,
            license_model: self.license_model,
            status: self.status,
            iam_database_authentication_enabled: self.iam_database_authentication_enabled,
            cluster_create_time: self.cluster_create_time,
            storage_encrypted: self.storage_encrypted,
            allocated_storage: self.allocated_storage,
            engine_version: self.engine_version,
            db_cluster_arn: self.db_cluster_arn,
            backup_retention_period: self.backup_retention_period,
            engine_mode: self.engine_mode,
            availability_zones: self.availability_zones,
            port: self.port,
            kms_key_id: self.kms_key_id,
            storage_type: self.storage_type,
            iops: self.iops,
            aws_backup_recovery_point_arn: self.aws_backup_recovery_point_arn,
        }
    }
}
