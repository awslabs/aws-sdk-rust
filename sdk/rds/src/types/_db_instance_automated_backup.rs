// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An automated backup of a DB instance. It consists of system backups, transaction logs, and the database instance properties that existed at the time you deleted the source instance.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DbInstanceAutomatedBackup {
    /// <p>The Amazon Resource Name (ARN) for the automated backups.</p>
    pub db_instance_arn: ::std::option::Option<::std::string::String>,
    /// <p>The resource ID for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub dbi_resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services Region associated with the automated backup.</p>
    pub region: ::std::option::Option<::std::string::String>,
    /// <p>The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub db_instance_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The earliest and latest time a DB instance can be restored to.</p>
    pub restore_window: ::std::option::Option<crate::types::RestoreWindow>,
    /// <p>The allocated storage size for the the automated backup in gibibytes (GiB).</p>
    pub allocated_storage: ::std::option::Option<i32>,
    /// <p>A list of status information for an automated backup:</p>
    /// <ul>
    /// <li> <p> <code>active</code> - Automated backups for current instances.</p> </li>
    /// <li> <p> <code>retained</code> - Automated backups for deleted instances.</p> </li>
    /// <li> <p> <code>creating</code> - Automated backups that are waiting for the first automated snapshot to be available.</p> </li>
    /// </ul>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The port number that the automated backup used for connections.</p>
    /// <p>Default: Inherits from the source DB instance</p>
    /// <p>Valid Values: <code>1150-65535</code> </p>
    pub port: ::std::option::Option<i32>,
    /// <p>The Availability Zone that the automated backup was created in. For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>.</p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The VPC ID associated with the DB instance.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>The date and time when the DB instance was created.</p>
    pub instance_create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The master user name of an automated backup.</p>
    pub master_username: ::std::option::Option<::std::string::String>,
    /// <p>The name of the database engine for this automated backup.</p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The version of the database engine for the automated backup.</p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p>The license model information for the automated backup.</p>
    pub license_model: ::std::option::Option<::std::string::String>,
    /// <p>The IOPS (I/O operations per second) value for the automated backup.</p>
    pub iops: ::std::option::Option<i32>,
    /// <p>The option group the automated backup is associated with. If omitted, the default option group for the engine specified is used.</p>
    pub option_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN from the key store with which the automated backup is associated for TDE encryption.</p>
    pub tde_credential_arn: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the automated backup is encrypted.</p>
    pub encrypted: ::std::option::Option<bool>,
    /// <p>The storage type associated with the automated backup.</p>
    pub storage_type: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services KMS key ID for an automated backup.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The time zone of the automated backup. In most cases, the <code>Timezone</code> element is empty. <code>Timezone</code> content appears only for Microsoft SQL Server DB instances that were created with a time zone specified.</p>
    pub timezone: ::std::option::Option<::std::string::String>,
    /// <p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.</p>
    pub iam_database_authentication_enabled: ::std::option::Option<bool>,
    /// <p>The retention period for the automated backups.</p>
    pub backup_retention_period: ::std::option::Option<i32>,
    /// <p>The Amazon Resource Name (ARN) for the replicated automated backups.</p>
    pub db_instance_automated_backups_arn: ::std::option::Option<::std::string::String>,
    /// <p>The list of replications to different Amazon Web Services Regions associated with the automated backup.</p>
    pub db_instance_automated_backups_replications: ::std::option::Option<::std::vec::Vec<crate::types::DbInstanceAutomatedBackupsReplication>>,
    /// <p>The location where automated backups are stored: Amazon Web Services Outposts or the Amazon Web Services Region.</p>
    pub backup_target: ::std::option::Option<::std::string::String>,
    /// <p>The storage throughput for the automated backup.</p>
    pub storage_throughput: ::std::option::Option<i32>,
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub aws_backup_recovery_point_arn: ::std::option::Option<::std::string::String>,
    /// <p>Indicates whether the DB instance has a dedicated log volume (DLV) enabled.</p>
    pub dedicated_log_volume: ::std::option::Option<bool>,
}
impl DbInstanceAutomatedBackup {
    /// <p>The Amazon Resource Name (ARN) for the automated backups.</p>
    pub fn db_instance_arn(&self) -> ::std::option::Option<&str> {
        self.db_instance_arn.as_deref()
    }
    /// <p>The resource ID for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub fn dbi_resource_id(&self) -> ::std::option::Option<&str> {
        self.dbi_resource_id.as_deref()
    }
    /// <p>The Amazon Web Services Region associated with the automated backup.</p>
    pub fn region(&self) -> ::std::option::Option<&str> {
        self.region.as_deref()
    }
    /// <p>The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub fn db_instance_identifier(&self) -> ::std::option::Option<&str> {
        self.db_instance_identifier.as_deref()
    }
    /// <p>The earliest and latest time a DB instance can be restored to.</p>
    pub fn restore_window(&self) -> ::std::option::Option<&crate::types::RestoreWindow> {
        self.restore_window.as_ref()
    }
    /// <p>The allocated storage size for the the automated backup in gibibytes (GiB).</p>
    pub fn allocated_storage(&self) -> ::std::option::Option<i32> {
        self.allocated_storage
    }
    /// <p>A list of status information for an automated backup:</p>
    /// <ul>
    /// <li> <p> <code>active</code> - Automated backups for current instances.</p> </li>
    /// <li> <p> <code>retained</code> - Automated backups for deleted instances.</p> </li>
    /// <li> <p> <code>creating</code> - Automated backups that are waiting for the first automated snapshot to be available.</p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The port number that the automated backup used for connections.</p>
    /// <p>Default: Inherits from the source DB instance</p>
    /// <p>Valid Values: <code>1150-65535</code> </p>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// <p>The Availability Zone that the automated backup was created in. For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>.</p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The VPC ID associated with the DB instance.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The date and time when the DB instance was created.</p>
    pub fn instance_create_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.instance_create_time.as_ref()
    }
    /// <p>The master user name of an automated backup.</p>
    pub fn master_username(&self) -> ::std::option::Option<&str> {
        self.master_username.as_deref()
    }
    /// <p>The name of the database engine for this automated backup.</p>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The version of the database engine for the automated backup.</p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The license model information for the automated backup.</p>
    pub fn license_model(&self) -> ::std::option::Option<&str> {
        self.license_model.as_deref()
    }
    /// <p>The IOPS (I/O operations per second) value for the automated backup.</p>
    pub fn iops(&self) -> ::std::option::Option<i32> {
        self.iops
    }
    /// <p>The option group the automated backup is associated with. If omitted, the default option group for the engine specified is used.</p>
    pub fn option_group_name(&self) -> ::std::option::Option<&str> {
        self.option_group_name.as_deref()
    }
    /// <p>The ARN from the key store with which the automated backup is associated for TDE encryption.</p>
    pub fn tde_credential_arn(&self) -> ::std::option::Option<&str> {
        self.tde_credential_arn.as_deref()
    }
    /// <p>Indicates whether the automated backup is encrypted.</p>
    pub fn encrypted(&self) -> ::std::option::Option<bool> {
        self.encrypted
    }
    /// <p>The storage type associated with the automated backup.</p>
    pub fn storage_type(&self) -> ::std::option::Option<&str> {
        self.storage_type.as_deref()
    }
    /// <p>The Amazon Web Services KMS key ID for an automated backup.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The time zone of the automated backup. In most cases, the <code>Timezone</code> element is empty. <code>Timezone</code> content appears only for Microsoft SQL Server DB instances that were created with a time zone specified.</p>
    pub fn timezone(&self) -> ::std::option::Option<&str> {
        self.timezone.as_deref()
    }
    /// <p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.</p>
    pub fn iam_database_authentication_enabled(&self) -> ::std::option::Option<bool> {
        self.iam_database_authentication_enabled
    }
    /// <p>The retention period for the automated backups.</p>
    pub fn backup_retention_period(&self) -> ::std::option::Option<i32> {
        self.backup_retention_period
    }
    /// <p>The Amazon Resource Name (ARN) for the replicated automated backups.</p>
    pub fn db_instance_automated_backups_arn(&self) -> ::std::option::Option<&str> {
        self.db_instance_automated_backups_arn.as_deref()
    }
    /// <p>The list of replications to different Amazon Web Services Regions associated with the automated backup.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.db_instance_automated_backups_replications.is_none()`.
    pub fn db_instance_automated_backups_replications(&self) -> &[crate::types::DbInstanceAutomatedBackupsReplication] {
        self.db_instance_automated_backups_replications.as_deref().unwrap_or_default()
    }
    /// <p>The location where automated backups are stored: Amazon Web Services Outposts or the Amazon Web Services Region.</p>
    pub fn backup_target(&self) -> ::std::option::Option<&str> {
        self.backup_target.as_deref()
    }
    /// <p>The storage throughput for the automated backup.</p>
    pub fn storage_throughput(&self) -> ::std::option::Option<i32> {
        self.storage_throughput
    }
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub fn aws_backup_recovery_point_arn(&self) -> ::std::option::Option<&str> {
        self.aws_backup_recovery_point_arn.as_deref()
    }
    /// <p>Indicates whether the DB instance has a dedicated log volume (DLV) enabled.</p>
    pub fn dedicated_log_volume(&self) -> ::std::option::Option<bool> {
        self.dedicated_log_volume
    }
}
impl DbInstanceAutomatedBackup {
    /// Creates a new builder-style object to manufacture [`DbInstanceAutomatedBackup`](crate::types::DbInstanceAutomatedBackup).
    pub fn builder() -> crate::types::builders::DbInstanceAutomatedBackupBuilder {
        crate::types::builders::DbInstanceAutomatedBackupBuilder::default()
    }
}

/// A builder for [`DbInstanceAutomatedBackup`](crate::types::DbInstanceAutomatedBackup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DbInstanceAutomatedBackupBuilder {
    pub(crate) db_instance_arn: ::std::option::Option<::std::string::String>,
    pub(crate) dbi_resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) region: ::std::option::Option<::std::string::String>,
    pub(crate) db_instance_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) restore_window: ::std::option::Option<crate::types::RestoreWindow>,
    pub(crate) allocated_storage: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) master_username: ::std::option::Option<::std::string::String>,
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) license_model: ::std::option::Option<::std::string::String>,
    pub(crate) iops: ::std::option::Option<i32>,
    pub(crate) option_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) tde_credential_arn: ::std::option::Option<::std::string::String>,
    pub(crate) encrypted: ::std::option::Option<bool>,
    pub(crate) storage_type: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) timezone: ::std::option::Option<::std::string::String>,
    pub(crate) iam_database_authentication_enabled: ::std::option::Option<bool>,
    pub(crate) backup_retention_period: ::std::option::Option<i32>,
    pub(crate) db_instance_automated_backups_arn: ::std::option::Option<::std::string::String>,
    pub(crate) db_instance_automated_backups_replications:
        ::std::option::Option<::std::vec::Vec<crate::types::DbInstanceAutomatedBackupsReplication>>,
    pub(crate) backup_target: ::std::option::Option<::std::string::String>,
    pub(crate) storage_throughput: ::std::option::Option<i32>,
    pub(crate) aws_backup_recovery_point_arn: ::std::option::Option<::std::string::String>,
    pub(crate) dedicated_log_volume: ::std::option::Option<bool>,
}
impl DbInstanceAutomatedBackupBuilder {
    /// <p>The Amazon Resource Name (ARN) for the automated backups.</p>
    pub fn db_instance_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the automated backups.</p>
    pub fn set_db_instance_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the automated backups.</p>
    pub fn get_db_instance_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_arn
    }
    /// <p>The resource ID for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub fn dbi_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dbi_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource ID for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub fn set_dbi_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dbi_resource_id = input;
        self
    }
    /// <p>The resource ID for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub fn get_dbi_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.dbi_resource_id
    }
    /// <p>The Amazon Web Services Region associated with the automated backup.</p>
    pub fn region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region associated with the automated backup.</p>
    pub fn set_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region = input;
        self
    }
    /// <p>The Amazon Web Services Region associated with the automated backup.</p>
    pub fn get_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.region
    }
    /// <p>The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub fn db_instance_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub fn set_db_instance_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_identifier = input;
        self
    }
    /// <p>The identifier for the source DB instance, which can't be changed and which is unique to an Amazon Web Services Region.</p>
    pub fn get_db_instance_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_identifier
    }
    /// <p>The earliest and latest time a DB instance can be restored to.</p>
    pub fn restore_window(mut self, input: crate::types::RestoreWindow) -> Self {
        self.restore_window = ::std::option::Option::Some(input);
        self
    }
    /// <p>The earliest and latest time a DB instance can be restored to.</p>
    pub fn set_restore_window(mut self, input: ::std::option::Option<crate::types::RestoreWindow>) -> Self {
        self.restore_window = input;
        self
    }
    /// <p>The earliest and latest time a DB instance can be restored to.</p>
    pub fn get_restore_window(&self) -> &::std::option::Option<crate::types::RestoreWindow> {
        &self.restore_window
    }
    /// <p>The allocated storage size for the the automated backup in gibibytes (GiB).</p>
    pub fn allocated_storage(mut self, input: i32) -> Self {
        self.allocated_storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The allocated storage size for the the automated backup in gibibytes (GiB).</p>
    pub fn set_allocated_storage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.allocated_storage = input;
        self
    }
    /// <p>The allocated storage size for the the automated backup in gibibytes (GiB).</p>
    pub fn get_allocated_storage(&self) -> &::std::option::Option<i32> {
        &self.allocated_storage
    }
    /// <p>A list of status information for an automated backup:</p>
    /// <ul>
    /// <li> <p> <code>active</code> - Automated backups for current instances.</p> </li>
    /// <li> <p> <code>retained</code> - Automated backups for deleted instances.</p> </li>
    /// <li> <p> <code>creating</code> - Automated backups that are waiting for the first automated snapshot to be available.</p> </li>
    /// </ul>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A list of status information for an automated backup:</p>
    /// <ul>
    /// <li> <p> <code>active</code> - Automated backups for current instances.</p> </li>
    /// <li> <p> <code>retained</code> - Automated backups for deleted instances.</p> </li>
    /// <li> <p> <code>creating</code> - Automated backups that are waiting for the first automated snapshot to be available.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>A list of status information for an automated backup:</p>
    /// <ul>
    /// <li> <p> <code>active</code> - Automated backups for current instances.</p> </li>
    /// <li> <p> <code>retained</code> - Automated backups for deleted instances.</p> </li>
    /// <li> <p> <code>creating</code> - Automated backups that are waiting for the first automated snapshot to be available.</p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The port number that the automated backup used for connections.</p>
    /// <p>Default: Inherits from the source DB instance</p>
    /// <p>Valid Values: <code>1150-65535</code> </p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port number that the automated backup used for connections.</p>
    /// <p>Default: Inherits from the source DB instance</p>
    /// <p>Valid Values: <code>1150-65535</code> </p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port number that the automated backup used for connections.</p>
    /// <p>Default: Inherits from the source DB instance</p>
    /// <p>Valid Values: <code>1150-65535</code> </p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The Availability Zone that the automated backup was created in. For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>.</p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone that the automated backup was created in. For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>.</p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone that the automated backup was created in. For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>.</p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The VPC ID associated with the DB instance.</p>
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VPC ID associated with the DB instance.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The VPC ID associated with the DB instance.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>The date and time when the DB instance was created.</p>
    pub fn instance_create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.instance_create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the DB instance was created.</p>
    pub fn set_instance_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.instance_create_time = input;
        self
    }
    /// <p>The date and time when the DB instance was created.</p>
    pub fn get_instance_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.instance_create_time
    }
    /// <p>The master user name of an automated backup.</p>
    pub fn master_username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.master_username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The master user name of an automated backup.</p>
    pub fn set_master_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.master_username = input;
        self
    }
    /// <p>The master user name of an automated backup.</p>
    pub fn get_master_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.master_username
    }
    /// <p>The name of the database engine for this automated backup.</p>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database engine for this automated backup.</p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The name of the database engine for this automated backup.</p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The version of the database engine for the automated backup.</p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the database engine for the automated backup.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The version of the database engine for the automated backup.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p>The license model information for the automated backup.</p>
    pub fn license_model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.license_model = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The license model information for the automated backup.</p>
    pub fn set_license_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.license_model = input;
        self
    }
    /// <p>The license model information for the automated backup.</p>
    pub fn get_license_model(&self) -> &::std::option::Option<::std::string::String> {
        &self.license_model
    }
    /// <p>The IOPS (I/O operations per second) value for the automated backup.</p>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IOPS (I/O operations per second) value for the automated backup.</p>
    pub fn set_iops(mut self, input: ::std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// <p>The IOPS (I/O operations per second) value for the automated backup.</p>
    pub fn get_iops(&self) -> &::std::option::Option<i32> {
        &self.iops
    }
    /// <p>The option group the automated backup is associated with. If omitted, the default option group for the engine specified is used.</p>
    pub fn option_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.option_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The option group the automated backup is associated with. If omitted, the default option group for the engine specified is used.</p>
    pub fn set_option_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.option_group_name = input;
        self
    }
    /// <p>The option group the automated backup is associated with. If omitted, the default option group for the engine specified is used.</p>
    pub fn get_option_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.option_group_name
    }
    /// <p>The ARN from the key store with which the automated backup is associated for TDE encryption.</p>
    pub fn tde_credential_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tde_credential_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN from the key store with which the automated backup is associated for TDE encryption.</p>
    pub fn set_tde_credential_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tde_credential_arn = input;
        self
    }
    /// <p>The ARN from the key store with which the automated backup is associated for TDE encryption.</p>
    pub fn get_tde_credential_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.tde_credential_arn
    }
    /// <p>Indicates whether the automated backup is encrypted.</p>
    pub fn encrypted(mut self, input: bool) -> Self {
        self.encrypted = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the automated backup is encrypted.</p>
    pub fn set_encrypted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.encrypted = input;
        self
    }
    /// <p>Indicates whether the automated backup is encrypted.</p>
    pub fn get_encrypted(&self) -> &::std::option::Option<bool> {
        &self.encrypted
    }
    /// <p>The storage type associated with the automated backup.</p>
    pub fn storage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The storage type associated with the automated backup.</p>
    pub fn set_storage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_type = input;
        self
    }
    /// <p>The storage type associated with the automated backup.</p>
    pub fn get_storage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_type
    }
    /// <p>The Amazon Web Services KMS key ID for an automated backup.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key ID for an automated backup.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The Amazon Web Services KMS key ID for an automated backup.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>The time zone of the automated backup. In most cases, the <code>Timezone</code> element is empty. <code>Timezone</code> content appears only for Microsoft SQL Server DB instances that were created with a time zone specified.</p>
    pub fn timezone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.timezone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The time zone of the automated backup. In most cases, the <code>Timezone</code> element is empty. <code>Timezone</code> content appears only for Microsoft SQL Server DB instances that were created with a time zone specified.</p>
    pub fn set_timezone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.timezone = input;
        self
    }
    /// <p>The time zone of the automated backup. In most cases, the <code>Timezone</code> element is empty. <code>Timezone</code> content appears only for Microsoft SQL Server DB instances that were created with a time zone specified.</p>
    pub fn get_timezone(&self) -> &::std::option::Option<::std::string::String> {
        &self.timezone
    }
    /// <p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.</p>
    pub fn iam_database_authentication_enabled(mut self, input: bool) -> Self {
        self.iam_database_authentication_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.</p>
    pub fn set_iam_database_authentication_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.iam_database_authentication_enabled = input;
        self
    }
    /// <p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.</p>
    pub fn get_iam_database_authentication_enabled(&self) -> &::std::option::Option<bool> {
        &self.iam_database_authentication_enabled
    }
    /// <p>The retention period for the automated backups.</p>
    pub fn backup_retention_period(mut self, input: i32) -> Self {
        self.backup_retention_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The retention period for the automated backups.</p>
    pub fn set_backup_retention_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.backup_retention_period = input;
        self
    }
    /// <p>The retention period for the automated backups.</p>
    pub fn get_backup_retention_period(&self) -> &::std::option::Option<i32> {
        &self.backup_retention_period
    }
    /// <p>The Amazon Resource Name (ARN) for the replicated automated backups.</p>
    pub fn db_instance_automated_backups_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_automated_backups_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the replicated automated backups.</p>
    pub fn set_db_instance_automated_backups_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_automated_backups_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the replicated automated backups.</p>
    pub fn get_db_instance_automated_backups_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_automated_backups_arn
    }
    /// Appends an item to `db_instance_automated_backups_replications`.
    ///
    /// To override the contents of this collection use [`set_db_instance_automated_backups_replications`](Self::set_db_instance_automated_backups_replications).
    ///
    /// <p>The list of replications to different Amazon Web Services Regions associated with the automated backup.</p>
    pub fn db_instance_automated_backups_replications(mut self, input: crate::types::DbInstanceAutomatedBackupsReplication) -> Self {
        let mut v = self.db_instance_automated_backups_replications.unwrap_or_default();
        v.push(input);
        self.db_instance_automated_backups_replications = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of replications to different Amazon Web Services Regions associated with the automated backup.</p>
    pub fn set_db_instance_automated_backups_replications(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::DbInstanceAutomatedBackupsReplication>>,
    ) -> Self {
        self.db_instance_automated_backups_replications = input;
        self
    }
    /// <p>The list of replications to different Amazon Web Services Regions associated with the automated backup.</p>
    pub fn get_db_instance_automated_backups_replications(
        &self,
    ) -> &::std::option::Option<::std::vec::Vec<crate::types::DbInstanceAutomatedBackupsReplication>> {
        &self.db_instance_automated_backups_replications
    }
    /// <p>The location where automated backups are stored: Amazon Web Services Outposts or the Amazon Web Services Region.</p>
    pub fn backup_target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_target = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location where automated backups are stored: Amazon Web Services Outposts or the Amazon Web Services Region.</p>
    pub fn set_backup_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_target = input;
        self
    }
    /// <p>The location where automated backups are stored: Amazon Web Services Outposts or the Amazon Web Services Region.</p>
    pub fn get_backup_target(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_target
    }
    /// <p>The storage throughput for the automated backup.</p>
    pub fn storage_throughput(mut self, input: i32) -> Self {
        self.storage_throughput = ::std::option::Option::Some(input);
        self
    }
    /// <p>The storage throughput for the automated backup.</p>
    pub fn set_storage_throughput(mut self, input: ::std::option::Option<i32>) -> Self {
        self.storage_throughput = input;
        self
    }
    /// <p>The storage throughput for the automated backup.</p>
    pub fn get_storage_throughput(&self) -> &::std::option::Option<i32> {
        &self.storage_throughput
    }
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub fn aws_backup_recovery_point_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_backup_recovery_point_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub fn set_aws_backup_recovery_point_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_backup_recovery_point_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the recovery point in Amazon Web Services Backup.</p>
    pub fn get_aws_backup_recovery_point_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_backup_recovery_point_arn
    }
    /// <p>Indicates whether the DB instance has a dedicated log volume (DLV) enabled.</p>
    pub fn dedicated_log_volume(mut self, input: bool) -> Self {
        self.dedicated_log_volume = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the DB instance has a dedicated log volume (DLV) enabled.</p>
    pub fn set_dedicated_log_volume(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dedicated_log_volume = input;
        self
    }
    /// <p>Indicates whether the DB instance has a dedicated log volume (DLV) enabled.</p>
    pub fn get_dedicated_log_volume(&self) -> &::std::option::Option<bool> {
        &self.dedicated_log_volume
    }
    /// Consumes the builder and constructs a [`DbInstanceAutomatedBackup`](crate::types::DbInstanceAutomatedBackup).
    pub fn build(self) -> crate::types::DbInstanceAutomatedBackup {
        crate::types::DbInstanceAutomatedBackup {
            db_instance_arn: self.db_instance_arn,
            dbi_resource_id: self.dbi_resource_id,
            region: self.region,
            db_instance_identifier: self.db_instance_identifier,
            restore_window: self.restore_window,
            allocated_storage: self.allocated_storage,
            status: self.status,
            port: self.port,
            availability_zone: self.availability_zone,
            vpc_id: self.vpc_id,
            instance_create_time: self.instance_create_time,
            master_username: self.master_username,
            engine: self.engine,
            engine_version: self.engine_version,
            license_model: self.license_model,
            iops: self.iops,
            option_group_name: self.option_group_name,
            tde_credential_arn: self.tde_credential_arn,
            encrypted: self.encrypted,
            storage_type: self.storage_type,
            kms_key_id: self.kms_key_id,
            timezone: self.timezone,
            iam_database_authentication_enabled: self.iam_database_authentication_enabled,
            backup_retention_period: self.backup_retention_period,
            db_instance_automated_backups_arn: self.db_instance_automated_backups_arn,
            db_instance_automated_backups_replications: self.db_instance_automated_backups_replications,
            backup_target: self.backup_target,
            storage_throughput: self.storage_throughput,
            aws_backup_recovery_point_arn: self.aws_backup_recovery_point_arn,
            dedicated_log_volume: self.dedicated_log_volume,
        }
    }
}
