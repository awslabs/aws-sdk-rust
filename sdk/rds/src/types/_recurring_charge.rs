// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This data type is used as a response element in the <code>DescribeReservedDBInstances</code> and <code>DescribeReservedDBInstancesOfferings</code> actions.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecurringCharge {
    /// <p>The amount of the recurring charge.</p>
    #[doc(hidden)]
    pub recurring_charge_amount: f64,
    /// <p>The frequency of the recurring charge.</p>
    #[doc(hidden)]
    pub recurring_charge_frequency: std::option::Option<std::string::String>,
}
impl RecurringCharge {
    /// <p>The amount of the recurring charge.</p>
    pub fn recurring_charge_amount(&self) -> f64 {
        self.recurring_charge_amount
    }
    /// <p>The frequency of the recurring charge.</p>
    pub fn recurring_charge_frequency(&self) -> std::option::Option<&str> {
        self.recurring_charge_frequency.as_deref()
    }
}
impl RecurringCharge {
    /// Creates a new builder-style object to manufacture [`RecurringCharge`](crate::types::RecurringCharge).
    pub fn builder() -> crate::types::builders::RecurringChargeBuilder {
        crate::types::builders::RecurringChargeBuilder::default()
    }
}

/// A builder for [`RecurringCharge`](crate::types::RecurringCharge).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecurringChargeBuilder {
    pub(crate) recurring_charge_amount: std::option::Option<f64>,
    pub(crate) recurring_charge_frequency: std::option::Option<std::string::String>,
}
impl RecurringChargeBuilder {
    /// <p>The amount of the recurring charge.</p>
    pub fn recurring_charge_amount(mut self, input: f64) -> Self {
        self.recurring_charge_amount = Some(input);
        self
    }
    /// <p>The amount of the recurring charge.</p>
    pub fn set_recurring_charge_amount(mut self, input: std::option::Option<f64>) -> Self {
        self.recurring_charge_amount = input;
        self
    }
    /// <p>The frequency of the recurring charge.</p>
    pub fn recurring_charge_frequency(mut self, input: impl Into<std::string::String>) -> Self {
        self.recurring_charge_frequency = Some(input.into());
        self
    }
    /// <p>The frequency of the recurring charge.</p>
    pub fn set_recurring_charge_frequency(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recurring_charge_frequency = input;
        self
    }
    /// Consumes the builder and constructs a [`RecurringCharge`](crate::types::RecurringCharge).
    pub fn build(self) -> crate::types::RecurringCharge {
        crate::types::RecurringCharge {
            recurring_charge_amount: self.recurring_charge_amount.unwrap_or_default(),
            recurring_charge_frequency: self.recurring_charge_frequency,
        }
    }
}
