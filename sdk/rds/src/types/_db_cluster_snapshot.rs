// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details for an Amazon RDS DB cluster snapshot</p>
/// <p>This data type is used as a response element in the <code>DescribeDBClusterSnapshots</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DbClusterSnapshot {
    /// <p>Provides the list of Availability Zones (AZs) where instances in the DB cluster snapshot can be restored.</p>
    #[doc(hidden)]
    pub availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies the identifier for the DB cluster snapshot.</p>
    #[doc(hidden)]
    pub db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>Specifies the DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.</p>
    #[doc(hidden)]
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).</p>
    #[doc(hidden)]
    pub snapshot_create_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Specifies the name of the database engine for this DB cluster snapshot.</p>
    #[doc(hidden)]
    pub engine: std::option::Option<std::string::String>,
    /// <p>Provides the engine mode of the database engine for this DB cluster snapshot.</p>
    #[doc(hidden)]
    pub engine_mode: std::option::Option<std::string::String>,
    /// <p>Specifies the allocated storage size in gibibytes (GiB).</p>
    #[doc(hidden)]
    pub allocated_storage: i32,
    /// <p>Specifies the status of this DB cluster snapshot. Valid statuses are the following:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>copying</code> </p> </li>
    /// <li> <p> <code>creating</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>Specifies the port that the DB cluster was listening on at the time of the snapshot.</p>
    #[doc(hidden)]
    pub port: i32,
    /// <p>Provides the VPC ID associated with the DB cluster snapshot.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
    #[doc(hidden)]
    pub cluster_create_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Provides the master username for this DB cluster snapshot.</p>
    #[doc(hidden)]
    pub master_username: std::option::Option<std::string::String>,
    /// <p>Provides the version of the database engine for this DB cluster snapshot.</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>Provides the license model information for this DB cluster snapshot.</p>
    #[doc(hidden)]
    pub license_model: std::option::Option<std::string::String>,
    /// <p>Provides the type of the DB cluster snapshot.</p>
    #[doc(hidden)]
    pub snapshot_type: std::option::Option<std::string::String>,
    /// <p>Specifies the percentage of the estimated data that has been transferred.</p>
    #[doc(hidden)]
    pub percent_progress: i32,
    /// <p>Specifies whether the DB cluster snapshot is encrypted.</p>
    #[doc(hidden)]
    pub storage_encrypted: bool,
    /// <p>If <code>StorageEncrypted</code> is true, the Amazon Web Services KMS key identifier for the encrypted DB cluster snapshot.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the DB cluster snapshot.</p>
    #[doc(hidden)]
    pub db_cluster_snapshot_arn: std::option::Option<std::string::String>,
    /// <p>If the DB cluster snapshot was copied from a source DB cluster snapshot, the Amazon Resource Name (ARN) for the source DB cluster snapshot, otherwise, a null value.</p>
    #[doc(hidden)]
    pub source_db_cluster_snapshot_arn: std::option::Option<std::string::String>,
    /// <p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.</p>
    #[doc(hidden)]
    pub iam_database_authentication_enabled: bool,
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    #[doc(hidden)]
    pub tag_list: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>Reserved for future use.</p>
    #[doc(hidden)]
    pub db_system_id: std::option::Option<std::string::String>,
}
impl DbClusterSnapshot {
    /// <p>Provides the list of Availability Zones (AZs) where instances in the DB cluster snapshot can be restored.</p>
    pub fn availability_zones(&self) -> std::option::Option<&[std::string::String]> {
        self.availability_zones.as_deref()
    }
    /// <p>Specifies the identifier for the DB cluster snapshot.</p>
    pub fn db_cluster_snapshot_identifier(&self) -> std::option::Option<&str> {
        self.db_cluster_snapshot_identifier.as_deref()
    }
    /// <p>Specifies the DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.</p>
    pub fn db_cluster_identifier(&self) -> std::option::Option<&str> {
        self.db_cluster_identifier.as_deref()
    }
    /// <p>Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).</p>
    pub fn snapshot_create_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.snapshot_create_time.as_ref()
    }
    /// <p>Specifies the name of the database engine for this DB cluster snapshot.</p>
    pub fn engine(&self) -> std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>Provides the engine mode of the database engine for this DB cluster snapshot.</p>
    pub fn engine_mode(&self) -> std::option::Option<&str> {
        self.engine_mode.as_deref()
    }
    /// <p>Specifies the allocated storage size in gibibytes (GiB).</p>
    pub fn allocated_storage(&self) -> i32 {
        self.allocated_storage
    }
    /// <p>Specifies the status of this DB cluster snapshot. Valid statuses are the following:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>copying</code> </p> </li>
    /// <li> <p> <code>creating</code> </p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>Specifies the port that the DB cluster was listening on at the time of the snapshot.</p>
    pub fn port(&self) -> i32 {
        self.port
    }
    /// <p>Provides the VPC ID associated with the DB cluster snapshot.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
    pub fn cluster_create_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.cluster_create_time.as_ref()
    }
    /// <p>Provides the master username for this DB cluster snapshot.</p>
    pub fn master_username(&self) -> std::option::Option<&str> {
        self.master_username.as_deref()
    }
    /// <p>Provides the version of the database engine for this DB cluster snapshot.</p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>Provides the license model information for this DB cluster snapshot.</p>
    pub fn license_model(&self) -> std::option::Option<&str> {
        self.license_model.as_deref()
    }
    /// <p>Provides the type of the DB cluster snapshot.</p>
    pub fn snapshot_type(&self) -> std::option::Option<&str> {
        self.snapshot_type.as_deref()
    }
    /// <p>Specifies the percentage of the estimated data that has been transferred.</p>
    pub fn percent_progress(&self) -> i32 {
        self.percent_progress
    }
    /// <p>Specifies whether the DB cluster snapshot is encrypted.</p>
    pub fn storage_encrypted(&self) -> bool {
        self.storage_encrypted
    }
    /// <p>If <code>StorageEncrypted</code> is true, the Amazon Web Services KMS key identifier for the encrypted DB cluster snapshot.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the DB cluster snapshot.</p>
    pub fn db_cluster_snapshot_arn(&self) -> std::option::Option<&str> {
        self.db_cluster_snapshot_arn.as_deref()
    }
    /// <p>If the DB cluster snapshot was copied from a source DB cluster snapshot, the Amazon Resource Name (ARN) for the source DB cluster snapshot, otherwise, a null value.</p>
    pub fn source_db_cluster_snapshot_arn(&self) -> std::option::Option<&str> {
        self.source_db_cluster_snapshot_arn.as_deref()
    }
    /// <p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.</p>
    pub fn iam_database_authentication_enabled(&self) -> bool {
        self.iam_database_authentication_enabled
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn tag_list(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tag_list.as_deref()
    }
    /// <p>Reserved for future use.</p>
    pub fn db_system_id(&self) -> std::option::Option<&str> {
        self.db_system_id.as_deref()
    }
}
impl DbClusterSnapshot {
    /// Creates a new builder-style object to manufacture [`DbClusterSnapshot`](crate::types::DbClusterSnapshot).
    pub fn builder() -> crate::types::builders::DbClusterSnapshotBuilder {
        crate::types::builders::DbClusterSnapshotBuilder::default()
    }
}

/// A builder for [`DbClusterSnapshot`](crate::types::DbClusterSnapshot).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DbClusterSnapshotBuilder {
    pub(crate) availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
    pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
    pub(crate) snapshot_create_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) engine: std::option::Option<std::string::String>,
    pub(crate) engine_mode: std::option::Option<std::string::String>,
    pub(crate) allocated_storage: std::option::Option<i32>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) port: std::option::Option<i32>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) cluster_create_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) master_username: std::option::Option<std::string::String>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) license_model: std::option::Option<std::string::String>,
    pub(crate) snapshot_type: std::option::Option<std::string::String>,
    pub(crate) percent_progress: std::option::Option<i32>,
    pub(crate) storage_encrypted: std::option::Option<bool>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) db_cluster_snapshot_arn: std::option::Option<std::string::String>,
    pub(crate) source_db_cluster_snapshot_arn: std::option::Option<std::string::String>,
    pub(crate) iam_database_authentication_enabled: std::option::Option<bool>,
    pub(crate) tag_list: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) db_system_id: std::option::Option<std::string::String>,
}
impl DbClusterSnapshotBuilder {
    /// Appends an item to `availability_zones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>Provides the list of Availability Zones (AZs) where instances in the DB cluster snapshot can be restored.</p>
    pub fn availability_zones(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.availability_zones.unwrap_or_default();
        v.push(input.into());
        self.availability_zones = Some(v);
        self
    }
    /// <p>Provides the list of Availability Zones (AZs) where instances in the DB cluster snapshot can be restored.</p>
    pub fn set_availability_zones(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.availability_zones = input;
        self
    }
    /// <p>Specifies the identifier for the DB cluster snapshot.</p>
    pub fn db_cluster_snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_cluster_snapshot_identifier = Some(input.into());
        self
    }
    /// <p>Specifies the identifier for the DB cluster snapshot.</p>
    pub fn set_db_cluster_snapshot_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_cluster_snapshot_identifier = input;
        self
    }
    /// <p>Specifies the DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.</p>
    pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_cluster_identifier = Some(input.into());
        self
    }
    /// <p>Specifies the DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.</p>
    pub fn set_db_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_cluster_identifier = input;
        self
    }
    /// <p>Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).</p>
    pub fn snapshot_create_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.snapshot_create_time = Some(input);
        self
    }
    /// <p>Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).</p>
    pub fn set_snapshot_create_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.snapshot_create_time = input;
        self
    }
    /// <p>Specifies the name of the database engine for this DB cluster snapshot.</p>
    pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine = Some(input.into());
        self
    }
    /// <p>Specifies the name of the database engine for this DB cluster snapshot.</p>
    pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>Provides the engine mode of the database engine for this DB cluster snapshot.</p>
    pub fn engine_mode(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_mode = Some(input.into());
        self
    }
    /// <p>Provides the engine mode of the database engine for this DB cluster snapshot.</p>
    pub fn set_engine_mode(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_mode = input;
        self
    }
    /// <p>Specifies the allocated storage size in gibibytes (GiB).</p>
    pub fn allocated_storage(mut self, input: i32) -> Self {
        self.allocated_storage = Some(input);
        self
    }
    /// <p>Specifies the allocated storage size in gibibytes (GiB).</p>
    pub fn set_allocated_storage(mut self, input: std::option::Option<i32>) -> Self {
        self.allocated_storage = input;
        self
    }
    /// <p>Specifies the status of this DB cluster snapshot. Valid statuses are the following:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>copying</code> </p> </li>
    /// <li> <p> <code>creating</code> </p> </li>
    /// </ul>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>Specifies the status of this DB cluster snapshot. Valid statuses are the following:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>copying</code> </p> </li>
    /// <li> <p> <code>creating</code> </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>Specifies the port that the DB cluster was listening on at the time of the snapshot.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>Specifies the port that the DB cluster was listening on at the time of the snapshot.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>Provides the VPC ID associated with the DB cluster snapshot.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>Provides the VPC ID associated with the DB cluster snapshot.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
    pub fn cluster_create_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.cluster_create_time = Some(input);
        self
    }
    /// <p>Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
    pub fn set_cluster_create_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.cluster_create_time = input;
        self
    }
    /// <p>Provides the master username for this DB cluster snapshot.</p>
    pub fn master_username(mut self, input: impl Into<std::string::String>) -> Self {
        self.master_username = Some(input.into());
        self
    }
    /// <p>Provides the master username for this DB cluster snapshot.</p>
    pub fn set_master_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.master_username = input;
        self
    }
    /// <p>Provides the version of the database engine for this DB cluster snapshot.</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>Provides the version of the database engine for this DB cluster snapshot.</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>Provides the license model information for this DB cluster snapshot.</p>
    pub fn license_model(mut self, input: impl Into<std::string::String>) -> Self {
        self.license_model = Some(input.into());
        self
    }
    /// <p>Provides the license model information for this DB cluster snapshot.</p>
    pub fn set_license_model(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.license_model = input;
        self
    }
    /// <p>Provides the type of the DB cluster snapshot.</p>
    pub fn snapshot_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_type = Some(input.into());
        self
    }
    /// <p>Provides the type of the DB cluster snapshot.</p>
    pub fn set_snapshot_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.snapshot_type = input;
        self
    }
    /// <p>Specifies the percentage of the estimated data that has been transferred.</p>
    pub fn percent_progress(mut self, input: i32) -> Self {
        self.percent_progress = Some(input);
        self
    }
    /// <p>Specifies the percentage of the estimated data that has been transferred.</p>
    pub fn set_percent_progress(mut self, input: std::option::Option<i32>) -> Self {
        self.percent_progress = input;
        self
    }
    /// <p>Specifies whether the DB cluster snapshot is encrypted.</p>
    pub fn storage_encrypted(mut self, input: bool) -> Self {
        self.storage_encrypted = Some(input);
        self
    }
    /// <p>Specifies whether the DB cluster snapshot is encrypted.</p>
    pub fn set_storage_encrypted(mut self, input: std::option::Option<bool>) -> Self {
        self.storage_encrypted = input;
        self
    }
    /// <p>If <code>StorageEncrypted</code> is true, the Amazon Web Services KMS key identifier for the encrypted DB cluster snapshot.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>If <code>StorageEncrypted</code> is true, the Amazon Web Services KMS key identifier for the encrypted DB cluster snapshot.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the DB cluster snapshot.</p>
    pub fn db_cluster_snapshot_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_cluster_snapshot_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the DB cluster snapshot.</p>
    pub fn set_db_cluster_snapshot_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_cluster_snapshot_arn = input;
        self
    }
    /// <p>If the DB cluster snapshot was copied from a source DB cluster snapshot, the Amazon Resource Name (ARN) for the source DB cluster snapshot, otherwise, a null value.</p>
    pub fn source_db_cluster_snapshot_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_db_cluster_snapshot_arn = Some(input.into());
        self
    }
    /// <p>If the DB cluster snapshot was copied from a source DB cluster snapshot, the Amazon Resource Name (ARN) for the source DB cluster snapshot, otherwise, a null value.</p>
    pub fn set_source_db_cluster_snapshot_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_db_cluster_snapshot_arn = input;
        self
    }
    /// <p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.</p>
    pub fn iam_database_authentication_enabled(mut self, input: bool) -> Self {
        self.iam_database_authentication_enabled = Some(input);
        self
    }
    /// <p>True if mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.</p>
    pub fn set_iam_database_authentication_enabled(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.iam_database_authentication_enabled = input;
        self
    }
    /// Appends an item to `tag_list`.
    ///
    /// To override the contents of this collection use [`set_tag_list`](Self::set_tag_list).
    ///
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn tag_list(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tag_list.unwrap_or_default();
        v.push(input);
        self.tag_list = Some(v);
        self
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn set_tag_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tag_list = input;
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn db_system_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_system_id = Some(input.into());
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_db_system_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.db_system_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DbClusterSnapshot`](crate::types::DbClusterSnapshot).
    pub fn build(self) -> crate::types::DbClusterSnapshot {
        crate::types::DbClusterSnapshot {
            availability_zones: self.availability_zones,
            db_cluster_snapshot_identifier: self.db_cluster_snapshot_identifier,
            db_cluster_identifier: self.db_cluster_identifier,
            snapshot_create_time: self.snapshot_create_time,
            engine: self.engine,
            engine_mode: self.engine_mode,
            allocated_storage: self.allocated_storage.unwrap_or_default(),
            status: self.status,
            port: self.port.unwrap_or_default(),
            vpc_id: self.vpc_id,
            cluster_create_time: self.cluster_create_time,
            master_username: self.master_username,
            engine_version: self.engine_version,
            license_model: self.license_model,
            snapshot_type: self.snapshot_type,
            percent_progress: self.percent_progress.unwrap_or_default(),
            storage_encrypted: self.storage_encrypted.unwrap_or_default(),
            kms_key_id: self.kms_key_id,
            db_cluster_snapshot_arn: self.db_cluster_snapshot_arn,
            source_db_cluster_snapshot_arn: self.source_db_cluster_snapshot_arn,
            iam_database_authentication_enabled: self
                .iam_database_authentication_enabled
                .unwrap_or_default(),
            tag_list: self.tag_list,
            db_system_id: self.db_system_id,
        }
    }
}
