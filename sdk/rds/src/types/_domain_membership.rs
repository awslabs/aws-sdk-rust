// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An Active Directory Domain membership record associated with the DB instance or cluster.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DomainMembership {
    /// <p>The identifier of the Active Directory Domain.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>The status of the Active Directory Domain membership for the DB instance or cluster. Values include <code>joined</code>, <code>pending-join</code>, <code>failed</code>, and so on.</p>
    pub status: ::std::option::Option<::std::string::String>,
    /// <p>The fully qualified domain name (FQDN) of the Active Directory Domain.</p>
    pub fqdn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the IAM role used when making API calls to the Directory Service.</p>
    pub iam_role_name: ::std::option::Option<::std::string::String>,
    /// <p>The Active Directory organizational unit for the DB instance or cluster.</p>
    pub ou: ::std::option::Option<::std::string::String>,
    /// <p>The ARN for the Secrets Manager secret with the credentials for the user that's a member of the domain.</p>
    pub auth_secret_arn: ::std::option::Option<::std::string::String>,
    /// <p>The IPv4 DNS IP addresses of the primary and secondary Active Directory domain controllers.</p>
    pub dns_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DomainMembership {
    /// <p>The identifier of the Active Directory Domain.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The status of the Active Directory Domain membership for the DB instance or cluster. Values include <code>joined</code>, <code>pending-join</code>, <code>failed</code>, and so on.</p>
    pub fn status(&self) -> ::std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The fully qualified domain name (FQDN) of the Active Directory Domain.</p>
    pub fn fqdn(&self) -> ::std::option::Option<&str> {
        self.fqdn.as_deref()
    }
    /// <p>The name of the IAM role used when making API calls to the Directory Service.</p>
    pub fn iam_role_name(&self) -> ::std::option::Option<&str> {
        self.iam_role_name.as_deref()
    }
    /// <p>The Active Directory organizational unit for the DB instance or cluster.</p>
    pub fn ou(&self) -> ::std::option::Option<&str> {
        self.ou.as_deref()
    }
    /// <p>The ARN for the Secrets Manager secret with the credentials for the user that's a member of the domain.</p>
    pub fn auth_secret_arn(&self) -> ::std::option::Option<&str> {
        self.auth_secret_arn.as_deref()
    }
    /// <p>The IPv4 DNS IP addresses of the primary and secondary Active Directory domain controllers.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dns_ips.is_none()`.
    pub fn dns_ips(&self) -> &[::std::string::String] {
        self.dns_ips.as_deref().unwrap_or_default()
    }
}
impl DomainMembership {
    /// Creates a new builder-style object to manufacture [`DomainMembership`](crate::types::DomainMembership).
    pub fn builder() -> crate::types::builders::DomainMembershipBuilder {
        crate::types::builders::DomainMembershipBuilder::default()
    }
}

/// A builder for [`DomainMembership`](crate::types::DomainMembership).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DomainMembershipBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<::std::string::String>,
    pub(crate) fqdn: ::std::option::Option<::std::string::String>,
    pub(crate) iam_role_name: ::std::option::Option<::std::string::String>,
    pub(crate) ou: ::std::option::Option<::std::string::String>,
    pub(crate) auth_secret_arn: ::std::option::Option<::std::string::String>,
    pub(crate) dns_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DomainMembershipBuilder {
    /// <p>The identifier of the Active Directory Domain.</p>
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Active Directory Domain.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The identifier of the Active Directory Domain.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The status of the Active Directory Domain membership for the DB instance or cluster. Values include <code>joined</code>, <code>pending-join</code>, <code>failed</code>, and so on.</p>
    pub fn status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the Active Directory Domain membership for the DB instance or cluster. Values include <code>joined</code>, <code>pending-join</code>, <code>failed</code>, and so on.</p>
    pub fn set_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the Active Directory Domain membership for the DB instance or cluster. Values include <code>joined</code>, <code>pending-join</code>, <code>failed</code>, and so on.</p>
    pub fn get_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.status
    }
    /// <p>The fully qualified domain name (FQDN) of the Active Directory Domain.</p>
    pub fn fqdn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fqdn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fully qualified domain name (FQDN) of the Active Directory Domain.</p>
    pub fn set_fqdn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fqdn = input;
        self
    }
    /// <p>The fully qualified domain name (FQDN) of the Active Directory Domain.</p>
    pub fn get_fqdn(&self) -> &::std::option::Option<::std::string::String> {
        &self.fqdn
    }
    /// <p>The name of the IAM role used when making API calls to the Directory Service.</p>
    pub fn iam_role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the IAM role used when making API calls to the Directory Service.</p>
    pub fn set_iam_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role_name = input;
        self
    }
    /// <p>The name of the IAM role used when making API calls to the Directory Service.</p>
    pub fn get_iam_role_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role_name
    }
    /// <p>The Active Directory organizational unit for the DB instance or cluster.</p>
    pub fn ou(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ou = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Active Directory organizational unit for the DB instance or cluster.</p>
    pub fn set_ou(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ou = input;
        self
    }
    /// <p>The Active Directory organizational unit for the DB instance or cluster.</p>
    pub fn get_ou(&self) -> &::std::option::Option<::std::string::String> {
        &self.ou
    }
    /// <p>The ARN for the Secrets Manager secret with the credentials for the user that's a member of the domain.</p>
    pub fn auth_secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.auth_secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for the Secrets Manager secret with the credentials for the user that's a member of the domain.</p>
    pub fn set_auth_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.auth_secret_arn = input;
        self
    }
    /// <p>The ARN for the Secrets Manager secret with the credentials for the user that's a member of the domain.</p>
    pub fn get_auth_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.auth_secret_arn
    }
    /// Appends an item to `dns_ips`.
    ///
    /// To override the contents of this collection use [`set_dns_ips`](Self::set_dns_ips).
    ///
    /// <p>The IPv4 DNS IP addresses of the primary and secondary Active Directory domain controllers.</p>
    pub fn dns_ips(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dns_ips.unwrap_or_default();
        v.push(input.into());
        self.dns_ips = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IPv4 DNS IP addresses of the primary and secondary Active Directory domain controllers.</p>
    pub fn set_dns_ips(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dns_ips = input;
        self
    }
    /// <p>The IPv4 DNS IP addresses of the primary and secondary Active Directory domain controllers.</p>
    pub fn get_dns_ips(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dns_ips
    }
    /// Consumes the builder and constructs a [`DomainMembership`](crate::types::DomainMembership).
    pub fn build(self) -> crate::types::DomainMembership {
        crate::types::DomainMembership {
            domain: self.domain,
            status: self.status,
            fqdn: self.fqdn,
            iam_role_name: self.iam_role_name,
            ou: self.ou,
            auth_secret_arn: self.auth_secret_arn,
            dns_ips: self.dns_ips,
        }
    }
}
