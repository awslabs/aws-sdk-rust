// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A logical grouping of Performance Insights metrics for a related subject area. For example, the <code>db.sql</code> dimension group consists of the following dimensions:</p>
/// <ul>
/// <li>
/// <p><code>db.sql.id</code> - The hash of a running SQL statement, generated by Performance Insights.</p></li>
/// <li>
/// <p><code>db.sql.db_id</code> - Either the SQL ID generated by the database engine, or a value generated by Performance Insights that begins with <code>pi-</code>.</p></li>
/// <li>
/// <p><code>db.sql.statement</code> - The full text of the SQL statement that is running, for example, <code>SELECT * FROM employees</code>.</p></li>
/// <li>
/// <p><code>db.sql_tokenized.id</code> - The hash of the SQL digest generated by Performance Insights.</p></li>
/// </ul><note>
/// <p>Each response element returns a maximum of 500 bytes. For larger elements, such as SQL statements, only the first 500 bytes are returned.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PerformanceInsightsMetricDimensionGroup {
    /// <p>A list of specific dimensions from a dimension group. If this list isn't included, then all of the dimensions in the group were requested, or are present in the response.</p>
    pub dimensions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The available dimension groups for Performance Insights metric type.</p>
    pub group: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of items to fetch for this dimension group.</p>
    pub limit: ::std::option::Option<i32>,
}
impl PerformanceInsightsMetricDimensionGroup {
    /// <p>A list of specific dimensions from a dimension group. If this list isn't included, then all of the dimensions in the group were requested, or are present in the response.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dimensions.is_none()`.
    pub fn dimensions(&self) -> &[::std::string::String] {
        self.dimensions.as_deref().unwrap_or_default()
    }
    /// <p>The available dimension groups for Performance Insights metric type.</p>
    pub fn group(&self) -> ::std::option::Option<&str> {
        self.group.as_deref()
    }
    /// <p>The maximum number of items to fetch for this dimension group.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
}
impl PerformanceInsightsMetricDimensionGroup {
    /// Creates a new builder-style object to manufacture [`PerformanceInsightsMetricDimensionGroup`](crate::types::PerformanceInsightsMetricDimensionGroup).
    pub fn builder() -> crate::types::builders::PerformanceInsightsMetricDimensionGroupBuilder {
        crate::types::builders::PerformanceInsightsMetricDimensionGroupBuilder::default()
    }
}

/// A builder for [`PerformanceInsightsMetricDimensionGroup`](crate::types::PerformanceInsightsMetricDimensionGroup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PerformanceInsightsMetricDimensionGroupBuilder {
    pub(crate) dimensions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) group: ::std::option::Option<::std::string::String>,
    pub(crate) limit: ::std::option::Option<i32>,
}
impl PerformanceInsightsMetricDimensionGroupBuilder {
    /// Appends an item to `dimensions`.
    ///
    /// To override the contents of this collection use [`set_dimensions`](Self::set_dimensions).
    ///
    /// <p>A list of specific dimensions from a dimension group. If this list isn't included, then all of the dimensions in the group were requested, or are present in the response.</p>
    pub fn dimensions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dimensions.unwrap_or_default();
        v.push(input.into());
        self.dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of specific dimensions from a dimension group. If this list isn't included, then all of the dimensions in the group were requested, or are present in the response.</p>
    pub fn set_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dimensions = input;
        self
    }
    /// <p>A list of specific dimensions from a dimension group. If this list isn't included, then all of the dimensions in the group were requested, or are present in the response.</p>
    pub fn get_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dimensions
    }
    /// <p>The available dimension groups for Performance Insights metric type.</p>
    pub fn group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The available dimension groups for Performance Insights metric type.</p>
    pub fn set_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group = input;
        self
    }
    /// <p>The available dimension groups for Performance Insights metric type.</p>
    pub fn get_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.group
    }
    /// <p>The maximum number of items to fetch for this dimension group.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to fetch for this dimension group.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The maximum number of items to fetch for this dimension group.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// Consumes the builder and constructs a [`PerformanceInsightsMetricDimensionGroup`](crate::types::PerformanceInsightsMetricDimensionGroup).
    pub fn build(self) -> crate::types::PerformanceInsightsMetricDimensionGroup {
        crate::types::PerformanceInsightsMetricDimensionGroup {
            dimensions: self.dimensions,
            group: self.group,
            limit: self.limit,
        }
    }
}
