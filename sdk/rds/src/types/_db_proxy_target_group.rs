// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a set of RDS DB instances, Aurora DB clusters, or both that a proxy can connect to. Currently, each target group is associated with exactly one RDS DB instance or Aurora DB cluster.</p>
/// <p>This data type is used as a response element in the <code>DescribeDBProxyTargetGroups</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DbProxyTargetGroup {
    /// <p>The identifier for the RDS proxy associated with this target group.</p>
    #[doc(hidden)]
    pub db_proxy_name: std::option::Option<std::string::String>,
    /// <p>The identifier for the target group. This name must be unique for all target groups owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub target_group_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) representing the target group.</p>
    #[doc(hidden)]
    pub target_group_arn: std::option::Option<std::string::String>,
    /// <p>Whether this target group is the first one used for connection requests by the associated proxy. Because each proxy is currently associated with a single target group, currently this setting is always <code>true</code>.</p>
    #[doc(hidden)]
    pub is_default: bool,
    /// <p>The current status of this target group. A status of <code>available</code> means the target group is correctly associated with a database. Other values indicate that you must wait for the target group to be ready, or take some action to resolve an issue.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The settings that determine the size and behavior of the connection pool for the target group.</p>
    #[doc(hidden)]
    pub connection_pool_config: std::option::Option<crate::types::ConnectionPoolConfigurationInfo>,
    /// <p>The date and time when the target group was first created.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date and time when the target group was last updated.</p>
    #[doc(hidden)]
    pub updated_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl DbProxyTargetGroup {
    /// <p>The identifier for the RDS proxy associated with this target group.</p>
    pub fn db_proxy_name(&self) -> std::option::Option<&str> {
        self.db_proxy_name.as_deref()
    }
    /// <p>The identifier for the target group. This name must be unique for all target groups owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    pub fn target_group_name(&self) -> std::option::Option<&str> {
        self.target_group_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) representing the target group.</p>
    pub fn target_group_arn(&self) -> std::option::Option<&str> {
        self.target_group_arn.as_deref()
    }
    /// <p>Whether this target group is the first one used for connection requests by the associated proxy. Because each proxy is currently associated with a single target group, currently this setting is always <code>true</code>.</p>
    pub fn is_default(&self) -> bool {
        self.is_default
    }
    /// <p>The current status of this target group. A status of <code>available</code> means the target group is correctly associated with a database. Other values indicate that you must wait for the target group to be ready, or take some action to resolve an issue.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The settings that determine the size and behavior of the connection pool for the target group.</p>
    pub fn connection_pool_config(
        &self,
    ) -> std::option::Option<&crate::types::ConnectionPoolConfigurationInfo> {
        self.connection_pool_config.as_ref()
    }
    /// <p>The date and time when the target group was first created.</p>
    pub fn created_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p>The date and time when the target group was last updated.</p>
    pub fn updated_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_date.as_ref()
    }
}
impl DbProxyTargetGroup {
    /// Creates a new builder-style object to manufacture [`DbProxyTargetGroup`](crate::types::DbProxyTargetGroup).
    pub fn builder() -> crate::types::builders::DbProxyTargetGroupBuilder {
        crate::types::builders::DbProxyTargetGroupBuilder::default()
    }
}

/// A builder for [`DbProxyTargetGroup`](crate::types::DbProxyTargetGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DbProxyTargetGroupBuilder {
    pub(crate) db_proxy_name: std::option::Option<std::string::String>,
    pub(crate) target_group_name: std::option::Option<std::string::String>,
    pub(crate) target_group_arn: std::option::Option<std::string::String>,
    pub(crate) is_default: std::option::Option<bool>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) connection_pool_config:
        std::option::Option<crate::types::ConnectionPoolConfigurationInfo>,
    pub(crate) created_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl DbProxyTargetGroupBuilder {
    /// <p>The identifier for the RDS proxy associated with this target group.</p>
    pub fn db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_proxy_name = Some(input.into());
        self
    }
    /// <p>The identifier for the RDS proxy associated with this target group.</p>
    pub fn set_db_proxy_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.db_proxy_name = input;
        self
    }
    /// <p>The identifier for the target group. This name must be unique for all target groups owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    pub fn target_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_group_name = Some(input.into());
        self
    }
    /// <p>The identifier for the target group. This name must be unique for all target groups owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    pub fn set_target_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_group_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) representing the target group.</p>
    pub fn target_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_group_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) representing the target group.</p>
    pub fn set_target_group_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_group_arn = input;
        self
    }
    /// <p>Whether this target group is the first one used for connection requests by the associated proxy. Because each proxy is currently associated with a single target group, currently this setting is always <code>true</code>.</p>
    pub fn is_default(mut self, input: bool) -> Self {
        self.is_default = Some(input);
        self
    }
    /// <p>Whether this target group is the first one used for connection requests by the associated proxy. Because each proxy is currently associated with a single target group, currently this setting is always <code>true</code>.</p>
    pub fn set_is_default(mut self, input: std::option::Option<bool>) -> Self {
        self.is_default = input;
        self
    }
    /// <p>The current status of this target group. A status of <code>available</code> means the target group is correctly associated with a database. Other values indicate that you must wait for the target group to be ready, or take some action to resolve an issue.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The current status of this target group. A status of <code>available</code> means the target group is correctly associated with a database. Other values indicate that you must wait for the target group to be ready, or take some action to resolve an issue.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The settings that determine the size and behavior of the connection pool for the target group.</p>
    pub fn connection_pool_config(
        mut self,
        input: crate::types::ConnectionPoolConfigurationInfo,
    ) -> Self {
        self.connection_pool_config = Some(input);
        self
    }
    /// <p>The settings that determine the size and behavior of the connection pool for the target group.</p>
    pub fn set_connection_pool_config(
        mut self,
        input: std::option::Option<crate::types::ConnectionPoolConfigurationInfo>,
    ) -> Self {
        self.connection_pool_config = input;
        self
    }
    /// <p>The date and time when the target group was first created.</p>
    pub fn created_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_date = Some(input);
        self
    }
    /// <p>The date and time when the target group was first created.</p>
    pub fn set_created_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The date and time when the target group was last updated.</p>
    pub fn updated_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_date = Some(input);
        self
    }
    /// <p>The date and time when the target group was last updated.</p>
    pub fn set_updated_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_date = input;
        self
    }
    /// Consumes the builder and constructs a [`DbProxyTargetGroup`](crate::types::DbProxyTargetGroup).
    pub fn build(self) -> crate::types::DbProxyTargetGroup {
        crate::types::DbProxyTargetGroup {
            db_proxy_name: self.db_proxy_name,
            target_group_name: self.target_group_name,
            target_group_arn: self.target_group_arn,
            is_default: self.is_default.unwrap_or_default(),
            status: self.status,
            connection_pool_config: self.connection_pool_config,
            created_date: self.created_date,
            updated_date: self.updated_date,
        }
    }
}
