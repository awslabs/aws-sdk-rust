// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Returns the details of authentication used by a proxy to log in as a specific database user.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UserAuthConfigInfo {
    /// <p>A user-specified description about the authentication used by a proxy to log in as a specific database user.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The name of the database user to which the proxy connects.</p>
    #[doc(hidden)]
    pub user_name: std::option::Option<std::string::String>,
    /// <p>The type of authentication that the proxy uses for connections from the proxy to the underlying database.</p>
    #[doc(hidden)]
    pub auth_scheme: std::option::Option<crate::types::AuthScheme>,
    /// <p>The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.</p>
    #[doc(hidden)]
    pub secret_arn: std::option::Option<std::string::String>,
    /// <p>Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy. The <code>ENABLED</code> value is valid only for proxies with RDS for Microsoft SQL Server.</p>
    #[doc(hidden)]
    pub iam_auth: std::option::Option<crate::types::IamAuthMode>,
    /// <p>The type of authentication the proxy uses for connections from clients.</p>
    #[doc(hidden)]
    pub client_password_auth_type: std::option::Option<crate::types::ClientPasswordAuthType>,
}
impl UserAuthConfigInfo {
    /// <p>A user-specified description about the authentication used by a proxy to log in as a specific database user.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the database user to which the proxy connects.</p>
    pub fn user_name(&self) -> std::option::Option<&str> {
        self.user_name.as_deref()
    }
    /// <p>The type of authentication that the proxy uses for connections from the proxy to the underlying database.</p>
    pub fn auth_scheme(&self) -> std::option::Option<&crate::types::AuthScheme> {
        self.auth_scheme.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.</p>
    pub fn secret_arn(&self) -> std::option::Option<&str> {
        self.secret_arn.as_deref()
    }
    /// <p>Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy. The <code>ENABLED</code> value is valid only for proxies with RDS for Microsoft SQL Server.</p>
    pub fn iam_auth(&self) -> std::option::Option<&crate::types::IamAuthMode> {
        self.iam_auth.as_ref()
    }
    /// <p>The type of authentication the proxy uses for connections from clients.</p>
    pub fn client_password_auth_type(
        &self,
    ) -> std::option::Option<&crate::types::ClientPasswordAuthType> {
        self.client_password_auth_type.as_ref()
    }
}
impl UserAuthConfigInfo {
    /// Creates a new builder-style object to manufacture [`UserAuthConfigInfo`](crate::types::UserAuthConfigInfo).
    pub fn builder() -> crate::types::builders::UserAuthConfigInfoBuilder {
        crate::types::builders::UserAuthConfigInfoBuilder::default()
    }
}

/// A builder for [`UserAuthConfigInfo`](crate::types::UserAuthConfigInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UserAuthConfigInfoBuilder {
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) user_name: std::option::Option<std::string::String>,
    pub(crate) auth_scheme: std::option::Option<crate::types::AuthScheme>,
    pub(crate) secret_arn: std::option::Option<std::string::String>,
    pub(crate) iam_auth: std::option::Option<crate::types::IamAuthMode>,
    pub(crate) client_password_auth_type: std::option::Option<crate::types::ClientPasswordAuthType>,
}
impl UserAuthConfigInfoBuilder {
    /// <p>A user-specified description about the authentication used by a proxy to log in as a specific database user.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A user-specified description about the authentication used by a proxy to log in as a specific database user.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The name of the database user to which the proxy connects.</p>
    pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_name = Some(input.into());
        self
    }
    /// <p>The name of the database user to which the proxy connects.</p>
    pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_name = input;
        self
    }
    /// <p>The type of authentication that the proxy uses for connections from the proxy to the underlying database.</p>
    pub fn auth_scheme(mut self, input: crate::types::AuthScheme) -> Self {
        self.auth_scheme = Some(input);
        self
    }
    /// <p>The type of authentication that the proxy uses for connections from the proxy to the underlying database.</p>
    pub fn set_auth_scheme(mut self, input: std::option::Option<crate::types::AuthScheme>) -> Self {
        self.auth_scheme = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.</p>
    pub fn secret_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.secret_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) representing the secret that the proxy uses to authenticate to the RDS DB instance or Aurora DB cluster. These secrets are stored within Amazon Secrets Manager.</p>
    pub fn set_secret_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.secret_arn = input;
        self
    }
    /// <p>Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy. The <code>ENABLED</code> value is valid only for proxies with RDS for Microsoft SQL Server.</p>
    pub fn iam_auth(mut self, input: crate::types::IamAuthMode) -> Self {
        self.iam_auth = Some(input);
        self
    }
    /// <p>Whether to require or disallow Amazon Web Services Identity and Access Management (IAM) authentication for connections to the proxy. The <code>ENABLED</code> value is valid only for proxies with RDS for Microsoft SQL Server.</p>
    pub fn set_iam_auth(mut self, input: std::option::Option<crate::types::IamAuthMode>) -> Self {
        self.iam_auth = input;
        self
    }
    /// <p>The type of authentication the proxy uses for connections from clients.</p>
    pub fn client_password_auth_type(
        mut self,
        input: crate::types::ClientPasswordAuthType,
    ) -> Self {
        self.client_password_auth_type = Some(input);
        self
    }
    /// <p>The type of authentication the proxy uses for connections from clients.</p>
    pub fn set_client_password_auth_type(
        mut self,
        input: std::option::Option<crate::types::ClientPasswordAuthType>,
    ) -> Self {
        self.client_password_auth_type = input;
        self
    }
    /// Consumes the builder and constructs a [`UserAuthConfigInfo`](crate::types::UserAuthConfigInfo).
    pub fn build(self) -> crate::types::UserAuthConfigInfo {
        crate::types::UserAuthConfigInfo {
            description: self.description,
            user_name: self.user_name,
            auth_scheme: self.auth_scheme,
            secret_arn: self.secret_arn,
            iam_auth: self.iam_auth,
            client_password_auth_type: self.client_password_auth_type,
        }
    }
}
