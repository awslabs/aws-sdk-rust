// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details of an Amazon Aurora DB cluster or Multi-AZ DB cluster.</p>
/// <p>For an Amazon Aurora DB cluster, this data type is used as a response element in the operations <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>, <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>PromoteReadReplicaDBCluster</code>, <code>RestoreDBClusterFromS3</code>, <code>RestoreDBClusterFromSnapshot</code>, <code>RestoreDBClusterToPointInTime</code>, <code>StartDBCluster</code>, and <code>StopDBCluster</code>.</p>
/// <p>For a Multi-AZ DB cluster, this data type is used as a response element in the operations <code>CreateDBCluster</code>, <code>DeleteDBCluster</code>, <code>DescribeDBClusters</code>, <code>FailoverDBCluster</code>, <code>ModifyDBCluster</code>, <code>RebootDBCluster</code>, <code>RestoreDBClusterFromSnapshot</code>, and <code>RestoreDBClusterToPointInTime</code>.</p>
/// <p>For more information on Amazon Aurora DB clusters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide.</i> </p>
/// <p>For more information on Multi-AZ DB clusters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html"> Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i> </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DbCluster {
    /// <p>For all database engines except Amazon Aurora, <code>AllocatedStorage</code> specifies the allocated storage size in gibibytes (GiB). For Aurora, <code>AllocatedStorage</code> always returns 1, because Aurora DB cluster storage size isn't fixed, but instead automatically adjusts as needed.</p>
    #[doc(hidden)]
    pub allocated_storage: std::option::Option<i32>,
    /// <p>Provides the list of Availability Zones (AZs) where instances in the DB cluster can be created.</p>
    #[doc(hidden)]
    pub availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies the number of days for which automatic DB snapshots are retained.</p>
    #[doc(hidden)]
    pub backup_retention_period: std::option::Option<i32>,
    /// <p>If present, specifies the name of the character set that this cluster is associated with.</p>
    #[doc(hidden)]
    pub character_set_name: std::option::Option<std::string::String>,
    /// <p>Contains the name of the initial database of this DB cluster that was provided at create time, if one was specified when the DB cluster was created. This same name is returned for the life of the DB cluster.</p>
    #[doc(hidden)]
    pub database_name: std::option::Option<std::string::String>,
    /// <p>Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.</p>
    #[doc(hidden)]
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>Specifies the name of the DB cluster parameter group for the DB cluster.</p>
    #[doc(hidden)]
    pub db_cluster_parameter_group: std::option::Option<std::string::String>,
    /// <p>Specifies information on the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group.</p>
    #[doc(hidden)]
    pub db_subnet_group: std::option::Option<std::string::String>,
    /// <p>Specifies the current state of this DB cluster.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The time when a stopped DB cluster is restarted automatically.</p>
    #[doc(hidden)]
    pub automatic_restart_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Specifies the progress of the operation as a percentage.</p>
    #[doc(hidden)]
    pub percent_progress: std::option::Option<std::string::String>,
    /// <p>The earliest time to which a database can be restored with point-in-time restore.</p>
    #[doc(hidden)]
    pub earliest_restorable_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Specifies the connection endpoint for the primary instance of the DB cluster.</p>
    #[doc(hidden)]
    pub endpoint: std::option::Option<std::string::String>,
    /// <p>The reader endpoint for the DB cluster. The reader endpoint for a DB cluster load-balances connections across the Aurora Replicas that are available in a DB cluster. As clients request new connections to the reader endpoint, Aurora distributes the connection requests among the Aurora Replicas in the DB cluster. This functionality can help balance your read workload across multiple Aurora Replicas in your DB cluster.</p>
    /// <p>If a failover occurs, and the Aurora Replica that you are connected to is promoted to be the primary instance, your connection is dropped. To continue sending your read workload to other Aurora Replicas in the cluster, you can then reconnect to the reader endpoint.</p>
    #[doc(hidden)]
    pub reader_endpoint: std::option::Option<std::string::String>,
    /// <p>Identifies all custom endpoints associated with the cluster.</p>
    #[doc(hidden)]
    pub custom_endpoints: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies whether the DB cluster has instances in multiple Availability Zones.</p>
    #[doc(hidden)]
    pub multi_az: std::option::Option<bool>,
    /// <p>The name of the database engine to be used for this DB cluster.</p>
    #[doc(hidden)]
    pub engine: std::option::Option<std::string::String>,
    /// <p>Indicates the database engine version.</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>Specifies the latest time to which a database can be restored with point-in-time restore.</p>
    #[doc(hidden)]
    pub latest_restorable_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Specifies the port that the database engine is listening on.</p>
    #[doc(hidden)]
    pub port: std::option::Option<i32>,
    /// <p>Contains the master username for the DB cluster.</p>
    #[doc(hidden)]
    pub master_username: std::option::Option<std::string::String>,
    /// <p>Provides the list of option group memberships for this DB cluster.</p>
    #[doc(hidden)]
    pub db_cluster_option_group_memberships:
        std::option::Option<std::vec::Vec<crate::types::DbClusterOptionGroupStatus>>,
    /// <p>Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>.</p>
    #[doc(hidden)]
    pub preferred_backup_window: std::option::Option<std::string::String>,
    /// <p>Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    #[doc(hidden)]
    pub preferred_maintenance_window: std::option::Option<std::string::String>,
    /// <p>Contains the identifier of the source DB cluster if this DB cluster is a read replica.</p>
    #[doc(hidden)]
    pub replication_source_identifier: std::option::Option<std::string::String>,
    /// <p>Contains one or more identifiers of the read replicas associated with this DB cluster.</p>
    #[doc(hidden)]
    pub read_replica_identifiers: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Provides the list of instances that make up the DB cluster.</p>
    #[doc(hidden)]
    pub db_cluster_members: std::option::Option<std::vec::Vec<crate::types::DbClusterMember>>,
    /// <p>Provides a list of VPC security groups that the DB cluster belongs to.</p>
    #[doc(hidden)]
    pub vpc_security_groups:
        std::option::Option<std::vec::Vec<crate::types::VpcSecurityGroupMembership>>,
    /// <p>Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.</p>
    #[doc(hidden)]
    pub hosted_zone_id: std::option::Option<std::string::String>,
    /// <p>Specifies whether the DB cluster is encrypted.</p>
    #[doc(hidden)]
    pub storage_encrypted: bool,
    /// <p>If <code>StorageEncrypted</code> is enabled, the Amazon Web Services KMS key identifier for the encrypted DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services Region-unique, immutable identifier for the DB cluster. This identifier is found in Amazon Web Services CloudTrail log entries whenever the KMS key for the DB cluster is accessed.</p>
    #[doc(hidden)]
    pub db_cluster_resource_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) for the DB cluster.</p>
    #[doc(hidden)]
    pub db_cluster_arn: std::option::Option<std::string::String>,
    /// <p>Provides a list of the Amazon Web Services Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other Amazon Web Services on your behalf.</p>
    #[doc(hidden)]
    pub associated_roles: std::option::Option<std::vec::Vec<crate::types::DbClusterRole>>,
    /// <p>A value that indicates whether the mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
    #[doc(hidden)]
    pub iam_database_authentication_enabled: std::option::Option<bool>,
    /// <p>Identifies the clone group to which the DB cluster is associated.</p>
    #[doc(hidden)]
    pub clone_group_id: std::option::Option<std::string::String>,
    /// <p>Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
    #[doc(hidden)]
    pub cluster_create_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The earliest time to which a DB cluster can be backtracked.</p>
    #[doc(hidden)]
    pub earliest_backtrack_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The target backtrack window, in seconds. If this value is set to 0, backtracking is disabled for the DB cluster. Otherwise, backtracking is enabled.</p>
    #[doc(hidden)]
    pub backtrack_window: std::option::Option<i64>,
    /// <p>The number of change records stored for Backtrack.</p>
    #[doc(hidden)]
    pub backtrack_consumed_change_records: std::option::Option<i64>,
    /// <p>A list of log types that this DB cluster is configured to export to CloudWatch Logs.</p>
    /// <p>Log types vary by DB engine. For information about the log types for each DB engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html">Amazon RDS Database Log Files</a> in the <i>Amazon Aurora User Guide.</i> </p>
    #[doc(hidden)]
    pub enabled_cloudwatch_logs_exports: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The current capacity of an Aurora Serverless v1 DB cluster. The capacity is 0 (zero) when the cluster is paused.</p>
    /// <p>For more information about Aurora Serverless v1, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
    #[doc(hidden)]
    pub capacity: std::option::Option<i32>,
    /// <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html"> CreateDBCluster</a>.</p>
    #[doc(hidden)]
    pub engine_mode: std::option::Option<std::string::String>,
    /// <p>Shows the scaling configuration for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
    #[doc(hidden)]
    pub scaling_configuration_info: std::option::Option<crate::types::ScalingConfigurationInfo>,
    /// <p>Indicates if the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled.</p>
    #[doc(hidden)]
    pub deletion_protection: std::option::Option<bool>,
    /// <p>A value that indicates whether the HTTP endpoint for an Aurora Serverless v1 DB cluster is enabled.</p>
    /// <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless v1 DB cluster. You can also query your database from inside the RDS console with the query editor.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
    #[doc(hidden)]
    pub http_endpoint_enabled: std::option::Option<bool>,
    /// <p>The mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously.</p>
    #[doc(hidden)]
    pub activity_stream_mode: std::option::Option<crate::types::ActivityStreamMode>,
    /// <p>The status of the database activity stream.</p>
    #[doc(hidden)]
    pub activity_stream_status: std::option::Option<crate::types::ActivityStreamStatus>,
    /// <p>The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    #[doc(hidden)]
    pub activity_stream_kms_key_id: std::option::Option<std::string::String>,
    /// <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
    #[doc(hidden)]
    pub activity_stream_kinesis_stream_name: std::option::Option<std::string::String>,
    /// <p>Specifies whether tags are copied from the DB cluster to snapshots of the DB cluster.</p>
    #[doc(hidden)]
    pub copy_tags_to_snapshot: std::option::Option<bool>,
    /// <p>Specifies whether the DB cluster is a clone of a DB cluster owned by a different Amazon Web Services account.</p>
    #[doc(hidden)]
    pub cross_account_clone: std::option::Option<bool>,
    /// <p>The Active Directory Domain membership records associated with the DB cluster.</p>
    #[doc(hidden)]
    pub domain_memberships: std::option::Option<std::vec::Vec<crate::types::DomainMembership>>,
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    #[doc(hidden)]
    pub tag_list: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>Specifies whether a secondary cluster in an Aurora global database has write forwarding enabled, not enabled, or is in the process of enabling it.</p>
    #[doc(hidden)]
    pub global_write_forwarding_status: std::option::Option<crate::types::WriteForwardingStatus>,
    /// <p>Specifies whether you have requested to enable write forwarding for a secondary cluster in an Aurora global database. Because write forwarding takes time to enable, check the value of <code>GlobalWriteForwardingStatus</code> to confirm that the request has completed before using the write forwarding feature for this cluster.</p>
    #[doc(hidden)]
    pub global_write_forwarding_requested: std::option::Option<bool>,
    /// <p>A value that specifies that changes to the DB cluster are pending. This element is only included when changes are pending. Specific changes are identified by subelements.</p>
    #[doc(hidden)]
    pub pending_modified_values: std::option::Option<crate::types::ClusterPendingModifiedValues>,
    /// <p>The name of the compute and memory capacity class of the DB instance.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    #[doc(hidden)]
    pub db_cluster_instance_class: std::option::Option<std::string::String>,
    /// <p>The storage type associated with the DB cluster.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    #[doc(hidden)]
    pub storage_type: std::option::Option<std::string::String>,
    /// <p>The Provisioned IOPS (I/O operations per second) value.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    #[doc(hidden)]
    pub iops: std::option::Option<i32>,
    /// <p>Specifies the accessibility options for the DB instance.</p>
    /// <p>When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB instance's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    #[doc(hidden)]
    pub publicly_accessible: std::option::Option<bool>,
    /// <p>A value that indicates that minor version patches are applied automatically.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    #[doc(hidden)]
    pub auto_minor_version_upgrade: bool,
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    #[doc(hidden)]
    pub monitoring_interval: std::option::Option<i32>,
    /// <p>The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    #[doc(hidden)]
    pub monitoring_role_arn: std::option::Option<std::string::String>,
    /// <p>True if Performance Insights is enabled for the DB cluster, and otherwise false.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    #[doc(hidden)]
    pub performance_insights_enabled: std::option::Option<bool>,
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    #[doc(hidden)]
    pub performance_insights_kms_key_id: std::option::Option<std::string::String>,
    /// <p>The number of days to retain Performance Insights data. The default is 7 days. The following values are valid:</p>
    /// <ul>
    /// <li> <p>7</p> </li>
    /// <li> <p> <i>month</i> * 31, where <i>month</i> is a number of months from 1-23</p> </li>
    /// <li> <p>731</p> </li>
    /// </ul>
    /// <p>For example, the following values are valid:</p>
    /// <ul>
    /// <li> <p>93 (3 months * 31)</p> </li>
    /// <li> <p>341 (11 months * 31)</p> </li>
    /// <li> <p>589 (19 months * 31)</p> </li>
    /// <li> <p>731</p> </li>
    /// </ul>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    #[doc(hidden)]
    pub performance_insights_retention_period: std::option::Option<i32>,
    /// <p>Shows the scaling configuration for an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    #[doc(hidden)]
    pub serverless_v2_scaling_configuration:
        std::option::Option<crate::types::ServerlessV2ScalingConfigurationInfo>,
    /// <p>The network type of the DB instance.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p> <code>IPV4</code> </p> </li>
    /// <li> <p> <code>DUAL</code> </p> </li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>This setting is only for Aurora DB clusters.</p>
    #[doc(hidden)]
    pub network_type: std::option::Option<std::string::String>,
    /// <p>Reserved for future use.</p>
    #[doc(hidden)]
    pub db_system_id: std::option::Option<std::string::String>,
    /// <p>Contains the secret managed by RDS in Amazon Web Services Secrets Manager for the master user password.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon Aurora User Guide.</i> </p>
    #[doc(hidden)]
    pub master_user_secret: std::option::Option<crate::types::MasterUserSecret>,
}
impl DbCluster {
    /// <p>For all database engines except Amazon Aurora, <code>AllocatedStorage</code> specifies the allocated storage size in gibibytes (GiB). For Aurora, <code>AllocatedStorage</code> always returns 1, because Aurora DB cluster storage size isn't fixed, but instead automatically adjusts as needed.</p>
    pub fn allocated_storage(&self) -> std::option::Option<i32> {
        self.allocated_storage
    }
    /// <p>Provides the list of Availability Zones (AZs) where instances in the DB cluster can be created.</p>
    pub fn availability_zones(&self) -> std::option::Option<&[std::string::String]> {
        self.availability_zones.as_deref()
    }
    /// <p>Specifies the number of days for which automatic DB snapshots are retained.</p>
    pub fn backup_retention_period(&self) -> std::option::Option<i32> {
        self.backup_retention_period
    }
    /// <p>If present, specifies the name of the character set that this cluster is associated with.</p>
    pub fn character_set_name(&self) -> std::option::Option<&str> {
        self.character_set_name.as_deref()
    }
    /// <p>Contains the name of the initial database of this DB cluster that was provided at create time, if one was specified when the DB cluster was created. This same name is returned for the life of the DB cluster.</p>
    pub fn database_name(&self) -> std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.</p>
    pub fn db_cluster_identifier(&self) -> std::option::Option<&str> {
        self.db_cluster_identifier.as_deref()
    }
    /// <p>Specifies the name of the DB cluster parameter group for the DB cluster.</p>
    pub fn db_cluster_parameter_group(&self) -> std::option::Option<&str> {
        self.db_cluster_parameter_group.as_deref()
    }
    /// <p>Specifies information on the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group.</p>
    pub fn db_subnet_group(&self) -> std::option::Option<&str> {
        self.db_subnet_group.as_deref()
    }
    /// <p>Specifies the current state of this DB cluster.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The time when a stopped DB cluster is restarted automatically.</p>
    pub fn automatic_restart_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.automatic_restart_time.as_ref()
    }
    /// <p>Specifies the progress of the operation as a percentage.</p>
    pub fn percent_progress(&self) -> std::option::Option<&str> {
        self.percent_progress.as_deref()
    }
    /// <p>The earliest time to which a database can be restored with point-in-time restore.</p>
    pub fn earliest_restorable_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.earliest_restorable_time.as_ref()
    }
    /// <p>Specifies the connection endpoint for the primary instance of the DB cluster.</p>
    pub fn endpoint(&self) -> std::option::Option<&str> {
        self.endpoint.as_deref()
    }
    /// <p>The reader endpoint for the DB cluster. The reader endpoint for a DB cluster load-balances connections across the Aurora Replicas that are available in a DB cluster. As clients request new connections to the reader endpoint, Aurora distributes the connection requests among the Aurora Replicas in the DB cluster. This functionality can help balance your read workload across multiple Aurora Replicas in your DB cluster.</p>
    /// <p>If a failover occurs, and the Aurora Replica that you are connected to is promoted to be the primary instance, your connection is dropped. To continue sending your read workload to other Aurora Replicas in the cluster, you can then reconnect to the reader endpoint.</p>
    pub fn reader_endpoint(&self) -> std::option::Option<&str> {
        self.reader_endpoint.as_deref()
    }
    /// <p>Identifies all custom endpoints associated with the cluster.</p>
    pub fn custom_endpoints(&self) -> std::option::Option<&[std::string::String]> {
        self.custom_endpoints.as_deref()
    }
    /// <p>Specifies whether the DB cluster has instances in multiple Availability Zones.</p>
    pub fn multi_az(&self) -> std::option::Option<bool> {
        self.multi_az
    }
    /// <p>The name of the database engine to be used for this DB cluster.</p>
    pub fn engine(&self) -> std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>Indicates the database engine version.</p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>Specifies the latest time to which a database can be restored with point-in-time restore.</p>
    pub fn latest_restorable_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.latest_restorable_time.as_ref()
    }
    /// <p>Specifies the port that the database engine is listening on.</p>
    pub fn port(&self) -> std::option::Option<i32> {
        self.port
    }
    /// <p>Contains the master username for the DB cluster.</p>
    pub fn master_username(&self) -> std::option::Option<&str> {
        self.master_username.as_deref()
    }
    /// <p>Provides the list of option group memberships for this DB cluster.</p>
    pub fn db_cluster_option_group_memberships(
        &self,
    ) -> std::option::Option<&[crate::types::DbClusterOptionGroupStatus]> {
        self.db_cluster_option_group_memberships.as_deref()
    }
    /// <p>Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>.</p>
    pub fn preferred_backup_window(&self) -> std::option::Option<&str> {
        self.preferred_backup_window.as_deref()
    }
    /// <p>Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    pub fn preferred_maintenance_window(&self) -> std::option::Option<&str> {
        self.preferred_maintenance_window.as_deref()
    }
    /// <p>Contains the identifier of the source DB cluster if this DB cluster is a read replica.</p>
    pub fn replication_source_identifier(&self) -> std::option::Option<&str> {
        self.replication_source_identifier.as_deref()
    }
    /// <p>Contains one or more identifiers of the read replicas associated with this DB cluster.</p>
    pub fn read_replica_identifiers(&self) -> std::option::Option<&[std::string::String]> {
        self.read_replica_identifiers.as_deref()
    }
    /// <p>Provides the list of instances that make up the DB cluster.</p>
    pub fn db_cluster_members(&self) -> std::option::Option<&[crate::types::DbClusterMember]> {
        self.db_cluster_members.as_deref()
    }
    /// <p>Provides a list of VPC security groups that the DB cluster belongs to.</p>
    pub fn vpc_security_groups(
        &self,
    ) -> std::option::Option<&[crate::types::VpcSecurityGroupMembership]> {
        self.vpc_security_groups.as_deref()
    }
    /// <p>Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.</p>
    pub fn hosted_zone_id(&self) -> std::option::Option<&str> {
        self.hosted_zone_id.as_deref()
    }
    /// <p>Specifies whether the DB cluster is encrypted.</p>
    pub fn storage_encrypted(&self) -> bool {
        self.storage_encrypted
    }
    /// <p>If <code>StorageEncrypted</code> is enabled, the Amazon Web Services KMS key identifier for the encrypted DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The Amazon Web Services Region-unique, immutable identifier for the DB cluster. This identifier is found in Amazon Web Services CloudTrail log entries whenever the KMS key for the DB cluster is accessed.</p>
    pub fn db_cluster_resource_id(&self) -> std::option::Option<&str> {
        self.db_cluster_resource_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) for the DB cluster.</p>
    pub fn db_cluster_arn(&self) -> std::option::Option<&str> {
        self.db_cluster_arn.as_deref()
    }
    /// <p>Provides a list of the Amazon Web Services Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other Amazon Web Services on your behalf.</p>
    pub fn associated_roles(&self) -> std::option::Option<&[crate::types::DbClusterRole]> {
        self.associated_roles.as_deref()
    }
    /// <p>A value that indicates whether the mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
    pub fn iam_database_authentication_enabled(&self) -> std::option::Option<bool> {
        self.iam_database_authentication_enabled
    }
    /// <p>Identifies the clone group to which the DB cluster is associated.</p>
    pub fn clone_group_id(&self) -> std::option::Option<&str> {
        self.clone_group_id.as_deref()
    }
    /// <p>Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
    pub fn cluster_create_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.cluster_create_time.as_ref()
    }
    /// <p>The earliest time to which a DB cluster can be backtracked.</p>
    pub fn earliest_backtrack_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.earliest_backtrack_time.as_ref()
    }
    /// <p>The target backtrack window, in seconds. If this value is set to 0, backtracking is disabled for the DB cluster. Otherwise, backtracking is enabled.</p>
    pub fn backtrack_window(&self) -> std::option::Option<i64> {
        self.backtrack_window
    }
    /// <p>The number of change records stored for Backtrack.</p>
    pub fn backtrack_consumed_change_records(&self) -> std::option::Option<i64> {
        self.backtrack_consumed_change_records
    }
    /// <p>A list of log types that this DB cluster is configured to export to CloudWatch Logs.</p>
    /// <p>Log types vary by DB engine. For information about the log types for each DB engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html">Amazon RDS Database Log Files</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub fn enabled_cloudwatch_logs_exports(&self) -> std::option::Option<&[std::string::String]> {
        self.enabled_cloudwatch_logs_exports.as_deref()
    }
    /// <p>The current capacity of an Aurora Serverless v1 DB cluster. The capacity is 0 (zero) when the cluster is paused.</p>
    /// <p>For more information about Aurora Serverless v1, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn capacity(&self) -> std::option::Option<i32> {
        self.capacity
    }
    /// <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html"> CreateDBCluster</a>.</p>
    pub fn engine_mode(&self) -> std::option::Option<&str> {
        self.engine_mode.as_deref()
    }
    /// <p>Shows the scaling configuration for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn scaling_configuration_info(
        &self,
    ) -> std::option::Option<&crate::types::ScalingConfigurationInfo> {
        self.scaling_configuration_info.as_ref()
    }
    /// <p>Indicates if the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled.</p>
    pub fn deletion_protection(&self) -> std::option::Option<bool> {
        self.deletion_protection
    }
    /// <p>A value that indicates whether the HTTP endpoint for an Aurora Serverless v1 DB cluster is enabled.</p>
    /// <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless v1 DB cluster. You can also query your database from inside the RDS console with the query editor.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn http_endpoint_enabled(&self) -> std::option::Option<bool> {
        self.http_endpoint_enabled
    }
    /// <p>The mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously.</p>
    pub fn activity_stream_mode(&self) -> std::option::Option<&crate::types::ActivityStreamMode> {
        self.activity_stream_mode.as_ref()
    }
    /// <p>The status of the database activity stream.</p>
    pub fn activity_stream_status(
        &self,
    ) -> std::option::Option<&crate::types::ActivityStreamStatus> {
        self.activity_stream_status.as_ref()
    }
    /// <p>The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn activity_stream_kms_key_id(&self) -> std::option::Option<&str> {
        self.activity_stream_kms_key_id.as_deref()
    }
    /// <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
    pub fn activity_stream_kinesis_stream_name(&self) -> std::option::Option<&str> {
        self.activity_stream_kinesis_stream_name.as_deref()
    }
    /// <p>Specifies whether tags are copied from the DB cluster to snapshots of the DB cluster.</p>
    pub fn copy_tags_to_snapshot(&self) -> std::option::Option<bool> {
        self.copy_tags_to_snapshot
    }
    /// <p>Specifies whether the DB cluster is a clone of a DB cluster owned by a different Amazon Web Services account.</p>
    pub fn cross_account_clone(&self) -> std::option::Option<bool> {
        self.cross_account_clone
    }
    /// <p>The Active Directory Domain membership records associated with the DB cluster.</p>
    pub fn domain_memberships(&self) -> std::option::Option<&[crate::types::DomainMembership]> {
        self.domain_memberships.as_deref()
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn tag_list(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tag_list.as_deref()
    }
    /// <p>Specifies whether a secondary cluster in an Aurora global database has write forwarding enabled, not enabled, or is in the process of enabling it.</p>
    pub fn global_write_forwarding_status(
        &self,
    ) -> std::option::Option<&crate::types::WriteForwardingStatus> {
        self.global_write_forwarding_status.as_ref()
    }
    /// <p>Specifies whether you have requested to enable write forwarding for a secondary cluster in an Aurora global database. Because write forwarding takes time to enable, check the value of <code>GlobalWriteForwardingStatus</code> to confirm that the request has completed before using the write forwarding feature for this cluster.</p>
    pub fn global_write_forwarding_requested(&self) -> std::option::Option<bool> {
        self.global_write_forwarding_requested
    }
    /// <p>A value that specifies that changes to the DB cluster are pending. This element is only included when changes are pending. Specific changes are identified by subelements.</p>
    pub fn pending_modified_values(
        &self,
    ) -> std::option::Option<&crate::types::ClusterPendingModifiedValues> {
        self.pending_modified_values.as_ref()
    }
    /// <p>The name of the compute and memory capacity class of the DB instance.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn db_cluster_instance_class(&self) -> std::option::Option<&str> {
        self.db_cluster_instance_class.as_deref()
    }
    /// <p>The storage type associated with the DB cluster.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn storage_type(&self) -> std::option::Option<&str> {
        self.storage_type.as_deref()
    }
    /// <p>The Provisioned IOPS (I/O operations per second) value.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn iops(&self) -> std::option::Option<i32> {
        self.iops
    }
    /// <p>Specifies the accessibility options for the DB instance.</p>
    /// <p>When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB instance's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn publicly_accessible(&self) -> std::option::Option<bool> {
        self.publicly_accessible
    }
    /// <p>A value that indicates that minor version patches are applied automatically.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn auto_minor_version_upgrade(&self) -> bool {
        self.auto_minor_version_upgrade
    }
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn monitoring_interval(&self) -> std::option::Option<i32> {
        self.monitoring_interval
    }
    /// <p>The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn monitoring_role_arn(&self) -> std::option::Option<&str> {
        self.monitoring_role_arn.as_deref()
    }
    /// <p>True if Performance Insights is enabled for the DB cluster, and otherwise false.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn performance_insights_enabled(&self) -> std::option::Option<bool> {
        self.performance_insights_enabled
    }
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn performance_insights_kms_key_id(&self) -> std::option::Option<&str> {
        self.performance_insights_kms_key_id.as_deref()
    }
    /// <p>The number of days to retain Performance Insights data. The default is 7 days. The following values are valid:</p>
    /// <ul>
    /// <li> <p>7</p> </li>
    /// <li> <p> <i>month</i> * 31, where <i>month</i> is a number of months from 1-23</p> </li>
    /// <li> <p>731</p> </li>
    /// </ul>
    /// <p>For example, the following values are valid:</p>
    /// <ul>
    /// <li> <p>93 (3 months * 31)</p> </li>
    /// <li> <p>341 (11 months * 31)</p> </li>
    /// <li> <p>589 (19 months * 31)</p> </li>
    /// <li> <p>731</p> </li>
    /// </ul>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn performance_insights_retention_period(&self) -> std::option::Option<i32> {
        self.performance_insights_retention_period
    }
    /// <p>Shows the scaling configuration for an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn serverless_v2_scaling_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ServerlessV2ScalingConfigurationInfo> {
        self.serverless_v2_scaling_configuration.as_ref()
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p> <code>IPV4</code> </p> </li>
    /// <li> <p> <code>DUAL</code> </p> </li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>This setting is only for Aurora DB clusters.</p>
    pub fn network_type(&self) -> std::option::Option<&str> {
        self.network_type.as_deref()
    }
    /// <p>Reserved for future use.</p>
    pub fn db_system_id(&self) -> std::option::Option<&str> {
        self.db_system_id.as_deref()
    }
    /// <p>Contains the secret managed by RDS in Amazon Web Services Secrets Manager for the master user password.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub fn master_user_secret(&self) -> std::option::Option<&crate::types::MasterUserSecret> {
        self.master_user_secret.as_ref()
    }
}
impl DbCluster {
    /// Creates a new builder-style object to manufacture [`DbCluster`](crate::types::DbCluster).
    pub fn builder() -> crate::types::builders::DbClusterBuilder {
        crate::types::builders::DbClusterBuilder::default()
    }
}

/// A builder for [`DbCluster`](crate::types::DbCluster).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DbClusterBuilder {
    pub(crate) allocated_storage: std::option::Option<i32>,
    pub(crate) availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) backup_retention_period: std::option::Option<i32>,
    pub(crate) character_set_name: std::option::Option<std::string::String>,
    pub(crate) database_name: std::option::Option<std::string::String>,
    pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
    pub(crate) db_cluster_parameter_group: std::option::Option<std::string::String>,
    pub(crate) db_subnet_group: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) automatic_restart_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) percent_progress: std::option::Option<std::string::String>,
    pub(crate) earliest_restorable_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) endpoint: std::option::Option<std::string::String>,
    pub(crate) reader_endpoint: std::option::Option<std::string::String>,
    pub(crate) custom_endpoints: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) multi_az: std::option::Option<bool>,
    pub(crate) engine: std::option::Option<std::string::String>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) latest_restorable_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) port: std::option::Option<i32>,
    pub(crate) master_username: std::option::Option<std::string::String>,
    pub(crate) db_cluster_option_group_memberships:
        std::option::Option<std::vec::Vec<crate::types::DbClusterOptionGroupStatus>>,
    pub(crate) preferred_backup_window: std::option::Option<std::string::String>,
    pub(crate) preferred_maintenance_window: std::option::Option<std::string::String>,
    pub(crate) replication_source_identifier: std::option::Option<std::string::String>,
    pub(crate) read_replica_identifiers: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) db_cluster_members:
        std::option::Option<std::vec::Vec<crate::types::DbClusterMember>>,
    pub(crate) vpc_security_groups:
        std::option::Option<std::vec::Vec<crate::types::VpcSecurityGroupMembership>>,
    pub(crate) hosted_zone_id: std::option::Option<std::string::String>,
    pub(crate) storage_encrypted: std::option::Option<bool>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) db_cluster_resource_id: std::option::Option<std::string::String>,
    pub(crate) db_cluster_arn: std::option::Option<std::string::String>,
    pub(crate) associated_roles: std::option::Option<std::vec::Vec<crate::types::DbClusterRole>>,
    pub(crate) iam_database_authentication_enabled: std::option::Option<bool>,
    pub(crate) clone_group_id: std::option::Option<std::string::String>,
    pub(crate) cluster_create_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) earliest_backtrack_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) backtrack_window: std::option::Option<i64>,
    pub(crate) backtrack_consumed_change_records: std::option::Option<i64>,
    pub(crate) enabled_cloudwatch_logs_exports:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) capacity: std::option::Option<i32>,
    pub(crate) engine_mode: std::option::Option<std::string::String>,
    pub(crate) scaling_configuration_info:
        std::option::Option<crate::types::ScalingConfigurationInfo>,
    pub(crate) deletion_protection: std::option::Option<bool>,
    pub(crate) http_endpoint_enabled: std::option::Option<bool>,
    pub(crate) activity_stream_mode: std::option::Option<crate::types::ActivityStreamMode>,
    pub(crate) activity_stream_status: std::option::Option<crate::types::ActivityStreamStatus>,
    pub(crate) activity_stream_kms_key_id: std::option::Option<std::string::String>,
    pub(crate) activity_stream_kinesis_stream_name: std::option::Option<std::string::String>,
    pub(crate) copy_tags_to_snapshot: std::option::Option<bool>,
    pub(crate) cross_account_clone: std::option::Option<bool>,
    pub(crate) domain_memberships:
        std::option::Option<std::vec::Vec<crate::types::DomainMembership>>,
    pub(crate) tag_list: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) global_write_forwarding_status:
        std::option::Option<crate::types::WriteForwardingStatus>,
    pub(crate) global_write_forwarding_requested: std::option::Option<bool>,
    pub(crate) pending_modified_values:
        std::option::Option<crate::types::ClusterPendingModifiedValues>,
    pub(crate) db_cluster_instance_class: std::option::Option<std::string::String>,
    pub(crate) storage_type: std::option::Option<std::string::String>,
    pub(crate) iops: std::option::Option<i32>,
    pub(crate) publicly_accessible: std::option::Option<bool>,
    pub(crate) auto_minor_version_upgrade: std::option::Option<bool>,
    pub(crate) monitoring_interval: std::option::Option<i32>,
    pub(crate) monitoring_role_arn: std::option::Option<std::string::String>,
    pub(crate) performance_insights_enabled: std::option::Option<bool>,
    pub(crate) performance_insights_kms_key_id: std::option::Option<std::string::String>,
    pub(crate) performance_insights_retention_period: std::option::Option<i32>,
    pub(crate) serverless_v2_scaling_configuration:
        std::option::Option<crate::types::ServerlessV2ScalingConfigurationInfo>,
    pub(crate) network_type: std::option::Option<std::string::String>,
    pub(crate) db_system_id: std::option::Option<std::string::String>,
    pub(crate) master_user_secret: std::option::Option<crate::types::MasterUserSecret>,
}
impl DbClusterBuilder {
    /// <p>For all database engines except Amazon Aurora, <code>AllocatedStorage</code> specifies the allocated storage size in gibibytes (GiB). For Aurora, <code>AllocatedStorage</code> always returns 1, because Aurora DB cluster storage size isn't fixed, but instead automatically adjusts as needed.</p>
    pub fn allocated_storage(mut self, input: i32) -> Self {
        self.allocated_storage = Some(input);
        self
    }
    /// <p>For all database engines except Amazon Aurora, <code>AllocatedStorage</code> specifies the allocated storage size in gibibytes (GiB). For Aurora, <code>AllocatedStorage</code> always returns 1, because Aurora DB cluster storage size isn't fixed, but instead automatically adjusts as needed.</p>
    pub fn set_allocated_storage(mut self, input: std::option::Option<i32>) -> Self {
        self.allocated_storage = input;
        self
    }
    /// Appends an item to `availability_zones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>Provides the list of Availability Zones (AZs) where instances in the DB cluster can be created.</p>
    pub fn availability_zones(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.availability_zones.unwrap_or_default();
        v.push(input.into());
        self.availability_zones = Some(v);
        self
    }
    /// <p>Provides the list of Availability Zones (AZs) where instances in the DB cluster can be created.</p>
    pub fn set_availability_zones(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.availability_zones = input;
        self
    }
    /// <p>Specifies the number of days for which automatic DB snapshots are retained.</p>
    pub fn backup_retention_period(mut self, input: i32) -> Self {
        self.backup_retention_period = Some(input);
        self
    }
    /// <p>Specifies the number of days for which automatic DB snapshots are retained.</p>
    pub fn set_backup_retention_period(mut self, input: std::option::Option<i32>) -> Self {
        self.backup_retention_period = input;
        self
    }
    /// <p>If present, specifies the name of the character set that this cluster is associated with.</p>
    pub fn character_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.character_set_name = Some(input.into());
        self
    }
    /// <p>If present, specifies the name of the character set that this cluster is associated with.</p>
    pub fn set_character_set_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.character_set_name = input;
        self
    }
    /// <p>Contains the name of the initial database of this DB cluster that was provided at create time, if one was specified when the DB cluster was created. This same name is returned for the life of the DB cluster.</p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.database_name = Some(input.into());
        self
    }
    /// <p>Contains the name of the initial database of this DB cluster that was provided at create time, if one was specified when the DB cluster was created. This same name is returned for the life of the DB cluster.</p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.</p>
    pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_cluster_identifier = Some(input.into());
        self
    }
    /// <p>Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.</p>
    pub fn set_db_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_cluster_identifier = input;
        self
    }
    /// <p>Specifies the name of the DB cluster parameter group for the DB cluster.</p>
    pub fn db_cluster_parameter_group(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_cluster_parameter_group = Some(input.into());
        self
    }
    /// <p>Specifies the name of the DB cluster parameter group for the DB cluster.</p>
    pub fn set_db_cluster_parameter_group(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_cluster_parameter_group = input;
        self
    }
    /// <p>Specifies information on the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group.</p>
    pub fn db_subnet_group(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_subnet_group = Some(input.into());
        self
    }
    /// <p>Specifies information on the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group.</p>
    pub fn set_db_subnet_group(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.db_subnet_group = input;
        self
    }
    /// <p>Specifies the current state of this DB cluster.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>Specifies the current state of this DB cluster.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The time when a stopped DB cluster is restarted automatically.</p>
    pub fn automatic_restart_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.automatic_restart_time = Some(input);
        self
    }
    /// <p>The time when a stopped DB cluster is restarted automatically.</p>
    pub fn set_automatic_restart_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.automatic_restart_time = input;
        self
    }
    /// <p>Specifies the progress of the operation as a percentage.</p>
    pub fn percent_progress(mut self, input: impl Into<std::string::String>) -> Self {
        self.percent_progress = Some(input.into());
        self
    }
    /// <p>Specifies the progress of the operation as a percentage.</p>
    pub fn set_percent_progress(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.percent_progress = input;
        self
    }
    /// <p>The earliest time to which a database can be restored with point-in-time restore.</p>
    pub fn earliest_restorable_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.earliest_restorable_time = Some(input);
        self
    }
    /// <p>The earliest time to which a database can be restored with point-in-time restore.</p>
    pub fn set_earliest_restorable_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.earliest_restorable_time = input;
        self
    }
    /// <p>Specifies the connection endpoint for the primary instance of the DB cluster.</p>
    pub fn endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint = Some(input.into());
        self
    }
    /// <p>Specifies the connection endpoint for the primary instance of the DB cluster.</p>
    pub fn set_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// <p>The reader endpoint for the DB cluster. The reader endpoint for a DB cluster load-balances connections across the Aurora Replicas that are available in a DB cluster. As clients request new connections to the reader endpoint, Aurora distributes the connection requests among the Aurora Replicas in the DB cluster. This functionality can help balance your read workload across multiple Aurora Replicas in your DB cluster.</p>
    /// <p>If a failover occurs, and the Aurora Replica that you are connected to is promoted to be the primary instance, your connection is dropped. To continue sending your read workload to other Aurora Replicas in the cluster, you can then reconnect to the reader endpoint.</p>
    pub fn reader_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.reader_endpoint = Some(input.into());
        self
    }
    /// <p>The reader endpoint for the DB cluster. The reader endpoint for a DB cluster load-balances connections across the Aurora Replicas that are available in a DB cluster. As clients request new connections to the reader endpoint, Aurora distributes the connection requests among the Aurora Replicas in the DB cluster. This functionality can help balance your read workload across multiple Aurora Replicas in your DB cluster.</p>
    /// <p>If a failover occurs, and the Aurora Replica that you are connected to is promoted to be the primary instance, your connection is dropped. To continue sending your read workload to other Aurora Replicas in the cluster, you can then reconnect to the reader endpoint.</p>
    pub fn set_reader_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reader_endpoint = input;
        self
    }
    /// Appends an item to `custom_endpoints`.
    ///
    /// To override the contents of this collection use [`set_custom_endpoints`](Self::set_custom_endpoints).
    ///
    /// <p>Identifies all custom endpoints associated with the cluster.</p>
    pub fn custom_endpoints(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.custom_endpoints.unwrap_or_default();
        v.push(input.into());
        self.custom_endpoints = Some(v);
        self
    }
    /// <p>Identifies all custom endpoints associated with the cluster.</p>
    pub fn set_custom_endpoints(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.custom_endpoints = input;
        self
    }
    /// <p>Specifies whether the DB cluster has instances in multiple Availability Zones.</p>
    pub fn multi_az(mut self, input: bool) -> Self {
        self.multi_az = Some(input);
        self
    }
    /// <p>Specifies whether the DB cluster has instances in multiple Availability Zones.</p>
    pub fn set_multi_az(mut self, input: std::option::Option<bool>) -> Self {
        self.multi_az = input;
        self
    }
    /// <p>The name of the database engine to be used for this DB cluster.</p>
    pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine = Some(input.into());
        self
    }
    /// <p>The name of the database engine to be used for this DB cluster.</p>
    pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>Indicates the database engine version.</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>Indicates the database engine version.</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>Specifies the latest time to which a database can be restored with point-in-time restore.</p>
    pub fn latest_restorable_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.latest_restorable_time = Some(input);
        self
    }
    /// <p>Specifies the latest time to which a database can be restored with point-in-time restore.</p>
    pub fn set_latest_restorable_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.latest_restorable_time = input;
        self
    }
    /// <p>Specifies the port that the database engine is listening on.</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = Some(input);
        self
    }
    /// <p>Specifies the port that the database engine is listening on.</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>Contains the master username for the DB cluster.</p>
    pub fn master_username(mut self, input: impl Into<std::string::String>) -> Self {
        self.master_username = Some(input.into());
        self
    }
    /// <p>Contains the master username for the DB cluster.</p>
    pub fn set_master_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.master_username = input;
        self
    }
    /// Appends an item to `db_cluster_option_group_memberships`.
    ///
    /// To override the contents of this collection use [`set_db_cluster_option_group_memberships`](Self::set_db_cluster_option_group_memberships).
    ///
    /// <p>Provides the list of option group memberships for this DB cluster.</p>
    pub fn db_cluster_option_group_memberships(
        mut self,
        input: crate::types::DbClusterOptionGroupStatus,
    ) -> Self {
        let mut v = self.db_cluster_option_group_memberships.unwrap_or_default();
        v.push(input);
        self.db_cluster_option_group_memberships = Some(v);
        self
    }
    /// <p>Provides the list of option group memberships for this DB cluster.</p>
    pub fn set_db_cluster_option_group_memberships(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DbClusterOptionGroupStatus>>,
    ) -> Self {
        self.db_cluster_option_group_memberships = input;
        self
    }
    /// <p>Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>.</p>
    pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_backup_window = Some(input.into());
        self
    }
    /// <p>Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the <code>BackupRetentionPeriod</code>.</p>
    pub fn set_preferred_backup_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_backup_window = input;
        self
    }
    /// <p>Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    pub fn preferred_maintenance_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_maintenance_window = Some(input.into());
        self
    }
    /// <p>Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    pub fn set_preferred_maintenance_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_maintenance_window = input;
        self
    }
    /// <p>Contains the identifier of the source DB cluster if this DB cluster is a read replica.</p>
    pub fn replication_source_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.replication_source_identifier = Some(input.into());
        self
    }
    /// <p>Contains the identifier of the source DB cluster if this DB cluster is a read replica.</p>
    pub fn set_replication_source_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.replication_source_identifier = input;
        self
    }
    /// Appends an item to `read_replica_identifiers`.
    ///
    /// To override the contents of this collection use [`set_read_replica_identifiers`](Self::set_read_replica_identifiers).
    ///
    /// <p>Contains one or more identifiers of the read replicas associated with this DB cluster.</p>
    pub fn read_replica_identifiers(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.read_replica_identifiers.unwrap_or_default();
        v.push(input.into());
        self.read_replica_identifiers = Some(v);
        self
    }
    /// <p>Contains one or more identifiers of the read replicas associated with this DB cluster.</p>
    pub fn set_read_replica_identifiers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.read_replica_identifiers = input;
        self
    }
    /// Appends an item to `db_cluster_members`.
    ///
    /// To override the contents of this collection use [`set_db_cluster_members`](Self::set_db_cluster_members).
    ///
    /// <p>Provides the list of instances that make up the DB cluster.</p>
    pub fn db_cluster_members(mut self, input: crate::types::DbClusterMember) -> Self {
        let mut v = self.db_cluster_members.unwrap_or_default();
        v.push(input);
        self.db_cluster_members = Some(v);
        self
    }
    /// <p>Provides the list of instances that make up the DB cluster.</p>
    pub fn set_db_cluster_members(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DbClusterMember>>,
    ) -> Self {
        self.db_cluster_members = input;
        self
    }
    /// Appends an item to `vpc_security_groups`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_groups`](Self::set_vpc_security_groups).
    ///
    /// <p>Provides a list of VPC security groups that the DB cluster belongs to.</p>
    pub fn vpc_security_groups(mut self, input: crate::types::VpcSecurityGroupMembership) -> Self {
        let mut v = self.vpc_security_groups.unwrap_or_default();
        v.push(input);
        self.vpc_security_groups = Some(v);
        self
    }
    /// <p>Provides a list of VPC security groups that the DB cluster belongs to.</p>
    pub fn set_vpc_security_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::VpcSecurityGroupMembership>>,
    ) -> Self {
        self.vpc_security_groups = input;
        self
    }
    /// <p>Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.</p>
    pub fn hosted_zone_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.hosted_zone_id = Some(input.into());
        self
    }
    /// <p>Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.</p>
    pub fn set_hosted_zone_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hosted_zone_id = input;
        self
    }
    /// <p>Specifies whether the DB cluster is encrypted.</p>
    pub fn storage_encrypted(mut self, input: bool) -> Self {
        self.storage_encrypted = Some(input);
        self
    }
    /// <p>Specifies whether the DB cluster is encrypted.</p>
    pub fn set_storage_encrypted(mut self, input: std::option::Option<bool>) -> Self {
        self.storage_encrypted = input;
        self
    }
    /// <p>If <code>StorageEncrypted</code> is enabled, the Amazon Web Services KMS key identifier for the encrypted DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>If <code>StorageEncrypted</code> is enabled, the Amazon Web Services KMS key identifier for the encrypted DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The Amazon Web Services Region-unique, immutable identifier for the DB cluster. This identifier is found in Amazon Web Services CloudTrail log entries whenever the KMS key for the DB cluster is accessed.</p>
    pub fn db_cluster_resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_cluster_resource_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Region-unique, immutable identifier for the DB cluster. This identifier is found in Amazon Web Services CloudTrail log entries whenever the KMS key for the DB cluster is accessed.</p>
    pub fn set_db_cluster_resource_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_cluster_resource_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the DB cluster.</p>
    pub fn db_cluster_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_cluster_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the DB cluster.</p>
    pub fn set_db_cluster_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.db_cluster_arn = input;
        self
    }
    /// Appends an item to `associated_roles`.
    ///
    /// To override the contents of this collection use [`set_associated_roles`](Self::set_associated_roles).
    ///
    /// <p>Provides a list of the Amazon Web Services Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other Amazon Web Services on your behalf.</p>
    pub fn associated_roles(mut self, input: crate::types::DbClusterRole) -> Self {
        let mut v = self.associated_roles.unwrap_or_default();
        v.push(input);
        self.associated_roles = Some(v);
        self
    }
    /// <p>Provides a list of the Amazon Web Services Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other Amazon Web Services on your behalf.</p>
    pub fn set_associated_roles(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DbClusterRole>>,
    ) -> Self {
        self.associated_roles = input;
        self
    }
    /// <p>A value that indicates whether the mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
    pub fn iam_database_authentication_enabled(mut self, input: bool) -> Self {
        self.iam_database_authentication_enabled = Some(input);
        self
    }
    /// <p>A value that indicates whether the mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts is enabled.</p>
    pub fn set_iam_database_authentication_enabled(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.iam_database_authentication_enabled = input;
        self
    }
    /// <p>Identifies the clone group to which the DB cluster is associated.</p>
    pub fn clone_group_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.clone_group_id = Some(input.into());
        self
    }
    /// <p>Identifies the clone group to which the DB cluster is associated.</p>
    pub fn set_clone_group_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.clone_group_id = input;
        self
    }
    /// <p>Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
    pub fn cluster_create_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.cluster_create_time = Some(input);
        self
    }
    /// <p>Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
    pub fn set_cluster_create_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.cluster_create_time = input;
        self
    }
    /// <p>The earliest time to which a DB cluster can be backtracked.</p>
    pub fn earliest_backtrack_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.earliest_backtrack_time = Some(input);
        self
    }
    /// <p>The earliest time to which a DB cluster can be backtracked.</p>
    pub fn set_earliest_backtrack_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.earliest_backtrack_time = input;
        self
    }
    /// <p>The target backtrack window, in seconds. If this value is set to 0, backtracking is disabled for the DB cluster. Otherwise, backtracking is enabled.</p>
    pub fn backtrack_window(mut self, input: i64) -> Self {
        self.backtrack_window = Some(input);
        self
    }
    /// <p>The target backtrack window, in seconds. If this value is set to 0, backtracking is disabled for the DB cluster. Otherwise, backtracking is enabled.</p>
    pub fn set_backtrack_window(mut self, input: std::option::Option<i64>) -> Self {
        self.backtrack_window = input;
        self
    }
    /// <p>The number of change records stored for Backtrack.</p>
    pub fn backtrack_consumed_change_records(mut self, input: i64) -> Self {
        self.backtrack_consumed_change_records = Some(input);
        self
    }
    /// <p>The number of change records stored for Backtrack.</p>
    pub fn set_backtrack_consumed_change_records(
        mut self,
        input: std::option::Option<i64>,
    ) -> Self {
        self.backtrack_consumed_change_records = input;
        self
    }
    /// Appends an item to `enabled_cloudwatch_logs_exports`.
    ///
    /// To override the contents of this collection use [`set_enabled_cloudwatch_logs_exports`](Self::set_enabled_cloudwatch_logs_exports).
    ///
    /// <p>A list of log types that this DB cluster is configured to export to CloudWatch Logs.</p>
    /// <p>Log types vary by DB engine. For information about the log types for each DB engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html">Amazon RDS Database Log Files</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub fn enabled_cloudwatch_logs_exports(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        let mut v = self.enabled_cloudwatch_logs_exports.unwrap_or_default();
        v.push(input.into());
        self.enabled_cloudwatch_logs_exports = Some(v);
        self
    }
    /// <p>A list of log types that this DB cluster is configured to export to CloudWatch Logs.</p>
    /// <p>Log types vary by DB engine. For information about the log types for each DB engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html">Amazon RDS Database Log Files</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub fn set_enabled_cloudwatch_logs_exports(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.enabled_cloudwatch_logs_exports = input;
        self
    }
    /// <p>The current capacity of an Aurora Serverless v1 DB cluster. The capacity is 0 (zero) when the cluster is paused.</p>
    /// <p>For more information about Aurora Serverless v1, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn capacity(mut self, input: i32) -> Self {
        self.capacity = Some(input);
        self
    }
    /// <p>The current capacity of an Aurora Serverless v1 DB cluster. The capacity is 0 (zero) when the cluster is paused.</p>
    /// <p>For more information about Aurora Serverless v1, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.capacity = input;
        self
    }
    /// <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html"> CreateDBCluster</a>.</p>
    pub fn engine_mode(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_mode = Some(input.into());
        self
    }
    /// <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html"> CreateDBCluster</a>.</p>
    pub fn set_engine_mode(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_mode = input;
        self
    }
    /// <p>Shows the scaling configuration for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn scaling_configuration_info(
        mut self,
        input: crate::types::ScalingConfigurationInfo,
    ) -> Self {
        self.scaling_configuration_info = Some(input);
        self
    }
    /// <p>Shows the scaling configuration for an Aurora DB cluster in <code>serverless</code> DB engine mode.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html">Using Amazon Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_scaling_configuration_info(
        mut self,
        input: std::option::Option<crate::types::ScalingConfigurationInfo>,
    ) -> Self {
        self.scaling_configuration_info = input;
        self
    }
    /// <p>Indicates if the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled.</p>
    pub fn deletion_protection(mut self, input: bool) -> Self {
        self.deletion_protection = Some(input);
        self
    }
    /// <p>Indicates if the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled.</p>
    pub fn set_deletion_protection(mut self, input: std::option::Option<bool>) -> Self {
        self.deletion_protection = input;
        self
    }
    /// <p>A value that indicates whether the HTTP endpoint for an Aurora Serverless v1 DB cluster is enabled.</p>
    /// <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless v1 DB cluster. You can also query your database from inside the RDS console with the query editor.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn http_endpoint_enabled(mut self, input: bool) -> Self {
        self.http_endpoint_enabled = Some(input);
        self
    }
    /// <p>A value that indicates whether the HTTP endpoint for an Aurora Serverless v1 DB cluster is enabled.</p>
    /// <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless v1 DB cluster. You can also query your database from inside the RDS console with the query editor.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_http_endpoint_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.http_endpoint_enabled = input;
        self
    }
    /// <p>The mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously.</p>
    pub fn activity_stream_mode(mut self, input: crate::types::ActivityStreamMode) -> Self {
        self.activity_stream_mode = Some(input);
        self
    }
    /// <p>The mode of the database activity stream. Database events such as a change or access generate an activity stream event. The database session can handle these events either synchronously or asynchronously.</p>
    pub fn set_activity_stream_mode(
        mut self,
        input: std::option::Option<crate::types::ActivityStreamMode>,
    ) -> Self {
        self.activity_stream_mode = input;
        self
    }
    /// <p>The status of the database activity stream.</p>
    pub fn activity_stream_status(mut self, input: crate::types::ActivityStreamStatus) -> Self {
        self.activity_stream_status = Some(input);
        self
    }
    /// <p>The status of the database activity stream.</p>
    pub fn set_activity_stream_status(
        mut self,
        input: std::option::Option<crate::types::ActivityStreamStatus>,
    ) -> Self {
        self.activity_stream_status = input;
        self
    }
    /// <p>The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn activity_stream_kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.activity_stream_kms_key_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier used for encrypting messages in the database activity stream.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    pub fn set_activity_stream_kms_key_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.activity_stream_kms_key_id = input;
        self
    }
    /// <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
    pub fn activity_stream_kinesis_stream_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.activity_stream_kinesis_stream_name = Some(input.into());
        self
    }
    /// <p>The name of the Amazon Kinesis data stream used for the database activity stream.</p>
    pub fn set_activity_stream_kinesis_stream_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.activity_stream_kinesis_stream_name = input;
        self
    }
    /// <p>Specifies whether tags are copied from the DB cluster to snapshots of the DB cluster.</p>
    pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
        self.copy_tags_to_snapshot = Some(input);
        self
    }
    /// <p>Specifies whether tags are copied from the DB cluster to snapshots of the DB cluster.</p>
    pub fn set_copy_tags_to_snapshot(mut self, input: std::option::Option<bool>) -> Self {
        self.copy_tags_to_snapshot = input;
        self
    }
    /// <p>Specifies whether the DB cluster is a clone of a DB cluster owned by a different Amazon Web Services account.</p>
    pub fn cross_account_clone(mut self, input: bool) -> Self {
        self.cross_account_clone = Some(input);
        self
    }
    /// <p>Specifies whether the DB cluster is a clone of a DB cluster owned by a different Amazon Web Services account.</p>
    pub fn set_cross_account_clone(mut self, input: std::option::Option<bool>) -> Self {
        self.cross_account_clone = input;
        self
    }
    /// Appends an item to `domain_memberships`.
    ///
    /// To override the contents of this collection use [`set_domain_memberships`](Self::set_domain_memberships).
    ///
    /// <p>The Active Directory Domain membership records associated with the DB cluster.</p>
    pub fn domain_memberships(mut self, input: crate::types::DomainMembership) -> Self {
        let mut v = self.domain_memberships.unwrap_or_default();
        v.push(input);
        self.domain_memberships = Some(v);
        self
    }
    /// <p>The Active Directory Domain membership records associated with the DB cluster.</p>
    pub fn set_domain_memberships(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DomainMembership>>,
    ) -> Self {
        self.domain_memberships = input;
        self
    }
    /// Appends an item to `tag_list`.
    ///
    /// To override the contents of this collection use [`set_tag_list`](Self::set_tag_list).
    ///
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn tag_list(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tag_list.unwrap_or_default();
        v.push(input);
        self.tag_list = Some(v);
        self
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn set_tag_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tag_list = input;
        self
    }
    /// <p>Specifies whether a secondary cluster in an Aurora global database has write forwarding enabled, not enabled, or is in the process of enabling it.</p>
    pub fn global_write_forwarding_status(
        mut self,
        input: crate::types::WriteForwardingStatus,
    ) -> Self {
        self.global_write_forwarding_status = Some(input);
        self
    }
    /// <p>Specifies whether a secondary cluster in an Aurora global database has write forwarding enabled, not enabled, or is in the process of enabling it.</p>
    pub fn set_global_write_forwarding_status(
        mut self,
        input: std::option::Option<crate::types::WriteForwardingStatus>,
    ) -> Self {
        self.global_write_forwarding_status = input;
        self
    }
    /// <p>Specifies whether you have requested to enable write forwarding for a secondary cluster in an Aurora global database. Because write forwarding takes time to enable, check the value of <code>GlobalWriteForwardingStatus</code> to confirm that the request has completed before using the write forwarding feature for this cluster.</p>
    pub fn global_write_forwarding_requested(mut self, input: bool) -> Self {
        self.global_write_forwarding_requested = Some(input);
        self
    }
    /// <p>Specifies whether you have requested to enable write forwarding for a secondary cluster in an Aurora global database. Because write forwarding takes time to enable, check the value of <code>GlobalWriteForwardingStatus</code> to confirm that the request has completed before using the write forwarding feature for this cluster.</p>
    pub fn set_global_write_forwarding_requested(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.global_write_forwarding_requested = input;
        self
    }
    /// <p>A value that specifies that changes to the DB cluster are pending. This element is only included when changes are pending. Specific changes are identified by subelements.</p>
    pub fn pending_modified_values(
        mut self,
        input: crate::types::ClusterPendingModifiedValues,
    ) -> Self {
        self.pending_modified_values = Some(input);
        self
    }
    /// <p>A value that specifies that changes to the DB cluster are pending. This element is only included when changes are pending. Specific changes are identified by subelements.</p>
    pub fn set_pending_modified_values(
        mut self,
        input: std::option::Option<crate::types::ClusterPendingModifiedValues>,
    ) -> Self {
        self.pending_modified_values = input;
        self
    }
    /// <p>The name of the compute and memory capacity class of the DB instance.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn db_cluster_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_cluster_instance_class = Some(input.into());
        self
    }
    /// <p>The name of the compute and memory capacity class of the DB instance.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn set_db_cluster_instance_class(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_cluster_instance_class = input;
        self
    }
    /// <p>The storage type associated with the DB cluster.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn storage_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.storage_type = Some(input.into());
        self
    }
    /// <p>The storage type associated with the DB cluster.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn set_storage_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.storage_type = input;
        self
    }
    /// <p>The Provisioned IOPS (I/O operations per second) value.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = Some(input);
        self
    }
    /// <p>The Provisioned IOPS (I/O operations per second) value.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// <p>Specifies the accessibility options for the DB instance.</p>
    /// <p>When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB instance's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.publicly_accessible = Some(input);
        self
    }
    /// <p>Specifies the accessibility options for the DB instance.</p>
    /// <p>When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB instance's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
        self.publicly_accessible = input;
        self
    }
    /// <p>A value that indicates that minor version patches are applied automatically.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
        self.auto_minor_version_upgrade = Some(input);
        self
    }
    /// <p>A value that indicates that minor version patches are applied automatically.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn set_auto_minor_version_upgrade(mut self, input: std::option::Option<bool>) -> Self {
        self.auto_minor_version_upgrade = input;
        self
    }
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn monitoring_interval(mut self, input: i32) -> Self {
        self.monitoring_interval = Some(input);
        self
    }
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn set_monitoring_interval(mut self, input: std::option::Option<i32>) -> Self {
        self.monitoring_interval = input;
        self
    }
    /// <p>The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn monitoring_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.monitoring_role_arn = Some(input.into());
        self
    }
    /// <p>The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn set_monitoring_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.monitoring_role_arn = input;
        self
    }
    /// <p>True if Performance Insights is enabled for the DB cluster, and otherwise false.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn performance_insights_enabled(mut self, input: bool) -> Self {
        self.performance_insights_enabled = Some(input);
        self
    }
    /// <p>True if Performance Insights is enabled for the DB cluster, and otherwise false.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn set_performance_insights_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.performance_insights_enabled = input;
        self
    }
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn performance_insights_kms_key_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.performance_insights_kms_key_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn set_performance_insights_kms_key_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.performance_insights_kms_key_id = input;
        self
    }
    /// <p>The number of days to retain Performance Insights data. The default is 7 days. The following values are valid:</p>
    /// <ul>
    /// <li> <p>7</p> </li>
    /// <li> <p> <i>month</i> * 31, where <i>month</i> is a number of months from 1-23</p> </li>
    /// <li> <p>731</p> </li>
    /// </ul>
    /// <p>For example, the following values are valid:</p>
    /// <ul>
    /// <li> <p>93 (3 months * 31)</p> </li>
    /// <li> <p>341 (11 months * 31)</p> </li>
    /// <li> <p>589 (19 months * 31)</p> </li>
    /// <li> <p>731</p> </li>
    /// </ul>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn performance_insights_retention_period(mut self, input: i32) -> Self {
        self.performance_insights_retention_period = Some(input);
        self
    }
    /// <p>The number of days to retain Performance Insights data. The default is 7 days. The following values are valid:</p>
    /// <ul>
    /// <li> <p>7</p> </li>
    /// <li> <p> <i>month</i> * 31, where <i>month</i> is a number of months from 1-23</p> </li>
    /// <li> <p>731</p> </li>
    /// </ul>
    /// <p>For example, the following values are valid:</p>
    /// <ul>
    /// <li> <p>93 (3 months * 31)</p> </li>
    /// <li> <p>341 (11 months * 31)</p> </li>
    /// <li> <p>589 (19 months * 31)</p> </li>
    /// <li> <p>731</p> </li>
    /// </ul>
    /// <p>This setting is only for non-Aurora Multi-AZ DB clusters.</p>
    pub fn set_performance_insights_retention_period(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.performance_insights_retention_period = input;
        self
    }
    /// <p>Shows the scaling configuration for an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn serverless_v2_scaling_configuration(
        mut self,
        input: crate::types::ServerlessV2ScalingConfigurationInfo,
    ) -> Self {
        self.serverless_v2_scaling_configuration = Some(input);
        self
    }
    /// <p>Shows the scaling configuration for an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_serverless_v2_scaling_configuration(
        mut self,
        input: std::option::Option<crate::types::ServerlessV2ScalingConfigurationInfo>,
    ) -> Self {
        self.serverless_v2_scaling_configuration = input;
        self
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p> <code>IPV4</code> </p> </li>
    /// <li> <p> <code>DUAL</code> </p> </li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>This setting is only for Aurora DB clusters.</p>
    pub fn network_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_type = Some(input.into());
        self
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p> <code>IPV4</code> </p> </li>
    /// <li> <p> <code>DUAL</code> </p> </li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>This setting is only for Aurora DB clusters.</p>
    pub fn set_network_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.network_type = input;
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn db_system_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_system_id = Some(input.into());
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_db_system_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.db_system_id = input;
        self
    }
    /// <p>Contains the secret managed by RDS in Amazon Web Services Secrets Manager for the master user password.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub fn master_user_secret(mut self, input: crate::types::MasterUserSecret) -> Self {
        self.master_user_secret = Some(input);
        self
    }
    /// <p>Contains the secret managed by RDS in Amazon Web Services Secrets Manager for the master user password.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub fn set_master_user_secret(
        mut self,
        input: std::option::Option<crate::types::MasterUserSecret>,
    ) -> Self {
        self.master_user_secret = input;
        self
    }
    /// Consumes the builder and constructs a [`DbCluster`](crate::types::DbCluster).
    pub fn build(self) -> crate::types::DbCluster {
        crate::types::DbCluster {
            allocated_storage: self.allocated_storage,
            availability_zones: self.availability_zones,
            backup_retention_period: self.backup_retention_period,
            character_set_name: self.character_set_name,
            database_name: self.database_name,
            db_cluster_identifier: self.db_cluster_identifier,
            db_cluster_parameter_group: self.db_cluster_parameter_group,
            db_subnet_group: self.db_subnet_group,
            status: self.status,
            automatic_restart_time: self.automatic_restart_time,
            percent_progress: self.percent_progress,
            earliest_restorable_time: self.earliest_restorable_time,
            endpoint: self.endpoint,
            reader_endpoint: self.reader_endpoint,
            custom_endpoints: self.custom_endpoints,
            multi_az: self.multi_az,
            engine: self.engine,
            engine_version: self.engine_version,
            latest_restorable_time: self.latest_restorable_time,
            port: self.port,
            master_username: self.master_username,
            db_cluster_option_group_memberships: self.db_cluster_option_group_memberships,
            preferred_backup_window: self.preferred_backup_window,
            preferred_maintenance_window: self.preferred_maintenance_window,
            replication_source_identifier: self.replication_source_identifier,
            read_replica_identifiers: self.read_replica_identifiers,
            db_cluster_members: self.db_cluster_members,
            vpc_security_groups: self.vpc_security_groups,
            hosted_zone_id: self.hosted_zone_id,
            storage_encrypted: self.storage_encrypted.unwrap_or_default(),
            kms_key_id: self.kms_key_id,
            db_cluster_resource_id: self.db_cluster_resource_id,
            db_cluster_arn: self.db_cluster_arn,
            associated_roles: self.associated_roles,
            iam_database_authentication_enabled: self.iam_database_authentication_enabled,
            clone_group_id: self.clone_group_id,
            cluster_create_time: self.cluster_create_time,
            earliest_backtrack_time: self.earliest_backtrack_time,
            backtrack_window: self.backtrack_window,
            backtrack_consumed_change_records: self.backtrack_consumed_change_records,
            enabled_cloudwatch_logs_exports: self.enabled_cloudwatch_logs_exports,
            capacity: self.capacity,
            engine_mode: self.engine_mode,
            scaling_configuration_info: self.scaling_configuration_info,
            deletion_protection: self.deletion_protection,
            http_endpoint_enabled: self.http_endpoint_enabled,
            activity_stream_mode: self.activity_stream_mode,
            activity_stream_status: self.activity_stream_status,
            activity_stream_kms_key_id: self.activity_stream_kms_key_id,
            activity_stream_kinesis_stream_name: self.activity_stream_kinesis_stream_name,
            copy_tags_to_snapshot: self.copy_tags_to_snapshot,
            cross_account_clone: self.cross_account_clone,
            domain_memberships: self.domain_memberships,
            tag_list: self.tag_list,
            global_write_forwarding_status: self.global_write_forwarding_status,
            global_write_forwarding_requested: self.global_write_forwarding_requested,
            pending_modified_values: self.pending_modified_values,
            db_cluster_instance_class: self.db_cluster_instance_class,
            storage_type: self.storage_type,
            iops: self.iops,
            publicly_accessible: self.publicly_accessible,
            auto_minor_version_upgrade: self.auto_minor_version_upgrade.unwrap_or_default(),
            monitoring_interval: self.monitoring_interval,
            monitoring_role_arn: self.monitoring_role_arn,
            performance_insights_enabled: self.performance_insights_enabled,
            performance_insights_kms_key_id: self.performance_insights_kms_key_id,
            performance_insights_retention_period: self.performance_insights_retention_period,
            serverless_v2_scaling_configuration: self.serverless_v2_scaling_configuration,
            network_type: self.network_type,
            db_system_id: self.db_system_id,
            master_user_secret: self.master_user_secret,
        }
    }
}
