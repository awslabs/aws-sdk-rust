// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use std::fmt::Write;
/// See [`AddRoleToDBClusterInput`](crate::input::AddRoleToDBClusterInput)
pub mod add_role_to_db_cluster_input {
    /// A builder for [`AddRoleToDBClusterInput`](crate::input::AddRoleToDBClusterInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) feature_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB cluster to associate the IAM role with.</p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB
        /// cluster, for example, <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The name of the feature for the DB cluster that the IAM role is to be associated with.
        /// For the list of supported feature names, see <a>DBEngineVersion</a>.</p>
        pub fn feature_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.feature_name = Some(input.into());
            self
        }
        pub fn set_feature_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.feature_name = input;
            self
        }
        /// Consumes the builder and constructs a [`AddRoleToDBClusterInput`](crate::input::AddRoleToDBClusterInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::AddRoleToDBClusterInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::AddRoleToDBClusterInput {
                db_cluster_identifier: self.db_cluster_identifier,
                role_arn: self.role_arn,
                feature_name: self.feature_name,
            })
        }
    }
}
#[doc(hidden)]
pub type AddRoleToDBClusterInputOperationOutputAlias = crate::operation::AddRoleToDBCluster;
#[doc(hidden)]
pub type AddRoleToDBClusterInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl AddRoleToDBClusterInput {
    /// Consumes the builder and constructs an Operation<[`AddRoleToDBCluster`](crate::operation::AddRoleToDBCluster)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::AddRoleToDBCluster,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_add_role_to_db_cluster(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::AddRoleToDBCluster::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "AddRoleToDBCluster",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`AddRoleToDBClusterInput`](crate::input::AddRoleToDBClusterInput)
    pub fn builder() -> crate::input::add_role_to_db_cluster_input::Builder {
        crate::input::add_role_to_db_cluster_input::Builder::default()
    }
}

/// See [`AddRoleToDBInstanceInput`](crate::input::AddRoleToDBInstanceInput)
pub mod add_role_to_db_instance_input {
    /// A builder for [`AddRoleToDBInstanceInput`](crate::input::AddRoleToDBInstanceInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) feature_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB instance to associate the IAM role with.</p>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for
        /// example <code>arn:aws:iam::123456789012:role/AccessRole</code>. </p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The name of the feature for the DB instance that the IAM role is to be associated with.
        /// For the list of supported feature names, see <a>DBEngineVersion</a>.
        /// </p>
        pub fn feature_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.feature_name = Some(input.into());
            self
        }
        pub fn set_feature_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.feature_name = input;
            self
        }
        /// Consumes the builder and constructs a [`AddRoleToDBInstanceInput`](crate::input::AddRoleToDBInstanceInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::AddRoleToDBInstanceInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::AddRoleToDBInstanceInput {
                db_instance_identifier: self.db_instance_identifier,
                role_arn: self.role_arn,
                feature_name: self.feature_name,
            })
        }
    }
}
#[doc(hidden)]
pub type AddRoleToDBInstanceInputOperationOutputAlias = crate::operation::AddRoleToDBInstance;
#[doc(hidden)]
pub type AddRoleToDBInstanceInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl AddRoleToDBInstanceInput {
    /// Consumes the builder and constructs an Operation<[`AddRoleToDBInstance`](crate::operation::AddRoleToDBInstance)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::AddRoleToDBInstance,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_add_role_to_db_instance(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::AddRoleToDBInstance::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "AddRoleToDBInstance",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`AddRoleToDBInstanceInput`](crate::input::AddRoleToDBInstanceInput)
    pub fn builder() -> crate::input::add_role_to_db_instance_input::Builder {
        crate::input::add_role_to_db_instance_input::Builder::default()
    }
}

/// See [`AddSourceIdentifierToSubscriptionInput`](crate::input::AddSourceIdentifierToSubscriptionInput)
pub mod add_source_identifier_to_subscription_input {
    /// A builder for [`AddSourceIdentifierToSubscriptionInput`](crate::input::AddSourceIdentifierToSubscriptionInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subscription_name: std::option::Option<std::string::String>,
        pub(crate) source_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the RDS event notification subscription you want to add a source identifier to.</p>
        pub fn subscription_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.subscription_name = Some(input.into());
            self
        }
        pub fn set_subscription_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.subscription_name = input;
            self
        }
        /// <p>The identifier of the event source to be added.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If the source type is a DB instance, a <code>DBInstanceIdentifier</code> value must be supplied.</p>
        /// </li>
        /// <li>
        /// <p>If the source type is a DB cluster, a <code>DBClusterIdentifier</code> value must be supplied.</p>
        /// </li>
        /// <li>
        /// <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> value must be supplied.</p>
        /// </li>
        /// <li>
        /// <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> value must be supplied.</p>
        /// </li>
        /// <li>
        /// <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> value must be supplied.</p>
        /// </li>
        /// <li>
        /// <p>If the source type is a DB cluster snapshot, a <code>DBClusterSnapshotIdentifier</code> value must be supplied.</p>
        /// </li>
        /// </ul>
        pub fn source_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_identifier = Some(input.into());
            self
        }
        pub fn set_source_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`AddSourceIdentifierToSubscriptionInput`](crate::input::AddSourceIdentifierToSubscriptionInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::AddSourceIdentifierToSubscriptionInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::AddSourceIdentifierToSubscriptionInput {
                subscription_name: self.subscription_name,
                source_identifier: self.source_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type AddSourceIdentifierToSubscriptionInputOperationOutputAlias =
    crate::operation::AddSourceIdentifierToSubscription;
#[doc(hidden)]
pub type AddSourceIdentifierToSubscriptionInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl AddSourceIdentifierToSubscriptionInput {
    /// Consumes the builder and constructs an Operation<[`AddSourceIdentifierToSubscription`](crate::operation::AddSourceIdentifierToSubscription)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::AddSourceIdentifierToSubscription,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_add_source_identifier_to_subscription(
                    &self,
                )
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::AddSourceIdentifierToSubscription::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "AddSourceIdentifierToSubscription",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`AddSourceIdentifierToSubscriptionInput`](crate::input::AddSourceIdentifierToSubscriptionInput)
    pub fn builder() -> crate::input::add_source_identifier_to_subscription_input::Builder {
        crate::input::add_source_identifier_to_subscription_input::Builder::default()
    }
}

/// See [`AddTagsToResourceInput`](crate::input::AddTagsToResourceInput)
pub mod add_tags_to_resource_input {
    /// A builder for [`AddTagsToResourceInput`](crate::input::AddTagsToResourceInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_name: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about  
        /// creating an ARN,
        /// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
        /// Constructing an RDS Amazon Resource Name (ARN)</a>.</p>
        pub fn resource_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_name = Some(input.into());
            self
        }
        pub fn set_resource_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_name = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`AddTagsToResourceInput`](crate::input::AddTagsToResourceInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::AddTagsToResourceInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::AddTagsToResourceInput {
                resource_name: self.resource_name,
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type AddTagsToResourceInputOperationOutputAlias = crate::operation::AddTagsToResource;
#[doc(hidden)]
pub type AddTagsToResourceInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl AddTagsToResourceInput {
    /// Consumes the builder and constructs an Operation<[`AddTagsToResource`](crate::operation::AddTagsToResource)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::AddTagsToResource,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_add_tags_to_resource(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::AddTagsToResource::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "AddTagsToResource",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`AddTagsToResourceInput`](crate::input::AddTagsToResourceInput)
    pub fn builder() -> crate::input::add_tags_to_resource_input::Builder {
        crate::input::add_tags_to_resource_input::Builder::default()
    }
}

/// See [`ApplyPendingMaintenanceActionInput`](crate::input::ApplyPendingMaintenanceActionInput)
pub mod apply_pending_maintenance_action_input {
    /// A builder for [`ApplyPendingMaintenanceActionInput`](crate::input::ApplyPendingMaintenanceActionInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_identifier: std::option::Option<std::string::String>,
        pub(crate) apply_action: std::option::Option<std::string::String>,
        pub(crate) opt_in_type: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The RDS Amazon Resource Name (ARN) of the resource that the
        /// pending maintenance action applies to. For information about  
        /// creating an ARN,
        /// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
        /// Constructing an RDS Amazon Resource Name (ARN)</a>.</p>
        pub fn resource_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_identifier = Some(input.into());
            self
        }
        pub fn set_resource_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_identifier = input;
            self
        }
        /// <p>The pending maintenance action to apply to this resource.</p>
        /// <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>,
        /// <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code>
        /// </p>
        pub fn apply_action(mut self, input: impl Into<std::string::String>) -> Self {
            self.apply_action = Some(input.into());
            self
        }
        pub fn set_apply_action(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.apply_action = input;
            self
        }
        /// <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in
        /// request of type <code>immediate</code> can't be undone.</p>
        /// <p>Valid values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>immediate</code> - Apply the maintenance action immediately.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>next-maintenance</code> - Apply the maintenance action during
        /// the next maintenance window for the resource.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code>
        /// opt-in requests.</p>
        /// </li>
        /// </ul>
        pub fn opt_in_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.opt_in_type = Some(input.into());
            self
        }
        pub fn set_opt_in_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.opt_in_type = input;
            self
        }
        /// Consumes the builder and constructs a [`ApplyPendingMaintenanceActionInput`](crate::input::ApplyPendingMaintenanceActionInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ApplyPendingMaintenanceActionInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ApplyPendingMaintenanceActionInput {
                resource_identifier: self.resource_identifier,
                apply_action: self.apply_action,
                opt_in_type: self.opt_in_type,
            })
        }
    }
}
#[doc(hidden)]
pub type ApplyPendingMaintenanceActionInputOperationOutputAlias =
    crate::operation::ApplyPendingMaintenanceAction;
#[doc(hidden)]
pub type ApplyPendingMaintenanceActionInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ApplyPendingMaintenanceActionInput {
    /// Consumes the builder and constructs an Operation<[`ApplyPendingMaintenanceAction`](crate::operation::ApplyPendingMaintenanceAction)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ApplyPendingMaintenanceAction,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_apply_pending_maintenance_action(&self)
                    .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ApplyPendingMaintenanceAction::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ApplyPendingMaintenanceAction",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ApplyPendingMaintenanceActionInput`](crate::input::ApplyPendingMaintenanceActionInput)
    pub fn builder() -> crate::input::apply_pending_maintenance_action_input::Builder {
        crate::input::apply_pending_maintenance_action_input::Builder::default()
    }
}

/// See [`AuthorizeDBSecurityGroupIngressInput`](crate::input::AuthorizeDBSecurityGroupIngressInput)
pub mod authorize_db_security_group_ingress_input {
    /// A builder for [`AuthorizeDBSecurityGroupIngressInput`](crate::input::AuthorizeDBSecurityGroupIngressInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_security_group_name: std::option::Option<std::string::String>,
        pub(crate) cidrip: std::option::Option<std::string::String>,
        pub(crate) ec2_security_group_name: std::option::Option<std::string::String>,
        pub(crate) ec2_security_group_id: std::option::Option<std::string::String>,
        pub(crate) ec2_security_group_owner_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB security group to add authorization to.</p>
        pub fn db_security_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_security_group_name = Some(input.into());
            self
        }
        pub fn set_db_security_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_security_group_name = input;
            self
        }
        /// <p>The IP range to authorize.</p>
        pub fn cidrip(mut self, input: impl Into<std::string::String>) -> Self {
            self.cidrip = Some(input.into());
            self
        }
        pub fn set_cidrip(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cidrip = input;
            self
        }
        /// <p>
        /// Name of the EC2 security group to authorize.
        /// For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
        /// Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code>
        /// or <code>EC2SecurityGroupId</code> must be provided.
        /// </p>
        pub fn ec2_security_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.ec2_security_group_name = Some(input.into());
            self
        }
        pub fn set_ec2_security_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.ec2_security_group_name = input;
            self
        }
        /// <p>
        /// Id of the EC2 security group to authorize.
        /// For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
        /// Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.
        /// </p>
        pub fn ec2_security_group_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.ec2_security_group_id = Some(input.into());
            self
        }
        pub fn set_ec2_security_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.ec2_security_group_id = input;
            self
        }
        /// <p>
        /// AWS account number of the owner of the EC2 security group
        /// specified in the <code>EC2SecurityGroupName</code> parameter.
        /// The AWS access key ID isn't an acceptable value.
        /// For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
        /// Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.
        /// </p>
        pub fn ec2_security_group_owner_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.ec2_security_group_owner_id = Some(input.into());
            self
        }
        pub fn set_ec2_security_group_owner_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.ec2_security_group_owner_id = input;
            self
        }
        /// Consumes the builder and constructs a [`AuthorizeDBSecurityGroupIngressInput`](crate::input::AuthorizeDBSecurityGroupIngressInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::AuthorizeDBSecurityGroupIngressInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::AuthorizeDBSecurityGroupIngressInput {
                db_security_group_name: self.db_security_group_name,
                cidrip: self.cidrip,
                ec2_security_group_name: self.ec2_security_group_name,
                ec2_security_group_id: self.ec2_security_group_id,
                ec2_security_group_owner_id: self.ec2_security_group_owner_id,
            })
        }
    }
}
#[doc(hidden)]
pub type AuthorizeDBSecurityGroupIngressInputOperationOutputAlias =
    crate::operation::AuthorizeDBSecurityGroupIngress;
#[doc(hidden)]
pub type AuthorizeDBSecurityGroupIngressInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl AuthorizeDBSecurityGroupIngressInput {
    /// Consumes the builder and constructs an Operation<[`AuthorizeDBSecurityGroupIngress`](crate::operation::AuthorizeDBSecurityGroupIngress)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::AuthorizeDBSecurityGroupIngress,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_authorize_db_security_group_ingress(
                    &self,
                )
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::AuthorizeDBSecurityGroupIngress::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "AuthorizeDBSecurityGroupIngress",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`AuthorizeDBSecurityGroupIngressInput`](crate::input::AuthorizeDBSecurityGroupIngressInput)
    pub fn builder() -> crate::input::authorize_db_security_group_ingress_input::Builder {
        crate::input::authorize_db_security_group_ingress_input::Builder::default()
    }
}

/// See [`BacktrackDBClusterInput`](crate::input::BacktrackDBClusterInput)
pub mod backtrack_db_cluster_input {
    /// A builder for [`BacktrackDBClusterInput`](crate::input::BacktrackDBClusterInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) backtrack_to: std::option::Option<smithy_types::Instant>,
        pub(crate) force: std::option::Option<bool>,
        pub(crate) use_earliest_time_on_point_in_time_unavailable: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is
        /// stored as a lowercase string.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-cluster1</code>
        /// </p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO
        /// 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia
        /// page.</a>
        /// </p>
        /// <note>
        /// <p>If the specified time isn't a consistent time for the DB cluster,
        /// Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p>
        /// </note>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain a valid ISO 8601 timestamp.</p>
        /// </li>
        /// <li>
        /// <p>Can't contain a timestamp set in the future.</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>2017-07-08T18:00Z</code>
        /// </p>
        pub fn backtrack_to(mut self, input: smithy_types::Instant) -> Self {
            self.backtrack_to = Some(input);
            self
        }
        pub fn set_backtrack_to(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.backtrack_to = input;
            self
        }
        /// <p>A value that indicates whether to force the DB cluster to backtrack when binary logging is
        /// enabled. Otherwise, an error occurs when binary logging is enabled.</p>
        pub fn force(mut self, input: bool) -> Self {
            self.force = Some(input);
            self
        }
        pub fn set_force(mut self, input: std::option::Option<bool>) -> Self {
            self.force = input;
            self
        }
        /// <p>A value that indicates whether to backtrack the DB cluster to the earliest possible
        /// backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest
        /// backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest
        /// backtrack time, an error occurs.</p>
        pub fn use_earliest_time_on_point_in_time_unavailable(mut self, input: bool) -> Self {
            self.use_earliest_time_on_point_in_time_unavailable = Some(input);
            self
        }
        pub fn set_use_earliest_time_on_point_in_time_unavailable(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.use_earliest_time_on_point_in_time_unavailable = input;
            self
        }
        /// Consumes the builder and constructs a [`BacktrackDBClusterInput`](crate::input::BacktrackDBClusterInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::BacktrackDBClusterInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::BacktrackDBClusterInput {
                db_cluster_identifier: self.db_cluster_identifier,
                backtrack_to: self.backtrack_to,
                force: self.force,
                use_earliest_time_on_point_in_time_unavailable: self
                    .use_earliest_time_on_point_in_time_unavailable,
            })
        }
    }
}
#[doc(hidden)]
pub type BacktrackDBClusterInputOperationOutputAlias = crate::operation::BacktrackDBCluster;
#[doc(hidden)]
pub type BacktrackDBClusterInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl BacktrackDBClusterInput {
    /// Consumes the builder and constructs an Operation<[`BacktrackDBCluster`](crate::operation::BacktrackDBCluster)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::BacktrackDBCluster,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_backtrack_db_cluster(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::BacktrackDBCluster::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "BacktrackDBCluster",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`BacktrackDBClusterInput`](crate::input::BacktrackDBClusterInput)
    pub fn builder() -> crate::input::backtrack_db_cluster_input::Builder {
        crate::input::backtrack_db_cluster_input::Builder::default()
    }
}

/// See [`CancelExportTaskInput`](crate::input::CancelExportTaskInput)
pub mod cancel_export_task_input {
    /// A builder for [`CancelExportTaskInput`](crate::input::CancelExportTaskInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) export_task_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of the snapshot export task to cancel.</p>
        pub fn export_task_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.export_task_identifier = Some(input.into());
            self
        }
        pub fn set_export_task_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.export_task_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`CancelExportTaskInput`](crate::input::CancelExportTaskInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CancelExportTaskInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CancelExportTaskInput {
                export_task_identifier: self.export_task_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type CancelExportTaskInputOperationOutputAlias = crate::operation::CancelExportTask;
#[doc(hidden)]
pub type CancelExportTaskInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CancelExportTaskInput {
    /// Consumes the builder and constructs an Operation<[`CancelExportTask`](crate::operation::CancelExportTask)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CancelExportTask,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_cancel_export_task(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CancelExportTask::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CancelExportTask",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CancelExportTaskInput`](crate::input::CancelExportTaskInput)
    pub fn builder() -> crate::input::cancel_export_task_input::Builder {
        crate::input::cancel_export_task_input::Builder::default()
    }
}

/// See [`CopyDBClusterParameterGroupInput`](crate::input::CopyDBClusterParameterGroupInput)
pub mod copy_db_cluster_parameter_group_input {
    /// A builder for [`CopyDBClusterParameterGroupInput`](crate::input::CopyDBClusterParameterGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) source_db_cluster_parameter_group_identifier:
            std::option::Option<std::string::String>,
        pub(crate) target_db_cluster_parameter_group_identifier:
            std::option::Option<std::string::String>,
        pub(crate) target_db_cluster_parameter_group_description:
            std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group.
        /// For information about  
        /// creating an ARN,
        /// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
        /// Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>.
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must specify a valid DB cluster parameter group.</p>
        /// </li>
        /// </ul>
        pub fn source_db_cluster_parameter_group_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.source_db_cluster_parameter_group_identifier = Some(input.into());
            self
        }
        pub fn set_source_db_cluster_parameter_group_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_db_cluster_parameter_group_identifier = input;
            self
        }
        /// <p>The identifier for the copied DB cluster parameter group.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Can't be null, empty, or blank</p>
        /// </li>
        /// <li>
        /// <p>Must contain from 1 to 255 letters, numbers, or hyphens</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-cluster-param-group1</code>
        /// </p>
        pub fn target_db_cluster_parameter_group_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.target_db_cluster_parameter_group_identifier = Some(input.into());
            self
        }
        pub fn set_target_db_cluster_parameter_group_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_db_cluster_parameter_group_identifier = input;
            self
        }
        /// <p>A description for the copied DB cluster parameter group.</p>
        pub fn target_db_cluster_parameter_group_description(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.target_db_cluster_parameter_group_description = Some(input.into());
            self
        }
        pub fn set_target_db_cluster_parameter_group_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_db_cluster_parameter_group_description = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CopyDBClusterParameterGroupInput`](crate::input::CopyDBClusterParameterGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CopyDBClusterParameterGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CopyDBClusterParameterGroupInput {
                source_db_cluster_parameter_group_identifier: self
                    .source_db_cluster_parameter_group_identifier,
                target_db_cluster_parameter_group_identifier: self
                    .target_db_cluster_parameter_group_identifier,
                target_db_cluster_parameter_group_description: self
                    .target_db_cluster_parameter_group_description,
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type CopyDBClusterParameterGroupInputOperationOutputAlias =
    crate::operation::CopyDBClusterParameterGroup;
#[doc(hidden)]
pub type CopyDBClusterParameterGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CopyDBClusterParameterGroupInput {
    /// Consumes the builder and constructs an Operation<[`CopyDBClusterParameterGroup`](crate::operation::CopyDBClusterParameterGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CopyDBClusterParameterGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_copy_db_cluster_parameter_group(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CopyDBClusterParameterGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CopyDBClusterParameterGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CopyDBClusterParameterGroupInput`](crate::input::CopyDBClusterParameterGroupInput)
    pub fn builder() -> crate::input::copy_db_cluster_parameter_group_input::Builder {
        crate::input::copy_db_cluster_parameter_group_input::Builder::default()
    }
}

/// See [`CopyDBClusterSnapshotInput`](crate::input::CopyDBClusterSnapshotInput)
pub mod copy_db_cluster_snapshot_input {
    /// A builder for [`CopyDBClusterSnapshotInput`](crate::input::CopyDBClusterSnapshotInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) source_db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
        pub(crate) target_db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) pre_signed_url: std::option::Option<std::string::String>,
        pub(crate) copy_tags: std::option::Option<bool>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p>
        /// <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must specify a valid system snapshot in the "available" state.</p>
        /// </li>
        /// <li>
        /// <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p>
        /// </li>
        /// <li>
        /// <p>If the source snapshot is in a different AWS Region than the copy,
        /// specify a valid DB cluster snapshot ARN. For more information, go to
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions">
        /// Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-cluster-snapshot1</code>
        /// </p>
        pub fn source_db_cluster_snapshot_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.source_db_cluster_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_source_db_cluster_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_db_cluster_snapshot_identifier = input;
            self
        }
        /// <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-cluster-snapshot2</code>
        /// </p>
        pub fn target_db_cluster_snapshot_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.target_db_cluster_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_target_db_cluster_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_db_cluster_snapshot_identifier = input;
            self
        }
        /// <p>The AWS KMS key identifier for an encrypted DB cluster snapshot.
        /// The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).</p>             
        /// <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new AWS KMS CMK.
        /// If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same AWS KMS key as the source DB cluster snapshot.
        /// </p>
        /// <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p>
        /// <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the AWS KMS key identifier you want to use to encrypt the copy of the DB cluster snapshot
        /// in the destination AWS Region. AWS KMS CMKs are specific to the AWS Region that they are created in, and you can't use CMKs from one AWS Region
        /// in another AWS Region.</p>
        /// <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter,
        /// an error is returned.</p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the
        /// source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.
        /// Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p>
        /// <p>The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be
        /// executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.
        /// The pre-signed URL request must contain the following parameter values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>KmsKeyId</code> - The AWS KMS key identifier for the customer master key (CMK) to use to encrypt the copy of the DB
        /// cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code>
        /// action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster
        /// snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example,
        /// if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code>
        /// looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p>
        /// </li>
        /// </ul>
        /// <p>To learn how to generate a Signature Version 4 signed request, see
        /// <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">
        /// Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and
        /// <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">
        /// Signature Version 4 Signing Process</a>.</p>
        /// <note>
        /// <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI)
        /// instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid
        /// request for the operation that can be executed in the source AWS Region.</p>
        /// </note>
        pub fn pre_signed_url(mut self, input: impl Into<std::string::String>) -> Self {
            self.pre_signed_url = Some(input.into());
            self
        }
        pub fn set_pre_signed_url(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.pre_signed_url = input;
            self
        }
        /// <p>A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot.
        /// By default, tags are not copied.</p>
        pub fn copy_tags(mut self, input: bool) -> Self {
            self.copy_tags = Some(input);
            self
        }
        pub fn set_copy_tags(mut self, input: std::option::Option<bool>) -> Self {
            self.copy_tags = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CopyDBClusterSnapshotInput`](crate::input::CopyDBClusterSnapshotInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CopyDBClusterSnapshotInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CopyDBClusterSnapshotInput {
                source_db_cluster_snapshot_identifier: self.source_db_cluster_snapshot_identifier,
                target_db_cluster_snapshot_identifier: self.target_db_cluster_snapshot_identifier,
                kms_key_id: self.kms_key_id,
                pre_signed_url: self.pre_signed_url,
                copy_tags: self.copy_tags,
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type CopyDBClusterSnapshotInputOperationOutputAlias = crate::operation::CopyDBClusterSnapshot;
#[doc(hidden)]
pub type CopyDBClusterSnapshotInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CopyDBClusterSnapshotInput {
    /// Consumes the builder and constructs an Operation<[`CopyDBClusterSnapshot`](crate::operation::CopyDBClusterSnapshot)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CopyDBClusterSnapshot,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_copy_db_cluster_snapshot(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CopyDBClusterSnapshot::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CopyDBClusterSnapshot",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CopyDBClusterSnapshotInput`](crate::input::CopyDBClusterSnapshotInput)
    pub fn builder() -> crate::input::copy_db_cluster_snapshot_input::Builder {
        crate::input::copy_db_cluster_snapshot_input::Builder::default()
    }
}

/// See [`CopyDBParameterGroupInput`](crate::input::CopyDBParameterGroupInput)
pub mod copy_db_parameter_group_input {
    /// A builder for [`CopyDBParameterGroupInput`](crate::input::CopyDBParameterGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) source_db_parameter_group_identifier: std::option::Option<std::string::String>,
        pub(crate) target_db_parameter_group_identifier: std::option::Option<std::string::String>,
        pub(crate) target_db_parameter_group_description: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>
        /// The identifier or ARN for the source DB parameter group.
        /// For information about  
        /// creating an ARN,
        /// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
        /// Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must specify a valid DB parameter group.</p>
        /// </li>
        /// </ul>
        pub fn source_db_parameter_group_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.source_db_parameter_group_identifier = Some(input.into());
            self
        }
        pub fn set_source_db_parameter_group_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_db_parameter_group_identifier = input;
            self
        }
        /// <p>The identifier for the copied DB parameter group.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Can't be null, empty, or blank</p>
        /// </li>
        /// <li>
        /// <p>Must contain from 1 to 255 letters, numbers, or hyphens</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-db-parameter-group</code>
        /// </p>
        pub fn target_db_parameter_group_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.target_db_parameter_group_identifier = Some(input.into());
            self
        }
        pub fn set_target_db_parameter_group_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_db_parameter_group_identifier = input;
            self
        }
        /// <p>A description for the copied DB parameter group.</p>
        pub fn target_db_parameter_group_description(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.target_db_parameter_group_description = Some(input.into());
            self
        }
        pub fn set_target_db_parameter_group_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_db_parameter_group_description = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CopyDBParameterGroupInput`](crate::input::CopyDBParameterGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CopyDBParameterGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CopyDBParameterGroupInput {
                source_db_parameter_group_identifier: self.source_db_parameter_group_identifier,
                target_db_parameter_group_identifier: self.target_db_parameter_group_identifier,
                target_db_parameter_group_description: self.target_db_parameter_group_description,
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type CopyDBParameterGroupInputOperationOutputAlias = crate::operation::CopyDBParameterGroup;
#[doc(hidden)]
pub type CopyDBParameterGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CopyDBParameterGroupInput {
    /// Consumes the builder and constructs an Operation<[`CopyDBParameterGroup`](crate::operation::CopyDBParameterGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CopyDBParameterGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_copy_db_parameter_group(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CopyDBParameterGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CopyDBParameterGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CopyDBParameterGroupInput`](crate::input::CopyDBParameterGroupInput)
    pub fn builder() -> crate::input::copy_db_parameter_group_input::Builder {
        crate::input::copy_db_parameter_group_input::Builder::default()
    }
}

/// See [`CopyDBSnapshotInput`](crate::input::CopyDBSnapshotInput)
pub mod copy_db_snapshot_input {
    /// A builder for [`CopyDBSnapshotInput`](crate::input::CopyDBSnapshotInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) source_db_snapshot_identifier: std::option::Option<std::string::String>,
        pub(crate) target_db_snapshot_identifier: std::option::Option<std::string::String>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) copy_tags: std::option::Option<bool>,
        pub(crate) pre_signed_url: std::option::Option<std::string::String>,
        pub(crate) option_group_name: std::option::Option<std::string::String>,
        pub(crate) target_custom_availability_zone: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier for the source DB snapshot.</p>
        /// <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB
        /// snapshot identifier. For example, you might specify
        /// <code>rds:mysql-instance1-snapshot-20130805</code>. </p>
        /// <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB
        /// snapshot ARN. For example, you might specify
        /// <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p>
        /// <p>If you are copying from a shared manual DB snapshot,
        /// this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot.
        /// </p>
        /// <p>If you are copying an encrypted snapshot
        /// this parameter must be in the ARN format for the source AWS Region,
        /// and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter.
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must specify a valid system snapshot in the "available" state.</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>rds:mydb-2012-04-02-00-01</code>
        /// </p>
        /// <p>Example: <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>
        /// </p>
        pub fn source_db_snapshot_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.source_db_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_source_db_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_db_snapshot_identifier = input;
            self
        }
        /// <p>The identifier for the copy of the snapshot.
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Can't be null, empty, or blank</p>
        /// </li>
        /// <li>
        /// <p>Must contain from 1 to 255 letters, numbers, or hyphens</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-db-snapshot</code>
        /// </p>
        pub fn target_db_snapshot_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.target_db_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_target_db_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_db_snapshot_identifier = input;
            self
        }
        /// <p>The AWS KMS key identifier for an encrypted DB snapshot.
        /// The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).
        /// </p>
        /// <p>If you copy an encrypted DB snapshot from your AWS account,
        /// you can specify a value for this parameter to encrypt the copy with a new AWS KMS CMK.
        /// If you don't specify a value for this parameter,
        /// then the copy of the DB snapshot is encrypted with the same AWS KMS key as the source DB snapshot.
        /// </p>
        /// <p>If you copy an encrypted DB snapshot that is shared from another AWS account,
        /// then you must specify a value for this parameter.
        /// </p>
        /// <p>If you specify this parameter when you copy an unencrypted snapshot,
        /// the copy is encrypted.
        /// </p>
        /// <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify
        /// a AWS KMS key identifier for the destination AWS Region. AWS KMS CMKs are specific to the AWS Region
        /// that they are created in, and you can't use CMKs from one AWS Region in another
        /// AWS Region.
        /// </p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.</p>
        pub fn copy_tags(mut self, input: bool) -> Self {
            self.copy_tags = Some(input);
            self
        }
        pub fn set_copy_tags(mut self, input: std::option::Option<bool>) -> Self {
            self.copy_tags = input;
            self
        }
        /// <p>The URL that contains a Signature Version 4 signed request for the
        /// <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the
        /// source DB snapshot to copy. </p>
        /// <p>You must specify this parameter when you copy an encrypted DB snapshot from another
        /// AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are
        /// copying an encrypted DB snapshot in the same AWS Region.</p>
        /// <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action
        /// that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied.
        /// The presigned URL request must contain the following parameter values:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to.
        /// This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL.
        /// </p>
        /// <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region
        /// to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in
        /// the us-east-1 AWS Region and provide a presigned URL that contains a call to the
        /// <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this
        /// example, the <code>DestinationRegion</code> in the presigned URL must be set to
        /// the us-east-1 AWS Region. </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>KmsKeyId</code> - The AWS KMS key identifier for the customer master key (CMK) to use to encrypt the copy of the DB snapshot in the destination AWS Region.
        /// This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region,
        /// and the action contained in the presigned URL.
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied.
        /// This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region.
        /// For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like
        /// the following example: <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>.
        /// </p>
        /// </li>
        /// </ul>
        /// <p>To learn how to generate a Signature Version 4 signed request, see
        /// <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and
        /// <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>.
        /// </p>
        /// <note>
        /// <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI)
        /// instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid
        /// request for the operation that can be executed in the source AWS Region.</p>
        /// </note>
        pub fn pre_signed_url(mut self, input: impl Into<std::string::String>) -> Self {
            self.pre_signed_url = Some(input.into());
            self
        }
        pub fn set_pre_signed_url(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.pre_signed_url = input;
            self
        }
        /// <p>The name of an option group to associate with the copy of the snapshot.</p>
        /// <p>Specify this option if you are copying a snapshot from one AWS Region to another,
        /// and your DB instance uses a nondefault option group.
        /// If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server,
        /// you must specify this option when copying across AWS Regions.
        /// For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option group considerations</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        /// <p>The external custom Availability Zone (CAZ) identifier for the target CAZ.</p>
        /// <p>Example: <code>rds-caz-aiqhTgQv</code>.</p>
        pub fn target_custom_availability_zone(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.target_custom_availability_zone = Some(input.into());
            self
        }
        pub fn set_target_custom_availability_zone(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_custom_availability_zone = input;
            self
        }
        /// Consumes the builder and constructs a [`CopyDBSnapshotInput`](crate::input::CopyDBSnapshotInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CopyDBSnapshotInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CopyDBSnapshotInput {
                source_db_snapshot_identifier: self.source_db_snapshot_identifier,
                target_db_snapshot_identifier: self.target_db_snapshot_identifier,
                kms_key_id: self.kms_key_id,
                tags: self.tags,
                copy_tags: self.copy_tags,
                pre_signed_url: self.pre_signed_url,
                option_group_name: self.option_group_name,
                target_custom_availability_zone: self.target_custom_availability_zone,
            })
        }
    }
}
#[doc(hidden)]
pub type CopyDBSnapshotInputOperationOutputAlias = crate::operation::CopyDBSnapshot;
#[doc(hidden)]
pub type CopyDBSnapshotInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CopyDBSnapshotInput {
    /// Consumes the builder and constructs an Operation<[`CopyDBSnapshot`](crate::operation::CopyDBSnapshot)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CopyDBSnapshot,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_copy_db_snapshot(&self).map_err(
                |err| smithy_http::operation::BuildError::SerializationError(err.into()),
            )?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CopyDBSnapshot::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CopyDBSnapshot",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CopyDBSnapshotInput`](crate::input::CopyDBSnapshotInput)
    pub fn builder() -> crate::input::copy_db_snapshot_input::Builder {
        crate::input::copy_db_snapshot_input::Builder::default()
    }
}

/// See [`CopyOptionGroupInput`](crate::input::CopyOptionGroupInput)
pub mod copy_option_group_input {
    /// A builder for [`CopyOptionGroupInput`](crate::input::CopyOptionGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) source_option_group_identifier: std::option::Option<std::string::String>,
        pub(crate) target_option_group_identifier: std::option::Option<std::string::String>,
        pub(crate) target_option_group_description: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The identifier for the source option group.
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must specify a valid option group.</p>
        /// </li>
        /// </ul>
        pub fn source_option_group_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.source_option_group_identifier = Some(input.into());
            self
        }
        pub fn set_source_option_group_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_option_group_identifier = input;
            self
        }
        /// <p>The identifier for the copied option group.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Can't be null, empty, or blank</p>
        /// </li>
        /// <li>
        /// <p>Must contain from 1 to 255 letters, numbers, or hyphens</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-option-group</code>
        /// </p>
        pub fn target_option_group_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.target_option_group_identifier = Some(input.into());
            self
        }
        pub fn set_target_option_group_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_option_group_identifier = input;
            self
        }
        /// <p>The description for the copied option group.</p>
        pub fn target_option_group_description(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.target_option_group_description = Some(input.into());
            self
        }
        pub fn set_target_option_group_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_option_group_description = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CopyOptionGroupInput`](crate::input::CopyOptionGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CopyOptionGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CopyOptionGroupInput {
                source_option_group_identifier: self.source_option_group_identifier,
                target_option_group_identifier: self.target_option_group_identifier,
                target_option_group_description: self.target_option_group_description,
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type CopyOptionGroupInputOperationOutputAlias = crate::operation::CopyOptionGroup;
#[doc(hidden)]
pub type CopyOptionGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CopyOptionGroupInput {
    /// Consumes the builder and constructs an Operation<[`CopyOptionGroup`](crate::operation::CopyOptionGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CopyOptionGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_copy_option_group(&self).map_err(
                |err| smithy_http::operation::BuildError::SerializationError(err.into()),
            )?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CopyOptionGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CopyOptionGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CopyOptionGroupInput`](crate::input::CopyOptionGroupInput)
    pub fn builder() -> crate::input::copy_option_group_input::Builder {
        crate::input::copy_option_group_input::Builder::default()
    }
}

/// See [`CreateCustomAvailabilityZoneInput`](crate::input::CreateCustomAvailabilityZoneInput)
pub mod create_custom_availability_zone_input {
    /// A builder for [`CreateCustomAvailabilityZoneInput`](crate::input::CreateCustomAvailabilityZoneInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) custom_availability_zone_name: std::option::Option<std::string::String>,
        pub(crate) existing_vpn_id: std::option::Option<std::string::String>,
        pub(crate) new_vpn_tunnel_name: std::option::Option<std::string::String>,
        pub(crate) vpn_tunnel_originator_ip: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the custom Availability Zone (AZ).</p>
        pub fn custom_availability_zone_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.custom_availability_zone_name = Some(input.into());
            self
        }
        pub fn set_custom_availability_zone_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.custom_availability_zone_name = input;
            self
        }
        /// <p>The ID of an existing virtual private network (VPN) between the Amazon RDS website and
        /// the VMware vSphere cluster.</p>
        pub fn existing_vpn_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.existing_vpn_id = Some(input.into());
            self
        }
        pub fn set_existing_vpn_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.existing_vpn_id = input;
            self
        }
        /// <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p>
        /// <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
        pub fn new_vpn_tunnel_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.new_vpn_tunnel_name = Some(input.into());
            self
        }
        pub fn set_new_vpn_tunnel_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.new_vpn_tunnel_name = input;
            self
        }
        /// <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p>
        /// <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
        pub fn vpn_tunnel_originator_ip(mut self, input: impl Into<std::string::String>) -> Self {
            self.vpn_tunnel_originator_ip = Some(input.into());
            self
        }
        pub fn set_vpn_tunnel_originator_ip(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.vpn_tunnel_originator_ip = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateCustomAvailabilityZoneInput`](crate::input::CreateCustomAvailabilityZoneInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CreateCustomAvailabilityZoneInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CreateCustomAvailabilityZoneInput {
                custom_availability_zone_name: self.custom_availability_zone_name,
                existing_vpn_id: self.existing_vpn_id,
                new_vpn_tunnel_name: self.new_vpn_tunnel_name,
                vpn_tunnel_originator_ip: self.vpn_tunnel_originator_ip,
            })
        }
    }
}
#[doc(hidden)]
pub type CreateCustomAvailabilityZoneInputOperationOutputAlias =
    crate::operation::CreateCustomAvailabilityZone;
#[doc(hidden)]
pub type CreateCustomAvailabilityZoneInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CreateCustomAvailabilityZoneInput {
    /// Consumes the builder and constructs an Operation<[`CreateCustomAvailabilityZone`](crate::operation::CreateCustomAvailabilityZone)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CreateCustomAvailabilityZone,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_create_custom_availability_zone(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CreateCustomAvailabilityZone::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CreateCustomAvailabilityZone",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CreateCustomAvailabilityZoneInput`](crate::input::CreateCustomAvailabilityZoneInput)
    pub fn builder() -> crate::input::create_custom_availability_zone_input::Builder {
        crate::input::create_custom_availability_zone_input::Builder::default()
    }
}

/// See [`CreateDBClusterInput`](crate::input::CreateDBClusterInput)
pub mod create_db_cluster_input {
    /// A builder for [`CreateDBClusterInput`](crate::input::CreateDBClusterInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) backup_retention_period: std::option::Option<i32>,
        pub(crate) character_set_name: std::option::Option<std::string::String>,
        pub(crate) database_name: std::option::Option<std::string::String>,
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) db_cluster_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
        pub(crate) engine: std::option::Option<std::string::String>,
        pub(crate) engine_version: std::option::Option<std::string::String>,
        pub(crate) port: std::option::Option<i32>,
        pub(crate) master_username: std::option::Option<std::string::String>,
        pub(crate) master_user_password: std::option::Option<std::string::String>,
        pub(crate) option_group_name: std::option::Option<std::string::String>,
        pub(crate) preferred_backup_window: std::option::Option<std::string::String>,
        pub(crate) preferred_maintenance_window: std::option::Option<std::string::String>,
        pub(crate) replication_source_identifier: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) storage_encrypted: std::option::Option<bool>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) pre_signed_url: std::option::Option<std::string::String>,
        pub(crate) enable_iam_database_authentication: std::option::Option<bool>,
        pub(crate) backtrack_window: std::option::Option<i64>,
        pub(crate) enable_cloudwatch_logs_exports:
            std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) engine_mode: std::option::Option<std::string::String>,
        pub(crate) scaling_configuration: std::option::Option<crate::model::ScalingConfiguration>,
        pub(crate) deletion_protection: std::option::Option<bool>,
        pub(crate) global_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) enable_http_endpoint: std::option::Option<bool>,
        pub(crate) copy_tags_to_snapshot: std::option::Option<bool>,
        pub(crate) domain: std::option::Option<std::string::String>,
        pub(crate) domain_iam_role_name: std::option::Option<std::string::String>,
        pub(crate) enable_global_write_forwarding: std::option::Option<bool>,
    }
    impl Builder {
        pub fn availability_zones(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.availability_zones.unwrap_or_default();
            v.push(input.into());
            self.availability_zones = Some(v);
            self
        }
        pub fn set_availability_zones(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.availability_zones = input;
            self
        }
        /// <p>The number of days for which automated backups are retained.</p>
        /// <p>Default: 1</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be a value from 1 to 35</p>
        /// </li>
        /// </ul>
        pub fn backup_retention_period(mut self, input: i32) -> Self {
            self.backup_retention_period = Some(input);
            self
        }
        pub fn set_backup_retention_period(mut self, input: std::option::Option<i32>) -> Self {
            self.backup_retention_period = input;
            self
        }
        /// <p>A value that indicates that the DB cluster should be associated with the specified CharacterSet.</p>
        pub fn character_set_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.character_set_name = Some(input.into());
            self
        }
        pub fn set_character_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.character_set_name = input;
            self
        }
        /// <p>The name for your database of up to 64 alphanumeric characters. If you do not
        /// provide a name, Amazon RDS doesn't create a database in the DB cluster you are
        /// creating.</p>
        pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.database_name = Some(input.into());
            self
        }
        pub fn set_database_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.database_name = input;
            self
        }
        /// <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-cluster1</code>
        /// </p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>
        /// The name of the DB cluster parameter group to associate
        /// with this DB cluster. If you do not specify a value, then
        /// the default DB cluster parameter group for the specified DB engine and version is used.
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match the name of an existing DB cluster parameter group.</p>
        /// </li>
        /// </ul>
        pub fn db_cluster_parameter_group_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_cluster_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = input;
            self
        }
        pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.vpc_security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.vpc_security_group_ids = Some(v);
            self
        }
        pub fn set_vpc_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.vpc_security_group_ids = input;
            self
        }
        /// <p>A DB subnet group to associate with this DB cluster.</p>
        /// <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p>
        /// <p>Example: <code>mySubnetgroup</code>
        /// </p>
        pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_subnet_group_name = Some(input.into());
            self
        }
        pub fn set_db_subnet_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_subnet_group_name = input;
            self
        }
        /// <p>The name of the database engine to be used for this DB cluster.</p>
        /// <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code>
        /// </p>
        pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine = Some(input.into());
            self
        }
        pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine = input;
            self
        }
        /// <p>The version number of the database engine to use.</p>
        /// <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code>
        /// </p>
        /// <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code>
        /// </p>
        /// <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code>
        /// </p>
        /// <p>
        /// <b>Aurora MySQL</b>
        /// </p>
        /// <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code>
        /// </p>
        /// <p>
        /// <b>Aurora PostgreSQL</b>
        /// </p>
        /// <p>Example: <code>9.6.3</code>, <code>10.7</code>
        /// </p>
        pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_version = Some(input.into());
            self
        }
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_version = input;
            self
        }
        /// <p>The port number on which the instances in the DB cluster accept connections.</p>
        /// <p>
        /// Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql.
        /// </p>
        pub fn port(mut self, input: i32) -> Self {
            self.port = Some(input);
            self
        }
        pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
            self.port = input;
            self
        }
        /// <p>The name of the master user for the DB cluster.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be 1 to 16 letters or numbers.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't be a reserved word for the chosen database engine.</p>
        /// </li>
        /// </ul>
        pub fn master_username(mut self, input: impl Into<std::string::String>) -> Self {
            self.master_username = Some(input.into());
            self
        }
        pub fn set_master_username(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.master_username = input;
            self
        }
        /// <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p>
        /// <p>Constraints: Must contain from 8 to 41 characters.</p>
        pub fn master_user_password(mut self, input: impl Into<std::string::String>) -> Self {
            self.master_user_password = Some(input.into());
            self
        }
        pub fn set_master_user_password(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.master_user_password = input;
            self
        }
        /// <p>A value that indicates that the DB cluster should be associated with the specified option group.</p>
        /// <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        /// <p>The daily time range during which automated backups are created
        /// if automated backups are enabled
        /// using the <code>BackupRetentionPeriod</code> parameter.
        /// </p>
        /// <p>The default is a 30-minute window selected at random from an
        /// 8-hour block of time for each AWS Region.
        /// To view the time blocks available, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow">
        /// Backup window</a> in the <i>Amazon Aurora User Guide.</i>
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
        /// </li>
        /// <li>
        /// <p>Must be in Universal Coordinated Time (UTC).</p>
        /// </li>
        /// <li>
        /// <p>Must not conflict with the preferred maintenance window.</p>
        /// </li>
        /// <li>
        /// <p>Must be at least 30 minutes.</p>
        /// </li>
        /// </ul>
        pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
            self.preferred_backup_window = Some(input.into());
            self
        }
        pub fn set_preferred_backup_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.preferred_backup_window = input;
            self
        }
        /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
        /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
        /// </p>
        /// <p>The default is a 30-minute window selected at random from an
        /// 8-hour block of time for each AWS Region, occurring on a random day of the
        /// week. To see the time blocks available, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora">
        /// Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i>
        /// </p>
        /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
        /// <p>Constraints: Minimum 30-minute window.</p>
        pub fn preferred_maintenance_window(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.preferred_maintenance_window = Some(input.into());
            self
        }
        pub fn set_preferred_maintenance_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.preferred_maintenance_window = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB
        /// cluster is created as a read replica.</p>
        pub fn replication_source_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.replication_source_identifier = Some(input.into());
            self
        }
        pub fn set_replication_source_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.replication_source_identifier = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>A value that indicates whether the DB cluster is encrypted.</p>
        pub fn storage_encrypted(mut self, input: bool) -> Self {
            self.storage_encrypted = Some(input);
            self
        }
        pub fn set_storage_encrypted(mut self, input: std::option::Option<bool>) -> Self {
            self.storage_encrypted = input;
            self
        }
        /// <p>The AWS KMS key identifier for an encrypted DB cluster.</p>
        /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).
        /// To use a CMK in a different AWS account, specify the key ARN or alias ARN.</p>
        /// <p>When a CMK isn't specified in <code>KmsKeyId</code>:</p>
        /// <ul>
        /// <li>
        /// <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted
        /// source, then Amazon RDS will use the CMK used to encrypt the
        /// source. Otherwise, Amazon RDS will use your default CMK. </p>
        /// </li>
        /// <li>
        /// <p>If the <code>StorageEncrypted</code> parameter is enabled and
        /// <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS
        /// will use your default CMK.</p>
        /// </li>
        /// </ul>
        /// <p>There is a default CMK for your AWS account. Your AWS account
        /// has a different default CMK for each AWS Region.</p>
        /// <p>If you create a read replica of an encrypted DB cluster in another AWS Region, you
        /// must set <code>KmsKeyId</code> to a AWS KMS key identifier that is valid in the destination AWS
        /// Region. This CMK is used to encrypt the read replica in that AWS Region.</p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>A URL that contains a Signature Version 4 signed request for
        /// the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from.
        /// You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p>
        /// <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action
        /// that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p>
        /// <p>The pre-signed URL request must contain the following parameter values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of
        /// the DB cluster in the destination AWS Region. This should refer to the same AWS KMS CMK for both the <code>CreateDBCluster</code>
        /// action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>DestinationRegion</code> - The name of the AWS Region that Aurora read replica will
        /// be created in.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied.
        /// This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an
        /// encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like
        /// Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p>
        /// </li>
        /// </ul>
        /// <p>To learn how to generate a Signature Version 4 signed request, see
        /// <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">
        /// Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and
        /// <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">
        /// Signature Version 4 Signing Process</a>.</p>
        /// <note>
        /// <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI)
        /// instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid
        /// request for the operation that can be executed in the source AWS Region.</p>
        /// </note>
        pub fn pre_signed_url(mut self, input: impl Into<std::string::String>) -> Self {
            self.pre_signed_url = Some(input.into());
            self
        }
        pub fn set_pre_signed_url(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.pre_signed_url = input;
            self
        }
        /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
        /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
        /// IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i>
        /// </p>
        pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
            self.enable_iam_database_authentication = Some(input);
            self
        }
        pub fn set_enable_iam_database_authentication(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.enable_iam_database_authentication = input;
            self
        }
        /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to
        /// 0. </p>
        /// <note>
        /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
        /// </note>
        /// <p>Default: 0</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p>
        /// </li>
        /// </ul>
        pub fn backtrack_window(mut self, input: i64) -> Self {
            self.backtrack_window = Some(input);
            self
        }
        pub fn set_backtrack_window(mut self, input: std::option::Option<i64>) -> Self {
            self.backtrack_window = input;
            self
        }
        pub fn enable_cloudwatch_logs_exports(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            let mut v = self.enable_cloudwatch_logs_exports.unwrap_or_default();
            v.push(input.into());
            self.enable_cloudwatch_logs_exports = Some(v);
            self
        }
        pub fn set_enable_cloudwatch_logs_exports(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.enable_cloudwatch_logs_exports = input;
            self
        }
        /// <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>,
        /// <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p>
        /// <p>The <code>parallelquery</code> engine mode isn't required for Aurora MySQL version 1.23 and higher 1.x versions,
        /// and version 2.09 and higher 2.x versions.</p>
        /// <p>The <code>global</code> engine mode isn't required for Aurora MySQL version 1.22 and higher 1.x versions,
        /// and <code>global</code> engine mode isn't required for any 2.x versions.</p>
        /// <p>The <code>multimaster</code> engine mode only applies for DB clusters created with Aurora MySQL version 5.6.10a.</p>
        /// <p>For Aurora PostgreSQL, the <code>global</code> engine mode isn't required, and both the <code>parallelquery</code>
        /// and the <code>multimaster</code> engine modes currently aren't supported.</p>
        /// <p>Limitations and requirements apply to some DB engine modes. For more information, see the
        /// following sections in the <i>Amazon Aurora User Guide</i>:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations">
        /// Limitations of Aurora Serverless</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations">
        /// Limitations of Parallel Query</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations">
        /// Limitations of Aurora Global Databases</a>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations">
        /// Limitations of Multi-Master Clusters</a>
        /// </p>
        /// </li>
        /// </ul>
        pub fn engine_mode(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_mode = Some(input.into());
            self
        }
        pub fn set_engine_mode(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine_mode = input;
            self
        }
        /// <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
        pub fn scaling_configuration(mut self, input: crate::model::ScalingConfiguration) -> Self {
            self.scaling_configuration = Some(input);
            self
        }
        pub fn set_scaling_configuration(
            mut self,
            input: std::option::Option<crate::model::ScalingConfiguration>,
        ) -> Self {
            self.scaling_configuration = input;
            self
        }
        /// <p>A value that indicates whether the DB cluster has deletion protection enabled.
        /// The database can't be deleted when deletion protection is enabled. By default,
        /// deletion protection is disabled.</p>
        pub fn deletion_protection(mut self, input: bool) -> Self {
            self.deletion_protection = Some(input);
            self
        }
        pub fn set_deletion_protection(mut self, input: std::option::Option<bool>) -> Self {
            self.deletion_protection = input;
            self
        }
        /// <p>
        /// The global cluster ID of an Aurora cluster that becomes the primary cluster
        /// in the new global database cluster.
        /// </p>
        pub fn global_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.global_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_global_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.global_cluster_identifier = input;
            self
        }
        /// <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint
        /// is disabled.</p>
        /// <p>When enabled, the HTTP endpoint provides a connectionless web service API for running
        /// SQL queries on the Aurora Serverless DB cluster. You can also query your database
        /// from inside the RDS console with the query editor.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the
        /// <i>Amazon Aurora User Guide</i>.</p>
        pub fn enable_http_endpoint(mut self, input: bool) -> Self {
            self.enable_http_endpoint = Some(input);
            self
        }
        pub fn set_enable_http_endpoint(mut self, input: std::option::Option<bool>) -> Self {
            self.enable_http_endpoint = input;
            self
        }
        /// <p>A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster.
        /// The default is not to copy them.</p>
        pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
            self.copy_tags_to_snapshot = Some(input);
            self
        }
        pub fn set_copy_tags_to_snapshot(mut self, input: std::option::Option<bool>) -> Self {
            self.copy_tags_to_snapshot = input;
            self
        }
        /// <p>The Active Directory directory ID to create the DB cluster in.</p>
        /// <p>
        /// For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster.
        /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a>
        /// in the <i>Amazon Aurora User Guide</i>.
        /// </p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain = Some(input.into());
            self
        }
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.domain = input;
            self
        }
        /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
        pub fn domain_iam_role_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain_iam_role_name = Some(input.into());
            self
        }
        pub fn set_domain_iam_role_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.domain_iam_role_name = input;
            self
        }
        /// <p>A value that indicates whether to enable this DB cluster to forward write operations to the primary cluster of an
        /// Aurora global database (<a>GlobalCluster</a>). By default, write operations are not allowed on Aurora DB clusters that
        /// are secondary clusters in an Aurora global database.</p>
        /// <p>You can set this value only on Aurora DB clusters that are members of an Aurora global database. With this parameter
        /// enabled, a secondary cluster can forward writes to the current primary cluster and the resulting changes are replicated back to
        /// this cluster. For the primary DB cluster of an Aurora global database, this value is used immediately if the
        /// primary is demoted by the <a>FailoverGlobalCluster</a> API operation, but it does nothing until then.
        /// </p>
        pub fn enable_global_write_forwarding(mut self, input: bool) -> Self {
            self.enable_global_write_forwarding = Some(input);
            self
        }
        pub fn set_enable_global_write_forwarding(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.enable_global_write_forwarding = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBClusterInput`](crate::input::CreateDBClusterInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CreateDBClusterInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CreateDBClusterInput {
                availability_zones: self.availability_zones,
                backup_retention_period: self.backup_retention_period,
                character_set_name: self.character_set_name,
                database_name: self.database_name,
                db_cluster_identifier: self.db_cluster_identifier,
                db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
                vpc_security_group_ids: self.vpc_security_group_ids,
                db_subnet_group_name: self.db_subnet_group_name,
                engine: self.engine,
                engine_version: self.engine_version,
                port: self.port,
                master_username: self.master_username,
                master_user_password: self.master_user_password,
                option_group_name: self.option_group_name,
                preferred_backup_window: self.preferred_backup_window,
                preferred_maintenance_window: self.preferred_maintenance_window,
                replication_source_identifier: self.replication_source_identifier,
                tags: self.tags,
                storage_encrypted: self.storage_encrypted,
                kms_key_id: self.kms_key_id,
                pre_signed_url: self.pre_signed_url,
                enable_iam_database_authentication: self.enable_iam_database_authentication,
                backtrack_window: self.backtrack_window,
                enable_cloudwatch_logs_exports: self.enable_cloudwatch_logs_exports,
                engine_mode: self.engine_mode,
                scaling_configuration: self.scaling_configuration,
                deletion_protection: self.deletion_protection,
                global_cluster_identifier: self.global_cluster_identifier,
                enable_http_endpoint: self.enable_http_endpoint,
                copy_tags_to_snapshot: self.copy_tags_to_snapshot,
                domain: self.domain,
                domain_iam_role_name: self.domain_iam_role_name,
                enable_global_write_forwarding: self.enable_global_write_forwarding,
            })
        }
    }
}
#[doc(hidden)]
pub type CreateDBClusterInputOperationOutputAlias = crate::operation::CreateDBCluster;
#[doc(hidden)]
pub type CreateDBClusterInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CreateDBClusterInput {
    /// Consumes the builder and constructs an Operation<[`CreateDBCluster`](crate::operation::CreateDBCluster)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CreateDBCluster,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_create_db_cluster(&self).map_err(
                |err| smithy_http::operation::BuildError::SerializationError(err.into()),
            )?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CreateDBCluster::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CreateDBCluster",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CreateDBClusterInput`](crate::input::CreateDBClusterInput)
    pub fn builder() -> crate::input::create_db_cluster_input::Builder {
        crate::input::create_db_cluster_input::Builder::default()
    }
}

/// See [`CreateDBClusterEndpointInput`](crate::input::CreateDBClusterEndpointInput)
pub mod create_db_cluster_endpoint_input {
    /// A builder for [`CreateDBClusterEndpointInput`](crate::input::CreateDBClusterEndpointInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) db_cluster_endpoint_identifier: std::option::Option<std::string::String>,
        pub(crate) endpoint_type: std::option::Option<std::string::String>,
        pub(crate) static_members: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) excluded_members: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is
        /// stored as a lowercase string.</p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>The identifier to use for the new endpoint. This parameter is stored as a lowercase string.</p>
        pub fn db_cluster_endpoint_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_endpoint_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_identifier = input;
            self
        }
        /// <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.</p>
        pub fn endpoint_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.endpoint_type = Some(input.into());
            self
        }
        pub fn set_endpoint_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.endpoint_type = input;
            self
        }
        pub fn static_members(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.static_members.unwrap_or_default();
            v.push(input.into());
            self.static_members = Some(v);
            self
        }
        pub fn set_static_members(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.static_members = input;
            self
        }
        pub fn excluded_members(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.excluded_members.unwrap_or_default();
            v.push(input.into());
            self.excluded_members = Some(v);
            self
        }
        pub fn set_excluded_members(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.excluded_members = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBClusterEndpointInput`](crate::input::CreateDBClusterEndpointInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CreateDBClusterEndpointInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CreateDBClusterEndpointInput {
                db_cluster_identifier: self.db_cluster_identifier,
                db_cluster_endpoint_identifier: self.db_cluster_endpoint_identifier,
                endpoint_type: self.endpoint_type,
                static_members: self.static_members,
                excluded_members: self.excluded_members,
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type CreateDBClusterEndpointInputOperationOutputAlias =
    crate::operation::CreateDBClusterEndpoint;
#[doc(hidden)]
pub type CreateDBClusterEndpointInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CreateDBClusterEndpointInput {
    /// Consumes the builder and constructs an Operation<[`CreateDBClusterEndpoint`](crate::operation::CreateDBClusterEndpoint)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CreateDBClusterEndpoint,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_create_db_cluster_endpoint(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CreateDBClusterEndpoint::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CreateDBClusterEndpoint",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CreateDBClusterEndpointInput`](crate::input::CreateDBClusterEndpointInput)
    pub fn builder() -> crate::input::create_db_cluster_endpoint_input::Builder {
        crate::input::create_db_cluster_endpoint_input::Builder::default()
    }
}

/// See [`CreateDBClusterParameterGroupInput`](crate::input::CreateDBClusterParameterGroupInput)
pub mod create_db_cluster_parameter_group_input {
    /// A builder for [`CreateDBClusterParameterGroupInput`](crate::input::CreateDBClusterParameterGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) db_parameter_group_family: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The name of the DB cluster parameter group.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the name of an existing DB cluster parameter group.</p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>This value is stored as a lowercase string.</p>
        /// </note>
        pub fn db_cluster_parameter_group_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_cluster_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = input;
            self
        }
        /// <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster
        /// parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p>
        /// <p>
        /// <b>Aurora MySQL</b>
        /// </p>
        /// <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code>
        /// </p>
        /// <p>
        /// <b>Aurora PostgreSQL</b>
        /// </p>
        /// <p>Example: <code>aurora-postgresql9.6</code>
        /// </p>
        /// <p>To list all of the available parameter group families for a DB engine, use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine <engine></code>
        /// </p>
        /// <p>For example, to list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine aurora-postgresql</code>
        /// </p>
        /// <note>
        /// <p>The output contains duplicates.</p>
        /// </note>
        /// <p>The following are the valid DB engine values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>aurora-postgresql</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn db_parameter_group_family(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_family = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_family(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_family = input;
            self
        }
        /// <p>The description for the DB cluster parameter group.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBClusterParameterGroupInput`](crate::input::CreateDBClusterParameterGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CreateDBClusterParameterGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CreateDBClusterParameterGroupInput {
                db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
                db_parameter_group_family: self.db_parameter_group_family,
                description: self.description,
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type CreateDBClusterParameterGroupInputOperationOutputAlias =
    crate::operation::CreateDBClusterParameterGroup;
#[doc(hidden)]
pub type CreateDBClusterParameterGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CreateDBClusterParameterGroupInput {
    /// Consumes the builder and constructs an Operation<[`CreateDBClusterParameterGroup`](crate::operation::CreateDBClusterParameterGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CreateDBClusterParameterGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_create_db_cluster_parameter_group(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CreateDBClusterParameterGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CreateDBClusterParameterGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CreateDBClusterParameterGroupInput`](crate::input::CreateDBClusterParameterGroupInput)
    pub fn builder() -> crate::input::create_db_cluster_parameter_group_input::Builder {
        crate::input::create_db_cluster_parameter_group_input::Builder::default()
    }
}

/// See [`CreateDBClusterSnapshotInput`](crate::input::CreateDBClusterSnapshotInput)
pub mod create_db_cluster_snapshot_input {
    /// A builder for [`CreateDBClusterSnapshotInput`](crate::input::CreateDBClusterSnapshotInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-cluster1-snapshot1</code>
        /// </p>
        pub fn db_cluster_snapshot_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_snapshot_identifier = input;
            self
        }
        /// <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the identifier of an existing DBCluster.</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-cluster1</code>
        /// </p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBClusterSnapshotInput`](crate::input::CreateDBClusterSnapshotInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CreateDBClusterSnapshotInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CreateDBClusterSnapshotInput {
                db_cluster_snapshot_identifier: self.db_cluster_snapshot_identifier,
                db_cluster_identifier: self.db_cluster_identifier,
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type CreateDBClusterSnapshotInputOperationOutputAlias =
    crate::operation::CreateDBClusterSnapshot;
#[doc(hidden)]
pub type CreateDBClusterSnapshotInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CreateDBClusterSnapshotInput {
    /// Consumes the builder and constructs an Operation<[`CreateDBClusterSnapshot`](crate::operation::CreateDBClusterSnapshot)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CreateDBClusterSnapshot,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_create_db_cluster_snapshot(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CreateDBClusterSnapshot::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CreateDBClusterSnapshot",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CreateDBClusterSnapshotInput`](crate::input::CreateDBClusterSnapshotInput)
    pub fn builder() -> crate::input::create_db_cluster_snapshot_input::Builder {
        crate::input::create_db_cluster_snapshot_input::Builder::default()
    }
}

/// See [`CreateDBInstanceInput`](crate::input::CreateDBInstanceInput)
pub mod create_db_instance_input {
    /// A builder for [`CreateDBInstanceInput`](crate::input::CreateDBInstanceInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_name: std::option::Option<std::string::String>,
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) allocated_storage: std::option::Option<i32>,
        pub(crate) db_instance_class: std::option::Option<std::string::String>,
        pub(crate) engine: std::option::Option<std::string::String>,
        pub(crate) master_username: std::option::Option<std::string::String>,
        pub(crate) master_user_password: std::option::Option<std::string::String>,
        pub(crate) db_security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) availability_zone: std::option::Option<std::string::String>,
        pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
        pub(crate) preferred_maintenance_window: std::option::Option<std::string::String>,
        pub(crate) db_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) backup_retention_period: std::option::Option<i32>,
        pub(crate) preferred_backup_window: std::option::Option<std::string::String>,
        pub(crate) port: std::option::Option<i32>,
        pub(crate) multi_az: std::option::Option<bool>,
        pub(crate) engine_version: std::option::Option<std::string::String>,
        pub(crate) auto_minor_version_upgrade: std::option::Option<bool>,
        pub(crate) license_model: std::option::Option<std::string::String>,
        pub(crate) iops: std::option::Option<i32>,
        pub(crate) option_group_name: std::option::Option<std::string::String>,
        pub(crate) character_set_name: std::option::Option<std::string::String>,
        pub(crate) nchar_character_set_name: std::option::Option<std::string::String>,
        pub(crate) publicly_accessible: std::option::Option<bool>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) storage_type: std::option::Option<std::string::String>,
        pub(crate) tde_credential_arn: std::option::Option<std::string::String>,
        pub(crate) tde_credential_password: std::option::Option<std::string::String>,
        pub(crate) storage_encrypted: std::option::Option<bool>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) domain: std::option::Option<std::string::String>,
        pub(crate) copy_tags_to_snapshot: std::option::Option<bool>,
        pub(crate) monitoring_interval: std::option::Option<i32>,
        pub(crate) monitoring_role_arn: std::option::Option<std::string::String>,
        pub(crate) domain_iam_role_name: std::option::Option<std::string::String>,
        pub(crate) promotion_tier: std::option::Option<i32>,
        pub(crate) timezone: std::option::Option<std::string::String>,
        pub(crate) enable_iam_database_authentication: std::option::Option<bool>,
        pub(crate) enable_performance_insights: std::option::Option<bool>,
        pub(crate) performance_insights_kms_key_id: std::option::Option<std::string::String>,
        pub(crate) performance_insights_retention_period: std::option::Option<i32>,
        pub(crate) enable_cloudwatch_logs_exports:
            std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) processor_features:
            std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
        pub(crate) deletion_protection: std::option::Option<bool>,
        pub(crate) max_allocated_storage: std::option::Option<i32>,
        pub(crate) enable_customer_owned_ip: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The meaning of this parameter differs according to the database engine you use.</p>
        /// <p>
        /// <b>MySQL</b>
        /// </p>
        /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain 1 to 64 letters or numbers.</p>
        /// </li>
        /// <li>
        /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p>
        /// </li>
        /// <li>
        /// <p>Can't be a word reserved by the specified database engine</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <b>MariaDB</b>
        /// </p>
        /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain 1 to 64 letters or numbers.</p>
        /// </li>
        /// <li>
        /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p>
        /// </li>
        /// <li>
        /// <p>Can't be a word reserved by the specified database engine</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <b>PostgreSQL</b>
        /// </p>
        /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, a database named <code>postgres</code>
        /// is created in the DB instance.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain 1 to 63 letters, numbers, or underscores.</p>
        /// </li>
        /// <li>
        /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p>
        /// </li>
        /// <li>
        /// <p>Can't be a word reserved by the specified database engine</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <b>Oracle</b>
        /// </p>
        /// <p>The Oracle System ID (SID) of the created DB instance.
        /// If you specify <code>null</code>, the default value <code>ORCL</code> is used.
        /// You can't specify the string NULL, or any other reserved word, for <code>DBName</code>.
        /// </p>
        /// <p>Default: <code>ORCL</code>
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Can't be longer than 8 characters</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <b>SQL Server</b>
        /// </p>
        /// <p>Not applicable. Must be null.</p>
        /// <p>
        /// <b>Amazon Aurora MySQL</b>
        /// </p>
        /// <p>The name of the database to create when the primary DB instance of the Aurora MySQL DB cluster is
        /// created. If this parameter isn't specified for an Aurora MySQL DB cluster, no database is created
        /// in the DB cluster.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>It must contain 1 to 64 alphanumeric characters.</p>
        /// </li>
        /// <li>
        /// <p>It can't be a word reserved by the database engine.</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <b>Amazon Aurora PostgreSQL</b>
        /// </p>
        /// <p>The name of the database to create when the primary DB instance of the Aurora PostgreSQL DB cluster is
        /// created. If this parameter isn't specified for an Aurora PostgreSQL DB cluster,
        /// a database named <code>postgres</code> is created in the DB cluster.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>It must contain 1 to 63 alphanumeric characters.</p>
        /// </li>
        /// <li>
        /// <p>It must begin with a letter or an underscore.
        /// Subsequent characters can be letters, underscores, or digits
        /// (0 to 9).</p>
        /// </li>
        /// <li>
        /// <p>It can't be a word reserved by the
        /// database engine.</p>
        /// </li>
        /// </ul>
        pub fn db_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_name = Some(input.into());
            self
        }
        pub fn set_db_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.db_name = input;
            self
        }
        /// <p>The DB instance identifier. This parameter is stored as a lowercase string.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>mydbinstance</code>
        /// </p>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        /// <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p>
        /// <p>Type: Integer</p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your
        /// database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p>
        /// <p>
        /// <b>MySQL</b>
        /// </p>
        /// <p>Constraints to the amount of storage for each storage type are the following:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p>
        /// </li>
        /// <li>
        /// <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p>
        /// </li>
        /// <li>
        /// <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <b>MariaDB</b>
        /// </p>
        /// <p>Constraints to the amount of storage for each storage type are the following:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p>
        /// </li>
        /// <li>
        /// <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p>
        /// </li>
        /// <li>
        /// <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <b>PostgreSQL</b>
        /// </p>
        /// <p>Constraints to the amount of storage for each storage type are the following:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p>
        /// </li>
        /// <li>
        /// <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p>
        /// </li>
        /// <li>
        /// <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <b>Oracle</b>
        /// </p>
        /// <p>Constraints to the amount of storage for each storage type are the following:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p>
        /// </li>
        /// <li>
        /// <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p>
        /// </li>
        /// <li>
        /// <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <b>SQL Server</b>
        /// </p>
        /// <p>Constraints to the amount of storage for each storage type are the following:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>General Purpose (SSD) storage (gp2):</p>
        /// <ul>
        /// <li>
        /// <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p>
        /// </li>
        /// <li>
        /// <p>Web and Express editions: Must be an integer from 20 to 16384.</p>
        /// </li>
        /// </ul>            
        /// </li>
        /// <li>
        /// <p>Provisioned IOPS storage (io1):</p>
        /// <ul>
        /// <li>
        /// <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p>
        /// </li>
        /// <li>
        /// <p>Web and Express editions: Must be an integer from 100 to 16384.</p>
        /// </li>
        /// </ul>            
        /// </li>
        /// <li>
        /// <p>Magnetic storage (standard):</p>
        /// <ul>
        /// <li>
        /// <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p>
        /// </li>
        /// <li>
        /// <p>Web and Express editions: Must be an integer from 20 to 1024.</p>
        /// </li>
        /// </ul>            
        /// </li>
        /// </ul>
        pub fn allocated_storage(mut self, input: i32) -> Self {
            self.allocated_storage = Some(input);
            self
        }
        pub fn set_allocated_storage(mut self, input: std::option::Option<i32>) -> Self {
            self.allocated_storage = input;
            self
        }
        /// <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>.
        /// Not all DB instance classes are available in all AWS Regions, or for all database engines.
        /// For the full list of DB instance classes,
        /// and availability for your engine, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        pub fn db_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_class = Some(input.into());
            self
        }
        pub fn set_db_instance_class(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_class = input;
            self
        }
        /// <p>The name of the database engine to be used for this instance.
        /// </p>
        /// <p>Not every database engine is available for every AWS Region.
        /// </p>
        /// <p>Valid Values:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>aurora-postgresql</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>mariadb</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>mysql</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se2</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se1</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>postgres</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ex</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-web</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine = Some(input.into());
            self
        }
        pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine = input;
            self
        }
        /// <p>The name for the master user.</p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>Not applicable. The name for the master user is managed by the DB cluster.
        /// </p>
        /// <p>
        /// <b>MariaDB</b>
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Required for MariaDB.</p>
        /// </li>
        /// <li>
        /// <p>Must be 1 to 16 letters or numbers.</p>
        /// </li>
        /// <li>
        /// <p>Can't be a reserved word for the chosen database engine.</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <b>Microsoft SQL Server</b>
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Required for SQL Server.</p>
        /// </li>
        /// <li>
        /// <p>Must be 1 to 128 letters or numbers.</p>
        /// </li>
        /// <li>
        /// <p>The first character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't be a reserved word for the chosen database engine.</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <b>MySQL</b>
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Required for MySQL.</p>
        /// </li>
        /// <li>
        /// <p>Must be 1 to 16 letters or numbers.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't be a reserved word for the chosen database engine.</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <b>Oracle</b>
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Required for Oracle.</p>
        /// </li>
        /// <li>
        /// <p>Must be 1 to 30 letters or numbers.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't be a reserved word for the chosen database engine.</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <b>PostgreSQL</b>
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Required for PostgreSQL.</p>
        /// </li>
        /// <li>
        /// <p>Must be 1 to 63 letters or numbers.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't be a reserved word for the chosen database engine.</p>
        /// </li>
        /// </ul>
        pub fn master_username(mut self, input: impl Into<std::string::String>) -> Self {
            self.master_username = Some(input.into());
            self
        }
        pub fn set_master_username(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.master_username = input;
            self
        }
        /// <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>Not applicable. The password for the master user is managed by the DB
        /// cluster.</p>
        /// <p>
        /// <b>MariaDB</b>
        /// </p>
        /// <p>Constraints: Must contain from 8 to 41 characters.</p>
        /// <p>
        /// <b>Microsoft SQL Server</b>
        /// </p>
        /// <p>Constraints: Must contain from 8 to 128 characters.</p>
        /// <p>
        /// <b>MySQL</b>
        /// </p>
        /// <p>Constraints: Must contain from 8 to 41 characters.</p>
        /// <p>
        /// <b>Oracle</b>
        /// </p>
        /// <p>Constraints: Must contain from 8 to 30 characters.</p>
        /// <p>
        /// <b>PostgreSQL</b>
        /// </p>
        /// <p>Constraints: Must contain from 8 to 128 characters.</p>
        pub fn master_user_password(mut self, input: impl Into<std::string::String>) -> Self {
            self.master_user_password = Some(input.into());
            self
        }
        pub fn set_master_user_password(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.master_user_password = input;
            self
        }
        pub fn db_security_groups(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.db_security_groups.unwrap_or_default();
            v.push(input.into());
            self.db_security_groups = Some(v);
            self
        }
        pub fn set_db_security_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.db_security_groups = input;
            self
        }
        pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.vpc_security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.vpc_security_group_ids = Some(v);
            self
        }
        pub fn set_vpc_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.vpc_security_group_ids = input;
            self
        }
        /// <p>
        /// The Availability Zone (AZ) where the database will be created. For information on
        /// AWS Regions and Availability Zones, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions
        /// and Availability Zones</a>.
        /// </p>
        /// <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p>
        /// <p>
        /// Example: <code>us-east-1d</code>
        /// </p>
        /// <p>
        /// Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment.
        /// The specified Availability Zone must be in the same AWS Region as the current endpoint.
        /// </p>
        /// <note>
        /// <p>If you're creating a DB instance in an RDS on VMware environment,
        /// specify the identifier of the custom Availability Zone to create the DB instance
        /// in.</p>
        /// <p>For more information about RDS on VMware, see the
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html">
        /// RDS on VMware User Guide.</a>
        /// </p>
        /// </note>
        pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
            self.availability_zone = Some(input.into());
            self
        }
        pub fn set_availability_zone(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.availability_zone = input;
            self
        }
        /// <p>A DB subnet group to associate with this DB instance.</p>
        /// <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
        pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_subnet_group_name = Some(input.into());
            self
        }
        pub fn set_db_subnet_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_subnet_group_name = input;
            self
        }
        /// <p>The time range each week during which system maintenance can occur,
        /// in Universal Coordinated Time (UTC).
        /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>.
        /// </p>
        /// <p>
        /// Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
        /// </p>
        /// <p>The default is a 30-minute window selected at random from an
        /// 8-hour block of time for each AWS Region, occurring on a random day of the
        /// week.
        /// </p>
        /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
        /// <p>Constraints: Minimum 30-minute window.</p>
        pub fn preferred_maintenance_window(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.preferred_maintenance_window = Some(input.into());
            self
        }
        pub fn set_preferred_maintenance_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.preferred_maintenance_window = input;
            self
        }
        /// <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then
        /// the default DB parameter group for the specified DB engine and version is used.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        pub fn db_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_name = input;
            self
        }
        /// <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>Not applicable. The retention period for automated backups is managed by the DB
        /// cluster.</p>
        /// <p>Default: 1</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be a value from 0 to 35</p>
        /// </li>
        /// <li>
        /// <p>Can't be set to 0 if the DB instance is a source to read replicas</p>
        /// </li>
        /// </ul>
        pub fn backup_retention_period(mut self, input: i32) -> Self {
            self.backup_retention_period = Some(input);
            self
        }
        pub fn set_backup_retention_period(mut self, input: std::option::Option<i32>) -> Self {
            self.backup_retention_period = input;
            self
        }
        /// <p>
        /// The daily time range during which automated backups are created
        /// if automated backups are enabled,
        /// using the <code>BackupRetentionPeriod</code> parameter.
        /// The default is a 30-minute window selected at random from an
        /// 8-hour block of time for each AWS Region. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup window</a> in the <i>Amazon RDS User Guide</i>.
        /// </p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>Not applicable. The daily time range for creating automated backups is managed by
        /// the DB cluster.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
        /// </li>
        /// <li>
        /// <p>Must be in Universal Coordinated Time (UTC).</p>
        /// </li>
        /// <li>
        /// <p>Must not conflict with the preferred maintenance window.</p>
        /// </li>
        /// <li>
        /// <p>Must be at least 30 minutes.</p>
        /// </li>
        /// </ul>
        pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
            self.preferred_backup_window = Some(input.into());
            self
        }
        pub fn set_preferred_backup_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.preferred_backup_window = input;
            self
        }
        /// <p>The port number on which the database accepts connections.</p>
        /// <p>
        /// <b>MySQL</b>
        /// </p>
        /// <p>
        /// Default: <code>3306</code>
        /// </p>
        /// <p> Valid values: <code>1150-65535</code>
        /// </p>
        /// <p>Type: Integer</p>
        /// <p>
        /// <b>MariaDB</b>
        /// </p>
        /// <p>
        /// Default: <code>3306</code>
        /// </p>
        /// <p> Valid values: <code>1150-65535</code>
        /// </p>
        /// <p>Type: Integer</p>
        /// <p>
        /// <b>PostgreSQL</b>
        /// </p>
        /// <p>
        /// Default: <code>5432</code>
        /// </p>
        /// <p> Valid values: <code>1150-65535</code>
        /// </p>
        /// <p>Type: Integer</p>
        /// <p>
        /// <b>Oracle</b>
        /// </p>
        /// <p>
        /// Default: <code>1521</code>
        /// </p>
        /// <p> Valid values: <code>1150-65535</code>
        /// </p>
        /// <p>
        /// <b>SQL Server</b>
        /// </p>
        /// <p>
        /// Default: <code>1433</code>
        /// </p>
        /// <p> Valid values: <code>1150-65535</code> except <code>1234</code>, <code>1434</code>,
        /// <code>3260</code>, <code>3343</code>, <code>3389</code>, <code>47001</code>, and
        /// <code>49152-49156</code>.</p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>
        /// Default: <code>3306</code>
        /// </p>
        /// <p> Valid values: <code>1150-65535</code>
        /// </p>
        /// <p>Type: Integer</p>
        pub fn port(mut self, input: i32) -> Self {
            self.port = Some(input);
            self
        }
        pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
            self.port = input;
            self
        }
        /// <p>A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set
        /// the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
        pub fn multi_az(mut self, input: bool) -> Self {
            self.multi_az = Some(input);
            self
        }
        pub fn set_multi_az(mut self, input: std::option::Option<bool>) -> Self {
            self.multi_az = input;
            self
        }
        /// <p>The version number of the database engine to use.</p>
        /// <p>For a list of valid engine versions, use the  <code>DescribeDBEngineVersions</code> action.</p>
        /// <p>The following are the database engines and links to information about the major and minor versions that are available with
        /// Amazon RDS. Not every database engine is available for every AWS Region.</p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>Not applicable. The version number of the database engine to be used by the DB
        /// instance is managed by the DB cluster.</p>
        /// <p>
        /// <b>MariaDB</b>
        /// </p>
        /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the
        /// <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>
        /// <b>Microsoft SQL Server</b>
        /// </p>
        /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.VersionSupport">Microsoft SQL Server Versions on Amazon RDS</a> in the
        /// <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>
        /// <b>MySQL</b>
        /// </p>
        /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the
        /// <i>Amazon RDS User Guide.</i>
        /// </p>     
        /// <p>
        /// <b>Oracle</b>
        /// </p>
        /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the
        /// <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>
        /// <b>PostgreSQL</b>
        /// </p>
        /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts">Amazon RDS for PostgreSQL versions and extensions</a> in the
        /// <i>Amazon RDS User Guide.</i>
        /// </p>
        pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_version = Some(input.into());
            self
        }
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_version = input;
            self
        }
        /// <p>A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window.
        /// By default, minor engine upgrades are applied automatically.</p>
        pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
            self.auto_minor_version_upgrade = Some(input);
            self
        }
        pub fn set_auto_minor_version_upgrade(mut self, input: std::option::Option<bool>) -> Self {
            self.auto_minor_version_upgrade = input;
            self
        }
        /// <p>License model information for this DB instance.</p>
        /// <p>
        /// Valid values:  <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code>
        /// </p>
        pub fn license_model(mut self, input: impl Into<std::string::String>) -> Self {
            self.license_model = Some(input.into());
            self
        }
        pub fn set_license_model(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.license_model = input;
            self
        }
        /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
        /// For information about valid Iops values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>.
        /// </p>
        /// <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance.
        /// For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance.
        /// </p>
        pub fn iops(mut self, input: i32) -> Self {
            self.iops = Some(input);
            self
        }
        pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
            self.iops = input;
            self
        }
        /// <p>A value that indicates that the DB instance should be associated with the specified option group.</p>
        /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance</p>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        /// <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>Not applicable. The character set is managed by
        /// the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
        pub fn character_set_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.character_set_name = Some(input.into());
            self
        }
        pub fn set_character_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.character_set_name = input;
            self
        }
        /// <p>The name of the NCHAR character set for the Oracle DB instance.</p>
        pub fn nchar_character_set_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.nchar_character_set_name = Some(input.into());
            self
        }
        pub fn set_nchar_character_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.nchar_character_set_name = input;
            self
        }
        /// <p>A value that indicates whether the DB instance is publicly accessible.</p>
        /// <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC,
        /// and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses,
        /// and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
        /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
        /// <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
        /// <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
        /// <ul>
        /// <li>
        /// <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p>
        /// </li>
        /// <li>
        /// <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p>
        /// </li>
        /// </ul>
        /// <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
        /// <ul>
        /// <li>
        /// <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p>
        /// </li>
        /// <li>
        /// <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p>
        /// </li>
        /// </ul>
        pub fn publicly_accessible(mut self, input: bool) -> Self {
            self.publicly_accessible = Some(input);
            self
        }
        pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
            self.publicly_accessible = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>The identifier of the DB cluster that the instance will belong to.</p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>Specifies the storage type to be associated with the DB instance.</p>
        /// <p>
        /// Valid values: <code>standard | gp2 | io1</code>
        /// </p>
        /// <p>
        /// If you specify <code>io1</code>, you must also include a value for the
        /// <code>Iops</code> parameter.
        /// </p>
        /// <p>
        /// Default: <code>io1</code> if the <code>Iops</code> parameter
        /// is specified, otherwise <code>gp2</code>
        /// </p>
        pub fn storage_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.storage_type = Some(input.into());
            self
        }
        pub fn set_storage_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.storage_type = input;
            self
        }
        /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
        pub fn tde_credential_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.tde_credential_arn = Some(input.into());
            self
        }
        pub fn set_tde_credential_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.tde_credential_arn = input;
            self
        }
        /// <p>The password for the given ARN from the key store in order to access the device.</p>
        pub fn tde_credential_password(mut self, input: impl Into<std::string::String>) -> Self {
            self.tde_credential_password = Some(input.into());
            self
        }
        pub fn set_tde_credential_password(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.tde_credential_password = input;
            self
        }
        /// <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>Not applicable. The encryption for DB instances is managed by
        /// the DB cluster.</p>
        pub fn storage_encrypted(mut self, input: bool) -> Self {
            self.storage_encrypted = Some(input);
            self
        }
        pub fn set_storage_encrypted(mut self, input: std::option::Option<bool>) -> Self {
            self.storage_encrypted = input;
            self
        }
        /// <p>The AWS KMS key identifier for an encrypted DB instance.</p>
        /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).
        /// To use a CMK in a different AWS account, specify the key ARN or alias ARN.</p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>Not applicable. The AWS KMS key identifier is managed by
        /// the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>     
        /// <p>If <code>StorageEncrypted</code> is enabled, and you do
        /// not specify a value for the <code>KmsKeyId</code> parameter, then
        /// Amazon RDS uses your default CMK. There is a  
        /// default CMK for your AWS account. Your AWS account has a different
        /// default CMK for each AWS Region.</p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>The Active Directory directory ID to create the DB instance in. Currently, only MySQL, Microsoft SQL
        /// Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
        /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain = Some(input.into());
            self
        }
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.domain = input;
            self
        }
        /// <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this
        /// value for an Aurora DB instance has no effect on the DB cluster setting.</p>
        pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
            self.copy_tags_to_snapshot = Some(input);
            self
        }
        pub fn set_copy_tags_to_snapshot(mut self, input: std::option::Option<bool>) -> Self {
            self.copy_tags_to_snapshot = input;
            self
        }
        /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p>
        /// <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code>
        /// to a value other than 0.</p>
        /// <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code>
        /// </p>
        pub fn monitoring_interval(mut self, input: i32) -> Self {
            self.monitoring_interval = Some(input);
            self
        }
        pub fn set_monitoring_interval(mut self, input: std::option::Option<i32>) -> Self {
            self.monitoring_interval = input;
            self
        }
        /// <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For
        /// example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role,
        /// go to <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a>
        /// in the <i>Amazon RDS User Guide</i>.</p>
        /// <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
        pub fn monitoring_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.monitoring_role_arn = Some(input.into());
            self
        }
        pub fn set_monitoring_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.monitoring_role_arn = input;
            self
        }
        /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
        pub fn domain_iam_role_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain_iam_role_name = Some(input.into());
            self
        }
        pub fn set_domain_iam_role_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.domain_iam_role_name = input;
            self
        }
        /// <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance
        /// after a failure of the existing primary instance. For more information,
        /// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance">
        /// Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.
        /// </p>
        /// <p>Default: 1</p>
        /// <p>Valid Values: 0 - 15</p>
        pub fn promotion_tier(mut self, input: i32) -> Self {
            self.promotion_tier = Some(input);
            self
        }
        pub fn set_promotion_tier(mut self, input: std::option::Option<i32>) -> Self {
            self.promotion_tier = input;
            self
        }
        /// <p>The time zone of the DB instance.
        /// The time zone parameter is currently supported only by
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>.
        /// </p>
        pub fn timezone(mut self, input: impl Into<std::string::String>) -> Self {
            self.timezone = Some(input.into());
            self
        }
        pub fn set_timezone(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.timezone = input;
            self
        }
        /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
        /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
        /// <p>This setting doesn't apply to Amazon Aurora. Mapping AWS IAM accounts to database accounts is managed by the DB
        /// cluster.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
        /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
            self.enable_iam_database_authentication = Some(input);
            self
        }
        pub fn set_enable_iam_database_authentication(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.enable_iam_database_authentication = input;
            self
        }
        /// <p>A value that indicates whether to enable Performance Insights for the DB instance.
        /// </p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service
        /// User Guide</i>.
        /// </p>
        pub fn enable_performance_insights(mut self, input: bool) -> Self {
            self.enable_performance_insights = Some(input);
            self
        }
        pub fn set_enable_performance_insights(mut self, input: std::option::Option<bool>) -> Self {
            self.enable_performance_insights = input;
            self
        }
        /// <p>The AWS KMS key identifier for encryption of Performance Insights data.</p>
        /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).</p>
        /// <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS
        /// uses your default CMK. There is a default CMK for your AWS account.
        /// Your AWS account has a different default CMK for each AWS Region.</p>
        pub fn performance_insights_kms_key_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.performance_insights_kms_key_id = Some(input.into());
            self
        }
        pub fn set_performance_insights_kms_key_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.performance_insights_kms_key_id = input;
            self
        }
        /// <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). </p>
        pub fn performance_insights_retention_period(mut self, input: i32) -> Self {
            self.performance_insights_retention_period = Some(input);
            self
        }
        pub fn set_performance_insights_retention_period(
            mut self,
            input: std::option::Option<i32>,
        ) -> Self {
            self.performance_insights_retention_period = input;
            self
        }
        pub fn enable_cloudwatch_logs_exports(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            let mut v = self.enable_cloudwatch_logs_exports.unwrap_or_default();
            v.push(input.into());
            self.enable_cloudwatch_logs_exports = Some(v);
            self
        }
        pub fn set_enable_cloudwatch_logs_exports(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.enable_cloudwatch_logs_exports = input;
            self
        }
        pub fn processor_features(
            mut self,
            input: impl Into<crate::model::ProcessorFeature>,
        ) -> Self {
            let mut v = self.processor_features.unwrap_or_default();
            v.push(input.into());
            self.processor_features = Some(v);
            self
        }
        pub fn set_processor_features(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
        ) -> Self {
            self.processor_features = input;
            self
        }
        /// <p>A value that indicates whether the DB instance has deletion protection enabled.
        /// The database can't be deleted when deletion protection is enabled. By default,
        /// deletion protection is disabled. For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
        /// Deleting a DB Instance</a>.
        /// </p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>Not applicable. You can enable or disable deletion protection for the DB cluster.
        /// For more information, see <code>CreateDBCluster</code>. DB instances in a DB
        /// cluster can be deleted even when deletion protection is enabled for the DB cluster.
        /// </p>
        pub fn deletion_protection(mut self, input: bool) -> Self {
            self.deletion_protection = Some(input);
            self
        }
        pub fn set_deletion_protection(mut self, input: std::option::Option<bool>) -> Self {
            self.deletion_protection = input;
            self
        }
        /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.</p>
        /// <p>For more information about this setting, including limitations that apply to it, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
        /// Managing capacity automatically with Amazon RDS storage autoscaling</a>
        /// in the <i>Amazon RDS User Guide</i>.</p>
        pub fn max_allocated_storage(mut self, input: i32) -> Self {
            self.max_allocated_storage = Some(input);
            self
        }
        pub fn set_max_allocated_storage(mut self, input: std::option::Option<i32>) -> Self {
            self.max_allocated_storage = input;
            self
        }
        /// <p>A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS
        /// on Outposts DB instance.</p>
        /// <p>A <i>CoIP</i> provides local or external connectivity to resources in
        /// your Outpost subnets through your on-premises network. For some use cases, a CoIP can
        /// provide lower latency for connections to the DB instance from outside of its virtual
        /// private cloud (VPC) on your local network.</p>
        /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on AWS Outposts</a>
        /// in the <i>Amazon RDS User Guide</i>.</p>
        /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a>
        /// in the <i>AWS Outposts User Guide</i>.</p>
        pub fn enable_customer_owned_ip(mut self, input: bool) -> Self {
            self.enable_customer_owned_ip = Some(input);
            self
        }
        pub fn set_enable_customer_owned_ip(mut self, input: std::option::Option<bool>) -> Self {
            self.enable_customer_owned_ip = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBInstanceInput`](crate::input::CreateDBInstanceInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CreateDBInstanceInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CreateDBInstanceInput {
                db_name: self.db_name,
                db_instance_identifier: self.db_instance_identifier,
                allocated_storage: self.allocated_storage,
                db_instance_class: self.db_instance_class,
                engine: self.engine,
                master_username: self.master_username,
                master_user_password: self.master_user_password,
                db_security_groups: self.db_security_groups,
                vpc_security_group_ids: self.vpc_security_group_ids,
                availability_zone: self.availability_zone,
                db_subnet_group_name: self.db_subnet_group_name,
                preferred_maintenance_window: self.preferred_maintenance_window,
                db_parameter_group_name: self.db_parameter_group_name,
                backup_retention_period: self.backup_retention_period,
                preferred_backup_window: self.preferred_backup_window,
                port: self.port,
                multi_az: self.multi_az,
                engine_version: self.engine_version,
                auto_minor_version_upgrade: self.auto_minor_version_upgrade,
                license_model: self.license_model,
                iops: self.iops,
                option_group_name: self.option_group_name,
                character_set_name: self.character_set_name,
                nchar_character_set_name: self.nchar_character_set_name,
                publicly_accessible: self.publicly_accessible,
                tags: self.tags,
                db_cluster_identifier: self.db_cluster_identifier,
                storage_type: self.storage_type,
                tde_credential_arn: self.tde_credential_arn,
                tde_credential_password: self.tde_credential_password,
                storage_encrypted: self.storage_encrypted,
                kms_key_id: self.kms_key_id,
                domain: self.domain,
                copy_tags_to_snapshot: self.copy_tags_to_snapshot,
                monitoring_interval: self.monitoring_interval,
                monitoring_role_arn: self.monitoring_role_arn,
                domain_iam_role_name: self.domain_iam_role_name,
                promotion_tier: self.promotion_tier,
                timezone: self.timezone,
                enable_iam_database_authentication: self.enable_iam_database_authentication,
                enable_performance_insights: self.enable_performance_insights,
                performance_insights_kms_key_id: self.performance_insights_kms_key_id,
                performance_insights_retention_period: self.performance_insights_retention_period,
                enable_cloudwatch_logs_exports: self.enable_cloudwatch_logs_exports,
                processor_features: self.processor_features,
                deletion_protection: self.deletion_protection,
                max_allocated_storage: self.max_allocated_storage,
                enable_customer_owned_ip: self.enable_customer_owned_ip,
            })
        }
    }
}
#[doc(hidden)]
pub type CreateDBInstanceInputOperationOutputAlias = crate::operation::CreateDBInstance;
#[doc(hidden)]
pub type CreateDBInstanceInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CreateDBInstanceInput {
    /// Consumes the builder and constructs an Operation<[`CreateDBInstance`](crate::operation::CreateDBInstance)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CreateDBInstance,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_create_db_instance(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CreateDBInstance::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CreateDBInstance",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CreateDBInstanceInput`](crate::input::CreateDBInstanceInput)
    pub fn builder() -> crate::input::create_db_instance_input::Builder {
        crate::input::create_db_instance_input::Builder::default()
    }
}

/// See [`CreateDBInstanceReadReplicaInput`](crate::input::CreateDBInstanceReadReplicaInput)
pub mod create_db_instance_read_replica_input {
    /// A builder for [`CreateDBInstanceReadReplicaInput`](crate::input::CreateDBInstanceReadReplicaInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) source_db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) db_instance_class: std::option::Option<std::string::String>,
        pub(crate) availability_zone: std::option::Option<std::string::String>,
        pub(crate) port: std::option::Option<i32>,
        pub(crate) multi_az: std::option::Option<bool>,
        pub(crate) auto_minor_version_upgrade: std::option::Option<bool>,
        pub(crate) iops: std::option::Option<i32>,
        pub(crate) option_group_name: std::option::Option<std::string::String>,
        pub(crate) db_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) publicly_accessible: std::option::Option<bool>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
        pub(crate) vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) storage_type: std::option::Option<std::string::String>,
        pub(crate) copy_tags_to_snapshot: std::option::Option<bool>,
        pub(crate) monitoring_interval: std::option::Option<i32>,
        pub(crate) monitoring_role_arn: std::option::Option<std::string::String>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) pre_signed_url: std::option::Option<std::string::String>,
        pub(crate) enable_iam_database_authentication: std::option::Option<bool>,
        pub(crate) enable_performance_insights: std::option::Option<bool>,
        pub(crate) performance_insights_kms_key_id: std::option::Option<std::string::String>,
        pub(crate) performance_insights_retention_period: std::option::Option<i32>,
        pub(crate) enable_cloudwatch_logs_exports:
            std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) processor_features:
            std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
        pub(crate) use_default_processor_features: std::option::Option<bool>,
        pub(crate) deletion_protection: std::option::Option<bool>,
        pub(crate) domain: std::option::Option<std::string::String>,
        pub(crate) domain_iam_role_name: std::option::Option<std::string::String>,
        pub(crate) replica_mode: std::option::Option<crate::model::ReplicaMode>,
        pub(crate) max_allocated_storage: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The DB instance identifier of the read replica. This identifier is the unique key
        /// that identifies a DB instance. This parameter is stored as a lowercase string.</p>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        /// <p>The identifier of the DB instance that will act as the source for the read replica.
        /// Each DB instance can have up to five read replicas.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, PostgreSQL, or SQL Server DB
        /// instance.</p>
        /// </li>
        /// <li>
        /// <p>Can specify a DB instance that is a MySQL read replica only if the source is running MySQL
        /// 5.6 or later.</p>
        /// </li>
        /// <li>
        /// <p>For the limitations of Oracle read replicas, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the
        /// <i>Amazon RDS User Guide</i>.</p>
        /// </li>
        /// <li>
        /// <p>For the limitations of SQL Server read replicas, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/SQLServer.ReadReplicas.Limitations.html">Read Replica
        /// Limitations with Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p>
        /// </li>
        /// <li>
        /// <p>Can specify a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or
        /// later (9.4.7 and higher for cross-region replication).</p>
        /// </li>
        /// <li>
        /// <p>The specified DB instance must have automatic backups enabled, that is, its backup
        /// retention period must be greater than 0.</p>
        /// </li>
        /// <li>
        /// <p>If the source DB instance is in the same AWS Region as the read replica, specify a valid DB
        /// instance identifier.</p>
        /// </li>
        /// <li>
        /// <p>If the source DB instance is in a different AWS Region from the read replica, specify a valid DB instance ARN.
        /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">Constructing an ARN for Amazon RDS</a>
        /// in the <i>Amazon RDS User Guide</i>. This doesn't apply to SQL Server, which doesn't support cross-region replicas.</p>
        /// </li>
        /// </ul>
        pub fn source_db_instance_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.source_db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_source_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_db_instance_identifier = input;
            self
        }
        /// <p>The compute and memory capacity of the read replica, for example,
        /// <code>db.m4.large</code>. Not all DB instance classes are available in all AWS
        /// Regions, or for all database engines. For the full list of DB instance classes, and
        /// availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance
        /// Class</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>Default: Inherits from the source DB instance.</p>
        pub fn db_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_class = Some(input.into());
            self
        }
        pub fn set_db_instance_class(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_class = input;
            self
        }
        /// <p>The Availability Zone (AZ) where the read replica will be created.</p>
        /// <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p>
        /// <p>
        /// Example: <code>us-east-1d</code>
        /// </p>
        pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
            self.availability_zone = Some(input.into());
            self
        }
        pub fn set_availability_zone(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.availability_zone = input;
            self
        }
        /// <p>The port number that the DB instance uses for connections.</p>
        /// <p>Default: Inherits from the source DB instance</p>
        /// <p>Valid Values: <code>1150-65535</code>
        /// </p>
        pub fn port(mut self, input: i32) -> Self {
            self.port = Some(input);
            self
        }
        pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
            self.port = input;
            self
        }
        /// <p>A value that indicates whether the read replica is in a Multi-AZ deployment. </p>
        /// <p>You can create a read replica as a Multi-AZ DB instance. RDS creates a standby of
        /// your replica in another Availability Zone for failover support for the replica. Creating
        /// your read replica as a Multi-AZ DB instance is independent of whether the source
        /// database is a Multi-AZ DB instance. </p>
        pub fn multi_az(mut self, input: bool) -> Self {
            self.multi_az = Some(input);
            self
        }
        pub fn set_multi_az(mut self, input: std::option::Option<bool>) -> Self {
            self.multi_az = input;
            self
        }
        /// <p>A value that indicates whether minor engine upgrades are applied automatically to the
        /// read replica during the maintenance window.</p>
        /// <p>Default: Inherits from the source DB instance</p>
        pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
            self.auto_minor_version_upgrade = Some(input);
            self
        }
        pub fn set_auto_minor_version_upgrade(mut self, input: std::option::Option<bool>) -> Self {
            self.auto_minor_version_upgrade = input;
            self
        }
        /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p>
        pub fn iops(mut self, input: i32) -> Self {
            self.iops = Some(input);
            self
        }
        pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
            self.iops = input;
            self
        }
        /// <p>The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.</p>
        /// <note>
        /// <p>For SQL Server, you must use the option group associated with the source
        /// instance.</p>
        /// </note>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        /// <p>The name of the DB parameter group to associate with this DB instance.</p>
        /// <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS
        /// uses the <code>DBParameterGroup</code> of source DB instance for a same region read
        /// replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a
        /// cross region read replica.</p>
        /// <note>
        /// <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p>
        /// </note>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        pub fn db_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_name = input;
            self
        }
        /// <p>A value that indicates whether the DB instance is publicly accessible.</p>
        /// <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC,
        /// and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses,
        /// and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
        /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>  
        /// <p>For more information, see <a>CreateDBInstance</a>.</p>
        pub fn publicly_accessible(mut self, input: bool) -> Self {
            self.publicly_accessible = Some(input);
            self
        }
        pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
            self.publicly_accessible = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p>
        /// </li>
        /// <li>
        /// <p>If supplied, must match the name of an existing DBSubnetGroup.</p>
        /// </li>
        /// <li>
        /// <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p>
        /// </li>
        /// <li>
        /// <p>All read replicas in one AWS Region that are created from the same source DB
        /// instance must either:></p>
        /// <ul>
        /// <li>
        /// <p>Specify DB subnet groups from the same VPC. All these read replicas are created in the same
        /// VPC.</p>
        /// </li>
        /// <li>
        /// <p>Not specify a DB subnet group. All these read replicas are created outside of any
        /// VPC.</p>
        /// </li>
        /// </ul>
        /// </li>
        /// </ul>
        /// <p>Example: <code>mySubnetgroup</code>
        /// </p>
        pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_subnet_group_name = Some(input.into());
            self
        }
        pub fn set_db_subnet_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_subnet_group_name = input;
            self
        }
        pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.vpc_security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.vpc_security_group_ids = Some(v);
            self
        }
        pub fn set_vpc_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.vpc_security_group_ids = input;
            self
        }
        /// <p>Specifies the storage type to be associated with the read replica.</p>
        /// <p>
        /// Valid values: <code>standard | gp2 | io1</code>
        /// </p>
        /// <p>
        /// If you specify <code>io1</code>, you must also include a value for the
        /// <code>Iops</code> parameter.
        /// </p>
        /// <p>
        /// Default: <code>io1</code> if the <code>Iops</code> parameter
        /// is specified, otherwise <code>gp2</code>
        /// </p>
        pub fn storage_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.storage_type = Some(input.into());
            self
        }
        pub fn set_storage_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.storage_type = input;
            self
        }
        /// <p>A value that indicates whether to copy all tags from the read replica to snapshots of
        /// the read replica. By default, tags are not copied.</p>
        pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
            self.copy_tags_to_snapshot = Some(input);
            self
        }
        pub fn set_copy_tags_to_snapshot(mut self, input: std::option::Option<bool>) -> Self {
            self.copy_tags_to_snapshot = input;
            self
        }
        /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are
        /// collected for the read replica. To disable collecting Enhanced Monitoring metrics,
        /// specify 0. The default is 0.</p>
        /// <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code>
        /// to a value other than 0.</p>
        /// <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code>
        /// </p>
        pub fn monitoring_interval(mut self, input: i32) -> Self {
            self.monitoring_interval = Some(input);
            self
        }
        pub fn set_monitoring_interval(mut self, input: std::option::Option<i32>) -> Self {
            self.monitoring_interval = input;
            self
        }
        /// <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For
        /// example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role,
        /// go to <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To
        /// create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p>
        /// <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
        pub fn monitoring_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.monitoring_role_arn = Some(input.into());
            self
        }
        pub fn set_monitoring_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.monitoring_role_arn = input;
            self
        }
        /// <p>The AWS KMS key identifier for an encrypted read replica.</p>
        /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS CMK.</p>
        /// <p>If you create an encrypted read replica in the same AWS Region as the source DB
        /// instance, then do not specify a value for this parameter. A read replica in the same Region
        /// is always encrypted with the same AWS KMS CMK as the source DB instance.</p>       
        /// <p>If you create an encrypted read replica in a different AWS Region, then you must
        /// specify a AWS KMS key identifier for the destination AWS Region. AWS KMS CMKs are specific to
        /// the AWS Region that they are created in, and you can't use CMKs from one
        /// AWS Region in another AWS Region.</p>       
        /// <p>You can't create an encrypted read replica from an unencrypted DB instance.</p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action
        /// in the source AWS Region that contains the source DB instance.
        /// </p>
        /// <p>You must specify this parameter when you create an encrypted read replica from
        /// another AWS Region by using the Amazon RDS API. Don't specify
        /// <code>PreSignedUrl</code> when you are creating an encrypted read replica in the
        /// same AWS Region.</p>
        /// <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action
        /// that can be executed in the source AWS Region that contains the encrypted source DB instance.
        /// The presigned URL request must contain the following parameter values:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>DestinationRegion</code> - The AWS Region that the encrypted read
        /// replica is created in. This AWS Region is the same one where the
        /// <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL.</p>
        /// <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region,
        /// from a source DB instance in the us-east-2 AWS Region,
        /// then you call the <code>CreateDBInstanceReadReplica</code> action in
        /// the us-east-1 AWS Region and provide a presigned URL that contains a call to the
        /// <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this
        /// example, the <code>DestinationRegion</code> in the presigned URL must be set to
        /// the us-east-1 AWS Region.
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to
        /// encrypt the read replica in the destination AWS Region. This is the same
        /// identifier for both the <code>CreateDBInstanceReadReplica</code> action that is
        /// called in the destination AWS Region, and the action contained in the presigned
        /// URL. </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for
        /// the encrypted DB instance to be replicated. This identifier must be in the
        /// Amazon Resource Name (ARN) format for the source AWS Region. For example, if you
        /// are creating an encrypted read replica from a DB instance in the us-west-2 AWS
        /// Region, then your <code>SourceDBInstanceIdentifier</code> looks like the
        /// following example:
        /// <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p>
        /// </li>
        /// </ul>
        /// <p>To learn how to generate a Signature Version 4 signed request, see
        /// <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and
        /// <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>.
        /// </p>
        /// <note>
        /// <p>If you are using an AWS SDK tool or the AWS CLI, you can specify
        /// <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI)
        /// instead of specifying <code>PreSignedUrl</code> manually. Specifying
        /// <code>SourceRegion</code> autogenerates a presigned URL that is a valid request
        /// for the operation that can be executed in the source AWS Region.</p>
        /// <p>
        /// <code>SourceRegion</code> isn't supported for SQL Server, because SQL Server on Amazon RDS
        /// doesn't support cross-region read replicas.</p>
        /// </note>
        pub fn pre_signed_url(mut self, input: impl Into<std::string::String>) -> Self {
            self.pre_signed_url = Some(input.into());
            self
        }
        pub fn set_pre_signed_url(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.pre_signed_url = input;
            self
        }
        /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
        /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
        /// <p>For more information about IAM database authentication, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
        /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
            self.enable_iam_database_authentication = Some(input);
            self
        }
        pub fn set_enable_iam_database_authentication(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.enable_iam_database_authentication = input;
            self
        }
        /// <p>A value that indicates whether to enable Performance Insights for the read replica. </p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using
        /// Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.
        /// </p>
        pub fn enable_performance_insights(mut self, input: bool) -> Self {
            self.enable_performance_insights = Some(input);
            self
        }
        pub fn set_enable_performance_insights(mut self, input: std::option::Option<bool>) -> Self {
            self.enable_performance_insights = input;
            self
        }
        /// <p>The AWS KMS key identifier for encryption of Performance Insights data.</p>
        /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).</p>
        /// <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS
        /// uses your default CMK. There is a default CMK for your AWS account.
        /// Your AWS account has a different default CMK for each AWS Region.</p>
        pub fn performance_insights_kms_key_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.performance_insights_kms_key_id = Some(input.into());
            self
        }
        pub fn set_performance_insights_kms_key_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.performance_insights_kms_key_id = input;
            self
        }
        /// <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). </p>
        pub fn performance_insights_retention_period(mut self, input: i32) -> Self {
            self.performance_insights_retention_period = Some(input);
            self
        }
        pub fn set_performance_insights_retention_period(
            mut self,
            input: std::option::Option<i32>,
        ) -> Self {
            self.performance_insights_retention_period = input;
            self
        }
        pub fn enable_cloudwatch_logs_exports(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            let mut v = self.enable_cloudwatch_logs_exports.unwrap_or_default();
            v.push(input.into());
            self.enable_cloudwatch_logs_exports = Some(v);
            self
        }
        pub fn set_enable_cloudwatch_logs_exports(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.enable_cloudwatch_logs_exports = input;
            self
        }
        pub fn processor_features(
            mut self,
            input: impl Into<crate::model::ProcessorFeature>,
        ) -> Self {
            let mut v = self.processor_features.unwrap_or_default();
            v.push(input.into());
            self.processor_features = Some(v);
            self
        }
        pub fn set_processor_features(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
        ) -> Self {
            self.processor_features = input;
            self
        }
        /// <p>A value that indicates whether the DB instance class of the DB instance uses its default
        /// processor features.</p>
        pub fn use_default_processor_features(mut self, input: bool) -> Self {
            self.use_default_processor_features = Some(input);
            self
        }
        pub fn set_use_default_processor_features(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.use_default_processor_features = input;
            self
        }
        /// <p>A value that indicates whether the DB instance has deletion protection enabled.
        /// The database can't be deleted when deletion protection is enabled. By default,
        /// deletion protection is disabled. For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
        /// Deleting a DB Instance</a>.
        /// </p>
        pub fn deletion_protection(mut self, input: bool) -> Self {
            self.deletion_protection = Some(input);
            self
        }
        pub fn set_deletion_protection(mut self, input: std::option::Option<bool>) -> Self {
            self.deletion_protection = input;
            self
        }
        /// <p>The Active Directory directory ID to create the DB instance in. Currently, only MySQL, Microsoft SQL
        /// Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
        /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain = Some(input.into());
            self
        }
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.domain = input;
            self
        }
        /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
        pub fn domain_iam_role_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain_iam_role_name = Some(input.into());
            self
        }
        pub fn set_domain_iam_role_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.domain_iam_role_name = input;
            self
        }
        /// <p>The open mode of the replica database: mounted or read-only.</p>
        /// <note>
        /// <p>This parameter is only supported for Oracle DB instances.</p>
        /// </note>
        /// <p>Mounted DB replicas are included in Oracle Enterprise Edition. The main use case for
        /// mounted replicas is cross-Region disaster recovery. The primary database doesn't use Active
        /// Data Guard to transmit information to the mounted replica. Because it doesn't accept
        /// user connections, a mounted replica can't serve a read-only workload.</p>
        /// <p>You can create a combination of mounted and read-only DB replicas for the same primary DB instance.
        /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working with Oracle Read Replicas for Amazon RDS</a>
        /// in the <i>Amazon RDS User Guide</i>.</p>
        pub fn replica_mode(mut self, input: crate::model::ReplicaMode) -> Self {
            self.replica_mode = Some(input);
            self
        }
        pub fn set_replica_mode(
            mut self,
            input: std::option::Option<crate::model::ReplicaMode>,
        ) -> Self {
            self.replica_mode = input;
            self
        }
        /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.</p>
        /// <p>For more information about this setting, including limitations that apply to it, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
        /// Managing capacity automatically with Amazon RDS storage autoscaling</a>
        /// in the <i>Amazon RDS User Guide</i>.</p>
        pub fn max_allocated_storage(mut self, input: i32) -> Self {
            self.max_allocated_storage = Some(input);
            self
        }
        pub fn set_max_allocated_storage(mut self, input: std::option::Option<i32>) -> Self {
            self.max_allocated_storage = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBInstanceReadReplicaInput`](crate::input::CreateDBInstanceReadReplicaInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CreateDBInstanceReadReplicaInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CreateDBInstanceReadReplicaInput {
                db_instance_identifier: self.db_instance_identifier,
                source_db_instance_identifier: self.source_db_instance_identifier,
                db_instance_class: self.db_instance_class,
                availability_zone: self.availability_zone,
                port: self.port,
                multi_az: self.multi_az,
                auto_minor_version_upgrade: self.auto_minor_version_upgrade,
                iops: self.iops,
                option_group_name: self.option_group_name,
                db_parameter_group_name: self.db_parameter_group_name,
                publicly_accessible: self.publicly_accessible,
                tags: self.tags,
                db_subnet_group_name: self.db_subnet_group_name,
                vpc_security_group_ids: self.vpc_security_group_ids,
                storage_type: self.storage_type,
                copy_tags_to_snapshot: self.copy_tags_to_snapshot,
                monitoring_interval: self.monitoring_interval,
                monitoring_role_arn: self.monitoring_role_arn,
                kms_key_id: self.kms_key_id,
                pre_signed_url: self.pre_signed_url,
                enable_iam_database_authentication: self.enable_iam_database_authentication,
                enable_performance_insights: self.enable_performance_insights,
                performance_insights_kms_key_id: self.performance_insights_kms_key_id,
                performance_insights_retention_period: self.performance_insights_retention_period,
                enable_cloudwatch_logs_exports: self.enable_cloudwatch_logs_exports,
                processor_features: self.processor_features,
                use_default_processor_features: self.use_default_processor_features,
                deletion_protection: self.deletion_protection,
                domain: self.domain,
                domain_iam_role_name: self.domain_iam_role_name,
                replica_mode: self.replica_mode,
                max_allocated_storage: self.max_allocated_storage,
            })
        }
    }
}
#[doc(hidden)]
pub type CreateDBInstanceReadReplicaInputOperationOutputAlias =
    crate::operation::CreateDBInstanceReadReplica;
#[doc(hidden)]
pub type CreateDBInstanceReadReplicaInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CreateDBInstanceReadReplicaInput {
    /// Consumes the builder and constructs an Operation<[`CreateDBInstanceReadReplica`](crate::operation::CreateDBInstanceReadReplica)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CreateDBInstanceReadReplica,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_create_db_instance_read_replica(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CreateDBInstanceReadReplica::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CreateDBInstanceReadReplica",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CreateDBInstanceReadReplicaInput`](crate::input::CreateDBInstanceReadReplicaInput)
    pub fn builder() -> crate::input::create_db_instance_read_replica_input::Builder {
        crate::input::create_db_instance_read_replica_input::Builder::default()
    }
}

/// See [`CreateDBParameterGroupInput`](crate::input::CreateDBParameterGroupInput)
pub mod create_db_parameter_group_input {
    /// A builder for [`CreateDBParameterGroupInput`](crate::input::CreateDBParameterGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) db_parameter_group_family: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The name of the DB parameter group.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>This value is stored as a lowercase string.</p>
        /// </note>
        pub fn db_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_name = input;
            self
        }
        /// <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p>
        /// <p>To list all of the available parameter group families for a DB engine, use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine <engine></code>
        /// </p>
        /// <p>For example, to list all of the available parameter group families for the MySQL DB engine, use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine mysql</code>
        /// </p>
        /// <note>
        /// <p>The output contains duplicates.</p>
        /// </note>
        /// <p>The following are the valid DB engine values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>aurora-postgresql</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>mariadb</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>mysql</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se2</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se1</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>postgres</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ex</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-web</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn db_parameter_group_family(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_family = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_family(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_family = input;
            self
        }
        /// <p>The description for the DB parameter group.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBParameterGroupInput`](crate::input::CreateDBParameterGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CreateDBParameterGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CreateDBParameterGroupInput {
                db_parameter_group_name: self.db_parameter_group_name,
                db_parameter_group_family: self.db_parameter_group_family,
                description: self.description,
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type CreateDBParameterGroupInputOperationOutputAlias = crate::operation::CreateDBParameterGroup;
#[doc(hidden)]
pub type CreateDBParameterGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CreateDBParameterGroupInput {
    /// Consumes the builder and constructs an Operation<[`CreateDBParameterGroup`](crate::operation::CreateDBParameterGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CreateDBParameterGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_create_db_parameter_group(&self)
                .map_err(|err| {
                smithy_http::operation::BuildError::SerializationError(err.into())
            })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CreateDBParameterGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CreateDBParameterGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CreateDBParameterGroupInput`](crate::input::CreateDBParameterGroupInput)
    pub fn builder() -> crate::input::create_db_parameter_group_input::Builder {
        crate::input::create_db_parameter_group_input::Builder::default()
    }
}

/// See [`CreateDBProxyInput`](crate::input::CreateDBProxyInput)
pub mod create_db_proxy_input {
    /// A builder for [`CreateDBProxyInput`](crate::input::CreateDBProxyInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_name: std::option::Option<std::string::String>,
        pub(crate) engine_family: std::option::Option<crate::model::EngineFamily>,
        pub(crate) auth: std::option::Option<std::vec::Vec<crate::model::UserAuthConfig>>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) vpc_subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) require_tls: std::option::Option<bool>,
        pub(crate) idle_client_timeout: std::option::Option<i32>,
        pub(crate) debug_logging: std::option::Option<bool>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
        pub fn db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_proxy_name = Some(input.into());
            self
        }
        pub fn set_db_proxy_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_proxy_name = input;
            self
        }
        /// <p>The kinds of databases that the proxy can connect to.
        /// This value determines which database network protocol the proxy recognizes when it interprets
        /// network traffic to and from the database.
        /// The engine family applies to MySQL and PostgreSQL for both RDS and Aurora.</p>
        pub fn engine_family(mut self, input: crate::model::EngineFamily) -> Self {
            self.engine_family = Some(input);
            self
        }
        pub fn set_engine_family(
            mut self,
            input: std::option::Option<crate::model::EngineFamily>,
        ) -> Self {
            self.engine_family = input;
            self
        }
        pub fn auth(mut self, input: impl Into<crate::model::UserAuthConfig>) -> Self {
            let mut v = self.auth.unwrap_or_default();
            v.push(input.into());
            self.auth = Some(v);
            self
        }
        pub fn set_auth(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UserAuthConfig>>,
        ) -> Self {
            self.auth = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        pub fn vpc_subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.vpc_subnet_ids.unwrap_or_default();
            v.push(input.into());
            self.vpc_subnet_ids = Some(v);
            self
        }
        pub fn set_vpc_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.vpc_subnet_ids = input;
            self
        }
        pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.vpc_security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.vpc_security_group_ids = Some(v);
            self
        }
        pub fn set_vpc_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.vpc_security_group_ids = input;
            self
        }
        /// <p>A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
        /// By enabling this setting, you can enforce encrypted TLS connections to the proxy.</p>
        pub fn require_tls(mut self, input: bool) -> Self {
            self.require_tls = Some(input);
            self
        }
        pub fn set_require_tls(mut self, input: std::option::Option<bool>) -> Self {
            self.require_tls = input;
            self
        }
        /// <p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this
        /// value higher or lower than the connection timeout limit for the associated database.</p>
        pub fn idle_client_timeout(mut self, input: i32) -> Self {
            self.idle_client_timeout = Some(input);
            self
        }
        pub fn set_idle_client_timeout(mut self, input: std::option::Option<i32>) -> Self {
            self.idle_client_timeout = input;
            self
        }
        /// <p>Whether the proxy includes detailed information about SQL statements in its logs.
        /// This information helps you to debug issues involving SQL behavior or the performance
        /// and scalability of the proxy connections. The debug information includes the text of
        /// SQL statements that you submit through the proxy. Thus, only enable this setting
        /// when needed for debugging, and only when you have security measures in place to
        /// safeguard any sensitive information that appears in the logs.</p>
        pub fn debug_logging(mut self, input: bool) -> Self {
            self.debug_logging = Some(input);
            self
        }
        pub fn set_debug_logging(mut self, input: std::option::Option<bool>) -> Self {
            self.debug_logging = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBProxyInput`](crate::input::CreateDBProxyInput)
        pub fn build(
            self,
        ) -> std::result::Result<crate::input::CreateDBProxyInput, smithy_http::operation::BuildError>
        {
            Ok(crate::input::CreateDBProxyInput {
                db_proxy_name: self.db_proxy_name,
                engine_family: self.engine_family,
                auth: self.auth,
                role_arn: self.role_arn,
                vpc_subnet_ids: self.vpc_subnet_ids,
                vpc_security_group_ids: self.vpc_security_group_ids,
                require_tls: self.require_tls.unwrap_or_default(),
                idle_client_timeout: self.idle_client_timeout,
                debug_logging: self.debug_logging.unwrap_or_default(),
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type CreateDBProxyInputOperationOutputAlias = crate::operation::CreateDBProxy;
#[doc(hidden)]
pub type CreateDBProxyInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CreateDBProxyInput {
    /// Consumes the builder and constructs an Operation<[`CreateDBProxy`](crate::operation::CreateDBProxy)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CreateDBProxy,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_create_db_proxy(&self).map_err(
                |err| smithy_http::operation::BuildError::SerializationError(err.into()),
            )?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CreateDBProxy::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CreateDBProxy",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CreateDBProxyInput`](crate::input::CreateDBProxyInput)
    pub fn builder() -> crate::input::create_db_proxy_input::Builder {
        crate::input::create_db_proxy_input::Builder::default()
    }
}

/// See [`CreateDBProxyEndpointInput`](crate::input::CreateDBProxyEndpointInput)
pub mod create_db_proxy_endpoint_input {
    /// A builder for [`CreateDBProxyEndpointInput`](crate::input::CreateDBProxyEndpointInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_name: std::option::Option<std::string::String>,
        pub(crate) db_proxy_endpoint_name: std::option::Option<std::string::String>,
        pub(crate) vpc_subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) target_role: std::option::Option<crate::model::DbProxyEndpointTargetRole>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The name of the DB proxy associated with the DB proxy endpoint that you create.</p>
        pub fn db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_proxy_name = Some(input.into());
            self
        }
        pub fn set_db_proxy_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_proxy_name = input;
            self
        }
        /// <p>The name of the DB proxy endpoint to create.</p>
        pub fn db_proxy_endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_proxy_endpoint_name = Some(input.into());
            self
        }
        pub fn set_db_proxy_endpoint_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_proxy_endpoint_name = input;
            self
        }
        pub fn vpc_subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.vpc_subnet_ids.unwrap_or_default();
            v.push(input.into());
            self.vpc_subnet_ids = Some(v);
            self
        }
        pub fn set_vpc_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.vpc_subnet_ids = input;
            self
        }
        pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.vpc_security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.vpc_security_group_ids = Some(v);
            self
        }
        pub fn set_vpc_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.vpc_security_group_ids = input;
            self
        }
        /// <p>A value that indicates whether the DB proxy endpoint can be used for read/write
        /// or read-only operations. The default is <code>READ_WRITE</code>.</p>
        pub fn target_role(mut self, input: crate::model::DbProxyEndpointTargetRole) -> Self {
            self.target_role = Some(input);
            self
        }
        pub fn set_target_role(
            mut self,
            input: std::option::Option<crate::model::DbProxyEndpointTargetRole>,
        ) -> Self {
            self.target_role = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBProxyEndpointInput`](crate::input::CreateDBProxyEndpointInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CreateDBProxyEndpointInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CreateDBProxyEndpointInput {
                db_proxy_name: self.db_proxy_name,
                db_proxy_endpoint_name: self.db_proxy_endpoint_name,
                vpc_subnet_ids: self.vpc_subnet_ids,
                vpc_security_group_ids: self.vpc_security_group_ids,
                target_role: self.target_role,
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type CreateDBProxyEndpointInputOperationOutputAlias = crate::operation::CreateDBProxyEndpoint;
#[doc(hidden)]
pub type CreateDBProxyEndpointInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CreateDBProxyEndpointInput {
    /// Consumes the builder and constructs an Operation<[`CreateDBProxyEndpoint`](crate::operation::CreateDBProxyEndpoint)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CreateDBProxyEndpoint,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_create_db_proxy_endpoint(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CreateDBProxyEndpoint::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CreateDBProxyEndpoint",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CreateDBProxyEndpointInput`](crate::input::CreateDBProxyEndpointInput)
    pub fn builder() -> crate::input::create_db_proxy_endpoint_input::Builder {
        crate::input::create_db_proxy_endpoint_input::Builder::default()
    }
}

/// See [`CreateDBSecurityGroupInput`](crate::input::CreateDBSecurityGroupInput)
pub mod create_db_security_group_input {
    /// A builder for [`CreateDBSecurityGroupInput`](crate::input::CreateDBSecurityGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_security_group_name: std::option::Option<std::string::String>,
        pub(crate) db_security_group_description: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The name for the DB security group. This value is stored as a lowercase string.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// <li>
        /// <p>Must not be "Default"</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>mysecuritygroup</code>
        /// </p>
        pub fn db_security_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_security_group_name = Some(input.into());
            self
        }
        pub fn set_db_security_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_security_group_name = input;
            self
        }
        /// <p>The description for the DB security group.</p>
        pub fn db_security_group_description(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_security_group_description = Some(input.into());
            self
        }
        pub fn set_db_security_group_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_security_group_description = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBSecurityGroupInput`](crate::input::CreateDBSecurityGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CreateDBSecurityGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CreateDBSecurityGroupInput {
                db_security_group_name: self.db_security_group_name,
                db_security_group_description: self.db_security_group_description,
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type CreateDBSecurityGroupInputOperationOutputAlias = crate::operation::CreateDBSecurityGroup;
#[doc(hidden)]
pub type CreateDBSecurityGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CreateDBSecurityGroupInput {
    /// Consumes the builder and constructs an Operation<[`CreateDBSecurityGroup`](crate::operation::CreateDBSecurityGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CreateDBSecurityGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_create_db_security_group(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CreateDBSecurityGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CreateDBSecurityGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CreateDBSecurityGroupInput`](crate::input::CreateDBSecurityGroupInput)
    pub fn builder() -> crate::input::create_db_security_group_input::Builder {
        crate::input::create_db_security_group_input::Builder::default()
    }
}

/// See [`CreateDBSnapshotInput`](crate::input::CreateDBSnapshotInput)
pub mod create_db_snapshot_input {
    /// A builder for [`CreateDBSnapshotInput`](crate::input::CreateDBSnapshotInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_snapshot_identifier: std::option::Option<std::string::String>,
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The identifier for the DB snapshot.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Can't be null, empty, or blank</p>
        /// </li>
        /// <li>
        /// <p>Must contain from 1 to 255 letters, numbers, or hyphens</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-snapshot-id</code>
        /// </p>
        pub fn db_snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_db_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_snapshot_identifier = input;
            self
        }
        /// <p>The identifier of the DB instance that you want to create the snapshot of.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the identifier of an existing DBInstance.</p>
        /// </li>
        /// </ul>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBSnapshotInput`](crate::input::CreateDBSnapshotInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CreateDBSnapshotInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CreateDBSnapshotInput {
                db_snapshot_identifier: self.db_snapshot_identifier,
                db_instance_identifier: self.db_instance_identifier,
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type CreateDBSnapshotInputOperationOutputAlias = crate::operation::CreateDBSnapshot;
#[doc(hidden)]
pub type CreateDBSnapshotInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CreateDBSnapshotInput {
    /// Consumes the builder and constructs an Operation<[`CreateDBSnapshot`](crate::operation::CreateDBSnapshot)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CreateDBSnapshot,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_create_db_snapshot(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CreateDBSnapshot::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CreateDBSnapshot",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CreateDBSnapshotInput`](crate::input::CreateDBSnapshotInput)
    pub fn builder() -> crate::input::create_db_snapshot_input::Builder {
        crate::input::create_db_snapshot_input::Builder::default()
    }
}

/// See [`CreateDBSubnetGroupInput`](crate::input::CreateDBSubnetGroupInput)
pub mod create_db_subnet_group_input {
    /// A builder for [`CreateDBSubnetGroupInput`](crate::input::CreateDBSubnetGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
        pub(crate) db_subnet_group_description: std::option::Option<std::string::String>,
        pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The name for the DB subnet group. This value is stored as a lowercase string.</p>
        /// <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p>
        /// <p>Example: <code>mySubnetgroup</code>
        /// </p>
        pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_subnet_group_name = Some(input.into());
            self
        }
        pub fn set_db_subnet_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_subnet_group_name = input;
            self
        }
        /// <p>The description for the DB subnet group.</p>
        pub fn db_subnet_group_description(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_subnet_group_description = Some(input.into());
            self
        }
        pub fn set_db_subnet_group_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_subnet_group_description = input;
            self
        }
        pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.subnet_ids.unwrap_or_default();
            v.push(input.into());
            self.subnet_ids = Some(v);
            self
        }
        pub fn set_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.subnet_ids = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateDBSubnetGroupInput`](crate::input::CreateDBSubnetGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CreateDBSubnetGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CreateDBSubnetGroupInput {
                db_subnet_group_name: self.db_subnet_group_name,
                db_subnet_group_description: self.db_subnet_group_description,
                subnet_ids: self.subnet_ids,
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type CreateDBSubnetGroupInputOperationOutputAlias = crate::operation::CreateDBSubnetGroup;
#[doc(hidden)]
pub type CreateDBSubnetGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CreateDBSubnetGroupInput {
    /// Consumes the builder and constructs an Operation<[`CreateDBSubnetGroup`](crate::operation::CreateDBSubnetGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CreateDBSubnetGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_create_db_subnet_group(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CreateDBSubnetGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CreateDBSubnetGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CreateDBSubnetGroupInput`](crate::input::CreateDBSubnetGroupInput)
    pub fn builder() -> crate::input::create_db_subnet_group_input::Builder {
        crate::input::create_db_subnet_group_input::Builder::default()
    }
}

/// See [`CreateEventSubscriptionInput`](crate::input::CreateEventSubscriptionInput)
pub mod create_event_subscription_input {
    /// A builder for [`CreateEventSubscriptionInput`](crate::input::CreateEventSubscriptionInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subscription_name: std::option::Option<std::string::String>,
        pub(crate) sns_topic_arn: std::option::Option<std::string::String>,
        pub(crate) source_type: std::option::Option<std::string::String>,
        pub(crate) event_categories: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) source_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) enabled: std::option::Option<bool>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The name of the subscription.</p>
        /// <p>Constraints: The name must be less than 255 characters.</p>
        pub fn subscription_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.subscription_name = Some(input.into());
            self
        }
        pub fn set_subscription_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.subscription_name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</p>
        pub fn sns_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.sns_topic_arn = Some(input.into());
            self
        }
        pub fn set_sns_topic_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sns_topic_arn = input;
            self
        }
        /// <p>The type of source that is generating the events. For example, if you want to be
        /// notified of events generated by a DB instance, you set this parameter to
        /// <code>db-instance</code>. If this value isn't specified, all events are
        /// returned.</p>
        /// <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code>
        /// </p>
        pub fn source_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_type = Some(input.into());
            self
        }
        pub fn set_source_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.source_type = input;
            self
        }
        pub fn event_categories(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.event_categories.unwrap_or_default();
            v.push(input.into());
            self.event_categories = Some(v);
            self
        }
        pub fn set_event_categories(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.event_categories = input;
            self
        }
        pub fn source_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.source_ids.unwrap_or_default();
            v.push(input.into());
            self.source_ids = Some(v);
            self
        }
        pub fn set_source_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.source_ids = input;
            self
        }
        /// <p>
        /// A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active.
        /// </p>
        pub fn enabled(mut self, input: bool) -> Self {
            self.enabled = Some(input);
            self
        }
        pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.enabled = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateEventSubscriptionInput`](crate::input::CreateEventSubscriptionInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CreateEventSubscriptionInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CreateEventSubscriptionInput {
                subscription_name: self.subscription_name,
                sns_topic_arn: self.sns_topic_arn,
                source_type: self.source_type,
                event_categories: self.event_categories,
                source_ids: self.source_ids,
                enabled: self.enabled,
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type CreateEventSubscriptionInputOperationOutputAlias =
    crate::operation::CreateEventSubscription;
#[doc(hidden)]
pub type CreateEventSubscriptionInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CreateEventSubscriptionInput {
    /// Consumes the builder and constructs an Operation<[`CreateEventSubscription`](crate::operation::CreateEventSubscription)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CreateEventSubscription,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_create_event_subscription(&self)
                .map_err(|err| {
                smithy_http::operation::BuildError::SerializationError(err.into())
            })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CreateEventSubscription::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CreateEventSubscription",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CreateEventSubscriptionInput`](crate::input::CreateEventSubscriptionInput)
    pub fn builder() -> crate::input::create_event_subscription_input::Builder {
        crate::input::create_event_subscription_input::Builder::default()
    }
}

/// See [`CreateGlobalClusterInput`](crate::input::CreateGlobalClusterInput)
pub mod create_global_cluster_input {
    /// A builder for [`CreateGlobalClusterInput`](crate::input::CreateGlobalClusterInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) global_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) source_db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) engine: std::option::Option<std::string::String>,
        pub(crate) engine_version: std::option::Option<std::string::String>,
        pub(crate) deletion_protection: std::option::Option<bool>,
        pub(crate) database_name: std::option::Option<std::string::String>,
        pub(crate) storage_encrypted: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The cluster identifier of the new global database cluster.</p>
        pub fn global_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.global_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_global_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.global_cluster_identifier = input;
            self
        }
        /// <p>
        /// The Amazon Resource Name (ARN) to use as the primary cluster of the global database.
        /// This parameter is optional.
        /// </p>
        pub fn source_db_cluster_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.source_db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_source_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_db_cluster_identifier = input;
            self
        }
        /// <p>The name of the database engine to be used for this DB cluster.</p>
        pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine = Some(input.into());
            self
        }
        pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine = input;
            self
        }
        /// <p>The engine version of the Aurora global database.</p>
        pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_version = Some(input.into());
            self
        }
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_version = input;
            self
        }
        /// <p>
        /// The deletion protection setting for the new global database.
        /// The global database can't be deleted when deletion protection is enabled.
        /// </p>
        pub fn deletion_protection(mut self, input: bool) -> Self {
            self.deletion_protection = Some(input);
            self
        }
        pub fn set_deletion_protection(mut self, input: std::option::Option<bool>) -> Self {
            self.deletion_protection = input;
            self
        }
        /// <p>
        /// The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon
        /// Aurora will not create a database in the global database cluster you are creating.
        /// </p>
        pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.database_name = Some(input.into());
            self
        }
        pub fn set_database_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.database_name = input;
            self
        }
        /// <p>
        /// The storage encryption setting for the new global database cluster.
        /// </p>
        pub fn storage_encrypted(mut self, input: bool) -> Self {
            self.storage_encrypted = Some(input);
            self
        }
        pub fn set_storage_encrypted(mut self, input: std::option::Option<bool>) -> Self {
            self.storage_encrypted = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateGlobalClusterInput`](crate::input::CreateGlobalClusterInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CreateGlobalClusterInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CreateGlobalClusterInput {
                global_cluster_identifier: self.global_cluster_identifier,
                source_db_cluster_identifier: self.source_db_cluster_identifier,
                engine: self.engine,
                engine_version: self.engine_version,
                deletion_protection: self.deletion_protection,
                database_name: self.database_name,
                storage_encrypted: self.storage_encrypted,
            })
        }
    }
}
#[doc(hidden)]
pub type CreateGlobalClusterInputOperationOutputAlias = crate::operation::CreateGlobalCluster;
#[doc(hidden)]
pub type CreateGlobalClusterInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CreateGlobalClusterInput {
    /// Consumes the builder and constructs an Operation<[`CreateGlobalCluster`](crate::operation::CreateGlobalCluster)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CreateGlobalCluster,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_create_global_cluster(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CreateGlobalCluster::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CreateGlobalCluster",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CreateGlobalClusterInput`](crate::input::CreateGlobalClusterInput)
    pub fn builder() -> crate::input::create_global_cluster_input::Builder {
        crate::input::create_global_cluster_input::Builder::default()
    }
}

/// See [`CreateOptionGroupInput`](crate::input::CreateOptionGroupInput)
pub mod create_option_group_input {
    /// A builder for [`CreateOptionGroupInput`](crate::input::CreateOptionGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) option_group_name: std::option::Option<std::string::String>,
        pub(crate) engine_name: std::option::Option<std::string::String>,
        pub(crate) major_engine_version: std::option::Option<std::string::String>,
        pub(crate) option_group_description: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>Specifies the name of the option group to be created.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be 1 to 255 letters, numbers, or hyphens</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>myoptiongroup</code>
        /// </p>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        /// <p>Specifies the name of the engine that this option group should be associated with.</p>
        /// <p>Valid Values:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>mariadb</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>mysql</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se2</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se1</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>postgres</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ex</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-web</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn engine_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_name = Some(input.into());
            self
        }
        pub fn set_engine_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine_name = input;
            self
        }
        /// <p>Specifies the major version of the engine that this option group should be associated with.</p>
        pub fn major_engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.major_engine_version = Some(input.into());
            self
        }
        pub fn set_major_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.major_engine_version = input;
            self
        }
        /// <p>The description of the option group.</p>
        pub fn option_group_description(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_description = Some(input.into());
            self
        }
        pub fn set_option_group_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_description = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateOptionGroupInput`](crate::input::CreateOptionGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::CreateOptionGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::CreateOptionGroupInput {
                option_group_name: self.option_group_name,
                engine_name: self.engine_name,
                major_engine_version: self.major_engine_version,
                option_group_description: self.option_group_description,
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type CreateOptionGroupInputOperationOutputAlias = crate::operation::CreateOptionGroup;
#[doc(hidden)]
pub type CreateOptionGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl CreateOptionGroupInput {
    /// Consumes the builder and constructs an Operation<[`CreateOptionGroup`](crate::operation::CreateOptionGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::CreateOptionGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_create_option_group(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::CreateOptionGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "CreateOptionGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`CreateOptionGroupInput`](crate::input::CreateOptionGroupInput)
    pub fn builder() -> crate::input::create_option_group_input::Builder {
        crate::input::create_option_group_input::Builder::default()
    }
}

/// See [`DeleteCustomAvailabilityZoneInput`](crate::input::DeleteCustomAvailabilityZoneInput)
pub mod delete_custom_availability_zone_input {
    /// A builder for [`DeleteCustomAvailabilityZoneInput`](crate::input::DeleteCustomAvailabilityZoneInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) custom_availability_zone_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The custom AZ identifier.</p>
        pub fn custom_availability_zone_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.custom_availability_zone_id = Some(input.into());
            self
        }
        pub fn set_custom_availability_zone_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.custom_availability_zone_id = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteCustomAvailabilityZoneInput`](crate::input::DeleteCustomAvailabilityZoneInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeleteCustomAvailabilityZoneInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeleteCustomAvailabilityZoneInput {
                custom_availability_zone_id: self.custom_availability_zone_id,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteCustomAvailabilityZoneInputOperationOutputAlias =
    crate::operation::DeleteCustomAvailabilityZone;
#[doc(hidden)]
pub type DeleteCustomAvailabilityZoneInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteCustomAvailabilityZoneInput {
    /// Consumes the builder and constructs an Operation<[`DeleteCustomAvailabilityZone`](crate::operation::DeleteCustomAvailabilityZone)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteCustomAvailabilityZone,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_delete_custom_availability_zone(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteCustomAvailabilityZone::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteCustomAvailabilityZone",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteCustomAvailabilityZoneInput`](crate::input::DeleteCustomAvailabilityZoneInput)
    pub fn builder() -> crate::input::delete_custom_availability_zone_input::Builder {
        crate::input::delete_custom_availability_zone_input::Builder::default()
    }
}

/// See [`DeleteDBClusterInput`](crate::input::DeleteDBClusterInput)
pub mod delete_db_cluster_input {
    /// A builder for [`DeleteDBClusterInput`](crate::input::DeleteDBClusterInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) skip_final_snapshot: std::option::Option<bool>,
        pub(crate) final_db_snapshot_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match an existing DBClusterIdentifier.</p>
        /// </li>
        /// </ul>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted.
        /// If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot
        /// is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created.
        /// By default, this parameter is disabled.</p>
        /// <note>
        /// <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p>
        /// </note>
        pub fn skip_final_snapshot(mut self, input: bool) -> Self {
            self.skip_final_snapshot = Some(input);
            self
        }
        pub fn set_skip_final_snapshot(mut self, input: std::option::Option<bool>) -> Self {
            self.skip_final_snapshot = input;
            self
        }
        /// <p>
        /// The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code>
        /// is disabled.
        /// </p>
        /// <note>
        /// <p>
        /// Specifying this parameter and also skipping the creation of a final DB cluster snapshot
        /// with the <code>SkipFinalShapshot</code> parameter results in an error.</p>
        /// </note>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        pub fn final_db_snapshot_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.final_db_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_final_db_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.final_db_snapshot_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBClusterInput`](crate::input::DeleteDBClusterInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeleteDBClusterInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeleteDBClusterInput {
                db_cluster_identifier: self.db_cluster_identifier,
                skip_final_snapshot: self.skip_final_snapshot.unwrap_or_default(),
                final_db_snapshot_identifier: self.final_db_snapshot_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteDBClusterInputOperationOutputAlias = crate::operation::DeleteDBCluster;
#[doc(hidden)]
pub type DeleteDBClusterInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteDBClusterInput {
    /// Consumes the builder and constructs an Operation<[`DeleteDBCluster`](crate::operation::DeleteDBCluster)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteDBCluster,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_delete_db_cluster(&self).map_err(
                |err| smithy_http::operation::BuildError::SerializationError(err.into()),
            )?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteDBCluster::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteDBCluster",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteDBClusterInput`](crate::input::DeleteDBClusterInput)
    pub fn builder() -> crate::input::delete_db_cluster_input::Builder {
        crate::input::delete_db_cluster_input::Builder::default()
    }
}

/// See [`DeleteDBClusterEndpointInput`](crate::input::DeleteDBClusterEndpointInput)
pub mod delete_db_cluster_endpoint_input {
    /// A builder for [`DeleteDBClusterEndpointInput`](crate::input::DeleteDBClusterEndpointInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_endpoint_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.</p>
        pub fn db_cluster_endpoint_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_endpoint_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBClusterEndpointInput`](crate::input::DeleteDBClusterEndpointInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeleteDBClusterEndpointInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeleteDBClusterEndpointInput {
                db_cluster_endpoint_identifier: self.db_cluster_endpoint_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteDBClusterEndpointInputOperationOutputAlias =
    crate::operation::DeleteDBClusterEndpoint;
#[doc(hidden)]
pub type DeleteDBClusterEndpointInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteDBClusterEndpointInput {
    /// Consumes the builder and constructs an Operation<[`DeleteDBClusterEndpoint`](crate::operation::DeleteDBClusterEndpoint)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteDBClusterEndpoint,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_delete_db_cluster_endpoint(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteDBClusterEndpoint::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteDBClusterEndpoint",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteDBClusterEndpointInput`](crate::input::DeleteDBClusterEndpointInput)
    pub fn builder() -> crate::input::delete_db_cluster_endpoint_input::Builder {
        crate::input::delete_db_cluster_endpoint_input::Builder::default()
    }
}

/// See [`DeleteDBClusterParameterGroupInput`](crate::input::DeleteDBClusterParameterGroupInput)
pub mod delete_db_cluster_parameter_group_input {
    /// A builder for [`DeleteDBClusterParameterGroupInput`](crate::input::DeleteDBClusterParameterGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_parameter_group_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB cluster parameter group.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be the name of an existing DB cluster parameter group.</p>
        /// </li>
        /// <li>
        /// <p>You can't delete a default DB cluster parameter group.</p>
        /// </li>
        /// <li>
        /// <p>Can't be associated with any DB clusters.</p>
        /// </li>
        /// </ul>
        pub fn db_cluster_parameter_group_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_cluster_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBClusterParameterGroupInput`](crate::input::DeleteDBClusterParameterGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeleteDBClusterParameterGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeleteDBClusterParameterGroupInput {
                db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteDBClusterParameterGroupInputOperationOutputAlias =
    crate::operation::DeleteDBClusterParameterGroup;
#[doc(hidden)]
pub type DeleteDBClusterParameterGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteDBClusterParameterGroupInput {
    /// Consumes the builder and constructs an Operation<[`DeleteDBClusterParameterGroup`](crate::operation::DeleteDBClusterParameterGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteDBClusterParameterGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_delete_db_cluster_parameter_group(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteDBClusterParameterGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteDBClusterParameterGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteDBClusterParameterGroupInput`](crate::input::DeleteDBClusterParameterGroupInput)
    pub fn builder() -> crate::input::delete_db_cluster_parameter_group_input::Builder {
        crate::input::delete_db_cluster_parameter_group_input::Builder::default()
    }
}

/// See [`DeleteDBClusterSnapshotInput`](crate::input::DeleteDBClusterSnapshotInput)
pub mod delete_db_cluster_snapshot_input {
    /// A builder for [`DeleteDBClusterSnapshotInput`](crate::input::DeleteDBClusterSnapshotInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of the DB cluster snapshot to delete.</p>
        /// <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
        pub fn db_cluster_snapshot_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_snapshot_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBClusterSnapshotInput`](crate::input::DeleteDBClusterSnapshotInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeleteDBClusterSnapshotInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeleteDBClusterSnapshotInput {
                db_cluster_snapshot_identifier: self.db_cluster_snapshot_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteDBClusterSnapshotInputOperationOutputAlias =
    crate::operation::DeleteDBClusterSnapshot;
#[doc(hidden)]
pub type DeleteDBClusterSnapshotInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteDBClusterSnapshotInput {
    /// Consumes the builder and constructs an Operation<[`DeleteDBClusterSnapshot`](crate::operation::DeleteDBClusterSnapshot)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteDBClusterSnapshot,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_delete_db_cluster_snapshot(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteDBClusterSnapshot::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteDBClusterSnapshot",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteDBClusterSnapshotInput`](crate::input::DeleteDBClusterSnapshotInput)
    pub fn builder() -> crate::input::delete_db_cluster_snapshot_input::Builder {
        crate::input::delete_db_cluster_snapshot_input::Builder::default()
    }
}

/// See [`DeleteDBInstanceInput`](crate::input::DeleteDBInstanceInput)
pub mod delete_db_instance_input {
    /// A builder for [`DeleteDBInstanceInput`](crate::input::DeleteDBInstanceInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) skip_final_snapshot: std::option::Option<bool>,
        pub(crate) final_db_snapshot_identifier: std::option::Option<std::string::String>,
        pub(crate) delete_automated_backups: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the name of an existing DB instance.</p>
        /// </li>
        /// </ul>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        /// <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted.
        /// If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot
        /// is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p>
        /// <p>When a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p>
        /// <p>Specify skip when deleting a read replica.</p>
        /// <note>
        /// <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p>
        /// </note>
        pub fn skip_final_snapshot(mut self, input: bool) -> Self {
            self.skip_final_snapshot = Some(input);
            self
        }
        pub fn set_skip_final_snapshot(mut self, input: std::option::Option<bool>) -> Self {
            self.skip_final_snapshot = input;
            self
        }
        /// <p>
        /// The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code>
        /// parameter is disabled.
        /// </p>
        /// <note>
        /// <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p>
        /// </note>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be 1 to 255 letters or numbers.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
        /// </li>
        /// <li>
        /// <p>Can't be specified when deleting a read replica.</p>
        /// </li>
        /// </ul>
        pub fn final_db_snapshot_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.final_db_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_final_db_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.final_db_snapshot_identifier = input;
            self
        }
        /// <p>A value that indicates whether to remove automated backups immediately after the DB
        /// instance is deleted. This parameter isn't case-sensitive. The default is to remove
        /// automated backups immediately after the DB instance is deleted.</p>
        pub fn delete_automated_backups(mut self, input: bool) -> Self {
            self.delete_automated_backups = Some(input);
            self
        }
        pub fn set_delete_automated_backups(mut self, input: std::option::Option<bool>) -> Self {
            self.delete_automated_backups = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBInstanceInput`](crate::input::DeleteDBInstanceInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeleteDBInstanceInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeleteDBInstanceInput {
                db_instance_identifier: self.db_instance_identifier,
                skip_final_snapshot: self.skip_final_snapshot.unwrap_or_default(),
                final_db_snapshot_identifier: self.final_db_snapshot_identifier,
                delete_automated_backups: self.delete_automated_backups,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteDBInstanceInputOperationOutputAlias = crate::operation::DeleteDBInstance;
#[doc(hidden)]
pub type DeleteDBInstanceInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteDBInstanceInput {
    /// Consumes the builder and constructs an Operation<[`DeleteDBInstance`](crate::operation::DeleteDBInstance)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteDBInstance,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_delete_db_instance(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteDBInstance::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteDBInstance",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteDBInstanceInput`](crate::input::DeleteDBInstanceInput)
    pub fn builder() -> crate::input::delete_db_instance_input::Builder {
        crate::input::delete_db_instance_input::Builder::default()
    }
}

/// See [`DeleteDBInstanceAutomatedBackupInput`](crate::input::DeleteDBInstanceAutomatedBackupInput)
pub mod delete_db_instance_automated_backup_input {
    /// A builder for [`DeleteDBInstanceAutomatedBackupInput`](crate::input::DeleteDBInstanceAutomatedBackupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dbi_resource_id: std::option::Option<std::string::String>,
        pub(crate) db_instance_automated_backups_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.</p>
        pub fn dbi_resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.dbi_resource_id = Some(input.into());
            self
        }
        pub fn set_dbi_resource_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.dbi_resource_id = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the automated backups to delete, for example,
        /// <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
        pub fn db_instance_automated_backups_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_instance_automated_backups_arn = Some(input.into());
            self
        }
        pub fn set_db_instance_automated_backups_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_automated_backups_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBInstanceAutomatedBackupInput`](crate::input::DeleteDBInstanceAutomatedBackupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeleteDBInstanceAutomatedBackupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeleteDBInstanceAutomatedBackupInput {
                dbi_resource_id: self.dbi_resource_id,
                db_instance_automated_backups_arn: self.db_instance_automated_backups_arn,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteDBInstanceAutomatedBackupInputOperationOutputAlias =
    crate::operation::DeleteDBInstanceAutomatedBackup;
#[doc(hidden)]
pub type DeleteDBInstanceAutomatedBackupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteDBInstanceAutomatedBackupInput {
    /// Consumes the builder and constructs an Operation<[`DeleteDBInstanceAutomatedBackup`](crate::operation::DeleteDBInstanceAutomatedBackup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteDBInstanceAutomatedBackup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_delete_db_instance_automated_backup(
                    &self,
                )
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteDBInstanceAutomatedBackup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteDBInstanceAutomatedBackup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteDBInstanceAutomatedBackupInput`](crate::input::DeleteDBInstanceAutomatedBackupInput)
    pub fn builder() -> crate::input::delete_db_instance_automated_backup_input::Builder {
        crate::input::delete_db_instance_automated_backup_input::Builder::default()
    }
}

/// See [`DeleteDBParameterGroupInput`](crate::input::DeleteDBParameterGroupInput)
pub mod delete_db_parameter_group_input {
    /// A builder for [`DeleteDBParameterGroupInput`](crate::input::DeleteDBParameterGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_parameter_group_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB parameter group.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be the name of an existing DB parameter group</p>
        /// </li>
        /// <li>
        /// <p>You can't delete a default DB parameter group</p>
        /// </li>
        /// <li>
        /// <p>Can't be associated with any DB instances</p>
        /// </li>
        /// </ul>
        pub fn db_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_name = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBParameterGroupInput`](crate::input::DeleteDBParameterGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeleteDBParameterGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeleteDBParameterGroupInput {
                db_parameter_group_name: self.db_parameter_group_name,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteDBParameterGroupInputOperationOutputAlias = crate::operation::DeleteDBParameterGroup;
#[doc(hidden)]
pub type DeleteDBParameterGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteDBParameterGroupInput {
    /// Consumes the builder and constructs an Operation<[`DeleteDBParameterGroup`](crate::operation::DeleteDBParameterGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteDBParameterGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_delete_db_parameter_group(&self)
                .map_err(|err| {
                smithy_http::operation::BuildError::SerializationError(err.into())
            })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteDBParameterGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteDBParameterGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteDBParameterGroupInput`](crate::input::DeleteDBParameterGroupInput)
    pub fn builder() -> crate::input::delete_db_parameter_group_input::Builder {
        crate::input::delete_db_parameter_group_input::Builder::default()
    }
}

/// See [`DeleteDBProxyInput`](crate::input::DeleteDBProxyInput)
pub mod delete_db_proxy_input {
    /// A builder for [`DeleteDBProxyInput`](crate::input::DeleteDBProxyInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB proxy to delete.</p>
        pub fn db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_proxy_name = Some(input.into());
            self
        }
        pub fn set_db_proxy_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_proxy_name = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBProxyInput`](crate::input::DeleteDBProxyInput)
        pub fn build(
            self,
        ) -> std::result::Result<crate::input::DeleteDBProxyInput, smithy_http::operation::BuildError>
        {
            Ok(crate::input::DeleteDBProxyInput {
                db_proxy_name: self.db_proxy_name,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteDBProxyInputOperationOutputAlias = crate::operation::DeleteDBProxy;
#[doc(hidden)]
pub type DeleteDBProxyInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteDBProxyInput {
    /// Consumes the builder and constructs an Operation<[`DeleteDBProxy`](crate::operation::DeleteDBProxy)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteDBProxy,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_delete_db_proxy(&self).map_err(
                |err| smithy_http::operation::BuildError::SerializationError(err.into()),
            )?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteDBProxy::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteDBProxy",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteDBProxyInput`](crate::input::DeleteDBProxyInput)
    pub fn builder() -> crate::input::delete_db_proxy_input::Builder {
        crate::input::delete_db_proxy_input::Builder::default()
    }
}

/// See [`DeleteDBProxyEndpointInput`](crate::input::DeleteDBProxyEndpointInput)
pub mod delete_db_proxy_endpoint_input {
    /// A builder for [`DeleteDBProxyEndpointInput`](crate::input::DeleteDBProxyEndpointInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_endpoint_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB proxy endpoint to delete.</p>
        pub fn db_proxy_endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_proxy_endpoint_name = Some(input.into());
            self
        }
        pub fn set_db_proxy_endpoint_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_proxy_endpoint_name = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBProxyEndpointInput`](crate::input::DeleteDBProxyEndpointInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeleteDBProxyEndpointInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeleteDBProxyEndpointInput {
                db_proxy_endpoint_name: self.db_proxy_endpoint_name,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteDBProxyEndpointInputOperationOutputAlias = crate::operation::DeleteDBProxyEndpoint;
#[doc(hidden)]
pub type DeleteDBProxyEndpointInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteDBProxyEndpointInput {
    /// Consumes the builder and constructs an Operation<[`DeleteDBProxyEndpoint`](crate::operation::DeleteDBProxyEndpoint)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteDBProxyEndpoint,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_delete_db_proxy_endpoint(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteDBProxyEndpoint::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteDBProxyEndpoint",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteDBProxyEndpointInput`](crate::input::DeleteDBProxyEndpointInput)
    pub fn builder() -> crate::input::delete_db_proxy_endpoint_input::Builder {
        crate::input::delete_db_proxy_endpoint_input::Builder::default()
    }
}

/// See [`DeleteDBSecurityGroupInput`](crate::input::DeleteDBSecurityGroupInput)
pub mod delete_db_security_group_input {
    /// A builder for [`DeleteDBSecurityGroupInput`](crate::input::DeleteDBSecurityGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_security_group_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB security group to delete.</p>
        /// <note>
        /// <p>You can't delete the default DB security group.</p>
        /// </note>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// <li>
        /// <p>Must not be "Default"</p>
        /// </li>
        /// </ul>
        pub fn db_security_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_security_group_name = Some(input.into());
            self
        }
        pub fn set_db_security_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_security_group_name = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBSecurityGroupInput`](crate::input::DeleteDBSecurityGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeleteDBSecurityGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeleteDBSecurityGroupInput {
                db_security_group_name: self.db_security_group_name,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteDBSecurityGroupInputOperationOutputAlias = crate::operation::DeleteDBSecurityGroup;
#[doc(hidden)]
pub type DeleteDBSecurityGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteDBSecurityGroupInput {
    /// Consumes the builder and constructs an Operation<[`DeleteDBSecurityGroup`](crate::operation::DeleteDBSecurityGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteDBSecurityGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_delete_db_security_group(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteDBSecurityGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteDBSecurityGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteDBSecurityGroupInput`](crate::input::DeleteDBSecurityGroupInput)
    pub fn builder() -> crate::input::delete_db_security_group_input::Builder {
        crate::input::delete_db_security_group_input::Builder::default()
    }
}

/// See [`DeleteDBSnapshotInput`](crate::input::DeleteDBSnapshotInput)
pub mod delete_db_snapshot_input {
    /// A builder for [`DeleteDBSnapshotInput`](crate::input::DeleteDBSnapshotInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_snapshot_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The DB snapshot identifier.</p>
        /// <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
        pub fn db_snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_db_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_snapshot_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBSnapshotInput`](crate::input::DeleteDBSnapshotInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeleteDBSnapshotInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeleteDBSnapshotInput {
                db_snapshot_identifier: self.db_snapshot_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteDBSnapshotInputOperationOutputAlias = crate::operation::DeleteDBSnapshot;
#[doc(hidden)]
pub type DeleteDBSnapshotInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteDBSnapshotInput {
    /// Consumes the builder and constructs an Operation<[`DeleteDBSnapshot`](crate::operation::DeleteDBSnapshot)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteDBSnapshot,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_delete_db_snapshot(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteDBSnapshot::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteDBSnapshot",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteDBSnapshotInput`](crate::input::DeleteDBSnapshotInput)
    pub fn builder() -> crate::input::delete_db_snapshot_input::Builder {
        crate::input::delete_db_snapshot_input::Builder::default()
    }
}

/// See [`DeleteDBSubnetGroupInput`](crate::input::DeleteDBSubnetGroupInput)
pub mod delete_db_subnet_group_input {
    /// A builder for [`DeleteDBSubnetGroupInput`](crate::input::DeleteDBSubnetGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the database subnet group to delete.</p>
        /// <note>
        /// <p>You can't delete the default subnet group.</p>
        /// </note>
        /// <p>Constraints:</p>
        /// <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p>
        /// <p>Example: <code>mySubnetgroup</code>
        /// </p>
        pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_subnet_group_name = Some(input.into());
            self
        }
        pub fn set_db_subnet_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_subnet_group_name = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteDBSubnetGroupInput`](crate::input::DeleteDBSubnetGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeleteDBSubnetGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeleteDBSubnetGroupInput {
                db_subnet_group_name: self.db_subnet_group_name,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteDBSubnetGroupInputOperationOutputAlias = crate::operation::DeleteDBSubnetGroup;
#[doc(hidden)]
pub type DeleteDBSubnetGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteDBSubnetGroupInput {
    /// Consumes the builder and constructs an Operation<[`DeleteDBSubnetGroup`](crate::operation::DeleteDBSubnetGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteDBSubnetGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_delete_db_subnet_group(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteDBSubnetGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteDBSubnetGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteDBSubnetGroupInput`](crate::input::DeleteDBSubnetGroupInput)
    pub fn builder() -> crate::input::delete_db_subnet_group_input::Builder {
        crate::input::delete_db_subnet_group_input::Builder::default()
    }
}

/// See [`DeleteEventSubscriptionInput`](crate::input::DeleteEventSubscriptionInput)
pub mod delete_event_subscription_input {
    /// A builder for [`DeleteEventSubscriptionInput`](crate::input::DeleteEventSubscriptionInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subscription_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the RDS event notification subscription you want to delete.</p>
        pub fn subscription_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.subscription_name = Some(input.into());
            self
        }
        pub fn set_subscription_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.subscription_name = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteEventSubscriptionInput`](crate::input::DeleteEventSubscriptionInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeleteEventSubscriptionInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeleteEventSubscriptionInput {
                subscription_name: self.subscription_name,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteEventSubscriptionInputOperationOutputAlias =
    crate::operation::DeleteEventSubscription;
#[doc(hidden)]
pub type DeleteEventSubscriptionInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteEventSubscriptionInput {
    /// Consumes the builder and constructs an Operation<[`DeleteEventSubscription`](crate::operation::DeleteEventSubscription)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteEventSubscription,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_delete_event_subscription(&self)
                .map_err(|err| {
                smithy_http::operation::BuildError::SerializationError(err.into())
            })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteEventSubscription::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteEventSubscription",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteEventSubscriptionInput`](crate::input::DeleteEventSubscriptionInput)
    pub fn builder() -> crate::input::delete_event_subscription_input::Builder {
        crate::input::delete_event_subscription_input::Builder::default()
    }
}

/// See [`DeleteGlobalClusterInput`](crate::input::DeleteGlobalClusterInput)
pub mod delete_global_cluster_input {
    /// A builder for [`DeleteGlobalClusterInput`](crate::input::DeleteGlobalClusterInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) global_cluster_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>
        /// The cluster identifier of the global database cluster being deleted.
        /// </p>
        pub fn global_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.global_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_global_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.global_cluster_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteGlobalClusterInput`](crate::input::DeleteGlobalClusterInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeleteGlobalClusterInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeleteGlobalClusterInput {
                global_cluster_identifier: self.global_cluster_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteGlobalClusterInputOperationOutputAlias = crate::operation::DeleteGlobalCluster;
#[doc(hidden)]
pub type DeleteGlobalClusterInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteGlobalClusterInput {
    /// Consumes the builder and constructs an Operation<[`DeleteGlobalCluster`](crate::operation::DeleteGlobalCluster)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteGlobalCluster,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_delete_global_cluster(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteGlobalCluster::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteGlobalCluster",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteGlobalClusterInput`](crate::input::DeleteGlobalClusterInput)
    pub fn builder() -> crate::input::delete_global_cluster_input::Builder {
        crate::input::delete_global_cluster_input::Builder::default()
    }
}

/// See [`DeleteInstallationMediaInput`](crate::input::DeleteInstallationMediaInput)
pub mod delete_installation_media_input {
    /// A builder for [`DeleteInstallationMediaInput`](crate::input::DeleteInstallationMediaInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) installation_media_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The installation medium ID.</p>
        pub fn installation_media_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.installation_media_id = Some(input.into());
            self
        }
        pub fn set_installation_media_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.installation_media_id = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteInstallationMediaInput`](crate::input::DeleteInstallationMediaInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeleteInstallationMediaInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeleteInstallationMediaInput {
                installation_media_id: self.installation_media_id,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteInstallationMediaInputOperationOutputAlias =
    crate::operation::DeleteInstallationMedia;
#[doc(hidden)]
pub type DeleteInstallationMediaInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteInstallationMediaInput {
    /// Consumes the builder and constructs an Operation<[`DeleteInstallationMedia`](crate::operation::DeleteInstallationMedia)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteInstallationMedia,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_delete_installation_media(&self)
                .map_err(|err| {
                smithy_http::operation::BuildError::SerializationError(err.into())
            })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteInstallationMedia::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteInstallationMedia",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteInstallationMediaInput`](crate::input::DeleteInstallationMediaInput)
    pub fn builder() -> crate::input::delete_installation_media_input::Builder {
        crate::input::delete_installation_media_input::Builder::default()
    }
}

/// See [`DeleteOptionGroupInput`](crate::input::DeleteOptionGroupInput)
pub mod delete_option_group_input {
    /// A builder for [`DeleteOptionGroupInput`](crate::input::DeleteOptionGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) option_group_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the option group to be deleted.</p>
        /// <note>
        /// <p>You can't delete default option groups.</p>
        /// </note>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteOptionGroupInput`](crate::input::DeleteOptionGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeleteOptionGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeleteOptionGroupInput {
                option_group_name: self.option_group_name,
            })
        }
    }
}
#[doc(hidden)]
pub type DeleteOptionGroupInputOperationOutputAlias = crate::operation::DeleteOptionGroup;
#[doc(hidden)]
pub type DeleteOptionGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeleteOptionGroupInput {
    /// Consumes the builder and constructs an Operation<[`DeleteOptionGroup`](crate::operation::DeleteOptionGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeleteOptionGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_delete_option_group(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeleteOptionGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeleteOptionGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeleteOptionGroupInput`](crate::input::DeleteOptionGroupInput)
    pub fn builder() -> crate::input::delete_option_group_input::Builder {
        crate::input::delete_option_group_input::Builder::default()
    }
}

/// See [`DeregisterDBProxyTargetsInput`](crate::input::DeregisterDBProxyTargetsInput)
pub mod deregister_db_proxy_targets_input {
    /// A builder for [`DeregisterDBProxyTargetsInput`](crate::input::DeregisterDBProxyTargetsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_name: std::option::Option<std::string::String>,
        pub(crate) target_group_name: std::option::Option<std::string::String>,
        pub(crate) db_instance_identifiers: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) db_cluster_identifiers: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.</p>
        pub fn db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_proxy_name = Some(input.into());
            self
        }
        pub fn set_db_proxy_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_proxy_name = input;
            self
        }
        /// <p>The identifier of the <code>DBProxyTargetGroup</code>.</p>
        pub fn target_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.target_group_name = Some(input.into());
            self
        }
        pub fn set_target_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_group_name = input;
            self
        }
        pub fn db_instance_identifiers(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.db_instance_identifiers.unwrap_or_default();
            v.push(input.into());
            self.db_instance_identifiers = Some(v);
            self
        }
        pub fn set_db_instance_identifiers(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.db_instance_identifiers = input;
            self
        }
        pub fn db_cluster_identifiers(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.db_cluster_identifiers.unwrap_or_default();
            v.push(input.into());
            self.db_cluster_identifiers = Some(v);
            self
        }
        pub fn set_db_cluster_identifiers(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.db_cluster_identifiers = input;
            self
        }
        /// Consumes the builder and constructs a [`DeregisterDBProxyTargetsInput`](crate::input::DeregisterDBProxyTargetsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DeregisterDBProxyTargetsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DeregisterDBProxyTargetsInput {
                db_proxy_name: self.db_proxy_name,
                target_group_name: self.target_group_name,
                db_instance_identifiers: self.db_instance_identifiers,
                db_cluster_identifiers: self.db_cluster_identifiers,
            })
        }
    }
}
#[doc(hidden)]
pub type DeregisterDBProxyTargetsInputOperationOutputAlias =
    crate::operation::DeregisterDBProxyTargets;
#[doc(hidden)]
pub type DeregisterDBProxyTargetsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DeregisterDBProxyTargetsInput {
    /// Consumes the builder and constructs an Operation<[`DeregisterDBProxyTargets`](crate::operation::DeregisterDBProxyTargets)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DeregisterDBProxyTargets,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_deregister_db_proxy_targets(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DeregisterDBProxyTargets::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DeregisterDBProxyTargets",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DeregisterDBProxyTargetsInput`](crate::input::DeregisterDBProxyTargetsInput)
    pub fn builder() -> crate::input::deregister_db_proxy_targets_input::Builder {
        crate::input::deregister_db_proxy_targets_input::Builder::default()
    }
}

/// See [`DescribeAccountAttributesInput`](crate::input::DescribeAccountAttributesInput)
pub mod describe_account_attributes_input {
    /// A builder for [`DescribeAccountAttributesInput`](crate::input::DescribeAccountAttributesInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DescribeAccountAttributesInput`](crate::input::DescribeAccountAttributesInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeAccountAttributesInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeAccountAttributesInput {})
        }
    }
}
#[doc(hidden)]
pub type DescribeAccountAttributesInputOperationOutputAlias =
    crate::operation::DescribeAccountAttributes;
#[doc(hidden)]
pub type DescribeAccountAttributesInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeAccountAttributesInput {
    /// Consumes the builder and constructs an Operation<[`DescribeAccountAttributes`](crate::operation::DescribeAccountAttributes)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeAccountAttributes,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_account_attributes(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeAccountAttributes::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeAccountAttributes",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeAccountAttributesInput`](crate::input::DescribeAccountAttributesInput)
    pub fn builder() -> crate::input::describe_account_attributes_input::Builder {
        crate::input::describe_account_attributes_input::Builder::default()
    }
}

/// See [`DescribeCertificatesInput`](crate::input::DescribeCertificatesInput)
pub mod describe_certificates_input {
    /// A builder for [`DescribeCertificatesInput`](crate::input::DescribeCertificatesInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) certificate_identifier: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match an existing CertificateIdentifier.</p>
        /// </li>
        /// </ul>
        pub fn certificate_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.certificate_identifier = Some(input.into());
            self
        }
        pub fn set_certificate_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.certificate_identifier = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// <code>DescribeCertificates</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCertificatesInput`](crate::input::DescribeCertificatesInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeCertificatesInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeCertificatesInput {
                certificate_identifier: self.certificate_identifier,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeCertificatesInputOperationOutputAlias = crate::operation::DescribeCertificates;
#[doc(hidden)]
pub type DescribeCertificatesInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeCertificatesInput {
    /// Consumes the builder and constructs an Operation<[`DescribeCertificates`](crate::operation::DescribeCertificates)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeCertificates,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_certificates(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeCertificates::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeCertificates",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeCertificatesInput`](crate::input::DescribeCertificatesInput)
    pub fn builder() -> crate::input::describe_certificates_input::Builder {
        crate::input::describe_certificates_input::Builder::default()
    }
}

/// See [`DescribeCustomAvailabilityZonesInput`](crate::input::DescribeCustomAvailabilityZonesInput)
pub mod describe_custom_availability_zones_input {
    /// A builder for [`DescribeCustomAvailabilityZonesInput`](crate::input::DescribeCustomAvailabilityZonesInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) custom_availability_zone_id: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.</p>
        pub fn custom_availability_zone_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.custom_availability_zone_id = Some(input.into());
            self
        }
        pub fn set_custom_availability_zone_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.custom_availability_zone_id = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>An optional pagination token provided by a previous
        /// <code>DescribeCustomAvailabilityZones</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCustomAvailabilityZonesInput`](crate::input::DescribeCustomAvailabilityZonesInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeCustomAvailabilityZonesInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeCustomAvailabilityZonesInput {
                custom_availability_zone_id: self.custom_availability_zone_id,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeCustomAvailabilityZonesInputOperationOutputAlias =
    crate::operation::DescribeCustomAvailabilityZones;
#[doc(hidden)]
pub type DescribeCustomAvailabilityZonesInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeCustomAvailabilityZonesInput {
    /// Consumes the builder and constructs an Operation<[`DescribeCustomAvailabilityZones`](crate::operation::DescribeCustomAvailabilityZones)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeCustomAvailabilityZones,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_custom_availability_zones(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeCustomAvailabilityZones::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeCustomAvailabilityZones",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeCustomAvailabilityZonesInput`](crate::input::DescribeCustomAvailabilityZonesInput)
    pub fn builder() -> crate::input::describe_custom_availability_zones_input::Builder {
        crate::input::describe_custom_availability_zones_input::Builder::default()
    }
}

/// See [`DescribeDBClusterBacktracksInput`](crate::input::DescribeDBClusterBacktracksInput)
pub mod describe_db_cluster_backtracks_input {
    /// A builder for [`DescribeDBClusterBacktracksInput`](crate::input::DescribeDBClusterBacktracksInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) backtrack_identifier: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The DB cluster identifier of the DB cluster to be described. This parameter is
        /// stored as a lowercase string.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-cluster1</code>
        /// </p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>If specified, this value is the backtrack identifier of the backtrack to be
        /// described.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain a valid universally unique identifier (UUID). For more
        /// information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier
        /// (UUID) URN Namespace</a>.</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code>
        /// </p>
        pub fn backtrack_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.backtrack_identifier = Some(input.into());
            self
        }
        pub fn set_backtrack_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.backtrack_identifier = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p> An optional pagination token provided by a previous
        /// <code>DescribeDBClusterBacktracks</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBClusterBacktracksInput`](crate::input::DescribeDBClusterBacktracksInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBClusterBacktracksInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBClusterBacktracksInput {
                db_cluster_identifier: self.db_cluster_identifier,
                backtrack_identifier: self.backtrack_identifier,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBClusterBacktracksInputOperationOutputAlias =
    crate::operation::DescribeDBClusterBacktracks;
#[doc(hidden)]
pub type DescribeDBClusterBacktracksInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBClusterBacktracksInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBClusterBacktracks`](crate::operation::DescribeDBClusterBacktracks)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBClusterBacktracks,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_db_cluster_backtracks(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBClusterBacktracks::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBClusterBacktracks",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterBacktracksInput`](crate::input::DescribeDBClusterBacktracksInput)
    pub fn builder() -> crate::input::describe_db_cluster_backtracks_input::Builder {
        crate::input::describe_db_cluster_backtracks_input::Builder::default()
    }
}

/// See [`DescribeDBClusterEndpointsInput`](crate::input::DescribeDBClusterEndpointsInput)
pub mod describe_db_cluster_endpoints_input {
    /// A builder for [`DescribeDBClusterEndpointsInput`](crate::input::DescribeDBClusterEndpointsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) db_cluster_endpoint_identifier: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is
        /// stored as a lowercase string.</p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>The identifier of the endpoint to describe. This parameter is stored as a lowercase string.</p>
        pub fn db_cluster_endpoint_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_endpoint_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_identifier = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p> An optional pagination token provided by a previous
        /// <code>DescribeDBClusterEndpoints</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBClusterEndpointsInput`](crate::input::DescribeDBClusterEndpointsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBClusterEndpointsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBClusterEndpointsInput {
                db_cluster_identifier: self.db_cluster_identifier,
                db_cluster_endpoint_identifier: self.db_cluster_endpoint_identifier,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBClusterEndpointsInputOperationOutputAlias =
    crate::operation::DescribeDBClusterEndpoints;
#[doc(hidden)]
pub type DescribeDBClusterEndpointsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBClusterEndpointsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBClusterEndpoints`](crate::operation::DescribeDBClusterEndpoints)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBClusterEndpoints,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_db_cluster_endpoints(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBClusterEndpoints::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBClusterEndpoints",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterEndpointsInput`](crate::input::DescribeDBClusterEndpointsInput)
    pub fn builder() -> crate::input::describe_db_cluster_endpoints_input::Builder {
        crate::input::describe_db_cluster_endpoints_input::Builder::default()
    }
}

/// See [`DescribeDBClusterParameterGroupsInput`](crate::input::DescribeDBClusterParameterGroupsInput)
pub mod describe_db_cluster_parameter_groups_input {
    /// A builder for [`DescribeDBClusterParameterGroupsInput`](crate::input::DescribeDBClusterParameterGroupsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of a specific DB cluster parameter group to return details for.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p>
        /// </li>
        /// </ul>
        pub fn db_cluster_parameter_group_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_cluster_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// <code>DescribeDBClusterParameterGroups</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBClusterParameterGroupsInput`](crate::input::DescribeDBClusterParameterGroupsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBClusterParameterGroupsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBClusterParameterGroupsInput {
                db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBClusterParameterGroupsInputOperationOutputAlias =
    crate::operation::DescribeDBClusterParameterGroups;
#[doc(hidden)]
pub type DescribeDBClusterParameterGroupsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBClusterParameterGroupsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBClusterParameterGroups`](crate::operation::DescribeDBClusterParameterGroups)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBClusterParameterGroups,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_db_cluster_parameter_groups(
                    &self,
                )
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBClusterParameterGroups::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBClusterParameterGroups",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterParameterGroupsInput`](crate::input::DescribeDBClusterParameterGroupsInput)
    pub fn builder() -> crate::input::describe_db_cluster_parameter_groups_input::Builder {
        crate::input::describe_db_cluster_parameter_groups_input::Builder::default()
    }
}

/// See [`DescribeDBClusterParametersInput`](crate::input::DescribeDBClusterParametersInput)
pub mod describe_db_cluster_parameters_input {
    /// A builder for [`DescribeDBClusterParametersInput`](crate::input::DescribeDBClusterParametersInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) source: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of a specific DB cluster parameter group to return parameter details for.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p>
        /// </li>
        /// </ul>
        pub fn db_cluster_parameter_group_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_cluster_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = input;
            self
        }
        /// <p>
        /// A value that indicates to return only parameters for a specific source.
        /// Parameter sources can be <code>engine</code>, <code>service</code>,
        /// or <code>customer</code>.
        /// </p>
        pub fn source(mut self, input: impl Into<std::string::String>) -> Self {
            self.source = Some(input.into());
            self
        }
        pub fn set_source(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.source = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// <code>DescribeDBClusterParameters</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBClusterParametersInput`](crate::input::DescribeDBClusterParametersInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBClusterParametersInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBClusterParametersInput {
                db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
                source: self.source,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBClusterParametersInputOperationOutputAlias =
    crate::operation::DescribeDBClusterParameters;
#[doc(hidden)]
pub type DescribeDBClusterParametersInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBClusterParametersInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBClusterParameters`](crate::operation::DescribeDBClusterParameters)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBClusterParameters,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_db_cluster_parameters(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBClusterParameters::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBClusterParameters",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterParametersInput`](crate::input::DescribeDBClusterParametersInput)
    pub fn builder() -> crate::input::describe_db_cluster_parameters_input::Builder {
        crate::input::describe_db_cluster_parameters_input::Builder::default()
    }
}

/// See [`DescribeDBClustersInput`](crate::input::DescribeDBClustersInput)
pub mod describe_db_clusters_input {
    /// A builder for [`DescribeDBClustersInput`](crate::input::DescribeDBClustersInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) include_shared: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match an existing DBClusterIdentifier.</p>
        /// </li>
        /// </ul>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>An optional pagination token provided by a previous
        /// <code>DescribeDBClusters</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// <p>Optional Boolean parameter that specifies whether the output includes information about clusters
        /// shared from other AWS accounts.</p>
        pub fn include_shared(mut self, input: bool) -> Self {
            self.include_shared = Some(input);
            self
        }
        pub fn set_include_shared(mut self, input: std::option::Option<bool>) -> Self {
            self.include_shared = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBClustersInput`](crate::input::DescribeDBClustersInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBClustersInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBClustersInput {
                db_cluster_identifier: self.db_cluster_identifier,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
                include_shared: self.include_shared.unwrap_or_default(),
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBClustersInputOperationOutputAlias = crate::operation::DescribeDBClusters;
#[doc(hidden)]
pub type DescribeDBClustersInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBClustersInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBClusters`](crate::operation::DescribeDBClusters)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBClusters,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_db_clusters(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBClusters::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBClusters",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBClustersInput`](crate::input::DescribeDBClustersInput)
    pub fn builder() -> crate::input::describe_db_clusters_input::Builder {
        crate::input::describe_db_clusters_input::Builder::default()
    }
}

/// See [`DescribeDBClusterSnapshotAttributesInput`](crate::input::DescribeDBClusterSnapshotAttributesInput)
pub mod describe_db_cluster_snapshot_attributes_input {
    /// A builder for [`DescribeDBClusterSnapshotAttributesInput`](crate::input::DescribeDBClusterSnapshotAttributesInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier for the DB cluster snapshot to describe the attributes for.</p>
        pub fn db_cluster_snapshot_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_snapshot_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBClusterSnapshotAttributesInput`](crate::input::DescribeDBClusterSnapshotAttributesInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBClusterSnapshotAttributesInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBClusterSnapshotAttributesInput {
                db_cluster_snapshot_identifier: self.db_cluster_snapshot_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBClusterSnapshotAttributesInputOperationOutputAlias =
    crate::operation::DescribeDBClusterSnapshotAttributes;
#[doc(hidden)]
pub type DescribeDBClusterSnapshotAttributesInputOperationRetryAlias =
    aws_http::AwsErrorRetryPolicy;
impl DescribeDBClusterSnapshotAttributesInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBClusterSnapshotAttributes`](crate::operation::DescribeDBClusterSnapshotAttributes)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBClusterSnapshotAttributes,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_db_cluster_snapshot_attributes(
                    &self,
                )
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBClusterSnapshotAttributes::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBClusterSnapshotAttributes",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterSnapshotAttributesInput`](crate::input::DescribeDBClusterSnapshotAttributesInput)
    pub fn builder() -> crate::input::describe_db_cluster_snapshot_attributes_input::Builder {
        crate::input::describe_db_cluster_snapshot_attributes_input::Builder::default()
    }
}

/// See [`DescribeDBClusterSnapshotsInput`](crate::input::DescribeDBClusterSnapshotsInput)
pub mod describe_db_cluster_snapshots_input {
    /// A builder for [`DescribeDBClusterSnapshotsInput`](crate::input::DescribeDBClusterSnapshotsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
        pub(crate) snapshot_type: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) include_shared: std::option::Option<bool>,
        pub(crate) include_public: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for.
        /// This parameter can't be used in conjunction with the
        /// <code>DBClusterSnapshotIdentifier</code> parameter.
        /// This parameter isn't case-sensitive.
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match the identifier of an existing DBCluster.</p>
        /// </li>
        /// </ul>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>A specific DB cluster snapshot identifier to describe.
        /// This parameter can't be used in conjunction with the
        /// <code>DBClusterIdentifier</code> parameter.            
        /// This value is stored as a lowercase string.
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p>
        /// </li>
        /// <li>
        /// <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p>
        /// </li>
        /// </ul>
        pub fn db_cluster_snapshot_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_snapshot_identifier = input;
            self
        }
        /// <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by
        /// Amazon RDS for my AWS account.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p>
        /// </li>
        /// </ul>
        /// <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are
        /// returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code>
        /// parameter. You can include public DB cluster snapshots with these results by enabling the
        /// <code>IncludePublic</code> parameter.</p>
        /// <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values
        /// of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is
        /// set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to
        /// <code>public</code>.</p>
        pub fn snapshot_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.snapshot_type = Some(input.into());
            self
        }
        pub fn set_snapshot_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.snapshot_type = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>An optional pagination token provided by a previous
        /// <code>DescribeDBClusterSnapshots</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// <p>A value that indicates whether to include shared manual DB cluster snapshots
        /// from other AWS accounts that this AWS account has been given
        /// permission to copy or restore. By default, these snapshots are not included.</p>
        /// <p>You can give an AWS account permission to restore a manual DB cluster snapshot from
        /// another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
        pub fn include_shared(mut self, input: bool) -> Self {
            self.include_shared = Some(input);
            self
        }
        pub fn set_include_shared(mut self, input: std::option::Option<bool>) -> Self {
            self.include_shared = input;
            self
        }
        /// <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied
        /// or restored by any AWS account. By default, the public snapshots are not included.</p>
        /// <p>You can share a manual DB cluster snapshot  as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
        pub fn include_public(mut self, input: bool) -> Self {
            self.include_public = Some(input);
            self
        }
        pub fn set_include_public(mut self, input: std::option::Option<bool>) -> Self {
            self.include_public = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBClusterSnapshotsInput`](crate::input::DescribeDBClusterSnapshotsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBClusterSnapshotsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBClusterSnapshotsInput {
                db_cluster_identifier: self.db_cluster_identifier,
                db_cluster_snapshot_identifier: self.db_cluster_snapshot_identifier,
                snapshot_type: self.snapshot_type,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
                include_shared: self.include_shared.unwrap_or_default(),
                include_public: self.include_public.unwrap_or_default(),
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBClusterSnapshotsInputOperationOutputAlias =
    crate::operation::DescribeDBClusterSnapshots;
#[doc(hidden)]
pub type DescribeDBClusterSnapshotsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBClusterSnapshotsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBClusterSnapshots`](crate::operation::DescribeDBClusterSnapshots)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBClusterSnapshots,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_db_cluster_snapshots(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBClusterSnapshots::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBClusterSnapshots",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBClusterSnapshotsInput`](crate::input::DescribeDBClusterSnapshotsInput)
    pub fn builder() -> crate::input::describe_db_cluster_snapshots_input::Builder {
        crate::input::describe_db_cluster_snapshots_input::Builder::default()
    }
}

/// See [`DescribeDBEngineVersionsInput`](crate::input::DescribeDBEngineVersionsInput)
pub mod describe_db_engine_versions_input {
    /// A builder for [`DescribeDBEngineVersionsInput`](crate::input::DescribeDBEngineVersionsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) engine: std::option::Option<std::string::String>,
        pub(crate) engine_version: std::option::Option<std::string::String>,
        pub(crate) db_parameter_group_family: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) default_only: std::option::Option<bool>,
        pub(crate) list_supported_character_sets: std::option::Option<bool>,
        pub(crate) list_supported_timezones: std::option::Option<bool>,
        pub(crate) include_all: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The database engine to return.</p>
        /// <p>Valid Values:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>aurora-postgresql</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>mariadb</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>mysql</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se2</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se1</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>postgres</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ex</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-web</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine = Some(input.into());
            self
        }
        pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine = input;
            self
        }
        /// <p>The database engine version to return.</p>
        /// <p>Example: <code>5.1.49</code>
        /// </p>
        pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_version = Some(input.into());
            self
        }
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_version = input;
            self
        }
        /// <p>The name of a specific DB parameter group family to return details for.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match an existing DBParameterGroupFamily.</p>
        /// </li>
        /// </ul>
        pub fn db_parameter_group_family(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_family = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_family(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_family = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is
        /// included in the response so you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// <p>A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.</p>
        pub fn default_only(mut self, input: bool) -> Self {
            self.default_only = Some(input);
            self
        }
        pub fn set_default_only(mut self, input: std::option::Option<bool>) -> Self {
            self.default_only = input;
            self
        }
        /// <p>A value that indicates whether to list the supported character sets for each engine version.</p>
        /// <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>,
        /// the response includes a list of supported character sets for each engine version.
        /// </p>
        pub fn list_supported_character_sets(mut self, input: bool) -> Self {
            self.list_supported_character_sets = Some(input);
            self
        }
        pub fn set_list_supported_character_sets(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.list_supported_character_sets = input;
            self
        }
        /// <p>A value that indicates whether to list the supported time zones for each engine version.</p>
        /// <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>,
        /// the response includes a list of supported time zones for each engine version.
        /// </p>
        pub fn list_supported_timezones(mut self, input: bool) -> Self {
            self.list_supported_timezones = Some(input);
            self
        }
        pub fn set_list_supported_timezones(mut self, input: std::option::Option<bool>) -> Self {
            self.list_supported_timezones = input;
            self
        }
        /// <p>A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.</p>
        pub fn include_all(mut self, input: bool) -> Self {
            self.include_all = Some(input);
            self
        }
        pub fn set_include_all(mut self, input: std::option::Option<bool>) -> Self {
            self.include_all = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBEngineVersionsInput`](crate::input::DescribeDBEngineVersionsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBEngineVersionsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBEngineVersionsInput {
                engine: self.engine,
                engine_version: self.engine_version,
                db_parameter_group_family: self.db_parameter_group_family,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
                default_only: self.default_only.unwrap_or_default(),
                list_supported_character_sets: self.list_supported_character_sets,
                list_supported_timezones: self.list_supported_timezones,
                include_all: self.include_all,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBEngineVersionsInputOperationOutputAlias =
    crate::operation::DescribeDBEngineVersions;
#[doc(hidden)]
pub type DescribeDBEngineVersionsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBEngineVersionsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBEngineVersions`](crate::operation::DescribeDBEngineVersions)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBEngineVersions,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_db_engine_versions(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBEngineVersions::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBEngineVersions",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBEngineVersionsInput`](crate::input::DescribeDBEngineVersionsInput)
    pub fn builder() -> crate::input::describe_db_engine_versions_input::Builder {
        crate::input::describe_db_engine_versions_input::Builder::default()
    }
}

/// See [`DescribeDBInstanceAutomatedBackupsInput`](crate::input::DescribeDBInstanceAutomatedBackupsInput)
pub mod describe_db_instance_automated_backups_input {
    /// A builder for [`DescribeDBInstanceAutomatedBackupsInput`](crate::input::DescribeDBInstanceAutomatedBackupsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dbi_resource_id: std::option::Option<std::string::String>,
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) db_instance_automated_backups_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The resource ID of the DB instance that is the source of
        /// the automated backup. This parameter isn't case-sensitive. </p>
        pub fn dbi_resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.dbi_resource_id = Some(input.into());
            self
        }
        pub fn set_dbi_resource_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.dbi_resource_id = input;
            self
        }
        /// <p>(Optional) The user-supplied instance identifier. If this parameter is specified, it must
        /// match the identifier of an existing DB instance. It returns information from the
        /// specific DB instance' automated backup. This parameter isn't case-sensitive. </p>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>The maximum number of records to include in the response. If more records exist than the specified
        /// <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that
        /// you can retrieve the remaining results.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>The pagination token provided in the previous request. If this parameter is specified the response
        /// includes only records beyond the marker, up to <code>MaxRecords</code>.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the replicated automated backups, for example,
        /// <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
        pub fn db_instance_automated_backups_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_instance_automated_backups_arn = Some(input.into());
            self
        }
        pub fn set_db_instance_automated_backups_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_automated_backups_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBInstanceAutomatedBackupsInput`](crate::input::DescribeDBInstanceAutomatedBackupsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBInstanceAutomatedBackupsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBInstanceAutomatedBackupsInput {
                dbi_resource_id: self.dbi_resource_id,
                db_instance_identifier: self.db_instance_identifier,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
                db_instance_automated_backups_arn: self.db_instance_automated_backups_arn,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBInstanceAutomatedBackupsInputOperationOutputAlias =
    crate::operation::DescribeDBInstanceAutomatedBackups;
#[doc(hidden)]
pub type DescribeDBInstanceAutomatedBackupsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBInstanceAutomatedBackupsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBInstanceAutomatedBackups`](crate::operation::DescribeDBInstanceAutomatedBackups)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBInstanceAutomatedBackups,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_db_instance_automated_backups(
                    &self,
                )
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBInstanceAutomatedBackups::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBInstanceAutomatedBackups",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBInstanceAutomatedBackupsInput`](crate::input::DescribeDBInstanceAutomatedBackupsInput)
    pub fn builder() -> crate::input::describe_db_instance_automated_backups_input::Builder {
        crate::input::describe_db_instance_automated_backups_input::Builder::default()
    }
}

/// See [`DescribeDBInstancesInput`](crate::input::DescribeDBInstancesInput)
pub mod describe_db_instances_input {
    /// A builder for [`DescribeDBInstancesInput`](crate::input::DescribeDBInstancesInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match the identifier of an existing DBInstance.</p>
        /// </li>
        /// </ul>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so that
        /// you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// <code>DescribeDBInstances</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBInstancesInput`](crate::input::DescribeDBInstancesInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBInstancesInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBInstancesInput {
                db_instance_identifier: self.db_instance_identifier,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBInstancesInputOperationOutputAlias = crate::operation::DescribeDBInstances;
#[doc(hidden)]
pub type DescribeDBInstancesInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBInstancesInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBInstances`](crate::operation::DescribeDBInstances)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBInstances,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_db_instances(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBInstances::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBInstances",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBInstancesInput`](crate::input::DescribeDBInstancesInput)
    pub fn builder() -> crate::input::describe_db_instances_input::Builder {
        crate::input::describe_db_instances_input::Builder::default()
    }
}

/// See [`DescribeDBLogFilesInput`](crate::input::DescribeDBLogFilesInput)
pub mod describe_db_log_files_input {
    /// A builder for [`DescribeDBLogFilesInput`](crate::input::DescribeDBLogFilesInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) filename_contains: std::option::Option<std::string::String>,
        pub(crate) file_last_written: std::option::Option<i64>,
        pub(crate) file_size: std::option::Option<i64>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the identifier of an existing DBInstance.</p>
        /// </li>
        /// </ul>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        /// <p>Filters the available log files for log file names that contain the specified string.</p>
        pub fn filename_contains(mut self, input: impl Into<std::string::String>) -> Self {
            self.filename_contains = Some(input.into());
            self
        }
        pub fn set_filename_contains(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.filename_contains = input;
            self
        }
        /// <p>Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.</p>
        pub fn file_last_written(mut self, input: i64) -> Self {
            self.file_last_written = Some(input);
            self
        }
        pub fn set_file_last_written(mut self, input: std::option::Option<i64>) -> Self {
            self.file_last_written = input;
            self
        }
        /// <p>Filters the available log files for files larger than the specified size.</p>
        pub fn file_size(mut self, input: i64) -> Self {
            self.file_size = Some(input);
            self
        }
        pub fn set_file_size(mut self, input: std::option::Option<i64>) -> Self {
            self.file_size = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBLogFilesInput`](crate::input::DescribeDBLogFilesInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBLogFilesInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBLogFilesInput {
                db_instance_identifier: self.db_instance_identifier,
                filename_contains: self.filename_contains,
                file_last_written: self.file_last_written.unwrap_or_default(),
                file_size: self.file_size.unwrap_or_default(),
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBLogFilesInputOperationOutputAlias = crate::operation::DescribeDBLogFiles;
#[doc(hidden)]
pub type DescribeDBLogFilesInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBLogFilesInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBLogFiles`](crate::operation::DescribeDBLogFiles)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBLogFiles,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_db_log_files(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBLogFiles::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBLogFiles",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBLogFilesInput`](crate::input::DescribeDBLogFilesInput)
    pub fn builder() -> crate::input::describe_db_log_files_input::Builder {
        crate::input::describe_db_log_files_input::Builder::default()
    }
}

/// See [`DescribeDBParameterGroupsInput`](crate::input::DescribeDBParameterGroupsInput)
pub mod describe_db_parameter_groups_input {
    /// A builder for [`DescribeDBParameterGroupsInput`](crate::input::DescribeDBParameterGroupsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of a specific DB parameter group to return details for.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p>
        /// </li>
        /// </ul>
        pub fn db_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_name = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so that
        /// you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// <code>DescribeDBParameterGroups</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBParameterGroupsInput`](crate::input::DescribeDBParameterGroupsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBParameterGroupsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBParameterGroupsInput {
                db_parameter_group_name: self.db_parameter_group_name,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBParameterGroupsInputOperationOutputAlias =
    crate::operation::DescribeDBParameterGroups;
#[doc(hidden)]
pub type DescribeDBParameterGroupsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBParameterGroupsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBParameterGroups`](crate::operation::DescribeDBParameterGroups)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBParameterGroups,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_db_parameter_groups(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBParameterGroups::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBParameterGroups",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBParameterGroupsInput`](crate::input::DescribeDBParameterGroupsInput)
    pub fn builder() -> crate::input::describe_db_parameter_groups_input::Builder {
        crate::input::describe_db_parameter_groups_input::Builder::default()
    }
}

/// See [`DescribeDBParametersInput`](crate::input::DescribeDBParametersInput)
pub mod describe_db_parameters_input {
    /// A builder for [`DescribeDBParametersInput`](crate::input::DescribeDBParametersInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) source: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of a specific DB parameter group to return details for.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match the name of an existing DBParameterGroup.</p>
        /// </li>
        /// </ul>
        pub fn db_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_name = input;
            self
        }
        /// <p>The parameter types to return.</p>
        /// <p>Default: All parameter types returned</p>
        /// <p>Valid Values: <code>user | system | engine-default</code>
        /// </p>
        pub fn source(mut self, input: impl Into<std::string::String>) -> Self {
            self.source = Some(input.into());
            self
        }
        pub fn set_source(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.source = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so that
        /// you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// <code>DescribeDBParameters</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBParametersInput`](crate::input::DescribeDBParametersInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBParametersInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBParametersInput {
                db_parameter_group_name: self.db_parameter_group_name,
                source: self.source,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBParametersInputOperationOutputAlias = crate::operation::DescribeDBParameters;
#[doc(hidden)]
pub type DescribeDBParametersInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBParametersInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBParameters`](crate::operation::DescribeDBParameters)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBParameters,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_db_parameters(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBParameters::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBParameters",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBParametersInput`](crate::input::DescribeDBParametersInput)
    pub fn builder() -> crate::input::describe_db_parameters_input::Builder {
        crate::input::describe_db_parameters_input::Builder::default()
    }
}

/// See [`DescribeDBProxiesInput`](crate::input::DescribeDBProxiesInput)
pub mod describe_db_proxies_input {
    /// A builder for [`DescribeDBProxiesInput`](crate::input::DescribeDBProxiesInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_name: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) max_records: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The name of the DB proxy. If you omit this parameter,
        /// the output includes information about all DB proxies owned by
        /// your AWS account ID.</p>
        pub fn db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_proxy_name = Some(input.into());
            self
        }
        pub fn set_db_proxy_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_proxy_name = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// <p>The maximum number of records to include in the response. If more records exist
        /// than the specified <code>MaxRecords</code> value, a pagination token called a marker is
        /// included in the response so that the remaining results can be retrieved. </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBProxiesInput`](crate::input::DescribeDBProxiesInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBProxiesInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBProxiesInput {
                db_proxy_name: self.db_proxy_name,
                filters: self.filters,
                marker: self.marker,
                max_records: self.max_records,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBProxiesInputOperationOutputAlias = crate::operation::DescribeDBProxies;
#[doc(hidden)]
pub type DescribeDBProxiesInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBProxiesInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBProxies`](crate::operation::DescribeDBProxies)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBProxies,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_db_proxies(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBProxies::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBProxies",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBProxiesInput`](crate::input::DescribeDBProxiesInput)
    pub fn builder() -> crate::input::describe_db_proxies_input::Builder {
        crate::input::describe_db_proxies_input::Builder::default()
    }
}

/// See [`DescribeDBProxyEndpointsInput`](crate::input::DescribeDBProxyEndpointsInput)
pub mod describe_db_proxy_endpoints_input {
    /// A builder for [`DescribeDBProxyEndpointsInput`](crate::input::DescribeDBProxyEndpointsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_name: std::option::Option<std::string::String>,
        pub(crate) db_proxy_endpoint_name: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) max_records: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The name of the DB proxy whose endpoints you want to describe. If you omit
        /// this parameter, the output includes information about all DB proxy endpoints
        /// associated with all your DB proxies.</p>
        pub fn db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_proxy_name = Some(input.into());
            self
        }
        pub fn set_db_proxy_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_proxy_name = input;
            self
        }
        /// <p>The name of a DB proxy endpoint to describe. If you omit this parameter,
        /// the output includes information about all DB proxy endpoints associated with
        /// the specified proxy.</p>
        pub fn db_proxy_endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_proxy_endpoint_name = Some(input.into());
            self
        }
        pub fn set_db_proxy_endpoint_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_proxy_endpoint_name = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// <p>The maximum number of records to include in the response. If more records exist
        /// than the specified <code>MaxRecords</code> value, a pagination token called a marker is
        /// included in the response so that the remaining results can be retrieved. </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBProxyEndpointsInput`](crate::input::DescribeDBProxyEndpointsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBProxyEndpointsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBProxyEndpointsInput {
                db_proxy_name: self.db_proxy_name,
                db_proxy_endpoint_name: self.db_proxy_endpoint_name,
                filters: self.filters,
                marker: self.marker,
                max_records: self.max_records,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBProxyEndpointsInputOperationOutputAlias =
    crate::operation::DescribeDBProxyEndpoints;
#[doc(hidden)]
pub type DescribeDBProxyEndpointsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBProxyEndpointsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBProxyEndpoints`](crate::operation::DescribeDBProxyEndpoints)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBProxyEndpoints,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_db_proxy_endpoints(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBProxyEndpoints::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBProxyEndpoints",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBProxyEndpointsInput`](crate::input::DescribeDBProxyEndpointsInput)
    pub fn builder() -> crate::input::describe_db_proxy_endpoints_input::Builder {
        crate::input::describe_db_proxy_endpoints_input::Builder::default()
    }
}

/// See [`DescribeDBProxyTargetGroupsInput`](crate::input::DescribeDBProxyTargetGroupsInput)
pub mod describe_db_proxy_target_groups_input {
    /// A builder for [`DescribeDBProxyTargetGroupsInput`](crate::input::DescribeDBProxyTargetGroupsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_name: std::option::Option<std::string::String>,
        pub(crate) target_group_name: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) max_records: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The identifier of the <code>DBProxy</code> associated with the target group.</p>
        pub fn db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_proxy_name = Some(input.into());
            self
        }
        pub fn set_db_proxy_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_proxy_name = input;
            self
        }
        /// <p>The identifier of the <code>DBProxyTargetGroup</code> to describe.</p>
        pub fn target_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.target_group_name = Some(input.into());
            self
        }
        pub fn set_target_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_group_name = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so that the remaining
        /// results can be retrieved.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBProxyTargetGroupsInput`](crate::input::DescribeDBProxyTargetGroupsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBProxyTargetGroupsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBProxyTargetGroupsInput {
                db_proxy_name: self.db_proxy_name,
                target_group_name: self.target_group_name,
                filters: self.filters,
                marker: self.marker,
                max_records: self.max_records,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBProxyTargetGroupsInputOperationOutputAlias =
    crate::operation::DescribeDBProxyTargetGroups;
#[doc(hidden)]
pub type DescribeDBProxyTargetGroupsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBProxyTargetGroupsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBProxyTargetGroups`](crate::operation::DescribeDBProxyTargetGroups)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBProxyTargetGroups,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_db_proxy_target_groups(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBProxyTargetGroups::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBProxyTargetGroups",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBProxyTargetGroupsInput`](crate::input::DescribeDBProxyTargetGroupsInput)
    pub fn builder() -> crate::input::describe_db_proxy_target_groups_input::Builder {
        crate::input::describe_db_proxy_target_groups_input::Builder::default()
    }
}

/// See [`DescribeDBProxyTargetsInput`](crate::input::DescribeDBProxyTargetsInput)
pub mod describe_db_proxy_targets_input {
    /// A builder for [`DescribeDBProxyTargetsInput`](crate::input::DescribeDBProxyTargetsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_name: std::option::Option<std::string::String>,
        pub(crate) target_group_name: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) max_records: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The identifier of the <code>DBProxyTarget</code> to describe.</p>
        pub fn db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_proxy_name = Some(input.into());
            self
        }
        pub fn set_db_proxy_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_proxy_name = input;
            self
        }
        /// <p>The identifier of the <code>DBProxyTargetGroup</code> to describe.</p>
        pub fn target_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.target_group_name = Some(input.into());
            self
        }
        pub fn set_target_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_group_name = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so that the remaining
        /// results can be retrieved.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBProxyTargetsInput`](crate::input::DescribeDBProxyTargetsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBProxyTargetsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBProxyTargetsInput {
                db_proxy_name: self.db_proxy_name,
                target_group_name: self.target_group_name,
                filters: self.filters,
                marker: self.marker,
                max_records: self.max_records,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBProxyTargetsInputOperationOutputAlias = crate::operation::DescribeDBProxyTargets;
#[doc(hidden)]
pub type DescribeDBProxyTargetsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBProxyTargetsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBProxyTargets`](crate::operation::DescribeDBProxyTargets)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBProxyTargets,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_db_proxy_targets(&self)
                .map_err(|err| {
                smithy_http::operation::BuildError::SerializationError(err.into())
            })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBProxyTargets::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBProxyTargets",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBProxyTargetsInput`](crate::input::DescribeDBProxyTargetsInput)
    pub fn builder() -> crate::input::describe_db_proxy_targets_input::Builder {
        crate::input::describe_db_proxy_targets_input::Builder::default()
    }
}

/// See [`DescribeDBSecurityGroupsInput`](crate::input::DescribeDBSecurityGroupsInput)
pub mod describe_db_security_groups_input {
    /// A builder for [`DescribeDBSecurityGroupsInput`](crate::input::DescribeDBSecurityGroupsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_security_group_name: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB security group to return details for.</p>
        pub fn db_security_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_security_group_name = Some(input.into());
            self
        }
        pub fn set_db_security_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_security_group_name = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so that
        /// you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// <code>DescribeDBSecurityGroups</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBSecurityGroupsInput`](crate::input::DescribeDBSecurityGroupsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBSecurityGroupsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBSecurityGroupsInput {
                db_security_group_name: self.db_security_group_name,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBSecurityGroupsInputOperationOutputAlias =
    crate::operation::DescribeDBSecurityGroups;
#[doc(hidden)]
pub type DescribeDBSecurityGroupsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBSecurityGroupsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBSecurityGroups`](crate::operation::DescribeDBSecurityGroups)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBSecurityGroups,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_db_security_groups(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBSecurityGroups::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBSecurityGroups",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBSecurityGroupsInput`](crate::input::DescribeDBSecurityGroupsInput)
    pub fn builder() -> crate::input::describe_db_security_groups_input::Builder {
        crate::input::describe_db_security_groups_input::Builder::default()
    }
}

/// See [`DescribeDBSnapshotAttributesInput`](crate::input::DescribeDBSnapshotAttributesInput)
pub mod describe_db_snapshot_attributes_input {
    /// A builder for [`DescribeDBSnapshotAttributesInput`](crate::input::DescribeDBSnapshotAttributesInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_snapshot_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier for the DB snapshot to describe the attributes for.</p>
        pub fn db_snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_db_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_snapshot_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBSnapshotAttributesInput`](crate::input::DescribeDBSnapshotAttributesInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBSnapshotAttributesInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBSnapshotAttributesInput {
                db_snapshot_identifier: self.db_snapshot_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBSnapshotAttributesInputOperationOutputAlias =
    crate::operation::DescribeDBSnapshotAttributes;
#[doc(hidden)]
pub type DescribeDBSnapshotAttributesInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBSnapshotAttributesInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBSnapshotAttributes`](crate::operation::DescribeDBSnapshotAttributes)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBSnapshotAttributes,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_db_snapshot_attributes(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBSnapshotAttributes::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBSnapshotAttributes",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBSnapshotAttributesInput`](crate::input::DescribeDBSnapshotAttributesInput)
    pub fn builder() -> crate::input::describe_db_snapshot_attributes_input::Builder {
        crate::input::describe_db_snapshot_attributes_input::Builder::default()
    }
}

/// See [`DescribeDBSnapshotsInput`](crate::input::DescribeDBSnapshotsInput)
pub mod describe_db_snapshots_input {
    /// A builder for [`DescribeDBSnapshotsInput`](crate::input::DescribeDBSnapshotsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) db_snapshot_identifier: std::option::Option<std::string::String>,
        pub(crate) snapshot_type: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) include_shared: std::option::Option<bool>,
        pub(crate) include_public: std::option::Option<bool>,
        pub(crate) dbi_resource_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the DB instance to retrieve the list of DB snapshots for.
        /// This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>.
        /// This parameter isn't case-sensitive.
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match the identifier of an existing DBInstance.</p>
        /// </li>
        /// </ul>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        /// <p>
        /// A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>.            
        /// This value is stored as a lowercase string.
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match the identifier of an existing DBSnapshot.</p>
        /// </li>
        /// <li>
        /// <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p>
        /// </li>
        /// </ul>
        pub fn db_snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_db_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_snapshot_identifier = input;
            self
        }
        /// <p>The type of snapshots to be returned. You can specify one of the following values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>automated</code> - Return all DB snapshots that have been automatically taken by
        /// Amazon RDS for my AWS account.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>public</code> - Return all DB snapshots that have been marked as public.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p>
        /// <p>For information about AWS Backup, see the
        /// <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html">
        /// <i>AWS Backup Developer Guide.</i>
        /// </a>
        /// </p>
        /// <p>The <code>awsbackup</code> type does not apply to Aurora.</p>
        /// </li>
        /// </ul>
        /// <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are
        /// returned. Shared and public DB snapshots are not included in the returned results by default.
        /// You can include shared snapshots with these results by enabling the <code>IncludeShared</code>
        /// parameter. You can include public snapshots with these results by enabling the
        /// <code>IncludePublic</code> parameter.</p>
        /// <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values
        /// of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is
        /// set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to
        /// <code>public</code>.</p>
        pub fn snapshot_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.snapshot_type = Some(input.into());
            self
        }
        pub fn set_snapshot_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.snapshot_type = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so that
        /// you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// <code>DescribeDBSnapshots</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// <p>A value that indicates whether to include shared manual DB cluster snapshots
        /// from other AWS accounts that this AWS account has been given
        /// permission to copy or restore. By default, these snapshots are not included.</p>
        /// <p>You can give an AWS account permission to restore a manual DB snapshot from
        /// another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
        pub fn include_shared(mut self, input: bool) -> Self {
            self.include_shared = Some(input);
            self
        }
        pub fn set_include_shared(mut self, input: std::option::Option<bool>) -> Self {
            self.include_shared = input;
            self
        }
        /// <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied
        /// or restored by any AWS account. By default, the public snapshots are not included.</p>
        /// <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
        pub fn include_public(mut self, input: bool) -> Self {
            self.include_public = Some(input);
            self
        }
        pub fn set_include_public(mut self, input: std::option::Option<bool>) -> Self {
            self.include_public = input;
            self
        }
        /// <p>A specific DB resource ID to describe.</p>
        pub fn dbi_resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.dbi_resource_id = Some(input.into());
            self
        }
        pub fn set_dbi_resource_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.dbi_resource_id = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBSnapshotsInput`](crate::input::DescribeDBSnapshotsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBSnapshotsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBSnapshotsInput {
                db_instance_identifier: self.db_instance_identifier,
                db_snapshot_identifier: self.db_snapshot_identifier,
                snapshot_type: self.snapshot_type,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
                include_shared: self.include_shared.unwrap_or_default(),
                include_public: self.include_public.unwrap_or_default(),
                dbi_resource_id: self.dbi_resource_id,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBSnapshotsInputOperationOutputAlias = crate::operation::DescribeDBSnapshots;
#[doc(hidden)]
pub type DescribeDBSnapshotsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBSnapshotsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBSnapshots`](crate::operation::DescribeDBSnapshots)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBSnapshots,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_db_snapshots(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBSnapshots::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBSnapshots",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBSnapshotsInput`](crate::input::DescribeDBSnapshotsInput)
    pub fn builder() -> crate::input::describe_db_snapshots_input::Builder {
        crate::input::describe_db_snapshots_input::Builder::default()
    }
}

/// See [`DescribeDBSubnetGroupsInput`](crate::input::DescribeDBSubnetGroupsInput)
pub mod describe_db_subnet_groups_input {
    /// A builder for [`DescribeDBSubnetGroupsInput`](crate::input::DescribeDBSubnetGroupsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB subnet group to return details for.</p>
        pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_subnet_group_name = Some(input.into());
            self
        }
        pub fn set_db_subnet_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_subnet_group_name = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so that
        /// you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous DescribeDBSubnetGroups request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeDBSubnetGroupsInput`](crate::input::DescribeDBSubnetGroupsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeDBSubnetGroupsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeDBSubnetGroupsInput {
                db_subnet_group_name: self.db_subnet_group_name,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeDBSubnetGroupsInputOperationOutputAlias = crate::operation::DescribeDBSubnetGroups;
#[doc(hidden)]
pub type DescribeDBSubnetGroupsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeDBSubnetGroupsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeDBSubnetGroups`](crate::operation::DescribeDBSubnetGroups)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeDBSubnetGroups,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_db_subnet_groups(&self)
                .map_err(|err| {
                smithy_http::operation::BuildError::SerializationError(err.into())
            })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeDBSubnetGroups::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeDBSubnetGroups",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeDBSubnetGroupsInput`](crate::input::DescribeDBSubnetGroupsInput)
    pub fn builder() -> crate::input::describe_db_subnet_groups_input::Builder {
        crate::input::describe_db_subnet_groups_input::Builder::default()
    }
}

/// See [`DescribeEngineDefaultClusterParametersInput`](crate::input::DescribeEngineDefaultClusterParametersInput)
pub mod describe_engine_default_cluster_parameters_input {
    /// A builder for [`DescribeEngineDefaultClusterParametersInput`](crate::input::DescribeEngineDefaultClusterParametersInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_parameter_group_family: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB cluster parameter group family to return engine parameter information for.</p>
        pub fn db_parameter_group_family(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_family = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_family(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_family = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// <code>DescribeEngineDefaultClusterParameters</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEngineDefaultClusterParametersInput`](crate::input::DescribeEngineDefaultClusterParametersInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeEngineDefaultClusterParametersInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeEngineDefaultClusterParametersInput {
                db_parameter_group_family: self.db_parameter_group_family,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeEngineDefaultClusterParametersInputOperationOutputAlias =
    crate::operation::DescribeEngineDefaultClusterParameters;
#[doc(hidden)]
pub type DescribeEngineDefaultClusterParametersInputOperationRetryAlias =
    aws_http::AwsErrorRetryPolicy;
impl DescribeEngineDefaultClusterParametersInput {
    /// Consumes the builder and constructs an Operation<[`DescribeEngineDefaultClusterParameters`](crate::operation::DescribeEngineDefaultClusterParameters)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeEngineDefaultClusterParameters,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_engine_default_cluster_parameters(&self).map_err(|err|smithy_http::operation::BuildError::SerializationError(err.into()))?
            ;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeEngineDefaultClusterParameters::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeEngineDefaultClusterParameters",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeEngineDefaultClusterParametersInput`](crate::input::DescribeEngineDefaultClusterParametersInput)
    pub fn builder() -> crate::input::describe_engine_default_cluster_parameters_input::Builder {
        crate::input::describe_engine_default_cluster_parameters_input::Builder::default()
    }
}

/// See [`DescribeEngineDefaultParametersInput`](crate::input::DescribeEngineDefaultParametersInput)
pub mod describe_engine_default_parameters_input {
    /// A builder for [`DescribeEngineDefaultParametersInput`](crate::input::DescribeEngineDefaultParametersInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_parameter_group_family: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB parameter group family.</p>
        pub fn db_parameter_group_family(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_family = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_family(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_family = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// <code>DescribeEngineDefaultParameters</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEngineDefaultParametersInput`](crate::input::DescribeEngineDefaultParametersInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeEngineDefaultParametersInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeEngineDefaultParametersInput {
                db_parameter_group_family: self.db_parameter_group_family,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeEngineDefaultParametersInputOperationOutputAlias =
    crate::operation::DescribeEngineDefaultParameters;
#[doc(hidden)]
pub type DescribeEngineDefaultParametersInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeEngineDefaultParametersInput {
    /// Consumes the builder and constructs an Operation<[`DescribeEngineDefaultParameters`](crate::operation::DescribeEngineDefaultParameters)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeEngineDefaultParameters,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_engine_default_parameters(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeEngineDefaultParameters::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeEngineDefaultParameters",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeEngineDefaultParametersInput`](crate::input::DescribeEngineDefaultParametersInput)
    pub fn builder() -> crate::input::describe_engine_default_parameters_input::Builder {
        crate::input::describe_engine_default_parameters_input::Builder::default()
    }
}

/// See [`DescribeEventCategoriesInput`](crate::input::DescribeEventCategoriesInput)
pub mod describe_event_categories_input {
    /// A builder for [`DescribeEventCategoriesInput`](crate::input::DescribeEventCategoriesInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) source_type: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    }
    impl Builder {
        /// <p>The type of source that is generating the events.</p>
        /// <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code>
        /// </p>
        pub fn source_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_type = Some(input.into());
            self
        }
        pub fn set_source_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.source_type = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEventCategoriesInput`](crate::input::DescribeEventCategoriesInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeEventCategoriesInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeEventCategoriesInput {
                source_type: self.source_type,
                filters: self.filters,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeEventCategoriesInputOperationOutputAlias =
    crate::operation::DescribeEventCategories;
#[doc(hidden)]
pub type DescribeEventCategoriesInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeEventCategoriesInput {
    /// Consumes the builder and constructs an Operation<[`DescribeEventCategories`](crate::operation::DescribeEventCategories)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeEventCategories,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_event_categories(&self)
                .map_err(|err| {
                smithy_http::operation::BuildError::SerializationError(err.into())
            })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeEventCategories::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeEventCategories",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeEventCategoriesInput`](crate::input::DescribeEventCategoriesInput)
    pub fn builder() -> crate::input::describe_event_categories_input::Builder {
        crate::input::describe_event_categories_input::Builder::default()
    }
}

/// See [`DescribeEventsInput`](crate::input::DescribeEventsInput)
pub mod describe_events_input {
    /// A builder for [`DescribeEventsInput`](crate::input::DescribeEventsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) source_identifier: std::option::Option<std::string::String>,
        pub(crate) source_type: std::option::Option<crate::model::SourceType>,
        pub(crate) start_time: std::option::Option<smithy_types::Instant>,
        pub(crate) end_time: std::option::Option<smithy_types::Instant>,
        pub(crate) duration: std::option::Option<i32>,
        pub(crate) event_categories: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If <code>SourceIdentifier</code> is supplied, <code>SourceType</code> must also be provided.</p>
        /// </li>
        /// <li>
        /// <p>If the source type is a DB instance, a <code>DBInstanceIdentifier</code> value must be supplied.</p>
        /// </li>
        /// <li>
        /// <p>If the source type is a DB cluster, a <code>DBClusterIdentifier</code> value must be supplied.</p>
        /// </li>
        /// <li>
        /// <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> value must be supplied.</p>
        /// </li>
        /// <li>
        /// <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> value must be supplied.</p>
        /// </li>
        /// <li>
        /// <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> value must be supplied.</p>
        /// </li>
        /// <li>
        /// <p>If the source type is a DB cluster snapshot, a <code>DBClusterSnapshotIdentifier</code> value must be supplied.</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
        /// </li>
        /// </ul>
        pub fn source_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_identifier = Some(input.into());
            self
        }
        pub fn set_source_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_identifier = input;
            self
        }
        /// <p>The event source to retrieve events for. If no value is specified, all events are returned.</p>
        pub fn source_type(mut self, input: crate::model::SourceType) -> Self {
            self.source_type = Some(input);
            self
        }
        pub fn set_source_type(
            mut self,
            input: std::option::Option<crate::model::SourceType>,
        ) -> Self {
            self.source_type = input;
            self
        }
        /// <p>
        /// The beginning of the time interval to retrieve events for,
        /// specified in ISO 8601 format. For more information about ISO 8601,
        /// go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a>
        /// </p>
        /// <p>Example: 2009-07-08T18:00Z</p>
        pub fn start_time(mut self, input: smithy_types::Instant) -> Self {
            self.start_time = Some(input);
            self
        }
        pub fn set_start_time(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.start_time = input;
            self
        }
        /// <p>
        /// The end of the time interval for which to retrieve events,
        /// specified in ISO 8601 format. For more information about ISO 8601,
        /// go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a>
        /// </p>
        /// <p>Example: 2009-07-08T18:00Z</p>
        pub fn end_time(mut self, input: smithy_types::Instant) -> Self {
            self.end_time = Some(input);
            self
        }
        pub fn set_end_time(mut self, input: std::option::Option<smithy_types::Instant>) -> Self {
            self.end_time = input;
            self
        }
        /// <p>The number of minutes to retrieve events for.</p>
        /// <p>Default: 60</p>
        pub fn duration(mut self, input: i32) -> Self {
            self.duration = Some(input);
            self
        }
        pub fn set_duration(mut self, input: std::option::Option<i32>) -> Self {
            self.duration = input;
            self
        }
        pub fn event_categories(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.event_categories.unwrap_or_default();
            v.push(input.into());
            self.event_categories = Some(v);
            self
        }
        pub fn set_event_categories(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.event_categories = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so that
        /// you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// DescribeEvents request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEventsInput`](crate::input::DescribeEventsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeEventsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeEventsInput {
                source_identifier: self.source_identifier,
                source_type: self.source_type,
                start_time: self.start_time,
                end_time: self.end_time,
                duration: self.duration,
                event_categories: self.event_categories,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeEventsInputOperationOutputAlias = crate::operation::DescribeEvents;
#[doc(hidden)]
pub type DescribeEventsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeEventsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeEvents`](crate::operation::DescribeEvents)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeEvents,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_events(&self).map_err(
                |err| smithy_http::operation::BuildError::SerializationError(err.into()),
            )?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeEvents::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeEvents",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeEventsInput`](crate::input::DescribeEventsInput)
    pub fn builder() -> crate::input::describe_events_input::Builder {
        crate::input::describe_events_input::Builder::default()
    }
}

/// See [`DescribeEventSubscriptionsInput`](crate::input::DescribeEventSubscriptionsInput)
pub mod describe_event_subscriptions_input {
    /// A builder for [`DescribeEventSubscriptionsInput`](crate::input::DescribeEventSubscriptionsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subscription_name: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the RDS event notification subscription you want to describe.</p>
        pub fn subscription_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.subscription_name = Some(input.into());
            self
        }
        pub fn set_subscription_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.subscription_name = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so that
        /// you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// DescribeOrderableDBInstanceOptions request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code> .
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeEventSubscriptionsInput`](crate::input::DescribeEventSubscriptionsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeEventSubscriptionsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeEventSubscriptionsInput {
                subscription_name: self.subscription_name,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeEventSubscriptionsInputOperationOutputAlias =
    crate::operation::DescribeEventSubscriptions;
#[doc(hidden)]
pub type DescribeEventSubscriptionsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeEventSubscriptionsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeEventSubscriptions`](crate::operation::DescribeEventSubscriptions)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeEventSubscriptions,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_event_subscriptions(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeEventSubscriptions::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeEventSubscriptions",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeEventSubscriptionsInput`](crate::input::DescribeEventSubscriptionsInput)
    pub fn builder() -> crate::input::describe_event_subscriptions_input::Builder {
        crate::input::describe_event_subscriptions_input::Builder::default()
    }
}

/// See [`DescribeExportTasksInput`](crate::input::DescribeExportTasksInput)
pub mod describe_export_tasks_input {
    /// A builder for [`DescribeExportTasksInput`](crate::input::DescribeExportTasksInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) export_task_identifier: std::option::Option<std::string::String>,
        pub(crate) source_arn: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) max_records: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The identifier of the snapshot export task to be described.</p>
        pub fn export_task_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.export_task_identifier = Some(input.into());
            self
        }
        pub fn set_export_task_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.export_task_identifier = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.</p>
        pub fn source_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_arn = Some(input.into());
            self
        }
        pub fn set_source_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.source_arn = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous <code>DescribeExportTasks</code> request.
        /// If you specify this parameter, the response includes only records beyond the marker,
        /// up to the value specified by the <code>MaxRecords</code> parameter.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response. If more records exist than the
        /// specified value, a pagination token called a marker is included in the response.
        /// You can use the marker in a later <code>DescribeExportTasks</code> request
        /// to retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeExportTasksInput`](crate::input::DescribeExportTasksInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeExportTasksInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeExportTasksInput {
                export_task_identifier: self.export_task_identifier,
                source_arn: self.source_arn,
                filters: self.filters,
                marker: self.marker,
                max_records: self.max_records,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeExportTasksInputOperationOutputAlias = crate::operation::DescribeExportTasks;
#[doc(hidden)]
pub type DescribeExportTasksInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeExportTasksInput {
    /// Consumes the builder and constructs an Operation<[`DescribeExportTasks`](crate::operation::DescribeExportTasks)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeExportTasks,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_export_tasks(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeExportTasks::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeExportTasks",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeExportTasksInput`](crate::input::DescribeExportTasksInput)
    pub fn builder() -> crate::input::describe_export_tasks_input::Builder {
        crate::input::describe_export_tasks_input::Builder::default()
    }
}

/// See [`DescribeGlobalClustersInput`](crate::input::DescribeGlobalClustersInput)
pub mod describe_global_clusters_input {
    /// A builder for [`DescribeGlobalClustersInput`](crate::input::DescribeGlobalClustersInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) global_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>
        /// The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match an existing DBClusterIdentifier.</p>
        /// </li>
        /// </ul>
        pub fn global_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.global_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_global_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.global_cluster_identifier = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response. If more records exist than the specified
        /// <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that
        /// you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If
        /// this parameter is specified, the response includes only records beyond the marker, up to the value
        /// specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeGlobalClustersInput`](crate::input::DescribeGlobalClustersInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeGlobalClustersInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeGlobalClustersInput {
                global_cluster_identifier: self.global_cluster_identifier,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeGlobalClustersInputOperationOutputAlias = crate::operation::DescribeGlobalClusters;
#[doc(hidden)]
pub type DescribeGlobalClustersInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeGlobalClustersInput {
    /// Consumes the builder and constructs an Operation<[`DescribeGlobalClusters`](crate::operation::DescribeGlobalClusters)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeGlobalClusters,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_global_clusters(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeGlobalClusters::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeGlobalClusters",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeGlobalClustersInput`](crate::input::DescribeGlobalClustersInput)
    pub fn builder() -> crate::input::describe_global_clusters_input::Builder {
        crate::input::describe_global_clusters_input::Builder::default()
    }
}

/// See [`DescribeInstallationMediaInput`](crate::input::DescribeInstallationMediaInput)
pub mod describe_installation_media_input {
    /// A builder for [`DescribeInstallationMediaInput`](crate::input::DescribeInstallationMediaInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) installation_media_id: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The installation medium ID.</p>
        pub fn installation_media_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.installation_media_id = Some(input.into());
            self
        }
        pub fn set_installation_media_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.installation_media_id = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>An optional pagination token provided by a previous DescribeInstallationMedia request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeInstallationMediaInput`](crate::input::DescribeInstallationMediaInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeInstallationMediaInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeInstallationMediaInput {
                installation_media_id: self.installation_media_id,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeInstallationMediaInputOperationOutputAlias =
    crate::operation::DescribeInstallationMedia;
#[doc(hidden)]
pub type DescribeInstallationMediaInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeInstallationMediaInput {
    /// Consumes the builder and constructs an Operation<[`DescribeInstallationMedia`](crate::operation::DescribeInstallationMedia)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeInstallationMedia,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_installation_media(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeInstallationMedia::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeInstallationMedia",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeInstallationMediaInput`](crate::input::DescribeInstallationMediaInput)
    pub fn builder() -> crate::input::describe_installation_media_input::Builder {
        crate::input::describe_installation_media_input::Builder::default()
    }
}

/// See [`DescribeOptionGroupOptionsInput`](crate::input::DescribeOptionGroupOptionsInput)
pub mod describe_option_group_options_input {
    /// A builder for [`DescribeOptionGroupOptionsInput`](crate::input::DescribeOptionGroupOptionsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) engine_name: std::option::Option<std::string::String>,
        pub(crate) major_engine_version: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A required parameter. Options available for the given engine name are described.</p>
        /// <p>Valid Values:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>mariadb</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>mysql</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se2</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se1</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>postgres</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ex</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-web</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn engine_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_name = Some(input.into());
            self
        }
        pub fn set_engine_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine_name = input;
            self
        }
        /// <p>If specified, filters the results to include only options for the specified major engine version.</p>
        pub fn major_engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.major_engine_version = Some(input.into());
            self
        }
        pub fn set_major_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.major_engine_version = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so that
        /// you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeOptionGroupOptionsInput`](crate::input::DescribeOptionGroupOptionsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeOptionGroupOptionsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeOptionGroupOptionsInput {
                engine_name: self.engine_name,
                major_engine_version: self.major_engine_version,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeOptionGroupOptionsInputOperationOutputAlias =
    crate::operation::DescribeOptionGroupOptions;
#[doc(hidden)]
pub type DescribeOptionGroupOptionsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeOptionGroupOptionsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeOptionGroupOptions`](crate::operation::DescribeOptionGroupOptions)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeOptionGroupOptions,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_option_group_options(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeOptionGroupOptions::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeOptionGroupOptions",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeOptionGroupOptionsInput`](crate::input::DescribeOptionGroupOptionsInput)
    pub fn builder() -> crate::input::describe_option_group_options_input::Builder {
        crate::input::describe_option_group_options_input::Builder::default()
    }
}

/// See [`DescribeOptionGroupsInput`](crate::input::DescribeOptionGroupsInput)
pub mod describe_option_groups_input {
    /// A builder for [`DescribeOptionGroupsInput`](crate::input::DescribeOptionGroupsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) option_group_name: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) engine_name: std::option::Option<std::string::String>,
        pub(crate) major_engine_version: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.</p>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous DescribeOptionGroups request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so that
        /// you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>Filters the list of option groups to only include groups associated with a specific database engine.</p>
        /// <p>Valid Values:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>mariadb</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>mysql</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se2</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se1</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>postgres</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ex</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-web</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn engine_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_name = Some(input.into());
            self
        }
        pub fn set_engine_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine_name = input;
            self
        }
        /// <p>Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.</p>
        pub fn major_engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.major_engine_version = Some(input.into());
            self
        }
        pub fn set_major_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.major_engine_version = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeOptionGroupsInput`](crate::input::DescribeOptionGroupsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeOptionGroupsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeOptionGroupsInput {
                option_group_name: self.option_group_name,
                filters: self.filters,
                marker: self.marker,
                max_records: self.max_records,
                engine_name: self.engine_name,
                major_engine_version: self.major_engine_version,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeOptionGroupsInputOperationOutputAlias = crate::operation::DescribeOptionGroups;
#[doc(hidden)]
pub type DescribeOptionGroupsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeOptionGroupsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeOptionGroups`](crate::operation::DescribeOptionGroups)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeOptionGroups,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_option_groups(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeOptionGroups::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeOptionGroups",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeOptionGroupsInput`](crate::input::DescribeOptionGroupsInput)
    pub fn builder() -> crate::input::describe_option_groups_input::Builder {
        crate::input::describe_option_groups_input::Builder::default()
    }
}

/// See [`DescribeOrderableDBInstanceOptionsInput`](crate::input::DescribeOrderableDBInstanceOptionsInput)
pub mod describe_orderable_db_instance_options_input {
    /// A builder for [`DescribeOrderableDBInstanceOptionsInput`](crate::input::DescribeOrderableDBInstanceOptionsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) engine: std::option::Option<std::string::String>,
        pub(crate) engine_version: std::option::Option<std::string::String>,
        pub(crate) db_instance_class: std::option::Option<std::string::String>,
        pub(crate) license_model: std::option::Option<std::string::String>,
        pub(crate) availability_zone_group: std::option::Option<std::string::String>,
        pub(crate) vpc: std::option::Option<bool>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the engine to retrieve DB instance options for.</p>
        /// <p>Valid Values:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>aurora-postgresql</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>mariadb</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>mysql</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se2</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se1</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>postgres</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ex</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-web</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine = Some(input.into());
            self
        }
        pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine = input;
            self
        }
        /// <p>The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.</p>
        pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_version = Some(input.into());
            self
        }
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_version = input;
            self
        }
        /// <p>The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.</p>
        pub fn db_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_class = Some(input.into());
            self
        }
        pub fn set_db_instance_class(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_class = input;
            self
        }
        /// <p>The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.</p>
        pub fn license_model(mut self, input: impl Into<std::string::String>) -> Self {
            self.license_model = Some(input.into());
            self
        }
        pub fn set_license_model(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.license_model = input;
            self
        }
        /// <p>The Availability Zone group associated with a Local Zone. Specify this parameter to retrieve available offerings for the Local Zones in the group.</p>
        /// <p>Omit this parameter to show the available offerings in the specified AWS Region.</p>
        pub fn availability_zone_group(mut self, input: impl Into<std::string::String>) -> Self {
            self.availability_zone_group = Some(input.into());
            self
        }
        pub fn set_availability_zone_group(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.availability_zone_group = input;
            self
        }
        /// <p>A value that indicates whether to show only VPC or non-VPC offerings.</p>
        pub fn vpc(mut self, input: bool) -> Self {
            self.vpc = Some(input);
            self
        }
        pub fn set_vpc(mut self, input: std::option::Option<bool>) -> Self {
            self.vpc = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so that
        /// you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// DescribeOrderableDBInstanceOptions request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code> .
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeOrderableDBInstanceOptionsInput`](crate::input::DescribeOrderableDBInstanceOptionsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeOrderableDBInstanceOptionsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeOrderableDBInstanceOptionsInput {
                engine: self.engine,
                engine_version: self.engine_version,
                db_instance_class: self.db_instance_class,
                license_model: self.license_model,
                availability_zone_group: self.availability_zone_group,
                vpc: self.vpc,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeOrderableDBInstanceOptionsInputOperationOutputAlias =
    crate::operation::DescribeOrderableDBInstanceOptions;
#[doc(hidden)]
pub type DescribeOrderableDBInstanceOptionsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeOrderableDBInstanceOptionsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeOrderableDBInstanceOptions`](crate::operation::DescribeOrderableDBInstanceOptions)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeOrderableDBInstanceOptions,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_orderable_db_instance_options(
                    &self,
                )
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeOrderableDBInstanceOptions::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeOrderableDBInstanceOptions",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeOrderableDBInstanceOptionsInput`](crate::input::DescribeOrderableDBInstanceOptionsInput)
    pub fn builder() -> crate::input::describe_orderable_db_instance_options_input::Builder {
        crate::input::describe_orderable_db_instance_options_input::Builder::default()
    }
}

/// See [`DescribePendingMaintenanceActionsInput`](crate::input::DescribePendingMaintenanceActionsInput)
pub mod describe_pending_maintenance_actions_input {
    /// A builder for [`DescribePendingMaintenanceActionsInput`](crate::input::DescribePendingMaintenanceActionsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_identifier: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) max_records: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The ARN of a resource to return pending maintenance actions for.</p>
        pub fn resource_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_identifier = Some(input.into());
            self
        }
        pub fn set_resource_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_identifier = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous
        /// <code>DescribePendingMaintenanceActions</code> request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to a number of records specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more records exist than the specified <code>MaxRecords</code> value,
        /// a pagination token called a marker is included in the response so that
        /// you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribePendingMaintenanceActionsInput`](crate::input::DescribePendingMaintenanceActionsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribePendingMaintenanceActionsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribePendingMaintenanceActionsInput {
                resource_identifier: self.resource_identifier,
                filters: self.filters,
                marker: self.marker,
                max_records: self.max_records,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribePendingMaintenanceActionsInputOperationOutputAlias =
    crate::operation::DescribePendingMaintenanceActions;
#[doc(hidden)]
pub type DescribePendingMaintenanceActionsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribePendingMaintenanceActionsInput {
    /// Consumes the builder and constructs an Operation<[`DescribePendingMaintenanceActions`](crate::operation::DescribePendingMaintenanceActions)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribePendingMaintenanceActions,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_pending_maintenance_actions(
                    &self,
                )
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribePendingMaintenanceActions::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribePendingMaintenanceActions",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribePendingMaintenanceActionsInput`](crate::input::DescribePendingMaintenanceActionsInput)
    pub fn builder() -> crate::input::describe_pending_maintenance_actions_input::Builder {
        crate::input::describe_pending_maintenance_actions_input::Builder::default()
    }
}

/// See [`DescribeReservedDBInstancesInput`](crate::input::DescribeReservedDBInstancesInput)
pub mod describe_reserved_db_instances_input {
    /// A builder for [`DescribeReservedDBInstancesInput`](crate::input::DescribeReservedDBInstancesInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_db_instance_id: std::option::Option<std::string::String>,
        pub(crate) reserved_db_instances_offering_id: std::option::Option<std::string::String>,
        pub(crate) db_instance_class: std::option::Option<std::string::String>,
        pub(crate) duration: std::option::Option<std::string::String>,
        pub(crate) product_description: std::option::Option<std::string::String>,
        pub(crate) offering_type: std::option::Option<std::string::String>,
        pub(crate) multi_az: std::option::Option<bool>,
        pub(crate) lease_id: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.</p>
        pub fn reserved_db_instance_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.reserved_db_instance_id = Some(input.into());
            self
        }
        pub fn set_reserved_db_instance_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.reserved_db_instance_id = input;
            self
        }
        /// <p>The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.</p>
        pub fn reserved_db_instances_offering_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.reserved_db_instances_offering_id = Some(input.into());
            self
        }
        pub fn set_reserved_db_instances_offering_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.reserved_db_instances_offering_id = input;
            self
        }
        /// <p>The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.</p>
        pub fn db_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_class = Some(input.into());
            self
        }
        pub fn set_db_instance_class(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_class = input;
            self
        }
        /// <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p>
        /// <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code>
        /// </p>
        pub fn duration(mut self, input: impl Into<std::string::String>) -> Self {
            self.duration = Some(input.into());
            self
        }
        pub fn set_duration(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.duration = input;
            self
        }
        /// <p>The product description filter value. Specify this parameter to show only those reservations matching the specified product description.</p>
        pub fn product_description(mut self, input: impl Into<std::string::String>) -> Self {
            self.product_description = Some(input.into());
            self
        }
        pub fn set_product_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.product_description = input;
            self
        }
        /// <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p>
        /// <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code>
        /// </p>
        pub fn offering_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.offering_type = Some(input.into());
            self
        }
        pub fn set_offering_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.offering_type = input;
            self
        }
        /// <p>A value that indicates whether to show only those reservations that support Multi-AZ.</p>
        pub fn multi_az(mut self, input: bool) -> Self {
            self.multi_az = Some(input);
            self
        }
        pub fn set_multi_az(mut self, input: std::option::Option<bool>) -> Self {
            self.multi_az = input;
            self
        }
        /// <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p>
        /// <note>
        /// <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p>
        /// </note>
        pub fn lease_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.lease_id = Some(input.into());
            self
        }
        pub fn set_lease_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.lease_id = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is
        /// included in the response so you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReservedDBInstancesInput`](crate::input::DescribeReservedDBInstancesInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeReservedDBInstancesInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeReservedDBInstancesInput {
                reserved_db_instance_id: self.reserved_db_instance_id,
                reserved_db_instances_offering_id: self.reserved_db_instances_offering_id,
                db_instance_class: self.db_instance_class,
                duration: self.duration,
                product_description: self.product_description,
                offering_type: self.offering_type,
                multi_az: self.multi_az,
                lease_id: self.lease_id,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeReservedDBInstancesInputOperationOutputAlias =
    crate::operation::DescribeReservedDBInstances;
#[doc(hidden)]
pub type DescribeReservedDBInstancesInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeReservedDBInstancesInput {
    /// Consumes the builder and constructs an Operation<[`DescribeReservedDBInstances`](crate::operation::DescribeReservedDBInstances)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeReservedDBInstances,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_reserved_db_instances(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeReservedDBInstances::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeReservedDBInstances",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeReservedDBInstancesInput`](crate::input::DescribeReservedDBInstancesInput)
    pub fn builder() -> crate::input::describe_reserved_db_instances_input::Builder {
        crate::input::describe_reserved_db_instances_input::Builder::default()
    }
}

/// See [`DescribeReservedDBInstancesOfferingsInput`](crate::input::DescribeReservedDBInstancesOfferingsInput)
pub mod describe_reserved_db_instances_offerings_input {
    /// A builder for [`DescribeReservedDBInstancesOfferingsInput`](crate::input::DescribeReservedDBInstancesOfferingsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_db_instances_offering_id: std::option::Option<std::string::String>,
        pub(crate) db_instance_class: std::option::Option<std::string::String>,
        pub(crate) duration: std::option::Option<std::string::String>,
        pub(crate) product_description: std::option::Option<std::string::String>,
        pub(crate) offering_type: std::option::Option<std::string::String>,
        pub(crate) multi_az: std::option::Option<bool>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p>
        /// <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code>
        /// </p>
        pub fn reserved_db_instances_offering_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.reserved_db_instances_offering_id = Some(input.into());
            self
        }
        pub fn set_reserved_db_instances_offering_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.reserved_db_instances_offering_id = input;
            self
        }
        /// <p>The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.</p>
        pub fn db_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_class = Some(input.into());
            self
        }
        pub fn set_db_instance_class(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_class = input;
            self
        }
        /// <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p>
        /// <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code>
        /// </p>
        pub fn duration(mut self, input: impl Into<std::string::String>) -> Self {
            self.duration = Some(input.into());
            self
        }
        pub fn set_duration(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.duration = input;
            self
        }
        /// <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p>
        /// <note>
        /// <p>The results show offerings that partially match the filter value.</p>
        /// </note>
        pub fn product_description(mut self, input: impl Into<std::string::String>) -> Self {
            self.product_description = Some(input.into());
            self
        }
        pub fn set_product_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.product_description = input;
            self
        }
        /// <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p>
        /// <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code>
        /// </p>
        pub fn offering_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.offering_type = Some(input.into());
            self
        }
        pub fn set_offering_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.offering_type = input;
            self
        }
        /// <p>A value that indicates whether to show only those reservations that support Multi-AZ.</p>
        pub fn multi_az(mut self, input: bool) -> Self {
            self.multi_az = Some(input);
            self
        }
        pub fn set_multi_az(mut self, input: std::option::Option<bool>) -> Self {
            self.multi_az = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// <p>
        /// The maximum number of records to include in the response.
        /// If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is
        /// included in the response so you can retrieve the remaining results.
        /// </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>
        /// An optional pagination token provided by a previous request.
        /// If this parameter is specified, the response includes
        /// only records beyond the marker,
        /// up to the value specified by <code>MaxRecords</code>.
        /// </p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeReservedDBInstancesOfferingsInput`](crate::input::DescribeReservedDBInstancesOfferingsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeReservedDBInstancesOfferingsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeReservedDBInstancesOfferingsInput {
                reserved_db_instances_offering_id: self.reserved_db_instances_offering_id,
                db_instance_class: self.db_instance_class,
                duration: self.duration,
                product_description: self.product_description,
                offering_type: self.offering_type,
                multi_az: self.multi_az,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeReservedDBInstancesOfferingsInputOperationOutputAlias =
    crate::operation::DescribeReservedDBInstancesOfferings;
#[doc(hidden)]
pub type DescribeReservedDBInstancesOfferingsInputOperationRetryAlias =
    aws_http::AwsErrorRetryPolicy;
impl DescribeReservedDBInstancesOfferingsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeReservedDBInstancesOfferings`](crate::operation::DescribeReservedDBInstancesOfferings)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeReservedDBInstancesOfferings,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_reserved_db_instances_offerings(
                    &self,
                )
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeReservedDBInstancesOfferings::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeReservedDBInstancesOfferings",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeReservedDBInstancesOfferingsInput`](crate::input::DescribeReservedDBInstancesOfferingsInput)
    pub fn builder() -> crate::input::describe_reserved_db_instances_offerings_input::Builder {
        crate::input::describe_reserved_db_instances_offerings_input::Builder::default()
    }
}

/// See [`DescribeSourceRegionsInput`](crate::input::DescribeSourceRegionsInput)
pub mod describe_source_regions_input {
    /// A builder for [`DescribeSourceRegionsInput`](crate::input::DescribeSourceRegionsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) region_name: std::option::Option<std::string::String>,
        pub(crate) max_records: std::option::Option<i32>,
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    }
    impl Builder {
        /// <p>The source AWS Region name. For example, <code>us-east-1</code>.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must specify a valid AWS Region name.</p>
        /// </li>
        /// </ul>
        pub fn region_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.region_name = Some(input.into());
            self
        }
        pub fn set_region_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.region_name = input;
            self
        }
        /// <p>The maximum number of records to include in the response. If more records exist
        /// than the specified <code>MaxRecords</code> value, a pagination token called a marker is
        /// included in the response so you can retrieve the remaining results. </p>
        /// <p>Default: 100</p>
        /// <p>Constraints: Minimum 20, maximum 100.</p>
        pub fn max_records(mut self, input: i32) -> Self {
            self.max_records = Some(input);
            self
        }
        pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
            self.max_records = input;
            self
        }
        /// <p>An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response
        /// includes only records beyond the marker, up to the value specified by
        /// <code>MaxRecords</code>.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeSourceRegionsInput`](crate::input::DescribeSourceRegionsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeSourceRegionsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeSourceRegionsInput {
                region_name: self.region_name,
                max_records: self.max_records,
                marker: self.marker,
                filters: self.filters,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeSourceRegionsInputOperationOutputAlias = crate::operation::DescribeSourceRegions;
#[doc(hidden)]
pub type DescribeSourceRegionsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DescribeSourceRegionsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeSourceRegions`](crate::operation::DescribeSourceRegions)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeSourceRegions,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_describe_source_regions(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeSourceRegions::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeSourceRegions",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeSourceRegionsInput`](crate::input::DescribeSourceRegionsInput)
    pub fn builder() -> crate::input::describe_source_regions_input::Builder {
        crate::input::describe_source_regions_input::Builder::default()
    }
}

/// See [`DescribeValidDBInstanceModificationsInput`](crate::input::DescribeValidDBInstanceModificationsInput)
pub mod describe_valid_db_instance_modifications_input {
    /// A builder for [`DescribeValidDBInstanceModificationsInput`](crate::input::DescribeValidDBInstanceModificationsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The customer identifier or the ARN of your DB instance.
        /// </p>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`DescribeValidDBInstanceModificationsInput`](crate::input::DescribeValidDBInstanceModificationsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DescribeValidDBInstanceModificationsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DescribeValidDBInstanceModificationsInput {
                db_instance_identifier: self.db_instance_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type DescribeValidDBInstanceModificationsInputOperationOutputAlias =
    crate::operation::DescribeValidDBInstanceModifications;
#[doc(hidden)]
pub type DescribeValidDBInstanceModificationsInputOperationRetryAlias =
    aws_http::AwsErrorRetryPolicy;
impl DescribeValidDBInstanceModificationsInput {
    /// Consumes the builder and constructs an Operation<[`DescribeValidDBInstanceModifications`](crate::operation::DescribeValidDBInstanceModifications)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DescribeValidDBInstanceModifications,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_describe_valid_db_instance_modifications(
                    &self,
                )
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DescribeValidDBInstanceModifications::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DescribeValidDBInstanceModifications",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DescribeValidDBInstanceModificationsInput`](crate::input::DescribeValidDBInstanceModificationsInput)
    pub fn builder() -> crate::input::describe_valid_db_instance_modifications_input::Builder {
        crate::input::describe_valid_db_instance_modifications_input::Builder::default()
    }
}

/// See [`DownloadDBLogFilePortionInput`](crate::input::DownloadDBLogFilePortionInput)
pub mod download_db_log_file_portion_input {
    /// A builder for [`DownloadDBLogFilePortionInput`](crate::input::DownloadDBLogFilePortionInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) log_file_name: std::option::Option<std::string::String>,
        pub(crate) marker: std::option::Option<std::string::String>,
        pub(crate) number_of_lines: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the identifier of an existing DBInstance.</p>
        /// </li>
        /// </ul>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        /// <p>The name of the log file to be downloaded.</p>
        pub fn log_file_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.log_file_name = Some(input.into());
            self
        }
        pub fn set_log_file_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.log_file_name = input;
            self
        }
        /// <p>The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.</p>
        pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
            self.marker = Some(input.into());
            self
        }
        pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.marker = input;
            self
        }
        /// <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p>
        /// <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning
        /// or the end of the log file, depending on the value of the Marker parameter.</p>
        /// <ul>
        /// <li>
        /// <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a
        /// maximum of 10000 lines, starting with the most recent log entries first.</p>
        /// </li>
        /// <li>
        /// <p>If
        /// NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end
        /// of the log file are returned.</p>
        /// </li>
        /// <li>
        /// <p>If Marker is specified as "0", then the specified
        /// number of lines from the beginning of the log file are returned.</p>
        /// </li>
        /// <li>
        /// <p>You can
        /// download the log file in blocks of lines by specifying the size of the block using
        /// the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your
        /// first request. Include the Marker value returned in the response as the Marker value for the next
        /// request, continuing until the AdditionalDataPending response element returns false.</p>
        /// </li>
        /// </ul>
        pub fn number_of_lines(mut self, input: i32) -> Self {
            self.number_of_lines = Some(input);
            self
        }
        pub fn set_number_of_lines(mut self, input: std::option::Option<i32>) -> Self {
            self.number_of_lines = input;
            self
        }
        /// Consumes the builder and constructs a [`DownloadDBLogFilePortionInput`](crate::input::DownloadDBLogFilePortionInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::DownloadDBLogFilePortionInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::DownloadDBLogFilePortionInput {
                db_instance_identifier: self.db_instance_identifier,
                log_file_name: self.log_file_name,
                marker: self.marker,
                number_of_lines: self.number_of_lines.unwrap_or_default(),
            })
        }
    }
}
#[doc(hidden)]
pub type DownloadDBLogFilePortionInputOperationOutputAlias =
    crate::operation::DownloadDBLogFilePortion;
#[doc(hidden)]
pub type DownloadDBLogFilePortionInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl DownloadDBLogFilePortionInput {
    /// Consumes the builder and constructs an Operation<[`DownloadDBLogFilePortion`](crate::operation::DownloadDBLogFilePortion)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::DownloadDBLogFilePortion,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_download_db_log_file_portion(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::DownloadDBLogFilePortion::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "DownloadDBLogFilePortion",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`DownloadDBLogFilePortionInput`](crate::input::DownloadDBLogFilePortionInput)
    pub fn builder() -> crate::input::download_db_log_file_portion_input::Builder {
        crate::input::download_db_log_file_portion_input::Builder::default()
    }
}

/// See [`FailoverDBClusterInput`](crate::input::FailoverDBClusterInput)
pub mod failover_db_cluster_input {
    /// A builder for [`FailoverDBClusterInput`](crate::input::FailoverDBClusterInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) target_db_instance_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the identifier of an existing DBCluster.</p>
        /// </li>
        /// </ul>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>The name of the instance to promote to the primary instance.</p>
        /// <p>You must specify the instance identifier for an Aurora Replica in the DB cluster.
        /// For example, <code>mydbcluster-replica1</code>.</p>
        pub fn target_db_instance_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.target_db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_target_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_db_instance_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`FailoverDBClusterInput`](crate::input::FailoverDBClusterInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::FailoverDBClusterInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::FailoverDBClusterInput {
                db_cluster_identifier: self.db_cluster_identifier,
                target_db_instance_identifier: self.target_db_instance_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type FailoverDBClusterInputOperationOutputAlias = crate::operation::FailoverDBCluster;
#[doc(hidden)]
pub type FailoverDBClusterInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl FailoverDBClusterInput {
    /// Consumes the builder and constructs an Operation<[`FailoverDBCluster`](crate::operation::FailoverDBCluster)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::FailoverDBCluster,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_failover_db_cluster(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::FailoverDBCluster::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "FailoverDBCluster",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`FailoverDBClusterInput`](crate::input::FailoverDBClusterInput)
    pub fn builder() -> crate::input::failover_db_cluster_input::Builder {
        crate::input::failover_db_cluster_input::Builder::default()
    }
}

/// See [`FailoverGlobalClusterInput`](crate::input::FailoverGlobalClusterInput)
pub mod failover_global_cluster_input {
    /// A builder for [`FailoverGlobalClusterInput`](crate::input::FailoverGlobalClusterInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) global_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) target_db_cluster_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Identifier of the Aurora global database (<a>GlobalCluster</a>)
        /// that should be failed over. The identifier is the unique key assigned by
        /// the user when the Aurora global database was created. In other words,
        /// it's the name of the Aurora global database that you want to fail over. </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the identifier of an existing
        /// <a>GlobalCluster</a> (Aurora global database).</p>
        /// </li>
        /// </ul>
        pub fn global_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.global_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_global_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.global_cluster_identifier = input;
            self
        }
        /// <p>Identifier of the secondary Aurora DB cluster that you want to promote to primary for the Aurora
        /// global database (<a>GlobalCluster</a>.) Use the Amazon Resource Name (ARN) for the identifier so that
        /// Aurora can locate the cluster in its AWS Region.      
        /// </p>
        pub fn target_db_cluster_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.target_db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_target_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_db_cluster_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`FailoverGlobalClusterInput`](crate::input::FailoverGlobalClusterInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::FailoverGlobalClusterInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::FailoverGlobalClusterInput {
                global_cluster_identifier: self.global_cluster_identifier,
                target_db_cluster_identifier: self.target_db_cluster_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type FailoverGlobalClusterInputOperationOutputAlias = crate::operation::FailoverGlobalCluster;
#[doc(hidden)]
pub type FailoverGlobalClusterInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl FailoverGlobalClusterInput {
    /// Consumes the builder and constructs an Operation<[`FailoverGlobalCluster`](crate::operation::FailoverGlobalCluster)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::FailoverGlobalCluster,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_failover_global_cluster(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::FailoverGlobalCluster::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "FailoverGlobalCluster",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`FailoverGlobalClusterInput`](crate::input::FailoverGlobalClusterInput)
    pub fn builder() -> crate::input::failover_global_cluster_input::Builder {
        crate::input::failover_global_cluster_input::Builder::default()
    }
}

/// See [`ImportInstallationMediaInput`](crate::input::ImportInstallationMediaInput)
pub mod import_installation_media_input {
    /// A builder for [`ImportInstallationMediaInput`](crate::input::ImportInstallationMediaInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) custom_availability_zone_id: std::option::Option<std::string::String>,
        pub(crate) engine: std::option::Option<std::string::String>,
        pub(crate) engine_version: std::option::Option<std::string::String>,
        pub(crate) engine_installation_media_path: std::option::Option<std::string::String>,
        pub(crate) os_installation_media_path: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of the custom Availability Zone (AZ) to import the installation media to.</p>
        pub fn custom_availability_zone_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.custom_availability_zone_id = Some(input.into());
            self
        }
        pub fn set_custom_availability_zone_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.custom_availability_zone_id = input;
            self
        }
        /// <p>The name of the database engine to be used for this instance.
        /// </p>
        /// <p>The list only includes supported DB engines that require an on-premises
        /// customer provided license.
        /// </p>
        /// <p>Valid Values:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>sqlserver-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ex</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-web</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine = Some(input.into());
            self
        }
        pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine = input;
            self
        }
        /// <p>The version number of the database engine to use.</p>
        /// <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p>
        /// <p>The following are the database engines and links to information about the major and minor
        /// versions. The list only includes DB engines that require an on-premises
        /// customer provided license.</p>
        /// <p>
        /// <b>Microsoft SQL Server</b>
        /// </p>
        /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.VersionSupport">
        /// Microsoft SQL Server Versions on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_version = Some(input.into());
            self
        }
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_version = input;
            self
        }
        /// <p>The path to the installation medium for the specified DB engine.</p>
        /// <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code>
        /// </p>
        pub fn engine_installation_media_path(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.engine_installation_media_path = Some(input.into());
            self
        }
        pub fn set_engine_installation_media_path(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_installation_media_path = input;
            self
        }
        /// <p>The path to the installation medium for the operating system associated with the specified DB engine.</p>
        /// <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code>
        /// </p>
        pub fn os_installation_media_path(mut self, input: impl Into<std::string::String>) -> Self {
            self.os_installation_media_path = Some(input.into());
            self
        }
        pub fn set_os_installation_media_path(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.os_installation_media_path = input;
            self
        }
        /// Consumes the builder and constructs a [`ImportInstallationMediaInput`](crate::input::ImportInstallationMediaInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ImportInstallationMediaInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ImportInstallationMediaInput {
                custom_availability_zone_id: self.custom_availability_zone_id,
                engine: self.engine,
                engine_version: self.engine_version,
                engine_installation_media_path: self.engine_installation_media_path,
                os_installation_media_path: self.os_installation_media_path,
            })
        }
    }
}
#[doc(hidden)]
pub type ImportInstallationMediaInputOperationOutputAlias =
    crate::operation::ImportInstallationMedia;
#[doc(hidden)]
pub type ImportInstallationMediaInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ImportInstallationMediaInput {
    /// Consumes the builder and constructs an Operation<[`ImportInstallationMedia`](crate::operation::ImportInstallationMedia)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ImportInstallationMedia,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_import_installation_media(&self)
                .map_err(|err| {
                smithy_http::operation::BuildError::SerializationError(err.into())
            })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ImportInstallationMedia::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ImportInstallationMedia",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ImportInstallationMediaInput`](crate::input::ImportInstallationMediaInput)
    pub fn builder() -> crate::input::import_installation_media_input::Builder {
        crate::input::import_installation_media_input::Builder::default()
    }
}

/// See [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
pub mod list_tags_for_resource_input {
    /// A builder for [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_name: std::option::Option<std::string::String>,
        pub(crate) filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    }
    impl Builder {
        /// <p>The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about
        /// creating an ARN,
        /// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
        /// Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p>
        pub fn resource_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_name = Some(input.into());
            self
        }
        pub fn set_resource_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_name = input;
            self
        }
        pub fn filters(mut self, input: impl Into<crate::model::Filter>) -> Self {
            let mut v = self.filters.unwrap_or_default();
            v.push(input.into());
            self.filters = Some(v);
            self
        }
        pub fn set_filters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Filter>>,
        ) -> Self {
            self.filters = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ListTagsForResourceInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ListTagsForResourceInput {
                resource_name: self.resource_name,
                filters: self.filters,
            })
        }
    }
}
#[doc(hidden)]
pub type ListTagsForResourceInputOperationOutputAlias = crate::operation::ListTagsForResource;
#[doc(hidden)]
pub type ListTagsForResourceInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ListTagsForResourceInput {
    /// Consumes the builder and constructs an Operation<[`ListTagsForResource`](crate::operation::ListTagsForResource)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ListTagsForResource,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_list_tags_for_resource(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ListTagsForResource::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ListTagsForResource",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
}

/// See [`ModifyCertificatesInput`](crate::input::ModifyCertificatesInput)
pub mod modify_certificates_input {
    /// A builder for [`ModifyCertificatesInput`](crate::input::ModifyCertificatesInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) certificate_identifier: std::option::Option<std::string::String>,
        pub(crate) remove_customer_override: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The new default certificate identifier to override the current one with.</p>
        /// <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI
        /// command or the <code>DescribeCertificates</code> API operation.</p>
        pub fn certificate_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.certificate_identifier = Some(input.into());
            self
        }
        pub fn set_certificate_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.certificate_identifier = input;
            self
        }
        /// <p>A value that indicates whether to remove the override for the default certificate.
        /// If the override is removed, the default certificate is the system
        /// default.</p>
        pub fn remove_customer_override(mut self, input: bool) -> Self {
            self.remove_customer_override = Some(input);
            self
        }
        pub fn set_remove_customer_override(mut self, input: std::option::Option<bool>) -> Self {
            self.remove_customer_override = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyCertificatesInput`](crate::input::ModifyCertificatesInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ModifyCertificatesInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ModifyCertificatesInput {
                certificate_identifier: self.certificate_identifier,
                remove_customer_override: self.remove_customer_override,
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyCertificatesInputOperationOutputAlias = crate::operation::ModifyCertificates;
#[doc(hidden)]
pub type ModifyCertificatesInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyCertificatesInput {
    /// Consumes the builder and constructs an Operation<[`ModifyCertificates`](crate::operation::ModifyCertificates)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyCertificates,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_modify_certificates(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyCertificates::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyCertificates",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyCertificatesInput`](crate::input::ModifyCertificatesInput)
    pub fn builder() -> crate::input::modify_certificates_input::Builder {
        crate::input::modify_certificates_input::Builder::default()
    }
}

/// See [`ModifyCurrentDBClusterCapacityInput`](crate::input::ModifyCurrentDBClusterCapacityInput)
pub mod modify_current_db_cluster_capacity_input {
    /// A builder for [`ModifyCurrentDBClusterCapacityInput`](crate::input::ModifyCurrentDBClusterCapacityInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) capacity: std::option::Option<i32>,
        pub(crate) seconds_before_timeout: std::option::Option<i32>,
        pub(crate) timeout_action: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the identifier of an existing DB cluster.</p>
        /// </li>
        /// </ul>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>The DB cluster capacity.</p>
        /// <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p>
        /// </li>
        /// <li>
        /// <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p>
        /// </li>
        /// </ul>
        pub fn capacity(mut self, input: i32) -> Self {
            self.capacity = Some(input);
            self
        }
        pub fn set_capacity(mut self, input: std::option::Option<i32>) -> Self {
            self.capacity = input;
            self
        }
        /// <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point
        /// to perform seamless scaling before enforcing the timeout action. The default is
        /// 300.</p>
        /// <ul>
        /// <li>
        /// <p>Value must be from 10 through 600.</p>
        /// </li>
        /// </ul>
        pub fn seconds_before_timeout(mut self, input: i32) -> Self {
            self.seconds_before_timeout = Some(input);
            self
        }
        pub fn set_seconds_before_timeout(mut self, input: std::option::Option<i32>) -> Self {
            self.seconds_before_timeout = input;
            self
        }
        /// <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p>
        /// <p>
        /// <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p>
        /// <p>
        /// <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
        pub fn timeout_action(mut self, input: impl Into<std::string::String>) -> Self {
            self.timeout_action = Some(input.into());
            self
        }
        pub fn set_timeout_action(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.timeout_action = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyCurrentDBClusterCapacityInput`](crate::input::ModifyCurrentDBClusterCapacityInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ModifyCurrentDBClusterCapacityInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ModifyCurrentDBClusterCapacityInput {
                db_cluster_identifier: self.db_cluster_identifier,
                capacity: self.capacity,
                seconds_before_timeout: self.seconds_before_timeout,
                timeout_action: self.timeout_action,
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyCurrentDBClusterCapacityInputOperationOutputAlias =
    crate::operation::ModifyCurrentDBClusterCapacity;
#[doc(hidden)]
pub type ModifyCurrentDBClusterCapacityInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyCurrentDBClusterCapacityInput {
    /// Consumes the builder and constructs an Operation<[`ModifyCurrentDBClusterCapacity`](crate::operation::ModifyCurrentDBClusterCapacity)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyCurrentDBClusterCapacity,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_modify_current_db_cluster_capacity(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyCurrentDBClusterCapacity::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyCurrentDBClusterCapacity",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyCurrentDBClusterCapacityInput`](crate::input::ModifyCurrentDBClusterCapacityInput)
    pub fn builder() -> crate::input::modify_current_db_cluster_capacity_input::Builder {
        crate::input::modify_current_db_cluster_capacity_input::Builder::default()
    }
}

/// See [`ModifyDBClusterInput`](crate::input::ModifyDBClusterInput)
pub mod modify_db_cluster_input {
    /// A builder for [`ModifyDBClusterInput`](crate::input::ModifyDBClusterInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) new_db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) apply_immediately: std::option::Option<bool>,
        pub(crate) backup_retention_period: std::option::Option<i32>,
        pub(crate) db_cluster_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) port: std::option::Option<i32>,
        pub(crate) master_user_password: std::option::Option<std::string::String>,
        pub(crate) option_group_name: std::option::Option<std::string::String>,
        pub(crate) preferred_backup_window: std::option::Option<std::string::String>,
        pub(crate) preferred_maintenance_window: std::option::Option<std::string::String>,
        pub(crate) enable_iam_database_authentication: std::option::Option<bool>,
        pub(crate) backtrack_window: std::option::Option<i64>,
        pub(crate) cloudwatch_logs_export_configuration:
            std::option::Option<crate::model::CloudwatchLogsExportConfiguration>,
        pub(crate) engine_version: std::option::Option<std::string::String>,
        pub(crate) allow_major_version_upgrade: std::option::Option<bool>,
        pub(crate) db_instance_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) domain: std::option::Option<std::string::String>,
        pub(crate) domain_iam_role_name: std::option::Option<std::string::String>,
        pub(crate) scaling_configuration: std::option::Option<crate::model::ScalingConfiguration>,
        pub(crate) deletion_protection: std::option::Option<bool>,
        pub(crate) enable_http_endpoint: std::option::Option<bool>,
        pub(crate) copy_tags_to_snapshot: std::option::Option<bool>,
        pub(crate) enable_global_write_forwarding: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p>
        /// <p>Constraints: This identifier must match the identifier of an existing DB
        /// cluster.</p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
        /// </li>
        /// <li>
        /// <p>The first character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-cluster2</code>
        /// </p>
        pub fn new_db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.new_db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_new_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.new_db_cluster_identifier = input;
            self
        }
        /// <p>A value that indicates whether the modifications in this request and
        /// any pending modifications are asynchronously applied
        /// as soon as possible, regardless of the
        /// <code>PreferredMaintenanceWindow</code> setting for the DB cluster.
        /// If this parameter is disabled, changes to the
        /// DB cluster are applied during the next maintenance window.</p>
        /// <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>,
        /// <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code>
        /// parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>,
        /// and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are
        /// applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
        /// <p>By default, this parameter is disabled.</p>
        pub fn apply_immediately(mut self, input: bool) -> Self {
            self.apply_immediately = Some(input);
            self
        }
        pub fn set_apply_immediately(mut self, input: std::option::Option<bool>) -> Self {
            self.apply_immediately = input;
            self
        }
        /// <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p>
        /// <p>Default: 1</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be a value from 1 to 35</p>
        /// </li>
        /// </ul>
        pub fn backup_retention_period(mut self, input: i32) -> Self {
            self.backup_retention_period = Some(input);
            self
        }
        pub fn set_backup_retention_period(mut self, input: std::option::Option<i32>) -> Self {
            self.backup_retention_period = input;
            self
        }
        /// <p>The name of the DB cluster parameter group to use for the DB cluster.</p>
        pub fn db_cluster_parameter_group_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_cluster_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = input;
            self
        }
        pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.vpc_security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.vpc_security_group_ids = Some(v);
            self
        }
        pub fn set_vpc_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.vpc_security_group_ids = input;
            self
        }
        /// <p>The port number on which the DB cluster accepts connections.</p>
        /// <p>Constraints: Value must be <code>1150-65535</code>
        /// </p>
        /// <p>Default: The same port as the original DB cluster.</p>
        pub fn port(mut self, input: i32) -> Self {
            self.port = Some(input);
            self
        }
        pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
            self.port = input;
            self
        }
        /// <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p>
        /// <p>Constraints: Must contain from 8 to 41 characters.</p>
        pub fn master_user_password(mut self, input: impl Into<std::string::String>) -> Self {
            self.master_user_password = Some(input.into());
            self
        }
        pub fn set_master_user_password(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.master_user_password = input;
            self
        }
        /// <p>A value that indicates that the DB cluster should be associated with the specified option group.
        /// Changing this parameter doesn't result in an outage except in the following case, and the change
        /// is applied during the next maintenance window
        /// unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that
        /// enables OEM, this change can cause a brief (sub-second) period during which new connections
        /// are rejected but existing connections are not interrupted.
        /// </p>
        /// <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        /// <p>The daily time range during which automated backups are created
        /// if automated backups are enabled,
        /// using the <code>BackupRetentionPeriod</code> parameter.
        /// </p>
        /// <p>The default is a 30-minute window selected at random from an
        /// 8-hour block of time for each AWS Region.
        /// To view the time blocks available, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow">
        /// Backup window</a> in the <i>Amazon Aurora User Guide.</i>
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
        /// </li>
        /// <li>
        /// <p>Must be in Universal Coordinated Time (UTC).</p>
        /// </li>
        /// <li>
        /// <p>Must not conflict with the preferred maintenance window.</p>
        /// </li>
        /// <li>
        /// <p>Must be at least 30 minutes.</p>
        /// </li>
        /// </ul>
        pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
            self.preferred_backup_window = Some(input.into());
            self
        }
        pub fn set_preferred_backup_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.preferred_backup_window = input;
            self
        }
        /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
        /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
        /// </p>
        /// <p>The default is a 30-minute window selected at random from an
        /// 8-hour block of time for each AWS Region, occurring on a random day of the
        /// week. To see the time blocks available, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora">
        /// Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i>
        /// </p>
        /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
        /// <p>Constraints: Minimum 30-minute window.</p>
        pub fn preferred_maintenance_window(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.preferred_maintenance_window = Some(input.into());
            self
        }
        pub fn set_preferred_maintenance_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.preferred_maintenance_window = input;
            self
        }
        /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
        /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
        /// IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i>
        /// </p>
        pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
            self.enable_iam_database_authentication = Some(input);
            self
        }
        pub fn set_enable_iam_database_authentication(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.enable_iam_database_authentication = input;
            self
        }
        /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to
        /// 0.</p>
        /// <note>
        /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
        /// </note>
        /// <p>Default: 0</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p>
        /// </li>
        /// </ul>
        pub fn backtrack_window(mut self, input: i64) -> Self {
            self.backtrack_window = Some(input);
            self
        }
        pub fn set_backtrack_window(mut self, input: std::option::Option<i64>) -> Self {
            self.backtrack_window = input;
            self
        }
        /// <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB cluster.</p>
        pub fn cloudwatch_logs_export_configuration(
            mut self,
            input: crate::model::CloudwatchLogsExportConfiguration,
        ) -> Self {
            self.cloudwatch_logs_export_configuration = Some(input);
            self
        }
        pub fn set_cloudwatch_logs_export_configuration(
            mut self,
            input: std::option::Option<crate::model::CloudwatchLogsExportConfiguration>,
        ) -> Self {
            self.cloudwatch_logs_export_configuration = input;
            self
        }
        /// <p>The version number of the database engine to which you want to upgrade.
        /// Changing this parameter results in an outage. The change is applied during
        /// the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p>
        /// <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code>
        /// </p>
        /// <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code>
        /// </p>
        /// <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code>
        /// </p>
        pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_version = Some(input.into());
            self
        }
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_version = input;
            self
        }
        /// <p>A value that indicates whether major version upgrades are allowed.</p>
        /// <p>Constraints: You must allow major version upgrades when specifying a value for the
        /// <code>EngineVersion</code> parameter that is a different major version than the DB
        /// cluster's current version.</p>
        pub fn allow_major_version_upgrade(mut self, input: bool) -> Self {
            self.allow_major_version_upgrade = Some(input);
            self
        }
        pub fn set_allow_major_version_upgrade(mut self, input: std::option::Option<bool>) -> Self {
            self.allow_major_version_upgrade = input;
            self
        }
        /// <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p>
        /// <note>
        /// <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB
        /// cluster isn't rebooted automatically. Also, parameter changes aren't
        /// applied during the next maintenance window but instead are applied immediately.</p>
        /// </note>
        /// <p>Default: The existing name setting</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p>
        /// </li>
        /// <li>
        /// <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with
        /// the <code>AllowMajorVersionUpgrade</code> parameter.</p>
        /// </li>
        /// </ul>
        pub fn db_instance_parameter_group_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_instance_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_instance_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_parameter_group_name = input;
            self
        }
        /// <p>The Active Directory directory ID to move the DB cluster to.  
        /// Specify <code>none</code> to remove the cluster from its current domain.
        /// The domain must be created prior to this operation.
        /// </p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a>
        /// in the <i>Amazon Aurora User Guide</i>.
        /// </p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain = Some(input.into());
            self
        }
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.domain = input;
            self
        }
        /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
        pub fn domain_iam_role_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain_iam_role_name = Some(input.into());
            self
        }
        pub fn set_domain_iam_role_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.domain_iam_role_name = input;
            self
        }
        /// <p>The scaling properties of the DB cluster. You can only modify scaling properties for DB clusters in <code>serverless</code> DB engine mode.</p>
        pub fn scaling_configuration(mut self, input: crate::model::ScalingConfiguration) -> Self {
            self.scaling_configuration = Some(input);
            self
        }
        pub fn set_scaling_configuration(
            mut self,
            input: std::option::Option<crate::model::ScalingConfiguration>,
        ) -> Self {
            self.scaling_configuration = input;
            self
        }
        /// <p>A value that indicates whether the DB cluster has deletion protection enabled.
        /// The database can't be deleted when deletion protection is enabled. By default,
        /// deletion protection is disabled.
        /// </p>
        pub fn deletion_protection(mut self, input: bool) -> Self {
            self.deletion_protection = Some(input);
            self
        }
        pub fn set_deletion_protection(mut self, input: std::option::Option<bool>) -> Self {
            self.deletion_protection = input;
            self
        }
        /// <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint
        /// is disabled.</p>
        /// <p>When enabled, the HTTP endpoint provides a connectionless web service API for running
        /// SQL queries on the Aurora Serverless DB cluster. You can also query your database
        /// from inside the RDS console with the query editor.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the
        /// <i>Amazon Aurora User Guide</i>.</p>
        pub fn enable_http_endpoint(mut self, input: bool) -> Self {
            self.enable_http_endpoint = Some(input);
            self
        }
        pub fn set_enable_http_endpoint(mut self, input: std::option::Option<bool>) -> Self {
            self.enable_http_endpoint = input;
            self
        }
        /// <p>A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster.
        /// The default is not to copy them.</p>
        pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
            self.copy_tags_to_snapshot = Some(input);
            self
        }
        pub fn set_copy_tags_to_snapshot(mut self, input: std::option::Option<bool>) -> Self {
            self.copy_tags_to_snapshot = input;
            self
        }
        /// <p>A value that indicates whether to enable this DB cluster to forward write operations to the primary cluster of an
        /// Aurora global database (<a>GlobalCluster</a>). By default, write operations are not allowed on Aurora DB clusters that
        /// are secondary clusters in an Aurora global database.</p>
        /// <p>You can set this value only on Aurora DB clusters that are members of an Aurora global database. With this parameter
        /// enabled, a secondary cluster can forward writes to the current primary cluster and the resulting changes are replicated back to
        /// this cluster. For the primary DB cluster of an Aurora global database, this value is used immediately if the primary is
        /// demoted by the <a>FailoverGlobalCluster</a> API operation, but it does nothing until then.
        /// </p>
        pub fn enable_global_write_forwarding(mut self, input: bool) -> Self {
            self.enable_global_write_forwarding = Some(input);
            self
        }
        pub fn set_enable_global_write_forwarding(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.enable_global_write_forwarding = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBClusterInput`](crate::input::ModifyDBClusterInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ModifyDBClusterInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ModifyDBClusterInput {
                db_cluster_identifier: self.db_cluster_identifier,
                new_db_cluster_identifier: self.new_db_cluster_identifier,
                apply_immediately: self.apply_immediately.unwrap_or_default(),
                backup_retention_period: self.backup_retention_period,
                db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
                vpc_security_group_ids: self.vpc_security_group_ids,
                port: self.port,
                master_user_password: self.master_user_password,
                option_group_name: self.option_group_name,
                preferred_backup_window: self.preferred_backup_window,
                preferred_maintenance_window: self.preferred_maintenance_window,
                enable_iam_database_authentication: self.enable_iam_database_authentication,
                backtrack_window: self.backtrack_window,
                cloudwatch_logs_export_configuration: self.cloudwatch_logs_export_configuration,
                engine_version: self.engine_version,
                allow_major_version_upgrade: self.allow_major_version_upgrade.unwrap_or_default(),
                db_instance_parameter_group_name: self.db_instance_parameter_group_name,
                domain: self.domain,
                domain_iam_role_name: self.domain_iam_role_name,
                scaling_configuration: self.scaling_configuration,
                deletion_protection: self.deletion_protection,
                enable_http_endpoint: self.enable_http_endpoint,
                copy_tags_to_snapshot: self.copy_tags_to_snapshot,
                enable_global_write_forwarding: self.enable_global_write_forwarding,
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyDBClusterInputOperationOutputAlias = crate::operation::ModifyDBCluster;
#[doc(hidden)]
pub type ModifyDBClusterInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyDBClusterInput {
    /// Consumes the builder and constructs an Operation<[`ModifyDBCluster`](crate::operation::ModifyDBCluster)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyDBCluster,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_modify_db_cluster(&self).map_err(
                |err| smithy_http::operation::BuildError::SerializationError(err.into()),
            )?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyDBCluster::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyDBCluster",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyDBClusterInput`](crate::input::ModifyDBClusterInput)
    pub fn builder() -> crate::input::modify_db_cluster_input::Builder {
        crate::input::modify_db_cluster_input::Builder::default()
    }
}

/// See [`ModifyDBClusterEndpointInput`](crate::input::ModifyDBClusterEndpointInput)
pub mod modify_db_cluster_endpoint_input {
    /// A builder for [`ModifyDBClusterEndpointInput`](crate::input::ModifyDBClusterEndpointInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_endpoint_identifier: std::option::Option<std::string::String>,
        pub(crate) endpoint_type: std::option::Option<std::string::String>,
        pub(crate) static_members: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) excluded_members: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The identifier of the endpoint to modify. This parameter is stored as a lowercase string.</p>
        pub fn db_cluster_endpoint_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_endpoint_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_endpoint_identifier = input;
            self
        }
        /// <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.</p>
        pub fn endpoint_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.endpoint_type = Some(input.into());
            self
        }
        pub fn set_endpoint_type(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.endpoint_type = input;
            self
        }
        pub fn static_members(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.static_members.unwrap_or_default();
            v.push(input.into());
            self.static_members = Some(v);
            self
        }
        pub fn set_static_members(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.static_members = input;
            self
        }
        pub fn excluded_members(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.excluded_members.unwrap_or_default();
            v.push(input.into());
            self.excluded_members = Some(v);
            self
        }
        pub fn set_excluded_members(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.excluded_members = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBClusterEndpointInput`](crate::input::ModifyDBClusterEndpointInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ModifyDBClusterEndpointInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ModifyDBClusterEndpointInput {
                db_cluster_endpoint_identifier: self.db_cluster_endpoint_identifier,
                endpoint_type: self.endpoint_type,
                static_members: self.static_members,
                excluded_members: self.excluded_members,
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyDBClusterEndpointInputOperationOutputAlias =
    crate::operation::ModifyDBClusterEndpoint;
#[doc(hidden)]
pub type ModifyDBClusterEndpointInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyDBClusterEndpointInput {
    /// Consumes the builder and constructs an Operation<[`ModifyDBClusterEndpoint`](crate::operation::ModifyDBClusterEndpoint)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyDBClusterEndpoint,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_modify_db_cluster_endpoint(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyDBClusterEndpoint::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyDBClusterEndpoint",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyDBClusterEndpointInput`](crate::input::ModifyDBClusterEndpointInput)
    pub fn builder() -> crate::input::modify_db_cluster_endpoint_input::Builder {
        crate::input::modify_db_cluster_endpoint_input::Builder::default()
    }
}

/// See [`ModifyDBClusterParameterGroupInput`](crate::input::ModifyDBClusterParameterGroupInput)
pub mod modify_db_cluster_parameter_group_input {
    /// A builder for [`ModifyDBClusterParameterGroupInput`](crate::input::ModifyDBClusterParameterGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) parameters: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
    }
    impl Builder {
        /// <p>The name of the DB cluster parameter group to modify.</p>
        pub fn db_cluster_parameter_group_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_cluster_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = input;
            self
        }
        pub fn parameters(mut self, input: impl Into<crate::model::Parameter>) -> Self {
            let mut v = self.parameters.unwrap_or_default();
            v.push(input.into());
            self.parameters = Some(v);
            self
        }
        pub fn set_parameters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
        ) -> Self {
            self.parameters = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBClusterParameterGroupInput`](crate::input::ModifyDBClusterParameterGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ModifyDBClusterParameterGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ModifyDBClusterParameterGroupInput {
                db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
                parameters: self.parameters,
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyDBClusterParameterGroupInputOperationOutputAlias =
    crate::operation::ModifyDBClusterParameterGroup;
#[doc(hidden)]
pub type ModifyDBClusterParameterGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyDBClusterParameterGroupInput {
    /// Consumes the builder and constructs an Operation<[`ModifyDBClusterParameterGroup`](crate::operation::ModifyDBClusterParameterGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyDBClusterParameterGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_modify_db_cluster_parameter_group(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyDBClusterParameterGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyDBClusterParameterGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyDBClusterParameterGroupInput`](crate::input::ModifyDBClusterParameterGroupInput)
    pub fn builder() -> crate::input::modify_db_cluster_parameter_group_input::Builder {
        crate::input::modify_db_cluster_parameter_group_input::Builder::default()
    }
}

/// See [`ModifyDBClusterSnapshotAttributeInput`](crate::input::ModifyDBClusterSnapshotAttributeInput)
pub mod modify_db_cluster_snapshot_attribute_input {
    /// A builder for [`ModifyDBClusterSnapshotAttributeInput`](crate::input::ModifyDBClusterSnapshotAttributeInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
        pub(crate) attribute_name: std::option::Option<std::string::String>,
        pub(crate) values_to_add: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) values_to_remove: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The identifier for the DB cluster snapshot to modify the attributes for.</p>
        pub fn db_cluster_snapshot_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_snapshot_identifier = input;
            self
        }
        /// <p>The name of the DB cluster snapshot attribute to modify.</p>
        /// <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot,
        /// set this value to <code>restore</code>.</p>
        /// <note>
        /// <p>To view the list of attributes available to modify, use the
        /// <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
        /// </note>
        pub fn attribute_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.attribute_name = Some(input.into());
            self
        }
        pub fn set_attribute_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.attribute_name = input;
            self
        }
        pub fn values_to_add(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.values_to_add.unwrap_or_default();
            v.push(input.into());
            self.values_to_add = Some(v);
            self
        }
        pub fn set_values_to_add(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.values_to_add = input;
            self
        }
        pub fn values_to_remove(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.values_to_remove.unwrap_or_default();
            v.push(input.into());
            self.values_to_remove = Some(v);
            self
        }
        pub fn set_values_to_remove(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.values_to_remove = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBClusterSnapshotAttributeInput`](crate::input::ModifyDBClusterSnapshotAttributeInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ModifyDBClusterSnapshotAttributeInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ModifyDBClusterSnapshotAttributeInput {
                db_cluster_snapshot_identifier: self.db_cluster_snapshot_identifier,
                attribute_name: self.attribute_name,
                values_to_add: self.values_to_add,
                values_to_remove: self.values_to_remove,
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyDBClusterSnapshotAttributeInputOperationOutputAlias =
    crate::operation::ModifyDBClusterSnapshotAttribute;
#[doc(hidden)]
pub type ModifyDBClusterSnapshotAttributeInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyDBClusterSnapshotAttributeInput {
    /// Consumes the builder and constructs an Operation<[`ModifyDBClusterSnapshotAttribute`](crate::operation::ModifyDBClusterSnapshotAttribute)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyDBClusterSnapshotAttribute,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_modify_db_cluster_snapshot_attribute(
                    &self,
                )
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyDBClusterSnapshotAttribute::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyDBClusterSnapshotAttribute",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyDBClusterSnapshotAttributeInput`](crate::input::ModifyDBClusterSnapshotAttributeInput)
    pub fn builder() -> crate::input::modify_db_cluster_snapshot_attribute_input::Builder {
        crate::input::modify_db_cluster_snapshot_attribute_input::Builder::default()
    }
}

/// See [`ModifyDBInstanceInput`](crate::input::ModifyDBInstanceInput)
pub mod modify_db_instance_input {
    /// A builder for [`ModifyDBInstanceInput`](crate::input::ModifyDBInstanceInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) allocated_storage: std::option::Option<i32>,
        pub(crate) db_instance_class: std::option::Option<std::string::String>,
        pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
        pub(crate) db_security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) apply_immediately: std::option::Option<bool>,
        pub(crate) master_user_password: std::option::Option<std::string::String>,
        pub(crate) db_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) backup_retention_period: std::option::Option<i32>,
        pub(crate) preferred_backup_window: std::option::Option<std::string::String>,
        pub(crate) preferred_maintenance_window: std::option::Option<std::string::String>,
        pub(crate) multi_az: std::option::Option<bool>,
        pub(crate) engine_version: std::option::Option<std::string::String>,
        pub(crate) allow_major_version_upgrade: std::option::Option<bool>,
        pub(crate) auto_minor_version_upgrade: std::option::Option<bool>,
        pub(crate) license_model: std::option::Option<std::string::String>,
        pub(crate) iops: std::option::Option<i32>,
        pub(crate) option_group_name: std::option::Option<std::string::String>,
        pub(crate) new_db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) storage_type: std::option::Option<std::string::String>,
        pub(crate) tde_credential_arn: std::option::Option<std::string::String>,
        pub(crate) tde_credential_password: std::option::Option<std::string::String>,
        pub(crate) ca_certificate_identifier: std::option::Option<std::string::String>,
        pub(crate) domain: std::option::Option<std::string::String>,
        pub(crate) copy_tags_to_snapshot: std::option::Option<bool>,
        pub(crate) monitoring_interval: std::option::Option<i32>,
        pub(crate) db_port_number: std::option::Option<i32>,
        pub(crate) publicly_accessible: std::option::Option<bool>,
        pub(crate) monitoring_role_arn: std::option::Option<std::string::String>,
        pub(crate) domain_iam_role_name: std::option::Option<std::string::String>,
        pub(crate) promotion_tier: std::option::Option<i32>,
        pub(crate) enable_iam_database_authentication: std::option::Option<bool>,
        pub(crate) enable_performance_insights: std::option::Option<bool>,
        pub(crate) performance_insights_kms_key_id: std::option::Option<std::string::String>,
        pub(crate) performance_insights_retention_period: std::option::Option<i32>,
        pub(crate) cloudwatch_logs_export_configuration:
            std::option::Option<crate::model::CloudwatchLogsExportConfiguration>,
        pub(crate) processor_features:
            std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
        pub(crate) use_default_processor_features: std::option::Option<bool>,
        pub(crate) deletion_protection: std::option::Option<bool>,
        pub(crate) max_allocated_storage: std::option::Option<i32>,
        pub(crate) certificate_rotation_restart: std::option::Option<bool>,
        pub(crate) replica_mode: std::option::Option<crate::model::ReplicaMode>,
        pub(crate) enable_customer_owned_ip: std::option::Option<bool>,
        pub(crate) aws_backup_recovery_point_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The DB instance identifier. This value is stored as a lowercase string.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the identifier of an existing DBInstance.</p>
        /// </li>
        /// </ul>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        /// <p>The new amount of storage (in gibibytes) to allocate for the DB instance.
        /// </p>
        /// <p>For MariaDB, MySQL, Oracle, and PostgreSQL,
        /// the value supplied must be at least 10% greater than the current value.
        /// Values that are not at least 10% greater than the existing value are rounded up
        /// so that they are 10% greater than the current value.
        /// </p>
        /// <p>For the valid values for allocated storage for each engine,
        /// see <code>CreateDBInstance</code>.
        /// </p>
        pub fn allocated_storage(mut self, input: i32) -> Self {
            self.allocated_storage = Some(input);
            self
        }
        pub fn set_allocated_storage(mut self, input: std::option::Option<i32>) -> Self {
            self.allocated_storage = input;
            self
        }
        /// <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>.
        /// Not all DB instance classes are available in all AWS Regions, or for all database engines.
        /// For the full list of DB instance classes,
        /// and availability for your engine, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>If you modify the DB instance class, an outage occurs during the change.
        /// The change is applied during the next maintenance window,
        /// unless <code>ApplyImmediately</code> is enabled for this request.
        /// </p>
        /// <p>Default: Uses existing setting</p>
        pub fn db_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_class = Some(input.into());
            self
        }
        pub fn set_db_instance_class(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_class = input;
            self
        }
        /// <p>The new DB subnet group for the DB instance.
        /// You can use this parameter to move your DB instance to a different VPC.
        /// If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC.
        /// For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Working with a DB instance in a VPC</a>
        /// in the <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>Changing the subnet group causes an outage during the change.
        /// The change is applied during the next maintenance window,
        /// unless you enable <code>ApplyImmediately</code>.
        /// </p>
        /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
        /// <p>Example: <code>mySubnetGroup</code>
        /// </p>
        pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_subnet_group_name = Some(input.into());
            self
        }
        pub fn set_db_subnet_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_subnet_group_name = input;
            self
        }
        pub fn db_security_groups(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.db_security_groups.unwrap_or_default();
            v.push(input.into());
            self.db_security_groups = Some(v);
            self
        }
        pub fn set_db_security_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.db_security_groups = input;
            self
        }
        pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.vpc_security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.vpc_security_group_ids = Some(v);
            self
        }
        pub fn set_vpc_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.vpc_security_group_ids = input;
            self
        }
        /// <p>A value that indicates whether the modifications in this request and
        /// any pending modifications are asynchronously applied
        /// as soon as possible, regardless of the
        /// <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is
        /// disabled.
        /// </p>
        /// <p>
        /// If this parameter is disabled, changes to the
        /// DB instance are applied during the next maintenance window. Some parameter changes can cause an outage
        /// and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.
        /// Review the table of parameters in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a>
        /// in the <i>Amazon RDS User Guide.</i> to see the impact of enabling
        /// or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied.
        /// </p>
        pub fn apply_immediately(mut self, input: bool) -> Self {
            self.apply_immediately = Some(input);
            self
        }
        pub fn set_apply_immediately(mut self, input: std::option::Option<bool>) -> Self {
            self.apply_immediately = input;
            self
        }
        /// <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p>
        /// <p>
        /// Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
        /// Between the time of the request and the completion of the request,
        /// the <code>MasterUserPassword</code> element exists in the
        /// <code>PendingModifiedValues</code> element of the operation response.
        /// </p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>Not applicable. The password for the master user is managed by the DB cluster. For
        /// more information, see <code>ModifyDBCluster</code>.
        /// </p>
        /// <p>Default: Uses existing setting</p>
        /// <p>
        /// <b>MariaDB</b>
        /// </p>
        /// <p>Constraints: Must contain from 8 to 41 characters.</p>
        /// <p>
        /// <b>Microsoft SQL Server</b>
        /// </p>
        /// <p>Constraints: Must contain from 8 to 128 characters.</p>
        /// <p>
        /// <b>MySQL</b>
        /// </p>
        /// <p>Constraints: Must contain from 8 to 41 characters.</p>
        /// <p>
        /// <b>Oracle</b>
        /// </p>
        /// <p>Constraints: Must contain from 8 to 30 characters.</p>
        /// <p>
        /// <b>PostgreSQL</b>
        /// </p>
        /// <p>Constraints: Must contain from 8 to 128 characters.</p>
        /// <note>
        /// <p>Amazon RDS API actions never return the password,
        /// so this action provides a way to regain access to a primary instance user if the password is lost.
        /// This includes restoring privileges that might have been accidentally revoked.
        /// </p>
        /// </note>
        pub fn master_user_password(mut self, input: impl Into<std::string::String>) -> Self {
            self.master_user_password = Some(input.into());
            self
        }
        pub fn set_master_user_password(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.master_user_password = input;
            self
        }
        /// <p>The name of the DB parameter group to apply to the DB instance. Changing this
        /// setting doesn't result in an outage. The parameter group name itself is changed
        /// immediately, but the actual parameter changes are not applied until you reboot the
        /// instance without failover. In this case, the DB instance isn't rebooted automatically and the
        /// parameter changes isn't applied during the next maintenance window.</p>
        /// <p>Default: Uses existing setting</p>
        /// <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
        pub fn db_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_name = input;
            self
        }
        /// <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p>
        /// <note>
        /// <p>Enabling and disabling backups can result in a brief I/O suspension that lasts from a few seconds to a few minutes, depending on the size and class of your DB instance.</p>
        /// </note>
        /// <p>These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled
        /// for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously
        /// applied as soon as possible.</p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>Not applicable. The retention period for automated backups is managed by the DB
        /// cluster. For more information, see <code>ModifyDBCluster</code>.</p>
        /// <p>Default: Uses existing setting</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be a value from 0 to 35</p>
        /// </li>
        /// <li>
        /// <p>Can be specified for a MySQL read replica only if the source is running MySQL 5.6 or
        /// later</p>
        /// </li>
        /// <li>
        /// <p>Can be specified for a PostgreSQL read replica only if the source is running PostgreSQL
        /// 9.3.5</p>
        /// </li>
        /// <li>
        /// <p>Can't be set to 0 if the DB instance is a source to read replicas</p>
        /// </li>
        /// </ul>
        pub fn backup_retention_period(mut self, input: i32) -> Self {
            self.backup_retention_period = Some(input);
            self
        }
        pub fn set_backup_retention_period(mut self, input: std::option::Option<i32>) -> Self {
            self.backup_retention_period = input;
            self
        }
        /// <p>
        /// The daily time range during which automated backups are created
        /// if automated backups are enabled,
        /// as determined by the <code>BackupRetentionPeriod</code> parameter.
        /// Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
        /// The default is a 30-minute window selected at random from an
        /// 8-hour block of time for each AWS Region. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup window</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>Not applicable. The daily time range for creating automated backups is managed by
        /// the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be in the format hh24:mi-hh24:mi</p>
        /// </li>
        /// <li>
        /// <p>Must be in Universal Time Coordinated (UTC)</p>
        /// </li>
        /// <li>
        /// <p>Must not conflict with the preferred maintenance window</p>
        /// </li>
        /// <li>
        /// <p>Must be at least 30 minutes</p>
        /// </li>
        /// </ul>
        pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
            self.preferred_backup_window = Some(input.into());
            self
        }
        pub fn set_preferred_backup_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.preferred_backup_window = input;
            self
        }
        /// <p>The weekly time range (in UTC) during which system maintenance can occur, which
        /// might result in an outage. Changing this parameter doesn't result in an outage, except
        /// in the following situation, and the change is asynchronously applied as soon as
        /// possible. If there are pending actions that cause a reboot, and the maintenance window
        /// is changed to include the current time, then changing this parameter will cause a reboot
        /// of the DB instance. If moving this window to the current time, there must be at least 30
        /// minutes between the current time and end of the window to ensure pending changes are
        /// applied.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>Default: Uses existing setting</p>
        /// <p>Format: ddd:hh24:mi-ddd:hh24:mi</p>
        /// <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p>
        /// <p>Constraints: Must be at least 30 minutes</p>
        pub fn preferred_maintenance_window(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.preferred_maintenance_window = Some(input.into());
            self
        }
        pub fn set_preferred_maintenance_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.preferred_maintenance_window = input;
            self
        }
        /// <p>A value that indicates whether the DB instance is a Multi-AZ deployment.
        /// Changing this parameter doesn't result in an outage and the change
        /// is applied during the next maintenance window
        /// unless the <code>ApplyImmediately</code> parameter is
        /// enabled for this request.
        /// </p>
        pub fn multi_az(mut self, input: bool) -> Self {
            self.multi_az = Some(input);
            self
        }
        pub fn set_multi_az(mut self, input: std::option::Option<bool>) -> Self {
            self.multi_az = input;
            self
        }
        /// <p>
        /// The version number of the database engine to upgrade to.
        /// Changing this parameter results in an outage and the change
        /// is applied during the next maintenance window
        /// unless the <code>ApplyImmediately</code> parameter is enabled for this request.
        /// </p>
        /// <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a
        /// new DB parameter group in the DB parameter group family for the new engine version must
        /// be specified. The new DB parameter group can be the default for that DB parameter group
        /// family.</p>
        /// <p>If you specify only a major version, Amazon RDS will update the DB instance to the
        /// default minor version if the current minor version is lower.
        /// For information about valid engine versions, see <code>CreateDBInstance</code>,
        /// or call <code>DescribeDBEngineVersions</code>.</p>
        pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_version = Some(input.into());
            self
        }
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_version = input;
            self
        }
        /// <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p>
        /// <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
        pub fn allow_major_version_upgrade(mut self, input: bool) -> Self {
            self.allow_major_version_upgrade = Some(input);
            self
        }
        pub fn set_allow_major_version_upgrade(mut self, input: std::option::Option<bool>) -> Self {
            self.allow_major_version_upgrade = input;
            self
        }
        /// <p>
        /// A value that indicates whether minor version upgrades are applied automatically
        /// to the DB instance during the maintenance window.
        /// Changing this parameter doesn't result in an outage except in the following case
        /// and the change is asynchronously applied as soon as possible.
        /// An outage results if this parameter is enabled during the maintenance window,
        /// and a newer minor version is available, and RDS has enabled auto patching for that engine version.
        /// </p>
        pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
            self.auto_minor_version_upgrade = Some(input);
            self
        }
        pub fn set_auto_minor_version_upgrade(mut self, input: std::option::Option<bool>) -> Self {
            self.auto_minor_version_upgrade = input;
            self
        }
        /// <p>The license model for the DB instance.</p>
        /// <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> |
        /// <code>general-public-license</code>
        /// </p>
        pub fn license_model(mut self, input: impl Into<std::string::String>) -> Self {
            self.license_model = Some(input.into());
            self
        }
        pub fn set_license_model(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.license_model = input;
            self
        }
        /// <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance.
        /// </p>
        /// <p>Changing this setting doesn't result in an outage and
        /// the change is applied during the next maintenance window
        /// unless the <code>ApplyImmediately</code> parameter is enabled for this request.
        /// If you are migrating from Provisioned IOPS to standard storage, set this value to 0.
        /// The DB instance will require a reboot for the change in storage type to take effect.
        /// </p>
        /// <p>If you choose to migrate your DB instance from using standard storage to using
        /// Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process
        /// can take time. The duration of the migration depends on several factors such as database
        /// load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS
        /// provisioned (if any), and the number of prior scale storage operations. Typical
        /// migration times are under 24 hours, but the process can take up to several days in some
        /// cases. During the migration, the DB instance is available for use, but might experience
        /// performance degradation. While the migration takes place, nightly backups for the
        /// instance are suspended. No other Amazon RDS operations can take place for the instance,
        /// including modifying the instance, rebooting the instance, deleting the instance,
        /// creating a read replica for the instance, and creating a DB snapshot of the instance. </p>
        /// <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL,
        /// the value supplied must be at least 10% greater than the current value.
        /// Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value.
        /// </p>
        /// <p>Default: Uses existing setting</p>
        pub fn iops(mut self, input: i32) -> Self {
            self.iops = Some(input);
            self
        }
        pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
            self.iops = input;
            self
        }
        /// <p>
        /// A value that indicates the DB instance should be associated with the specified option group.
        /// Changing this parameter doesn't result in an outage except in the following case and the change
        /// is applied during the next maintenance window
        /// unless the <code>ApplyImmediately</code> parameter is enabled
        /// for this request. If the parameter change results in an option group that
        /// enables OEM, this change can cause a brief (sub-second) period during which new connections
        /// are rejected but existing connections are not interrupted.
        /// </p>
        /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        /// <p>
        /// The new DB instance identifier for the DB instance when renaming a DB
        /// instance. When you change the DB instance identifier, an instance
        /// reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur
        /// during the next maintenance window if you disable Apply Immediately. This value is stored
        /// as a lowercase string.
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>The first character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>mydbinstance</code>
        /// </p>
        pub fn new_db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.new_db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_new_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.new_db_instance_identifier = input;
            self
        }
        /// <p>Specifies the storage type to be associated with the DB instance.
        /// </p>
        /// <p>If you specify Provisioned IOPS (<code>io1</code>),
        /// you must also include a value for the <code>Iops</code> parameter.
        /// </p>
        /// <p>If you choose to migrate your DB instance from using standard storage to using
        /// Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process
        /// can take time. The duration of the migration depends on several factors such as database
        /// load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS
        /// provisioned (if any), and the number of prior scale storage operations. Typical
        /// migration times are under 24 hours, but the process can take up to several days in some
        /// cases. During the migration, the DB instance is available for use, but might experience
        /// performance degradation. While the migration takes place, nightly backups for the
        /// instance are suspended. No other Amazon RDS operations can take place for the instance,
        /// including modifying the instance, rebooting the instance, deleting the instance,
        /// creating a read replica for the instance, and creating a DB snapshot of the instance. </p>
        /// <p>
        /// Valid values: <code>standard | gp2 | io1</code>
        /// </p>
        /// <p>Default: <code>io1</code> if the <code>Iops</code> parameter
        /// is specified, otherwise <code>gp2</code>
        /// </p>
        pub fn storage_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.storage_type = Some(input.into());
            self
        }
        pub fn set_storage_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.storage_type = input;
            self
        }
        /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
        pub fn tde_credential_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.tde_credential_arn = Some(input.into());
            self
        }
        pub fn set_tde_credential_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.tde_credential_arn = input;
            self
        }
        /// <p>The password for the given ARN from the key store in order to access the device.</p>
        pub fn tde_credential_password(mut self, input: impl Into<std::string::String>) -> Self {
            self.tde_credential_password = Some(input.into());
            self
        }
        pub fn set_tde_credential_password(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.tde_credential_password = input;
            self
        }
        /// <p>Indicates the certificate that needs to be associated with the instance.</p>
        pub fn ca_certificate_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.ca_certificate_identifier = Some(input.into());
            self
        }
        pub fn set_ca_certificate_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.ca_certificate_identifier = input;
            self
        }
        /// <p>The Active Directory directory ID to move the DB instance to.  
        /// Specify <code>none</code> to remove the instance from its current domain.
        /// The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL
        /// Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
        /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain = Some(input.into());
            self
        }
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.domain = input;
            self
        }
        /// <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this
        /// value for an Aurora DB instance has no effect on the DB cluster setting. For more
        /// information, see <code>ModifyDBCluster</code>.</p>
        pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
            self.copy_tags_to_snapshot = Some(input);
            self
        }
        pub fn set_copy_tags_to_snapshot(mut self, input: std::option::Option<bool>) -> Self {
            self.copy_tags_to_snapshot = input;
            self
        }
        /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p>
        /// <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code>
        /// to a value other than 0.</p>
        /// <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code>
        /// </p>
        pub fn monitoring_interval(mut self, input: i32) -> Self {
            self.monitoring_interval = Some(input);
            self
        }
        pub fn set_monitoring_interval(mut self, input: std::option::Option<i32>) -> Self {
            self.monitoring_interval = input;
            self
        }
        /// <p>The port number on which the database accepts connections.</p>
        /// <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option
        /// group for the DB instance.</p>
        /// <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code>
        /// parameter.</p>
        /// <p>
        /// <b>MySQL</b>
        /// </p>
        /// <p>
        /// Default: <code>3306</code>
        /// </p>
        /// <p> Valid values: <code>1150-65535</code>
        /// </p>
        /// <p>
        /// <b>MariaDB</b>
        /// </p>
        /// <p>
        /// Default: <code>3306</code>
        /// </p>
        /// <p> Valid values: <code>1150-65535</code>
        /// </p>
        /// <p>
        /// <b>PostgreSQL</b>
        /// </p>
        /// <p>
        /// Default: <code>5432</code>
        /// </p>
        /// <p> Valid values: <code>1150-65535</code>
        /// </p>
        /// <p>Type: Integer</p>
        /// <p>
        /// <b>Oracle</b>
        /// </p>
        /// <p>
        /// Default: <code>1521</code>
        /// </p>
        /// <p> Valid values: <code>1150-65535</code>
        /// </p>
        /// <p>
        /// <b>SQL Server</b>
        /// </p>
        /// <p>
        /// Default: <code>1433</code>
        /// </p>
        /// <p> Valid values: <code>1150-65535</code> except <code>1234</code>, <code>1434</code>,
        /// <code>3260</code>, <code>3343</code>, <code>3389</code>, <code>47001</code>, and
        /// <code>49152-49156</code>.</p>
        /// <p>
        /// <b>Amazon Aurora</b>
        /// </p>
        /// <p>
        /// Default: <code>3306</code>
        /// </p>
        /// <p> Valid values: <code>1150-65535</code>
        /// </p>
        pub fn db_port_number(mut self, input: i32) -> Self {
            self.db_port_number = Some(input);
            self
        }
        pub fn set_db_port_number(mut self, input: std::option::Option<i32>) -> Self {
            self.db_port_number = input;
            self
        }
        /// <p>A value that indicates whether the DB instance is publicly accessible.
        /// </p>
        /// <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC,
        /// and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses,
        /// and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
        /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>  
        /// <p>
        /// <code>PubliclyAccessible</code> only applies to DB instances in a VPC.
        /// The DB instance must be part of a public subnet and
        /// <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible.
        /// </p>
        /// <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless
        /// of the value of the <code>ApplyImmediately</code> parameter.</p>
        pub fn publicly_accessible(mut self, input: bool) -> Self {
            self.publicly_accessible = Some(input);
            self
        }
        pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
            self.publicly_accessible = input;
            self
        }
        /// <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For
        /// example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role,
        /// go to <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To
        /// create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
        pub fn monitoring_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.monitoring_role_arn = Some(input.into());
            self
        }
        pub fn set_monitoring_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.monitoring_role_arn = input;
            self
        }
        /// <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
        pub fn domain_iam_role_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain_iam_role_name = Some(input.into());
            self
        }
        pub fn set_domain_iam_role_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.domain_iam_role_name = input;
            self
        }
        /// <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance
        /// after a failure of the existing primary instance. For more information,
        /// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance">
        /// Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.
        /// </p>
        /// <p>Default: 1</p>
        /// <p>Valid Values: 0 - 15</p>
        pub fn promotion_tier(mut self, input: i32) -> Self {
            self.promotion_tier = Some(input);
            self
        }
        pub fn set_promotion_tier(mut self, input: std::option::Option<i32>) -> Self {
            self.promotion_tier = input;
            self
        }
        /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
        /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
        /// <p>This setting doesn't apply to Amazon Aurora. Mapping AWS IAM accounts to database accounts is managed by the DB
        /// cluster.</p>
        /// <p>For more information about IAM database authentication, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
        /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
            self.enable_iam_database_authentication = Some(input);
            self
        }
        pub fn set_enable_iam_database_authentication(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.enable_iam_database_authentication = input;
            self
        }
        /// <p>A value that indicates whether to enable Performance Insights for the DB instance.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service
        /// User Guide</i>.
        /// </p>
        pub fn enable_performance_insights(mut self, input: bool) -> Self {
            self.enable_performance_insights = Some(input);
            self
        }
        pub fn set_enable_performance_insights(mut self, input: std::option::Option<bool>) -> Self {
            self.enable_performance_insights = input;
            self
        }
        /// <p>The AWS KMS key identifier for encryption of Performance Insights data.</p>
        /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).</p>
        /// <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS
        /// uses your default CMK. There is a default CMK for your AWS account.
        /// Your AWS account has a different default CMK for each AWS Region.</p>
        pub fn performance_insights_kms_key_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.performance_insights_kms_key_id = Some(input.into());
            self
        }
        pub fn set_performance_insights_kms_key_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.performance_insights_kms_key_id = input;
            self
        }
        /// <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). </p>
        pub fn performance_insights_retention_period(mut self, input: i32) -> Self {
            self.performance_insights_retention_period = Some(input);
            self
        }
        pub fn set_performance_insights_retention_period(
            mut self,
            input: std::option::Option<i32>,
        ) -> Self {
            self.performance_insights_retention_period = input;
            self
        }
        /// <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance.</p>
        /// <p>A change to the <code>CloudwatchLogsExportConfiguration</code> parameter is always applied to the DB instance
        /// immediately. Therefore, the <code>ApplyImmediately</code> parameter has no effect.</p>
        pub fn cloudwatch_logs_export_configuration(
            mut self,
            input: crate::model::CloudwatchLogsExportConfiguration,
        ) -> Self {
            self.cloudwatch_logs_export_configuration = Some(input);
            self
        }
        pub fn set_cloudwatch_logs_export_configuration(
            mut self,
            input: std::option::Option<crate::model::CloudwatchLogsExportConfiguration>,
        ) -> Self {
            self.cloudwatch_logs_export_configuration = input;
            self
        }
        pub fn processor_features(
            mut self,
            input: impl Into<crate::model::ProcessorFeature>,
        ) -> Self {
            let mut v = self.processor_features.unwrap_or_default();
            v.push(input.into());
            self.processor_features = Some(v);
            self
        }
        pub fn set_processor_features(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
        ) -> Self {
            self.processor_features = input;
            self
        }
        /// <p>A value that indicates whether the DB instance class of the DB instance uses its default
        /// processor features.</p>
        pub fn use_default_processor_features(mut self, input: bool) -> Self {
            self.use_default_processor_features = Some(input);
            self
        }
        pub fn set_use_default_processor_features(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.use_default_processor_features = input;
            self
        }
        /// <p>A value that indicates whether the DB instance has deletion protection enabled.
        /// The database can't be deleted when deletion protection is enabled. By default,
        /// deletion protection is disabled. For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
        /// Deleting a DB Instance</a>.
        /// </p>
        pub fn deletion_protection(mut self, input: bool) -> Self {
            self.deletion_protection = Some(input);
            self
        }
        pub fn set_deletion_protection(mut self, input: std::option::Option<bool>) -> Self {
            self.deletion_protection = input;
            self
        }
        /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.</p>
        /// <p>For more information about this setting, including limitations that apply to it, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
        /// Managing capacity automatically with Amazon RDS storage autoscaling</a>
        /// in the <i>Amazon RDS User Guide</i>.</p>
        pub fn max_allocated_storage(mut self, input: i32) -> Self {
            self.max_allocated_storage = Some(input);
            self
        }
        pub fn set_max_allocated_storage(mut self, input: std::option::Option<i32>) -> Self {
            self.max_allocated_storage = input;
            self
        }
        /// <p>A value that indicates whether the DB instance is restarted when you rotate your
        /// SSL/TLS certificate.</p>
        /// <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate
        /// is not updated until the DB instance is restarted.</p>
        /// <important>
        /// <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p>
        /// </important>
        /// <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your
        /// DB engine to rotate your SSL/TLS certificate:</p>
        /// <ul>
        /// <li>
        /// <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html">
        /// Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        /// </li>
        /// <li>
        /// <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html">
        /// Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i>
        /// </p>
        /// </li>
        /// </ul>
        pub fn certificate_rotation_restart(mut self, input: bool) -> Self {
            self.certificate_rotation_restart = Some(input);
            self
        }
        pub fn set_certificate_rotation_restart(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.certificate_rotation_restart = input;
            self
        }
        /// <p>A value that sets the open mode of a replica database to either mounted or read-only.</p>
        /// <note>
        /// <p>Currently, this parameter is only supported for Oracle DB instances.</p>
        /// </note>
        /// <p>Mounted DB replicas are included in Oracle Enterprise Edition. The main use case for
        /// mounted replicas is cross-Region disaster recovery. The primary database doesn't use
        /// Active Data Guard to transmit information to the mounted replica. Because it doesn't
        /// accept user connections, a mounted replica can't serve a read-only workload.
        /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working with Oracle Read Replicas for Amazon RDS</a>
        /// in the <i>Amazon RDS User Guide</i>.</p>
        pub fn replica_mode(mut self, input: crate::model::ReplicaMode) -> Self {
            self.replica_mode = Some(input);
            self
        }
        pub fn set_replica_mode(
            mut self,
            input: std::option::Option<crate::model::ReplicaMode>,
        ) -> Self {
            self.replica_mode = input;
            self
        }
        /// <p>A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
        /// <p>A <i>CoIP</i> provides local or external connectivity to resources in
        /// your Outpost subnets through your on-premises network. For some use cases, a CoIP can
        /// provide lower latency for connections to the DB instance from outside of its virtual
        /// private cloud (VPC) on your local network.</p>
        /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on AWS Outposts</a>
        /// in the <i>Amazon RDS User Guide</i>.</p>
        /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a>
        /// in the <i>AWS Outposts User Guide</i>.</p>
        pub fn enable_customer_owned_ip(mut self, input: bool) -> Self {
            self.enable_customer_owned_ip = Some(input);
            self
        }
        pub fn set_enable_customer_owned_ip(mut self, input: std::option::Option<bool>) -> Self {
            self.enable_customer_owned_ip = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the recovery point in AWS Backup.</p>
        pub fn aws_backup_recovery_point_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.aws_backup_recovery_point_arn = Some(input.into());
            self
        }
        pub fn set_aws_backup_recovery_point_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.aws_backup_recovery_point_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBInstanceInput`](crate::input::ModifyDBInstanceInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ModifyDBInstanceInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ModifyDBInstanceInput {
                db_instance_identifier: self.db_instance_identifier,
                allocated_storage: self.allocated_storage,
                db_instance_class: self.db_instance_class,
                db_subnet_group_name: self.db_subnet_group_name,
                db_security_groups: self.db_security_groups,
                vpc_security_group_ids: self.vpc_security_group_ids,
                apply_immediately: self.apply_immediately.unwrap_or_default(),
                master_user_password: self.master_user_password,
                db_parameter_group_name: self.db_parameter_group_name,
                backup_retention_period: self.backup_retention_period,
                preferred_backup_window: self.preferred_backup_window,
                preferred_maintenance_window: self.preferred_maintenance_window,
                multi_az: self.multi_az,
                engine_version: self.engine_version,
                allow_major_version_upgrade: self.allow_major_version_upgrade.unwrap_or_default(),
                auto_minor_version_upgrade: self.auto_minor_version_upgrade,
                license_model: self.license_model,
                iops: self.iops,
                option_group_name: self.option_group_name,
                new_db_instance_identifier: self.new_db_instance_identifier,
                storage_type: self.storage_type,
                tde_credential_arn: self.tde_credential_arn,
                tde_credential_password: self.tde_credential_password,
                ca_certificate_identifier: self.ca_certificate_identifier,
                domain: self.domain,
                copy_tags_to_snapshot: self.copy_tags_to_snapshot,
                monitoring_interval: self.monitoring_interval,
                db_port_number: self.db_port_number,
                publicly_accessible: self.publicly_accessible,
                monitoring_role_arn: self.monitoring_role_arn,
                domain_iam_role_name: self.domain_iam_role_name,
                promotion_tier: self.promotion_tier,
                enable_iam_database_authentication: self.enable_iam_database_authentication,
                enable_performance_insights: self.enable_performance_insights,
                performance_insights_kms_key_id: self.performance_insights_kms_key_id,
                performance_insights_retention_period: self.performance_insights_retention_period,
                cloudwatch_logs_export_configuration: self.cloudwatch_logs_export_configuration,
                processor_features: self.processor_features,
                use_default_processor_features: self.use_default_processor_features,
                deletion_protection: self.deletion_protection,
                max_allocated_storage: self.max_allocated_storage,
                certificate_rotation_restart: self.certificate_rotation_restart,
                replica_mode: self.replica_mode,
                enable_customer_owned_ip: self.enable_customer_owned_ip,
                aws_backup_recovery_point_arn: self.aws_backup_recovery_point_arn,
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyDBInstanceInputOperationOutputAlias = crate::operation::ModifyDBInstance;
#[doc(hidden)]
pub type ModifyDBInstanceInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyDBInstanceInput {
    /// Consumes the builder and constructs an Operation<[`ModifyDBInstance`](crate::operation::ModifyDBInstance)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyDBInstance,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_modify_db_instance(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyDBInstance::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyDBInstance",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyDBInstanceInput`](crate::input::ModifyDBInstanceInput)
    pub fn builder() -> crate::input::modify_db_instance_input::Builder {
        crate::input::modify_db_instance_input::Builder::default()
    }
}

/// See [`ModifyDBParameterGroupInput`](crate::input::ModifyDBParameterGroupInput)
pub mod modify_db_parameter_group_input {
    /// A builder for [`ModifyDBParameterGroupInput`](crate::input::ModifyDBParameterGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) parameters: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
    }
    impl Builder {
        /// <p>The name of the DB parameter group.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p>
        /// </li>
        /// </ul>
        pub fn db_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_name = input;
            self
        }
        pub fn parameters(mut self, input: impl Into<crate::model::Parameter>) -> Self {
            let mut v = self.parameters.unwrap_or_default();
            v.push(input.into());
            self.parameters = Some(v);
            self
        }
        pub fn set_parameters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
        ) -> Self {
            self.parameters = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBParameterGroupInput`](crate::input::ModifyDBParameterGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ModifyDBParameterGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ModifyDBParameterGroupInput {
                db_parameter_group_name: self.db_parameter_group_name,
                parameters: self.parameters,
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyDBParameterGroupInputOperationOutputAlias = crate::operation::ModifyDBParameterGroup;
#[doc(hidden)]
pub type ModifyDBParameterGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyDBParameterGroupInput {
    /// Consumes the builder and constructs an Operation<[`ModifyDBParameterGroup`](crate::operation::ModifyDBParameterGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyDBParameterGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_modify_db_parameter_group(&self)
                .map_err(|err| {
                smithy_http::operation::BuildError::SerializationError(err.into())
            })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyDBParameterGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyDBParameterGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyDBParameterGroupInput`](crate::input::ModifyDBParameterGroupInput)
    pub fn builder() -> crate::input::modify_db_parameter_group_input::Builder {
        crate::input::modify_db_parameter_group_input::Builder::default()
    }
}

/// See [`ModifyDBProxyInput`](crate::input::ModifyDBProxyInput)
pub mod modify_db_proxy_input {
    /// A builder for [`ModifyDBProxyInput`](crate::input::ModifyDBProxyInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_name: std::option::Option<std::string::String>,
        pub(crate) new_db_proxy_name: std::option::Option<std::string::String>,
        pub(crate) auth: std::option::Option<std::vec::Vec<crate::model::UserAuthConfig>>,
        pub(crate) require_tls: std::option::Option<bool>,
        pub(crate) idle_client_timeout: std::option::Option<i32>,
        pub(crate) debug_logging: std::option::Option<bool>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The identifier for the <code>DBProxy</code> to modify.</p>
        pub fn db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_proxy_name = Some(input.into());
            self
        }
        pub fn set_db_proxy_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_proxy_name = input;
            self
        }
        /// <p>The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
        pub fn new_db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.new_db_proxy_name = Some(input.into());
            self
        }
        pub fn set_new_db_proxy_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.new_db_proxy_name = input;
            self
        }
        pub fn auth(mut self, input: impl Into<crate::model::UserAuthConfig>) -> Self {
            let mut v = self.auth.unwrap_or_default();
            v.push(input.into());
            self.auth = Some(v);
            self
        }
        pub fn set_auth(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UserAuthConfig>>,
        ) -> Self {
            self.auth = input;
            self
        }
        /// <p>Whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
        /// By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't
        /// use TLS.</p>
        pub fn require_tls(mut self, input: bool) -> Self {
            self.require_tls = Some(input);
            self
        }
        pub fn set_require_tls(mut self, input: std::option::Option<bool>) -> Self {
            self.require_tls = input;
            self
        }
        /// <p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this
        /// value higher or lower than the connection timeout limit for the associated database.</p>
        pub fn idle_client_timeout(mut self, input: i32) -> Self {
            self.idle_client_timeout = Some(input);
            self
        }
        pub fn set_idle_client_timeout(mut self, input: std::option::Option<i32>) -> Self {
            self.idle_client_timeout = input;
            self
        }
        /// <p>Whether the proxy includes detailed information about SQL statements in its logs.
        /// This information helps you to debug issues involving SQL behavior or the performance
        /// and scalability of the proxy connections. The debug information includes the text of
        /// SQL statements that you submit through the proxy. Thus, only enable this setting
        /// when needed for debugging, and only when you have security measures in place to
        /// safeguard any sensitive information that appears in the logs.</p>
        pub fn debug_logging(mut self, input: bool) -> Self {
            self.debug_logging = Some(input);
            self
        }
        pub fn set_debug_logging(mut self, input: std::option::Option<bool>) -> Self {
            self.debug_logging = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        pub fn security_groups(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.security_groups.unwrap_or_default();
            v.push(input.into());
            self.security_groups = Some(v);
            self
        }
        pub fn set_security_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.security_groups = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBProxyInput`](crate::input::ModifyDBProxyInput)
        pub fn build(
            self,
        ) -> std::result::Result<crate::input::ModifyDBProxyInput, smithy_http::operation::BuildError>
        {
            Ok(crate::input::ModifyDBProxyInput {
                db_proxy_name: self.db_proxy_name,
                new_db_proxy_name: self.new_db_proxy_name,
                auth: self.auth,
                require_tls: self.require_tls,
                idle_client_timeout: self.idle_client_timeout,
                debug_logging: self.debug_logging,
                role_arn: self.role_arn,
                security_groups: self.security_groups,
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyDBProxyInputOperationOutputAlias = crate::operation::ModifyDBProxy;
#[doc(hidden)]
pub type ModifyDBProxyInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyDBProxyInput {
    /// Consumes the builder and constructs an Operation<[`ModifyDBProxy`](crate::operation::ModifyDBProxy)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyDBProxy,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_modify_db_proxy(&self).map_err(
                |err| smithy_http::operation::BuildError::SerializationError(err.into()),
            )?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyDBProxy::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyDBProxy",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyDBProxyInput`](crate::input::ModifyDBProxyInput)
    pub fn builder() -> crate::input::modify_db_proxy_input::Builder {
        crate::input::modify_db_proxy_input::Builder::default()
    }
}

/// See [`ModifyDBProxyEndpointInput`](crate::input::ModifyDBProxyEndpointInput)
pub mod modify_db_proxy_endpoint_input {
    /// A builder for [`ModifyDBProxyEndpointInput`](crate::input::ModifyDBProxyEndpointInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_endpoint_name: std::option::Option<std::string::String>,
        pub(crate) new_db_proxy_endpoint_name: std::option::Option<std::string::String>,
        pub(crate) vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The name of the DB proxy sociated with the DB proxy endpoint that you want to modify.</p>
        pub fn db_proxy_endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_proxy_endpoint_name = Some(input.into());
            self
        }
        pub fn set_db_proxy_endpoint_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_proxy_endpoint_name = input;
            self
        }
        /// <p>The new identifier for the <code>DBProxyEndpoint</code>. An identifier must
        /// begin with a letter and must contain only ASCII letters, digits, and hyphens; it
        /// can't end with a hyphen or contain two consecutive hyphens.</p>
        pub fn new_db_proxy_endpoint_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.new_db_proxy_endpoint_name = Some(input.into());
            self
        }
        pub fn set_new_db_proxy_endpoint_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.new_db_proxy_endpoint_name = input;
            self
        }
        pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.vpc_security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.vpc_security_group_ids = Some(v);
            self
        }
        pub fn set_vpc_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.vpc_security_group_ids = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBProxyEndpointInput`](crate::input::ModifyDBProxyEndpointInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ModifyDBProxyEndpointInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ModifyDBProxyEndpointInput {
                db_proxy_endpoint_name: self.db_proxy_endpoint_name,
                new_db_proxy_endpoint_name: self.new_db_proxy_endpoint_name,
                vpc_security_group_ids: self.vpc_security_group_ids,
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyDBProxyEndpointInputOperationOutputAlias = crate::operation::ModifyDBProxyEndpoint;
#[doc(hidden)]
pub type ModifyDBProxyEndpointInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyDBProxyEndpointInput {
    /// Consumes the builder and constructs an Operation<[`ModifyDBProxyEndpoint`](crate::operation::ModifyDBProxyEndpoint)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyDBProxyEndpoint,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_modify_db_proxy_endpoint(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyDBProxyEndpoint::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyDBProxyEndpoint",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyDBProxyEndpointInput`](crate::input::ModifyDBProxyEndpointInput)
    pub fn builder() -> crate::input::modify_db_proxy_endpoint_input::Builder {
        crate::input::modify_db_proxy_endpoint_input::Builder::default()
    }
}

/// See [`ModifyDBProxyTargetGroupInput`](crate::input::ModifyDBProxyTargetGroupInput)
pub mod modify_db_proxy_target_group_input {
    /// A builder for [`ModifyDBProxyTargetGroupInput`](crate::input::ModifyDBProxyTargetGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) target_group_name: std::option::Option<std::string::String>,
        pub(crate) db_proxy_name: std::option::Option<std::string::String>,
        pub(crate) connection_pool_config:
            std::option::Option<crate::model::ConnectionPoolConfiguration>,
        pub(crate) new_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the new target group to assign to the proxy.</p>
        pub fn target_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.target_group_name = Some(input.into());
            self
        }
        pub fn set_target_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_group_name = input;
            self
        }
        /// <p>The name of the new proxy to which to assign the target group.</p>
        pub fn db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_proxy_name = Some(input.into());
            self
        }
        pub fn set_db_proxy_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_proxy_name = input;
            self
        }
        /// <p>The settings that determine the size and behavior of the connection pool for the target group.</p>
        pub fn connection_pool_config(
            mut self,
            input: crate::model::ConnectionPoolConfiguration,
        ) -> Self {
            self.connection_pool_config = Some(input);
            self
        }
        pub fn set_connection_pool_config(
            mut self,
            input: std::option::Option<crate::model::ConnectionPoolConfiguration>,
        ) -> Self {
            self.connection_pool_config = input;
            self
        }
        /// <p>The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
        pub fn new_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.new_name = Some(input.into());
            self
        }
        pub fn set_new_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.new_name = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBProxyTargetGroupInput`](crate::input::ModifyDBProxyTargetGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ModifyDBProxyTargetGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ModifyDBProxyTargetGroupInput {
                target_group_name: self.target_group_name,
                db_proxy_name: self.db_proxy_name,
                connection_pool_config: self.connection_pool_config,
                new_name: self.new_name,
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyDBProxyTargetGroupInputOperationOutputAlias =
    crate::operation::ModifyDBProxyTargetGroup;
#[doc(hidden)]
pub type ModifyDBProxyTargetGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyDBProxyTargetGroupInput {
    /// Consumes the builder and constructs an Operation<[`ModifyDBProxyTargetGroup`](crate::operation::ModifyDBProxyTargetGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyDBProxyTargetGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_modify_db_proxy_target_group(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyDBProxyTargetGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyDBProxyTargetGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyDBProxyTargetGroupInput`](crate::input::ModifyDBProxyTargetGroupInput)
    pub fn builder() -> crate::input::modify_db_proxy_target_group_input::Builder {
        crate::input::modify_db_proxy_target_group_input::Builder::default()
    }
}

/// See [`ModifyDBSnapshotInput`](crate::input::ModifyDBSnapshotInput)
pub mod modify_db_snapshot_input {
    /// A builder for [`ModifyDBSnapshotInput`](crate::input::ModifyDBSnapshotInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_snapshot_identifier: std::option::Option<std::string::String>,
        pub(crate) engine_version: std::option::Option<std::string::String>,
        pub(crate) option_group_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of the DB snapshot to modify.</p>
        pub fn db_snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_db_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_snapshot_identifier = input;
            self
        }
        /// <p>The engine version to upgrade the DB snapshot to.
        /// </p>
        /// <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot.
        /// </p>
        /// <p>
        /// <b>MySQL</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>5.5.46</code> (supported for 5.1 DB snapshots)</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <b>Oracle</b>
        /// </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>12.1.0.2.v8</code>  (supported for 12.1.0.1 DB snapshots)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <b>PostgreSQL</b>
        /// </p>
        /// <p>For the list of engine versions that are available for upgrading a DB snapshot, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion">
        /// Upgrading the PostgreSQL DB Engine for Amazon RDS</a>.
        /// </p>
        pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_version = Some(input.into());
            self
        }
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_version = input;
            self
        }
        /// <p>The option group to identify with the upgraded DB snapshot.
        /// </p>
        /// <p>You can specify this parameter when you upgrade an Oracle DB snapshot.
        /// The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance.
        /// For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option group considerations</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBSnapshotInput`](crate::input::ModifyDBSnapshotInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ModifyDBSnapshotInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ModifyDBSnapshotInput {
                db_snapshot_identifier: self.db_snapshot_identifier,
                engine_version: self.engine_version,
                option_group_name: self.option_group_name,
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyDBSnapshotInputOperationOutputAlias = crate::operation::ModifyDBSnapshot;
#[doc(hidden)]
pub type ModifyDBSnapshotInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyDBSnapshotInput {
    /// Consumes the builder and constructs an Operation<[`ModifyDBSnapshot`](crate::operation::ModifyDBSnapshot)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyDBSnapshot,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_modify_db_snapshot(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyDBSnapshot::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyDBSnapshot",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyDBSnapshotInput`](crate::input::ModifyDBSnapshotInput)
    pub fn builder() -> crate::input::modify_db_snapshot_input::Builder {
        crate::input::modify_db_snapshot_input::Builder::default()
    }
}

/// See [`ModifyDBSnapshotAttributeInput`](crate::input::ModifyDBSnapshotAttributeInput)
pub mod modify_db_snapshot_attribute_input {
    /// A builder for [`ModifyDBSnapshotAttributeInput`](crate::input::ModifyDBSnapshotAttributeInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_snapshot_identifier: std::option::Option<std::string::String>,
        pub(crate) attribute_name: std::option::Option<std::string::String>,
        pub(crate) values_to_add: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) values_to_remove: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The identifier for the DB snapshot to modify the attributes for.</p>
        pub fn db_snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_db_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_snapshot_identifier = input;
            self
        }
        /// <p>The name of the DB snapshot attribute to modify.</p>
        /// <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot,
        /// set this value to <code>restore</code>.</p>
        /// <note>
        /// <p>To view the list of attributes available to modify, use the
        /// <a>DescribeDBSnapshotAttributes</a> API action.</p>
        /// </note>
        pub fn attribute_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.attribute_name = Some(input.into());
            self
        }
        pub fn set_attribute_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.attribute_name = input;
            self
        }
        pub fn values_to_add(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.values_to_add.unwrap_or_default();
            v.push(input.into());
            self.values_to_add = Some(v);
            self
        }
        pub fn set_values_to_add(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.values_to_add = input;
            self
        }
        pub fn values_to_remove(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.values_to_remove.unwrap_or_default();
            v.push(input.into());
            self.values_to_remove = Some(v);
            self
        }
        pub fn set_values_to_remove(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.values_to_remove = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBSnapshotAttributeInput`](crate::input::ModifyDBSnapshotAttributeInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ModifyDBSnapshotAttributeInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ModifyDBSnapshotAttributeInput {
                db_snapshot_identifier: self.db_snapshot_identifier,
                attribute_name: self.attribute_name,
                values_to_add: self.values_to_add,
                values_to_remove: self.values_to_remove,
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyDBSnapshotAttributeInputOperationOutputAlias =
    crate::operation::ModifyDBSnapshotAttribute;
#[doc(hidden)]
pub type ModifyDBSnapshotAttributeInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyDBSnapshotAttributeInput {
    /// Consumes the builder and constructs an Operation<[`ModifyDBSnapshotAttribute`](crate::operation::ModifyDBSnapshotAttribute)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyDBSnapshotAttribute,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_modify_db_snapshot_attribute(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyDBSnapshotAttribute::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyDBSnapshotAttribute",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyDBSnapshotAttributeInput`](crate::input::ModifyDBSnapshotAttributeInput)
    pub fn builder() -> crate::input::modify_db_snapshot_attribute_input::Builder {
        crate::input::modify_db_snapshot_attribute_input::Builder::default()
    }
}

/// See [`ModifyDBSubnetGroupInput`](crate::input::ModifyDBSubnetGroupInput)
pub mod modify_db_subnet_group_input {
    /// A builder for [`ModifyDBSubnetGroupInput`](crate::input::ModifyDBSubnetGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
        pub(crate) db_subnet_group_description: std::option::Option<std::string::String>,
        pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The name for the DB subnet group. This value is stored as a lowercase string.
        /// You can't modify the default subnet group.
        /// </p>
        /// <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p>
        /// <p>Example: <code>mySubnetgroup</code>
        /// </p>
        pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_subnet_group_name = Some(input.into());
            self
        }
        pub fn set_db_subnet_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_subnet_group_name = input;
            self
        }
        /// <p>The description for the DB subnet group.</p>
        pub fn db_subnet_group_description(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_subnet_group_description = Some(input.into());
            self
        }
        pub fn set_db_subnet_group_description(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_subnet_group_description = input;
            self
        }
        pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.subnet_ids.unwrap_or_default();
            v.push(input.into());
            self.subnet_ids = Some(v);
            self
        }
        pub fn set_subnet_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.subnet_ids = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyDBSubnetGroupInput`](crate::input::ModifyDBSubnetGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ModifyDBSubnetGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ModifyDBSubnetGroupInput {
                db_subnet_group_name: self.db_subnet_group_name,
                db_subnet_group_description: self.db_subnet_group_description,
                subnet_ids: self.subnet_ids,
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyDBSubnetGroupInputOperationOutputAlias = crate::operation::ModifyDBSubnetGroup;
#[doc(hidden)]
pub type ModifyDBSubnetGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyDBSubnetGroupInput {
    /// Consumes the builder and constructs an Operation<[`ModifyDBSubnetGroup`](crate::operation::ModifyDBSubnetGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyDBSubnetGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_modify_db_subnet_group(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyDBSubnetGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyDBSubnetGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyDBSubnetGroupInput`](crate::input::ModifyDBSubnetGroupInput)
    pub fn builder() -> crate::input::modify_db_subnet_group_input::Builder {
        crate::input::modify_db_subnet_group_input::Builder::default()
    }
}

/// See [`ModifyEventSubscriptionInput`](crate::input::ModifyEventSubscriptionInput)
pub mod modify_event_subscription_input {
    /// A builder for [`ModifyEventSubscriptionInput`](crate::input::ModifyEventSubscriptionInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subscription_name: std::option::Option<std::string::String>,
        pub(crate) sns_topic_arn: std::option::Option<std::string::String>,
        pub(crate) source_type: std::option::Option<std::string::String>,
        pub(crate) event_categories: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) enabled: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The name of the RDS event notification subscription.</p>
        pub fn subscription_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.subscription_name = Some(input.into());
            self
        }
        pub fn set_subscription_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.subscription_name = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</p>
        pub fn sns_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.sns_topic_arn = Some(input.into());
            self
        }
        pub fn set_sns_topic_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sns_topic_arn = input;
            self
        }
        /// <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p>
        /// <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code>
        /// </p>
        pub fn source_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_type = Some(input.into());
            self
        }
        pub fn set_source_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.source_type = input;
            self
        }
        pub fn event_categories(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.event_categories.unwrap_or_default();
            v.push(input.into());
            self.event_categories = Some(v);
            self
        }
        pub fn set_event_categories(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.event_categories = input;
            self
        }
        /// <p>
        /// A value that indicates whether to activate the subscription.
        /// </p>
        pub fn enabled(mut self, input: bool) -> Self {
            self.enabled = Some(input);
            self
        }
        pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.enabled = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyEventSubscriptionInput`](crate::input::ModifyEventSubscriptionInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ModifyEventSubscriptionInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ModifyEventSubscriptionInput {
                subscription_name: self.subscription_name,
                sns_topic_arn: self.sns_topic_arn,
                source_type: self.source_type,
                event_categories: self.event_categories,
                enabled: self.enabled,
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyEventSubscriptionInputOperationOutputAlias =
    crate::operation::ModifyEventSubscription;
#[doc(hidden)]
pub type ModifyEventSubscriptionInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyEventSubscriptionInput {
    /// Consumes the builder and constructs an Operation<[`ModifyEventSubscription`](crate::operation::ModifyEventSubscription)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyEventSubscription,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_modify_event_subscription(&self)
                .map_err(|err| {
                smithy_http::operation::BuildError::SerializationError(err.into())
            })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyEventSubscription::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyEventSubscription",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyEventSubscriptionInput`](crate::input::ModifyEventSubscriptionInput)
    pub fn builder() -> crate::input::modify_event_subscription_input::Builder {
        crate::input::modify_event_subscription_input::Builder::default()
    }
}

/// See [`ModifyGlobalClusterInput`](crate::input::ModifyGlobalClusterInput)
pub mod modify_global_cluster_input {
    /// A builder for [`ModifyGlobalClusterInput`](crate::input::ModifyGlobalClusterInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) global_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) new_global_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) deletion_protection: std::option::Option<bool>,
        pub(crate) engine_version: std::option::Option<std::string::String>,
        pub(crate) allow_major_version_upgrade: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>
        /// The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive.
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the identifier of an existing global database cluster.</p>
        /// </li>
        /// </ul>
        pub fn global_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.global_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_global_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.global_cluster_identifier = input;
            self
        }
        /// <p>
        /// The new cluster identifier for the global database cluster when modifying a global database cluster.
        /// This value is stored as a lowercase string.
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
        /// </li>
        /// <li>
        /// <p>The first character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-cluster2</code>
        /// </p>
        pub fn new_global_cluster_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.new_global_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_new_global_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.new_global_cluster_identifier = input;
            self
        }
        /// <p>
        /// Indicates if the global database cluster has deletion protection enabled. The global database cluster
        /// can't be deleted when deletion protection is enabled.
        /// </p>
        pub fn deletion_protection(mut self, input: bool) -> Self {
            self.deletion_protection = Some(input);
            self
        }
        pub fn set_deletion_protection(mut self, input: std::option::Option<bool>) -> Self {
            self.deletion_protection = input;
            self
        }
        /// <p>The version number of the database engine to which you want to upgrade.
        /// Changing this parameter results in an outage. The change is applied during
        /// the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p>
        /// <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --engine aurora --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'</code>
        /// </p>
        /// <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --engine aurora-mysql --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'</code>
        /// </p>
        /// <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'</code>
        /// </p>
        pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_version = Some(input.into());
            self
        }
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_version = input;
            self
        }
        /// <p>A value that indicates whether major version upgrades are allowed.</p>
        /// <p>Constraints: You must allow major version upgrades when specifying a value for the
        /// <code>EngineVersion</code> parameter that is a different major version than the DB
        /// cluster's current version.</p>
        /// <p>If you upgrade the major version of a global database, the cluster and DB instance parameter
        /// groups are set to the default parameter groups for the new version. Apply any custom parameter
        /// groups after completing the upgrade.</p>
        pub fn allow_major_version_upgrade(mut self, input: bool) -> Self {
            self.allow_major_version_upgrade = Some(input);
            self
        }
        pub fn set_allow_major_version_upgrade(mut self, input: std::option::Option<bool>) -> Self {
            self.allow_major_version_upgrade = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyGlobalClusterInput`](crate::input::ModifyGlobalClusterInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ModifyGlobalClusterInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ModifyGlobalClusterInput {
                global_cluster_identifier: self.global_cluster_identifier,
                new_global_cluster_identifier: self.new_global_cluster_identifier,
                deletion_protection: self.deletion_protection,
                engine_version: self.engine_version,
                allow_major_version_upgrade: self.allow_major_version_upgrade,
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyGlobalClusterInputOperationOutputAlias = crate::operation::ModifyGlobalCluster;
#[doc(hidden)]
pub type ModifyGlobalClusterInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyGlobalClusterInput {
    /// Consumes the builder and constructs an Operation<[`ModifyGlobalCluster`](crate::operation::ModifyGlobalCluster)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyGlobalCluster,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_modify_global_cluster(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyGlobalCluster::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyGlobalCluster",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyGlobalClusterInput`](crate::input::ModifyGlobalClusterInput)
    pub fn builder() -> crate::input::modify_global_cluster_input::Builder {
        crate::input::modify_global_cluster_input::Builder::default()
    }
}

/// See [`ModifyOptionGroupInput`](crate::input::ModifyOptionGroupInput)
pub mod modify_option_group_input {
    /// A builder for [`ModifyOptionGroupInput`](crate::input::ModifyOptionGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) option_group_name: std::option::Option<std::string::String>,
        pub(crate) options_to_include:
            std::option::Option<std::vec::Vec<crate::model::OptionConfiguration>>,
        pub(crate) options_to_remove: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) apply_immediately: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The name of the option group to be modified.</p>
        /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        pub fn options_to_include(
            mut self,
            input: impl Into<crate::model::OptionConfiguration>,
        ) -> Self {
            let mut v = self.options_to_include.unwrap_or_default();
            v.push(input.into());
            self.options_to_include = Some(v);
            self
        }
        pub fn set_options_to_include(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::OptionConfiguration>>,
        ) -> Self {
            self.options_to_include = input;
            self
        }
        pub fn options_to_remove(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.options_to_remove.unwrap_or_default();
            v.push(input.into());
            self.options_to_remove = Some(v);
            self
        }
        pub fn set_options_to_remove(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.options_to_remove = input;
            self
        }
        /// <p>A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.</p>
        pub fn apply_immediately(mut self, input: bool) -> Self {
            self.apply_immediately = Some(input);
            self
        }
        pub fn set_apply_immediately(mut self, input: std::option::Option<bool>) -> Self {
            self.apply_immediately = input;
            self
        }
        /// Consumes the builder and constructs a [`ModifyOptionGroupInput`](crate::input::ModifyOptionGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ModifyOptionGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ModifyOptionGroupInput {
                option_group_name: self.option_group_name,
                options_to_include: self.options_to_include,
                options_to_remove: self.options_to_remove,
                apply_immediately: self.apply_immediately.unwrap_or_default(),
            })
        }
    }
}
#[doc(hidden)]
pub type ModifyOptionGroupInputOperationOutputAlias = crate::operation::ModifyOptionGroup;
#[doc(hidden)]
pub type ModifyOptionGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ModifyOptionGroupInput {
    /// Consumes the builder and constructs an Operation<[`ModifyOptionGroup`](crate::operation::ModifyOptionGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ModifyOptionGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_modify_option_group(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ModifyOptionGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ModifyOptionGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ModifyOptionGroupInput`](crate::input::ModifyOptionGroupInput)
    pub fn builder() -> crate::input::modify_option_group_input::Builder {
        crate::input::modify_option_group_input::Builder::default()
    }
}

/// See [`PromoteReadReplicaInput`](crate::input::PromoteReadReplicaInput)
pub mod promote_read_replica_input {
    /// A builder for [`PromoteReadReplicaInput`](crate::input::PromoteReadReplicaInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) backup_retention_period: std::option::Option<i32>,
        pub(crate) preferred_backup_window: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The DB instance identifier. This value is stored as a lowercase string.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the identifier of an existing read replica DB instance.</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>mydbinstance</code>
        /// </p>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        /// <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p>
        /// <p>Default: 1</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be a value from 0 to 35.</p>
        /// </li>
        /// <li>
        /// <p>Can't be set to 0 if the DB instance is a source to read replicas.</p>
        /// </li>
        /// </ul>
        pub fn backup_retention_period(mut self, input: i32) -> Self {
            self.backup_retention_period = Some(input);
            self
        }
        pub fn set_backup_retention_period(mut self, input: std::option::Option<i32>) -> Self {
            self.backup_retention_period = input;
            self
        }
        /// <p>
        /// The daily time range during which automated backups are created
        /// if automated backups are enabled,
        /// using the <code>BackupRetentionPeriod</code> parameter.
        /// </p>
        /// <p>
        /// The default is a 30-minute window selected at random from an
        /// 8-hour block of time for each AWS Region.
        /// To see the time blocks available, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html">
        /// Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
        /// </li>
        /// <li>
        /// <p>Must be in Universal Coordinated Time (UTC).</p>
        /// </li>
        /// <li>
        /// <p>Must not conflict with the preferred maintenance window.</p>
        /// </li>
        /// <li>
        /// <p>Must be at least 30 minutes.</p>
        /// </li>
        /// </ul>
        pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
            self.preferred_backup_window = Some(input.into());
            self
        }
        pub fn set_preferred_backup_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.preferred_backup_window = input;
            self
        }
        /// Consumes the builder and constructs a [`PromoteReadReplicaInput`](crate::input::PromoteReadReplicaInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::PromoteReadReplicaInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::PromoteReadReplicaInput {
                db_instance_identifier: self.db_instance_identifier,
                backup_retention_period: self.backup_retention_period,
                preferred_backup_window: self.preferred_backup_window,
            })
        }
    }
}
#[doc(hidden)]
pub type PromoteReadReplicaInputOperationOutputAlias = crate::operation::PromoteReadReplica;
#[doc(hidden)]
pub type PromoteReadReplicaInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl PromoteReadReplicaInput {
    /// Consumes the builder and constructs an Operation<[`PromoteReadReplica`](crate::operation::PromoteReadReplica)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::PromoteReadReplica,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_promote_read_replica(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::PromoteReadReplica::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "PromoteReadReplica",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`PromoteReadReplicaInput`](crate::input::PromoteReadReplicaInput)
    pub fn builder() -> crate::input::promote_read_replica_input::Builder {
        crate::input::promote_read_replica_input::Builder::default()
    }
}

/// See [`PromoteReadReplicaDBClusterInput`](crate::input::PromoteReadReplicaDBClusterInput)
pub mod promote_read_replica_db_cluster_input {
    /// A builder for [`PromoteReadReplicaDBClusterInput`](crate::input::PromoteReadReplicaDBClusterInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The identifier of the DB cluster read replica to promote. This parameter isn't
        /// case-sensitive. </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the identifier of an existing DB cluster read replica.</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-cluster-replica1</code>
        /// </p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`PromoteReadReplicaDBClusterInput`](crate::input::PromoteReadReplicaDBClusterInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::PromoteReadReplicaDBClusterInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::PromoteReadReplicaDBClusterInput {
                db_cluster_identifier: self.db_cluster_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type PromoteReadReplicaDBClusterInputOperationOutputAlias =
    crate::operation::PromoteReadReplicaDBCluster;
#[doc(hidden)]
pub type PromoteReadReplicaDBClusterInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl PromoteReadReplicaDBClusterInput {
    /// Consumes the builder and constructs an Operation<[`PromoteReadReplicaDBCluster`](crate::operation::PromoteReadReplicaDBCluster)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::PromoteReadReplicaDBCluster,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_promote_read_replica_db_cluster(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::PromoteReadReplicaDBCluster::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "PromoteReadReplicaDBCluster",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`PromoteReadReplicaDBClusterInput`](crate::input::PromoteReadReplicaDBClusterInput)
    pub fn builder() -> crate::input::promote_read_replica_db_cluster_input::Builder {
        crate::input::promote_read_replica_db_cluster_input::Builder::default()
    }
}

/// See [`PurchaseReservedDBInstancesOfferingInput`](crate::input::PurchaseReservedDBInstancesOfferingInput)
pub mod purchase_reserved_db_instances_offering_input {
    /// A builder for [`PurchaseReservedDBInstancesOfferingInput`](crate::input::PurchaseReservedDBInstancesOfferingInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) reserved_db_instances_offering_id: std::option::Option<std::string::String>,
        pub(crate) reserved_db_instance_id: std::option::Option<std::string::String>,
        pub(crate) db_instance_count: std::option::Option<i32>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// <p>The ID of the Reserved DB instance offering to purchase.</p>
        /// <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
        pub fn reserved_db_instances_offering_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.reserved_db_instances_offering_id = Some(input.into());
            self
        }
        pub fn set_reserved_db_instances_offering_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.reserved_db_instances_offering_id = input;
            self
        }
        /// <p>Customer-specified identifier to track this reservation.</p>
        /// <p>Example: myreservationID</p>
        pub fn reserved_db_instance_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.reserved_db_instance_id = Some(input.into());
            self
        }
        pub fn set_reserved_db_instance_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.reserved_db_instance_id = input;
            self
        }
        /// <p>The number of instances to reserve.</p>
        /// <p>Default: <code>1</code>
        /// </p>
        pub fn db_instance_count(mut self, input: i32) -> Self {
            self.db_instance_count = Some(input);
            self
        }
        pub fn set_db_instance_count(mut self, input: std::option::Option<i32>) -> Self {
            self.db_instance_count = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`PurchaseReservedDBInstancesOfferingInput`](crate::input::PurchaseReservedDBInstancesOfferingInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::PurchaseReservedDBInstancesOfferingInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::PurchaseReservedDBInstancesOfferingInput {
                reserved_db_instances_offering_id: self.reserved_db_instances_offering_id,
                reserved_db_instance_id: self.reserved_db_instance_id,
                db_instance_count: self.db_instance_count,
                tags: self.tags,
            })
        }
    }
}
#[doc(hidden)]
pub type PurchaseReservedDBInstancesOfferingInputOperationOutputAlias =
    crate::operation::PurchaseReservedDBInstancesOffering;
#[doc(hidden)]
pub type PurchaseReservedDBInstancesOfferingInputOperationRetryAlias =
    aws_http::AwsErrorRetryPolicy;
impl PurchaseReservedDBInstancesOfferingInput {
    /// Consumes the builder and constructs an Operation<[`PurchaseReservedDBInstancesOffering`](crate::operation::PurchaseReservedDBInstancesOffering)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::PurchaseReservedDBInstancesOffering,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_purchase_reserved_db_instances_offering(
                    &self,
                )
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::PurchaseReservedDBInstancesOffering::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "PurchaseReservedDBInstancesOffering",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`PurchaseReservedDBInstancesOfferingInput`](crate::input::PurchaseReservedDBInstancesOfferingInput)
    pub fn builder() -> crate::input::purchase_reserved_db_instances_offering_input::Builder {
        crate::input::purchase_reserved_db_instances_offering_input::Builder::default()
    }
}

/// See [`RebootDBInstanceInput`](crate::input::RebootDBInstanceInput)
pub mod reboot_db_instance_input {
    /// A builder for [`RebootDBInstanceInput`](crate::input::RebootDBInstanceInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) force_failover: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The DB instance identifier. This parameter is stored as a lowercase string.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the identifier of an existing DBInstance.</p>
        /// </li>
        /// </ul>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        /// <p>
        /// A value that indicates whether the reboot is conducted through a Multi-AZ failover.
        /// </p>
        /// <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
        pub fn force_failover(mut self, input: bool) -> Self {
            self.force_failover = Some(input);
            self
        }
        pub fn set_force_failover(mut self, input: std::option::Option<bool>) -> Self {
            self.force_failover = input;
            self
        }
        /// Consumes the builder and constructs a [`RebootDBInstanceInput`](crate::input::RebootDBInstanceInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::RebootDBInstanceInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::RebootDBInstanceInput {
                db_instance_identifier: self.db_instance_identifier,
                force_failover: self.force_failover,
            })
        }
    }
}
#[doc(hidden)]
pub type RebootDBInstanceInputOperationOutputAlias = crate::operation::RebootDBInstance;
#[doc(hidden)]
pub type RebootDBInstanceInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl RebootDBInstanceInput {
    /// Consumes the builder and constructs an Operation<[`RebootDBInstance`](crate::operation::RebootDBInstance)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::RebootDBInstance,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_reboot_db_instance(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::RebootDBInstance::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "RebootDBInstance",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`RebootDBInstanceInput`](crate::input::RebootDBInstanceInput)
    pub fn builder() -> crate::input::reboot_db_instance_input::Builder {
        crate::input::reboot_db_instance_input::Builder::default()
    }
}

/// See [`RegisterDBProxyTargetsInput`](crate::input::RegisterDBProxyTargetsInput)
pub mod register_db_proxy_targets_input {
    /// A builder for [`RegisterDBProxyTargetsInput`](crate::input::RegisterDBProxyTargetsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_proxy_name: std::option::Option<std::string::String>,
        pub(crate) target_group_name: std::option::Option<std::string::String>,
        pub(crate) db_instance_identifiers: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) db_cluster_identifiers: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.</p>
        pub fn db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_proxy_name = Some(input.into());
            self
        }
        pub fn set_db_proxy_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_proxy_name = input;
            self
        }
        /// <p>The identifier of the <code>DBProxyTargetGroup</code>.</p>
        pub fn target_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.target_group_name = Some(input.into());
            self
        }
        pub fn set_target_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_group_name = input;
            self
        }
        pub fn db_instance_identifiers(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.db_instance_identifiers.unwrap_or_default();
            v.push(input.into());
            self.db_instance_identifiers = Some(v);
            self
        }
        pub fn set_db_instance_identifiers(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.db_instance_identifiers = input;
            self
        }
        pub fn db_cluster_identifiers(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.db_cluster_identifiers.unwrap_or_default();
            v.push(input.into());
            self.db_cluster_identifiers = Some(v);
            self
        }
        pub fn set_db_cluster_identifiers(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.db_cluster_identifiers = input;
            self
        }
        /// Consumes the builder and constructs a [`RegisterDBProxyTargetsInput`](crate::input::RegisterDBProxyTargetsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::RegisterDBProxyTargetsInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::RegisterDBProxyTargetsInput {
                db_proxy_name: self.db_proxy_name,
                target_group_name: self.target_group_name,
                db_instance_identifiers: self.db_instance_identifiers,
                db_cluster_identifiers: self.db_cluster_identifiers,
            })
        }
    }
}
#[doc(hidden)]
pub type RegisterDBProxyTargetsInputOperationOutputAlias = crate::operation::RegisterDBProxyTargets;
#[doc(hidden)]
pub type RegisterDBProxyTargetsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl RegisterDBProxyTargetsInput {
    /// Consumes the builder and constructs an Operation<[`RegisterDBProxyTargets`](crate::operation::RegisterDBProxyTargets)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::RegisterDBProxyTargets,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_register_db_proxy_targets(&self)
                .map_err(|err| {
                smithy_http::operation::BuildError::SerializationError(err.into())
            })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::RegisterDBProxyTargets::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "RegisterDBProxyTargets",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`RegisterDBProxyTargetsInput`](crate::input::RegisterDBProxyTargetsInput)
    pub fn builder() -> crate::input::register_db_proxy_targets_input::Builder {
        crate::input::register_db_proxy_targets_input::Builder::default()
    }
}

/// See [`RemoveFromGlobalClusterInput`](crate::input::RemoveFromGlobalClusterInput)
pub mod remove_from_global_cluster_input {
    /// A builder for [`RemoveFromGlobalClusterInput`](crate::input::RemoveFromGlobalClusterInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) global_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>
        /// The cluster identifier to detach from the Aurora global database cluster.
        /// </p>
        pub fn global_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.global_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_global_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.global_cluster_identifier = input;
            self
        }
        /// <p>
        /// The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster.
        /// </p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`RemoveFromGlobalClusterInput`](crate::input::RemoveFromGlobalClusterInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::RemoveFromGlobalClusterInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::RemoveFromGlobalClusterInput {
                global_cluster_identifier: self.global_cluster_identifier,
                db_cluster_identifier: self.db_cluster_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type RemoveFromGlobalClusterInputOperationOutputAlias =
    crate::operation::RemoveFromGlobalCluster;
#[doc(hidden)]
pub type RemoveFromGlobalClusterInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl RemoveFromGlobalClusterInput {
    /// Consumes the builder and constructs an Operation<[`RemoveFromGlobalCluster`](crate::operation::RemoveFromGlobalCluster)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::RemoveFromGlobalCluster,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_remove_from_global_cluster(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::RemoveFromGlobalCluster::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "RemoveFromGlobalCluster",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`RemoveFromGlobalClusterInput`](crate::input::RemoveFromGlobalClusterInput)
    pub fn builder() -> crate::input::remove_from_global_cluster_input::Builder {
        crate::input::remove_from_global_cluster_input::Builder::default()
    }
}

/// See [`RemoveRoleFromDBClusterInput`](crate::input::RemoveRoleFromDBClusterInput)
pub mod remove_role_from_db_cluster_input {
    /// A builder for [`RemoveRoleFromDBClusterInput`](crate::input::RemoveRoleFromDBClusterInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) feature_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB cluster to disassociate the IAM role from.</p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example
        /// <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The name of the feature for the DB cluster that the IAM role is to be disassociated from.
        /// For the list of supported feature names, see <a>DBEngineVersion</a>.</p>
        pub fn feature_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.feature_name = Some(input.into());
            self
        }
        pub fn set_feature_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.feature_name = input;
            self
        }
        /// Consumes the builder and constructs a [`RemoveRoleFromDBClusterInput`](crate::input::RemoveRoleFromDBClusterInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::RemoveRoleFromDBClusterInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::RemoveRoleFromDBClusterInput {
                db_cluster_identifier: self.db_cluster_identifier,
                role_arn: self.role_arn,
                feature_name: self.feature_name,
            })
        }
    }
}
#[doc(hidden)]
pub type RemoveRoleFromDBClusterInputOperationOutputAlias =
    crate::operation::RemoveRoleFromDBCluster;
#[doc(hidden)]
pub type RemoveRoleFromDBClusterInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl RemoveRoleFromDBClusterInput {
    /// Consumes the builder and constructs an Operation<[`RemoveRoleFromDBCluster`](crate::operation::RemoveRoleFromDBCluster)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::RemoveRoleFromDBCluster,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_remove_role_from_db_cluster(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::RemoveRoleFromDBCluster::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "RemoveRoleFromDBCluster",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`RemoveRoleFromDBClusterInput`](crate::input::RemoveRoleFromDBClusterInput)
    pub fn builder() -> crate::input::remove_role_from_db_cluster_input::Builder {
        crate::input::remove_role_from_db_cluster_input::Builder::default()
    }
}

/// See [`RemoveRoleFromDBInstanceInput`](crate::input::RemoveRoleFromDBInstanceInput)
pub mod remove_role_from_db_instance_input {
    /// A builder for [`RemoveRoleFromDBInstanceInput`](crate::input::RemoveRoleFromDBInstanceInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) role_arn: std::option::Option<std::string::String>,
        pub(crate) feature_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB instance to disassociate the IAM role from.</p>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance,
        /// for example, <code>arn:aws:iam::123456789012:role/AccessRole</code>.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.role_arn = Some(input.into());
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.role_arn = input;
            self
        }
        /// <p>The name of the feature for the DB instance that the IAM role is to be disassociated from.
        /// For the list of supported feature names, see <code>DBEngineVersion</code>.
        /// </p>
        pub fn feature_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.feature_name = Some(input.into());
            self
        }
        pub fn set_feature_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.feature_name = input;
            self
        }
        /// Consumes the builder and constructs a [`RemoveRoleFromDBInstanceInput`](crate::input::RemoveRoleFromDBInstanceInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::RemoveRoleFromDBInstanceInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::RemoveRoleFromDBInstanceInput {
                db_instance_identifier: self.db_instance_identifier,
                role_arn: self.role_arn,
                feature_name: self.feature_name,
            })
        }
    }
}
#[doc(hidden)]
pub type RemoveRoleFromDBInstanceInputOperationOutputAlias =
    crate::operation::RemoveRoleFromDBInstance;
#[doc(hidden)]
pub type RemoveRoleFromDBInstanceInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl RemoveRoleFromDBInstanceInput {
    /// Consumes the builder and constructs an Operation<[`RemoveRoleFromDBInstance`](crate::operation::RemoveRoleFromDBInstance)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::RemoveRoleFromDBInstance,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_remove_role_from_db_instance(&self)
                    .map_err(|err| {
                        smithy_http::operation::BuildError::SerializationError(err.into())
                    })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::RemoveRoleFromDBInstance::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "RemoveRoleFromDBInstance",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`RemoveRoleFromDBInstanceInput`](crate::input::RemoveRoleFromDBInstanceInput)
    pub fn builder() -> crate::input::remove_role_from_db_instance_input::Builder {
        crate::input::remove_role_from_db_instance_input::Builder::default()
    }
}

/// See [`RemoveSourceIdentifierFromSubscriptionInput`](crate::input::RemoveSourceIdentifierFromSubscriptionInput)
pub mod remove_source_identifier_from_subscription_input {
    /// A builder for [`RemoveSourceIdentifierFromSubscriptionInput`](crate::input::RemoveSourceIdentifierFromSubscriptionInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) subscription_name: std::option::Option<std::string::String>,
        pub(crate) source_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the RDS event notification subscription you want to remove a source identifier from.</p>
        pub fn subscription_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.subscription_name = Some(input.into());
            self
        }
        pub fn set_subscription_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.subscription_name = input;
            self
        }
        /// <p>
        /// The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b>
        /// for a DB instance or the name of a security group.
        /// </p>
        pub fn source_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_identifier = Some(input.into());
            self
        }
        pub fn set_source_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`RemoveSourceIdentifierFromSubscriptionInput`](crate::input::RemoveSourceIdentifierFromSubscriptionInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::RemoveSourceIdentifierFromSubscriptionInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::RemoveSourceIdentifierFromSubscriptionInput {
                subscription_name: self.subscription_name,
                source_identifier: self.source_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type RemoveSourceIdentifierFromSubscriptionInputOperationOutputAlias =
    crate::operation::RemoveSourceIdentifierFromSubscription;
#[doc(hidden)]
pub type RemoveSourceIdentifierFromSubscriptionInputOperationRetryAlias =
    aws_http::AwsErrorRetryPolicy;
impl RemoveSourceIdentifierFromSubscriptionInput {
    /// Consumes the builder and constructs an Operation<[`RemoveSourceIdentifierFromSubscription`](crate::operation::RemoveSourceIdentifierFromSubscription)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::RemoveSourceIdentifierFromSubscription,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_remove_source_identifier_from_subscription(&self).map_err(|err|smithy_http::operation::BuildError::SerializationError(err.into()))?
            ;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::RemoveSourceIdentifierFromSubscription::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "RemoveSourceIdentifierFromSubscription",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`RemoveSourceIdentifierFromSubscriptionInput`](crate::input::RemoveSourceIdentifierFromSubscriptionInput)
    pub fn builder() -> crate::input::remove_source_identifier_from_subscription_input::Builder {
        crate::input::remove_source_identifier_from_subscription_input::Builder::default()
    }
}

/// See [`RemoveTagsFromResourceInput`](crate::input::RemoveTagsFromResourceInput)
pub mod remove_tags_from_resource_input {
    /// A builder for [`RemoveTagsFromResourceInput`](crate::input::RemoveTagsFromResourceInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_name: std::option::Option<std::string::String>,
        pub(crate) tag_keys: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about  
        /// creating an ARN,
        /// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
        /// Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        pub fn resource_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_name = Some(input.into());
            self
        }
        pub fn set_resource_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.resource_name = input;
            self
        }
        pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.tag_keys.unwrap_or_default();
            v.push(input.into());
            self.tag_keys = Some(v);
            self
        }
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.tag_keys = input;
            self
        }
        /// Consumes the builder and constructs a [`RemoveTagsFromResourceInput`](crate::input::RemoveTagsFromResourceInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::RemoveTagsFromResourceInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::RemoveTagsFromResourceInput {
                resource_name: self.resource_name,
                tag_keys: self.tag_keys,
            })
        }
    }
}
#[doc(hidden)]
pub type RemoveTagsFromResourceInputOperationOutputAlias = crate::operation::RemoveTagsFromResource;
#[doc(hidden)]
pub type RemoveTagsFromResourceInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl RemoveTagsFromResourceInput {
    /// Consumes the builder and constructs an Operation<[`RemoveTagsFromResource`](crate::operation::RemoveTagsFromResource)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::RemoveTagsFromResource,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_remove_tags_from_resource(&self)
                .map_err(|err| {
                smithy_http::operation::BuildError::SerializationError(err.into())
            })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::RemoveTagsFromResource::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "RemoveTagsFromResource",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`RemoveTagsFromResourceInput`](crate::input::RemoveTagsFromResourceInput)
    pub fn builder() -> crate::input::remove_tags_from_resource_input::Builder {
        crate::input::remove_tags_from_resource_input::Builder::default()
    }
}

/// See [`ResetDBClusterParameterGroupInput`](crate::input::ResetDBClusterParameterGroupInput)
pub mod reset_db_cluster_parameter_group_input {
    /// A builder for [`ResetDBClusterParameterGroupInput`](crate::input::ResetDBClusterParameterGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) reset_all_parameters: std::option::Option<bool>,
        pub(crate) parameters: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
    }
    impl Builder {
        /// <p>The name of the DB cluster parameter group to reset.</p>
        pub fn db_cluster_parameter_group_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_cluster_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = input;
            self
        }
        /// <p>A value that indicates whether to reset all parameters in the DB cluster parameter group
        /// to their default values. You can't use this parameter if there
        /// is a list of parameter names specified for the <code>Parameters</code> parameter.</p>
        pub fn reset_all_parameters(mut self, input: bool) -> Self {
            self.reset_all_parameters = Some(input);
            self
        }
        pub fn set_reset_all_parameters(mut self, input: std::option::Option<bool>) -> Self {
            self.reset_all_parameters = input;
            self
        }
        pub fn parameters(mut self, input: impl Into<crate::model::Parameter>) -> Self {
            let mut v = self.parameters.unwrap_or_default();
            v.push(input.into());
            self.parameters = Some(v);
            self
        }
        pub fn set_parameters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
        ) -> Self {
            self.parameters = input;
            self
        }
        /// Consumes the builder and constructs a [`ResetDBClusterParameterGroupInput`](crate::input::ResetDBClusterParameterGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ResetDBClusterParameterGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ResetDBClusterParameterGroupInput {
                db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
                reset_all_parameters: self.reset_all_parameters.unwrap_or_default(),
                parameters: self.parameters,
            })
        }
    }
}
#[doc(hidden)]
pub type ResetDBClusterParameterGroupInputOperationOutputAlias =
    crate::operation::ResetDBClusterParameterGroup;
#[doc(hidden)]
pub type ResetDBClusterParameterGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ResetDBClusterParameterGroupInput {
    /// Consumes the builder and constructs an Operation<[`ResetDBClusterParameterGroup`](crate::operation::ResetDBClusterParameterGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ResetDBClusterParameterGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_reset_db_cluster_parameter_group(&self)
                    .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ResetDBClusterParameterGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ResetDBClusterParameterGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ResetDBClusterParameterGroupInput`](crate::input::ResetDBClusterParameterGroupInput)
    pub fn builder() -> crate::input::reset_db_cluster_parameter_group_input::Builder {
        crate::input::reset_db_cluster_parameter_group_input::Builder::default()
    }
}

/// See [`ResetDBParameterGroupInput`](crate::input::ResetDBParameterGroupInput)
pub mod reset_db_parameter_group_input {
    /// A builder for [`ResetDBParameterGroupInput`](crate::input::ResetDBParameterGroupInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) reset_all_parameters: std::option::Option<bool>,
        pub(crate) parameters: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
    }
    impl Builder {
        /// <p>The name of the DB parameter group.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the name of an existing <code>DBParameterGroup</code>.</p>
        /// </li>
        /// </ul>
        pub fn db_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_name = input;
            self
        }
        /// <p>
        /// A value that indicates whether to reset all parameters in the DB parameter group to default values.
        /// By default, all parameters in the DB parameter group are reset to default values.
        /// </p>
        pub fn reset_all_parameters(mut self, input: bool) -> Self {
            self.reset_all_parameters = Some(input);
            self
        }
        pub fn set_reset_all_parameters(mut self, input: std::option::Option<bool>) -> Self {
            self.reset_all_parameters = input;
            self
        }
        pub fn parameters(mut self, input: impl Into<crate::model::Parameter>) -> Self {
            let mut v = self.parameters.unwrap_or_default();
            v.push(input.into());
            self.parameters = Some(v);
            self
        }
        pub fn set_parameters(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
        ) -> Self {
            self.parameters = input;
            self
        }
        /// Consumes the builder and constructs a [`ResetDBParameterGroupInput`](crate::input::ResetDBParameterGroupInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::ResetDBParameterGroupInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::ResetDBParameterGroupInput {
                db_parameter_group_name: self.db_parameter_group_name,
                reset_all_parameters: self.reset_all_parameters.unwrap_or_default(),
                parameters: self.parameters,
            })
        }
    }
}
#[doc(hidden)]
pub type ResetDBParameterGroupInputOperationOutputAlias = crate::operation::ResetDBParameterGroup;
#[doc(hidden)]
pub type ResetDBParameterGroupInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl ResetDBParameterGroupInput {
    /// Consumes the builder and constructs an Operation<[`ResetDBParameterGroup`](crate::operation::ResetDBParameterGroup)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::ResetDBParameterGroup,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_reset_db_parameter_group(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::ResetDBParameterGroup::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "ResetDBParameterGroup",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`ResetDBParameterGroupInput`](crate::input::ResetDBParameterGroupInput)
    pub fn builder() -> crate::input::reset_db_parameter_group_input::Builder {
        crate::input::reset_db_parameter_group_input::Builder::default()
    }
}

/// See [`RestoreDBClusterFromS3Input`](crate::input::RestoreDBClusterFromS3Input)
pub mod restore_db_cluster_from_s3_input {
    /// A builder for [`RestoreDBClusterFromS3Input`](crate::input::RestoreDBClusterFromS3Input)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) backup_retention_period: std::option::Option<i32>,
        pub(crate) character_set_name: std::option::Option<std::string::String>,
        pub(crate) database_name: std::option::Option<std::string::String>,
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) db_cluster_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
        pub(crate) engine: std::option::Option<std::string::String>,
        pub(crate) engine_version: std::option::Option<std::string::String>,
        pub(crate) port: std::option::Option<i32>,
        pub(crate) master_username: std::option::Option<std::string::String>,
        pub(crate) master_user_password: std::option::Option<std::string::String>,
        pub(crate) option_group_name: std::option::Option<std::string::String>,
        pub(crate) preferred_backup_window: std::option::Option<std::string::String>,
        pub(crate) preferred_maintenance_window: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) storage_encrypted: std::option::Option<bool>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) enable_iam_database_authentication: std::option::Option<bool>,
        pub(crate) source_engine: std::option::Option<std::string::String>,
        pub(crate) source_engine_version: std::option::Option<std::string::String>,
        pub(crate) s3_bucket_name: std::option::Option<std::string::String>,
        pub(crate) s3_prefix: std::option::Option<std::string::String>,
        pub(crate) s3_ingestion_role_arn: std::option::Option<std::string::String>,
        pub(crate) backtrack_window: std::option::Option<i64>,
        pub(crate) enable_cloudwatch_logs_exports:
            std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) deletion_protection: std::option::Option<bool>,
        pub(crate) copy_tags_to_snapshot: std::option::Option<bool>,
        pub(crate) domain: std::option::Option<std::string::String>,
        pub(crate) domain_iam_role_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn availability_zones(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.availability_zones.unwrap_or_default();
            v.push(input.into());
            self.availability_zones = Some(v);
            self
        }
        pub fn set_availability_zones(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.availability_zones = input;
            self
        }
        /// <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p>
        /// <p>Default: 1</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be a value from 1 to 35</p>
        /// </li>
        /// </ul>
        pub fn backup_retention_period(mut self, input: i32) -> Self {
            self.backup_retention_period = Some(input);
            self
        }
        pub fn set_backup_retention_period(mut self, input: std::option::Option<i32>) -> Self {
            self.backup_retention_period = input;
            self
        }
        /// <p>A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.</p>
        pub fn character_set_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.character_set_name = Some(input.into());
            self
        }
        pub fn set_character_set_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.character_set_name = input;
            self
        }
        /// <p>The database name for the restored DB cluster.</p>
        pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.database_name = Some(input.into());
            self
        }
        pub fn set_database_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.database_name = input;
            self
        }
        /// <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter isn't case-sensitive.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-cluster1</code>
        /// </p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>The name of the DB cluster parameter group to associate
        /// with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used.
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p>
        /// </li>
        /// </ul>
        pub fn db_cluster_parameter_group_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_cluster_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = input;
            self
        }
        pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.vpc_security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.vpc_security_group_ids = Some(v);
            self
        }
        pub fn set_vpc_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.vpc_security_group_ids = input;
            self
        }
        /// <p>A DB subnet group to associate with the restored DB cluster.</p>
        /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.
        /// </p>
        /// <p>Example: <code>mySubnetgroup</code>
        /// </p>
        pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_subnet_group_name = Some(input.into());
            self
        }
        pub fn set_db_subnet_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_subnet_group_name = input;
            self
        }
        /// <p>The name of the database engine to be used for this DB cluster.</p>
        /// <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code>
        /// </p>
        pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine = Some(input.into());
            self
        }
        pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine = input;
            self
        }
        /// <p>The version number of the database engine to use.</p>
        /// <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code>
        /// </p>
        /// <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code>
        /// </p>
        /// <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code>
        /// </p>
        /// <p>
        /// <b>Aurora MySQL</b>
        /// </p>
        /// <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code>
        /// </p>
        /// <p>
        /// <b>Aurora PostgreSQL</b>
        /// </p>
        /// <p>Example: <code>9.6.3</code>, <code>10.7</code>
        /// </p>
        pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_version = Some(input.into());
            self
        }
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_version = input;
            self
        }
        /// <p>The port number on which the instances in the restored DB cluster accept connections.</p>
        /// <p>
        /// Default: <code>3306</code>
        /// </p>
        pub fn port(mut self, input: i32) -> Self {
            self.port = Some(input);
            self
        }
        pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
            self.port = input;
            self
        }
        /// <p>The name of the master user for the restored DB cluster.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be 1 to 16 letters or numbers.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't be a reserved word for the chosen database engine.</p>
        /// </li>
        /// </ul>
        pub fn master_username(mut self, input: impl Into<std::string::String>) -> Self {
            self.master_username = Some(input.into());
            self
        }
        pub fn set_master_username(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.master_username = input;
            self
        }
        /// <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p>
        /// <p>Constraints: Must contain from 8 to 41 characters.</p>
        pub fn master_user_password(mut self, input: impl Into<std::string::String>) -> Self {
            self.master_user_password = Some(input.into());
            self
        }
        pub fn set_master_user_password(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.master_user_password = input;
            self
        }
        /// <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p>
        /// <p>Permanent options can't be removed from an option group. An option group can't be removed from a
        /// DB cluster once it is associated with a DB cluster.</p>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        /// <p>The daily time range during which automated backups are created
        /// if automated backups are enabled
        /// using the <code>BackupRetentionPeriod</code> parameter.
        /// </p>
        /// <p>The default is a 30-minute window selected at random from an
        /// 8-hour block of time for each AWS Region.
        /// To view the time blocks available, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow">
        /// Backup window</a> in the <i>Amazon Aurora User Guide.</i>
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
        /// </li>
        /// <li>
        /// <p>Must be in Universal Coordinated Time (UTC).</p>
        /// </li>
        /// <li>
        /// <p>Must not conflict with the preferred maintenance window.</p>
        /// </li>
        /// <li>
        /// <p>Must be at least 30 minutes.</p>
        /// </li>
        /// </ul>
        pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
            self.preferred_backup_window = Some(input.into());
            self
        }
        pub fn set_preferred_backup_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.preferred_backup_window = input;
            self
        }
        /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
        /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
        /// </p>
        /// <p>The default is a 30-minute window selected at random from an
        /// 8-hour block of time for each AWS Region, occurring on a random day of the
        /// week. To see the time blocks available, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora">
        /// Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i>
        /// </p>
        /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
        /// <p>Constraints: Minimum 30-minute window.</p>
        pub fn preferred_maintenance_window(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.preferred_maintenance_window = Some(input.into());
            self
        }
        pub fn set_preferred_maintenance_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.preferred_maintenance_window = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>A value that indicates whether the restored DB cluster is encrypted.</p>
        pub fn storage_encrypted(mut self, input: bool) -> Self {
            self.storage_encrypted = Some(input);
            self
        }
        pub fn set_storage_encrypted(mut self, input: std::option::Option<bool>) -> Self {
            self.storage_encrypted = input;
            self
        }
        /// <p>The AWS KMS key identifier for an encrypted DB cluster.</p>
        /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).
        /// To use a CMK in a different AWS account, specify the key ARN or alias ARN.</p>
        /// <p>If the StorageEncrypted parameter is enabled, and you do
        /// not specify a value for the <code>KmsKeyId</code> parameter, then
        /// Amazon RDS will use your default CMK. There is a  
        /// default CMK for your AWS account. Your AWS account has a different
        /// default CMK for each AWS Region.</p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
        /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
        /// IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i>
        /// </p>
        pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
            self.enable_iam_database_authentication = Some(input);
            self
        }
        pub fn set_enable_iam_database_authentication(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.enable_iam_database_authentication = input;
            self
        }
        /// <p>The identifier for the database engine that was backed up to create the files stored in the
        /// Amazon S3 bucket.
        /// </p>
        /// <p>Valid values: <code>mysql</code>
        /// </p>
        pub fn source_engine(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_engine = Some(input.into());
            self
        }
        pub fn set_source_engine(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_engine = input;
            self
        }
        /// <p>The version of the database that the backup files were created from.</p>
        /// <p>MySQL versions 5.5, 5.6, and 5.7 are supported.
        /// </p>
        /// <p>Example: <code>5.6.40</code>, <code>5.7.28</code>
        /// </p>
        pub fn source_engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_engine_version = Some(input.into());
            self
        }
        pub fn set_source_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_engine_version = input;
            self
        }
        /// <p>The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.</p>
        pub fn s3_bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_bucket_name = Some(input.into());
            self
        }
        pub fn set_s3_bucket_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.s3_bucket_name = input;
            self
        }
        /// <p>The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster.
        /// If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is
        /// created by using all of the files in the Amazon S3 bucket.</p>
        pub fn s3_prefix(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_prefix = Some(input.into());
            self
        }
        pub fn set_s3_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.s3_prefix = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes
        /// Amazon RDS to access the Amazon S3 bucket on your behalf.</p>
        pub fn s3_ingestion_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_ingestion_role_arn = Some(input.into());
            self
        }
        pub fn set_s3_ingestion_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.s3_ingestion_role_arn = input;
            self
        }
        /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to
        /// 0.</p>
        /// <note>
        /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
        /// </note>
        /// <p>Default: 0</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p>
        /// </li>
        /// </ul>
        pub fn backtrack_window(mut self, input: i64) -> Self {
            self.backtrack_window = Some(input);
            self
        }
        pub fn set_backtrack_window(mut self, input: std::option::Option<i64>) -> Self {
            self.backtrack_window = input;
            self
        }
        pub fn enable_cloudwatch_logs_exports(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            let mut v = self.enable_cloudwatch_logs_exports.unwrap_or_default();
            v.push(input.into());
            self.enable_cloudwatch_logs_exports = Some(v);
            self
        }
        pub fn set_enable_cloudwatch_logs_exports(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.enable_cloudwatch_logs_exports = input;
            self
        }
        /// <p>A value that indicates whether the DB cluster has deletion protection enabled.
        /// The database can't be deleted when deletion protection is enabled. By default,
        /// deletion protection is disabled.
        /// </p>
        pub fn deletion_protection(mut self, input: bool) -> Self {
            self.deletion_protection = Some(input);
            self
        }
        pub fn set_deletion_protection(mut self, input: std::option::Option<bool>) -> Self {
            self.deletion_protection = input;
            self
        }
        /// <p>A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
        pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
            self.copy_tags_to_snapshot = Some(input);
            self
        }
        pub fn set_copy_tags_to_snapshot(mut self, input: std::option::Option<bool>) -> Self {
            self.copy_tags_to_snapshot = input;
            self
        }
        /// <p>Specify the Active Directory directory ID to restore the DB cluster in.
        /// The domain must be created prior to this operation.
        /// </p>
        /// <p>
        /// For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster.
        /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a>
        /// in the <i>Amazon Aurora User Guide</i>.
        /// </p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain = Some(input.into());
            self
        }
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.domain = input;
            self
        }
        /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
        pub fn domain_iam_role_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain_iam_role_name = Some(input.into());
            self
        }
        pub fn set_domain_iam_role_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.domain_iam_role_name = input;
            self
        }
        /// Consumes the builder and constructs a [`RestoreDBClusterFromS3Input`](crate::input::RestoreDBClusterFromS3Input)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::RestoreDBClusterFromS3Input,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::RestoreDBClusterFromS3Input {
                availability_zones: self.availability_zones,
                backup_retention_period: self.backup_retention_period,
                character_set_name: self.character_set_name,
                database_name: self.database_name,
                db_cluster_identifier: self.db_cluster_identifier,
                db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
                vpc_security_group_ids: self.vpc_security_group_ids,
                db_subnet_group_name: self.db_subnet_group_name,
                engine: self.engine,
                engine_version: self.engine_version,
                port: self.port,
                master_username: self.master_username,
                master_user_password: self.master_user_password,
                option_group_name: self.option_group_name,
                preferred_backup_window: self.preferred_backup_window,
                preferred_maintenance_window: self.preferred_maintenance_window,
                tags: self.tags,
                storage_encrypted: self.storage_encrypted,
                kms_key_id: self.kms_key_id,
                enable_iam_database_authentication: self.enable_iam_database_authentication,
                source_engine: self.source_engine,
                source_engine_version: self.source_engine_version,
                s3_bucket_name: self.s3_bucket_name,
                s3_prefix: self.s3_prefix,
                s3_ingestion_role_arn: self.s3_ingestion_role_arn,
                backtrack_window: self.backtrack_window,
                enable_cloudwatch_logs_exports: self.enable_cloudwatch_logs_exports,
                deletion_protection: self.deletion_protection,
                copy_tags_to_snapshot: self.copy_tags_to_snapshot,
                domain: self.domain,
                domain_iam_role_name: self.domain_iam_role_name,
            })
        }
    }
}
#[doc(hidden)]
pub type RestoreDBClusterFromS3InputOperationOutputAlias = crate::operation::RestoreDBClusterFromS3;
#[doc(hidden)]
pub type RestoreDBClusterFromS3InputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl RestoreDBClusterFromS3Input {
    /// Consumes the builder and constructs an Operation<[`RestoreDBClusterFromS3`](crate::operation::RestoreDBClusterFromS3)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::RestoreDBClusterFromS3,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_restore_db_cluster_from_s3(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::RestoreDBClusterFromS3::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "RestoreDBClusterFromS3",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`RestoreDBClusterFromS3Input`](crate::input::RestoreDBClusterFromS3Input)
    pub fn builder() -> crate::input::restore_db_cluster_from_s3_input::Builder {
        crate::input::restore_db_cluster_from_s3_input::Builder::default()
    }
}

/// See [`RestoreDBClusterFromSnapshotInput`](crate::input::RestoreDBClusterFromSnapshotInput)
pub mod restore_db_cluster_from_snapshot_input {
    /// A builder for [`RestoreDBClusterFromSnapshotInput`](crate::input::RestoreDBClusterFromSnapshotInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) snapshot_identifier: std::option::Option<std::string::String>,
        pub(crate) engine: std::option::Option<std::string::String>,
        pub(crate) engine_version: std::option::Option<std::string::String>,
        pub(crate) port: std::option::Option<i32>,
        pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
        pub(crate) database_name: std::option::Option<std::string::String>,
        pub(crate) option_group_name: std::option::Option<std::string::String>,
        pub(crate) vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) enable_iam_database_authentication: std::option::Option<bool>,
        pub(crate) backtrack_window: std::option::Option<i64>,
        pub(crate) enable_cloudwatch_logs_exports:
            std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) engine_mode: std::option::Option<std::string::String>,
        pub(crate) scaling_configuration: std::option::Option<crate::model::ScalingConfiguration>,
        pub(crate) db_cluster_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) deletion_protection: std::option::Option<bool>,
        pub(crate) copy_tags_to_snapshot: std::option::Option<bool>,
        pub(crate) domain: std::option::Option<std::string::String>,
        pub(crate) domain_iam_role_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn availability_zones(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.availability_zones.unwrap_or_default();
            v.push(input.into());
            self.availability_zones = Some(v);
            self
        }
        pub fn set_availability_zones(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.availability_zones = input;
            self
        }
        /// <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot.
        /// This parameter isn't case-sensitive.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-snapshot-id</code>
        /// </p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p>
        /// <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB
        /// cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the identifier of an existing Snapshot.</p>
        /// </li>
        /// </ul>
        pub fn snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.snapshot_identifier = input;
            self
        }
        /// <p>The database engine to use for the new DB cluster.</p>
        /// <p>Default: The same as source</p>
        /// <p>Constraint: Must be compatible with the engine of the source</p>
        pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine = Some(input.into());
            self
        }
        pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine = input;
            self
        }
        /// <p>The version of the database engine to use for the new DB cluster.</p>
        /// <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code>
        /// </p>
        /// <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code>
        /// </p>
        /// <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p>
        /// <p>
        /// <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code>
        /// </p>
        /// <note>
        /// <p>If you aren't using the default engine version, then you must specify the engine version.</p>
        /// </note>
        /// <p>
        /// <b>Aurora MySQL</b>
        /// </p>
        /// <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code>
        /// </p>
        /// <p>
        /// <b>Aurora PostgreSQL</b>
        /// </p>
        /// <p>Example: <code>9.6.3</code>, <code>10.7</code>
        /// </p>
        pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_version = Some(input.into());
            self
        }
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_version = input;
            self
        }
        /// <p>The port number on which the new DB cluster accepts connections.</p>
        /// <p>Constraints: This value must be <code>1150-65535</code>
        /// </p>
        /// <p>Default: The same port as the original DB cluster.</p>
        pub fn port(mut self, input: i32) -> Self {
            self.port = Some(input);
            self
        }
        pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
            self.port = input;
            self
        }
        /// <p>The name of the DB subnet group to use for the new DB cluster.</p>
        /// <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p>
        /// <p>Example: <code>mySubnetgroup</code>
        /// </p>
        pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_subnet_group_name = Some(input.into());
            self
        }
        pub fn set_db_subnet_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_subnet_group_name = input;
            self
        }
        /// <p>The database name for the restored DB cluster.</p>
        pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.database_name = Some(input.into());
            self
        }
        pub fn set_database_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.database_name = input;
            self
        }
        /// <p>The name of the option group to use for the restored DB cluster.</p>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.vpc_security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.vpc_security_group_ids = Some(v);
            self
        }
        pub fn set_vpc_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.vpc_security_group_ids = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB
        /// snapshot or DB cluster snapshot.</p>
        /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).
        /// To use a CMK in a different AWS account, specify the key ARN or alias ARN.</p>    
        /// <p>When you don't specify a value for the <code>KmsKeyId</code> parameter, then the
        /// following occurs:</p>
        /// <ul>
        /// <li>
        /// <p>If the DB snapshot or DB cluster snapshot in
        /// <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster
        /// is encrypted using the AWS KMS CMK that was used to encrypt the DB snapshot or DB
        /// cluster snapshot.</p>
        /// </li>
        /// <li>
        /// <p>If the DB snapshot or DB cluster snapshot in
        /// <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster
        /// isn't encrypted.</p>
        /// </li>
        /// </ul>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
        /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
        /// IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i>
        /// </p>
        pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
            self.enable_iam_database_authentication = Some(input);
            self
        }
        pub fn set_enable_iam_database_authentication(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.enable_iam_database_authentication = input;
            self
        }
        /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to
        /// 0.</p>
        /// <note>
        /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
        /// </note>
        /// <p>Default: 0</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p>
        /// </li>
        /// </ul>
        pub fn backtrack_window(mut self, input: i64) -> Self {
            self.backtrack_window = Some(input);
            self
        }
        pub fn set_backtrack_window(mut self, input: std::option::Option<i64>) -> Self {
            self.backtrack_window = input;
            self
        }
        pub fn enable_cloudwatch_logs_exports(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            let mut v = self.enable_cloudwatch_logs_exports.unwrap_or_default();
            v.push(input.into());
            self.enable_cloudwatch_logs_exports = Some(v);
            self
        }
        pub fn set_enable_cloudwatch_logs_exports(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.enable_cloudwatch_logs_exports = input;
            self
        }
        /// <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>,
        /// <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html">
        /// CreateDBCluster</a>.</p>
        pub fn engine_mode(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_mode = Some(input.into());
            self
        }
        pub fn set_engine_mode(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine_mode = input;
            self
        }
        /// <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
        pub fn scaling_configuration(mut self, input: crate::model::ScalingConfiguration) -> Self {
            self.scaling_configuration = Some(input);
            self
        }
        pub fn set_scaling_configuration(
            mut self,
            input: std::option::Option<crate::model::ScalingConfiguration>,
        ) -> Self {
            self.scaling_configuration = input;
            self
        }
        /// <p>The name of the DB cluster parameter group to associate with this DB cluster. If this
        /// argument is omitted, the default DB cluster parameter group for the specified engine is
        /// used.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match the name of an existing default DB cluster parameter group.</p>
        /// </li>
        /// <li>
        /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
        /// </li>
        /// </ul>
        pub fn db_cluster_parameter_group_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_cluster_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = input;
            self
        }
        /// <p>A value that indicates whether the DB cluster has deletion protection enabled.
        /// The database can't be deleted when deletion protection is enabled. By default,
        /// deletion protection is disabled.
        /// </p>
        pub fn deletion_protection(mut self, input: bool) -> Self {
            self.deletion_protection = Some(input);
            self
        }
        pub fn set_deletion_protection(mut self, input: std::option::Option<bool>) -> Self {
            self.deletion_protection = input;
            self
        }
        /// <p>A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
        pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
            self.copy_tags_to_snapshot = Some(input);
            self
        }
        pub fn set_copy_tags_to_snapshot(mut self, input: std::option::Option<bool>) -> Self {
            self.copy_tags_to_snapshot = input;
            self
        }
        /// <p>Specify the Active Directory directory ID to restore the DB cluster in.
        /// The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL
        /// Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
        /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.
        /// </p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain = Some(input.into());
            self
        }
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.domain = input;
            self
        }
        /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
        pub fn domain_iam_role_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain_iam_role_name = Some(input.into());
            self
        }
        pub fn set_domain_iam_role_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.domain_iam_role_name = input;
            self
        }
        /// Consumes the builder and constructs a [`RestoreDBClusterFromSnapshotInput`](crate::input::RestoreDBClusterFromSnapshotInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::RestoreDBClusterFromSnapshotInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::RestoreDBClusterFromSnapshotInput {
                availability_zones: self.availability_zones,
                db_cluster_identifier: self.db_cluster_identifier,
                snapshot_identifier: self.snapshot_identifier,
                engine: self.engine,
                engine_version: self.engine_version,
                port: self.port,
                db_subnet_group_name: self.db_subnet_group_name,
                database_name: self.database_name,
                option_group_name: self.option_group_name,
                vpc_security_group_ids: self.vpc_security_group_ids,
                tags: self.tags,
                kms_key_id: self.kms_key_id,
                enable_iam_database_authentication: self.enable_iam_database_authentication,
                backtrack_window: self.backtrack_window,
                enable_cloudwatch_logs_exports: self.enable_cloudwatch_logs_exports,
                engine_mode: self.engine_mode,
                scaling_configuration: self.scaling_configuration,
                db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
                deletion_protection: self.deletion_protection,
                copy_tags_to_snapshot: self.copy_tags_to_snapshot,
                domain: self.domain,
                domain_iam_role_name: self.domain_iam_role_name,
            })
        }
    }
}
#[doc(hidden)]
pub type RestoreDBClusterFromSnapshotInputOperationOutputAlias =
    crate::operation::RestoreDBClusterFromSnapshot;
#[doc(hidden)]
pub type RestoreDBClusterFromSnapshotInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl RestoreDBClusterFromSnapshotInput {
    /// Consumes the builder and constructs an Operation<[`RestoreDBClusterFromSnapshot`](crate::operation::RestoreDBClusterFromSnapshot)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::RestoreDBClusterFromSnapshot,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_restore_db_cluster_from_snapshot(&self)
                    .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::RestoreDBClusterFromSnapshot::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "RestoreDBClusterFromSnapshot",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`RestoreDBClusterFromSnapshotInput`](crate::input::RestoreDBClusterFromSnapshotInput)
    pub fn builder() -> crate::input::restore_db_cluster_from_snapshot_input::Builder {
        crate::input::restore_db_cluster_from_snapshot_input::Builder::default()
    }
}

/// See [`RestoreDBClusterToPointInTimeInput`](crate::input::RestoreDBClusterToPointInTimeInput)
pub mod restore_db_cluster_to_point_in_time_input {
    /// A builder for [`RestoreDBClusterToPointInTimeInput`](crate::input::RestoreDBClusterToPointInTimeInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) restore_type: std::option::Option<std::string::String>,
        pub(crate) source_db_cluster_identifier: std::option::Option<std::string::String>,
        pub(crate) restore_to_time: std::option::Option<smithy_types::Instant>,
        pub(crate) use_latest_restorable_time: std::option::Option<bool>,
        pub(crate) port: std::option::Option<i32>,
        pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
        pub(crate) option_group_name: std::option::Option<std::string::String>,
        pub(crate) vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) enable_iam_database_authentication: std::option::Option<bool>,
        pub(crate) backtrack_window: std::option::Option<i64>,
        pub(crate) enable_cloudwatch_logs_exports:
            std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) db_cluster_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) deletion_protection: std::option::Option<bool>,
        pub(crate) copy_tags_to_snapshot: std::option::Option<bool>,
        pub(crate) domain: std::option::Option<std::string::String>,
        pub(crate) domain_iam_role_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the new DB cluster to be created.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// <p>The type of restore to be performed. You can specify one of the following values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>full-copy</code> - The new DB cluster is restored as a full copy of the
        /// source DB cluster.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>copy-on-write</code> - The new DB cluster is restored as a clone of the
        /// source DB cluster.</p>
        /// </li>
        /// </ul>
        /// <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p>
        /// <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is
        /// restored as a full copy of the source DB cluster.</p>
        pub fn restore_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.restore_type = Some(input.into());
            self
        }
        pub fn set_restore_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.restore_type = input;
            self
        }
        /// <p>The identifier of the source DB cluster from which to restore.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the identifier of an existing DBCluster.</p>
        /// </li>
        /// </ul>
        pub fn source_db_cluster_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.source_db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_source_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_db_cluster_identifier = input;
            self
        }
        /// <p>The date and time to restore the DB cluster to.</p>
        /// <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be before the latest restorable time for the DB instance</p>
        /// </li>
        /// <li>
        /// <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p>
        /// </li>
        /// <li>
        /// <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p>
        /// </li>
        /// <li>
        /// <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>2015-03-07T23:45:00Z</code>
        /// </p>
        pub fn restore_to_time(mut self, input: smithy_types::Instant) -> Self {
            self.restore_to_time = Some(input);
            self
        }
        pub fn set_restore_to_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.restore_to_time = input;
            self
        }
        /// <p>A value that indicates whether to restore the DB cluster to the latest
        /// restorable backup time. By default, the DB cluster isn't restored to the latest
        /// restorable backup time.
        /// </p>
        /// <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
        pub fn use_latest_restorable_time(mut self, input: bool) -> Self {
            self.use_latest_restorable_time = Some(input);
            self
        }
        pub fn set_use_latest_restorable_time(mut self, input: std::option::Option<bool>) -> Self {
            self.use_latest_restorable_time = input;
            self
        }
        /// <p>The port number on which the new DB cluster accepts connections.</p>
        /// <p>Constraints: A value from <code>1150-65535</code>.
        /// </p>
        /// <p>Default: The default port for the engine.</p>
        pub fn port(mut self, input: i32) -> Self {
            self.port = Some(input);
            self
        }
        pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
            self.port = input;
            self
        }
        /// <p>The DB subnet group name to use for the new DB cluster.</p>
        /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
        /// <p>Example: <code>mySubnetgroup</code>
        /// </p>
        pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_subnet_group_name = Some(input.into());
            self
        }
        pub fn set_db_subnet_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_subnet_group_name = input;
            self
        }
        /// <p>The name of the option group for the new DB cluster.</p>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.vpc_security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.vpc_security_group_ids = Some(v);
            self
        }
        pub fn set_vpc_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.vpc_security_group_ids = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p>
        /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).
        /// To use a CMK in a different AWS account, specify the key ARN or alias ARN.</p>
        /// <p>You can restore to a new DB cluster and encrypt the new DB cluster with a AWS KMS CMK that is different than the
        /// AWS KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the AWS KMS CMK
        /// identified by the <code>KmsKeyId</code> parameter.</p>
        /// <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p>
        /// <ul>
        /// <li>
        /// <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the AWS KMS CMK that was used to encrypt the source DB cluster.</p>
        /// </li>
        /// <li>
        /// <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p>
        /// </li>
        /// </ul>
        /// <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request
        /// is rejected.</p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
        /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
        /// IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i>
        /// </p>
        pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
            self.enable_iam_database_authentication = Some(input);
            self
        }
        pub fn set_enable_iam_database_authentication(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.enable_iam_database_authentication = input;
            self
        }
        /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to
        /// 0.</p>
        /// <note>
        /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
        /// </note>
        /// <p>Default: 0</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p>
        /// </li>
        /// </ul>
        pub fn backtrack_window(mut self, input: i64) -> Self {
            self.backtrack_window = Some(input);
            self
        }
        pub fn set_backtrack_window(mut self, input: std::option::Option<i64>) -> Self {
            self.backtrack_window = input;
            self
        }
        pub fn enable_cloudwatch_logs_exports(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            let mut v = self.enable_cloudwatch_logs_exports.unwrap_or_default();
            v.push(input.into());
            self.enable_cloudwatch_logs_exports = Some(v);
            self
        }
        pub fn set_enable_cloudwatch_logs_exports(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.enable_cloudwatch_logs_exports = input;
            self
        }
        /// <p>The name of the DB cluster parameter group to associate with this DB cluster.
        /// If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match the name of an existing DB cluster parameter group.</p>
        /// </li>
        /// <li>
        /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
        /// </li>
        /// </ul>
        pub fn db_cluster_parameter_group_name(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_cluster_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_parameter_group_name = input;
            self
        }
        /// <p>A value that indicates whether the DB cluster has deletion protection enabled.
        /// The database can't be deleted when deletion protection is enabled. By default,
        /// deletion protection is disabled.
        /// </p>
        pub fn deletion_protection(mut self, input: bool) -> Self {
            self.deletion_protection = Some(input);
            self
        }
        pub fn set_deletion_protection(mut self, input: std::option::Option<bool>) -> Self {
            self.deletion_protection = input;
            self
        }
        /// <p>A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
        pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
            self.copy_tags_to_snapshot = Some(input);
            self
        }
        pub fn set_copy_tags_to_snapshot(mut self, input: std::option::Option<bool>) -> Self {
            self.copy_tags_to_snapshot = input;
            self
        }
        /// <p>Specify the Active Directory directory ID to restore the DB cluster in.
        /// The domain must be created prior to this operation.
        /// </p>
        /// <p>
        /// For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster.
        /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a>
        /// in the <i>Amazon Aurora User Guide</i>.
        /// </p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain = Some(input.into());
            self
        }
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.domain = input;
            self
        }
        /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
        pub fn domain_iam_role_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain_iam_role_name = Some(input.into());
            self
        }
        pub fn set_domain_iam_role_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.domain_iam_role_name = input;
            self
        }
        /// Consumes the builder and constructs a [`RestoreDBClusterToPointInTimeInput`](crate::input::RestoreDBClusterToPointInTimeInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::RestoreDBClusterToPointInTimeInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::RestoreDBClusterToPointInTimeInput {
                db_cluster_identifier: self.db_cluster_identifier,
                restore_type: self.restore_type,
                source_db_cluster_identifier: self.source_db_cluster_identifier,
                restore_to_time: self.restore_to_time,
                use_latest_restorable_time: self.use_latest_restorable_time.unwrap_or_default(),
                port: self.port,
                db_subnet_group_name: self.db_subnet_group_name,
                option_group_name: self.option_group_name,
                vpc_security_group_ids: self.vpc_security_group_ids,
                tags: self.tags,
                kms_key_id: self.kms_key_id,
                enable_iam_database_authentication: self.enable_iam_database_authentication,
                backtrack_window: self.backtrack_window,
                enable_cloudwatch_logs_exports: self.enable_cloudwatch_logs_exports,
                db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
                deletion_protection: self.deletion_protection,
                copy_tags_to_snapshot: self.copy_tags_to_snapshot,
                domain: self.domain,
                domain_iam_role_name: self.domain_iam_role_name,
            })
        }
    }
}
#[doc(hidden)]
pub type RestoreDBClusterToPointInTimeInputOperationOutputAlias =
    crate::operation::RestoreDBClusterToPointInTime;
#[doc(hidden)]
pub type RestoreDBClusterToPointInTimeInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl RestoreDBClusterToPointInTimeInput {
    /// Consumes the builder and constructs an Operation<[`RestoreDBClusterToPointInTime`](crate::operation::RestoreDBClusterToPointInTime)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::RestoreDBClusterToPointInTime,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_restore_db_cluster_to_point_in_time(
                    &self,
                )
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::RestoreDBClusterToPointInTime::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "RestoreDBClusterToPointInTime",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`RestoreDBClusterToPointInTimeInput`](crate::input::RestoreDBClusterToPointInTimeInput)
    pub fn builder() -> crate::input::restore_db_cluster_to_point_in_time_input::Builder {
        crate::input::restore_db_cluster_to_point_in_time_input::Builder::default()
    }
}

/// See [`RestoreDBInstanceFromDBSnapshotInput`](crate::input::RestoreDBInstanceFromDBSnapshotInput)
pub mod restore_db_instance_from_db_snapshot_input {
    /// A builder for [`RestoreDBInstanceFromDBSnapshotInput`](crate::input::RestoreDBInstanceFromDBSnapshotInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) db_snapshot_identifier: std::option::Option<std::string::String>,
        pub(crate) db_instance_class: std::option::Option<std::string::String>,
        pub(crate) port: std::option::Option<i32>,
        pub(crate) availability_zone: std::option::Option<std::string::String>,
        pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
        pub(crate) multi_az: std::option::Option<bool>,
        pub(crate) publicly_accessible: std::option::Option<bool>,
        pub(crate) auto_minor_version_upgrade: std::option::Option<bool>,
        pub(crate) license_model: std::option::Option<std::string::String>,
        pub(crate) db_name: std::option::Option<std::string::String>,
        pub(crate) engine: std::option::Option<std::string::String>,
        pub(crate) iops: std::option::Option<i32>,
        pub(crate) option_group_name: std::option::Option<std::string::String>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) storage_type: std::option::Option<std::string::String>,
        pub(crate) tde_credential_arn: std::option::Option<std::string::String>,
        pub(crate) tde_credential_password: std::option::Option<std::string::String>,
        pub(crate) vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) domain: std::option::Option<std::string::String>,
        pub(crate) copy_tags_to_snapshot: std::option::Option<bool>,
        pub(crate) domain_iam_role_name: std::option::Option<std::string::String>,
        pub(crate) enable_iam_database_authentication: std::option::Option<bool>,
        pub(crate) enable_cloudwatch_logs_exports:
            std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) processor_features:
            std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
        pub(crate) use_default_processor_features: std::option::Option<bool>,
        pub(crate) db_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) deletion_protection: std::option::Option<bool>,
        pub(crate) enable_customer_owned_ip: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain from 1 to 63 numbers, letters, or hyphens</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>my-snapshot-id</code>
        /// </p>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        /// <p>The identifier for the DB snapshot to restore from.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the identifier of an existing DBSnapshot.</p>
        /// </li>
        /// <li>
        /// <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code>
        /// must be the ARN of the shared DB snapshot.</p>
        /// </li>
        /// </ul>
        pub fn db_snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_db_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_snapshot_identifier = input;
            self
        }
        /// <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>.
        /// Not all DB instance classes are available in all AWS Regions, or for all database engines.
        /// For the full list of DB instance classes,
        /// and availability for your engine, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>Default: The same DBInstanceClass as the original DB instance.</p>
        pub fn db_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_class = Some(input.into());
            self
        }
        pub fn set_db_instance_class(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_class = input;
            self
        }
        /// <p>The port number on which the database accepts connections.</p>
        /// <p>Default: The same port as the original DB instance</p>
        /// <p>Constraints: Value must be <code>1150-65535</code>
        /// </p>
        pub fn port(mut self, input: i32) -> Self {
            self.port = Some(input);
            self
        }
        pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
            self.port = input;
            self
        }
        /// <p>The Availability Zone (AZ) where the DB instance will be created.</p>
        /// <p>Default: A random, system-chosen Availability Zone.</p>
        /// <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
        /// <p>Example: <code>us-east-1a</code>
        /// </p>
        pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
            self.availability_zone = Some(input.into());
            self
        }
        pub fn set_availability_zone(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.availability_zone = input;
            self
        }
        /// <p>The DB subnet group name to use for the new instance.</p>
        /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
        /// <p>Example: <code>mySubnetgroup</code>
        /// </p>
        pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_subnet_group_name = Some(input.into());
            self
        }
        pub fn set_db_subnet_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_subnet_group_name = input;
            self
        }
        /// <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p>
        /// <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
        pub fn multi_az(mut self, input: bool) -> Self {
            self.multi_az = Some(input);
            self
        }
        pub fn set_multi_az(mut self, input: std::option::Option<bool>) -> Self {
            self.multi_az = input;
            self
        }
        /// <p>A value that indicates whether the DB instance is publicly accessible.</p>
        /// <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC,
        /// and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses,
        /// and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
        /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>  
        /// <p>For more information, see <a>CreateDBInstance</a>.</p>
        pub fn publicly_accessible(mut self, input: bool) -> Self {
            self.publicly_accessible = Some(input);
            self
        }
        pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
            self.publicly_accessible = input;
            self
        }
        /// <p>A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.</p>
        pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
            self.auto_minor_version_upgrade = Some(input);
            self
        }
        pub fn set_auto_minor_version_upgrade(mut self, input: std::option::Option<bool>) -> Self {
            self.auto_minor_version_upgrade = input;
            self
        }
        /// <p>License model information for the restored DB instance.</p>
        /// <p>Default: Same as source.</p>
        /// <p>
        /// Valid values:  <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code>
        /// </p>
        pub fn license_model(mut self, input: impl Into<std::string::String>) -> Self {
            self.license_model = Some(input.into());
            self
        }
        pub fn set_license_model(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.license_model = input;
            self
        }
        /// <p>The database name for the restored DB instance.</p>
        /// <note>
        /// <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p>
        /// </note>
        pub fn db_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_name = Some(input.into());
            self
        }
        pub fn set_db_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.db_name = input;
            self
        }
        /// <p>The database engine to use for the new instance.</p>
        /// <p>Default: The same as source</p>
        /// <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p>
        /// <p>Valid Values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>mariadb</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>mysql</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se2</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se1</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>postgres</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ex</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-web</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine = Some(input.into());
            self
        }
        pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine = input;
            self
        }
        /// <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second.
        /// If this parameter isn't specified, the IOPS value is taken from the backup.
        /// If this parameter is set to 0, the new instance is converted to a non-PIOPS instance.
        /// The conversion takes additional time, though your DB instance is available for connections before the conversion starts.
        /// </p>
        /// <p>The provisioned IOPS value must follow the requirements for your database engine.
        /// For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a>
        /// in the <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>Constraints: Must be an integer greater than 1000.</p>
        pub fn iops(mut self, input: i32) -> Self {
            self.iops = Some(input);
            self
        }
        pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
            self.iops = input;
            self
        }
        /// <p>The name of the option group to be used for the restored DB instance.</p>
        /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>Specifies the storage type to be associated with the DB instance.</p>
        /// <p>
        /// Valid values: <code>standard | gp2 | io1</code>
        /// </p>
        /// <p>
        /// If you specify <code>io1</code>, you must also include a value for the
        /// <code>Iops</code> parameter.
        /// </p>
        /// <p>
        /// Default: <code>io1</code> if the <code>Iops</code> parameter
        /// is specified, otherwise <code>gp2</code>
        /// </p>
        pub fn storage_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.storage_type = Some(input.into());
            self
        }
        pub fn set_storage_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.storage_type = input;
            self
        }
        /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
        pub fn tde_credential_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.tde_credential_arn = Some(input.into());
            self
        }
        pub fn set_tde_credential_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.tde_credential_arn = input;
            self
        }
        /// <p>The password for the given ARN from the key store in order to access the device.</p>
        pub fn tde_credential_password(mut self, input: impl Into<std::string::String>) -> Self {
            self.tde_credential_password = Some(input.into());
            self
        }
        pub fn set_tde_credential_password(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.tde_credential_password = input;
            self
        }
        pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.vpc_security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.vpc_security_group_ids = Some(v);
            self
        }
        pub fn set_vpc_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.vpc_security_group_ids = input;
            self
        }
        /// <p>Specify the Active Directory directory ID to restore the DB instance in.
        /// The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL
        /// Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
        /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain = Some(input.into());
            self
        }
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.domain = input;
            self
        }
        /// <p>A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
        pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
            self.copy_tags_to_snapshot = Some(input);
            self
        }
        pub fn set_copy_tags_to_snapshot(mut self, input: std::option::Option<bool>) -> Self {
            self.copy_tags_to_snapshot = input;
            self
        }
        /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
        pub fn domain_iam_role_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain_iam_role_name = Some(input.into());
            self
        }
        pub fn set_domain_iam_role_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.domain_iam_role_name = input;
            self
        }
        /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
        /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
        /// <p>For more information about IAM database authentication, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
        /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
            self.enable_iam_database_authentication = Some(input);
            self
        }
        pub fn set_enable_iam_database_authentication(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.enable_iam_database_authentication = input;
            self
        }
        pub fn enable_cloudwatch_logs_exports(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            let mut v = self.enable_cloudwatch_logs_exports.unwrap_or_default();
            v.push(input.into());
            self.enable_cloudwatch_logs_exports = Some(v);
            self
        }
        pub fn set_enable_cloudwatch_logs_exports(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.enable_cloudwatch_logs_exports = input;
            self
        }
        pub fn processor_features(
            mut self,
            input: impl Into<crate::model::ProcessorFeature>,
        ) -> Self {
            let mut v = self.processor_features.unwrap_or_default();
            v.push(input.into());
            self.processor_features = Some(v);
            self
        }
        pub fn set_processor_features(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
        ) -> Self {
            self.processor_features = input;
            self
        }
        /// <p>A value that indicates whether the DB instance class of the DB instance uses its default
        /// processor features.</p>
        pub fn use_default_processor_features(mut self, input: bool) -> Self {
            self.use_default_processor_features = Some(input);
            self
        }
        pub fn set_use_default_processor_features(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.use_default_processor_features = input;
            self
        }
        /// <p>The name of the DB parameter group to associate with this DB instance.</p>
        /// <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code>
        /// for the specified DB engine is used.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match the name of an existing DBParameterGroup.</p>
        /// </li>
        /// <li>
        /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
        /// </li>
        /// </ul>
        pub fn db_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_name = input;
            self
        }
        /// <p>A value that indicates whether the DB instance has deletion protection enabled.
        /// The database can't be deleted when deletion protection is enabled. By default,
        /// deletion protection is disabled. For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
        /// Deleting a DB Instance</a>.
        /// </p>
        pub fn deletion_protection(mut self, input: bool) -> Self {
            self.deletion_protection = Some(input);
            self
        }
        pub fn set_deletion_protection(mut self, input: std::option::Option<bool>) -> Self {
            self.deletion_protection = input;
            self
        }
        /// <p>A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
        /// <p>A <i>CoIP</i> provides local or external connectivity to resources in
        /// your Outpost subnets through your on-premises network. For some use cases, a CoIP can
        /// provide lower latency for connections to the DB instance from outside of its virtual
        /// private cloud (VPC) on your local network.</p>
        /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on AWS Outposts</a>
        /// in the <i>Amazon RDS User Guide</i>.</p>
        /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a>
        /// in the <i>AWS Outposts User Guide</i>.</p>
        pub fn enable_customer_owned_ip(mut self, input: bool) -> Self {
            self.enable_customer_owned_ip = Some(input);
            self
        }
        pub fn set_enable_customer_owned_ip(mut self, input: std::option::Option<bool>) -> Self {
            self.enable_customer_owned_ip = input;
            self
        }
        /// Consumes the builder and constructs a [`RestoreDBInstanceFromDBSnapshotInput`](crate::input::RestoreDBInstanceFromDBSnapshotInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::RestoreDBInstanceFromDBSnapshotInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::RestoreDBInstanceFromDBSnapshotInput {
                db_instance_identifier: self.db_instance_identifier,
                db_snapshot_identifier: self.db_snapshot_identifier,
                db_instance_class: self.db_instance_class,
                port: self.port,
                availability_zone: self.availability_zone,
                db_subnet_group_name: self.db_subnet_group_name,
                multi_az: self.multi_az,
                publicly_accessible: self.publicly_accessible,
                auto_minor_version_upgrade: self.auto_minor_version_upgrade,
                license_model: self.license_model,
                db_name: self.db_name,
                engine: self.engine,
                iops: self.iops,
                option_group_name: self.option_group_name,
                tags: self.tags,
                storage_type: self.storage_type,
                tde_credential_arn: self.tde_credential_arn,
                tde_credential_password: self.tde_credential_password,
                vpc_security_group_ids: self.vpc_security_group_ids,
                domain: self.domain,
                copy_tags_to_snapshot: self.copy_tags_to_snapshot,
                domain_iam_role_name: self.domain_iam_role_name,
                enable_iam_database_authentication: self.enable_iam_database_authentication,
                enable_cloudwatch_logs_exports: self.enable_cloudwatch_logs_exports,
                processor_features: self.processor_features,
                use_default_processor_features: self.use_default_processor_features,
                db_parameter_group_name: self.db_parameter_group_name,
                deletion_protection: self.deletion_protection,
                enable_customer_owned_ip: self.enable_customer_owned_ip,
            })
        }
    }
}
#[doc(hidden)]
pub type RestoreDBInstanceFromDBSnapshotInputOperationOutputAlias =
    crate::operation::RestoreDBInstanceFromDBSnapshot;
#[doc(hidden)]
pub type RestoreDBInstanceFromDBSnapshotInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl RestoreDBInstanceFromDBSnapshotInput {
    /// Consumes the builder and constructs an Operation<[`RestoreDBInstanceFromDBSnapshot`](crate::operation::RestoreDBInstanceFromDBSnapshot)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::RestoreDBInstanceFromDBSnapshot,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_restore_db_instance_from_db_snapshot(
                    &self,
                )
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::RestoreDBInstanceFromDBSnapshot::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "RestoreDBInstanceFromDBSnapshot",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`RestoreDBInstanceFromDBSnapshotInput`](crate::input::RestoreDBInstanceFromDBSnapshotInput)
    pub fn builder() -> crate::input::restore_db_instance_from_db_snapshot_input::Builder {
        crate::input::restore_db_instance_from_db_snapshot_input::Builder::default()
    }
}

/// See [`RestoreDBInstanceFromS3Input`](crate::input::RestoreDBInstanceFromS3Input)
pub mod restore_db_instance_from_s3_input {
    /// A builder for [`RestoreDBInstanceFromS3Input`](crate::input::RestoreDBInstanceFromS3Input)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_name: std::option::Option<std::string::String>,
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) allocated_storage: std::option::Option<i32>,
        pub(crate) db_instance_class: std::option::Option<std::string::String>,
        pub(crate) engine: std::option::Option<std::string::String>,
        pub(crate) master_username: std::option::Option<std::string::String>,
        pub(crate) master_user_password: std::option::Option<std::string::String>,
        pub(crate) db_security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) availability_zone: std::option::Option<std::string::String>,
        pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
        pub(crate) preferred_maintenance_window: std::option::Option<std::string::String>,
        pub(crate) db_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) backup_retention_period: std::option::Option<i32>,
        pub(crate) preferred_backup_window: std::option::Option<std::string::String>,
        pub(crate) port: std::option::Option<i32>,
        pub(crate) multi_az: std::option::Option<bool>,
        pub(crate) engine_version: std::option::Option<std::string::String>,
        pub(crate) auto_minor_version_upgrade: std::option::Option<bool>,
        pub(crate) license_model: std::option::Option<std::string::String>,
        pub(crate) iops: std::option::Option<i32>,
        pub(crate) option_group_name: std::option::Option<std::string::String>,
        pub(crate) publicly_accessible: std::option::Option<bool>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) storage_type: std::option::Option<std::string::String>,
        pub(crate) storage_encrypted: std::option::Option<bool>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) copy_tags_to_snapshot: std::option::Option<bool>,
        pub(crate) monitoring_interval: std::option::Option<i32>,
        pub(crate) monitoring_role_arn: std::option::Option<std::string::String>,
        pub(crate) enable_iam_database_authentication: std::option::Option<bool>,
        pub(crate) source_engine: std::option::Option<std::string::String>,
        pub(crate) source_engine_version: std::option::Option<std::string::String>,
        pub(crate) s3_bucket_name: std::option::Option<std::string::String>,
        pub(crate) s3_prefix: std::option::Option<std::string::String>,
        pub(crate) s3_ingestion_role_arn: std::option::Option<std::string::String>,
        pub(crate) enable_performance_insights: std::option::Option<bool>,
        pub(crate) performance_insights_kms_key_id: std::option::Option<std::string::String>,
        pub(crate) performance_insights_retention_period: std::option::Option<i32>,
        pub(crate) enable_cloudwatch_logs_exports:
            std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) processor_features:
            std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
        pub(crate) use_default_processor_features: std::option::Option<bool>,
        pub(crate) deletion_protection: std::option::Option<bool>,
        pub(crate) max_allocated_storage: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>The name of the database to create when the DB instance is created.
        /// Follow the naming rules specified in <code>CreateDBInstance</code>.
        /// </p>
        pub fn db_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_name = Some(input.into());
            self
        }
        pub fn set_db_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.db_name = input;
            self
        }
        /// <p>The DB instance identifier. This parameter is stored as a lowercase string.
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>mydbinstance</code>
        /// </p>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        /// <p>The amount of storage (in gigabytes) to allocate initially for the DB instance.
        /// Follow the allocation rules specified in <code>CreateDBInstance</code>.
        /// </p>
        /// <note>
        /// <p>Be sure to allocate enough memory for your new DB instance
        /// so that the restore operation can succeed.
        /// You can also allocate additional memory for future growth.
        /// </p>
        /// </note>
        pub fn allocated_storage(mut self, input: i32) -> Self {
            self.allocated_storage = Some(input);
            self
        }
        pub fn set_allocated_storage(mut self, input: std::option::Option<i32>) -> Self {
            self.allocated_storage = input;
            self
        }
        /// <p>The compute and memory capacity of the DB instance,
        /// for example, <code>db.m4.large</code>.
        /// Not all DB instance classes are available in all AWS Regions,
        /// or for all database engines.
        /// For the full list of DB instance classes,
        /// and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class.
        /// </p>
        pub fn db_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_class = Some(input.into());
            self
        }
        pub fn set_db_instance_class(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_class = input;
            self
        }
        /// <p>The name of the database engine to be used for this instance.
        /// </p>
        /// <p>Valid Values:  <code>mysql</code>
        /// </p>
        pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine = Some(input.into());
            self
        }
        pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine = input;
            self
        }
        /// <p>The name for the master user.
        /// </p>
        /// <p>Constraints:
        /// </p>
        /// <ul>
        /// <li>
        /// <p>Must be 1 to 16 letters or numbers.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't be a reserved word for the chosen database engine.</p>
        /// </li>
        /// </ul>
        pub fn master_username(mut self, input: impl Into<std::string::String>) -> Self {
            self.master_username = Some(input.into());
            self
        }
        pub fn set_master_username(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.master_username = input;
            self
        }
        /// <p>The password for the master user.
        /// The password can include any printable ASCII character except "/", """, or "@".
        /// </p>
        /// <p>Constraints: Must contain from 8 to 41 characters.</p>
        pub fn master_user_password(mut self, input: impl Into<std::string::String>) -> Self {
            self.master_user_password = Some(input.into());
            self
        }
        pub fn set_master_user_password(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.master_user_password = input;
            self
        }
        pub fn db_security_groups(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.db_security_groups.unwrap_or_default();
            v.push(input.into());
            self.db_security_groups = Some(v);
            self
        }
        pub fn set_db_security_groups(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.db_security_groups = input;
            self
        }
        pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.vpc_security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.vpc_security_group_ids = Some(v);
            self
        }
        pub fn set_vpc_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.vpc_security_group_ids = input;
            self
        }
        /// <p>The Availability Zone that the DB instance is created in.
        /// For information about AWS Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.
        /// </p>
        /// <p>
        /// Example: <code>us-east-1d</code>
        /// </p>
        /// <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment.
        /// The specified Availability Zone must be in the same AWS Region as the current endpoint.
        /// </p>
        pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
            self.availability_zone = Some(input.into());
            self
        }
        pub fn set_availability_zone(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.availability_zone = input;
            self
        }
        /// <p>A DB subnet group to associate with this DB instance.</p>
        pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_subnet_group_name = Some(input.into());
            self
        }
        pub fn set_db_subnet_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_subnet_group_name = input;
            self
        }
        /// <p>The time range each week during which system maintenance can occur,
        /// in Universal Coordinated Time (UTC).
        /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p>
        /// </li>
        /// <li>
        /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
        /// </li>
        /// <li>
        /// <p>Must be in Universal Coordinated Time (UTC).</p>
        /// </li>
        /// <li>
        /// <p>Must not conflict with the preferred backup window.</p>
        /// </li>
        /// <li>
        /// <p>Must be at least 30 minutes.</p>
        /// </li>
        /// </ul>
        pub fn preferred_maintenance_window(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.preferred_maintenance_window = Some(input.into());
            self
        }
        pub fn set_preferred_maintenance_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.preferred_maintenance_window = input;
            self
        }
        /// <p>The name of the DB parameter group to associate with this DB instance.</p>
        /// <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code>
        /// for the specified DB engine is used.</p>
        pub fn db_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_name = input;
            self
        }
        /// <p>The number of days for which automated backups are retained.
        /// Setting this parameter to a positive number enables backups.
        /// For more information, see <code>CreateDBInstance</code>.
        /// </p>
        pub fn backup_retention_period(mut self, input: i32) -> Self {
            self.backup_retention_period = Some(input);
            self
        }
        pub fn set_backup_retention_period(mut self, input: std::option::Option<i32>) -> Self {
            self.backup_retention_period = input;
            self
        }
        /// <p>The time range each day
        /// during which automated backups are created
        /// if automated backups are enabled.
        /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup window</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
        /// </li>
        /// <li>
        /// <p>Must be in Universal Coordinated Time (UTC).</p>
        /// </li>
        /// <li>
        /// <p>Must not conflict with the preferred maintenance window.</p>
        /// </li>
        /// <li>
        /// <p>Must be at least 30 minutes.</p>
        /// </li>
        /// </ul>
        pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
            self.preferred_backup_window = Some(input.into());
            self
        }
        pub fn set_preferred_backup_window(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.preferred_backup_window = input;
            self
        }
        /// <p>The port number on which the database accepts connections.
        /// </p>
        /// <p>Type: Integer
        /// </p>
        /// <p>Valid Values: <code>1150</code>-<code>65535</code>
        /// </p>
        /// <p>Default: <code>3306</code>
        /// </p>
        pub fn port(mut self, input: i32) -> Self {
            self.port = Some(input);
            self
        }
        pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
            self.port = input;
            self
        }
        /// <p>A value that indicates whether the DB instance is a Multi-AZ deployment.
        /// If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter.
        /// </p>
        pub fn multi_az(mut self, input: bool) -> Self {
            self.multi_az = Some(input);
            self
        }
        pub fn set_multi_az(mut self, input: std::option::Option<bool>) -> Self {
            self.multi_az = input;
            self
        }
        /// <p>The version number of the database engine to use.
        /// Choose the latest minor version of your database engine.
        /// For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.
        /// </p>
        pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine_version = Some(input.into());
            self
        }
        pub fn set_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.engine_version = input;
            self
        }
        /// <p>A value that indicates whether minor engine upgrades are applied automatically
        /// to the DB instance during the maintenance window. By default, minor engine upgrades
        /// are not applied automatically.
        /// </p>
        pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
            self.auto_minor_version_upgrade = Some(input);
            self
        }
        pub fn set_auto_minor_version_upgrade(mut self, input: std::option::Option<bool>) -> Self {
            self.auto_minor_version_upgrade = input;
            self
        }
        /// <p>The license model for this DB instance.
        /// Use <code>general-public-license</code>.
        /// </p>
        pub fn license_model(mut self, input: impl Into<std::string::String>) -> Self {
            self.license_model = Some(input.into());
            self
        }
        pub fn set_license_model(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.license_model = input;
            self
        }
        /// <p>The amount of Provisioned IOPS (input/output operations per second)
        /// to allocate initially for the DB instance.
        /// For information about valid Iops values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a>
        /// in the <i>Amazon RDS User Guide.</i>
        /// </p>
        pub fn iops(mut self, input: i32) -> Self {
            self.iops = Some(input);
            self
        }
        pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
            self.iops = input;
            self
        }
        /// <p>The name of the option group to associate with this DB instance.
        /// If this argument is omitted, the default option group for the specified engine is used.
        /// </p>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        /// <p>A value that indicates whether the DB instance is publicly accessible.</p>
        /// <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC,
        /// and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses,
        /// and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
        /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>  
        /// <p>For more information, see <a>CreateDBInstance</a>.</p>
        pub fn publicly_accessible(mut self, input: bool) -> Self {
            self.publicly_accessible = Some(input);
            self
        }
        pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
            self.publicly_accessible = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>Specifies the storage type to be associated with the DB instance.
        /// </p>
        /// <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code>
        /// </p>
        /// <p>If you specify <code>io1</code>,
        /// you must also include a value for the <code>Iops</code> parameter.
        /// </p>
        /// <p>Default: <code>io1</code>
        /// if the <code>Iops</code> parameter is specified;
        /// otherwise <code>gp2</code>
        /// </p>
        pub fn storage_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.storage_type = Some(input.into());
            self
        }
        pub fn set_storage_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.storage_type = input;
            self
        }
        /// <p>A value that indicates whether the new DB instance is encrypted or not.
        /// </p>
        pub fn storage_encrypted(mut self, input: bool) -> Self {
            self.storage_encrypted = Some(input);
            self
        }
        pub fn set_storage_encrypted(mut self, input: std::option::Option<bool>) -> Self {
            self.storage_encrypted = input;
            self
        }
        /// <p>The AWS KMS key identifier for an encrypted DB instance.
        /// </p>
        /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).
        /// To use a CMK in a different AWS account, specify the key ARN or alias ARN.</p>
        /// <p>If the <code>StorageEncrypted</code> parameter is enabled,
        /// and you do not specify a value for the <code>KmsKeyId</code> parameter,
        /// then Amazon RDS will use your default CMK.
        /// There is a default CMK for your AWS account.
        /// Your AWS account has a different default CMK for each AWS Region.
        /// </p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.
        /// </p>
        pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
            self.copy_tags_to_snapshot = Some(input);
            self
        }
        pub fn set_copy_tags_to_snapshot(mut self, input: std::option::Option<bool>) -> Self {
            self.copy_tags_to_snapshot = input;
            self
        }
        /// <p>The interval, in seconds,
        /// between points when Enhanced Monitoring metrics are collected for the DB instance.
        /// To disable collecting Enhanced Monitoring metrics, specify 0.
        /// </p>
        /// <p>If <code>MonitoringRoleArn</code> is specified,
        /// then you must also set <code>MonitoringInterval</code> to a value other than 0.
        /// </p>
        /// <p>Valid Values: 0, 1, 5, 10, 15, 30, 60
        /// </p>
        /// <p>Default: <code>0</code>
        /// </p>
        pub fn monitoring_interval(mut self, input: i32) -> Self {
            self.monitoring_interval = Some(input);
            self
        }
        pub fn set_monitoring_interval(mut self, input: std::option::Option<i32>) -> Self {
            self.monitoring_interval = input;
            self
        }
        /// <p>The ARN for the IAM role that permits RDS
        /// to send enhanced monitoring metrics to Amazon CloudWatch Logs.
        /// For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.
        /// For information on creating a monitoring role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a>
        /// in the <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>If <code>MonitoringInterval</code> is set to a value other than 0,
        /// then you must supply a <code>MonitoringRoleArn</code> value.
        /// </p>
        pub fn monitoring_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.monitoring_role_arn = Some(input.into());
            self
        }
        pub fn set_monitoring_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.monitoring_role_arn = input;
            self
        }
        /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
        /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
        /// <p>For more information about IAM database authentication, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
        /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
            self.enable_iam_database_authentication = Some(input);
            self
        }
        pub fn set_enable_iam_database_authentication(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.enable_iam_database_authentication = input;
            self
        }
        /// <p>The name of the engine of your source database.
        /// </p>
        /// <p>Valid Values:  <code>mysql</code>
        /// </p>
        pub fn source_engine(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_engine = Some(input.into());
            self
        }
        pub fn set_source_engine(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_engine = input;
            self
        }
        /// <p>The version of the database that the backup files were created from.</p>
        /// <p>MySQL versions 5.6 and 5.7 are supported.
        /// </p>
        /// <p>Example: <code>5.6.40</code>
        /// </p>
        pub fn source_engine_version(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_engine_version = Some(input.into());
            self
        }
        pub fn set_source_engine_version(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_engine_version = input;
            self
        }
        /// <p>The name of your Amazon S3 bucket
        /// that contains your database backup file.
        /// </p>
        pub fn s3_bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_bucket_name = Some(input.into());
            self
        }
        pub fn set_s3_bucket_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.s3_bucket_name = input;
            self
        }
        /// <p>The prefix of your Amazon S3 bucket.
        /// </p>
        pub fn s3_prefix(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_prefix = Some(input.into());
            self
        }
        pub fn set_s3_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.s3_prefix = input;
            self
        }
        /// <p>An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket.
        /// </p>
        pub fn s3_ingestion_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_ingestion_role_arn = Some(input.into());
            self
        }
        pub fn set_s3_ingestion_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.s3_ingestion_role_arn = input;
            self
        }
        /// <p>A value that indicates whether to enable Performance Insights for the DB instance.
        /// </p>
        /// <p>For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service
        /// User Guide</i>.
        /// </p>
        pub fn enable_performance_insights(mut self, input: bool) -> Self {
            self.enable_performance_insights = Some(input);
            self
        }
        pub fn set_enable_performance_insights(mut self, input: std::option::Option<bool>) -> Self {
            self.enable_performance_insights = input;
            self
        }
        /// <p>The AWS KMS key identifier for encryption of Performance Insights data.</p>
        /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).</p>
        /// <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS
        /// uses your default CMK. There is a default CMK for your AWS account.
        /// Your AWS account has a different default CMK for each AWS Region.</p>
        pub fn performance_insights_kms_key_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.performance_insights_kms_key_id = Some(input.into());
            self
        }
        pub fn set_performance_insights_kms_key_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.performance_insights_kms_key_id = input;
            self
        }
        /// <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). </p>
        pub fn performance_insights_retention_period(mut self, input: i32) -> Self {
            self.performance_insights_retention_period = Some(input);
            self
        }
        pub fn set_performance_insights_retention_period(
            mut self,
            input: std::option::Option<i32>,
        ) -> Self {
            self.performance_insights_retention_period = input;
            self
        }
        pub fn enable_cloudwatch_logs_exports(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            let mut v = self.enable_cloudwatch_logs_exports.unwrap_or_default();
            v.push(input.into());
            self.enable_cloudwatch_logs_exports = Some(v);
            self
        }
        pub fn set_enable_cloudwatch_logs_exports(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.enable_cloudwatch_logs_exports = input;
            self
        }
        pub fn processor_features(
            mut self,
            input: impl Into<crate::model::ProcessorFeature>,
        ) -> Self {
            let mut v = self.processor_features.unwrap_or_default();
            v.push(input.into());
            self.processor_features = Some(v);
            self
        }
        pub fn set_processor_features(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
        ) -> Self {
            self.processor_features = input;
            self
        }
        /// <p>A value that indicates whether the DB instance class of the DB instance uses its default
        /// processor features.</p>
        pub fn use_default_processor_features(mut self, input: bool) -> Self {
            self.use_default_processor_features = Some(input);
            self
        }
        pub fn set_use_default_processor_features(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.use_default_processor_features = input;
            self
        }
        /// <p>A value that indicates whether the DB instance has deletion protection enabled.
        /// The database can't be deleted when deletion protection is enabled. By default,
        /// deletion protection is disabled. For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
        /// Deleting a DB Instance</a>.
        /// </p>
        pub fn deletion_protection(mut self, input: bool) -> Self {
            self.deletion_protection = Some(input);
            self
        }
        pub fn set_deletion_protection(mut self, input: std::option::Option<bool>) -> Self {
            self.deletion_protection = input;
            self
        }
        /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.</p>
        /// <p>For more information about this setting, including limitations that apply to it, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
        /// Managing capacity automatically with Amazon RDS storage autoscaling</a>
        /// in the <i>Amazon RDS User Guide</i>.</p>
        pub fn max_allocated_storage(mut self, input: i32) -> Self {
            self.max_allocated_storage = Some(input);
            self
        }
        pub fn set_max_allocated_storage(mut self, input: std::option::Option<i32>) -> Self {
            self.max_allocated_storage = input;
            self
        }
        /// Consumes the builder and constructs a [`RestoreDBInstanceFromS3Input`](crate::input::RestoreDBInstanceFromS3Input)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::RestoreDBInstanceFromS3Input,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::RestoreDBInstanceFromS3Input {
                db_name: self.db_name,
                db_instance_identifier: self.db_instance_identifier,
                allocated_storage: self.allocated_storage,
                db_instance_class: self.db_instance_class,
                engine: self.engine,
                master_username: self.master_username,
                master_user_password: self.master_user_password,
                db_security_groups: self.db_security_groups,
                vpc_security_group_ids: self.vpc_security_group_ids,
                availability_zone: self.availability_zone,
                db_subnet_group_name: self.db_subnet_group_name,
                preferred_maintenance_window: self.preferred_maintenance_window,
                db_parameter_group_name: self.db_parameter_group_name,
                backup_retention_period: self.backup_retention_period,
                preferred_backup_window: self.preferred_backup_window,
                port: self.port,
                multi_az: self.multi_az,
                engine_version: self.engine_version,
                auto_minor_version_upgrade: self.auto_minor_version_upgrade,
                license_model: self.license_model,
                iops: self.iops,
                option_group_name: self.option_group_name,
                publicly_accessible: self.publicly_accessible,
                tags: self.tags,
                storage_type: self.storage_type,
                storage_encrypted: self.storage_encrypted,
                kms_key_id: self.kms_key_id,
                copy_tags_to_snapshot: self.copy_tags_to_snapshot,
                monitoring_interval: self.monitoring_interval,
                monitoring_role_arn: self.monitoring_role_arn,
                enable_iam_database_authentication: self.enable_iam_database_authentication,
                source_engine: self.source_engine,
                source_engine_version: self.source_engine_version,
                s3_bucket_name: self.s3_bucket_name,
                s3_prefix: self.s3_prefix,
                s3_ingestion_role_arn: self.s3_ingestion_role_arn,
                enable_performance_insights: self.enable_performance_insights,
                performance_insights_kms_key_id: self.performance_insights_kms_key_id,
                performance_insights_retention_period: self.performance_insights_retention_period,
                enable_cloudwatch_logs_exports: self.enable_cloudwatch_logs_exports,
                processor_features: self.processor_features,
                use_default_processor_features: self.use_default_processor_features,
                deletion_protection: self.deletion_protection,
                max_allocated_storage: self.max_allocated_storage,
            })
        }
    }
}
#[doc(hidden)]
pub type RestoreDBInstanceFromS3InputOperationOutputAlias =
    crate::operation::RestoreDBInstanceFromS3;
#[doc(hidden)]
pub type RestoreDBInstanceFromS3InputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl RestoreDBInstanceFromS3Input {
    /// Consumes the builder and constructs an Operation<[`RestoreDBInstanceFromS3`](crate::operation::RestoreDBInstanceFromS3)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::RestoreDBInstanceFromS3,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_restore_db_instance_from_s3(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::RestoreDBInstanceFromS3::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "RestoreDBInstanceFromS3",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`RestoreDBInstanceFromS3Input`](crate::input::RestoreDBInstanceFromS3Input)
    pub fn builder() -> crate::input::restore_db_instance_from_s3_input::Builder {
        crate::input::restore_db_instance_from_s3_input::Builder::default()
    }
}

/// See [`RestoreDBInstanceToPointInTimeInput`](crate::input::RestoreDBInstanceToPointInTimeInput)
pub mod restore_db_instance_to_point_in_time_input {
    /// A builder for [`RestoreDBInstanceToPointInTimeInput`](crate::input::RestoreDBInstanceToPointInTimeInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) source_db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) target_db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) restore_time: std::option::Option<smithy_types::Instant>,
        pub(crate) use_latest_restorable_time: std::option::Option<bool>,
        pub(crate) db_instance_class: std::option::Option<std::string::String>,
        pub(crate) port: std::option::Option<i32>,
        pub(crate) availability_zone: std::option::Option<std::string::String>,
        pub(crate) db_subnet_group_name: std::option::Option<std::string::String>,
        pub(crate) multi_az: std::option::Option<bool>,
        pub(crate) publicly_accessible: std::option::Option<bool>,
        pub(crate) auto_minor_version_upgrade: std::option::Option<bool>,
        pub(crate) license_model: std::option::Option<std::string::String>,
        pub(crate) db_name: std::option::Option<std::string::String>,
        pub(crate) engine: std::option::Option<std::string::String>,
        pub(crate) iops: std::option::Option<i32>,
        pub(crate) option_group_name: std::option::Option<std::string::String>,
        pub(crate) copy_tags_to_snapshot: std::option::Option<bool>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) storage_type: std::option::Option<std::string::String>,
        pub(crate) tde_credential_arn: std::option::Option<std::string::String>,
        pub(crate) tde_credential_password: std::option::Option<std::string::String>,
        pub(crate) vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) domain: std::option::Option<std::string::String>,
        pub(crate) domain_iam_role_name: std::option::Option<std::string::String>,
        pub(crate) enable_iam_database_authentication: std::option::Option<bool>,
        pub(crate) enable_cloudwatch_logs_exports:
            std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) processor_features:
            std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
        pub(crate) use_default_processor_features: std::option::Option<bool>,
        pub(crate) db_parameter_group_name: std::option::Option<std::string::String>,
        pub(crate) deletion_protection: std::option::Option<bool>,
        pub(crate) source_dbi_resource_id: std::option::Option<std::string::String>,
        pub(crate) max_allocated_storage: std::option::Option<i32>,
        pub(crate) source_db_instance_automated_backups_arn:
            std::option::Option<std::string::String>,
        pub(crate) enable_customer_owned_ip: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The identifier of the source DB instance from which to restore.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must match the identifier of an existing DB instance.</p>
        /// </li>
        /// </ul>
        pub fn source_db_instance_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.source_db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_source_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_db_instance_identifier = input;
            self
        }
        /// <p>The name of the new DB instance to be created.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
        /// </li>
        /// </ul>
        pub fn target_db_instance_identifier(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.target_db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_target_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.target_db_instance_identifier = input;
            self
        }
        /// <p>The date and time to restore from.</p>
        /// <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>Must be before the latest restorable time for the DB instance</p>
        /// </li>
        /// <li>
        /// <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p>
        /// </li>
        /// </ul>
        /// <p>Example: <code>2009-09-07T23:45:00Z</code>
        /// </p>
        pub fn restore_time(mut self, input: smithy_types::Instant) -> Self {
            self.restore_time = Some(input);
            self
        }
        pub fn set_restore_time(
            mut self,
            input: std::option::Option<smithy_types::Instant>,
        ) -> Self {
            self.restore_time = input;
            self
        }
        /// <p>
        /// A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance
        /// isn't restored from the latest backup time.
        /// </p>
        /// <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
        pub fn use_latest_restorable_time(mut self, input: bool) -> Self {
            self.use_latest_restorable_time = Some(input);
            self
        }
        pub fn set_use_latest_restorable_time(mut self, input: std::option::Option<bool>) -> Self {
            self.use_latest_restorable_time = input;
            self
        }
        /// <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>.
        /// Not all DB instance classes are available in all AWS Regions, or for all database engines.
        /// For the full list of DB instance classes,
        /// and availability for your engine, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        /// <p>Default: The same DBInstanceClass as the original DB instance.</p>
        pub fn db_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_class = Some(input.into());
            self
        }
        pub fn set_db_instance_class(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_class = input;
            self
        }
        /// <p>The port number on which the database accepts connections.</p>
        /// <p>Constraints: Value must be <code>1150-65535</code>
        /// </p>
        /// <p>Default: The same port as the original DB instance.</p>
        pub fn port(mut self, input: i32) -> Self {
            self.port = Some(input);
            self
        }
        pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
            self.port = input;
            self
        }
        /// <p>The Availability Zone (AZ) where the DB instance will be created.</p>
        /// <p>Default: A random, system-chosen Availability Zone.</p>
        /// <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
        /// <p>Example: <code>us-east-1a</code>
        /// </p>
        pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
            self.availability_zone = Some(input.into());
            self
        }
        pub fn set_availability_zone(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.availability_zone = input;
            self
        }
        /// <p>The DB subnet group name to use for the new instance.</p>
        /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
        /// <p>Example: <code>mySubnetgroup</code>
        /// </p>
        pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_subnet_group_name = Some(input.into());
            self
        }
        pub fn set_db_subnet_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_subnet_group_name = input;
            self
        }
        /// <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p>
        /// <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
        pub fn multi_az(mut self, input: bool) -> Self {
            self.multi_az = Some(input);
            self
        }
        pub fn set_multi_az(mut self, input: std::option::Option<bool>) -> Self {
            self.multi_az = input;
            self
        }
        /// <p>A value that indicates whether the DB instance is publicly accessible.</p>
        /// <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC,
        /// and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses,
        /// and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
        /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>  
        /// <p>For more information, see <a>CreateDBInstance</a>.</p>
        pub fn publicly_accessible(mut self, input: bool) -> Self {
            self.publicly_accessible = Some(input);
            self
        }
        pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
            self.publicly_accessible = input;
            self
        }
        /// <p>A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.</p>
        pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
            self.auto_minor_version_upgrade = Some(input);
            self
        }
        pub fn set_auto_minor_version_upgrade(mut self, input: std::option::Option<bool>) -> Self {
            self.auto_minor_version_upgrade = input;
            self
        }
        /// <p>License model information for the restored DB instance.</p>
        /// <p>Default: Same as source.</p>
        /// <p>
        /// Valid values:  <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code>
        /// </p>
        pub fn license_model(mut self, input: impl Into<std::string::String>) -> Self {
            self.license_model = Some(input.into());
            self
        }
        pub fn set_license_model(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.license_model = input;
            self
        }
        /// <p>The database name for the restored DB instance.</p>
        /// <note>
        /// <p>This parameter isn't used for the MySQL or MariaDB engines.</p>
        /// </note>
        pub fn db_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_name = Some(input.into());
            self
        }
        pub fn set_db_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.db_name = input;
            self
        }
        /// <p>The database engine to use for the new instance.</p>
        /// <p>Default: The same as source</p>
        /// <p>Constraint: Must be compatible with the engine of the source</p>
        /// <p>Valid Values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>mariadb</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>mysql</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se2</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se1</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>oracle-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>postgres</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ee</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-se</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-ex</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sqlserver-web</code>
        /// </p>
        /// </li>
        /// </ul>
        pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
            self.engine = Some(input.into());
            self
        }
        pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.engine = input;
            self
        }
        /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p>
        /// <p>Constraints: Must be an integer greater than 1000.</p>
        /// <p>
        /// <b>SQL Server</b>
        /// </p>
        /// <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
        pub fn iops(mut self, input: i32) -> Self {
            self.iops = Some(input);
            self
        }
        pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
            self.iops = input;
            self
        }
        /// <p>The name of the option group to be used for the restored DB instance.</p>
        /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
        pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.option_group_name = Some(input.into());
            self
        }
        pub fn set_option_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.option_group_name = input;
            self
        }
        /// <p>A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
        pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
            self.copy_tags_to_snapshot = Some(input);
            self
        }
        pub fn set_copy_tags_to_snapshot(mut self, input: std::option::Option<bool>) -> Self {
            self.copy_tags_to_snapshot = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// <p>Specifies the storage type to be associated with the DB instance.</p>
        /// <p>
        /// Valid values: <code>standard | gp2 | io1</code>
        /// </p>
        /// <p>
        /// If you specify <code>io1</code>, you must also include a value for the
        /// <code>Iops</code> parameter.
        /// </p>
        /// <p>
        /// Default: <code>io1</code> if the <code>Iops</code> parameter
        /// is specified, otherwise <code>gp2</code>
        /// </p>
        pub fn storage_type(mut self, input: impl Into<std::string::String>) -> Self {
            self.storage_type = Some(input.into());
            self
        }
        pub fn set_storage_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.storage_type = input;
            self
        }
        /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
        pub fn tde_credential_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.tde_credential_arn = Some(input.into());
            self
        }
        pub fn set_tde_credential_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.tde_credential_arn = input;
            self
        }
        /// <p>The password for the given ARN from the key store in order to access the device.</p>
        pub fn tde_credential_password(mut self, input: impl Into<std::string::String>) -> Self {
            self.tde_credential_password = Some(input.into());
            self
        }
        pub fn set_tde_credential_password(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.tde_credential_password = input;
            self
        }
        pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.vpc_security_group_ids.unwrap_or_default();
            v.push(input.into());
            self.vpc_security_group_ids = Some(v);
            self
        }
        pub fn set_vpc_security_group_ids(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.vpc_security_group_ids = input;
            self
        }
        /// <p>Specify the Active Directory directory ID to restore the DB instance in.
        /// The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL
        /// Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
        /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain = Some(input.into());
            self
        }
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.domain = input;
            self
        }
        /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
        pub fn domain_iam_role_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.domain_iam_role_name = Some(input.into());
            self
        }
        pub fn set_domain_iam_role_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.domain_iam_role_name = input;
            self
        }
        /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
        /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
        /// <p>For more information about IAM database authentication, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
        /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i>
        /// </p>
        pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
            self.enable_iam_database_authentication = Some(input);
            self
        }
        pub fn set_enable_iam_database_authentication(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.enable_iam_database_authentication = input;
            self
        }
        pub fn enable_cloudwatch_logs_exports(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            let mut v = self.enable_cloudwatch_logs_exports.unwrap_or_default();
            v.push(input.into());
            self.enable_cloudwatch_logs_exports = Some(v);
            self
        }
        pub fn set_enable_cloudwatch_logs_exports(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.enable_cloudwatch_logs_exports = input;
            self
        }
        pub fn processor_features(
            mut self,
            input: impl Into<crate::model::ProcessorFeature>,
        ) -> Self {
            let mut v = self.processor_features.unwrap_or_default();
            v.push(input.into());
            self.processor_features = Some(v);
            self
        }
        pub fn set_processor_features(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
        ) -> Self {
            self.processor_features = input;
            self
        }
        /// <p>A value that indicates whether the DB instance class of the DB instance uses its default processor features.</p>
        pub fn use_default_processor_features(mut self, input: bool) -> Self {
            self.use_default_processor_features = Some(input);
            self
        }
        pub fn set_use_default_processor_features(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.use_default_processor_features = input;
            self
        }
        /// <p>The name of the DB parameter group to associate with this DB instance.</p>
        /// <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code>
        /// for the specified DB engine is used.</p>
        /// <p>Constraints:</p>
        /// <ul>
        /// <li>
        /// <p>If supplied, must match the name of an existing DBParameterGroup.</p>
        /// </li>
        /// <li>
        /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
        /// </li>
        /// <li>
        /// <p>First character must be a letter.</p>
        /// </li>
        /// <li>
        /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
        /// </li>
        /// </ul>
        pub fn db_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_parameter_group_name = Some(input.into());
            self
        }
        pub fn set_db_parameter_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_parameter_group_name = input;
            self
        }
        /// <p>A value that indicates whether the DB instance has deletion protection enabled.
        /// The database can't be deleted when deletion protection is enabled. By default,
        /// deletion protection is disabled. For more information, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
        /// Deleting a DB Instance</a>.
        /// </p>
        pub fn deletion_protection(mut self, input: bool) -> Self {
            self.deletion_protection = Some(input);
            self
        }
        pub fn set_deletion_protection(mut self, input: std::option::Option<bool>) -> Self {
            self.deletion_protection = input;
            self
        }
        /// <p>The resource ID of the source DB instance from which to restore.</p>
        pub fn source_dbi_resource_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_dbi_resource_id = Some(input.into());
            self
        }
        pub fn set_source_dbi_resource_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_dbi_resource_id = input;
            self
        }
        /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.</p>
        /// <p>For more information about this setting, including limitations that apply to it, see
        /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
        /// Managing capacity automatically with Amazon RDS storage autoscaling</a>
        /// in the <i>Amazon RDS User Guide</i>.</p>
        pub fn max_allocated_storage(mut self, input: i32) -> Self {
            self.max_allocated_storage = Some(input);
            self
        }
        pub fn set_max_allocated_storage(mut self, input: std::option::Option<i32>) -> Self {
            self.max_allocated_storage = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the replicated automated backups from which to restore, for example,
        /// <code>arn:aws:rds:useast-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
        pub fn source_db_instance_automated_backups_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.source_db_instance_automated_backups_arn = Some(input.into());
            self
        }
        pub fn set_source_db_instance_automated_backups_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_db_instance_automated_backups_arn = input;
            self
        }
        /// <p>A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
        /// <p>A <i>CoIP</i> provides local or external connectivity to resources in
        /// your Outpost subnets through your on-premises network. For some use cases, a CoIP can
        /// provide lower latency for connections to the DB instance from outside of its virtual
        /// private cloud (VPC) on your local network.</p>
        /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on AWS Outposts</a>
        /// in the <i>Amazon RDS User Guide</i>.</p>
        /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a>
        /// in the <i>AWS Outposts User Guide</i>.</p>
        pub fn enable_customer_owned_ip(mut self, input: bool) -> Self {
            self.enable_customer_owned_ip = Some(input);
            self
        }
        pub fn set_enable_customer_owned_ip(mut self, input: std::option::Option<bool>) -> Self {
            self.enable_customer_owned_ip = input;
            self
        }
        /// Consumes the builder and constructs a [`RestoreDBInstanceToPointInTimeInput`](crate::input::RestoreDBInstanceToPointInTimeInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::RestoreDBInstanceToPointInTimeInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::RestoreDBInstanceToPointInTimeInput {
                source_db_instance_identifier: self.source_db_instance_identifier,
                target_db_instance_identifier: self.target_db_instance_identifier,
                restore_time: self.restore_time,
                use_latest_restorable_time: self.use_latest_restorable_time.unwrap_or_default(),
                db_instance_class: self.db_instance_class,
                port: self.port,
                availability_zone: self.availability_zone,
                db_subnet_group_name: self.db_subnet_group_name,
                multi_az: self.multi_az,
                publicly_accessible: self.publicly_accessible,
                auto_minor_version_upgrade: self.auto_minor_version_upgrade,
                license_model: self.license_model,
                db_name: self.db_name,
                engine: self.engine,
                iops: self.iops,
                option_group_name: self.option_group_name,
                copy_tags_to_snapshot: self.copy_tags_to_snapshot,
                tags: self.tags,
                storage_type: self.storage_type,
                tde_credential_arn: self.tde_credential_arn,
                tde_credential_password: self.tde_credential_password,
                vpc_security_group_ids: self.vpc_security_group_ids,
                domain: self.domain,
                domain_iam_role_name: self.domain_iam_role_name,
                enable_iam_database_authentication: self.enable_iam_database_authentication,
                enable_cloudwatch_logs_exports: self.enable_cloudwatch_logs_exports,
                processor_features: self.processor_features,
                use_default_processor_features: self.use_default_processor_features,
                db_parameter_group_name: self.db_parameter_group_name,
                deletion_protection: self.deletion_protection,
                source_dbi_resource_id: self.source_dbi_resource_id,
                max_allocated_storage: self.max_allocated_storage,
                source_db_instance_automated_backups_arn: self
                    .source_db_instance_automated_backups_arn,
                enable_customer_owned_ip: self.enable_customer_owned_ip,
            })
        }
    }
}
#[doc(hidden)]
pub type RestoreDBInstanceToPointInTimeInputOperationOutputAlias =
    crate::operation::RestoreDBInstanceToPointInTime;
#[doc(hidden)]
pub type RestoreDBInstanceToPointInTimeInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl RestoreDBInstanceToPointInTimeInput {
    /// Consumes the builder and constructs an Operation<[`RestoreDBInstanceToPointInTime`](crate::operation::RestoreDBInstanceToPointInTime)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::RestoreDBInstanceToPointInTime,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_restore_db_instance_to_point_in_time(
                    &self,
                )
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::RestoreDBInstanceToPointInTime::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "RestoreDBInstanceToPointInTime",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`RestoreDBInstanceToPointInTimeInput`](crate::input::RestoreDBInstanceToPointInTimeInput)
    pub fn builder() -> crate::input::restore_db_instance_to_point_in_time_input::Builder {
        crate::input::restore_db_instance_to_point_in_time_input::Builder::default()
    }
}

/// See [`RevokeDBSecurityGroupIngressInput`](crate::input::RevokeDBSecurityGroupIngressInput)
pub mod revoke_db_security_group_ingress_input {
    /// A builder for [`RevokeDBSecurityGroupIngressInput`](crate::input::RevokeDBSecurityGroupIngressInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_security_group_name: std::option::Option<std::string::String>,
        pub(crate) cidrip: std::option::Option<std::string::String>,
        pub(crate) ec2_security_group_name: std::option::Option<std::string::String>,
        pub(crate) ec2_security_group_id: std::option::Option<std::string::String>,
        pub(crate) ec2_security_group_owner_id: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The name of the DB security group to revoke ingress from.</p>
        pub fn db_security_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_security_group_name = Some(input.into());
            self
        }
        pub fn set_db_security_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_security_group_name = input;
            self
        }
        /// <p>
        /// The IP range to revoke access from.
        /// Must be a valid CIDR range. If <code>CIDRIP</code> is specified,
        /// <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code>
        /// can't be provided.
        /// </p>
        pub fn cidrip(mut self, input: impl Into<std::string::String>) -> Self {
            self.cidrip = Some(input.into());
            self
        }
        pub fn set_cidrip(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cidrip = input;
            self
        }
        /// <p>
        /// The name of the EC2 security group to revoke access from.
        /// For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
        /// Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.
        /// </p>
        pub fn ec2_security_group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.ec2_security_group_name = Some(input.into());
            self
        }
        pub fn set_ec2_security_group_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.ec2_security_group_name = input;
            self
        }
        /// <p>
        /// The id of the EC2 security group to revoke access from.
        /// For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
        /// Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.
        /// </p>
        pub fn ec2_security_group_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.ec2_security_group_id = Some(input.into());
            self
        }
        pub fn set_ec2_security_group_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.ec2_security_group_id = input;
            self
        }
        /// <p>
        /// The AWS account number of the owner of the EC2 security group
        /// specified in the <code>EC2SecurityGroupName</code> parameter.
        /// The AWS access key ID isn't an acceptable value.
        /// For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
        /// Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.
        /// </p>
        pub fn ec2_security_group_owner_id(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.ec2_security_group_owner_id = Some(input.into());
            self
        }
        pub fn set_ec2_security_group_owner_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.ec2_security_group_owner_id = input;
            self
        }
        /// Consumes the builder and constructs a [`RevokeDBSecurityGroupIngressInput`](crate::input::RevokeDBSecurityGroupIngressInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::RevokeDBSecurityGroupIngressInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::RevokeDBSecurityGroupIngressInput {
                db_security_group_name: self.db_security_group_name,
                cidrip: self.cidrip,
                ec2_security_group_name: self.ec2_security_group_name,
                ec2_security_group_id: self.ec2_security_group_id,
                ec2_security_group_owner_id: self.ec2_security_group_owner_id,
            })
        }
    }
}
#[doc(hidden)]
pub type RevokeDBSecurityGroupIngressInputOperationOutputAlias =
    crate::operation::RevokeDBSecurityGroupIngress;
#[doc(hidden)]
pub type RevokeDBSecurityGroupIngressInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl RevokeDBSecurityGroupIngressInput {
    /// Consumes the builder and constructs an Operation<[`RevokeDBSecurityGroupIngress`](crate::operation::RevokeDBSecurityGroupIngress)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::RevokeDBSecurityGroupIngress,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_revoke_db_security_group_ingress(&self)
                    .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::RevokeDBSecurityGroupIngress::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "RevokeDBSecurityGroupIngress",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`RevokeDBSecurityGroupIngressInput`](crate::input::RevokeDBSecurityGroupIngressInput)
    pub fn builder() -> crate::input::revoke_db_security_group_ingress_input::Builder {
        crate::input::revoke_db_security_group_ingress_input::Builder::default()
    }
}

/// See [`StartActivityStreamInput`](crate::input::StartActivityStreamInput)
pub mod start_activity_stream_input {
    /// A builder for [`StartActivityStreamInput`](crate::input::StartActivityStreamInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_arn: std::option::Option<std::string::String>,
        pub(crate) mode: std::option::Option<crate::model::ActivityStreamMode>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) apply_immediately: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the DB cluster,
        /// for example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_arn = Some(input.into());
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_arn = input;
            self
        }
        /// <p>Specifies the mode of the database activity stream.
        /// Database events such as a change or access generate an activity stream event.
        /// The database session can handle these events either synchronously or asynchronously.
        /// </p>
        pub fn mode(mut self, input: crate::model::ActivityStreamMode) -> Self {
            self.mode = Some(input);
            self
        }
        pub fn set_mode(
            mut self,
            input: std::option::Option<crate::model::ActivityStreamMode>,
        ) -> Self {
            self.mode = input;
            self
        }
        /// <p>The AWS KMS key identifier for encrypting messages in the database activity stream.
        /// The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).</p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>Specifies whether or not the database activity stream is to start as soon as possible,
        /// regardless of the maintenance window for the database.</p>
        pub fn apply_immediately(mut self, input: bool) -> Self {
            self.apply_immediately = Some(input);
            self
        }
        pub fn set_apply_immediately(mut self, input: std::option::Option<bool>) -> Self {
            self.apply_immediately = input;
            self
        }
        /// Consumes the builder and constructs a [`StartActivityStreamInput`](crate::input::StartActivityStreamInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::StartActivityStreamInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::StartActivityStreamInput {
                resource_arn: self.resource_arn,
                mode: self.mode,
                kms_key_id: self.kms_key_id,
                apply_immediately: self.apply_immediately,
            })
        }
    }
}
#[doc(hidden)]
pub type StartActivityStreamInputOperationOutputAlias = crate::operation::StartActivityStream;
#[doc(hidden)]
pub type StartActivityStreamInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl StartActivityStreamInput {
    /// Consumes the builder and constructs an Operation<[`StartActivityStream`](crate::operation::StartActivityStream)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::StartActivityStream,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_start_activity_stream(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::StartActivityStream::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "StartActivityStream",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`StartActivityStreamInput`](crate::input::StartActivityStreamInput)
    pub fn builder() -> crate::input::start_activity_stream_input::Builder {
        crate::input::start_activity_stream_input::Builder::default()
    }
}

/// See [`StartDBClusterInput`](crate::input::StartDBClusterInput)
pub mod start_db_cluster_input {
    /// A builder for [`StartDBClusterInput`](crate::input::StartDBClusterInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as
        /// a lowercase string.</p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`StartDBClusterInput`](crate::input::StartDBClusterInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::StartDBClusterInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::StartDBClusterInput {
                db_cluster_identifier: self.db_cluster_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type StartDBClusterInputOperationOutputAlias = crate::operation::StartDBCluster;
#[doc(hidden)]
pub type StartDBClusterInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl StartDBClusterInput {
    /// Consumes the builder and constructs an Operation<[`StartDBCluster`](crate::operation::StartDBCluster)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::StartDBCluster,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_start_db_cluster(&self).map_err(
                |err| smithy_http::operation::BuildError::SerializationError(err.into()),
            )?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::StartDBCluster::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "StartDBCluster",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`StartDBClusterInput`](crate::input::StartDBClusterInput)
    pub fn builder() -> crate::input::start_db_cluster_input::Builder {
        crate::input::start_db_cluster_input::Builder::default()
    }
}

/// See [`StartDBInstanceInput`](crate::input::StartDBInstanceInput)
pub mod start_db_instance_input {
    /// A builder for [`StartDBInstanceInput`](crate::input::StartDBInstanceInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>
        /// The user-supplied instance identifier.
        /// </p>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`StartDBInstanceInput`](crate::input::StartDBInstanceInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::StartDBInstanceInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::StartDBInstanceInput {
                db_instance_identifier: self.db_instance_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type StartDBInstanceInputOperationOutputAlias = crate::operation::StartDBInstance;
#[doc(hidden)]
pub type StartDBInstanceInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl StartDBInstanceInput {
    /// Consumes the builder and constructs an Operation<[`StartDBInstance`](crate::operation::StartDBInstance)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::StartDBInstance,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_start_db_instance(&self).map_err(
                |err| smithy_http::operation::BuildError::SerializationError(err.into()),
            )?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::StartDBInstance::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "StartDBInstance",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`StartDBInstanceInput`](crate::input::StartDBInstanceInput)
    pub fn builder() -> crate::input::start_db_instance_input::Builder {
        crate::input::start_db_instance_input::Builder::default()
    }
}

/// See [`StartDBInstanceAutomatedBackupsReplicationInput`](crate::input::StartDBInstanceAutomatedBackupsReplicationInput)
pub mod start_db_instance_automated_backups_replication_input {
    /// A builder for [`StartDBInstanceAutomatedBackupsReplicationInput`](crate::input::StartDBInstanceAutomatedBackupsReplicationInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) source_db_instance_arn: std::option::Option<std::string::String>,
        pub(crate) backup_retention_period: std::option::Option<i32>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) pre_signed_url: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the source DB instance for the replicated automated backups, for example,
        /// <code>arn:aws:rds:us-west-2:123456789012:db:mydatabase</code>.</p>
        pub fn source_db_instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_db_instance_arn = Some(input.into());
            self
        }
        pub fn set_source_db_instance_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_db_instance_arn = input;
            self
        }
        /// <p>The retention period for the replicated automated backups.</p>
        pub fn backup_retention_period(mut self, input: i32) -> Self {
            self.backup_retention_period = Some(input);
            self
        }
        pub fn set_backup_retention_period(mut self, input: std::option::Option<i32>) -> Self {
            self.backup_retention_period = input;
            self
        }
        /// <p>The AWS KMS key identifier for encryption of the replicated automated backups. The KMS key ID is the
        /// Amazon Resource Name (ARN) for the KMS encryption key in the destination AWS Region, for example,
        /// <code>arn:aws:kms:us-east-1:123456789012:key/AKIAIOSFODNN7EXAMPLE</code>.</p>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>A URL that contains a Signature Version 4 signed request for the StartDBInstanceAutomatedBackupsReplication action to be
        /// called in the AWS Region of the source DB instance. The presigned URL must be a valid request for the
        /// StartDBInstanceAutomatedBackupsReplication API action that can be executed in the AWS Region that contains
        /// the source DB instance.</p>
        pub fn pre_signed_url(mut self, input: impl Into<std::string::String>) -> Self {
            self.pre_signed_url = Some(input.into());
            self
        }
        pub fn set_pre_signed_url(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.pre_signed_url = input;
            self
        }
        /// Consumes the builder and constructs a [`StartDBInstanceAutomatedBackupsReplicationInput`](crate::input::StartDBInstanceAutomatedBackupsReplicationInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::StartDBInstanceAutomatedBackupsReplicationInput,
            smithy_http::operation::BuildError,
        > {
            Ok(
                crate::input::StartDBInstanceAutomatedBackupsReplicationInput {
                    source_db_instance_arn: self.source_db_instance_arn,
                    backup_retention_period: self.backup_retention_period,
                    kms_key_id: self.kms_key_id,
                    pre_signed_url: self.pre_signed_url,
                },
            )
        }
    }
}
#[doc(hidden)]
pub type StartDBInstanceAutomatedBackupsReplicationInputOperationOutputAlias =
    crate::operation::StartDBInstanceAutomatedBackupsReplication;
#[doc(hidden)]
pub type StartDBInstanceAutomatedBackupsReplicationInputOperationRetryAlias =
    aws_http::AwsErrorRetryPolicy;
impl StartDBInstanceAutomatedBackupsReplicationInput {
    /// Consumes the builder and constructs an Operation<[`StartDBInstanceAutomatedBackupsReplication`](crate::operation::StartDBInstanceAutomatedBackupsReplication)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::StartDBInstanceAutomatedBackupsReplication,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_start_db_instance_automated_backups_replication(&self).map_err(|err|smithy_http::operation::BuildError::SerializationError(err.into()))?
            ;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::StartDBInstanceAutomatedBackupsReplication::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "StartDBInstanceAutomatedBackupsReplication",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`StartDBInstanceAutomatedBackupsReplicationInput`](crate::input::StartDBInstanceAutomatedBackupsReplicationInput)
    pub fn builder() -> crate::input::start_db_instance_automated_backups_replication_input::Builder
    {
        crate::input::start_db_instance_automated_backups_replication_input::Builder::default()
    }
}

/// See [`StartExportTaskInput`](crate::input::StartExportTaskInput)
pub mod start_export_task_input {
    /// A builder for [`StartExportTaskInput`](crate::input::StartExportTaskInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) export_task_identifier: std::option::Option<std::string::String>,
        pub(crate) source_arn: std::option::Option<std::string::String>,
        pub(crate) s3_bucket_name: std::option::Option<std::string::String>,
        pub(crate) iam_role_arn: std::option::Option<std::string::String>,
        pub(crate) kms_key_id: std::option::Option<std::string::String>,
        pub(crate) s3_prefix: std::option::Option<std::string::String>,
        pub(crate) export_only: std::option::Option<std::vec::Vec<std::string::String>>,
    }
    impl Builder {
        /// <p>A unique identifier for the snapshot export task. This ID isn't an identifier for
        /// the Amazon S3 bucket where the snapshot is to be exported to. </p>
        pub fn export_task_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.export_task_identifier = Some(input.into());
            self
        }
        pub fn set_export_task_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.export_task_identifier = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.</p>
        pub fn source_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_arn = Some(input.into());
            self
        }
        pub fn set_source_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.source_arn = input;
            self
        }
        /// <p>The name of the Amazon S3 bucket to export the snapshot to.</p>
        pub fn s3_bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_bucket_name = Some(input.into());
            self
        }
        pub fn set_s3_bucket_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.s3_bucket_name = input;
            self
        }
        /// <p>The name of the IAM role to use for writing to the Amazon S3 bucket
        /// when exporting a snapshot. </p>
        pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.iam_role_arn = Some(input.into());
            self
        }
        pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.iam_role_arn = input;
            self
        }
        /// <p>The ID of the AWS KMS customer master key (CMK) to use to encrypt the snapshot exported to Amazon S3. The AWS KMS
        /// key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).
        /// The caller of this operation must be authorized to
        /// execute the following operations. These can be set in the AWS KMS key policy: </p>
        /// <ul>
        /// <li>
        /// <p>GrantOperation.Encrypt</p>
        /// </li>
        /// <li>
        /// <p>GrantOperation.Decrypt</p>
        /// </li>
        /// <li>
        /// <p>GrantOperation.GenerateDataKey</p>
        /// </li>
        /// <li>
        /// <p>GrantOperation.GenerateDataKeyWithoutPlaintext</p>
        /// </li>
        /// <li>
        /// <p>GrantOperation.ReEncryptFrom</p>
        /// </li>
        /// <li>
        /// <p>GrantOperation.ReEncryptTo</p>
        /// </li>
        /// <li>
        /// <p>GrantOperation.CreateGrant</p>
        /// </li>
        /// <li>
        /// <p>GrantOperation.DescribeKey</p>
        /// </li>
        /// <li>
        /// <p>GrantOperation.RetireGrant</p>
        /// </li>
        /// </ul>
        pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.kms_key_id = Some(input.into());
            self
        }
        pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.kms_key_id = input;
            self
        }
        /// <p>The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.</p>
        pub fn s3_prefix(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_prefix = Some(input.into());
            self
        }
        pub fn set_s3_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.s3_prefix = input;
            self
        }
        pub fn export_only(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.export_only.unwrap_or_default();
            v.push(input.into());
            self.export_only = Some(v);
            self
        }
        pub fn set_export_only(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.export_only = input;
            self
        }
        /// Consumes the builder and constructs a [`StartExportTaskInput`](crate::input::StartExportTaskInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::StartExportTaskInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::StartExportTaskInput {
                export_task_identifier: self.export_task_identifier,
                source_arn: self.source_arn,
                s3_bucket_name: self.s3_bucket_name,
                iam_role_arn: self.iam_role_arn,
                kms_key_id: self.kms_key_id,
                s3_prefix: self.s3_prefix,
                export_only: self.export_only,
            })
        }
    }
}
#[doc(hidden)]
pub type StartExportTaskInputOperationOutputAlias = crate::operation::StartExportTask;
#[doc(hidden)]
pub type StartExportTaskInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl StartExportTaskInput {
    /// Consumes the builder and constructs an Operation<[`StartExportTask`](crate::operation::StartExportTask)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::StartExportTask,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_start_export_task(&self).map_err(
                |err| smithy_http::operation::BuildError::SerializationError(err.into()),
            )?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::StartExportTask::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "StartExportTask",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`StartExportTaskInput`](crate::input::StartExportTaskInput)
    pub fn builder() -> crate::input::start_export_task_input::Builder {
        crate::input::start_export_task_input::Builder::default()
    }
}

/// See [`StopActivityStreamInput`](crate::input::StopActivityStreamInput)
pub mod stop_activity_stream_input {
    /// A builder for [`StopActivityStreamInput`](crate::input::StopActivityStreamInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_arn: std::option::Option<std::string::String>,
        pub(crate) apply_immediately: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the DB cluster for the database activity stream.
        /// For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
        /// </p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.resource_arn = Some(input.into());
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.resource_arn = input;
            self
        }
        /// <p>Specifies whether or not the database activity stream is to stop as soon as possible,
        /// regardless of the maintenance window for the database.</p>
        pub fn apply_immediately(mut self, input: bool) -> Self {
            self.apply_immediately = Some(input);
            self
        }
        pub fn set_apply_immediately(mut self, input: std::option::Option<bool>) -> Self {
            self.apply_immediately = input;
            self
        }
        /// Consumes the builder and constructs a [`StopActivityStreamInput`](crate::input::StopActivityStreamInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::StopActivityStreamInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::StopActivityStreamInput {
                resource_arn: self.resource_arn,
                apply_immediately: self.apply_immediately,
            })
        }
    }
}
#[doc(hidden)]
pub type StopActivityStreamInputOperationOutputAlias = crate::operation::StopActivityStream;
#[doc(hidden)]
pub type StopActivityStreamInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl StopActivityStreamInput {
    /// Consumes the builder and constructs an Operation<[`StopActivityStream`](crate::operation::StopActivityStream)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::StopActivityStream,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_stop_activity_stream(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::StopActivityStream::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "StopActivityStream",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`StopActivityStreamInput`](crate::input::StopActivityStreamInput)
    pub fn builder() -> crate::input::stop_activity_stream_input::Builder {
        crate::input::stop_activity_stream_input::Builder::default()
    }
}

/// See [`StopDBClusterInput`](crate::input::StopDBClusterInput)
pub mod stop_db_cluster_input {
    /// A builder for [`StopDBClusterInput`](crate::input::StopDBClusterInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as
        /// a lowercase string.</p>
        pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_cluster_identifier = Some(input.into());
            self
        }
        pub fn set_db_cluster_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_cluster_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`StopDBClusterInput`](crate::input::StopDBClusterInput)
        pub fn build(
            self,
        ) -> std::result::Result<crate::input::StopDBClusterInput, smithy_http::operation::BuildError>
        {
            Ok(crate::input::StopDBClusterInput {
                db_cluster_identifier: self.db_cluster_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type StopDBClusterInputOperationOutputAlias = crate::operation::StopDBCluster;
#[doc(hidden)]
pub type StopDBClusterInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl StopDBClusterInput {
    /// Consumes the builder and constructs an Operation<[`StopDBCluster`](crate::operation::StopDBCluster)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::StopDBCluster,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_stop_db_cluster(&self).map_err(
                |err| smithy_http::operation::BuildError::SerializationError(err.into()),
            )?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::StopDBCluster::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "StopDBCluster",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`StopDBClusterInput`](crate::input::StopDBClusterInput)
    pub fn builder() -> crate::input::stop_db_cluster_input::Builder {
        crate::input::stop_db_cluster_input::Builder::default()
    }
}

/// See [`StopDBInstanceInput`](crate::input::StopDBInstanceInput)
pub mod stop_db_instance_input {
    /// A builder for [`StopDBInstanceInput`](crate::input::StopDBInstanceInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
        pub(crate) db_snapshot_identifier: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>
        /// The user-supplied instance identifier.
        /// </p>
        pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_instance_identifier = Some(input.into());
            self
        }
        pub fn set_db_instance_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_instance_identifier = input;
            self
        }
        /// <p>
        /// The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped.
        /// </p>
        pub fn db_snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.db_snapshot_identifier = Some(input.into());
            self
        }
        pub fn set_db_snapshot_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.db_snapshot_identifier = input;
            self
        }
        /// Consumes the builder and constructs a [`StopDBInstanceInput`](crate::input::StopDBInstanceInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::StopDBInstanceInput,
            smithy_http::operation::BuildError,
        > {
            Ok(crate::input::StopDBInstanceInput {
                db_instance_identifier: self.db_instance_identifier,
                db_snapshot_identifier: self.db_snapshot_identifier,
            })
        }
    }
}
#[doc(hidden)]
pub type StopDBInstanceInputOperationOutputAlias = crate::operation::StopDBInstance;
#[doc(hidden)]
pub type StopDBInstanceInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl StopDBInstanceInput {
    /// Consumes the builder and constructs an Operation<[`StopDBInstance`](crate::operation::StopDBInstance)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::StopDBInstance,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_stop_db_instance(&self).map_err(
                |err| smithy_http::operation::BuildError::SerializationError(err.into()),
            )?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::StopDBInstance::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "StopDBInstance",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`StopDBInstanceInput`](crate::input::StopDBInstanceInput)
    pub fn builder() -> crate::input::stop_db_instance_input::Builder {
        crate::input::stop_db_instance_input::Builder::default()
    }
}

/// See [`StopDBInstanceAutomatedBackupsReplicationInput`](crate::input::StopDBInstanceAutomatedBackupsReplicationInput)
pub mod stop_db_instance_automated_backups_replication_input {
    /// A builder for [`StopDBInstanceAutomatedBackupsReplicationInput`](crate::input::StopDBInstanceAutomatedBackupsReplicationInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) source_db_instance_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Name (ARN) of the source DB instance for which to stop replicating automated backups, for example,
        /// <code>arn:aws:rds:us-west-2:123456789012:db:mydatabase</code>.</p>
        pub fn source_db_instance_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.source_db_instance_arn = Some(input.into());
            self
        }
        pub fn set_source_db_instance_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.source_db_instance_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`StopDBInstanceAutomatedBackupsReplicationInput`](crate::input::StopDBInstanceAutomatedBackupsReplicationInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::StopDBInstanceAutomatedBackupsReplicationInput,
            smithy_http::operation::BuildError,
        > {
            Ok(
                crate::input::StopDBInstanceAutomatedBackupsReplicationInput {
                    source_db_instance_arn: self.source_db_instance_arn,
                },
            )
        }
    }
}
#[doc(hidden)]
pub type StopDBInstanceAutomatedBackupsReplicationInputOperationOutputAlias =
    crate::operation::StopDBInstanceAutomatedBackupsReplication;
#[doc(hidden)]
pub type StopDBInstanceAutomatedBackupsReplicationInputOperationRetryAlias =
    aws_http::AwsErrorRetryPolicy;
impl StopDBInstanceAutomatedBackupsReplicationInput {
    /// Consumes the builder and constructs an Operation<[`StopDBInstanceAutomatedBackupsReplication`](crate::operation::StopDBInstanceAutomatedBackupsReplication)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        smithy_http::operation::Operation<
            crate::operation::StopDBInstanceAutomatedBackupsReplication,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_stop_db_instance_automated_backups_replication(&self).map_err(|err|smithy_http::operation::BuildError::SerializationError(err.into()))?
            ;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::StopDBInstanceAutomatedBackupsReplication::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "StopDBInstanceAutomatedBackupsReplication",
                "rds",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> std::result::Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/x-www-form-urlencoded");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`StopDBInstanceAutomatedBackupsReplicationInput`](crate::input::StopDBInstanceAutomatedBackupsReplicationInput)
    pub fn builder() -> crate::input::stop_db_instance_automated_backups_replication_input::Builder
    {
        crate::input::stop_db_instance_automated_backups_replication_input::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopDBInstanceAutomatedBackupsReplicationInput {
    /// <p>The Amazon Resource Name (ARN) of the source DB instance for which to stop replicating automated backups, for example,
    /// <code>arn:aws:rds:us-west-2:123456789012:db:mydatabase</code>.</p>
    pub source_db_instance_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for StopDBInstanceAutomatedBackupsReplicationInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopDBInstanceAutomatedBackupsReplicationInput");
        formatter.field("source_db_instance_arn", &self.source_db_instance_arn);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopDBInstanceInput {
    /// <p>
    /// The user-supplied instance identifier.
    /// </p>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>
    /// The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped.
    /// </p>
    pub db_snapshot_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for StopDBInstanceInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopDBInstanceInput");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("db_snapshot_identifier", &self.db_snapshot_identifier);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopDBClusterInput {
    /// <p>The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as
    /// a lowercase string.</p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for StopDBClusterInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopDBClusterInput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StopActivityStreamInput {
    /// <p>The Amazon Resource Name (ARN) of the DB cluster for the database activity stream.
    /// For example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.
    /// </p>
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>Specifies whether or not the database activity stream is to stop as soon as possible,
    /// regardless of the maintenance window for the database.</p>
    pub apply_immediately: std::option::Option<bool>,
}
impl std::fmt::Debug for StopActivityStreamInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StopActivityStreamInput");
        formatter.field("resource_arn", &self.resource_arn);
        formatter.field("apply_immediately", &self.apply_immediately);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartExportTaskInput {
    /// <p>A unique identifier for the snapshot export task. This ID isn't an identifier for
    /// the Amazon S3 bucket where the snapshot is to be exported to. </p>
    pub export_task_identifier: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the snapshot to export to Amazon S3.</p>
    pub source_arn: std::option::Option<std::string::String>,
    /// <p>The name of the Amazon S3 bucket to export the snapshot to.</p>
    pub s3_bucket_name: std::option::Option<std::string::String>,
    /// <p>The name of the IAM role to use for writing to the Amazon S3 bucket
    /// when exporting a snapshot. </p>
    pub iam_role_arn: std::option::Option<std::string::String>,
    /// <p>The ID of the AWS KMS customer master key (CMK) to use to encrypt the snapshot exported to Amazon S3. The AWS KMS
    /// key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).
    /// The caller of this operation must be authorized to
    /// execute the following operations. These can be set in the AWS KMS key policy: </p>
    /// <ul>
    /// <li>
    /// <p>GrantOperation.Encrypt</p>
    /// </li>
    /// <li>
    /// <p>GrantOperation.Decrypt</p>
    /// </li>
    /// <li>
    /// <p>GrantOperation.GenerateDataKey</p>
    /// </li>
    /// <li>
    /// <p>GrantOperation.GenerateDataKeyWithoutPlaintext</p>
    /// </li>
    /// <li>
    /// <p>GrantOperation.ReEncryptFrom</p>
    /// </li>
    /// <li>
    /// <p>GrantOperation.ReEncryptTo</p>
    /// </li>
    /// <li>
    /// <p>GrantOperation.CreateGrant</p>
    /// </li>
    /// <li>
    /// <p>GrantOperation.DescribeKey</p>
    /// </li>
    /// <li>
    /// <p>GrantOperation.RetireGrant</p>
    /// </li>
    /// </ul>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The Amazon S3 bucket prefix to use as the file name and path of the exported snapshot.</p>
    pub s3_prefix: std::option::Option<std::string::String>,
    /// <p>The data to be exported from the snapshot.
    /// If this parameter is not provided, all the snapshot data is exported.
    /// Valid values are the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>database</code> - Export all the data from a specified database.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>database.table</code>
    /// <i>table-name</i> -
    /// Export a table of the snapshot. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>database.schema</code>
    /// <i>schema-name</i> - Export a database schema of the snapshot.
    /// This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>database.schema.table</code>
    /// <i>table-name</i> - Export a table of the database schema.
    /// This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p>
    /// </li>
    /// </ul>
    pub export_only: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for StartExportTaskInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartExportTaskInput");
        formatter.field("export_task_identifier", &self.export_task_identifier);
        formatter.field("source_arn", &self.source_arn);
        formatter.field("s3_bucket_name", &self.s3_bucket_name);
        formatter.field("iam_role_arn", &self.iam_role_arn);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("s3_prefix", &self.s3_prefix);
        formatter.field("export_only", &self.export_only);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartDBInstanceAutomatedBackupsReplicationInput {
    /// <p>The Amazon Resource Name (ARN) of the source DB instance for the replicated automated backups, for example,
    /// <code>arn:aws:rds:us-west-2:123456789012:db:mydatabase</code>.</p>
    pub source_db_instance_arn: std::option::Option<std::string::String>,
    /// <p>The retention period for the replicated automated backups.</p>
    pub backup_retention_period: std::option::Option<i32>,
    /// <p>The AWS KMS key identifier for encryption of the replicated automated backups. The KMS key ID is the
    /// Amazon Resource Name (ARN) for the KMS encryption key in the destination AWS Region, for example,
    /// <code>arn:aws:kms:us-east-1:123456789012:key/AKIAIOSFODNN7EXAMPLE</code>.</p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>A URL that contains a Signature Version 4 signed request for the StartDBInstanceAutomatedBackupsReplication action to be
    /// called in the AWS Region of the source DB instance. The presigned URL must be a valid request for the
    /// StartDBInstanceAutomatedBackupsReplication API action that can be executed in the AWS Region that contains
    /// the source DB instance.</p>
    pub pre_signed_url: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for StartDBInstanceAutomatedBackupsReplicationInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartDBInstanceAutomatedBackupsReplicationInput");
        formatter.field("source_db_instance_arn", &self.source_db_instance_arn);
        formatter.field("backup_retention_period", &self.backup_retention_period);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("pre_signed_url", &self.pre_signed_url);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartDBInstanceInput {
    /// <p>
    /// The user-supplied instance identifier.
    /// </p>
    pub db_instance_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for StartDBInstanceInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartDBInstanceInput");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartDBClusterInput {
    /// <p>The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as
    /// a lowercase string.</p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for StartDBClusterInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartDBClusterInput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct StartActivityStreamInput {
    /// <p>The Amazon Resource Name (ARN) of the DB cluster,
    /// for example, <code>arn:aws:rds:us-east-1:12345667890:cluster:das-cluster</code>.</p>
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>Specifies the mode of the database activity stream.
    /// Database events such as a change or access generate an activity stream event.
    /// The database session can handle these events either synchronously or asynchronously.
    /// </p>
    pub mode: std::option::Option<crate::model::ActivityStreamMode>,
    /// <p>The AWS KMS key identifier for encrypting messages in the database activity stream.
    /// The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).</p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>Specifies whether or not the database activity stream is to start as soon as possible,
    /// regardless of the maintenance window for the database.</p>
    pub apply_immediately: std::option::Option<bool>,
}
impl std::fmt::Debug for StartActivityStreamInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("StartActivityStreamInput");
        formatter.field("resource_arn", &self.resource_arn);
        formatter.field("mode", &self.mode);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("apply_immediately", &self.apply_immediately);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RevokeDBSecurityGroupIngressInput {
    /// <p>The name of the DB security group to revoke ingress from.</p>
    pub db_security_group_name: std::option::Option<std::string::String>,
    /// <p>
    /// The IP range to revoke access from.
    /// Must be a valid CIDR range. If <code>CIDRIP</code> is specified,
    /// <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code>
    /// can't be provided.
    /// </p>
    pub cidrip: std::option::Option<std::string::String>,
    /// <p>
    /// The name of the EC2 security group to revoke access from.
    /// For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
    /// Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.
    /// </p>
    pub ec2_security_group_name: std::option::Option<std::string::String>,
    /// <p>
    /// The id of the EC2 security group to revoke access from.
    /// For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
    /// Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.
    /// </p>
    pub ec2_security_group_id: std::option::Option<std::string::String>,
    /// <p>
    /// The AWS account number of the owner of the EC2 security group
    /// specified in the <code>EC2SecurityGroupName</code> parameter.
    /// The AWS access key ID isn't an acceptable value.
    /// For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
    /// Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.
    /// </p>
    pub ec2_security_group_owner_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RevokeDBSecurityGroupIngressInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RevokeDBSecurityGroupIngressInput");
        formatter.field("db_security_group_name", &self.db_security_group_name);
        formatter.field("cidrip", &self.cidrip);
        formatter.field("ec2_security_group_name", &self.ec2_security_group_name);
        formatter.field("ec2_security_group_id", &self.ec2_security_group_id);
        formatter.field(
            "ec2_security_group_owner_id",
            &self.ec2_security_group_owner_id,
        );
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreDBInstanceToPointInTimeInput {
    /// <p>The identifier of the source DB instance from which to restore.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DB instance.</p>
    /// </li>
    /// </ul>
    pub source_db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>The name of the new DB instance to be created.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    pub target_db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>The date and time to restore from.</p>
    /// <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be before the latest restorable time for the DB instance</p>
    /// </li>
    /// <li>
    /// <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>2009-09-07T23:45:00Z</code>
    /// </p>
    pub restore_time: std::option::Option<smithy_types::Instant>,
    /// <p>
    /// A value that indicates whether the DB instance is restored from the latest backup time. By default, the DB instance
    /// isn't restored from the latest backup time.
    /// </p>
    /// <p>Constraints: Can't be specified if the <code>RestoreTime</code> parameter is provided.</p>
    pub use_latest_restorable_time: bool,
    /// <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>.
    /// Not all DB instance classes are available in all AWS Regions, or for all database engines.
    /// For the full list of DB instance classes,
    /// and availability for your engine, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>Default: The same DBInstanceClass as the original DB instance.</p>
    pub db_instance_class: std::option::Option<std::string::String>,
    /// <p>The port number on which the database accepts connections.</p>
    /// <p>Constraints: Value must be <code>1150-65535</code>
    /// </p>
    /// <p>Default: The same port as the original DB instance.</p>
    pub port: std::option::Option<i32>,
    /// <p>The Availability Zone (AZ) where the DB instance will be created.</p>
    /// <p>Default: A random, system-chosen Availability Zone.</p>
    /// <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    /// <p>Example: <code>us-east-1a</code>
    /// </p>
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>The DB subnet group name to use for the new instance.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
    /// <p>Example: <code>mySubnetgroup</code>
    /// </p>
    pub db_subnet_group_name: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p>
    /// <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    pub multi_az: std::option::Option<bool>,
    /// <p>A value that indicates whether the DB instance is publicly accessible.</p>
    /// <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC,
    /// and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses,
    /// and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>  
    /// <p>For more information, see <a>CreateDBInstance</a>.</p>
    pub publicly_accessible: std::option::Option<bool>,
    /// <p>A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.</p>
    pub auto_minor_version_upgrade: std::option::Option<bool>,
    /// <p>License model information for the restored DB instance.</p>
    /// <p>Default: Same as source.</p>
    /// <p>
    /// Valid values:  <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code>
    /// </p>
    pub license_model: std::option::Option<std::string::String>,
    /// <p>The database name for the restored DB instance.</p>
    /// <note>
    /// <p>This parameter isn't used for the MySQL or MariaDB engines.</p>
    /// </note>
    pub db_name: std::option::Option<std::string::String>,
    /// <p>The database engine to use for the new instance.</p>
    /// <p>Default: The same as source</p>
    /// <p>Constraint: Must be compatible with the engine of the source</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>mariadb</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>mysql</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se2</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se1</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>postgres</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ex</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-web</code>
    /// </p>
    /// </li>
    /// </ul>
    pub engine: std::option::Option<std::string::String>,
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p>
    /// <p>Constraints: Must be an integer greater than 1000.</p>
    /// <p>
    /// <b>SQL Server</b>
    /// </p>
    /// <p>Setting the IOPS value for the SQL Server database engine isn't supported.</p>
    pub iops: std::option::Option<i32>,
    /// <p>The name of the option group to be used for the restored DB instance.</p>
    /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
    pub option_group_name: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    pub copy_tags_to_snapshot: std::option::Option<bool>,
    /// <p>A list of tags.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>           
    /// </p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>Specifies the storage type to be associated with the DB instance.</p>
    /// <p>
    /// Valid values: <code>standard | gp2 | io1</code>
    /// </p>
    /// <p>
    /// If you specify <code>io1</code>, you must also include a value for the
    /// <code>Iops</code> parameter.
    /// </p>
    /// <p>
    /// Default: <code>io1</code> if the <code>Iops</code> parameter
    /// is specified, otherwise <code>gp2</code>
    /// </p>
    pub storage_type: std::option::Option<std::string::String>,
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    pub tde_credential_arn: std::option::Option<std::string::String>,
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    pub tde_credential_password: std::option::Option<std::string::String>,
    /// <p>
    /// A list of EC2 VPC security groups to associate with this DB instance.
    /// </p>
    /// <p>
    /// Default: The default EC2 VPC security group for the DB subnet group's VPC.
    /// </p>
    pub vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specify the Active Directory directory ID to restore the DB instance in.
    /// The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL
    /// Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
    /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub domain: std::option::Option<std::string::String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
    /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
    /// <p>For more information about IAM database authentication, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
    /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    pub enable_iam_database_authentication: std::option::Option<bool>,
    /// <p>The list of logs that the restored DB instance is to export to CloudWatch Logs. The values
    /// in the list depend on the DB engine being used. For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub enable_cloudwatch_logs_exports: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub processor_features: std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
    /// <p>A value that indicates whether the DB instance class of the DB instance uses its default processor features.</p>
    pub use_default_processor_features: std::option::Option<bool>,
    /// <p>The name of the DB parameter group to associate with this DB instance.</p>
    /// <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code>
    /// for the specified DB engine is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DBParameterGroup.</p>
    /// </li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    /// </li>
    /// </ul>
    pub db_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether the DB instance has deletion protection enabled.
    /// The database can't be deleted when deletion protection is enabled. By default,
    /// deletion protection is disabled. For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
    /// Deleting a DB Instance</a>.
    /// </p>
    pub deletion_protection: std::option::Option<bool>,
    /// <p>The resource ID of the source DB instance from which to restore.</p>
    pub source_dbi_resource_id: std::option::Option<std::string::String>,
    /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    /// <p>For more information about this setting, including limitations that apply to it, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
    /// Managing capacity automatically with Amazon RDS storage autoscaling</a>
    /// in the <i>Amazon RDS User Guide</i>.</p>
    pub max_allocated_storage: std::option::Option<i32>,
    /// <p>The Amazon Resource Name (ARN) of the replicated automated backups from which to restore, for example,
    /// <code>arn:aws:rds:useast-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
    pub source_db_instance_automated_backups_arn: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP</i> provides local or external connectivity to resources in
    /// your Outpost subnets through your on-premises network. For some use cases, a CoIP can
    /// provide lower latency for connections to the DB instance from outside of its virtual
    /// private cloud (VPC) on your local network.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on AWS Outposts</a>
    /// in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a>
    /// in the <i>AWS Outposts User Guide</i>.</p>
    pub enable_customer_owned_ip: std::option::Option<bool>,
}
impl std::fmt::Debug for RestoreDBInstanceToPointInTimeInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreDBInstanceToPointInTimeInput");
        formatter.field(
            "source_db_instance_identifier",
            &self.source_db_instance_identifier,
        );
        formatter.field(
            "target_db_instance_identifier",
            &self.target_db_instance_identifier,
        );
        formatter.field("restore_time", &self.restore_time);
        formatter.field(
            "use_latest_restorable_time",
            &self.use_latest_restorable_time,
        );
        formatter.field("db_instance_class", &self.db_instance_class);
        formatter.field("port", &self.port);
        formatter.field("availability_zone", &self.availability_zone);
        formatter.field("db_subnet_group_name", &self.db_subnet_group_name);
        formatter.field("multi_az", &self.multi_az);
        formatter.field("publicly_accessible", &self.publicly_accessible);
        formatter.field(
            "auto_minor_version_upgrade",
            &self.auto_minor_version_upgrade,
        );
        formatter.field("license_model", &self.license_model);
        formatter.field("db_name", &self.db_name);
        formatter.field("engine", &self.engine);
        formatter.field("iops", &self.iops);
        formatter.field("option_group_name", &self.option_group_name);
        formatter.field("copy_tags_to_snapshot", &self.copy_tags_to_snapshot);
        formatter.field("tags", &self.tags);
        formatter.field("storage_type", &self.storage_type);
        formatter.field("tde_credential_arn", &self.tde_credential_arn);
        formatter.field("tde_credential_password", &self.tde_credential_password);
        formatter.field("vpc_security_group_ids", &self.vpc_security_group_ids);
        formatter.field("domain", &self.domain);
        formatter.field("domain_iam_role_name", &self.domain_iam_role_name);
        formatter.field(
            "enable_iam_database_authentication",
            &self.enable_iam_database_authentication,
        );
        formatter.field(
            "enable_cloudwatch_logs_exports",
            &self.enable_cloudwatch_logs_exports,
        );
        formatter.field("processor_features", &self.processor_features);
        formatter.field(
            "use_default_processor_features",
            &self.use_default_processor_features,
        );
        formatter.field("db_parameter_group_name", &self.db_parameter_group_name);
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("source_dbi_resource_id", &self.source_dbi_resource_id);
        formatter.field("max_allocated_storage", &self.max_allocated_storage);
        formatter.field(
            "source_db_instance_automated_backups_arn",
            &self.source_db_instance_automated_backups_arn,
        );
        formatter.field("enable_customer_owned_ip", &self.enable_customer_owned_ip);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreDBInstanceFromS3Input {
    /// <p>The name of the database to create when the DB instance is created.
    /// Follow the naming rules specified in <code>CreateDBInstance</code>.
    /// </p>
    pub db_name: std::option::Option<std::string::String>,
    /// <p>The DB instance identifier. This parameter is stored as a lowercase string.
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>mydbinstance</code>
    /// </p>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>The amount of storage (in gigabytes) to allocate initially for the DB instance.
    /// Follow the allocation rules specified in <code>CreateDBInstance</code>.
    /// </p>
    /// <note>
    /// <p>Be sure to allocate enough memory for your new DB instance
    /// so that the restore operation can succeed.
    /// You can also allocate additional memory for future growth.
    /// </p>
    /// </note>
    pub allocated_storage: std::option::Option<i32>,
    /// <p>The compute and memory capacity of the DB instance,
    /// for example, <code>db.m4.large</code>.
    /// Not all DB instance classes are available in all AWS Regions,
    /// or for all database engines.
    /// For the full list of DB instance classes,
    /// and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>Importing from Amazon S3 isn't supported on the db.t2.micro DB instance class.
    /// </p>
    pub db_instance_class: std::option::Option<std::string::String>,
    /// <p>The name of the database engine to be used for this instance.
    /// </p>
    /// <p>Valid Values:  <code>mysql</code>
    /// </p>
    pub engine: std::option::Option<std::string::String>,
    /// <p>The name for the master user.
    /// </p>
    /// <p>Constraints:
    /// </p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 16 letters or numbers.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't be a reserved word for the chosen database engine.</p>
    /// </li>
    /// </ul>
    pub master_username: std::option::Option<std::string::String>,
    /// <p>The password for the master user.
    /// The password can include any printable ASCII character except "/", """, or "@".
    /// </p>
    /// <p>Constraints: Must contain from 8 to 41 characters.</p>
    pub master_user_password: std::option::Option<std::string::String>,
    /// <p>A list of DB security groups to associate with this DB instance.</p>
    /// <p>Default: The default DB security group for the database engine.</p>
    pub db_security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of VPC security groups to associate with this DB instance.
    /// </p>
    pub vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The Availability Zone that the DB instance is created in.
    /// For information about AWS Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.
    /// </p>
    /// <p>
    /// Example: <code>us-east-1d</code>
    /// </p>
    /// <p>Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment.
    /// The specified Availability Zone must be in the same AWS Region as the current endpoint.
    /// </p>
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>A DB subnet group to associate with this DB instance.</p>
    pub db_subnet_group_name: std::option::Option<std::string::String>,
    /// <p>The time range each week during which system maintenance can occur,
    /// in Universal Coordinated Time (UTC).
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p>
    /// </li>
    /// <li>
    /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
    /// </li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p>
    /// </li>
    /// <li>
    /// <p>Must not conflict with the preferred backup window.</p>
    /// </li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p>
    /// </li>
    /// </ul>
    pub preferred_maintenance_window: std::option::Option<std::string::String>,
    /// <p>The name of the DB parameter group to associate with this DB instance.</p>
    /// <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code>
    /// for the specified DB engine is used.</p>
    pub db_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>The number of days for which automated backups are retained.
    /// Setting this parameter to a positive number enables backups.
    /// For more information, see <code>CreateDBInstance</code>.
    /// </p>
    pub backup_retention_period: std::option::Option<i32>,
    /// <p>The time range each day
    /// during which automated backups are created
    /// if automated backups are enabled.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup window</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
    /// </li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p>
    /// </li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p>
    /// </li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p>
    /// </li>
    /// </ul>
    pub preferred_backup_window: std::option::Option<std::string::String>,
    /// <p>The port number on which the database accepts connections.
    /// </p>
    /// <p>Type: Integer
    /// </p>
    /// <p>Valid Values: <code>1150</code>-<code>65535</code>
    /// </p>
    /// <p>Default: <code>3306</code>
    /// </p>
    pub port: std::option::Option<i32>,
    /// <p>A value that indicates whether the DB instance is a Multi-AZ deployment.
    /// If the DB instance is a Multi-AZ deployment, you can't set the <code>AvailabilityZone</code> parameter.
    /// </p>
    pub multi_az: std::option::Option<bool>,
    /// <p>The version number of the database engine to use.
    /// Choose the latest minor version of your database engine.
    /// For information about engine versions, see <code>CreateDBInstance</code>, or call <code>DescribeDBEngineVersions</code>.
    /// </p>
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether minor engine upgrades are applied automatically
    /// to the DB instance during the maintenance window. By default, minor engine upgrades
    /// are not applied automatically.
    /// </p>
    pub auto_minor_version_upgrade: std::option::Option<bool>,
    /// <p>The license model for this DB instance.
    /// Use <code>general-public-license</code>.
    /// </p>
    pub license_model: std::option::Option<std::string::String>,
    /// <p>The amount of Provisioned IOPS (input/output operations per second)
    /// to allocate initially for the DB instance.
    /// For information about valid Iops values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a>
    /// in the <i>Amazon RDS User Guide.</i>
    /// </p>
    pub iops: std::option::Option<i32>,
    /// <p>The name of the option group to associate with this DB instance.
    /// If this argument is omitted, the default option group for the specified engine is used.
    /// </p>
    pub option_group_name: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether the DB instance is publicly accessible.</p>
    /// <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC,
    /// and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses,
    /// and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>  
    /// <p>For more information, see <a>CreateDBInstance</a>.</p>
    pub publicly_accessible: std::option::Option<bool>,
    /// <p>A list of tags to associate with this DB instance.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>            
    /// </p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>Specifies the storage type to be associated with the DB instance.
    /// </p>
    /// <p>Valid values: <code>standard</code> | <code>gp2</code> | <code>io1</code>
    /// </p>
    /// <p>If you specify <code>io1</code>,
    /// you must also include a value for the <code>Iops</code> parameter.
    /// </p>
    /// <p>Default: <code>io1</code>
    /// if the <code>Iops</code> parameter is specified;
    /// otherwise <code>gp2</code>
    /// </p>
    pub storage_type: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether the new DB instance is encrypted or not.
    /// </p>
    pub storage_encrypted: std::option::Option<bool>,
    /// <p>The AWS KMS key identifier for an encrypted DB instance.
    /// </p>
    /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).
    /// To use a CMK in a different AWS account, specify the key ARN or alias ARN.</p>
    /// <p>If the <code>StorageEncrypted</code> parameter is enabled,
    /// and you do not specify a value for the <code>KmsKeyId</code> parameter,
    /// then Amazon RDS will use your default CMK.
    /// There is a default CMK for your AWS account.
    /// Your AWS account has a different default CMK for each AWS Region.
    /// </p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.
    /// </p>
    pub copy_tags_to_snapshot: std::option::Option<bool>,
    /// <p>The interval, in seconds,
    /// between points when Enhanced Monitoring metrics are collected for the DB instance.
    /// To disable collecting Enhanced Monitoring metrics, specify 0.
    /// </p>
    /// <p>If <code>MonitoringRoleArn</code> is specified,
    /// then you must also set <code>MonitoringInterval</code> to a value other than 0.
    /// </p>
    /// <p>Valid Values: 0, 1, 5, 10, 15, 30, 60
    /// </p>
    /// <p>Default: <code>0</code>
    /// </p>
    pub monitoring_interval: std::option::Option<i32>,
    /// <p>The ARN for the IAM role that permits RDS
    /// to send enhanced monitoring metrics to Amazon CloudWatch Logs.
    /// For example, <code>arn:aws:iam:123456789012:role/emaccess</code>.
    /// For information on creating a monitoring role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a>
    /// in the <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>If <code>MonitoringInterval</code> is set to a value other than 0,
    /// then you must supply a <code>MonitoringRoleArn</code> value.
    /// </p>
    pub monitoring_role_arn: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
    /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
    /// <p>For more information about IAM database authentication, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
    /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    pub enable_iam_database_authentication: std::option::Option<bool>,
    /// <p>The name of the engine of your source database.
    /// </p>
    /// <p>Valid Values:  <code>mysql</code>
    /// </p>
    pub source_engine: std::option::Option<std::string::String>,
    /// <p>The version of the database that the backup files were created from.</p>
    /// <p>MySQL versions 5.6 and 5.7 are supported.
    /// </p>
    /// <p>Example: <code>5.6.40</code>
    /// </p>
    pub source_engine_version: std::option::Option<std::string::String>,
    /// <p>The name of your Amazon S3 bucket
    /// that contains your database backup file.
    /// </p>
    pub s3_bucket_name: std::option::Option<std::string::String>,
    /// <p>The prefix of your Amazon S3 bucket.
    /// </p>
    pub s3_prefix: std::option::Option<std::string::String>,
    /// <p>An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket.
    /// </p>
    pub s3_ingestion_role_arn: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to enable Performance Insights for the DB instance.
    /// </p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service
    /// User Guide</i>.
    /// </p>
    pub enable_performance_insights: std::option::Option<bool>,
    /// <p>The AWS KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).</p>
    /// <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS
    /// uses your default CMK. There is a default CMK for your AWS account.
    /// Your AWS account has a different default CMK for each AWS Region.</p>
    pub performance_insights_kms_key_id: std::option::Option<std::string::String>,
    /// <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). </p>
    pub performance_insights_retention_period: std::option::Option<i32>,
    /// <p>The list of logs that the restored DB instance is to export to CloudWatch Logs. The values
    /// in the list depend on the DB engine being used. For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub enable_cloudwatch_logs_exports: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub processor_features: std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
    /// <p>A value that indicates whether the DB instance class of the DB instance uses its default
    /// processor features.</p>
    pub use_default_processor_features: std::option::Option<bool>,
    /// <p>A value that indicates whether the DB instance has deletion protection enabled.
    /// The database can't be deleted when deletion protection is enabled. By default,
    /// deletion protection is disabled. For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
    /// Deleting a DB Instance</a>.
    /// </p>
    pub deletion_protection: std::option::Option<bool>,
    /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    /// <p>For more information about this setting, including limitations that apply to it, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
    /// Managing capacity automatically with Amazon RDS storage autoscaling</a>
    /// in the <i>Amazon RDS User Guide</i>.</p>
    pub max_allocated_storage: std::option::Option<i32>,
}
impl std::fmt::Debug for RestoreDBInstanceFromS3Input {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreDBInstanceFromS3Input");
        formatter.field("db_name", &self.db_name);
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("allocated_storage", &self.allocated_storage);
        formatter.field("db_instance_class", &self.db_instance_class);
        formatter.field("engine", &self.engine);
        formatter.field("master_username", &self.master_username);
        formatter.field("master_user_password", &self.master_user_password);
        formatter.field("db_security_groups", &self.db_security_groups);
        formatter.field("vpc_security_group_ids", &self.vpc_security_group_ids);
        formatter.field("availability_zone", &self.availability_zone);
        formatter.field("db_subnet_group_name", &self.db_subnet_group_name);
        formatter.field(
            "preferred_maintenance_window",
            &self.preferred_maintenance_window,
        );
        formatter.field("db_parameter_group_name", &self.db_parameter_group_name);
        formatter.field("backup_retention_period", &self.backup_retention_period);
        formatter.field("preferred_backup_window", &self.preferred_backup_window);
        formatter.field("port", &self.port);
        formatter.field("multi_az", &self.multi_az);
        formatter.field("engine_version", &self.engine_version);
        formatter.field(
            "auto_minor_version_upgrade",
            &self.auto_minor_version_upgrade,
        );
        formatter.field("license_model", &self.license_model);
        formatter.field("iops", &self.iops);
        formatter.field("option_group_name", &self.option_group_name);
        formatter.field("publicly_accessible", &self.publicly_accessible);
        formatter.field("tags", &self.tags);
        formatter.field("storage_type", &self.storage_type);
        formatter.field("storage_encrypted", &self.storage_encrypted);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("copy_tags_to_snapshot", &self.copy_tags_to_snapshot);
        formatter.field("monitoring_interval", &self.monitoring_interval);
        formatter.field("monitoring_role_arn", &self.monitoring_role_arn);
        formatter.field(
            "enable_iam_database_authentication",
            &self.enable_iam_database_authentication,
        );
        formatter.field("source_engine", &self.source_engine);
        formatter.field("source_engine_version", &self.source_engine_version);
        formatter.field("s3_bucket_name", &self.s3_bucket_name);
        formatter.field("s3_prefix", &self.s3_prefix);
        formatter.field("s3_ingestion_role_arn", &self.s3_ingestion_role_arn);
        formatter.field(
            "enable_performance_insights",
            &self.enable_performance_insights,
        );
        formatter.field(
            "performance_insights_kms_key_id",
            &self.performance_insights_kms_key_id,
        );
        formatter.field(
            "performance_insights_retention_period",
            &self.performance_insights_retention_period,
        );
        formatter.field(
            "enable_cloudwatch_logs_exports",
            &self.enable_cloudwatch_logs_exports,
        );
        formatter.field("processor_features", &self.processor_features);
        formatter.field(
            "use_default_processor_features",
            &self.use_default_processor_features,
        );
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("max_allocated_storage", &self.max_allocated_storage);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreDBInstanceFromDBSnapshotInput {
    /// <p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 numbers, letters, or hyphens</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-snapshot-id</code>
    /// </p>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>The identifier for the DB snapshot to restore from.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DBSnapshot.</p>
    /// </li>
    /// <li>
    /// <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code>
    /// must be the ARN of the shared DB snapshot.</p>
    /// </li>
    /// </ul>
    pub db_snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>The compute and memory capacity of the Amazon RDS DB instance, for example, <code>db.m4.large</code>.
    /// Not all DB instance classes are available in all AWS Regions, or for all database engines.
    /// For the full list of DB instance classes,
    /// and availability for your engine, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>Default: The same DBInstanceClass as the original DB instance.</p>
    pub db_instance_class: std::option::Option<std::string::String>,
    /// <p>The port number on which the database accepts connections.</p>
    /// <p>Default: The same port as the original DB instance</p>
    /// <p>Constraints: Value must be <code>1150-65535</code>
    /// </p>
    pub port: std::option::Option<i32>,
    /// <p>The Availability Zone (AZ) where the DB instance will be created.</p>
    /// <p>Default: A random, system-chosen Availability Zone.</p>
    /// <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    /// <p>Example: <code>us-east-1a</code>
    /// </p>
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>The DB subnet group name to use for the new instance.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
    /// <p>Example: <code>mySubnetgroup</code>
    /// </p>
    pub db_subnet_group_name: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether the DB instance is a Multi-AZ deployment.</p>
    /// <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    pub multi_az: std::option::Option<bool>,
    /// <p>A value that indicates whether the DB instance is publicly accessible.</p>
    /// <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC,
    /// and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses,
    /// and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>  
    /// <p>For more information, see <a>CreateDBInstance</a>.</p>
    pub publicly_accessible: std::option::Option<bool>,
    /// <p>A value that indicates whether minor version upgrades are applied automatically to the DB instance during the maintenance window.</p>
    pub auto_minor_version_upgrade: std::option::Option<bool>,
    /// <p>License model information for the restored DB instance.</p>
    /// <p>Default: Same as source.</p>
    /// <p>
    /// Valid values:  <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code>
    /// </p>
    pub license_model: std::option::Option<std::string::String>,
    /// <p>The database name for the restored DB instance.</p>
    /// <note>
    /// <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines.</p>
    /// </note>
    pub db_name: std::option::Option<std::string::String>,
    /// <p>The database engine to use for the new instance.</p>
    /// <p>Default: The same as source</p>
    /// <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>mariadb</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>mysql</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se2</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se1</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>postgres</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ex</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-web</code>
    /// </p>
    /// </li>
    /// </ul>
    pub engine: std::option::Option<std::string::String>,
    /// <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second.
    /// If this parameter isn't specified, the IOPS value is taken from the backup.
    /// If this parameter is set to 0, the new instance is converted to a non-PIOPS instance.
    /// The conversion takes additional time, though your DB instance is available for connections before the conversion starts.
    /// </p>
    /// <p>The provisioned IOPS value must follow the requirements for your database engine.
    /// For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a>
    /// in the <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>Constraints: Must be an integer greater than 1000.</p>
    pub iops: std::option::Option<i32>,
    /// <p>The name of the option group to be used for the restored DB instance.</p>
    /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
    pub option_group_name: std::option::Option<std::string::String>,
    /// <p>A list of tags.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>           
    /// </p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>Specifies the storage type to be associated with the DB instance.</p>
    /// <p>
    /// Valid values: <code>standard | gp2 | io1</code>
    /// </p>
    /// <p>
    /// If you specify <code>io1</code>, you must also include a value for the
    /// <code>Iops</code> parameter.
    /// </p>
    /// <p>
    /// Default: <code>io1</code> if the <code>Iops</code> parameter
    /// is specified, otherwise <code>gp2</code>
    /// </p>
    pub storage_type: std::option::Option<std::string::String>,
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    pub tde_credential_arn: std::option::Option<std::string::String>,
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    pub tde_credential_password: std::option::Option<std::string::String>,
    /// <p>
    /// A list of EC2 VPC security groups to associate with this DB instance.
    /// </p>
    /// <p>
    /// Default: The default EC2 VPC security group for the DB subnet group's VPC.
    /// </p>
    pub vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specify the Active Directory directory ID to restore the DB instance in.
    /// The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL
    /// Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
    /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub domain: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    pub copy_tags_to_snapshot: std::option::Option<bool>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
    /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
    /// <p>For more information about IAM database authentication, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
    /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    pub enable_iam_database_authentication: std::option::Option<bool>,
    /// <p>The list of logs that the restored DB instance is to export to CloudWatch Logs. The values
    /// in the list depend on the DB engine being used. For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub enable_cloudwatch_logs_exports: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub processor_features: std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
    /// <p>A value that indicates whether the DB instance class of the DB instance uses its default
    /// processor features.</p>
    pub use_default_processor_features: std::option::Option<bool>,
    /// <p>The name of the DB parameter group to associate with this DB instance.</p>
    /// <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code>
    /// for the specified DB engine is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DBParameterGroup.</p>
    /// </li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    /// </li>
    /// </ul>
    pub db_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether the DB instance has deletion protection enabled.
    /// The database can't be deleted when deletion protection is enabled. By default,
    /// deletion protection is disabled. For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
    /// Deleting a DB Instance</a>.
    /// </p>
    pub deletion_protection: std::option::Option<bool>,
    /// <p>A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP</i> provides local or external connectivity to resources in
    /// your Outpost subnets through your on-premises network. For some use cases, a CoIP can
    /// provide lower latency for connections to the DB instance from outside of its virtual
    /// private cloud (VPC) on your local network.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on AWS Outposts</a>
    /// in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a>
    /// in the <i>AWS Outposts User Guide</i>.</p>
    pub enable_customer_owned_ip: std::option::Option<bool>,
}
impl std::fmt::Debug for RestoreDBInstanceFromDBSnapshotInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreDBInstanceFromDBSnapshotInput");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("db_snapshot_identifier", &self.db_snapshot_identifier);
        formatter.field("db_instance_class", &self.db_instance_class);
        formatter.field("port", &self.port);
        formatter.field("availability_zone", &self.availability_zone);
        formatter.field("db_subnet_group_name", &self.db_subnet_group_name);
        formatter.field("multi_az", &self.multi_az);
        formatter.field("publicly_accessible", &self.publicly_accessible);
        formatter.field(
            "auto_minor_version_upgrade",
            &self.auto_minor_version_upgrade,
        );
        formatter.field("license_model", &self.license_model);
        formatter.field("db_name", &self.db_name);
        formatter.field("engine", &self.engine);
        formatter.field("iops", &self.iops);
        formatter.field("option_group_name", &self.option_group_name);
        formatter.field("tags", &self.tags);
        formatter.field("storage_type", &self.storage_type);
        formatter.field("tde_credential_arn", &self.tde_credential_arn);
        formatter.field("tde_credential_password", &self.tde_credential_password);
        formatter.field("vpc_security_group_ids", &self.vpc_security_group_ids);
        formatter.field("domain", &self.domain);
        formatter.field("copy_tags_to_snapshot", &self.copy_tags_to_snapshot);
        formatter.field("domain_iam_role_name", &self.domain_iam_role_name);
        formatter.field(
            "enable_iam_database_authentication",
            &self.enable_iam_database_authentication,
        );
        formatter.field(
            "enable_cloudwatch_logs_exports",
            &self.enable_cloudwatch_logs_exports,
        );
        formatter.field("processor_features", &self.processor_features);
        formatter.field(
            "use_default_processor_features",
            &self.use_default_processor_features,
        );
        formatter.field("db_parameter_group_name", &self.db_parameter_group_name);
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("enable_customer_owned_ip", &self.enable_customer_owned_ip);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreDBClusterToPointInTimeInput {
    /// <p>The name of the new DB cluster to be created.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The type of restore to be performed. You can specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>full-copy</code> - The new DB cluster is restored as a full copy of the
    /// source DB cluster.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>copy-on-write</code> - The new DB cluster is restored as a clone of the
    /// source DB cluster.</p>
    /// </li>
    /// </ul>
    /// <p>Constraints: You can't specify <code>copy-on-write</code> if the engine version of the source DB cluster is earlier than 1.11.</p>
    /// <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is
    /// restored as a full copy of the source DB cluster.</p>
    pub restore_type: std::option::Option<std::string::String>,
    /// <p>The identifier of the source DB cluster from which to restore.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DBCluster.</p>
    /// </li>
    /// </ul>
    pub source_db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The date and time to restore the DB cluster to.</p>
    /// <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be before the latest restorable time for the DB instance</p>
    /// </li>
    /// <li>
    /// <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p>
    /// </li>
    /// <li>
    /// <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p>
    /// </li>
    /// <li>
    /// <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>2015-03-07T23:45:00Z</code>
    /// </p>
    pub restore_to_time: std::option::Option<smithy_types::Instant>,
    /// <p>A value that indicates whether to restore the DB cluster to the latest
    /// restorable backup time. By default, the DB cluster isn't restored to the latest
    /// restorable backup time.
    /// </p>
    /// <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
    pub use_latest_restorable_time: bool,
    /// <p>The port number on which the new DB cluster accepts connections.</p>
    /// <p>Constraints: A value from <code>1150-65535</code>.
    /// </p>
    /// <p>Default: The default port for the engine.</p>
    pub port: std::option::Option<i32>,
    /// <p>The DB subnet group name to use for the new DB cluster.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
    /// <p>Example: <code>mySubnetgroup</code>
    /// </p>
    pub db_subnet_group_name: std::option::Option<std::string::String>,
    /// <p>The name of the option group for the new DB cluster.</p>
    pub option_group_name: std::option::Option<std::string::String>,
    /// <p>A list of VPC security groups that the new DB cluster belongs to.</p>
    pub vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of tags.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>           
    /// </p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p>
    /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).
    /// To use a CMK in a different AWS account, specify the key ARN or alias ARN.</p>
    /// <p>You can restore to a new DB cluster and encrypt the new DB cluster with a AWS KMS CMK that is different than the
    /// AWS KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the AWS KMS CMK
    /// identified by the <code>KmsKeyId</code> parameter.</p>
    /// <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p>
    /// <ul>
    /// <li>
    /// <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the AWS KMS CMK that was used to encrypt the source DB cluster.</p>
    /// </li>
    /// <li>
    /// <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p>
    /// </li>
    /// </ul>
    /// <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request
    /// is rejected.</p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
    /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
    /// IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i>
    /// </p>
    pub enable_iam_database_authentication: std::option::Option<bool>,
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to
    /// 0.</p>
    /// <note>
    /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
    /// </note>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p>
    /// </li>
    /// </ul>
    pub backtrack_window: std::option::Option<i64>,
    /// <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values
    /// in the list depend on the DB engine being used. For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub enable_cloudwatch_logs_exports: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The name of the DB cluster parameter group to associate with this DB cluster.
    /// If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB cluster parameter group.</p>
    /// </li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    /// </li>
    /// </ul>
    pub db_cluster_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether the DB cluster has deletion protection enabled.
    /// The database can't be deleted when deletion protection is enabled. By default,
    /// deletion protection is disabled.
    /// </p>
    pub deletion_protection: std::option::Option<bool>,
    /// <p>A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    pub copy_tags_to_snapshot: std::option::Option<bool>,
    /// <p>Specify the Active Directory directory ID to restore the DB cluster in.
    /// The domain must be created prior to this operation.
    /// </p>
    /// <p>
    /// For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a>
    /// in the <i>Amazon Aurora User Guide</i>.
    /// </p>
    pub domain: std::option::Option<std::string::String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RestoreDBClusterToPointInTimeInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreDBClusterToPointInTimeInput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field("restore_type", &self.restore_type);
        formatter.field(
            "source_db_cluster_identifier",
            &self.source_db_cluster_identifier,
        );
        formatter.field("restore_to_time", &self.restore_to_time);
        formatter.field(
            "use_latest_restorable_time",
            &self.use_latest_restorable_time,
        );
        formatter.field("port", &self.port);
        formatter.field("db_subnet_group_name", &self.db_subnet_group_name);
        formatter.field("option_group_name", &self.option_group_name);
        formatter.field("vpc_security_group_ids", &self.vpc_security_group_ids);
        formatter.field("tags", &self.tags);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field(
            "enable_iam_database_authentication",
            &self.enable_iam_database_authentication,
        );
        formatter.field("backtrack_window", &self.backtrack_window);
        formatter.field(
            "enable_cloudwatch_logs_exports",
            &self.enable_cloudwatch_logs_exports,
        );
        formatter.field(
            "db_cluster_parameter_group_name",
            &self.db_cluster_parameter_group_name,
        );
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("copy_tags_to_snapshot", &self.copy_tags_to_snapshot);
        formatter.field("domain", &self.domain);
        formatter.field("domain_iam_role_name", &self.domain_iam_role_name);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreDBClusterFromSnapshotInput {
    /// <p>Provides the list of Availability Zones (AZs) where instances in the restored DB
    /// cluster can be created.</p>
    pub availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot.
    /// This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-snapshot-id</code>
    /// </p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p>
    /// <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB
    /// cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing Snapshot.</p>
    /// </li>
    /// </ul>
    pub snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>The database engine to use for the new DB cluster.</p>
    /// <p>Default: The same as source</p>
    /// <p>Constraint: Must be compatible with the engine of the source</p>
    pub engine: std::option::Option<std::string::String>,
    /// <p>The version of the database engine to use for the new DB cluster.</p>
    /// <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code>
    /// </p>
    /// <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code>
    /// </p>
    /// <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code>
    /// </p>
    /// <note>
    /// <p>If you aren't using the default engine version, then you must specify the engine version.</p>
    /// </note>
    /// <p>
    /// <b>Aurora MySQL</b>
    /// </p>
    /// <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code>
    /// </p>
    /// <p>
    /// <b>Aurora PostgreSQL</b>
    /// </p>
    /// <p>Example: <code>9.6.3</code>, <code>10.7</code>
    /// </p>
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The port number on which the new DB cluster accepts connections.</p>
    /// <p>Constraints: This value must be <code>1150-65535</code>
    /// </p>
    /// <p>Default: The same port as the original DB cluster.</p>
    pub port: std::option::Option<i32>,
    /// <p>The name of the DB subnet group to use for the new DB cluster.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p>
    /// <p>Example: <code>mySubnetgroup</code>
    /// </p>
    pub db_subnet_group_name: std::option::Option<std::string::String>,
    /// <p>The database name for the restored DB cluster.</p>
    pub database_name: std::option::Option<std::string::String>,
    /// <p>The name of the option group to use for the restored DB cluster.</p>
    pub option_group_name: std::option::Option<std::string::String>,
    /// <p>A list of VPC security groups that the new DB cluster will belong to.</p>
    pub vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The tags to be assigned to the restored DB cluster.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB
    /// snapshot or DB cluster snapshot.</p>
    /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).
    /// To use a CMK in a different AWS account, specify the key ARN or alias ARN.</p>    
    /// <p>When you don't specify a value for the <code>KmsKeyId</code> parameter, then the
    /// following occurs:</p>
    /// <ul>
    /// <li>
    /// <p>If the DB snapshot or DB cluster snapshot in
    /// <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster
    /// is encrypted using the AWS KMS CMK that was used to encrypt the DB snapshot or DB
    /// cluster snapshot.</p>
    /// </li>
    /// <li>
    /// <p>If the DB snapshot or DB cluster snapshot in
    /// <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster
    /// isn't encrypted.</p>
    /// </li>
    /// </ul>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
    /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
    /// IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i>
    /// </p>
    pub enable_iam_database_authentication: std::option::Option<bool>,
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to
    /// 0.</p>
    /// <note>
    /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
    /// </note>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p>
    /// </li>
    /// </ul>
    pub backtrack_window: std::option::Option<i64>,
    /// <p>The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs.
    /// The values in the list depend on the DB engine being used. For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon
    /// Aurora User Guide</i>.</p>
    pub enable_cloudwatch_logs_exports: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>,
    /// <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html">
    /// CreateDBCluster</a>.</p>
    pub engine_mode: std::option::Option<std::string::String>,
    /// <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
    pub scaling_configuration: std::option::Option<crate::model::ScalingConfiguration>,
    /// <p>The name of the DB cluster parameter group to associate with this DB cluster. If this
    /// argument is omitted, the default DB cluster parameter group for the specified engine is
    /// used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing default DB cluster parameter group.</p>
    /// </li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    /// </li>
    /// </ul>
    pub db_cluster_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether the DB cluster has deletion protection enabled.
    /// The database can't be deleted when deletion protection is enabled. By default,
    /// deletion protection is disabled.
    /// </p>
    pub deletion_protection: std::option::Option<bool>,
    /// <p>A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    pub copy_tags_to_snapshot: std::option::Option<bool>,
    /// <p>Specify the Active Directory directory ID to restore the DB cluster in.
    /// The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL
    /// Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
    /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.
    /// </p>
    pub domain: std::option::Option<std::string::String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RestoreDBClusterFromSnapshotInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreDBClusterFromSnapshotInput");
        formatter.field("availability_zones", &self.availability_zones);
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field("snapshot_identifier", &self.snapshot_identifier);
        formatter.field("engine", &self.engine);
        formatter.field("engine_version", &self.engine_version);
        formatter.field("port", &self.port);
        formatter.field("db_subnet_group_name", &self.db_subnet_group_name);
        formatter.field("database_name", &self.database_name);
        formatter.field("option_group_name", &self.option_group_name);
        formatter.field("vpc_security_group_ids", &self.vpc_security_group_ids);
        formatter.field("tags", &self.tags);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field(
            "enable_iam_database_authentication",
            &self.enable_iam_database_authentication,
        );
        formatter.field("backtrack_window", &self.backtrack_window);
        formatter.field(
            "enable_cloudwatch_logs_exports",
            &self.enable_cloudwatch_logs_exports,
        );
        formatter.field("engine_mode", &self.engine_mode);
        formatter.field("scaling_configuration", &self.scaling_configuration);
        formatter.field(
            "db_cluster_parameter_group_name",
            &self.db_cluster_parameter_group_name,
        );
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("copy_tags_to_snapshot", &self.copy_tags_to_snapshot);
        formatter.field("domain", &self.domain);
        formatter.field("domain_iam_role_name", &self.domain_iam_role_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RestoreDBClusterFromS3Input {
    /// <p>A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.</p>
    pub availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a value from 1 to 35</p>
    /// </li>
    /// </ul>
    pub backup_retention_period: std::option::Option<i32>,
    /// <p>A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.</p>
    pub character_set_name: std::option::Option<std::string::String>,
    /// <p>The database name for the restored DB cluster.</p>
    pub database_name: std::option::Option<std::string::String>,
    /// <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code>
    /// </p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The name of the DB cluster parameter group to associate
    /// with the restored DB cluster. If this argument is omitted, <code>default.aurora5.6</code> is used.
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p>
    /// </li>
    /// </ul>
    pub db_cluster_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>A list of EC2 VPC security groups to associate with the restored DB cluster.</p>
    pub vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A DB subnet group to associate with the restored DB cluster.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.
    /// </p>
    /// <p>Example: <code>mySubnetgroup</code>
    /// </p>
    pub db_subnet_group_name: std::option::Option<std::string::String>,
    /// <p>The name of the database engine to be used for this DB cluster.</p>
    /// <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code>
    /// </p>
    pub engine: std::option::Option<std::string::String>,
    /// <p>The version number of the database engine to use.</p>
    /// <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code>
    /// </p>
    /// <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code>
    /// </p>
    /// <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code>
    /// </p>
    /// <p>
    /// <b>Aurora MySQL</b>
    /// </p>
    /// <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code>
    /// </p>
    /// <p>
    /// <b>Aurora PostgreSQL</b>
    /// </p>
    /// <p>Example: <code>9.6.3</code>, <code>10.7</code>
    /// </p>
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The port number on which the instances in the restored DB cluster accept connections.</p>
    /// <p>
    /// Default: <code>3306</code>
    /// </p>
    pub port: std::option::Option<i32>,
    /// <p>The name of the master user for the restored DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 16 letters or numbers.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't be a reserved word for the chosen database engine.</p>
    /// </li>
    /// </ul>
    pub master_username: std::option::Option<std::string::String>,
    /// <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p>
    /// <p>Constraints: Must contain from 8 to 41 characters.</p>
    pub master_user_password: std::option::Option<std::string::String>,
    /// <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p>
    /// <p>Permanent options can't be removed from an option group. An option group can't be removed from a
    /// DB cluster once it is associated with a DB cluster.</p>
    pub option_group_name: std::option::Option<std::string::String>,
    /// <p>The daily time range during which automated backups are created
    /// if automated backups are enabled
    /// using the <code>BackupRetentionPeriod</code> parameter.
    /// </p>
    /// <p>The default is a 30-minute window selected at random from an
    /// 8-hour block of time for each AWS Region.
    /// To view the time blocks available, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow">
    /// Backup window</a> in the <i>Amazon Aurora User Guide.</i>
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
    /// </li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p>
    /// </li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p>
    /// </li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p>
    /// </li>
    /// </ul>
    pub preferred_backup_window: std::option::Option<std::string::String>,
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
    /// </p>
    /// <p>The default is a 30-minute window selected at random from an
    /// 8-hour block of time for each AWS Region, occurring on a random day of the
    /// week. To see the time blocks available, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora">
    /// Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i>
    /// </p>
    /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    pub preferred_maintenance_window: std::option::Option<std::string::String>,
    /// <p>A list of tags.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>           
    /// </p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>A value that indicates whether the restored DB cluster is encrypted.</p>
    pub storage_encrypted: std::option::Option<bool>,
    /// <p>The AWS KMS key identifier for an encrypted DB cluster.</p>
    /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).
    /// To use a CMK in a different AWS account, specify the key ARN or alias ARN.</p>
    /// <p>If the StorageEncrypted parameter is enabled, and you do
    /// not specify a value for the <code>KmsKeyId</code> parameter, then
    /// Amazon RDS will use your default CMK. There is a  
    /// default CMK for your AWS account. Your AWS account has a different
    /// default CMK for each AWS Region.</p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
    /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
    /// IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i>
    /// </p>
    pub enable_iam_database_authentication: std::option::Option<bool>,
    /// <p>The identifier for the database engine that was backed up to create the files stored in the
    /// Amazon S3 bucket.
    /// </p>
    /// <p>Valid values: <code>mysql</code>
    /// </p>
    pub source_engine: std::option::Option<std::string::String>,
    /// <p>The version of the database that the backup files were created from.</p>
    /// <p>MySQL versions 5.5, 5.6, and 5.7 are supported.
    /// </p>
    /// <p>Example: <code>5.6.40</code>, <code>5.7.28</code>
    /// </p>
    pub source_engine_version: std::option::Option<std::string::String>,
    /// <p>The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.</p>
    pub s3_bucket_name: std::option::Option<std::string::String>,
    /// <p>The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster.
    /// If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is
    /// created by using all of the files in the Amazon S3 bucket.</p>
    pub s3_prefix: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes
    /// Amazon RDS to access the Amazon S3 bucket on your behalf.</p>
    pub s3_ingestion_role_arn: std::option::Option<std::string::String>,
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to
    /// 0.</p>
    /// <note>
    /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
    /// </note>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p>
    /// </li>
    /// </ul>
    pub backtrack_window: std::option::Option<i64>,
    /// <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values
    /// in the list depend on the DB engine being used. For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub enable_cloudwatch_logs_exports: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A value that indicates whether the DB cluster has deletion protection enabled.
    /// The database can't be deleted when deletion protection is enabled. By default,
    /// deletion protection is disabled.
    /// </p>
    pub deletion_protection: std::option::Option<bool>,
    /// <p>A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    pub copy_tags_to_snapshot: std::option::Option<bool>,
    /// <p>Specify the Active Directory directory ID to restore the DB cluster in.
    /// The domain must be created prior to this operation.
    /// </p>
    /// <p>
    /// For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a>
    /// in the <i>Amazon Aurora User Guide</i>.
    /// </p>
    pub domain: std::option::Option<std::string::String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RestoreDBClusterFromS3Input {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RestoreDBClusterFromS3Input");
        formatter.field("availability_zones", &self.availability_zones);
        formatter.field("backup_retention_period", &self.backup_retention_period);
        formatter.field("character_set_name", &self.character_set_name);
        formatter.field("database_name", &self.database_name);
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field(
            "db_cluster_parameter_group_name",
            &self.db_cluster_parameter_group_name,
        );
        formatter.field("vpc_security_group_ids", &self.vpc_security_group_ids);
        formatter.field("db_subnet_group_name", &self.db_subnet_group_name);
        formatter.field("engine", &self.engine);
        formatter.field("engine_version", &self.engine_version);
        formatter.field("port", &self.port);
        formatter.field("master_username", &self.master_username);
        formatter.field("master_user_password", &self.master_user_password);
        formatter.field("option_group_name", &self.option_group_name);
        formatter.field("preferred_backup_window", &self.preferred_backup_window);
        formatter.field(
            "preferred_maintenance_window",
            &self.preferred_maintenance_window,
        );
        formatter.field("tags", &self.tags);
        formatter.field("storage_encrypted", &self.storage_encrypted);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field(
            "enable_iam_database_authentication",
            &self.enable_iam_database_authentication,
        );
        formatter.field("source_engine", &self.source_engine);
        formatter.field("source_engine_version", &self.source_engine_version);
        formatter.field("s3_bucket_name", &self.s3_bucket_name);
        formatter.field("s3_prefix", &self.s3_prefix);
        formatter.field("s3_ingestion_role_arn", &self.s3_ingestion_role_arn);
        formatter.field("backtrack_window", &self.backtrack_window);
        formatter.field(
            "enable_cloudwatch_logs_exports",
            &self.enable_cloudwatch_logs_exports,
        );
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("copy_tags_to_snapshot", &self.copy_tags_to_snapshot);
        formatter.field("domain", &self.domain);
        formatter.field("domain_iam_role_name", &self.domain_iam_role_name);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResetDBParameterGroupInput {
    /// <p>The name of the DB parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the name of an existing <code>DBParameterGroup</code>.</p>
    /// </li>
    /// </ul>
    pub db_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>
    /// A value that indicates whether to reset all parameters in the DB parameter group to default values.
    /// By default, all parameters in the DB parameter group are reset to default values.
    /// </p>
    pub reset_all_parameters: bool,
    /// <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code>
    /// name and <code>ResetAllParameters</code> parameters. To reset specific parameters,
    /// provide a list of the following: <code>ParameterName</code> and
    /// <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single
    /// request.</p>
    /// <p>
    /// <b>MySQL</b>
    /// </p>
    /// <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code>
    /// </p>
    /// <p>You can use the immediate value with dynamic parameters only. You can use             
    /// the <code>pending-reboot</code> value for both dynamic and static parameters, and changes
    /// are applied when DB instance reboots.</p>
    /// <p>
    /// <b>MariaDB</b>
    /// </p>
    /// <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code>
    /// </p>
    /// <p>You can use the immediate value with dynamic parameters only. You can use             
    /// the <code>pending-reboot</code> value for both dynamic and static parameters, and changes
    /// are applied when DB instance reboots.</p>
    /// <p>
    /// <b>Oracle</b>
    /// </p>
    /// <p>Valid Values (for Apply method): <code>pending-reboot</code>
    /// </p>
    pub parameters: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
}
impl std::fmt::Debug for ResetDBParameterGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResetDBParameterGroupInput");
        formatter.field("db_parameter_group_name", &self.db_parameter_group_name);
        formatter.field("reset_all_parameters", &self.reset_all_parameters);
        formatter.field("parameters", &self.parameters);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ResetDBClusterParameterGroupInput {
    /// <p>The name of the DB cluster parameter group to reset.</p>
    pub db_cluster_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to reset all parameters in the DB cluster parameter group
    /// to their default values. You can't use this parameter if there
    /// is a list of parameter names specified for the <code>Parameters</code> parameter.</p>
    pub reset_all_parameters: bool,
    /// <p>A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this
    /// parameter if the <code>ResetAllParameters</code> parameter is enabled.</p>
    pub parameters: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
}
impl std::fmt::Debug for ResetDBClusterParameterGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ResetDBClusterParameterGroupInput");
        formatter.field(
            "db_cluster_parameter_group_name",
            &self.db_cluster_parameter_group_name,
        );
        formatter.field("reset_all_parameters", &self.reset_all_parameters);
        formatter.field("parameters", &self.parameters);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveTagsFromResourceInput {
    /// <p>The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about  
    /// creating an ARN,
    /// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
    /// Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    pub resource_name: std::option::Option<std::string::String>,
    /// <p>The tag key (name) of the tag to be removed.</p>
    pub tag_keys: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for RemoveTagsFromResourceInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveTagsFromResourceInput");
        formatter.field("resource_name", &self.resource_name);
        formatter.field("tag_keys", &self.tag_keys);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveSourceIdentifierFromSubscriptionInput {
    /// <p>The name of the RDS event notification subscription you want to remove a source identifier from.</p>
    pub subscription_name: std::option::Option<std::string::String>,
    /// <p>
    /// The source identifier to be removed from the subscription, such as the <b>DB instance identifier</b>
    /// for a DB instance or the name of a security group.
    /// </p>
    pub source_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RemoveSourceIdentifierFromSubscriptionInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveSourceIdentifierFromSubscriptionInput");
        formatter.field("subscription_name", &self.subscription_name);
        formatter.field("source_identifier", &self.source_identifier);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveRoleFromDBInstanceInput {
    /// <p>The name of the DB instance to disassociate the IAM role from.</p>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role to disassociate from the DB instance,
    /// for example, <code>arn:aws:iam::123456789012:role/AccessRole</code>.</p>
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The name of the feature for the DB instance that the IAM role is to be disassociated from.
    /// For the list of supported feature names, see <code>DBEngineVersion</code>.
    /// </p>
    pub feature_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RemoveRoleFromDBInstanceInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveRoleFromDBInstanceInput");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("feature_name", &self.feature_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveRoleFromDBClusterInput {
    /// <p>The name of the DB cluster to disassociate the IAM role from.</p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example
    /// <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.</p>
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The name of the feature for the DB cluster that the IAM role is to be disassociated from.
    /// For the list of supported feature names, see <a>DBEngineVersion</a>.</p>
    pub feature_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RemoveRoleFromDBClusterInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveRoleFromDBClusterInput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("feature_name", &self.feature_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveFromGlobalClusterInput {
    /// <p>
    /// The cluster identifier to detach from the Aurora global database cluster.
    /// </p>
    pub global_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>
    /// The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster.
    /// </p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RemoveFromGlobalClusterInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RemoveFromGlobalClusterInput");
        formatter.field("global_cluster_identifier", &self.global_cluster_identifier);
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RegisterDBProxyTargetsInput {
    /// <p>The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.</p>
    pub db_proxy_name: std::option::Option<std::string::String>,
    /// <p>The identifier of the <code>DBProxyTargetGroup</code>.</p>
    pub target_group_name: std::option::Option<std::string::String>,
    /// <p>One or more DB instance identifiers.</p>
    pub db_instance_identifiers: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>One or more DB cluster identifiers.</p>
    pub db_cluster_identifiers: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for RegisterDBProxyTargetsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RegisterDBProxyTargetsInput");
        formatter.field("db_proxy_name", &self.db_proxy_name);
        formatter.field("target_group_name", &self.target_group_name);
        formatter.field("db_instance_identifiers", &self.db_instance_identifiers);
        formatter.field("db_cluster_identifiers", &self.db_cluster_identifiers);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RebootDBInstanceInput {
    /// <p>The DB instance identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DBInstance.</p>
    /// </li>
    /// </ul>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>
    /// A value that indicates whether the reboot is conducted through a Multi-AZ failover.
    /// </p>
    /// <p>Constraint: You can't enable force failover if the instance isn't configured for Multi-AZ.</p>
    pub force_failover: std::option::Option<bool>,
}
impl std::fmt::Debug for RebootDBInstanceInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RebootDBInstanceInput");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("force_failover", &self.force_failover);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PurchaseReservedDBInstancesOfferingInput {
    /// <p>The ID of the Reserved DB instance offering to purchase.</p>
    /// <p>Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706</p>
    pub reserved_db_instances_offering_id: std::option::Option<std::string::String>,
    /// <p>Customer-specified identifier to track this reservation.</p>
    /// <p>Example: myreservationID</p>
    pub reserved_db_instance_id: std::option::Option<std::string::String>,
    /// <p>The number of instances to reserve.</p>
    /// <p>Default: <code>1</code>
    /// </p>
    pub db_instance_count: std::option::Option<i32>,
    /// <p>A list of tags.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>           
    /// </p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for PurchaseReservedDBInstancesOfferingInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PurchaseReservedDBInstancesOfferingInput");
        formatter.field(
            "reserved_db_instances_offering_id",
            &self.reserved_db_instances_offering_id,
        );
        formatter.field("reserved_db_instance_id", &self.reserved_db_instance_id);
        formatter.field("db_instance_count", &self.db_instance_count);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PromoteReadReplicaDBClusterInput {
    /// <p>The identifier of the DB cluster read replica to promote. This parameter isn't
    /// case-sensitive. </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DB cluster read replica.</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-cluster-replica1</code>
    /// </p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for PromoteReadReplicaDBClusterInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PromoteReadReplicaDBClusterInput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PromoteReadReplicaInput {
    /// <p>The DB instance identifier. This value is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing read replica DB instance.</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>mydbinstance</code>
    /// </p>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a value from 0 to 35.</p>
    /// </li>
    /// <li>
    /// <p>Can't be set to 0 if the DB instance is a source to read replicas.</p>
    /// </li>
    /// </ul>
    pub backup_retention_period: std::option::Option<i32>,
    /// <p>
    /// The daily time range during which automated backups are created
    /// if automated backups are enabled,
    /// using the <code>BackupRetentionPeriod</code> parameter.
    /// </p>
    /// <p>
    /// The default is a 30-minute window selected at random from an
    /// 8-hour block of time for each AWS Region.
    /// To see the time blocks available, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html">
    /// Adjusting the Preferred Maintenance Window</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
    /// </li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p>
    /// </li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p>
    /// </li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p>
    /// </li>
    /// </ul>
    pub preferred_backup_window: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for PromoteReadReplicaInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PromoteReadReplicaInput");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("backup_retention_period", &self.backup_retention_period);
        formatter.field("preferred_backup_window", &self.preferred_backup_window);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyOptionGroupInput {
    /// <p>The name of the option group to be modified.</p>
    /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
    pub option_group_name: std::option::Option<std::string::String>,
    /// <p>Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.</p>
    pub options_to_include: std::option::Option<std::vec::Vec<crate::model::OptionConfiguration>>,
    /// <p>Options in this list are removed from the option group.</p>
    pub options_to_remove: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A value that indicates whether to apply the change immediately or during the next maintenance window for each instance associated with the option group.</p>
    pub apply_immediately: bool,
}
impl std::fmt::Debug for ModifyOptionGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyOptionGroupInput");
        formatter.field("option_group_name", &self.option_group_name);
        formatter.field("options_to_include", &self.options_to_include);
        formatter.field("options_to_remove", &self.options_to_remove);
        formatter.field("apply_immediately", &self.apply_immediately);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyGlobalClusterInput {
    /// <p>
    /// The DB cluster identifier for the global cluster being modified. This parameter isn't case-sensitive.
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing global database cluster.</p>
    /// </li>
    /// </ul>
    pub global_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>
    /// The new cluster identifier for the global database cluster when modifying a global database cluster.
    /// This value is stored as a lowercase string.
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
    /// </li>
    /// <li>
    /// <p>The first character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-cluster2</code>
    /// </p>
    pub new_global_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>
    /// Indicates if the global database cluster has deletion protection enabled. The global database cluster
    /// can't be deleted when deletion protection is enabled.
    /// </p>
    pub deletion_protection: std::option::Option<bool>,
    /// <p>The version number of the database engine to which you want to upgrade.
    /// Changing this parameter results in an outage. The change is applied during
    /// the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p>
    /// <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --engine aurora --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'</code>
    /// </p>
    /// <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --engine aurora-mysql --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'</code>
    /// </p>
    /// <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query '*[]|[?SupportsGlobalDatabases == `true`].[EngineVersion]'</code>
    /// </p>
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether major version upgrades are allowed.</p>
    /// <p>Constraints: You must allow major version upgrades when specifying a value for the
    /// <code>EngineVersion</code> parameter that is a different major version than the DB
    /// cluster's current version.</p>
    /// <p>If you upgrade the major version of a global database, the cluster and DB instance parameter
    /// groups are set to the default parameter groups for the new version. Apply any custom parameter
    /// groups after completing the upgrade.</p>
    pub allow_major_version_upgrade: std::option::Option<bool>,
}
impl std::fmt::Debug for ModifyGlobalClusterInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyGlobalClusterInput");
        formatter.field("global_cluster_identifier", &self.global_cluster_identifier);
        formatter.field(
            "new_global_cluster_identifier",
            &self.new_global_cluster_identifier,
        );
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("engine_version", &self.engine_version);
        formatter.field(
            "allow_major_version_upgrade",
            &self.allow_major_version_upgrade,
        );
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyEventSubscriptionInput {
    /// <p>The name of the RDS event notification subscription.</p>
    pub subscription_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</p>
    pub sns_topic_arn: std::option::Option<std::string::String>,
    /// <p>The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. If this value isn't specified, all events are returned.</p>
    /// <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code>
    /// </p>
    pub source_type: std::option::Option<std::string::String>,
    /// <p>
    /// A list of event categories for a source type (<code>SourceType</code>) that you want to subscribe to.
    /// You can see a list of the categories for a given source type
    /// in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> in the <i>Amazon RDS User Guide</i>
    /// or by using the <code>DescribeEventCategories</code> operation.
    /// </p>
    pub event_categories: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>
    /// A value that indicates whether to activate the subscription.
    /// </p>
    pub enabled: std::option::Option<bool>,
}
impl std::fmt::Debug for ModifyEventSubscriptionInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyEventSubscriptionInput");
        formatter.field("subscription_name", &self.subscription_name);
        formatter.field("sns_topic_arn", &self.sns_topic_arn);
        formatter.field("source_type", &self.source_type);
        formatter.field("event_categories", &self.event_categories);
        formatter.field("enabled", &self.enabled);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBSubnetGroupInput {
    /// <p>The name for the DB subnet group. This value is stored as a lowercase string.
    /// You can't modify the default subnet group.
    /// </p>
    /// <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p>
    /// <p>Example: <code>mySubnetgroup</code>
    /// </p>
    pub db_subnet_group_name: std::option::Option<std::string::String>,
    /// <p>The description for the DB subnet group.</p>
    pub db_subnet_group_description: std::option::Option<std::string::String>,
    /// <p>The EC2 subnet IDs for the DB subnet group.</p>
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for ModifyDBSubnetGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBSubnetGroupInput");
        formatter.field("db_subnet_group_name", &self.db_subnet_group_name);
        formatter.field(
            "db_subnet_group_description",
            &self.db_subnet_group_description,
        );
        formatter.field("subnet_ids", &self.subnet_ids);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBSnapshotAttributeInput {
    /// <p>The identifier for the DB snapshot to modify the attributes for.</p>
    pub db_snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>The name of the DB snapshot attribute to modify.</p>
    /// <p>To manage authorization for other AWS accounts to copy or restore a manual DB snapshot,
    /// set this value to <code>restore</code>.</p>
    /// <note>
    /// <p>To view the list of attributes available to modify, use the
    /// <a>DescribeDBSnapshotAttributes</a> API action.</p>
    /// </note>
    pub attribute_name: std::option::Option<std::string::String>,
    /// <p>A list of DB snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p>
    /// <p>To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account
    /// IDs, or <code>all</code> to make the manual DB snapshot restorable by
    /// any AWS account. Do not add the <code>all</code> value for any
    /// manual DB snapshots that contain private information that you don't want available
    /// to all AWS accounts.</p>
    pub values_to_add: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of DB snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p>
    /// <p>To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include
    /// one or more AWS account
    /// identifiers, or <code>all</code> to remove authorization for any AWS account to copy or
    /// restore the DB snapshot. If you specify <code>all</code>, an AWS account whose
    /// account ID is explicitly added to the <code>restore</code> attribute
    /// can still copy or restore the manual DB snapshot.</p>
    pub values_to_remove: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for ModifyDBSnapshotAttributeInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBSnapshotAttributeInput");
        formatter.field("db_snapshot_identifier", &self.db_snapshot_identifier);
        formatter.field("attribute_name", &self.attribute_name);
        formatter.field("values_to_add", &self.values_to_add);
        formatter.field("values_to_remove", &self.values_to_remove);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBSnapshotInput {
    /// <p>The identifier of the DB snapshot to modify.</p>
    pub db_snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>The engine version to upgrade the DB snapshot to.
    /// </p>
    /// <p>The following are the database engines and engine versions that are available when you upgrade a DB snapshot.
    /// </p>
    /// <p>
    /// <b>MySQL</b>
    /// </p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>5.5.46</code> (supported for 5.1 DB snapshots)</p>
    /// </li>
    /// </ul>
    /// <p>
    /// <b>Oracle</b>
    /// </p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>12.1.0.2.v8</code>  (supported for 12.1.0.1 DB snapshots)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>11.2.0.4.v12</code> (supported for 11.2.0.2 DB snapshots)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>11.2.0.4.v11</code> (supported for 11.2.0.3 DB snapshots)</p>
    /// </li>
    /// </ul>
    /// <p>
    /// <b>PostgreSQL</b>
    /// </p>
    /// <p>For the list of engine versions that are available for upgrading a DB snapshot, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.PostgreSQL.html#USER_UpgradeDBInstance.PostgreSQL.MajorVersion">
    /// Upgrading the PostgreSQL DB Engine for Amazon RDS</a>.
    /// </p>
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The option group to identify with the upgraded DB snapshot.
    /// </p>
    /// <p>You can specify this parameter when you upgrade an Oracle DB snapshot.
    /// The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance.
    /// For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Oracle.html#USER_UpgradeDBInstance.Oracle.OGPG.OG">Option group considerations</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    pub option_group_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ModifyDBSnapshotInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBSnapshotInput");
        formatter.field("db_snapshot_identifier", &self.db_snapshot_identifier);
        formatter.field("engine_version", &self.engine_version);
        formatter.field("option_group_name", &self.option_group_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBProxyTargetGroupInput {
    /// <p>The name of the new target group to assign to the proxy.</p>
    pub target_group_name: std::option::Option<std::string::String>,
    /// <p>The name of the new proxy to which to assign the target group.</p>
    pub db_proxy_name: std::option::Option<std::string::String>,
    /// <p>The settings that determine the size and behavior of the connection pool for the target group.</p>
    pub connection_pool_config: std::option::Option<crate::model::ConnectionPoolConfiguration>,
    /// <p>The new name for the modified <code>DBProxyTarget</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
    pub new_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ModifyDBProxyTargetGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBProxyTargetGroupInput");
        formatter.field("target_group_name", &self.target_group_name);
        formatter.field("db_proxy_name", &self.db_proxy_name);
        formatter.field("connection_pool_config", &self.connection_pool_config);
        formatter.field("new_name", &self.new_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBProxyEndpointInput {
    /// <p>The name of the DB proxy sociated with the DB proxy endpoint that you want to modify.</p>
    pub db_proxy_endpoint_name: std::option::Option<std::string::String>,
    /// <p>The new identifier for the <code>DBProxyEndpoint</code>. An identifier must
    /// begin with a letter and must contain only ASCII letters, digits, and hyphens; it
    /// can't end with a hyphen or contain two consecutive hyphens.</p>
    pub new_db_proxy_endpoint_name: std::option::Option<std::string::String>,
    /// <p>The VPC security group IDs for the DB proxy endpoint. When the DB proxy endpoint
    /// uses a different VPC than the original proxy, you also specify a different
    /// set of security group IDs than for the original proxy.</p>
    pub vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for ModifyDBProxyEndpointInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBProxyEndpointInput");
        formatter.field("db_proxy_endpoint_name", &self.db_proxy_endpoint_name);
        formatter.field(
            "new_db_proxy_endpoint_name",
            &self.new_db_proxy_endpoint_name,
        );
        formatter.field("vpc_security_group_ids", &self.vpc_security_group_ids);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBProxyInput {
    /// <p>The identifier for the <code>DBProxy</code> to modify.</p>
    pub db_proxy_name: std::option::Option<std::string::String>,
    /// <p>The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
    pub new_db_proxy_name: std::option::Option<std::string::String>,
    /// <p>The new authentication settings for the <code>DBProxy</code>.</p>
    pub auth: std::option::Option<std::vec::Vec<crate::model::UserAuthConfig>>,
    /// <p>Whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
    /// By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't
    /// use TLS.</p>
    pub require_tls: std::option::Option<bool>,
    /// <p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this
    /// value higher or lower than the connection timeout limit for the associated database.</p>
    pub idle_client_timeout: std::option::Option<i32>,
    /// <p>Whether the proxy includes detailed information about SQL statements in its logs.
    /// This information helps you to debug issues involving SQL behavior or the performance
    /// and scalability of the proxy connections. The debug information includes the text of
    /// SQL statements that you submit through the proxy. Thus, only enable this setting
    /// when needed for debugging, and only when you have security measures in place to
    /// safeguard any sensitive information that appears in the logs.</p>
    pub debug_logging: std::option::Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.</p>
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The new list of security groups for the <code>DBProxy</code>.</p>
    pub security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for ModifyDBProxyInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBProxyInput");
        formatter.field("db_proxy_name", &self.db_proxy_name);
        formatter.field("new_db_proxy_name", &self.new_db_proxy_name);
        formatter.field("auth", &self.auth);
        formatter.field("require_tls", &self.require_tls);
        formatter.field("idle_client_timeout", &self.idle_client_timeout);
        formatter.field("debug_logging", &self.debug_logging);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("security_groups", &self.security_groups);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBParameterGroupInput {
    /// <p>The name of the DB parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing <code>DBParameterGroup</code>.</p>
    /// </li>
    /// </ul>
    pub db_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>An array of parameter names, values, and the application methods for the parameter update. At least one parameter name, value, and
    /// application method method must be supplied; later arguments are optional. A maximum of 20 parameters can be modified in a single request.</p>
    /// <p>Valid Values (for the application method): <code>immediate | pending-reboot</code>
    /// </p>
    /// <note>
    /// <p>You can use the <code>immediate</code> value with dynamic parameters only. You can use the
    /// <code>pending-reboot</code> value for both dynamic and static parameters.</p>
    /// <p>When the application method is <code>immediate</code>, changes to dynamic parameters are applied immediately
    /// to the DB instances associated with the parameter group. When the application method is <code>pending-reboot</code>,
    /// changes to dynamic and static parameters are applied after a reboot without failover to the DB instances associated with the
    /// parameter group.</p>
    /// </note>
    pub parameters: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
}
impl std::fmt::Debug for ModifyDBParameterGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBParameterGroupInput");
        formatter.field("db_parameter_group_name", &self.db_parameter_group_name);
        formatter.field("parameters", &self.parameters);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBInstanceInput {
    /// <p>The DB instance identifier. This value is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DBInstance.</p>
    /// </li>
    /// </ul>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>The new amount of storage (in gibibytes) to allocate for the DB instance.
    /// </p>
    /// <p>For MariaDB, MySQL, Oracle, and PostgreSQL,
    /// the value supplied must be at least 10% greater than the current value.
    /// Values that are not at least 10% greater than the existing value are rounded up
    /// so that they are 10% greater than the current value.
    /// </p>
    /// <p>For the valid values for allocated storage for each engine,
    /// see <code>CreateDBInstance</code>.
    /// </p>
    pub allocated_storage: std::option::Option<i32>,
    /// <p>The new compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>.
    /// Not all DB instance classes are available in all AWS Regions, or for all database engines.
    /// For the full list of DB instance classes,
    /// and availability for your engine, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>If you modify the DB instance class, an outage occurs during the change.
    /// The change is applied during the next maintenance window,
    /// unless <code>ApplyImmediately</code> is enabled for this request.
    /// </p>
    /// <p>Default: Uses existing setting</p>
    pub db_instance_class: std::option::Option<std::string::String>,
    /// <p>The new DB subnet group for the DB instance.
    /// You can use this parameter to move your DB instance to a different VPC.
    /// If your DB instance isn't in a VPC, you can also use this parameter to move your DB instance into a VPC.
    /// For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html#USER_VPC.Non-VPC2VPC">Working with a DB instance in a VPC</a>
    /// in the <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>Changing the subnet group causes an outage during the change.
    /// The change is applied during the next maintenance window,
    /// unless you enable <code>ApplyImmediately</code>.
    /// </p>
    /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
    /// <p>Example: <code>mySubnetGroup</code>
    /// </p>
    pub db_subnet_group_name: std::option::Option<std::string::String>,
    /// <p>A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match existing DBSecurityGroups.</p>
    /// </li>
    /// </ul>
    pub db_security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.</p>     
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. The associated list of EC2 VPC security groups is managed by
    /// the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p>      
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match existing VpcSecurityGroupIds.</p>
    /// </li>
    /// </ul>
    pub vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A value that indicates whether the modifications in this request and
    /// any pending modifications are asynchronously applied
    /// as soon as possible, regardless of the
    /// <code>PreferredMaintenanceWindow</code> setting for the DB instance. By default, this parameter is
    /// disabled.
    /// </p>
    /// <p>
    /// If this parameter is disabled, changes to the
    /// DB instance are applied during the next maintenance window. Some parameter changes can cause an outage
    /// and are applied on the next call to <a>RebootDBInstance</a>, or the next failure reboot.
    /// Review the table of parameters in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.DBInstance.Modifying.html">Modifying a DB Instance</a>
    /// in the <i>Amazon RDS User Guide.</i> to see the impact of enabling
    /// or disabling <code>ApplyImmediately</code> for each modified parameter and to determine when the changes are applied.
    /// </p>
    pub apply_immediately: bool,
    /// <p>The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p>
    /// <p>
    /// Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
    /// Between the time of the request and the completion of the request,
    /// the <code>MasterUserPassword</code> element exists in the
    /// <code>PendingModifiedValues</code> element of the operation response.
    /// </p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. The password for the master user is managed by the DB cluster. For
    /// more information, see <code>ModifyDBCluster</code>.
    /// </p>
    /// <p>Default: Uses existing setting</p>
    /// <p>
    /// <b>MariaDB</b>
    /// </p>
    /// <p>Constraints: Must contain from 8 to 41 characters.</p>
    /// <p>
    /// <b>Microsoft SQL Server</b>
    /// </p>
    /// <p>Constraints: Must contain from 8 to 128 characters.</p>
    /// <p>
    /// <b>MySQL</b>
    /// </p>
    /// <p>Constraints: Must contain from 8 to 41 characters.</p>
    /// <p>
    /// <b>Oracle</b>
    /// </p>
    /// <p>Constraints: Must contain from 8 to 30 characters.</p>
    /// <p>
    /// <b>PostgreSQL</b>
    /// </p>
    /// <p>Constraints: Must contain from 8 to 128 characters.</p>
    /// <note>
    /// <p>Amazon RDS API actions never return the password,
    /// so this action provides a way to regain access to a primary instance user if the password is lost.
    /// This includes restoring privileges that might have been accidentally revoked.
    /// </p>
    /// </note>
    pub master_user_password: std::option::Option<std::string::String>,
    /// <p>The name of the DB parameter group to apply to the DB instance. Changing this
    /// setting doesn't result in an outage. The parameter group name itself is changed
    /// immediately, but the actual parameter changes are not applied until you reboot the
    /// instance without failover. In this case, the DB instance isn't rebooted automatically and the
    /// parameter changes isn't applied during the next maintenance window.</p>
    /// <p>Default: Uses existing setting</p>
    /// <p>Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.</p>
    pub db_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p>
    /// <note>
    /// <p>Enabling and disabling backups can result in a brief I/O suspension that lasts from a few seconds to a few minutes, depending on the size and class of your DB instance.</p>
    /// </note>
    /// <p>These changes are applied during the next maintenance window unless the <code>ApplyImmediately</code> parameter is enabled
    /// for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously
    /// applied as soon as possible.</p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. The retention period for automated backups is managed by the DB
    /// cluster. For more information, see <code>ModifyDBCluster</code>.</p>
    /// <p>Default: Uses existing setting</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a value from 0 to 35</p>
    /// </li>
    /// <li>
    /// <p>Can be specified for a MySQL read replica only if the source is running MySQL 5.6 or
    /// later</p>
    /// </li>
    /// <li>
    /// <p>Can be specified for a PostgreSQL read replica only if the source is running PostgreSQL
    /// 9.3.5</p>
    /// </li>
    /// <li>
    /// <p>Can't be set to 0 if the DB instance is a source to read replicas</p>
    /// </li>
    /// </ul>
    pub backup_retention_period: std::option::Option<i32>,
    /// <p>
    /// The daily time range during which automated backups are created
    /// if automated backups are enabled,
    /// as determined by the <code>BackupRetentionPeriod</code> parameter.
    /// Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.
    /// The default is a 30-minute window selected at random from an
    /// 8-hour block of time for each AWS Region. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup window</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. The daily time range for creating automated backups is managed by
    /// the DB cluster. For more information, see <code>ModifyDBCluster</code>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format hh24:mi-hh24:mi</p>
    /// </li>
    /// <li>
    /// <p>Must be in Universal Time Coordinated (UTC)</p>
    /// </li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window</p>
    /// </li>
    /// <li>
    /// <p>Must be at least 30 minutes</p>
    /// </li>
    /// </ul>
    pub preferred_backup_window: std::option::Option<std::string::String>,
    /// <p>The weekly time range (in UTC) during which system maintenance can occur, which
    /// might result in an outage. Changing this parameter doesn't result in an outage, except
    /// in the following situation, and the change is asynchronously applied as soon as
    /// possible. If there are pending actions that cause a reboot, and the maintenance window
    /// is changed to include the current time, then changing this parameter will cause a reboot
    /// of the DB instance. If moving this window to the current time, there must be at least 30
    /// minutes between the current time and end of the window to ensure pending changes are
    /// applied.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>Default: Uses existing setting</p>
    /// <p>Format: ddd:hh24:mi-ddd:hh24:mi</p>
    /// <p>Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun</p>
    /// <p>Constraints: Must be at least 30 minutes</p>
    pub preferred_maintenance_window: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether the DB instance is a Multi-AZ deployment.
    /// Changing this parameter doesn't result in an outage and the change
    /// is applied during the next maintenance window
    /// unless the <code>ApplyImmediately</code> parameter is
    /// enabled for this request.
    /// </p>
    pub multi_az: std::option::Option<bool>,
    /// <p>
    /// The version number of the database engine to upgrade to.
    /// Changing this parameter results in an outage and the change
    /// is applied during the next maintenance window
    /// unless the <code>ApplyImmediately</code> parameter is enabled for this request.
    /// </p>
    /// <p>For major version upgrades, if a nondefault DB parameter group is currently in use, a
    /// new DB parameter group in the DB parameter group family for the new engine version must
    /// be specified. The new DB parameter group can be the default for that DB parameter group
    /// family.</p>
    /// <p>If you specify only a major version, Amazon RDS will update the DB instance to the
    /// default minor version if the current minor version is lower.
    /// For information about valid engine versions, see <code>CreateDBInstance</code>,
    /// or call <code>DescribeDBEngineVersions</code>.</p>
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.</p>
    /// <p>Constraints: Major version upgrades must be allowed when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.</p>
    pub allow_major_version_upgrade: bool,
    /// <p>
    /// A value that indicates whether minor version upgrades are applied automatically
    /// to the DB instance during the maintenance window.
    /// Changing this parameter doesn't result in an outage except in the following case
    /// and the change is asynchronously applied as soon as possible.
    /// An outage results if this parameter is enabled during the maintenance window,
    /// and a newer minor version is available, and RDS has enabled auto patching for that engine version.
    /// </p>
    pub auto_minor_version_upgrade: std::option::Option<bool>,
    /// <p>The license model for the DB instance.</p>
    /// <p>Valid values: <code>license-included</code> | <code>bring-your-own-license</code> |
    /// <code>general-public-license</code>
    /// </p>
    pub license_model: std::option::Option<std::string::String>,
    /// <p>The new Provisioned IOPS (I/O operations per second) value for the RDS instance.
    /// </p>
    /// <p>Changing this setting doesn't result in an outage and
    /// the change is applied during the next maintenance window
    /// unless the <code>ApplyImmediately</code> parameter is enabled for this request.
    /// If you are migrating from Provisioned IOPS to standard storage, set this value to 0.
    /// The DB instance will require a reboot for the change in storage type to take effect.
    /// </p>
    /// <p>If you choose to migrate your DB instance from using standard storage to using
    /// Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process
    /// can take time. The duration of the migration depends on several factors such as database
    /// load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS
    /// provisioned (if any), and the number of prior scale storage operations. Typical
    /// migration times are under 24 hours, but the process can take up to several days in some
    /// cases. During the migration, the DB instance is available for use, but might experience
    /// performance degradation. While the migration takes place, nightly backups for the
    /// instance are suspended. No other Amazon RDS operations can take place for the instance,
    /// including modifying the instance, rebooting the instance, deleting the instance,
    /// creating a read replica for the instance, and creating a DB snapshot of the instance. </p>
    /// <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL,
    /// the value supplied must be at least 10% greater than the current value.
    /// Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value.
    /// </p>
    /// <p>Default: Uses existing setting</p>
    pub iops: std::option::Option<i32>,
    /// <p>
    /// A value that indicates the DB instance should be associated with the specified option group.
    /// Changing this parameter doesn't result in an outage except in the following case and the change
    /// is applied during the next maintenance window
    /// unless the <code>ApplyImmediately</code> parameter is enabled
    /// for this request. If the parameter change results in an option group that
    /// enables OEM, this change can cause a brief (sub-second) period during which new connections
    /// are rejected but existing connections are not interrupted.
    /// </p>
    /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance</p>
    pub option_group_name: std::option::Option<std::string::String>,
    /// <p>
    /// The new DB instance identifier for the DB instance when renaming a DB
    /// instance. When you change the DB instance identifier, an instance
    /// reboot occurs immediately if you enable <code>ApplyImmediately</code>, or will occur
    /// during the next maintenance window if you disable Apply Immediately. This value is stored
    /// as a lowercase string.
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>The first character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>mydbinstance</code>
    /// </p>
    pub new_db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>Specifies the storage type to be associated with the DB instance.
    /// </p>
    /// <p>If you specify Provisioned IOPS (<code>io1</code>),
    /// you must also include a value for the <code>Iops</code> parameter.
    /// </p>
    /// <p>If you choose to migrate your DB instance from using standard storage to using
    /// Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process
    /// can take time. The duration of the migration depends on several factors such as database
    /// load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS
    /// provisioned (if any), and the number of prior scale storage operations. Typical
    /// migration times are under 24 hours, but the process can take up to several days in some
    /// cases. During the migration, the DB instance is available for use, but might experience
    /// performance degradation. While the migration takes place, nightly backups for the
    /// instance are suspended. No other Amazon RDS operations can take place for the instance,
    /// including modifying the instance, rebooting the instance, deleting the instance,
    /// creating a read replica for the instance, and creating a DB snapshot of the instance. </p>
    /// <p>
    /// Valid values: <code>standard | gp2 | io1</code>
    /// </p>
    /// <p>Default: <code>io1</code> if the <code>Iops</code> parameter
    /// is specified, otherwise <code>gp2</code>
    /// </p>
    pub storage_type: std::option::Option<std::string::String>,
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    pub tde_credential_arn: std::option::Option<std::string::String>,
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    pub tde_credential_password: std::option::Option<std::string::String>,
    /// <p>Indicates the certificate that needs to be associated with the instance.</p>
    pub ca_certificate_identifier: std::option::Option<std::string::String>,
    /// <p>The Active Directory directory ID to move the DB instance to.  
    /// Specify <code>none</code> to remove the instance from its current domain.
    /// The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL
    /// Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
    /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub domain: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to copy all tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this
    /// value for an Aurora DB instance has no effect on the DB cluster setting. For more
    /// information, see <code>ModifyDBCluster</code>.</p>
    pub copy_tags_to_snapshot: std::option::Option<bool>,
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p>
    /// <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code>
    /// to a value other than 0.</p>
    /// <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code>
    /// </p>
    pub monitoring_interval: std::option::Option<i32>,
    /// <p>The port number on which the database accepts connections.</p>
    /// <p>The value of the <code>DBPortNumber</code> parameter must not match any of the port values specified for options in the option
    /// group for the DB instance.</p>
    /// <p>Your database will restart when you change the <code>DBPortNumber</code> value regardless of the value of the <code>ApplyImmediately</code>
    /// parameter.</p>
    /// <p>
    /// <b>MySQL</b>
    /// </p>
    /// <p>
    /// Default: <code>3306</code>
    /// </p>
    /// <p> Valid values: <code>1150-65535</code>
    /// </p>
    /// <p>
    /// <b>MariaDB</b>
    /// </p>
    /// <p>
    /// Default: <code>3306</code>
    /// </p>
    /// <p> Valid values: <code>1150-65535</code>
    /// </p>
    /// <p>
    /// <b>PostgreSQL</b>
    /// </p>
    /// <p>
    /// Default: <code>5432</code>
    /// </p>
    /// <p> Valid values: <code>1150-65535</code>
    /// </p>
    /// <p>Type: Integer</p>
    /// <p>
    /// <b>Oracle</b>
    /// </p>
    /// <p>
    /// Default: <code>1521</code>
    /// </p>
    /// <p> Valid values: <code>1150-65535</code>
    /// </p>
    /// <p>
    /// <b>SQL Server</b>
    /// </p>
    /// <p>
    /// Default: <code>1433</code>
    /// </p>
    /// <p> Valid values: <code>1150-65535</code> except <code>1234</code>, <code>1434</code>,
    /// <code>3260</code>, <code>3343</code>, <code>3389</code>, <code>47001</code>, and
    /// <code>49152-49156</code>.</p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>
    /// Default: <code>3306</code>
    /// </p>
    /// <p> Valid values: <code>1150-65535</code>
    /// </p>
    pub db_port_number: std::option::Option<i32>,
    /// <p>A value that indicates whether the DB instance is publicly accessible.
    /// </p>
    /// <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC,
    /// and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses,
    /// and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>  
    /// <p>
    /// <code>PubliclyAccessible</code> only applies to DB instances in a VPC.
    /// The DB instance must be part of a public subnet and
    /// <code>PubliclyAccessible</code> must be enabled for it to be publicly accessible.
    /// </p>
    /// <p>Changes to the <code>PubliclyAccessible</code> parameter are applied immediately regardless
    /// of the value of the <code>ApplyImmediately</code> parameter.</p>
    pub publicly_accessible: std::option::Option<bool>,
    /// <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For
    /// example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role,
    /// go to <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To
    /// create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
    pub monitoring_role_arn: std::option::Option<std::string::String>,
    /// <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: std::option::Option<std::string::String>,
    /// <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance
    /// after a failure of the existing primary instance. For more information,
    /// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance">
    /// Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.
    /// </p>
    /// <p>Default: 1</p>
    /// <p>Valid Values: 0 - 15</p>
    pub promotion_tier: std::option::Option<i32>,
    /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
    /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
    /// <p>This setting doesn't apply to Amazon Aurora. Mapping AWS IAM accounts to database accounts is managed by the DB
    /// cluster.</p>
    /// <p>For more information about IAM database authentication, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
    /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    pub enable_iam_database_authentication: std::option::Option<bool>,
    /// <p>A value that indicates whether to enable Performance Insights for the DB instance.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service
    /// User Guide</i>.
    /// </p>
    pub enable_performance_insights: std::option::Option<bool>,
    /// <p>The AWS KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).</p>
    /// <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS
    /// uses your default CMK. There is a default CMK for your AWS account.
    /// Your AWS account has a different default CMK for each AWS Region.</p>
    pub performance_insights_kms_key_id: std::option::Option<std::string::String>,
    /// <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). </p>
    pub performance_insights_retention_period: std::option::Option<i32>,
    /// <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance.</p>
    /// <p>A change to the <code>CloudwatchLogsExportConfiguration</code> parameter is always applied to the DB instance
    /// immediately. Therefore, the <code>ApplyImmediately</code> parameter has no effect.</p>
    pub cloudwatch_logs_export_configuration:
        std::option::Option<crate::model::CloudwatchLogsExportConfiguration>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub processor_features: std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
    /// <p>A value that indicates whether the DB instance class of the DB instance uses its default
    /// processor features.</p>
    pub use_default_processor_features: std::option::Option<bool>,
    /// <p>A value that indicates whether the DB instance has deletion protection enabled.
    /// The database can't be deleted when deletion protection is enabled. By default,
    /// deletion protection is disabled. For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
    /// Deleting a DB Instance</a>.
    /// </p>
    pub deletion_protection: std::option::Option<bool>,
    /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    /// <p>For more information about this setting, including limitations that apply to it, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
    /// Managing capacity automatically with Amazon RDS storage autoscaling</a>
    /// in the <i>Amazon RDS User Guide</i>.</p>
    pub max_allocated_storage: std::option::Option<i32>,
    /// <p>A value that indicates whether the DB instance is restarted when you rotate your
    /// SSL/TLS certificate.</p>
    /// <p>By default, the DB instance is restarted when you rotate your SSL/TLS certificate. The certificate
    /// is not updated until the DB instance is restarted.</p>
    /// <important>
    /// <p>Set this parameter only if you are <i>not</i> using SSL/TLS to connect to the DB instance.</p>
    /// </important>
    /// <p>If you are using SSL/TLS to connect to the DB instance, follow the appropriate instructions for your
    /// DB engine to rotate your SSL/TLS certificate:</p>
    /// <ul>
    /// <li>
    /// <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html">
    /// Rotating Your SSL/TLS Certificate.</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    /// </li>
    /// <li>
    /// <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html">
    /// Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide.</i>
    /// </p>
    /// </li>
    /// </ul>
    pub certificate_rotation_restart: std::option::Option<bool>,
    /// <p>A value that sets the open mode of a replica database to either mounted or read-only.</p>
    /// <note>
    /// <p>Currently, this parameter is only supported for Oracle DB instances.</p>
    /// </note>
    /// <p>Mounted DB replicas are included in Oracle Enterprise Edition. The main use case for
    /// mounted replicas is cross-Region disaster recovery. The primary database doesn't use
    /// Active Data Guard to transmit information to the mounted replica. Because it doesn't
    /// accept user connections, a mounted replica can't serve a read-only workload.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working with Oracle Read Replicas for Amazon RDS</a>
    /// in the <i>Amazon RDS User Guide</i>.</p>
    pub replica_mode: std::option::Option<crate::model::ReplicaMode>,
    /// <p>A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP</i> provides local or external connectivity to resources in
    /// your Outpost subnets through your on-premises network. For some use cases, a CoIP can
    /// provide lower latency for connections to the DB instance from outside of its virtual
    /// private cloud (VPC) on your local network.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on AWS Outposts</a>
    /// in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a>
    /// in the <i>AWS Outposts User Guide</i>.</p>
    pub enable_customer_owned_ip: std::option::Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the recovery point in AWS Backup.</p>
    pub aws_backup_recovery_point_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ModifyDBInstanceInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBInstanceInput");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("allocated_storage", &self.allocated_storage);
        formatter.field("db_instance_class", &self.db_instance_class);
        formatter.field("db_subnet_group_name", &self.db_subnet_group_name);
        formatter.field("db_security_groups", &self.db_security_groups);
        formatter.field("vpc_security_group_ids", &self.vpc_security_group_ids);
        formatter.field("apply_immediately", &self.apply_immediately);
        formatter.field("master_user_password", &self.master_user_password);
        formatter.field("db_parameter_group_name", &self.db_parameter_group_name);
        formatter.field("backup_retention_period", &self.backup_retention_period);
        formatter.field("preferred_backup_window", &self.preferred_backup_window);
        formatter.field(
            "preferred_maintenance_window",
            &self.preferred_maintenance_window,
        );
        formatter.field("multi_az", &self.multi_az);
        formatter.field("engine_version", &self.engine_version);
        formatter.field(
            "allow_major_version_upgrade",
            &self.allow_major_version_upgrade,
        );
        formatter.field(
            "auto_minor_version_upgrade",
            &self.auto_minor_version_upgrade,
        );
        formatter.field("license_model", &self.license_model);
        formatter.field("iops", &self.iops);
        formatter.field("option_group_name", &self.option_group_name);
        formatter.field(
            "new_db_instance_identifier",
            &self.new_db_instance_identifier,
        );
        formatter.field("storage_type", &self.storage_type);
        formatter.field("tde_credential_arn", &self.tde_credential_arn);
        formatter.field("tde_credential_password", &self.tde_credential_password);
        formatter.field("ca_certificate_identifier", &self.ca_certificate_identifier);
        formatter.field("domain", &self.domain);
        formatter.field("copy_tags_to_snapshot", &self.copy_tags_to_snapshot);
        formatter.field("monitoring_interval", &self.monitoring_interval);
        formatter.field("db_port_number", &self.db_port_number);
        formatter.field("publicly_accessible", &self.publicly_accessible);
        formatter.field("monitoring_role_arn", &self.monitoring_role_arn);
        formatter.field("domain_iam_role_name", &self.domain_iam_role_name);
        formatter.field("promotion_tier", &self.promotion_tier);
        formatter.field(
            "enable_iam_database_authentication",
            &self.enable_iam_database_authentication,
        );
        formatter.field(
            "enable_performance_insights",
            &self.enable_performance_insights,
        );
        formatter.field(
            "performance_insights_kms_key_id",
            &self.performance_insights_kms_key_id,
        );
        formatter.field(
            "performance_insights_retention_period",
            &self.performance_insights_retention_period,
        );
        formatter.field(
            "cloudwatch_logs_export_configuration",
            &self.cloudwatch_logs_export_configuration,
        );
        formatter.field("processor_features", &self.processor_features);
        formatter.field(
            "use_default_processor_features",
            &self.use_default_processor_features,
        );
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("max_allocated_storage", &self.max_allocated_storage);
        formatter.field(
            "certificate_rotation_restart",
            &self.certificate_rotation_restart,
        );
        formatter.field("replica_mode", &self.replica_mode);
        formatter.field("enable_customer_owned_ip", &self.enable_customer_owned_ip);
        formatter.field(
            "aws_backup_recovery_point_arn",
            &self.aws_backup_recovery_point_arn,
        );
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBClusterSnapshotAttributeInput {
    /// <p>The identifier for the DB cluster snapshot to modify the attributes for.</p>
    pub db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>The name of the DB cluster snapshot attribute to modify.</p>
    /// <p>To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot,
    /// set this value to <code>restore</code>.</p>
    /// <note>
    /// <p>To view the list of attributes available to modify, use the
    /// <a>DescribeDBClusterSnapshotAttributes</a> API action.</p>
    /// </note>
    pub attribute_name: std::option::Option<std::string::String>,
    /// <p>A list of DB cluster snapshot attributes to add to the attribute specified by <code>AttributeName</code>.</p>
    /// <p>To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account
    /// IDs, or <code>all</code> to make the manual DB cluster snapshot restorable by
    /// any AWS account. Do not add the <code>all</code> value for any
    /// manual DB cluster snapshots that contain private information that you don't want available
    /// to all AWS accounts.</p>
    pub values_to_add: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of DB cluster snapshot attributes to remove from the attribute specified by <code>AttributeName</code>.</p>
    /// <p>To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include
    /// one or more AWS account
    /// identifiers, or <code>all</code> to remove authorization for any AWS account to copy or
    /// restore the DB cluster snapshot. If you specify <code>all</code>, an AWS account whose account ID is
    /// explicitly added to the <code>restore</code> attribute
    /// can still copy or restore a manual DB cluster snapshot.</p>
    pub values_to_remove: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for ModifyDBClusterSnapshotAttributeInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBClusterSnapshotAttributeInput");
        formatter.field(
            "db_cluster_snapshot_identifier",
            &self.db_cluster_snapshot_identifier,
        );
        formatter.field("attribute_name", &self.attribute_name);
        formatter.field("values_to_add", &self.values_to_add);
        formatter.field("values_to_remove", &self.values_to_remove);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBClusterParameterGroupInput {
    /// <p>The name of the DB cluster parameter group to modify.</p>
    pub db_cluster_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>A list of parameters in the DB cluster parameter group to modify.</p>
    /// <p>Valid Values (for the application method): <code>immediate | pending-reboot</code>
    /// </p>
    /// <note>
    /// <p>You can use the <code>immediate</code> value with dynamic parameters only. You can use the
    /// <code>pending-reboot</code> value for both dynamic and static parameters.</p>
    /// <p>When the application method is <code>immediate</code>, changes to dynamic parameters are applied immediately
    /// to the DB clusters associated with the parameter group. When the application method is <code>pending-reboot</code>,
    /// changes to dynamic and static parameters are applied after a reboot without failover to the DB clusters associated with the
    /// parameter group.</p>
    /// </note>
    pub parameters: std::option::Option<std::vec::Vec<crate::model::Parameter>>,
}
impl std::fmt::Debug for ModifyDBClusterParameterGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBClusterParameterGroupInput");
        formatter.field(
            "db_cluster_parameter_group_name",
            &self.db_cluster_parameter_group_name,
        );
        formatter.field("parameters", &self.parameters);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBClusterEndpointInput {
    /// <p>The identifier of the endpoint to modify. This parameter is stored as a lowercase string.</p>
    pub db_cluster_endpoint_identifier: std::option::Option<std::string::String>,
    /// <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.</p>
    pub endpoint_type: std::option::Option<std::string::String>,
    /// <p>List of DB instance identifiers that are part of the custom endpoint group.</p>
    pub static_members: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>List of DB instance identifiers that aren't part of the custom endpoint group.
    /// All other eligible instances are reachable through the custom endpoint.
    /// Only relevant if the list of static members is empty.</p>
    pub excluded_members: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for ModifyDBClusterEndpointInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBClusterEndpointInput");
        formatter.field(
            "db_cluster_endpoint_identifier",
            &self.db_cluster_endpoint_identifier,
        );
        formatter.field("endpoint_type", &self.endpoint_type);
        formatter.field("static_members", &self.static_members);
        formatter.field("excluded_members", &self.excluded_members);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyDBClusterInput {
    /// <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p>
    /// <p>Constraints: This identifier must match the identifier of an existing DB
    /// cluster.</p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens</p>
    /// </li>
    /// <li>
    /// <p>The first character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-cluster2</code>
    /// </p>
    pub new_db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether the modifications in this request and
    /// any pending modifications are asynchronously applied
    /// as soon as possible, regardless of the
    /// <code>PreferredMaintenanceWindow</code> setting for the DB cluster.
    /// If this parameter is disabled, changes to the
    /// DB cluster are applied during the next maintenance window.</p>
    /// <p>The <code>ApplyImmediately</code> parameter only affects the <code>EnableIAMDatabaseAuthentication</code>,
    /// <code>MasterUserPassword</code>, and <code>NewDBClusterIdentifier</code> values. If the <code>ApplyImmediately</code>
    /// parameter is disabled, then changes to the <code>EnableIAMDatabaseAuthentication</code>, <code>MasterUserPassword</code>,
    /// and <code>NewDBClusterIdentifier</code> values are applied during the next maintenance window. All other changes are
    /// applied immediately, regardless of the value of the <code>ApplyImmediately</code> parameter.</p>
    /// <p>By default, this parameter is disabled.</p>
    pub apply_immediately: bool,
    /// <p>The number of days for which automated backups are retained. You must specify a minimum value of 1.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a value from 1 to 35</p>
    /// </li>
    /// </ul>
    pub backup_retention_period: std::option::Option<i32>,
    /// <p>The name of the DB cluster parameter group to use for the DB cluster.</p>
    pub db_cluster_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>A list of VPC security groups that the DB cluster will belong to.</p>
    pub vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The port number on which the DB cluster accepts connections.</p>
    /// <p>Constraints: Value must be <code>1150-65535</code>
    /// </p>
    /// <p>Default: The same port as the original DB cluster.</p>
    pub port: std::option::Option<i32>,
    /// <p>The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p>
    /// <p>Constraints: Must contain from 8 to 41 characters.</p>
    pub master_user_password: std::option::Option<std::string::String>,
    /// <p>A value that indicates that the DB cluster should be associated with the specified option group.
    /// Changing this parameter doesn't result in an outage except in the following case, and the change
    /// is applied during the next maintenance window
    /// unless the <code>ApplyImmediately</code> is enabled for this request. If the parameter change results in an option group that
    /// enables OEM, this change can cause a brief (sub-second) period during which new connections
    /// are rejected but existing connections are not interrupted.
    /// </p>
    /// <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
    pub option_group_name: std::option::Option<std::string::String>,
    /// <p>The daily time range during which automated backups are created
    /// if automated backups are enabled,
    /// using the <code>BackupRetentionPeriod</code> parameter.
    /// </p>
    /// <p>The default is a 30-minute window selected at random from an
    /// 8-hour block of time for each AWS Region.
    /// To view the time blocks available, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow">
    /// Backup window</a> in the <i>Amazon Aurora User Guide.</i>
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
    /// </li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p>
    /// </li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p>
    /// </li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p>
    /// </li>
    /// </ul>
    pub preferred_backup_window: std::option::Option<std::string::String>,
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
    /// </p>
    /// <p>The default is a 30-minute window selected at random from an
    /// 8-hour block of time for each AWS Region, occurring on a random day of the
    /// week. To see the time blocks available, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora">
    /// Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i>
    /// </p>
    /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    pub preferred_maintenance_window: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
    /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
    /// IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i>
    /// </p>
    pub enable_iam_database_authentication: std::option::Option<bool>,
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to
    /// 0.</p>
    /// <note>
    /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
    /// </note>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p>
    /// </li>
    /// </ul>
    pub backtrack_window: std::option::Option<i64>,
    /// <p>The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB cluster.</p>
    pub cloudwatch_logs_export_configuration:
        std::option::Option<crate::model::CloudwatchLogsExportConfiguration>,
    /// <p>The version number of the database engine to which you want to upgrade.
    /// Changing this parameter results in an outage. The change is applied during
    /// the next maintenance window unless <code>ApplyImmediately</code> is enabled.</p>
    /// <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code>
    /// </p>
    /// <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code>
    /// </p>
    /// <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code>
    /// </p>
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether major version upgrades are allowed.</p>
    /// <p>Constraints: You must allow major version upgrades when specifying a value for the
    /// <code>EngineVersion</code> parameter that is a different major version than the DB
    /// cluster's current version.</p>
    pub allow_major_version_upgrade: bool,
    /// <p>The name of the DB parameter group to apply to all instances of the DB cluster. </p>
    /// <note>
    /// <p>When you apply a parameter group using the <code>DBInstanceParameterGroupName</code> parameter, the DB
    /// cluster isn't rebooted automatically. Also, parameter changes aren't
    /// applied during the next maintenance window but instead are applied immediately.</p>
    /// </note>
    /// <p>Default: The existing name setting</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>The DB parameter group must be in the same DB parameter group family as this DB cluster.</p>
    /// </li>
    /// <li>
    /// <p>The <code>DBInstanceParameterGroupName</code> parameter is only valid in combination with
    /// the <code>AllowMajorVersionUpgrade</code> parameter.</p>
    /// </li>
    /// </ul>
    pub db_instance_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>The Active Directory directory ID to move the DB cluster to.  
    /// Specify <code>none</code> to remove the cluster from its current domain.
    /// The domain must be created prior to this operation.
    /// </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a>
    /// in the <i>Amazon Aurora User Guide</i>.
    /// </p>
    pub domain: std::option::Option<std::string::String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: std::option::Option<std::string::String>,
    /// <p>The scaling properties of the DB cluster. You can only modify scaling properties for DB clusters in <code>serverless</code> DB engine mode.</p>
    pub scaling_configuration: std::option::Option<crate::model::ScalingConfiguration>,
    /// <p>A value that indicates whether the DB cluster has deletion protection enabled.
    /// The database can't be deleted when deletion protection is enabled. By default,
    /// deletion protection is disabled.
    /// </p>
    pub deletion_protection: std::option::Option<bool>,
    /// <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint
    /// is disabled.</p>
    /// <p>When enabled, the HTTP endpoint provides a connectionless web service API for running
    /// SQL queries on the Aurora Serverless DB cluster. You can also query your database
    /// from inside the RDS console with the query editor.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the
    /// <i>Amazon Aurora User Guide</i>.</p>
    pub enable_http_endpoint: std::option::Option<bool>,
    /// <p>A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster.
    /// The default is not to copy them.</p>
    pub copy_tags_to_snapshot: std::option::Option<bool>,
    /// <p>A value that indicates whether to enable this DB cluster to forward write operations to the primary cluster of an
    /// Aurora global database (<a>GlobalCluster</a>). By default, write operations are not allowed on Aurora DB clusters that
    /// are secondary clusters in an Aurora global database.</p>
    /// <p>You can set this value only on Aurora DB clusters that are members of an Aurora global database. With this parameter
    /// enabled, a secondary cluster can forward writes to the current primary cluster and the resulting changes are replicated back to
    /// this cluster. For the primary DB cluster of an Aurora global database, this value is used immediately if the primary is
    /// demoted by the <a>FailoverGlobalCluster</a> API operation, but it does nothing until then.
    /// </p>
    pub enable_global_write_forwarding: std::option::Option<bool>,
}
impl std::fmt::Debug for ModifyDBClusterInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyDBClusterInput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field("new_db_cluster_identifier", &self.new_db_cluster_identifier);
        formatter.field("apply_immediately", &self.apply_immediately);
        formatter.field("backup_retention_period", &self.backup_retention_period);
        formatter.field(
            "db_cluster_parameter_group_name",
            &self.db_cluster_parameter_group_name,
        );
        formatter.field("vpc_security_group_ids", &self.vpc_security_group_ids);
        formatter.field("port", &self.port);
        formatter.field("master_user_password", &self.master_user_password);
        formatter.field("option_group_name", &self.option_group_name);
        formatter.field("preferred_backup_window", &self.preferred_backup_window);
        formatter.field(
            "preferred_maintenance_window",
            &self.preferred_maintenance_window,
        );
        formatter.field(
            "enable_iam_database_authentication",
            &self.enable_iam_database_authentication,
        );
        formatter.field("backtrack_window", &self.backtrack_window);
        formatter.field(
            "cloudwatch_logs_export_configuration",
            &self.cloudwatch_logs_export_configuration,
        );
        formatter.field("engine_version", &self.engine_version);
        formatter.field(
            "allow_major_version_upgrade",
            &self.allow_major_version_upgrade,
        );
        formatter.field(
            "db_instance_parameter_group_name",
            &self.db_instance_parameter_group_name,
        );
        formatter.field("domain", &self.domain);
        formatter.field("domain_iam_role_name", &self.domain_iam_role_name);
        formatter.field("scaling_configuration", &self.scaling_configuration);
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("enable_http_endpoint", &self.enable_http_endpoint);
        formatter.field("copy_tags_to_snapshot", &self.copy_tags_to_snapshot);
        formatter.field(
            "enable_global_write_forwarding",
            &self.enable_global_write_forwarding,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyCurrentDBClusterCapacityInput {
    /// <p>The DB cluster identifier for the cluster being modified. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DB cluster.</p>
    /// </li>
    /// </ul>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The DB cluster capacity.</p>
    /// <p>When you change the capacity of a paused Aurora Serverless DB cluster, it automatically resumes.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>For Aurora MySQL, valid capacity values are <code>1</code>, <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p>
    /// </li>
    /// <li>
    /// <p>For Aurora PostgreSQL, valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>192</code>, and <code>384</code>.</p>
    /// </li>
    /// </ul>
    pub capacity: std::option::Option<i32>,
    /// <p>The amount of time, in seconds, that Aurora Serverless tries to find a scaling point
    /// to perform seamless scaling before enforcing the timeout action. The default is
    /// 300.</p>
    /// <ul>
    /// <li>
    /// <p>Value must be from 10 through 600.</p>
    /// </li>
    /// </ul>
    pub seconds_before_timeout: std::option::Option<i32>,
    /// <p>The action to take when the timeout is reached, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p>
    /// <p>
    /// <code>ForceApplyCapacityChange</code>, the default, sets the capacity to the specified value as soon as possible.</p>
    /// <p>
    /// <code>RollbackCapacityChange</code> ignores the capacity change if a scaling point isn't found in the timeout period.</p>
    pub timeout_action: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ModifyCurrentDBClusterCapacityInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyCurrentDBClusterCapacityInput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field("capacity", &self.capacity);
        formatter.field("seconds_before_timeout", &self.seconds_before_timeout);
        formatter.field("timeout_action", &self.timeout_action);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ModifyCertificatesInput {
    /// <p>The new default certificate identifier to override the current one with.</p>
    /// <p>To determine the valid values, use the <code>describe-certificates</code> AWS CLI
    /// command or the <code>DescribeCertificates</code> API operation.</p>
    pub certificate_identifier: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to remove the override for the default certificate.
    /// If the override is removed, the default certificate is the system
    /// default.</p>
    pub remove_customer_override: std::option::Option<bool>,
}
impl std::fmt::Debug for ModifyCertificatesInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ModifyCertificatesInput");
        formatter.field("certificate_identifier", &self.certificate_identifier);
        formatter.field("remove_customer_override", &self.remove_customer_override);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceInput {
    /// <p>The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about
    /// creating an ARN,
    /// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
    /// Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub resource_name: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
}
impl std::fmt::Debug for ListTagsForResourceInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceInput");
        formatter.field("resource_name", &self.resource_name);
        formatter.field("filters", &self.filters);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ImportInstallationMediaInput {
    /// <p>The identifier of the custom Availability Zone (AZ) to import the installation media to.</p>
    pub custom_availability_zone_id: std::option::Option<std::string::String>,
    /// <p>The name of the database engine to be used for this instance.
    /// </p>
    /// <p>The list only includes supported DB engines that require an on-premises
    /// customer provided license.
    /// </p>
    /// <p>Valid Values:
    /// </p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>sqlserver-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ex</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-web</code>
    /// </p>
    /// </li>
    /// </ul>
    pub engine: std::option::Option<std::string::String>,
    /// <p>The version number of the database engine to use.</p>
    /// <p>For a list of valid engine versions, call <a>DescribeDBEngineVersions</a>.</p>
    /// <p>The following are the database engines and links to information about the major and minor
    /// versions. The list only includes DB engines that require an on-premises
    /// customer provided license.</p>
    /// <p>
    /// <b>Microsoft SQL Server</b>
    /// </p>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.VersionSupport">
    /// Microsoft SQL Server Versions on Amazon RDS</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The path to the installation medium for the specified DB engine.</p>
    /// <p>Example: <code>SQLServerISO/en_sql_server_2016_enterprise_x64_dvd_8701793.iso</code>
    /// </p>
    pub engine_installation_media_path: std::option::Option<std::string::String>,
    /// <p>The path to the installation medium for the operating system associated with the specified DB engine.</p>
    /// <p>Example: <code>WindowsISO/en_windows_server_2016_x64_dvd_9327751.iso</code>
    /// </p>
    pub os_installation_media_path: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ImportInstallationMediaInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ImportInstallationMediaInput");
        formatter.field(
            "custom_availability_zone_id",
            &self.custom_availability_zone_id,
        );
        formatter.field("engine", &self.engine);
        formatter.field("engine_version", &self.engine_version);
        formatter.field(
            "engine_installation_media_path",
            &self.engine_installation_media_path,
        );
        formatter.field(
            "os_installation_media_path",
            &self.os_installation_media_path,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct FailoverGlobalClusterInput {
    /// <p>Identifier of the Aurora global database (<a>GlobalCluster</a>)
    /// that should be failed over. The identifier is the unique key assigned by
    /// the user when the Aurora global database was created. In other words,
    /// it's the name of the Aurora global database that you want to fail over. </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing
    /// <a>GlobalCluster</a> (Aurora global database).</p>
    /// </li>
    /// </ul>
    pub global_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>Identifier of the secondary Aurora DB cluster that you want to promote to primary for the Aurora
    /// global database (<a>GlobalCluster</a>.) Use the Amazon Resource Name (ARN) for the identifier so that
    /// Aurora can locate the cluster in its AWS Region.      
    /// </p>
    pub target_db_cluster_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for FailoverGlobalClusterInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("FailoverGlobalClusterInput");
        formatter.field("global_cluster_identifier", &self.global_cluster_identifier);
        formatter.field(
            "target_db_cluster_identifier",
            &self.target_db_cluster_identifier,
        );
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct FailoverDBClusterInput {
    /// <p>A DB cluster identifier to force a failover for. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DBCluster.</p>
    /// </li>
    /// </ul>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The name of the instance to promote to the primary instance.</p>
    /// <p>You must specify the instance identifier for an Aurora Replica in the DB cluster.
    /// For example, <code>mydbcluster-replica1</code>.</p>
    pub target_db_instance_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for FailoverDBClusterInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("FailoverDBClusterInput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field(
            "target_db_instance_identifier",
            &self.target_db_instance_identifier,
        );
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DownloadDBLogFilePortionInput {
    /// <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DBInstance.</p>
    /// </li>
    /// </ul>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>The name of the log file to be downloaded.</p>
    pub log_file_name: std::option::Option<std::string::String>,
    /// <p>The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.</p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size.</p>
    /// <p>If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning
    /// or the end of the log file, depending on the value of the Marker parameter.</p>
    /// <ul>
    /// <li>
    /// <p>If neither Marker or NumberOfLines are specified, the entire log file is returned up to a
    /// maximum of 10000 lines, starting with the most recent log entries first.</p>
    /// </li>
    /// <li>
    /// <p>If
    /// NumberOfLines is specified and Marker isn't specified, then the most recent lines from the end
    /// of the log file are returned.</p>
    /// </li>
    /// <li>
    /// <p>If Marker is specified as "0", then the specified
    /// number of lines from the beginning of the log file are returned.</p>
    /// </li>
    /// <li>
    /// <p>You can
    /// download the log file in blocks of lines by specifying the size of the block using
    /// the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your
    /// first request. Include the Marker value returned in the response as the Marker value for the next
    /// request, continuing until the AdditionalDataPending response element returns false.</p>
    /// </li>
    /// </ul>
    pub number_of_lines: i32,
}
impl std::fmt::Debug for DownloadDBLogFilePortionInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DownloadDBLogFilePortionInput");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("log_file_name", &self.log_file_name);
        formatter.field("marker", &self.marker);
        formatter.field("number_of_lines", &self.number_of_lines);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeValidDBInstanceModificationsInput {
    /// <p>The customer identifier or the ARN of your DB instance.
    /// </p>
    pub db_instance_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeValidDBInstanceModificationsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeValidDBInstanceModificationsInput");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeSourceRegionsInput {
    /// <p>The source AWS Region name. For example, <code>us-east-1</code>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must specify a valid AWS Region name.</p>
    /// </li>
    /// </ul>
    pub region_name: std::option::Option<std::string::String>,
    /// <p>The maximum number of records to include in the response. If more records exist
    /// than the specified <code>MaxRecords</code> value, a pagination token called a marker is
    /// included in the response so you can retrieve the remaining results. </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>An optional pagination token provided by a previous <code>DescribeSourceRegions</code> request. If this parameter is specified, the response
    /// includes only records beyond the marker, up to the value specified by
    /// <code>MaxRecords</code>.</p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
}
impl std::fmt::Debug for DescribeSourceRegionsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeSourceRegionsInput");
        formatter.field("region_name", &self.region_name);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.field("filters", &self.filters);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReservedDBInstancesOfferingsInput {
    /// <p>The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier.</p>
    /// <p>Example: <code>438012d3-4052-4cc7-b2e3-8d3372e0e706</code>
    /// </p>
    pub reserved_db_instances_offering_id: std::option::Option<std::string::String>,
    /// <p>The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.</p>
    pub db_instance_class: std::option::Option<std::string::String>,
    /// <p>Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p>
    /// <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code>
    /// </p>
    pub duration: std::option::Option<std::string::String>,
    /// <p>Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.</p>
    /// <note>
    /// <p>The results show offerings that partially match the filter value.</p>
    /// </note>
    pub product_description: std::option::Option<std::string::String>,
    /// <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p>
    /// <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code>
    /// </p>
    pub offering_type: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to show only those reservations that support Multi-AZ.</p>
    pub multi_az: std::option::Option<bool>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is
    /// included in the response so you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeReservedDBInstancesOfferingsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReservedDBInstancesOfferingsInput");
        formatter.field(
            "reserved_db_instances_offering_id",
            &self.reserved_db_instances_offering_id,
        );
        formatter.field("db_instance_class", &self.db_instance_class);
        formatter.field("duration", &self.duration);
        formatter.field("product_description", &self.product_description);
        formatter.field("offering_type", &self.offering_type);
        formatter.field("multi_az", &self.multi_az);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeReservedDBInstancesInput {
    /// <p>The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.</p>
    pub reserved_db_instance_id: std::option::Option<std::string::String>,
    /// <p>The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.</p>
    pub reserved_db_instances_offering_id: std::option::Option<std::string::String>,
    /// <p>The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.</p>
    pub db_instance_class: std::option::Option<std::string::String>,
    /// <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p>
    /// <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code>
    /// </p>
    pub duration: std::option::Option<std::string::String>,
    /// <p>The product description filter value. Specify this parameter to show only those reservations matching the specified product description.</p>
    pub product_description: std::option::Option<std::string::String>,
    /// <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p>
    /// <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code>
    /// </p>
    pub offering_type: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to show only those reservations that support Multi-AZ.</p>
    pub multi_az: std::option::Option<bool>,
    /// <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p>
    /// <note>
    /// <p>AWS Support might request the lease ID for an issue related to a reserved DB instance.</p>
    /// </note>
    pub lease_id: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is
    /// included in the response so you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeReservedDBInstancesInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeReservedDBInstancesInput");
        formatter.field("reserved_db_instance_id", &self.reserved_db_instance_id);
        formatter.field(
            "reserved_db_instances_offering_id",
            &self.reserved_db_instances_offering_id,
        );
        formatter.field("db_instance_class", &self.db_instance_class);
        formatter.field("duration", &self.duration);
        formatter.field("product_description", &self.product_description);
        formatter.field("offering_type", &self.offering_type);
        formatter.field("multi_az", &self.multi_az);
        formatter.field("lease_id", &self.lease_id);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribePendingMaintenanceActionsInput {
    /// <p>The ARN of a resource to return pending maintenance actions for.</p>
    pub resource_identifier: std::option::Option<std::string::String>,
    /// <p>A filter that specifies one or more resources to return pending maintenance actions for.</p>
    /// <p>Supported filters:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB
    /// cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance
    /// actions for the DB clusters identified by these ARNs.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>db-instance-id</code> - Accepts DB instance identifiers and DB
    /// instance ARNs. The results list will only include pending maintenance
    /// actions for the DB instances identified by these ARNs.</p>
    /// </li>
    /// </ul>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// <code>DescribePendingMaintenanceActions</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to a number of records specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so that
    /// you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
}
impl std::fmt::Debug for DescribePendingMaintenanceActionsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribePendingMaintenanceActionsInput");
        formatter.field("resource_identifier", &self.resource_identifier);
        formatter.field("filters", &self.filters);
        formatter.field("marker", &self.marker);
        formatter.field("max_records", &self.max_records);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeOrderableDBInstanceOptionsInput {
    /// <p>The name of the engine to retrieve DB instance options for.</p>
    /// <p>Valid Values:
    /// </p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>aurora-postgresql</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>mariadb</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>mysql</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se2</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se1</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>postgres</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ex</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-web</code>
    /// </p>
    /// </li>
    /// </ul>
    pub engine: std::option::Option<std::string::String>,
    /// <p>The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.</p>
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.</p>
    pub db_instance_class: std::option::Option<std::string::String>,
    /// <p>The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.</p>
    pub license_model: std::option::Option<std::string::String>,
    /// <p>The Availability Zone group associated with a Local Zone. Specify this parameter to retrieve available offerings for the Local Zones in the group.</p>
    /// <p>Omit this parameter to show the available offerings in the specified AWS Region.</p>
    pub availability_zone_group: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to show only VPC or non-VPC offerings.</p>
    pub vpc: std::option::Option<bool>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so that
    /// you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// DescribeOrderableDBInstanceOptions request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code> .
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeOrderableDBInstanceOptionsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeOrderableDBInstanceOptionsInput");
        formatter.field("engine", &self.engine);
        formatter.field("engine_version", &self.engine_version);
        formatter.field("db_instance_class", &self.db_instance_class);
        formatter.field("license_model", &self.license_model);
        formatter.field("availability_zone_group", &self.availability_zone_group);
        formatter.field("vpc", &self.vpc);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeOptionGroupsInput {
    /// <p>The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.</p>
    pub option_group_name: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// An optional pagination token provided by a previous DescribeOptionGroups request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so that
    /// you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>Filters the list of option groups to only include groups associated with a specific database engine.</p>
    /// <p>Valid Values:
    /// </p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>mariadb</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>mysql</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se2</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se1</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>postgres</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ex</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-web</code>
    /// </p>
    /// </li>
    /// </ul>
    pub engine_name: std::option::Option<std::string::String>,
    /// <p>Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.</p>
    pub major_engine_version: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeOptionGroupsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeOptionGroupsInput");
        formatter.field("option_group_name", &self.option_group_name);
        formatter.field("filters", &self.filters);
        formatter.field("marker", &self.marker);
        formatter.field("max_records", &self.max_records);
        formatter.field("engine_name", &self.engine_name);
        formatter.field("major_engine_version", &self.major_engine_version);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeOptionGroupOptionsInput {
    /// <p>A required parameter. Options available for the given engine name are described.</p>
    /// <p>Valid Values:
    /// </p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>mariadb</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>mysql</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se2</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se1</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>postgres</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ex</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-web</code>
    /// </p>
    /// </li>
    /// </ul>
    pub engine_name: std::option::Option<std::string::String>,
    /// <p>If specified, filters the results to include only options for the specified major engine version.</p>
    pub major_engine_version: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so that
    /// you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeOptionGroupOptionsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeOptionGroupOptionsInput");
        formatter.field("engine_name", &self.engine_name);
        formatter.field("major_engine_version", &self.major_engine_version);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeInstallationMediaInput {
    /// <p>The installation medium ID.</p>
    pub installation_media_id: std::option::Option<std::string::String>,
    /// <p>A filter that specifies one or more installation media to describe. Supported filters
    /// include the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>custom-availability-zone-id</code> - Accepts custom Availability Zone (AZ)
    /// identifiers. The results list includes information about only the custom AZs
    /// identified by these identifiers.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>engine</code> - Accepts database engines. The results list includes information about
    /// only the database engines identified by these identifiers.</p>
    /// <p>For more information about the valid engines for installation media, see <a>ImportInstallationMedia</a>.</p>
    /// </li>
    /// </ul>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>An optional pagination token provided by a previous DescribeInstallationMedia request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeInstallationMediaInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeInstallationMediaInput");
        formatter.field("installation_media_id", &self.installation_media_id);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeGlobalClustersInput {
    /// <p>
    /// The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match an existing DBClusterIdentifier.</p>
    /// </li>
    /// </ul>
    pub global_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>A filter that specifies one or more global DB clusters to describe.</p>
    /// <p>Supported filters:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB
    /// cluster Amazon Resource Names (ARNs). The results list will only include information about
    /// the DB clusters identified by these ARNs.</p>
    /// </li>
    /// </ul>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response. If more records exist than the specified
    /// <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that
    /// you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous <code>DescribeGlobalClusters</code> request. If
    /// this parameter is specified, the response includes only records beyond the marker, up to the value
    /// specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeGlobalClustersInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeGlobalClustersInput");
        formatter.field("global_cluster_identifier", &self.global_cluster_identifier);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeExportTasksInput {
    /// <p>The identifier of the snapshot export task to be described.</p>
    pub export_task_identifier: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.</p>
    pub source_arn: std::option::Option<std::string::String>,
    /// <p>Filters specify one or more snapshot exports to describe. The filters are specified as name-value pairs that define what to
    /// include in the output. Filter names and values are case-sensitive.</p>
    /// <p>Supported filters include the following: </p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>export-task-identifier</code> - An identifier for the snapshot export task.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>s3-bucket</code> - The Amazon S3 bucket the snapshot is exported to.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>source-arn</code> - The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>status</code> - The status of the export task. Must be lowercase, for example, <code>complete</code>.</p>
    /// </li>
    /// </ul>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// An optional pagination token provided by a previous <code>DescribeExportTasks</code> request.
    /// If you specify this parameter, the response includes only records beyond the marker,
    /// up to the value specified by the <code>MaxRecords</code> parameter.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>
    /// The maximum number of records to include in the response. If more records exist than the
    /// specified value, a pagination token called a marker is included in the response.
    /// You can use the marker in a later <code>DescribeExportTasks</code> request
    /// to retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
}
impl std::fmt::Debug for DescribeExportTasksInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeExportTasksInput");
        formatter.field("export_task_identifier", &self.export_task_identifier);
        formatter.field("source_arn", &self.source_arn);
        formatter.field("filters", &self.filters);
        formatter.field("marker", &self.marker);
        formatter.field("max_records", &self.max_records);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEventSubscriptionsInput {
    /// <p>The name of the RDS event notification subscription you want to describe.</p>
    pub subscription_name: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so that
    /// you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// DescribeOrderableDBInstanceOptions request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code> .
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeEventSubscriptionsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEventSubscriptionsInput");
        formatter.field("subscription_name", &self.subscription_name);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEventsInput {
    /// <p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If <code>SourceIdentifier</code> is supplied, <code>SourceType</code> must also be provided.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB instance, a <code>DBInstanceIdentifier</code> value must be supplied.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB cluster, a <code>DBClusterIdentifier</code> value must be supplied.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> value must be supplied.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> value must be supplied.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> value must be supplied.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB cluster snapshot, a <code>DBClusterSnapshotIdentifier</code> value must be supplied.</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    /// </li>
    /// </ul>
    pub source_identifier: std::option::Option<std::string::String>,
    /// <p>The event source to retrieve events for. If no value is specified, all events are returned.</p>
    pub source_type: std::option::Option<crate::model::SourceType>,
    /// <p>
    /// The beginning of the time interval to retrieve events for,
    /// specified in ISO 8601 format. For more information about ISO 8601,
    /// go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a>
    /// </p>
    /// <p>Example: 2009-07-08T18:00Z</p>
    pub start_time: std::option::Option<smithy_types::Instant>,
    /// <p>
    /// The end of the time interval for which to retrieve events,
    /// specified in ISO 8601 format. For more information about ISO 8601,
    /// go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a>
    /// </p>
    /// <p>Example: 2009-07-08T18:00Z</p>
    pub end_time: std::option::Option<smithy_types::Instant>,
    /// <p>The number of minutes to retrieve events for.</p>
    /// <p>Default: 60</p>
    pub duration: std::option::Option<i32>,
    /// <p>A list of event categories that trigger notifications for a event notification subscription.</p>
    pub event_categories: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so that
    /// you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// DescribeEvents request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeEventsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEventsInput");
        formatter.field("source_identifier", &self.source_identifier);
        formatter.field("source_type", &self.source_type);
        formatter.field("start_time", &self.start_time);
        formatter.field("end_time", &self.end_time);
        formatter.field("duration", &self.duration);
        formatter.field("event_categories", &self.event_categories);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEventCategoriesInput {
    /// <p>The type of source that is generating the events.</p>
    /// <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code>
    /// </p>
    pub source_type: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
}
impl std::fmt::Debug for DescribeEventCategoriesInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEventCategoriesInput");
        formatter.field("source_type", &self.source_type);
        formatter.field("filters", &self.filters);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEngineDefaultParametersInput {
    /// <p>The name of the DB parameter group family.</p>
    pub db_parameter_group_family: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// <code>DescribeEngineDefaultParameters</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeEngineDefaultParametersInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEngineDefaultParametersInput");
        formatter.field("db_parameter_group_family", &self.db_parameter_group_family);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeEngineDefaultClusterParametersInput {
    /// <p>The name of the DB cluster parameter group family to return engine parameter information for.</p>
    pub db_parameter_group_family: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// <code>DescribeEngineDefaultClusterParameters</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeEngineDefaultClusterParametersInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeEngineDefaultClusterParametersInput");
        formatter.field("db_parameter_group_family", &self.db_parameter_group_family);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBSubnetGroupsInput {
    /// <p>The name of the DB subnet group to return details for.</p>
    pub db_subnet_group_name: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so that
    /// you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous DescribeDBSubnetGroups request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBSubnetGroupsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBSubnetGroupsInput");
        formatter.field("db_subnet_group_name", &self.db_subnet_group_name);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBSnapshotsInput {
    /// <p>The ID of the DB instance to retrieve the list of DB snapshots for.
    /// This parameter can't be used in conjunction with <code>DBSnapshotIdentifier</code>.
    /// This parameter isn't case-sensitive.
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the identifier of an existing DBInstance.</p>
    /// </li>
    /// </ul>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>
    /// A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with <code>DBInstanceIdentifier</code>.            
    /// This value is stored as a lowercase string.
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the identifier of an existing DBSnapshot.</p>
    /// </li>
    /// <li>
    /// <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p>
    /// </li>
    /// </ul>
    pub db_snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>The type of snapshots to be returned. You can specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>automated</code> - Return all DB snapshots that have been automatically taken by
    /// Amazon RDS for my AWS account.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>manual</code> - Return all DB snapshots that have been taken by my AWS account.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>shared</code> - Return all manual DB snapshots that have been shared to my AWS account.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>public</code> - Return all DB snapshots that have been marked as public.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>awsbackup</code> - Return the DB snapshots managed by the AWS Backup service.</p>
    /// <p>For information about AWS Backup, see the
    /// <a href="https://docs.aws.amazon.com/aws-backup/latest/devguide/whatisbackup.html">
    /// <i>AWS Backup Developer Guide.</i>
    /// </a>
    /// </p>
    /// <p>The <code>awsbackup</code> type does not apply to Aurora.</p>
    /// </li>
    /// </ul>
    /// <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual snapshots are
    /// returned. Shared and public DB snapshots are not included in the returned results by default.
    /// You can include shared snapshots with these results by enabling the <code>IncludeShared</code>
    /// parameter. You can include public snapshots with these results by enabling the
    /// <code>IncludePublic</code> parameter.</p>
    /// <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values
    /// of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is
    /// set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to
    /// <code>public</code>.</p>
    pub snapshot_type: std::option::Option<std::string::String>,
    /// <p>A filter that specifies one or more DB snapshots to describe.</p>
    /// <p>Supported filters:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>db-instance-id</code> - Accepts DB instance identifiers and DB
    /// instance Amazon Resource Names (ARNs).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>db-snapshot-id</code> - Accepts DB snapshot identifiers.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>dbi-resource-id</code> - Accepts identifiers of source DB instances.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>snapshot-type</code> - Accepts types of DB snapshots.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>engine</code> - Accepts names of database engines.</p>
    /// </li>
    /// </ul>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so that
    /// you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// <code>DescribeDBSnapshots</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to include shared manual DB cluster snapshots
    /// from other AWS accounts that this AWS account has been given
    /// permission to copy or restore. By default, these snapshots are not included.</p>
    /// <p>You can give an AWS account permission to restore a manual DB snapshot from
    /// another AWS account by using the <code>ModifyDBSnapshotAttribute</code> API action.</p>
    pub include_shared: bool,
    /// <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied
    /// or restored by any AWS account. By default, the public snapshots are not included.</p>
    /// <p>You can share a manual DB snapshot as public by using the <a>ModifyDBSnapshotAttribute</a> API.</p>
    pub include_public: bool,
    /// <p>A specific DB resource ID to describe.</p>
    pub dbi_resource_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBSnapshotsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBSnapshotsInput");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("db_snapshot_identifier", &self.db_snapshot_identifier);
        formatter.field("snapshot_type", &self.snapshot_type);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.field("include_shared", &self.include_shared);
        formatter.field("include_public", &self.include_public);
        formatter.field("dbi_resource_id", &self.dbi_resource_id);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBSnapshotAttributesInput {
    /// <p>The identifier for the DB snapshot to describe the attributes for.</p>
    pub db_snapshot_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBSnapshotAttributesInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBSnapshotAttributesInput");
        formatter.field("db_snapshot_identifier", &self.db_snapshot_identifier);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBSecurityGroupsInput {
    /// <p>The name of the DB security group to return details for.</p>
    pub db_security_group_name: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so that
    /// you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// <code>DescribeDBSecurityGroups</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBSecurityGroupsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBSecurityGroupsInput");
        formatter.field("db_security_group_name", &self.db_security_group_name);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBProxyTargetsInput {
    /// <p>The identifier of the <code>DBProxyTarget</code> to describe.</p>
    pub db_proxy_name: std::option::Option<std::string::String>,
    /// <p>The identifier of the <code>DBProxyTargetGroup</code> to describe.</p>
    pub target_group_name: std::option::Option<std::string::String>,
    /// <p>This parameter is not currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so that the remaining
    /// results can be retrieved.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
}
impl std::fmt::Debug for DescribeDBProxyTargetsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBProxyTargetsInput");
        formatter.field("db_proxy_name", &self.db_proxy_name);
        formatter.field("target_group_name", &self.target_group_name);
        formatter.field("filters", &self.filters);
        formatter.field("marker", &self.marker);
        formatter.field("max_records", &self.max_records);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBProxyTargetGroupsInput {
    /// <p>The identifier of the <code>DBProxy</code> associated with the target group.</p>
    pub db_proxy_name: std::option::Option<std::string::String>,
    /// <p>The identifier of the <code>DBProxyTargetGroup</code> to describe.</p>
    pub target_group_name: std::option::Option<std::string::String>,
    /// <p>This parameter is not currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so that the remaining
    /// results can be retrieved.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
}
impl std::fmt::Debug for DescribeDBProxyTargetGroupsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBProxyTargetGroupsInput");
        formatter.field("db_proxy_name", &self.db_proxy_name);
        formatter.field("target_group_name", &self.target_group_name);
        formatter.field("filters", &self.filters);
        formatter.field("marker", &self.marker);
        formatter.field("max_records", &self.max_records);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBProxyEndpointsInput {
    /// <p>The name of the DB proxy whose endpoints you want to describe. If you omit
    /// this parameter, the output includes information about all DB proxy endpoints
    /// associated with all your DB proxies.</p>
    pub db_proxy_name: std::option::Option<std::string::String>,
    /// <p>The name of a DB proxy endpoint to describe. If you omit this parameter,
    /// the output includes information about all DB proxy endpoints associated with
    /// the specified proxy.</p>
    pub db_proxy_endpoint_name: std::option::Option<std::string::String>,
    /// <p>This parameter is not currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>The maximum number of records to include in the response. If more records exist
    /// than the specified <code>MaxRecords</code> value, a pagination token called a marker is
    /// included in the response so that the remaining results can be retrieved. </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
}
impl std::fmt::Debug for DescribeDBProxyEndpointsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBProxyEndpointsInput");
        formatter.field("db_proxy_name", &self.db_proxy_name);
        formatter.field("db_proxy_endpoint_name", &self.db_proxy_endpoint_name);
        formatter.field("filters", &self.filters);
        formatter.field("marker", &self.marker);
        formatter.field("max_records", &self.max_records);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBProxiesInput {
    /// <p>The name of the DB proxy. If you omit this parameter,
    /// the output includes information about all DB proxies owned by
    /// your AWS account ID.</p>
    pub db_proxy_name: std::option::Option<std::string::String>,
    /// <p>This parameter is not currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>The maximum number of records to include in the response. If more records exist
    /// than the specified <code>MaxRecords</code> value, a pagination token called a marker is
    /// included in the response so that the remaining results can be retrieved. </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
}
impl std::fmt::Debug for DescribeDBProxiesInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBProxiesInput");
        formatter.field("db_proxy_name", &self.db_proxy_name);
        formatter.field("filters", &self.filters);
        formatter.field("marker", &self.marker);
        formatter.field("max_records", &self.max_records);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBParametersInput {
    /// <p>The name of a specific DB parameter group to return details for.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DBParameterGroup.</p>
    /// </li>
    /// </ul>
    pub db_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>The parameter types to return.</p>
    /// <p>Default: All parameter types returned</p>
    /// <p>Valid Values: <code>user | system | engine-default</code>
    /// </p>
    pub source: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so that
    /// you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// <code>DescribeDBParameters</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBParametersInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBParametersInput");
        formatter.field("db_parameter_group_name", &self.db_parameter_group_name);
        formatter.field("source", &self.source);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBParameterGroupsInput {
    /// <p>The name of a specific DB parameter group to return details for.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p>
    /// </li>
    /// </ul>
    pub db_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so that
    /// you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// <code>DescribeDBParameterGroups</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBParameterGroupsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBParameterGroupsInput");
        formatter.field("db_parameter_group_name", &self.db_parameter_group_name);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBLogFilesInput {
    /// <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DBInstance.</p>
    /// </li>
    /// </ul>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>Filters the available log files for log file names that contain the specified string.</p>
    pub filename_contains: std::option::Option<std::string::String>,
    /// <p>Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.</p>
    pub file_last_written: i64,
    /// <p>Filters the available log files for files larger than the specified size.</p>
    pub file_size: i64,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBLogFilesInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBLogFilesInput");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("filename_contains", &self.filename_contains);
        formatter.field("file_last_written", &self.file_last_written);
        formatter.field("file_size", &self.file_size);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBInstancesInput {
    /// <p>The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the identifier of an existing DBInstance.</p>
    /// </li>
    /// </ul>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>A filter that specifies one or more DB instances to describe.</p>
    /// <p>Supported filters:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB
    /// cluster Amazon Resource Names (ARNs). The results list will only include information about
    /// the DB instances associated with the DB clusters identified by these ARNs.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>db-instance-id</code> - Accepts DB instance identifiers and DB
    /// instance Amazon Resource Names (ARNs). The results list will only include information about
    /// the DB instances identified by these ARNs.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>dbi-resource-id</code> - Accepts DB instance resource identifiers. The results list will
    /// only include information about the DB instances identified by these DB instance resource identifiers.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>domain</code> - Accepts Active Directory directory IDs. The results list will only
    /// include information about the DB instances associated with these domains.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>engine</code> - Accepts engine names. The results list will only include information
    /// about the DB instances for these engines.</p>
    /// </li>
    /// </ul>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so that
    /// you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// <code>DescribeDBInstances</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBInstancesInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBInstancesInput");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

/// <p>Parameter input for DescribeDBInstanceAutomatedBackups. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBInstanceAutomatedBackupsInput {
    /// <p>The resource ID of the DB instance that is the source of
    /// the automated backup. This parameter isn't case-sensitive. </p>
    pub dbi_resource_id: std::option::Option<std::string::String>,
    /// <p>(Optional) The user-supplied instance identifier. If this parameter is specified, it must
    /// match the identifier of an existing DB instance. It returns information from the
    /// specific DB instance' automated backup. This parameter isn't case-sensitive. </p>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>A filter that specifies which resources to return based on status.</p>
    /// <p>Supported filters are the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>status</code>
    /// </p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>active</code> - automated backups for current instances</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>retained</code> - automated backups for deleted instances and after backup replication is stopped</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p>
    /// </li>
    /// </ul>
    /// </li>
    /// <li>
    /// <p>
    /// <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs).
    /// The results list includes only information about the DB instance automated backups identified by these ARNs.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>dbi-resource-id</code> - Accepts DB resource identifiers and Amazon Resource Names (ARNs).
    /// The results list includes only information about the DB instance resources identified by these ARNs.</p>
    /// </li>
    /// </ul>
    /// <p>Returns all resources by default. The status for each resource is specified in the response.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified
    /// <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that
    /// you can retrieve the remaining results.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>The pagination token provided in the previous request. If this parameter is specified the response
    /// includes only records beyond the marker, up to <code>MaxRecords</code>.</p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the replicated automated backups, for example,
    /// <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
    pub db_instance_automated_backups_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBInstanceAutomatedBackupsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBInstanceAutomatedBackupsInput");
        formatter.field("dbi_resource_id", &self.dbi_resource_id);
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.field(
            "db_instance_automated_backups_arn",
            &self.db_instance_automated_backups_arn,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBEngineVersionsInput {
    /// <p>The database engine to return.</p>
    /// <p>Valid Values:
    /// </p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>aurora-postgresql</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>mariadb</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>mysql</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se2</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se1</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>postgres</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ex</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-web</code>
    /// </p>
    /// </li>
    /// </ul>
    pub engine: std::option::Option<std::string::String>,
    /// <p>The database engine version to return.</p>
    /// <p>Example: <code>5.1.49</code>
    /// </p>
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The name of a specific DB parameter group family to return details for.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match an existing DBParameterGroupFamily.</p>
    /// </li>
    /// </ul>
    pub db_parameter_group_family: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is
    /// included in the response so you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.</p>
    pub default_only: bool,
    /// <p>A value that indicates whether to list the supported character sets for each engine version.</p>
    /// <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>,
    /// the response includes a list of supported character sets for each engine version.
    /// </p>
    pub list_supported_character_sets: std::option::Option<bool>,
    /// <p>A value that indicates whether to list the supported time zones for each engine version.</p>
    /// <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>,
    /// the response includes a list of supported time zones for each engine version.
    /// </p>
    pub list_supported_timezones: std::option::Option<bool>,
    /// <p>A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.</p>
    pub include_all: std::option::Option<bool>,
}
impl std::fmt::Debug for DescribeDBEngineVersionsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBEngineVersionsInput");
        formatter.field("engine", &self.engine);
        formatter.field("engine_version", &self.engine_version);
        formatter.field("db_parameter_group_family", &self.db_parameter_group_family);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.field("default_only", &self.default_only);
        formatter.field(
            "list_supported_character_sets",
            &self.list_supported_character_sets,
        );
        formatter.field("list_supported_timezones", &self.list_supported_timezones);
        formatter.field("include_all", &self.include_all);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBClusterSnapshotsInput {
    /// <p>The ID of the DB cluster to retrieve the list of DB cluster snapshots for.
    /// This parameter can't be used in conjunction with the
    /// <code>DBClusterSnapshotIdentifier</code> parameter.
    /// This parameter isn't case-sensitive.
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the identifier of an existing DBCluster.</p>
    /// </li>
    /// </ul>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>A specific DB cluster snapshot identifier to describe.
    /// This parameter can't be used in conjunction with the
    /// <code>DBClusterIdentifier</code> parameter.            
    /// This value is stored as a lowercase string.
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the identifier of an existing DBClusterSnapshot.</p>
    /// </li>
    /// <li>
    /// <p>If this identifier is for an automated snapshot, the <code>SnapshotType</code> parameter must also be specified.</p>
    /// </li>
    /// </ul>
    pub db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>The type of DB cluster snapshots to be returned. You can specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>automated</code> - Return all DB cluster snapshots that have been automatically taken by
    /// Amazon RDS for my AWS account.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>manual</code> - Return all DB cluster snapshots that have been taken by my AWS account.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>shared</code> - Return all manual DB cluster snapshots that have been shared to my AWS account.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>public</code> - Return all DB cluster snapshots that have been marked as public.</p>
    /// </li>
    /// </ul>
    /// <p>If you don't specify a <code>SnapshotType</code> value, then both automated and manual DB cluster snapshots are
    /// returned. You can include shared DB cluster snapshots with these results by enabling the <code>IncludeShared</code>
    /// parameter. You can include public DB cluster snapshots with these results by enabling the
    /// <code>IncludePublic</code> parameter.</p>
    /// <p>The <code>IncludeShared</code> and <code>IncludePublic</code> parameters don't apply for <code>SnapshotType</code> values
    /// of <code>manual</code> or <code>automated</code>. The <code>IncludePublic</code> parameter doesn't apply when <code>SnapshotType</code> is
    /// set to <code>shared</code>. The <code>IncludeShared</code> parameter doesn't apply when <code>SnapshotType</code> is set to
    /// <code>public</code>.</p>
    pub snapshot_type: std::option::Option<std::string::String>,
    /// <p>A filter that specifies one or more DB cluster snapshots to describe.</p>
    /// <p>Supported filters:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB
    /// cluster Amazon Resource Names (ARNs).</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>db-cluster-snapshot-id</code> - Accepts DB cluster snapshot identifiers.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>snapshot-type</code> - Accepts types of DB cluster snapshots.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>engine</code> - Accepts names of database engines.</p>
    /// </li>
    /// </ul>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>An optional pagination token provided by a previous
    /// <code>DescribeDBClusterSnapshots</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to include shared manual DB cluster snapshots
    /// from other AWS accounts that this AWS account has been given
    /// permission to copy or restore. By default, these snapshots are not included.</p>
    /// <p>You can give an AWS account permission to restore a manual DB cluster snapshot from
    /// another AWS account by the <code>ModifyDBClusterSnapshotAttribute</code> API action.</p>
    pub include_shared: bool,
    /// <p>A value that indicates whether to include manual DB cluster snapshots that are public and can be copied
    /// or restored by any AWS account. By default, the public snapshots are not included.</p>
    /// <p>You can share a manual DB cluster snapshot  as public by using the <a>ModifyDBClusterSnapshotAttribute</a> API action.</p>
    pub include_public: bool,
}
impl std::fmt::Debug for DescribeDBClusterSnapshotsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBClusterSnapshotsInput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field(
            "db_cluster_snapshot_identifier",
            &self.db_cluster_snapshot_identifier,
        );
        formatter.field("snapshot_type", &self.snapshot_type);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.field("include_shared", &self.include_shared);
        formatter.field("include_public", &self.include_public);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBClusterSnapshotAttributesInput {
    /// <p>The identifier for the DB cluster snapshot to describe the attributes for.</p>
    pub db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBClusterSnapshotAttributesInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBClusterSnapshotAttributesInput");
        formatter.field(
            "db_cluster_snapshot_identifier",
            &self.db_cluster_snapshot_identifier,
        );
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBClustersInput {
    /// <p>The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match an existing DBClusterIdentifier.</p>
    /// </li>
    /// </ul>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>A filter that specifies one or more DB clusters to describe.</p>
    /// <p>Supported filters:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>db-cluster-id</code> - Accepts DB cluster identifiers and DB
    /// cluster Amazon Resource Names (ARNs). The results list will only include information about
    /// the DB clusters identified by these ARNs.</p>
    /// </li>
    /// </ul>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>An optional pagination token provided by a previous
    /// <code>DescribeDBClusters</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
    /// <p>Optional Boolean parameter that specifies whether the output includes information about clusters
    /// shared from other AWS accounts.</p>
    pub include_shared: bool,
}
impl std::fmt::Debug for DescribeDBClustersInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBClustersInput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.field("include_shared", &self.include_shared);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBClusterParametersInput {
    /// <p>The name of a specific DB cluster parameter group to return parameter details for.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p>
    /// </li>
    /// </ul>
    pub db_cluster_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>
    /// A value that indicates to return only parameters for a specific source.
    /// Parameter sources can be <code>engine</code>, <code>service</code>,
    /// or <code>customer</code>.
    /// </p>
    pub source: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// <code>DescribeDBClusterParameters</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBClusterParametersInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBClusterParametersInput");
        formatter.field(
            "db_cluster_parameter_group_name",
            &self.db_cluster_parameter_group_name,
        );
        formatter.field("source", &self.source);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBClusterParameterGroupsInput {
    /// <p>The name of a specific DB cluster parameter group to return details for.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p>
    /// </li>
    /// </ul>
    pub db_cluster_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// <code>DescribeDBClusterParameterGroups</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBClusterParameterGroupsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBClusterParameterGroupsInput");
        formatter.field(
            "db_cluster_parameter_group_name",
            &self.db_cluster_parameter_group_name,
        );
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBClusterEndpointsInput {
    /// <p>The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is
    /// stored as a lowercase string.</p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The identifier of the endpoint to describe. This parameter is stored as a lowercase string.</p>
    pub db_cluster_endpoint_identifier: std::option::Option<std::string::String>,
    /// <p>A set of name-value pairs that define which endpoints to include in the output.
    /// The filters are specified as name-value pairs, in the format
    /// <code>Name=<i>endpoint_type</i>,Values=<i>endpoint_type1</i>,<i>endpoint_type2</i>,...</code>.
    /// <code>Name</code> can be one of: <code>db-cluster-endpoint-type</code>, <code>db-cluster-endpoint-custom-type</code>, <code>db-cluster-endpoint-id</code>, <code>db-cluster-endpoint-status</code>.
    /// <code>Values</code> for the <code> db-cluster-endpoint-type</code> filter can be one or more of: <code>reader</code>, <code>writer</code>, <code>custom</code>.
    /// <code>Values</code> for the <code>db-cluster-endpoint-custom-type</code> filter can be one or more of: <code>reader</code>, <code>any</code>.
    /// <code>Values</code> for the <code>db-cluster-endpoint-status</code> filter can be one or more of: <code>available</code>, <code>creating</code>, <code>deleting</code>, <code>inactive</code>, <code>modifying</code>.
    /// </p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p> An optional pagination token provided by a previous
    /// <code>DescribeDBClusterEndpoints</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBClusterEndpointsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBClusterEndpointsInput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field(
            "db_cluster_endpoint_identifier",
            &self.db_cluster_endpoint_identifier,
        );
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeDBClusterBacktracksInput {
    /// <p>The DB cluster identifier of the DB cluster to be described. This parameter is
    /// stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code>
    /// </p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>If specified, this value is the backtrack identifier of the backtrack to be
    /// described.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain a valid universally unique identifier (UUID). For more
    /// information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier
    /// (UUID) URN Namespace</a>.</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code>
    /// </p>
    pub backtrack_identifier: std::option::Option<std::string::String>,
    /// <p>A filter that specifies one or more DB clusters to describe. Supported filters
    /// include the following:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The
    /// results list includes information about only the backtracks identified by these
    /// identifiers.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>applying</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>completed</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>failed</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>pending</code>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>The results list includes information about only the backtracks identified
    /// by these values.</p>
    /// </li>
    /// </ul>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p> An optional pagination token provided by a previous
    /// <code>DescribeDBClusterBacktracks</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeDBClusterBacktracksInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeDBClusterBacktracksInput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field("backtrack_identifier", &self.backtrack_identifier);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCustomAvailabilityZonesInput {
    /// <p>The custom AZ identifier. If this parameter is specified, information from only the specific custom AZ is returned.</p>
    pub custom_availability_zone_id: std::option::Option<std::string::String>,
    /// <p>A filter that specifies one or more custom AZs to describe.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>An optional pagination token provided by a previous
    /// <code>DescribeCustomAvailabilityZones</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeCustomAvailabilityZonesInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCustomAvailabilityZonesInput");
        formatter.field(
            "custom_availability_zone_id",
            &self.custom_availability_zone_id,
        );
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeCertificatesInput {
    /// <p>The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match an existing CertificateIdentifier.</p>
    /// </li>
    /// </ul>
    pub certificate_identifier: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    pub filters: std::option::Option<std::vec::Vec<crate::model::Filter>>,
    /// <p>
    /// The maximum number of records to include in the response.
    /// If more records exist than the specified <code>MaxRecords</code> value,
    /// a pagination token called a marker is included in the response so you can retrieve the remaining results.
    /// </p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub max_records: std::option::Option<i32>,
    /// <p>
    /// An optional pagination token provided by a previous
    /// <code>DescribeCertificates</code> request.
    /// If this parameter is specified, the response includes
    /// only records beyond the marker,
    /// up to the value specified by <code>MaxRecords</code>.
    /// </p>
    pub marker: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DescribeCertificatesInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeCertificatesInput");
        formatter.field("certificate_identifier", &self.certificate_identifier);
        formatter.field("filters", &self.filters);
        formatter.field("max_records", &self.max_records);
        formatter.field("marker", &self.marker);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DescribeAccountAttributesInput {}
impl std::fmt::Debug for DescribeAccountAttributesInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DescribeAccountAttributesInput");
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeregisterDBProxyTargetsInput {
    /// <p>The identifier of the <code>DBProxy</code> that is associated with the <code>DBProxyTargetGroup</code>.</p>
    pub db_proxy_name: std::option::Option<std::string::String>,
    /// <p>The identifier of the <code>DBProxyTargetGroup</code>.</p>
    pub target_group_name: std::option::Option<std::string::String>,
    /// <p>One or more DB instance identifiers.</p>
    pub db_instance_identifiers: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>One or more DB cluster identifiers.</p>
    pub db_cluster_identifiers: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl std::fmt::Debug for DeregisterDBProxyTargetsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeregisterDBProxyTargetsInput");
        formatter.field("db_proxy_name", &self.db_proxy_name);
        formatter.field("target_group_name", &self.target_group_name);
        formatter.field("db_instance_identifiers", &self.db_instance_identifiers);
        formatter.field("db_cluster_identifiers", &self.db_cluster_identifiers);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteOptionGroupInput {
    /// <p>The name of the option group to be deleted.</p>
    /// <note>
    /// <p>You can't delete default option groups.</p>
    /// </note>
    pub option_group_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteOptionGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteOptionGroupInput");
        formatter.field("option_group_name", &self.option_group_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteInstallationMediaInput {
    /// <p>The installation medium ID.</p>
    pub installation_media_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteInstallationMediaInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteInstallationMediaInput");
        formatter.field("installation_media_id", &self.installation_media_id);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteGlobalClusterInput {
    /// <p>
    /// The cluster identifier of the global database cluster being deleted.
    /// </p>
    pub global_cluster_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteGlobalClusterInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteGlobalClusterInput");
        formatter.field("global_cluster_identifier", &self.global_cluster_identifier);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteEventSubscriptionInput {
    /// <p>The name of the RDS event notification subscription you want to delete.</p>
    pub subscription_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteEventSubscriptionInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteEventSubscriptionInput");
        formatter.field("subscription_name", &self.subscription_name);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBSubnetGroupInput {
    /// <p>The name of the database subnet group to delete.</p>
    /// <note>
    /// <p>You can't delete the default subnet group.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p>
    /// <p>Example: <code>mySubnetgroup</code>
    /// </p>
    pub db_subnet_group_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteDBSubnetGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBSubnetGroupInput");
        formatter.field("db_subnet_group_name", &self.db_subnet_group_name);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBSnapshotInput {
    /// <p>The DB snapshot identifier.</p>
    /// <p>Constraints: Must be the name of an existing DB snapshot in the <code>available</code> state.</p>
    pub db_snapshot_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteDBSnapshotInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBSnapshotInput");
        formatter.field("db_snapshot_identifier", &self.db_snapshot_identifier);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBSecurityGroupInput {
    /// <p>The name of the DB security group to delete.</p>
    /// <note>
    /// <p>You can't delete the default DB security group.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// <li>
    /// <p>Must not be "Default"</p>
    /// </li>
    /// </ul>
    pub db_security_group_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteDBSecurityGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBSecurityGroupInput");
        formatter.field("db_security_group_name", &self.db_security_group_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBProxyEndpointInput {
    /// <p>The name of the DB proxy endpoint to delete.</p>
    pub db_proxy_endpoint_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteDBProxyEndpointInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBProxyEndpointInput");
        formatter.field("db_proxy_endpoint_name", &self.db_proxy_endpoint_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBProxyInput {
    /// <p>The name of the DB proxy to delete.</p>
    pub db_proxy_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteDBProxyInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBProxyInput");
        formatter.field("db_proxy_name", &self.db_proxy_name);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBParameterGroupInput {
    /// <p>The name of the DB parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be the name of an existing DB parameter group</p>
    /// </li>
    /// <li>
    /// <p>You can't delete a default DB parameter group</p>
    /// </li>
    /// <li>
    /// <p>Can't be associated with any DB instances</p>
    /// </li>
    /// </ul>
    pub db_parameter_group_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteDBParameterGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBParameterGroupInput");
        formatter.field("db_parameter_group_name", &self.db_parameter_group_name);
        formatter.finish()
    }
}

/// <p>Parameter input for the <code>DeleteDBInstanceAutomatedBackup</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBInstanceAutomatedBackupInput {
    /// <p>The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.</p>
    pub dbi_resource_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the automated backups to delete, for example,
    /// <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
    pub db_instance_automated_backups_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteDBInstanceAutomatedBackupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBInstanceAutomatedBackupInput");
        formatter.field("dbi_resource_id", &self.dbi_resource_id);
        formatter.field(
            "db_instance_automated_backups_arn",
            &self.db_instance_automated_backups_arn,
        );
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBInstanceInput {
    /// <p>The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the name of an existing DB instance.</p>
    /// </li>
    /// </ul>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to skip the creation of a final DB snapshot before the DB instance is deleted.
    /// If skip is specified, no DB snapshot is created. If skip isn't specified, a DB snapshot
    /// is created before the DB instance is deleted. By default, skip isn't specified, and the DB snapshot is created.</p>
    /// <p>When a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when skip is specified.</p>
    /// <p>Specify skip when deleting a read replica.</p>
    /// <note>
    /// <p>The FinalDBSnapshotIdentifier parameter must be specified if skip isn't specified.</p>
    /// </note>
    pub skip_final_snapshot: bool,
    /// <p>
    /// The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code>
    /// parameter is disabled.
    /// </p>
    /// <note>
    /// <p>Specifying this parameter and also specifying to skip final DB snapshot creation in SkipFinalShapshot results in an error.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 255 letters or numbers.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    /// </li>
    /// <li>
    /// <p>Can't be specified when deleting a read replica.</p>
    /// </li>
    /// </ul>
    pub final_db_snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to remove automated backups immediately after the DB
    /// instance is deleted. This parameter isn't case-sensitive. The default is to remove
    /// automated backups immediately after the DB instance is deleted.</p>
    pub delete_automated_backups: std::option::Option<bool>,
}
impl std::fmt::Debug for DeleteDBInstanceInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBInstanceInput");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("skip_final_snapshot", &self.skip_final_snapshot);
        formatter.field(
            "final_db_snapshot_identifier",
            &self.final_db_snapshot_identifier,
        );
        formatter.field("delete_automated_backups", &self.delete_automated_backups);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBClusterSnapshotInput {
    /// <p>The identifier of the DB cluster snapshot to delete.</p>
    /// <p>Constraints: Must be the name of an existing DB cluster snapshot in the <code>available</code> state.</p>
    pub db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteDBClusterSnapshotInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBClusterSnapshotInput");
        formatter.field(
            "db_cluster_snapshot_identifier",
            &self.db_cluster_snapshot_identifier,
        );
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBClusterParameterGroupInput {
    /// <p>The name of the DB cluster parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be the name of an existing DB cluster parameter group.</p>
    /// </li>
    /// <li>
    /// <p>You can't delete a default DB cluster parameter group.</p>
    /// </li>
    /// <li>
    /// <p>Can't be associated with any DB clusters.</p>
    /// </li>
    /// </ul>
    pub db_cluster_parameter_group_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteDBClusterParameterGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBClusterParameterGroupInput");
        formatter.field(
            "db_cluster_parameter_group_name",
            &self.db_cluster_parameter_group_name,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBClusterEndpointInput {
    /// <p>The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.</p>
    pub db_cluster_endpoint_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteDBClusterEndpointInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBClusterEndpointInput");
        formatter.field(
            "db_cluster_endpoint_identifier",
            &self.db_cluster_endpoint_identifier,
        );
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteDBClusterInput {
    /// <p>The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match an existing DBClusterIdentifier.</p>
    /// </li>
    /// </ul>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to skip the creation of a final DB cluster snapshot before the DB cluster is deleted.
    /// If skip is specified, no DB cluster snapshot is created. If skip isn't specified, a DB cluster snapshot
    /// is created before the DB cluster is deleted. By default, skip isn't specified, and the DB cluster snapshot is created.
    /// By default, this parameter is disabled.</p>
    /// <note>
    /// <p>You must specify a <code>FinalDBSnapshotIdentifier</code> parameter if <code>SkipFinalSnapshot</code> is disabled.</p>
    /// </note>
    pub skip_final_snapshot: bool,
    /// <p>
    /// The DB cluster snapshot identifier of the new DB cluster snapshot created when <code>SkipFinalSnapshot</code>
    /// is disabled.
    /// </p>
    /// <note>
    /// <p>
    /// Specifying this parameter and also skipping the creation of a final DB cluster snapshot
    /// with the <code>SkipFinalShapshot</code> parameter results in an error.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    pub final_db_snapshot_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteDBClusterInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteDBClusterInput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field("skip_final_snapshot", &self.skip_final_snapshot);
        formatter.field(
            "final_db_snapshot_identifier",
            &self.final_db_snapshot_identifier,
        );
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteCustomAvailabilityZoneInput {
    /// <p>The custom AZ identifier.</p>
    pub custom_availability_zone_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteCustomAvailabilityZoneInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteCustomAvailabilityZoneInput");
        formatter.field(
            "custom_availability_zone_id",
            &self.custom_availability_zone_id,
        );
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateOptionGroupInput {
    /// <p>Specifies the name of the option group to be created.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>myoptiongroup</code>
    /// </p>
    pub option_group_name: std::option::Option<std::string::String>,
    /// <p>Specifies the name of the engine that this option group should be associated with.</p>
    /// <p>Valid Values:
    /// </p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>mariadb</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>mysql</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se2</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se1</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>postgres</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ex</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-web</code>
    /// </p>
    /// </li>
    /// </ul>
    pub engine_name: std::option::Option<std::string::String>,
    /// <p>Specifies the major version of the engine that this option group should be associated with.</p>
    pub major_engine_version: std::option::Option<std::string::String>,
    /// <p>The description of the option group.</p>
    pub option_group_description: std::option::Option<std::string::String>,
    /// <p>Tags to assign to the option group.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CreateOptionGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateOptionGroupInput");
        formatter.field("option_group_name", &self.option_group_name);
        formatter.field("engine_name", &self.engine_name);
        formatter.field("major_engine_version", &self.major_engine_version);
        formatter.field("option_group_description", &self.option_group_description);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGlobalClusterInput {
    /// <p>The cluster identifier of the new global database cluster.</p>
    pub global_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>
    /// The Amazon Resource Name (ARN) to use as the primary cluster of the global database.
    /// This parameter is optional.
    /// </p>
    pub source_db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The name of the database engine to be used for this DB cluster.</p>
    pub engine: std::option::Option<std::string::String>,
    /// <p>The engine version of the Aurora global database.</p>
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>
    /// The deletion protection setting for the new global database.
    /// The global database can't be deleted when deletion protection is enabled.
    /// </p>
    pub deletion_protection: std::option::Option<bool>,
    /// <p>
    /// The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon
    /// Aurora will not create a database in the global database cluster you are creating.
    /// </p>
    pub database_name: std::option::Option<std::string::String>,
    /// <p>
    /// The storage encryption setting for the new global database cluster.
    /// </p>
    pub storage_encrypted: std::option::Option<bool>,
}
impl std::fmt::Debug for CreateGlobalClusterInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGlobalClusterInput");
        formatter.field("global_cluster_identifier", &self.global_cluster_identifier);
        formatter.field(
            "source_db_cluster_identifier",
            &self.source_db_cluster_identifier,
        );
        formatter.field("engine", &self.engine);
        formatter.field("engine_version", &self.engine_version);
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("database_name", &self.database_name);
        formatter.field("storage_encrypted", &self.storage_encrypted);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateEventSubscriptionInput {
    /// <p>The name of the subscription.</p>
    /// <p>Constraints: The name must be less than 255 characters.</p>
    pub subscription_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.</p>
    pub sns_topic_arn: std::option::Option<std::string::String>,
    /// <p>The type of source that is generating the events. For example, if you want to be
    /// notified of events generated by a DB instance, you set this parameter to
    /// <code>db-instance</code>. If this value isn't specified, all events are
    /// returned.</p>
    /// <p>Valid values: <code>db-instance</code> | <code>db-cluster</code> | <code>db-parameter-group</code> | <code>db-security-group</code> | <code>db-snapshot</code> | <code>db-cluster-snapshot</code>
    /// </p>
    pub source_type: std::option::Option<std::string::String>,
    /// <p> A list of event categories for a particular source type (<code>SourceType</code>)
    /// that you want to subscribe to. You can see a list of the categories for a given source
    /// type in <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Events.html">Events</a> in the
    /// <i>Amazon RDS User Guide</i> or by using the <code>DescribeEventCategories</code> operation. </p>
    pub event_categories: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response.
    /// An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens. It can't end with a hyphen or contain two consecutive hyphens.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If <code>SourceIds</code> are supplied, <code>SourceType</code> must also be provided.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB instance, a <code>DBInstanceIdentifier</code> value must be supplied.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB cluster, a <code>DBClusterIdentifier</code> value must be supplied.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> value must be supplied.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> value must be supplied.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> value must be supplied.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB cluster snapshot, a <code>DBClusterSnapshotIdentifier</code> value must be supplied.</p>
    /// </li>
    /// </ul>
    pub source_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>
    /// A value that indicates whether to activate the subscription. If the event notification subscription isn't activated, the subscription is created but not active.
    /// </p>
    pub enabled: std::option::Option<bool>,
    /// <p>A list of tags.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>           
    /// </p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CreateEventSubscriptionInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateEventSubscriptionInput");
        formatter.field("subscription_name", &self.subscription_name);
        formatter.field("sns_topic_arn", &self.sns_topic_arn);
        formatter.field("source_type", &self.source_type);
        formatter.field("event_categories", &self.event_categories);
        formatter.field("source_ids", &self.source_ids);
        formatter.field("enabled", &self.enabled);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBSubnetGroupInput {
    /// <p>The name for the DB subnet group. This value is stored as a lowercase string.</p>
    /// <p>Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default.</p>
    /// <p>Example: <code>mySubnetgroup</code>
    /// </p>
    pub db_subnet_group_name: std::option::Option<std::string::String>,
    /// <p>The description for the DB subnet group.</p>
    pub db_subnet_group_description: std::option::Option<std::string::String>,
    /// <p>The EC2 Subnet IDs for the DB subnet group.</p>
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Tags to assign to the DB subnet group.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CreateDBSubnetGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBSubnetGroupInput");
        formatter.field("db_subnet_group_name", &self.db_subnet_group_name);
        formatter.field(
            "db_subnet_group_description",
            &self.db_subnet_group_description,
        );
        formatter.field("subnet_ids", &self.subnet_ids);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBSnapshotInput {
    /// <p>The identifier for the DB snapshot.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be null, empty, or blank</p>
    /// </li>
    /// <li>
    /// <p>Must contain from 1 to 255 letters, numbers, or hyphens</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-snapshot-id</code>
    /// </p>
    pub db_snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>The identifier of the DB instance that you want to create the snapshot of.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DBInstance.</p>
    /// </li>
    /// </ul>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>A list of tags.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>           
    /// </p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CreateDBSnapshotInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBSnapshotInput");
        formatter.field("db_snapshot_identifier", &self.db_snapshot_identifier);
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBSecurityGroupInput {
    /// <p>The name for the DB security group. This value is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// <li>
    /// <p>Must not be "Default"</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>mysecuritygroup</code>
    /// </p>
    pub db_security_group_name: std::option::Option<std::string::String>,
    /// <p>The description for the DB security group.</p>
    pub db_security_group_description: std::option::Option<std::string::String>,
    /// <p>Tags to assign to the DB security group.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CreateDBSecurityGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBSecurityGroupInput");
        formatter.field("db_security_group_name", &self.db_security_group_name);
        formatter.field(
            "db_security_group_description",
            &self.db_security_group_description,
        );
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBProxyEndpointInput {
    /// <p>The name of the DB proxy associated with the DB proxy endpoint that you create.</p>
    pub db_proxy_name: std::option::Option<std::string::String>,
    /// <p>The name of the DB proxy endpoint to create.</p>
    pub db_proxy_endpoint_name: std::option::Option<std::string::String>,
    /// <p>The VPC subnet IDs for the DB proxy endpoint that you create. You can specify a
    /// different set of subnet IDs than for the original DB proxy.</p>
    pub vpc_subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The VPC security group IDs for the DB proxy endpoint that you create. You can
    /// specify a different set of security group IDs than for the original DB proxy.
    /// The default is the default security group for the VPC.</p>
    pub vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A value that indicates whether the DB proxy endpoint can be used for read/write
    /// or read-only operations. The default is <code>READ_WRITE</code>.</p>
    pub target_role: std::option::Option<crate::model::DbProxyEndpointTargetRole>,
    /// <p>A list of tags.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>           
    /// </p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CreateDBProxyEndpointInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBProxyEndpointInput");
        formatter.field("db_proxy_name", &self.db_proxy_name);
        formatter.field("db_proxy_endpoint_name", &self.db_proxy_endpoint_name);
        formatter.field("vpc_subnet_ids", &self.vpc_subnet_ids);
        formatter.field("vpc_security_group_ids", &self.vpc_security_group_ids);
        formatter.field("target_role", &self.target_role);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBProxyInput {
    /// <p>The identifier for the proxy. This name must be unique for all proxies owned by your AWS account in the specified AWS Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
    pub db_proxy_name: std::option::Option<std::string::String>,
    /// <p>The kinds of databases that the proxy can connect to.
    /// This value determines which database network protocol the proxy recognizes when it interprets
    /// network traffic to and from the database.
    /// The engine family applies to MySQL and PostgreSQL for both RDS and Aurora.</p>
    pub engine_family: std::option::Option<crate::model::EngineFamily>,
    /// <p>The authorization mechanism that the proxy uses.</p>
    pub auth: std::option::Option<std::vec::Vec<crate::model::UserAuthConfig>>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in AWS Secrets Manager.</p>
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>One or more VPC subnet IDs to associate with the new proxy.</p>
    pub vpc_subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>One or more VPC security group IDs to associate with the new proxy.</p>
    pub vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy.
    /// By enabling this setting, you can enforce encrypted TLS connections to the proxy.</p>
    pub require_tls: bool,
    /// <p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this
    /// value higher or lower than the connection timeout limit for the associated database.</p>
    pub idle_client_timeout: std::option::Option<i32>,
    /// <p>Whether the proxy includes detailed information about SQL statements in its logs.
    /// This information helps you to debug issues involving SQL behavior or the performance
    /// and scalability of the proxy connections. The debug information includes the text of
    /// SQL statements that you submit through the proxy. Thus, only enable this setting
    /// when needed for debugging, and only when you have security measures in place to
    /// safeguard any sensitive information that appears in the logs.</p>
    pub debug_logging: bool,
    /// <p>An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CreateDBProxyInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBProxyInput");
        formatter.field("db_proxy_name", &self.db_proxy_name);
        formatter.field("engine_family", &self.engine_family);
        formatter.field("auth", &self.auth);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("vpc_subnet_ids", &self.vpc_subnet_ids);
        formatter.field("vpc_security_group_ids", &self.vpc_security_group_ids);
        formatter.field("require_tls", &self.require_tls);
        formatter.field("idle_client_timeout", &self.idle_client_timeout);
        formatter.field("debug_logging", &self.debug_logging);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBParameterGroupInput {
    /// <p>The name of the DB parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>This value is stored as a lowercase string.</p>
    /// </note>
    pub db_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family.</p>
    /// <p>To list all of the available parameter group families for a DB engine, use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine <engine></code>
    /// </p>
    /// <p>For example, to list all of the available parameter group families for the MySQL DB engine, use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine mysql</code>
    /// </p>
    /// <note>
    /// <p>The output contains duplicates.</p>
    /// </note>
    /// <p>The following are the valid DB engine values:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>aurora-postgresql</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>mariadb</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>mysql</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se2</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se1</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>postgres</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ex</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-web</code>
    /// </p>
    /// </li>
    /// </ul>
    pub db_parameter_group_family: std::option::Option<std::string::String>,
    /// <p>The description for the DB parameter group.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>Tags to assign to the DB parameter group.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CreateDBParameterGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBParameterGroupInput");
        formatter.field("db_parameter_group_name", &self.db_parameter_group_name);
        formatter.field("db_parameter_group_family", &self.db_parameter_group_family);
        formatter.field("description", &self.description);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBInstanceReadReplicaInput {
    /// <p>The DB instance identifier of the read replica. This identifier is the unique key
    /// that identifies a DB instance. This parameter is stored as a lowercase string.</p>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>The identifier of the DB instance that will act as the source for the read replica.
    /// Each DB instance can have up to five read replicas.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be the identifier of an existing MySQL, MariaDB, Oracle, PostgreSQL, or SQL Server DB
    /// instance.</p>
    /// </li>
    /// <li>
    /// <p>Can specify a DB instance that is a MySQL read replica only if the source is running MySQL
    /// 5.6 or later.</p>
    /// </li>
    /// <li>
    /// <p>For the limitations of Oracle read replicas, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Read Replica Limitations with Oracle</a> in the
    /// <i>Amazon RDS User Guide</i>.</p>
    /// </li>
    /// <li>
    /// <p>For the limitations of SQL Server read replicas, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/SQLServer.ReadReplicas.Limitations.html">Read Replica
    /// Limitations with Microsoft SQL Server</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </li>
    /// <li>
    /// <p>Can specify a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or
    /// later (9.4.7 and higher for cross-region replication).</p>
    /// </li>
    /// <li>
    /// <p>The specified DB instance must have automatic backups enabled, that is, its backup
    /// retention period must be greater than 0.</p>
    /// </li>
    /// <li>
    /// <p>If the source DB instance is in the same AWS Region as the read replica, specify a valid DB
    /// instance identifier.</p>
    /// </li>
    /// <li>
    /// <p>If the source DB instance is in a different AWS Region from the read replica, specify a valid DB instance ARN.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">Constructing an ARN for Amazon RDS</a>
    /// in the <i>Amazon RDS User Guide</i>. This doesn't apply to SQL Server, which doesn't support cross-region replicas.</p>
    /// </li>
    /// </ul>
    pub source_db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>The compute and memory capacity of the read replica, for example,
    /// <code>db.m4.large</code>. Not all DB instance classes are available in all AWS
    /// Regions, or for all database engines. For the full list of DB instance classes, and
    /// availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance
    /// Class</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>Default: Inherits from the source DB instance.</p>
    pub db_instance_class: std::option::Option<std::string::String>,
    /// <p>The Availability Zone (AZ) where the read replica will be created.</p>
    /// <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p>
    /// <p>
    /// Example: <code>us-east-1d</code>
    /// </p>
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>The port number that the DB instance uses for connections.</p>
    /// <p>Default: Inherits from the source DB instance</p>
    /// <p>Valid Values: <code>1150-65535</code>
    /// </p>
    pub port: std::option::Option<i32>,
    /// <p>A value that indicates whether the read replica is in a Multi-AZ deployment. </p>
    /// <p>You can create a read replica as a Multi-AZ DB instance. RDS creates a standby of
    /// your replica in another Availability Zone for failover support for the replica. Creating
    /// your read replica as a Multi-AZ DB instance is independent of whether the source
    /// database is a Multi-AZ DB instance. </p>
    pub multi_az: std::option::Option<bool>,
    /// <p>A value that indicates whether minor engine upgrades are applied automatically to the
    /// read replica during the maintenance window.</p>
    /// <p>Default: Inherits from the source DB instance</p>
    pub auto_minor_version_upgrade: std::option::Option<bool>,
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.</p>
    pub iops: std::option::Option<i32>,
    /// <p>The option group the DB instance is associated with. If omitted, the option group associated with the source instance is used.</p>
    /// <note>
    /// <p>For SQL Server, you must use the option group associated with the source
    /// instance.</p>
    /// </note>
    pub option_group_name: std::option::Option<std::string::String>,
    /// <p>The name of the DB parameter group to associate with this DB instance.</p>
    /// <p>If you do not specify a value for <code>DBParameterGroupName</code>, then Amazon RDS
    /// uses the <code>DBParameterGroup</code> of source DB instance for a same region read
    /// replica, or the default <code>DBParameterGroup</code> for the specified DB engine for a
    /// cross region read replica.</p>
    /// <note>
    /// <p>Currently, specifying a parameter group for this operation is only supported for Oracle DB instances.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    pub db_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether the DB instance is publicly accessible.</p>
    /// <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC,
    /// and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses,
    /// and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>  
    /// <p>For more information, see <a>CreateDBInstance</a>.</p>
    pub publicly_accessible: std::option::Option<bool>,
    /// <p>A list of tags.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>           
    /// </p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance isn't created in a VPC.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.</p>
    /// </li>
    /// <li>
    /// <p>If supplied, must match the name of an existing DBSubnetGroup.</p>
    /// </li>
    /// <li>
    /// <p>The specified DB subnet group must be in the same AWS Region in which the operation is running.</p>
    /// </li>
    /// <li>
    /// <p>All read replicas in one AWS Region that are created from the same source DB
    /// instance must either:></p>
    /// <ul>
    /// <li>
    /// <p>Specify DB subnet groups from the same VPC. All these read replicas are created in the same
    /// VPC.</p>
    /// </li>
    /// <li>
    /// <p>Not specify a DB subnet group. All these read replicas are created outside of any
    /// VPC.</p>
    /// </li>
    /// </ul>
    /// </li>
    /// </ul>
    /// <p>Example: <code>mySubnetgroup</code>
    /// </p>
    pub db_subnet_group_name: std::option::Option<std::string::String>,
    /// <p> A list of EC2 VPC security groups to associate with the read replica. </p>
    /// <p>
    /// Default: The default EC2 VPC security group for the DB subnet group's VPC.
    /// </p>
    pub vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies the storage type to be associated with the read replica.</p>
    /// <p>
    /// Valid values: <code>standard | gp2 | io1</code>
    /// </p>
    /// <p>
    /// If you specify <code>io1</code>, you must also include a value for the
    /// <code>Iops</code> parameter.
    /// </p>
    /// <p>
    /// Default: <code>io1</code> if the <code>Iops</code> parameter
    /// is specified, otherwise <code>gp2</code>
    /// </p>
    pub storage_type: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to copy all tags from the read replica to snapshots of
    /// the read replica. By default, tags are not copied.</p>
    pub copy_tags_to_snapshot: std::option::Option<bool>,
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are
    /// collected for the read replica. To disable collecting Enhanced Monitoring metrics,
    /// specify 0. The default is 0.</p>
    /// <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code>
    /// to a value other than 0.</p>
    /// <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code>
    /// </p>
    pub monitoring_interval: std::option::Option<i32>,
    /// <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For
    /// example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role,
    /// go to <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.html#USER_Monitoring.OS.IAMRole">To
    /// create an IAM role for Amazon RDS Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
    pub monitoring_role_arn: std::option::Option<std::string::String>,
    /// <p>The AWS KMS key identifier for an encrypted read replica.</p>
    /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS CMK.</p>
    /// <p>If you create an encrypted read replica in the same AWS Region as the source DB
    /// instance, then do not specify a value for this parameter. A read replica in the same Region
    /// is always encrypted with the same AWS KMS CMK as the source DB instance.</p>       
    /// <p>If you create an encrypted read replica in a different AWS Region, then you must
    /// specify a AWS KMS key identifier for the destination AWS Region. AWS KMS CMKs are specific to
    /// the AWS Region that they are created in, and you can't use CMKs from one
    /// AWS Region in another AWS Region.</p>       
    /// <p>You can't create an encrypted read replica from an unencrypted DB instance.</p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The URL that contains a Signature Version 4 signed request for the <code>CreateDBInstanceReadReplica</code> API action
    /// in the source AWS Region that contains the source DB instance.
    /// </p>
    /// <p>You must specify this parameter when you create an encrypted read replica from
    /// another AWS Region by using the Amazon RDS API. Don't specify
    /// <code>PreSignedUrl</code> when you are creating an encrypted read replica in the
    /// same AWS Region.</p>
    /// <p>The presigned URL must be a valid request for the <code>CreateDBInstanceReadReplica</code> API action
    /// that can be executed in the source AWS Region that contains the encrypted source DB instance.
    /// The presigned URL request must contain the following parameter values:
    /// </p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>DestinationRegion</code> - The AWS Region that the encrypted read
    /// replica is created in. This AWS Region is the same one where the
    /// <code>CreateDBInstanceReadReplica</code> action is called that contains this presigned URL.</p>
    /// <p>For example, if you create an encrypted DB instance in the us-west-1 AWS Region,
    /// from a source DB instance in the us-east-2 AWS Region,
    /// then you call the <code>CreateDBInstanceReadReplica</code> action in
    /// the us-east-1 AWS Region and provide a presigned URL that contains a call to the
    /// <code>CreateDBInstanceReadReplica</code> action in the us-west-2 AWS Region. For this
    /// example, the <code>DestinationRegion</code> in the presigned URL must be set to
    /// the us-east-1 AWS Region.
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to
    /// encrypt the read replica in the destination AWS Region. This is the same
    /// identifier for both the <code>CreateDBInstanceReadReplica</code> action that is
    /// called in the destination AWS Region, and the action contained in the presigned
    /// URL. </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SourceDBInstanceIdentifier</code> - The DB instance identifier for
    /// the encrypted DB instance to be replicated. This identifier must be in the
    /// Amazon Resource Name (ARN) format for the source AWS Region. For example, if you
    /// are creating an encrypted read replica from a DB instance in the us-west-2 AWS
    /// Region, then your <code>SourceDBInstanceIdentifier</code> looks like the
    /// following example:
    /// <code>arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115</code>. </p>
    /// </li>
    /// </ul>
    /// <p>To learn how to generate a Signature Version 4 signed request, see
    /// <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and
    /// <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>.
    /// </p>
    /// <note>
    /// <p>If you are using an AWS SDK tool or the AWS CLI, you can specify
    /// <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI)
    /// instead of specifying <code>PreSignedUrl</code> manually. Specifying
    /// <code>SourceRegion</code> autogenerates a presigned URL that is a valid request
    /// for the operation that can be executed in the source AWS Region.</p>
    /// <p>
    /// <code>SourceRegion</code> isn't supported for SQL Server, because SQL Server on Amazon RDS
    /// doesn't support cross-region read replicas.</p>
    /// </note>
    pub pre_signed_url: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
    /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
    /// <p>For more information about IAM database authentication, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
    /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    pub enable_iam_database_authentication: std::option::Option<bool>,
    /// <p>A value that indicates whether to enable Performance Insights for the read replica. </p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using
    /// Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.
    /// </p>
    pub enable_performance_insights: std::option::Option<bool>,
    /// <p>The AWS KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).</p>
    /// <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS
    /// uses your default CMK. There is a default CMK for your AWS account.
    /// Your AWS account has a different default CMK for each AWS Region.</p>
    pub performance_insights_kms_key_id: std::option::Option<std::string::String>,
    /// <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). </p>
    pub performance_insights_retention_period: std::option::Option<i32>,
    /// <p>The list of logs that the new DB instance is to export to CloudWatch Logs. The values
    /// in the list depend on the DB engine being used. For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing
    /// Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon RDS User Guide</i>.</p>
    pub enable_cloudwatch_logs_exports: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub processor_features: std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
    /// <p>A value that indicates whether the DB instance class of the DB instance uses its default
    /// processor features.</p>
    pub use_default_processor_features: std::option::Option<bool>,
    /// <p>A value that indicates whether the DB instance has deletion protection enabled.
    /// The database can't be deleted when deletion protection is enabled. By default,
    /// deletion protection is disabled. For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
    /// Deleting a DB Instance</a>.
    /// </p>
    pub deletion_protection: std::option::Option<bool>,
    /// <p>The Active Directory directory ID to create the DB instance in. Currently, only MySQL, Microsoft SQL
    /// Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
    /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub domain: std::option::Option<std::string::String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: std::option::Option<std::string::String>,
    /// <p>The open mode of the replica database: mounted or read-only.</p>
    /// <note>
    /// <p>This parameter is only supported for Oracle DB instances.</p>
    /// </note>
    /// <p>Mounted DB replicas are included in Oracle Enterprise Edition. The main use case for
    /// mounted replicas is cross-Region disaster recovery. The primary database doesn't use Active
    /// Data Guard to transmit information to the mounted replica. Because it doesn't accept
    /// user connections, a mounted replica can't serve a read-only workload.</p>
    /// <p>You can create a combination of mounted and read-only DB replicas for the same primary DB instance.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/oracle-read-replicas.html">Working with Oracle Read Replicas for Amazon RDS</a>
    /// in the <i>Amazon RDS User Guide</i>.</p>
    pub replica_mode: std::option::Option<crate::model::ReplicaMode>,
    /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    /// <p>For more information about this setting, including limitations that apply to it, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
    /// Managing capacity automatically with Amazon RDS storage autoscaling</a>
    /// in the <i>Amazon RDS User Guide</i>.</p>
    pub max_allocated_storage: std::option::Option<i32>,
}
impl std::fmt::Debug for CreateDBInstanceReadReplicaInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBInstanceReadReplicaInput");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field(
            "source_db_instance_identifier",
            &self.source_db_instance_identifier,
        );
        formatter.field("db_instance_class", &self.db_instance_class);
        formatter.field("availability_zone", &self.availability_zone);
        formatter.field("port", &self.port);
        formatter.field("multi_az", &self.multi_az);
        formatter.field(
            "auto_minor_version_upgrade",
            &self.auto_minor_version_upgrade,
        );
        formatter.field("iops", &self.iops);
        formatter.field("option_group_name", &self.option_group_name);
        formatter.field("db_parameter_group_name", &self.db_parameter_group_name);
        formatter.field("publicly_accessible", &self.publicly_accessible);
        formatter.field("tags", &self.tags);
        formatter.field("db_subnet_group_name", &self.db_subnet_group_name);
        formatter.field("vpc_security_group_ids", &self.vpc_security_group_ids);
        formatter.field("storage_type", &self.storage_type);
        formatter.field("copy_tags_to_snapshot", &self.copy_tags_to_snapshot);
        formatter.field("monitoring_interval", &self.monitoring_interval);
        formatter.field("monitoring_role_arn", &self.monitoring_role_arn);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("pre_signed_url", &self.pre_signed_url);
        formatter.field(
            "enable_iam_database_authentication",
            &self.enable_iam_database_authentication,
        );
        formatter.field(
            "enable_performance_insights",
            &self.enable_performance_insights,
        );
        formatter.field(
            "performance_insights_kms_key_id",
            &self.performance_insights_kms_key_id,
        );
        formatter.field(
            "performance_insights_retention_period",
            &self.performance_insights_retention_period,
        );
        formatter.field(
            "enable_cloudwatch_logs_exports",
            &self.enable_cloudwatch_logs_exports,
        );
        formatter.field("processor_features", &self.processor_features);
        formatter.field(
            "use_default_processor_features",
            &self.use_default_processor_features,
        );
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("domain", &self.domain);
        formatter.field("domain_iam_role_name", &self.domain_iam_role_name);
        formatter.field("replica_mode", &self.replica_mode);
        formatter.field("max_allocated_storage", &self.max_allocated_storage);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBInstanceInput {
    /// <p>The meaning of this parameter differs according to the database engine you use.</p>
    /// <p>
    /// <b>MySQL</b>
    /// </p>
    /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 64 letters or numbers.</p>
    /// </li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p>
    /// </li>
    /// <li>
    /// <p>Can't be a word reserved by the specified database engine</p>
    /// </li>
    /// </ul>
    /// <p>
    /// <b>MariaDB</b>
    /// </p>
    /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 64 letters or numbers.</p>
    /// </li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p>
    /// </li>
    /// <li>
    /// <p>Can't be a word reserved by the specified database engine</p>
    /// </li>
    /// </ul>
    /// <p>
    /// <b>PostgreSQL</b>
    /// </p>
    /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, a database named <code>postgres</code>
    /// is created in the DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 63 letters, numbers, or underscores.</p>
    /// </li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p>
    /// </li>
    /// <li>
    /// <p>Can't be a word reserved by the specified database engine</p>
    /// </li>
    /// </ul>
    /// <p>
    /// <b>Oracle</b>
    /// </p>
    /// <p>The Oracle System ID (SID) of the created DB instance.
    /// If you specify <code>null</code>, the default value <code>ORCL</code> is used.
    /// You can't specify the string NULL, or any other reserved word, for <code>DBName</code>.
    /// </p>
    /// <p>Default: <code>ORCL</code>
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 8 characters</p>
    /// </li>
    /// </ul>
    /// <p>
    /// <b>SQL Server</b>
    /// </p>
    /// <p>Not applicable. Must be null.</p>
    /// <p>
    /// <b>Amazon Aurora MySQL</b>
    /// </p>
    /// <p>The name of the database to create when the primary DB instance of the Aurora MySQL DB cluster is
    /// created. If this parameter isn't specified for an Aurora MySQL DB cluster, no database is created
    /// in the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>It must contain 1 to 64 alphanumeric characters.</p>
    /// </li>
    /// <li>
    /// <p>It can't be a word reserved by the database engine.</p>
    /// </li>
    /// </ul>
    /// <p>
    /// <b>Amazon Aurora PostgreSQL</b>
    /// </p>
    /// <p>The name of the database to create when the primary DB instance of the Aurora PostgreSQL DB cluster is
    /// created. If this parameter isn't specified for an Aurora PostgreSQL DB cluster,
    /// a database named <code>postgres</code> is created in the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>It must contain 1 to 63 alphanumeric characters.</p>
    /// </li>
    /// <li>
    /// <p>It must begin with a letter or an underscore.
    /// Subsequent characters can be letters, underscores, or digits
    /// (0 to 9).</p>
    /// </li>
    /// <li>
    /// <p>It can't be a word reserved by the
    /// database engine.</p>
    /// </li>
    /// </ul>
    pub db_name: std::option::Option<std::string::String>,
    /// <p>The DB instance identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>mydbinstance</code>
    /// </p>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>The amount of storage (in gibibytes) to allocate for the DB instance.</p>
    /// <p>Type: Integer</p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. Aurora cluster volumes automatically grow as the amount of data in your
    /// database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p>
    /// <p>
    /// <b>MySQL</b>
    /// </p>
    /// <p>Constraints to the amount of storage for each storage type are the following:
    /// </p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p>
    /// </li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p>
    /// </li>
    /// <li>
    /// <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p>
    /// </li>
    /// </ul>
    /// <p>
    /// <b>MariaDB</b>
    /// </p>
    /// <p>Constraints to the amount of storage for each storage type are the following:
    /// </p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p>
    /// </li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p>
    /// </li>
    /// <li>
    /// <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p>
    /// </li>
    /// </ul>
    /// <p>
    /// <b>PostgreSQL</b>
    /// </p>
    /// <p>Constraints to the amount of storage for each storage type are the following:
    /// </p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p>
    /// </li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p>
    /// </li>
    /// <li>
    /// <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p>
    /// </li>
    /// </ul>
    /// <p>
    /// <b>Oracle</b>
    /// </p>
    /// <p>Constraints to the amount of storage for each storage type are the following:
    /// </p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2): Must be an integer from 20 to 65536.</p>
    /// </li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1): Must be an integer from 100 to 65536.</p>
    /// </li>
    /// <li>
    /// <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p>
    /// </li>
    /// </ul>
    /// <p>
    /// <b>SQL Server</b>
    /// </p>
    /// <p>Constraints to the amount of storage for each storage type are the following:
    /// </p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2):</p>
    /// <ul>
    /// <li>
    /// <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p>
    /// </li>
    /// <li>
    /// <p>Web and Express editions: Must be an integer from 20 to 16384.</p>
    /// </li>
    /// </ul>            
    /// </li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1):</p>
    /// <ul>
    /// <li>
    /// <p>Enterprise and Standard editions: Must be an integer from 200 to 16384.</p>
    /// </li>
    /// <li>
    /// <p>Web and Express editions: Must be an integer from 100 to 16384.</p>
    /// </li>
    /// </ul>            
    /// </li>
    /// <li>
    /// <p>Magnetic storage (standard):</p>
    /// <ul>
    /// <li>
    /// <p>Enterprise and Standard editions: Must be an integer from 200 to 1024.</p>
    /// </li>
    /// <li>
    /// <p>Web and Express editions: Must be an integer from 20 to 1024.</p>
    /// </li>
    /// </ul>            
    /// </li>
    /// </ul>
    pub allocated_storage: std::option::Option<i32>,
    /// <p>The compute and memory capacity of the DB instance, for example, <code>db.m4.large</code>.
    /// Not all DB instance classes are available in all AWS Regions, or for all database engines.
    /// For the full list of DB instance classes,
    /// and availability for your engine, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    pub db_instance_class: std::option::Option<std::string::String>,
    /// <p>The name of the database engine to be used for this instance.
    /// </p>
    /// <p>Not every database engine is available for every AWS Region.
    /// </p>
    /// <p>Valid Values:
    /// </p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>aurora-postgresql</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>mariadb</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>mysql</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se2</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se1</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>oracle-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>postgres</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ee</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-se</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-ex</code>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>sqlserver-web</code>
    /// </p>
    /// </li>
    /// </ul>
    pub engine: std::option::Option<std::string::String>,
    /// <p>The name for the master user.</p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. The name for the master user is managed by the DB cluster.
    /// </p>
    /// <p>
    /// <b>MariaDB</b>
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Required for MariaDB.</p>
    /// </li>
    /// <li>
    /// <p>Must be 1 to 16 letters or numbers.</p>
    /// </li>
    /// <li>
    /// <p>Can't be a reserved word for the chosen database engine.</p>
    /// </li>
    /// </ul>
    /// <p>
    /// <b>Microsoft SQL Server</b>
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Required for SQL Server.</p>
    /// </li>
    /// <li>
    /// <p>Must be 1 to 128 letters or numbers.</p>
    /// </li>
    /// <li>
    /// <p>The first character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't be a reserved word for the chosen database engine.</p>
    /// </li>
    /// </ul>
    /// <p>
    /// <b>MySQL</b>
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Required for MySQL.</p>
    /// </li>
    /// <li>
    /// <p>Must be 1 to 16 letters or numbers.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't be a reserved word for the chosen database engine.</p>
    /// </li>
    /// </ul>
    /// <p>
    /// <b>Oracle</b>
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Required for Oracle.</p>
    /// </li>
    /// <li>
    /// <p>Must be 1 to 30 letters or numbers.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't be a reserved word for the chosen database engine.</p>
    /// </li>
    /// </ul>
    /// <p>
    /// <b>PostgreSQL</b>
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Required for PostgreSQL.</p>
    /// </li>
    /// <li>
    /// <p>Must be 1 to 63 letters or numbers.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't be a reserved word for the chosen database engine.</p>
    /// </li>
    /// </ul>
    pub master_username: std::option::Option<std::string::String>,
    /// <p>The password for the master user. The password can include any printable ASCII character except "/", """, or "@".</p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. The password for the master user is managed by the DB
    /// cluster.</p>
    /// <p>
    /// <b>MariaDB</b>
    /// </p>
    /// <p>Constraints: Must contain from 8 to 41 characters.</p>
    /// <p>
    /// <b>Microsoft SQL Server</b>
    /// </p>
    /// <p>Constraints: Must contain from 8 to 128 characters.</p>
    /// <p>
    /// <b>MySQL</b>
    /// </p>
    /// <p>Constraints: Must contain from 8 to 41 characters.</p>
    /// <p>
    /// <b>Oracle</b>
    /// </p>
    /// <p>Constraints: Must contain from 8 to 30 characters.</p>
    /// <p>
    /// <b>PostgreSQL</b>
    /// </p>
    /// <p>Constraints: Must contain from 8 to 128 characters.</p>
    pub master_user_password: std::option::Option<std::string::String>,
    /// <p>A list of DB security groups to associate with this DB instance.</p>
    /// <p>Default: The default DB security group for the database engine.</p>
    pub db_security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. The associated list of EC2 VPC security groups is managed by
    /// the DB cluster.</p>
    /// <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
    pub vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>
    /// The Availability Zone (AZ) where the database will be created. For information on
    /// AWS Regions and Availability Zones, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions
    /// and Availability Zones</a>.
    /// </p>
    /// <p>Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.</p>
    /// <p>
    /// Example: <code>us-east-1d</code>
    /// </p>
    /// <p>
    /// Constraint: The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment.
    /// The specified Availability Zone must be in the same AWS Region as the current endpoint.
    /// </p>
    /// <note>
    /// <p>If you're creating a DB instance in an RDS on VMware environment,
    /// specify the identifier of the custom Availability Zone to create the DB instance
    /// in.</p>
    /// <p>For more information about RDS on VMware, see the
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/RDSonVMwareUserGuide/rds-on-vmware.html">
    /// RDS on VMware User Guide.</a>
    /// </p>
    /// </note>
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>A DB subnet group to associate with this DB instance.</p>
    /// <p>If there is no DB subnet group, then it is a non-VPC DB instance.</p>
    pub db_subnet_group_name: std::option::Option<std::string::String>,
    /// <p>The time range each week during which system maintenance can occur,
    /// in Universal Coordinated Time (UTC).
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a>.
    /// </p>
    /// <p>
    /// Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
    /// </p>
    /// <p>The default is a 30-minute window selected at random from an
    /// 8-hour block of time for each AWS Region, occurring on a random day of the
    /// week.
    /// </p>
    /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    pub preferred_maintenance_window: std::option::Option<std::string::String>,
    /// <p>The name of the DB parameter group to associate with this DB instance. If you do not specify a value, then
    /// the default DB parameter group for the specified DB engine and version is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    pub db_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.</p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. The retention period for automated backups is managed by the DB
    /// cluster.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a value from 0 to 35</p>
    /// </li>
    /// <li>
    /// <p>Can't be set to 0 if the DB instance is a source to read replicas</p>
    /// </li>
    /// </ul>
    pub backup_retention_period: std::option::Option<i32>,
    /// <p>
    /// The daily time range during which automated backups are created
    /// if automated backups are enabled,
    /// using the <code>BackupRetentionPeriod</code> parameter.
    /// The default is a 30-minute window selected at random from an
    /// 8-hour block of time for each AWS Region. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup window</a> in the <i>Amazon RDS User Guide</i>.
    /// </p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. The daily time range for creating automated backups is managed by
    /// the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
    /// </li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p>
    /// </li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p>
    /// </li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p>
    /// </li>
    /// </ul>
    pub preferred_backup_window: std::option::Option<std::string::String>,
    /// <p>The port number on which the database accepts connections.</p>
    /// <p>
    /// <b>MySQL</b>
    /// </p>
    /// <p>
    /// Default: <code>3306</code>
    /// </p>
    /// <p> Valid values: <code>1150-65535</code>
    /// </p>
    /// <p>Type: Integer</p>
    /// <p>
    /// <b>MariaDB</b>
    /// </p>
    /// <p>
    /// Default: <code>3306</code>
    /// </p>
    /// <p> Valid values: <code>1150-65535</code>
    /// </p>
    /// <p>Type: Integer</p>
    /// <p>
    /// <b>PostgreSQL</b>
    /// </p>
    /// <p>
    /// Default: <code>5432</code>
    /// </p>
    /// <p> Valid values: <code>1150-65535</code>
    /// </p>
    /// <p>Type: Integer</p>
    /// <p>
    /// <b>Oracle</b>
    /// </p>
    /// <p>
    /// Default: <code>1521</code>
    /// </p>
    /// <p> Valid values: <code>1150-65535</code>
    /// </p>
    /// <p>
    /// <b>SQL Server</b>
    /// </p>
    /// <p>
    /// Default: <code>1433</code>
    /// </p>
    /// <p> Valid values: <code>1150-65535</code> except <code>1234</code>, <code>1434</code>,
    /// <code>3260</code>, <code>3343</code>, <code>3389</code>, <code>47001</code>, and
    /// <code>49152-49156</code>.</p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>
    /// Default: <code>3306</code>
    /// </p>
    /// <p> Valid values: <code>1150-65535</code>
    /// </p>
    /// <p>Type: Integer</p>
    pub port: std::option::Option<i32>,
    /// <p>A value that indicates whether the DB instance is a Multi-AZ deployment. You can't set
    /// the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    pub multi_az: std::option::Option<bool>,
    /// <p>The version number of the database engine to use.</p>
    /// <p>For a list of valid engine versions, use the  <code>DescribeDBEngineVersions</code> action.</p>
    /// <p>The following are the database engines and links to information about the major and minor versions that are available with
    /// Amazon RDS. Not every database engine is available for every AWS Region.</p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. The version number of the database engine to be used by the DB
    /// instance is managed by the DB cluster.</p>
    /// <p>
    /// <b>MariaDB</b>
    /// </p>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS Versions</a> in the
    /// <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>
    /// <b>Microsoft SQL Server</b>
    /// </p>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.VersionSupport">Microsoft SQL Server Versions on Amazon RDS</a> in the
    /// <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>
    /// <b>MySQL</b>
    /// </p>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the
    /// <i>Amazon RDS User Guide.</i>
    /// </p>     
    /// <p>
    /// <b>Oracle</b>
    /// </p>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine Release Notes</a> in the
    /// <i>Amazon RDS User Guide.</i>
    /// </p>
    /// <p>
    /// <b>PostgreSQL</b>
    /// </p>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts">Amazon RDS for PostgreSQL versions and extensions</a> in the
    /// <i>Amazon RDS User Guide.</i>
    /// </p>
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether minor engine upgrades are applied automatically to the DB instance during the maintenance window.
    /// By default, minor engine upgrades are applied automatically.</p>
    pub auto_minor_version_upgrade: std::option::Option<bool>,
    /// <p>License model information for this DB instance.</p>
    /// <p>
    /// Valid values:  <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code>
    /// </p>
    pub license_model: std::option::Option<std::string::String>,
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
    /// For information about valid Iops values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS Storage to Improve Performance</a> in the <i>Amazon RDS User Guide</i>.
    /// </p>
    /// <p>Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL DB instances, must be a multiple between .5 and 50 of the storage amount for the DB instance.
    /// For SQL Server DB instances, must be a multiple between 1 and 50 of the storage amount for the DB instance.
    /// </p>
    pub iops: std::option::Option<i32>,
    /// <p>A value that indicates that the DB instance should be associated with the specified option group.</p>
    /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance once it is associated with a DB instance</p>
    pub option_group_name: std::option::Option<std::string::String>,
    /// <p>For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.</p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. The character set is managed by
    /// the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
    pub character_set_name: std::option::Option<std::string::String>,
    /// <p>The name of the NCHAR character set for the Oracle DB instance.</p>
    pub nchar_character_set_name: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether the DB instance is publicly accessible.</p>
    /// <p>When the DB instance is publicly accessible, its DNS endpoint resolves to the private IP address from within the DB instance's VPC,
    /// and to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses,
    /// and that public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
    /// <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.</p>
    /// </li>
    /// <li>
    /// <p>If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.</p>
    /// </li>
    /// </ul>
    /// <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.</p>
    /// </li>
    /// <li>
    /// <p>If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.</p>
    /// </li>
    /// </ul>
    pub publicly_accessible: std::option::Option<bool>,
    /// <p>Tags to assign to the DB instance.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>The identifier of the DB cluster that the instance will belong to.</p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>Specifies the storage type to be associated with the DB instance.</p>
    /// <p>
    /// Valid values: <code>standard | gp2 | io1</code>
    /// </p>
    /// <p>
    /// If you specify <code>io1</code>, you must also include a value for the
    /// <code>Iops</code> parameter.
    /// </p>
    /// <p>
    /// Default: <code>io1</code> if the <code>Iops</code> parameter
    /// is specified, otherwise <code>gp2</code>
    /// </p>
    pub storage_type: std::option::Option<std::string::String>,
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    pub tde_credential_arn: std::option::Option<std::string::String>,
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    pub tde_credential_password: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether the DB instance is encrypted. By default, it isn't encrypted.</p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. The encryption for DB instances is managed by
    /// the DB cluster.</p>
    pub storage_encrypted: std::option::Option<bool>,
    /// <p>The AWS KMS key identifier for an encrypted DB instance.</p>
    /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).
    /// To use a CMK in a different AWS account, specify the key ARN or alias ARN.</p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. The AWS KMS key identifier is managed by
    /// the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>     
    /// <p>If <code>StorageEncrypted</code> is enabled, and you do
    /// not specify a value for the <code>KmsKeyId</code> parameter, then
    /// Amazon RDS uses your default CMK. There is a  
    /// default CMK for your AWS account. Your AWS account has a different
    /// default CMK for each AWS Region.</p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The Active Directory directory ID to create the DB instance in. Currently, only MySQL, Microsoft SQL
    /// Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html">
    /// Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub domain: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. Copying tags to snapshots is managed by the DB cluster. Setting this
    /// value for an Aurora DB instance has no effect on the DB cluster setting.</p>
    pub copy_tags_to_snapshot: std::option::Option<bool>,
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p>
    /// <p>If <code>MonitoringRoleArn</code> is specified, then you must also set <code>MonitoringInterval</code>
    /// to a value other than 0.</p>
    /// <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code>
    /// </p>
    pub monitoring_interval: std::option::Option<i32>,
    /// <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For
    /// example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role,
    /// go to <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a>
    /// in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>If <code>MonitoringInterval</code> is set to a value other than 0, then you must supply a <code>MonitoringRoleArn</code> value.</p>
    pub monitoring_role_arn: std::option::Option<std::string::String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: std::option::Option<std::string::String>,
    /// <p>A value that specifies the order in which an Aurora Replica is promoted to the primary instance
    /// after a failure of the existing primary instance. For more information,
    /// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.FaultTolerance">
    /// Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.
    /// </p>
    /// <p>Default: 1</p>
    /// <p>Valid Values: 0 - 15</p>
    pub promotion_tier: std::option::Option<i32>,
    /// <p>The time zone of the DB instance.
    /// The time zone parameter is currently supported only by
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>.
    /// </p>
    pub timezone: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
    /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
    /// <p>This setting doesn't apply to Amazon Aurora. Mapping AWS IAM accounts to database accounts is managed by the DB
    /// cluster.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html">
    /// IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    pub enable_iam_database_authentication: std::option::Option<bool>,
    /// <p>A value that indicates whether to enable Performance Insights for the DB instance.
    /// </p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon Relational Database Service
    /// User Guide</i>.
    /// </p>
    pub enable_performance_insights: std::option::Option<bool>,
    /// <p>The AWS KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).</p>
    /// <p>If you do not specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS
    /// uses your default CMK. There is a default CMK for your AWS account.
    /// Your AWS account has a different default CMK for each AWS Region.</p>
    pub performance_insights_kms_key_id: std::option::Option<std::string::String>,
    /// <p>The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). </p>
    pub performance_insights_retention_period: std::option::Option<i32>,
    /// <p>The list of log types that need to be enabled for exporting to CloudWatch Logs. The values
    /// in the list depend on the DB engine being used. For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs </a> in the <i>Amazon Relational Database
    /// Service User Guide</i>.</p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. CloudWatch Logs exports are managed by the DB cluster.
    /// </p>
    /// <p>
    /// <b>MariaDB</b>
    /// </p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.
    /// </p>
    /// <p>
    /// <b>Microsoft SQL Server</b>
    /// </p>
    /// <p>Possible values are <code>agent</code> and <code>error</code>.
    /// </p>
    /// <p>
    /// <b>MySQL</b>
    /// </p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.
    /// </p>
    /// <p>
    /// <b>Oracle</b>
    /// </p>
    /// <p>Possible values are <code>alert</code>, <code>audit</code>, <code>listener</code>, <code>trace</code>, and
    /// <code>oemagent</code>.
    /// </p>
    /// <p>
    /// <b>PostgreSQL</b>
    /// </p>
    /// <p>Possible values are <code>postgresql</code> and <code>upgrade</code>.
    /// </p>
    pub enable_cloudwatch_logs_exports: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    pub processor_features: std::option::Option<std::vec::Vec<crate::model::ProcessorFeature>>,
    /// <p>A value that indicates whether the DB instance has deletion protection enabled.
    /// The database can't be deleted when deletion protection is enabled. By default,
    /// deletion protection is disabled. For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html">
    /// Deleting a DB Instance</a>.
    /// </p>
    /// <p>
    /// <b>Amazon Aurora</b>
    /// </p>
    /// <p>Not applicable. You can enable or disable deletion protection for the DB cluster.
    /// For more information, see <code>CreateDBCluster</code>. DB instances in a DB
    /// cluster can be deleted even when deletion protection is enabled for the DB cluster.
    /// </p>
    pub deletion_protection: std::option::Option<bool>,
    /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    /// <p>For more information about this setting, including limitations that apply to it, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling">
    /// Managing capacity automatically with Amazon RDS storage autoscaling</a>
    /// in the <i>Amazon RDS User Guide</i>.</p>
    pub max_allocated_storage: std::option::Option<i32>,
    /// <p>A value that indicates whether to enable a customer-owned IP address (CoIP) for an RDS
    /// on Outposts DB instance.</p>
    /// <p>A <i>CoIP</i> provides local or external connectivity to resources in
    /// your Outpost subnets through your on-premises network. For some use cases, a CoIP can
    /// provide lower latency for connections to the DB instance from outside of its virtual
    /// private cloud (VPC) on your local network.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on AWS Outposts</a>
    /// in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/outposts-networking-components.html#ip-addressing">Customer-owned IP addresses</a>
    /// in the <i>AWS Outposts User Guide</i>.</p>
    pub enable_customer_owned_ip: std::option::Option<bool>,
}
impl std::fmt::Debug for CreateDBInstanceInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBInstanceInput");
        formatter.field("db_name", &self.db_name);
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("allocated_storage", &self.allocated_storage);
        formatter.field("db_instance_class", &self.db_instance_class);
        formatter.field("engine", &self.engine);
        formatter.field("master_username", &self.master_username);
        formatter.field("master_user_password", &self.master_user_password);
        formatter.field("db_security_groups", &self.db_security_groups);
        formatter.field("vpc_security_group_ids", &self.vpc_security_group_ids);
        formatter.field("availability_zone", &self.availability_zone);
        formatter.field("db_subnet_group_name", &self.db_subnet_group_name);
        formatter.field(
            "preferred_maintenance_window",
            &self.preferred_maintenance_window,
        );
        formatter.field("db_parameter_group_name", &self.db_parameter_group_name);
        formatter.field("backup_retention_period", &self.backup_retention_period);
        formatter.field("preferred_backup_window", &self.preferred_backup_window);
        formatter.field("port", &self.port);
        formatter.field("multi_az", &self.multi_az);
        formatter.field("engine_version", &self.engine_version);
        formatter.field(
            "auto_minor_version_upgrade",
            &self.auto_minor_version_upgrade,
        );
        formatter.field("license_model", &self.license_model);
        formatter.field("iops", &self.iops);
        formatter.field("option_group_name", &self.option_group_name);
        formatter.field("character_set_name", &self.character_set_name);
        formatter.field("nchar_character_set_name", &self.nchar_character_set_name);
        formatter.field("publicly_accessible", &self.publicly_accessible);
        formatter.field("tags", &self.tags);
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field("storage_type", &self.storage_type);
        formatter.field("tde_credential_arn", &self.tde_credential_arn);
        formatter.field("tde_credential_password", &self.tde_credential_password);
        formatter.field("storage_encrypted", &self.storage_encrypted);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("domain", &self.domain);
        formatter.field("copy_tags_to_snapshot", &self.copy_tags_to_snapshot);
        formatter.field("monitoring_interval", &self.monitoring_interval);
        formatter.field("monitoring_role_arn", &self.monitoring_role_arn);
        formatter.field("domain_iam_role_name", &self.domain_iam_role_name);
        formatter.field("promotion_tier", &self.promotion_tier);
        formatter.field("timezone", &self.timezone);
        formatter.field(
            "enable_iam_database_authentication",
            &self.enable_iam_database_authentication,
        );
        formatter.field(
            "enable_performance_insights",
            &self.enable_performance_insights,
        );
        formatter.field(
            "performance_insights_kms_key_id",
            &self.performance_insights_kms_key_id,
        );
        formatter.field(
            "performance_insights_retention_period",
            &self.performance_insights_retention_period,
        );
        formatter.field(
            "enable_cloudwatch_logs_exports",
            &self.enable_cloudwatch_logs_exports,
        );
        formatter.field("processor_features", &self.processor_features);
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("max_allocated_storage", &self.max_allocated_storage);
        formatter.field("enable_customer_owned_ip", &self.enable_customer_owned_ip);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBClusterSnapshotInput {
    /// <p>The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1-snapshot1</code>
    /// </p>
    pub db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>The identifier of the DB cluster to create a snapshot for. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DBCluster.</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code>
    /// </p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The tags to be assigned to the DB cluster snapshot.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CreateDBClusterSnapshotInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBClusterSnapshotInput");
        formatter.field(
            "db_cluster_snapshot_identifier",
            &self.db_cluster_snapshot_identifier,
        );
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBClusterParameterGroupInput {
    /// <p>The name of the DB cluster parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the name of an existing DB cluster parameter group.</p>
    /// </li>
    /// </ul>
    /// <note>
    /// <p>This value is stored as a lowercase string.</p>
    /// </note>
    pub db_cluster_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster
    /// parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p>
    /// <p>
    /// <b>Aurora MySQL</b>
    /// </p>
    /// <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code>
    /// </p>
    /// <p>
    /// <b>Aurora PostgreSQL</b>
    /// </p>
    /// <p>Example: <code>aurora-postgresql9.6</code>
    /// </p>
    /// <p>To list all of the available parameter group families for a DB engine, use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine <engine></code>
    /// </p>
    /// <p>For example, to list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine aurora-postgresql</code>
    /// </p>
    /// <note>
    /// <p>The output contains duplicates.</p>
    /// </note>
    /// <p>The following are the valid DB engine values:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora)</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>aurora-postgresql</code>
    /// </p>
    /// </li>
    /// </ul>
    pub db_parameter_group_family: std::option::Option<std::string::String>,
    /// <p>The description for the DB cluster parameter group.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>Tags to assign to the DB cluster parameter group.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CreateDBClusterParameterGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBClusterParameterGroupInput");
        formatter.field(
            "db_cluster_parameter_group_name",
            &self.db_cluster_parameter_group_name,
        );
        formatter.field("db_parameter_group_family", &self.db_parameter_group_family);
        formatter.field("description", &self.description);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBClusterEndpointInput {
    /// <p>The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is
    /// stored as a lowercase string.</p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The identifier to use for the new endpoint. This parameter is stored as a lowercase string.</p>
    pub db_cluster_endpoint_identifier: std::option::Option<std::string::String>,
    /// <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.</p>
    pub endpoint_type: std::option::Option<std::string::String>,
    /// <p>List of DB instance identifiers that are part of the custom endpoint group.</p>
    pub static_members: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>List of DB instance identifiers that aren't part of the custom endpoint group.
    /// All other eligible instances are reachable through the custom endpoint.
    /// Only relevant if the list of static members is empty.</p>
    pub excluded_members: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The tags to be assigned to the Amazon RDS resource.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CreateDBClusterEndpointInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBClusterEndpointInput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field(
            "db_cluster_endpoint_identifier",
            &self.db_cluster_endpoint_identifier,
        );
        formatter.field("endpoint_type", &self.endpoint_type);
        formatter.field("static_members", &self.static_members);
        formatter.field("excluded_members", &self.excluded_members);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateDBClusterInput {
    /// <p>A list of Availability Zones (AZs) where instances in the DB cluster can be created. For information on
    /// AWS Regions and Availability Zones, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and
    /// Availability Zones</a> in the <i>Amazon Aurora User Guide</i>.
    /// </p>
    pub availability_zones: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The number of days for which automated backups are retained.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a value from 1 to 35</p>
    /// </li>
    /// </ul>
    pub backup_retention_period: std::option::Option<i32>,
    /// <p>A value that indicates that the DB cluster should be associated with the specified CharacterSet.</p>
    pub character_set_name: std::option::Option<std::string::String>,
    /// <p>The name for your database of up to 64 alphanumeric characters. If you do not
    /// provide a name, Amazon RDS doesn't create a database in the DB cluster you are
    /// creating.</p>
    pub database_name: std::option::Option<std::string::String>,
    /// <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code>
    /// </p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>
    /// The name of the DB cluster parameter group to associate
    /// with this DB cluster. If you do not specify a value, then
    /// the default DB cluster parameter group for the specified DB engine and version is used.
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB cluster parameter group.</p>
    /// </li>
    /// </ul>
    pub db_cluster_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>A list of EC2 VPC security groups to associate with this DB cluster.</p>
    pub vpc_security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A DB subnet group to associate with this DB cluster.</p>
    /// <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p>
    /// <p>Example: <code>mySubnetgroup</code>
    /// </p>
    pub db_subnet_group_name: std::option::Option<std::string::String>,
    /// <p>The name of the database engine to be used for this DB cluster.</p>
    /// <p>Valid Values: <code>aurora</code> (for MySQL 5.6-compatible Aurora), <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), and <code>aurora-postgresql</code>
    /// </p>
    pub engine: std::option::Option<std::string::String>,
    /// <p>The version number of the database engine to use.</p>
    /// <p>To list all of the available engine versions for <code>aurora</code> (for MySQL 5.6-compatible Aurora), use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code>
    /// </p>
    /// <p>To list all of the available engine versions for <code>aurora-mysql</code> (for MySQL 5.7-compatible Aurora), use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code>
    /// </p>
    /// <p>To list all of the available engine versions for <code>aurora-postgresql</code>, use the following command:</p>
    /// <p>
    /// <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code>
    /// </p>
    /// <p>
    /// <b>Aurora MySQL</b>
    /// </p>
    /// <p>Example: <code>5.6.10a</code>, <code>5.6.mysql_aurora.1.19.2</code>, <code>5.7.12</code>, <code>5.7.mysql_aurora.2.04.5</code>
    /// </p>
    /// <p>
    /// <b>Aurora PostgreSQL</b>
    /// </p>
    /// <p>Example: <code>9.6.3</code>, <code>10.7</code>
    /// </p>
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The port number on which the instances in the DB cluster accept connections.</p>
    /// <p>
    /// Default: <code>3306</code> if engine is set as aurora or <code>5432</code> if set to aurora-postgresql.
    /// </p>
    pub port: std::option::Option<i32>,
    /// <p>The name of the master user for the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 16 letters or numbers.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't be a reserved word for the chosen database engine.</p>
    /// </li>
    /// </ul>
    pub master_username: std::option::Option<std::string::String>,
    /// <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p>
    /// <p>Constraints: Must contain from 8 to 41 characters.</p>
    pub master_user_password: std::option::Option<std::string::String>,
    /// <p>A value that indicates that the DB cluster should be associated with the specified option group.</p>
    /// <p>Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
    pub option_group_name: std::option::Option<std::string::String>,
    /// <p>The daily time range during which automated backups are created
    /// if automated backups are enabled
    /// using the <code>BackupRetentionPeriod</code> parameter.
    /// </p>
    /// <p>The default is a 30-minute window selected at random from an
    /// 8-hour block of time for each AWS Region.
    /// To view the time blocks available, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow">
    /// Backup window</a> in the <i>Amazon Aurora User Guide.</i>
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p>
    /// </li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p>
    /// </li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p>
    /// </li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p>
    /// </li>
    /// </ul>
    pub preferred_backup_window: std::option::Option<std::string::String>,
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code>
    /// </p>
    /// <p>The default is a 30-minute window selected at random from an
    /// 8-hour block of time for each AWS Region, occurring on a random day of the
    /// week. To see the time blocks available, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora">
    /// Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide.</i>
    /// </p>
    /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    pub preferred_maintenance_window: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB
    /// cluster is created as a read replica.</p>
    pub replication_source_identifier: std::option::Option<std::string::String>,
    /// <p>Tags to assign to the DB cluster.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>A value that indicates whether the DB cluster is encrypted.</p>
    pub storage_encrypted: std::option::Option<bool>,
    /// <p>The AWS KMS key identifier for an encrypted DB cluster.</p>
    /// <p>The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).
    /// To use a CMK in a different AWS account, specify the key ARN or alias ARN.</p>
    /// <p>When a CMK isn't specified in <code>KmsKeyId</code>:</p>
    /// <ul>
    /// <li>
    /// <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted
    /// source, then Amazon RDS will use the CMK used to encrypt the
    /// source. Otherwise, Amazon RDS will use your default CMK. </p>
    /// </li>
    /// <li>
    /// <p>If the <code>StorageEncrypted</code> parameter is enabled and
    /// <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS
    /// will use your default CMK.</p>
    /// </li>
    /// </ul>
    /// <p>There is a default CMK for your AWS account. Your AWS account
    /// has a different default CMK for each AWS Region.</p>
    /// <p>If you create a read replica of an encrypted DB cluster in another AWS Region, you
    /// must set <code>KmsKeyId</code> to a AWS KMS key identifier that is valid in the destination AWS
    /// Region. This CMK is used to encrypt the read replica in that AWS Region.</p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>A URL that contains a Signature Version 4 signed request for
    /// the <code>CreateDBCluster</code> action to be called in the source AWS Region where the DB cluster is replicated from.
    /// You only need to specify <code>PreSignedUrl</code> when you are performing cross-region replication from an encrypted DB cluster.</p>
    /// <p>The pre-signed URL must be a valid request for the <code>CreateDBCluster</code> API action
    /// that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied.</p>
    /// <p>The pre-signed URL request must contain the following parameter values:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>KmsKeyId</code> - The AWS KMS key identifier for the key to use to encrypt the copy of
    /// the DB cluster in the destination AWS Region. This should refer to the same AWS KMS CMK for both the <code>CreateDBCluster</code>
    /// action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>DestinationRegion</code> - The name of the AWS Region that Aurora read replica will
    /// be created in.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied.
    /// This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an
    /// encrypted DB cluster from the us-west-2 AWS Region, then your <code>ReplicationSourceIdentifier</code> would look like
    /// Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p>
    /// </li>
    /// </ul>
    /// <p>To learn how to generate a Signature Version 4 signed request, see
    /// <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">
    /// Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and
    /// <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">
    /// Signature Version 4 Signing Process</a>.</p>
    /// <note>
    /// <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI)
    /// instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid
    /// request for the operation that can be executed in the source AWS Region.</p>
    /// </note>
    pub pre_signed_url: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to enable mapping of AWS Identity and Access
    /// Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
    /// <p>For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html">
    /// IAM Database Authentication</a> in the <i>Amazon Aurora User Guide.</i>
    /// </p>
    pub enable_iam_database_authentication: std::option::Option<bool>,
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to
    /// 0. </p>
    /// <note>
    /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
    /// </note>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p>
    /// </li>
    /// </ul>
    pub backtrack_window: std::option::Option<i64>,
    /// <p>The list of log types that need to be enabled for exporting to CloudWatch Logs. The values
    /// in the list depend on the DB engine being used. For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>
    /// <b>Aurora MySQL</b>
    /// </p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.
    /// </p>
    /// <p>
    /// <b>Aurora PostgreSQL</b>
    /// </p>
    /// <p>Possible value is <code>postgresql</code>.
    /// </p>
    pub enable_cloudwatch_logs_exports: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>,
    /// <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p>
    /// <p>The <code>parallelquery</code> engine mode isn't required for Aurora MySQL version 1.23 and higher 1.x versions,
    /// and version 2.09 and higher 2.x versions.</p>
    /// <p>The <code>global</code> engine mode isn't required for Aurora MySQL version 1.22 and higher 1.x versions,
    /// and <code>global</code> engine mode isn't required for any 2.x versions.</p>
    /// <p>The <code>multimaster</code> engine mode only applies for DB clusters created with Aurora MySQL version 5.6.10a.</p>
    /// <p>For Aurora PostgreSQL, the <code>global</code> engine mode isn't required, and both the <code>parallelquery</code>
    /// and the <code>multimaster</code> engine modes currently aren't supported.</p>
    /// <p>Limitations and requirements apply to some DB engine modes. For more information, see the
    /// following sections in the <i>Amazon Aurora User Guide</i>:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations">
    /// Limitations of Aurora Serverless</a>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations">
    /// Limitations of Parallel Query</a>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations">
    /// Limitations of Aurora Global Databases</a>
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations">
    /// Limitations of Multi-Master Clusters</a>
    /// </p>
    /// </li>
    /// </ul>
    pub engine_mode: std::option::Option<std::string::String>,
    /// <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
    pub scaling_configuration: std::option::Option<crate::model::ScalingConfiguration>,
    /// <p>A value that indicates whether the DB cluster has deletion protection enabled.
    /// The database can't be deleted when deletion protection is enabled. By default,
    /// deletion protection is disabled.</p>
    pub deletion_protection: std::option::Option<bool>,
    /// <p>
    /// The global cluster ID of an Aurora cluster that becomes the primary cluster
    /// in the new global database cluster.
    /// </p>
    pub global_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint
    /// is disabled.</p>
    /// <p>When enabled, the HTTP endpoint provides a connectionless web service API for running
    /// SQL queries on the Aurora Serverless DB cluster. You can also query your database
    /// from inside the RDS console with the query editor.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless</a> in the
    /// <i>Amazon Aurora User Guide</i>.</p>
    pub enable_http_endpoint: std::option::Option<bool>,
    /// <p>A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster.
    /// The default is not to copy them.</p>
    pub copy_tags_to_snapshot: std::option::Option<bool>,
    /// <p>The Active Directory directory ID to create the DB cluster in.</p>
    /// <p>
    /// For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a>
    /// in the <i>Amazon Aurora User Guide</i>.
    /// </p>
    pub domain: std::option::Option<std::string::String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to enable this DB cluster to forward write operations to the primary cluster of an
    /// Aurora global database (<a>GlobalCluster</a>). By default, write operations are not allowed on Aurora DB clusters that
    /// are secondary clusters in an Aurora global database.</p>
    /// <p>You can set this value only on Aurora DB clusters that are members of an Aurora global database. With this parameter
    /// enabled, a secondary cluster can forward writes to the current primary cluster and the resulting changes are replicated back to
    /// this cluster. For the primary DB cluster of an Aurora global database, this value is used immediately if the
    /// primary is demoted by the <a>FailoverGlobalCluster</a> API operation, but it does nothing until then.
    /// </p>
    pub enable_global_write_forwarding: std::option::Option<bool>,
}
impl std::fmt::Debug for CreateDBClusterInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateDBClusterInput");
        formatter.field("availability_zones", &self.availability_zones);
        formatter.field("backup_retention_period", &self.backup_retention_period);
        formatter.field("character_set_name", &self.character_set_name);
        formatter.field("database_name", &self.database_name);
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field(
            "db_cluster_parameter_group_name",
            &self.db_cluster_parameter_group_name,
        );
        formatter.field("vpc_security_group_ids", &self.vpc_security_group_ids);
        formatter.field("db_subnet_group_name", &self.db_subnet_group_name);
        formatter.field("engine", &self.engine);
        formatter.field("engine_version", &self.engine_version);
        formatter.field("port", &self.port);
        formatter.field("master_username", &self.master_username);
        formatter.field("master_user_password", &self.master_user_password);
        formatter.field("option_group_name", &self.option_group_name);
        formatter.field("preferred_backup_window", &self.preferred_backup_window);
        formatter.field(
            "preferred_maintenance_window",
            &self.preferred_maintenance_window,
        );
        formatter.field(
            "replication_source_identifier",
            &self.replication_source_identifier,
        );
        formatter.field("tags", &self.tags);
        formatter.field("storage_encrypted", &self.storage_encrypted);
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("pre_signed_url", &self.pre_signed_url);
        formatter.field(
            "enable_iam_database_authentication",
            &self.enable_iam_database_authentication,
        );
        formatter.field("backtrack_window", &self.backtrack_window);
        formatter.field(
            "enable_cloudwatch_logs_exports",
            &self.enable_cloudwatch_logs_exports,
        );
        formatter.field("engine_mode", &self.engine_mode);
        formatter.field("scaling_configuration", &self.scaling_configuration);
        formatter.field("deletion_protection", &self.deletion_protection);
        formatter.field("global_cluster_identifier", &self.global_cluster_identifier);
        formatter.field("enable_http_endpoint", &self.enable_http_endpoint);
        formatter.field("copy_tags_to_snapshot", &self.copy_tags_to_snapshot);
        formatter.field("domain", &self.domain);
        formatter.field("domain_iam_role_name", &self.domain_iam_role_name);
        formatter.field(
            "enable_global_write_forwarding",
            &self.enable_global_write_forwarding,
        );
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateCustomAvailabilityZoneInput {
    /// <p>The name of the custom Availability Zone (AZ).</p>
    pub custom_availability_zone_name: std::option::Option<std::string::String>,
    /// <p>The ID of an existing virtual private network (VPN) between the Amazon RDS website and
    /// the VMware vSphere cluster.</p>
    pub existing_vpn_id: std::option::Option<std::string::String>,
    /// <p>The name of a new VPN tunnel between the Amazon RDS website and the VMware vSphere cluster.</p>
    /// <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
    pub new_vpn_tunnel_name: std::option::Option<std::string::String>,
    /// <p>The IP address of network traffic from your on-premises data center. A custom AZ receives the network traffic.</p>
    /// <p>Specify this parameter only if <code>ExistingVpnId</code> isn't specified.</p>
    pub vpn_tunnel_originator_ip: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateCustomAvailabilityZoneInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateCustomAvailabilityZoneInput");
        formatter.field(
            "custom_availability_zone_name",
            &self.custom_availability_zone_name,
        );
        formatter.field("existing_vpn_id", &self.existing_vpn_id);
        formatter.field("new_vpn_tunnel_name", &self.new_vpn_tunnel_name);
        formatter.field("vpn_tunnel_originator_ip", &self.vpn_tunnel_originator_ip);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CopyOptionGroupInput {
    /// <p>The identifier for the source option group.
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must specify a valid option group.</p>
    /// </li>
    /// </ul>
    pub source_option_group_identifier: std::option::Option<std::string::String>,
    /// <p>The identifier for the copied option group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be null, empty, or blank</p>
    /// </li>
    /// <li>
    /// <p>Must contain from 1 to 255 letters, numbers, or hyphens</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-option-group</code>
    /// </p>
    pub target_option_group_identifier: std::option::Option<std::string::String>,
    /// <p>The description for the copied option group.</p>
    pub target_option_group_description: std::option::Option<std::string::String>,
    /// <p>A list of tags.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>           
    /// </p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CopyOptionGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CopyOptionGroupInput");
        formatter.field(
            "source_option_group_identifier",
            &self.source_option_group_identifier,
        );
        formatter.field(
            "target_option_group_identifier",
            &self.target_option_group_identifier,
        );
        formatter.field(
            "target_option_group_description",
            &self.target_option_group_description,
        );
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CopyDBSnapshotInput {
    /// <p>The identifier for the source DB snapshot.</p>
    /// <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB
    /// snapshot identifier. For example, you might specify
    /// <code>rds:mysql-instance1-snapshot-20130805</code>. </p>
    /// <p>If the source snapshot is in a different AWS Region than the copy, specify a valid DB
    /// snapshot ARN. For example, you might specify
    /// <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>. </p>
    /// <p>If you are copying from a shared manual DB snapshot,
    /// this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot.
    /// </p>
    /// <p>If you are copying an encrypted snapshot
    /// this parameter must be in the ARN format for the source AWS Region,
    /// and must match the <code>SourceDBSnapshotIdentifier</code> in the <code>PreSignedUrl</code> parameter.
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must specify a valid system snapshot in the "available" state.</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>rds:mydb-2012-04-02-00-01</code>
    /// </p>
    /// <p>Example: <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805</code>
    /// </p>
    pub source_db_snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>The identifier for the copy of the snapshot.
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be null, empty, or blank</p>
    /// </li>
    /// <li>
    /// <p>Must contain from 1 to 255 letters, numbers, or hyphens</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-db-snapshot</code>
    /// </p>
    pub target_db_snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>The AWS KMS key identifier for an encrypted DB snapshot.
    /// The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).
    /// </p>
    /// <p>If you copy an encrypted DB snapshot from your AWS account,
    /// you can specify a value for this parameter to encrypt the copy with a new AWS KMS CMK.
    /// If you don't specify a value for this parameter,
    /// then the copy of the DB snapshot is encrypted with the same AWS KMS key as the source DB snapshot.
    /// </p>
    /// <p>If you copy an encrypted DB snapshot that is shared from another AWS account,
    /// then you must specify a value for this parameter.
    /// </p>
    /// <p>If you specify this parameter when you copy an unencrypted snapshot,
    /// the copy is encrypted.
    /// </p>
    /// <p>If you copy an encrypted snapshot to a different AWS Region, then you must specify
    /// a AWS KMS key identifier for the destination AWS Region. AWS KMS CMKs are specific to the AWS Region
    /// that they are created in, and you can't use CMKs from one AWS Region in another
    /// AWS Region.
    /// </p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>A list of tags.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>           
    /// </p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>A value that indicates whether to copy all tags from the source DB snapshot to the target DB snapshot. By default, tags are not copied.</p>
    pub copy_tags: std::option::Option<bool>,
    /// <p>The URL that contains a Signature Version 4 signed request for the
    /// <code>CopyDBSnapshot</code> API action in the source AWS Region that contains the
    /// source DB snapshot to copy. </p>
    /// <p>You must specify this parameter when you copy an encrypted DB snapshot from another
    /// AWS Region by using the Amazon RDS API. Don't specify <code>PreSignedUrl</code> when you are
    /// copying an encrypted DB snapshot in the same AWS Region.</p>
    /// <p>The presigned URL must be a valid request for the <code>CopyDBSnapshot</code> API action
    /// that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied.
    /// The presigned URL request must contain the following parameter values:
    /// </p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>DestinationRegion</code> - The AWS Region that the encrypted DB snapshot is copied to.
    /// This AWS Region is the same one where the <code>CopyDBSnapshot</code> action is called that contains this presigned URL.
    /// </p>
    /// <p>For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region
    /// to the us-east-1 AWS Region, then you call the <code>CopyDBSnapshot</code> action in
    /// the us-east-1 AWS Region and provide a presigned URL that contains a call to the
    /// <code>CopyDBSnapshot</code> action in the us-west-2 AWS Region. For this
    /// example, the <code>DestinationRegion</code> in the presigned URL must be set to
    /// the us-east-1 AWS Region. </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>KmsKeyId</code> - The AWS KMS key identifier for the customer master key (CMK) to use to encrypt the copy of the DB snapshot in the destination AWS Region.
    /// This is the same identifier for both the <code>CopyDBSnapshot</code> action that is called in the destination AWS Region,
    /// and the action contained in the presigned URL.
    /// </p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SourceDBSnapshotIdentifier</code> - The DB snapshot identifier for the encrypted snapshot to be copied.
    /// This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region.
    /// For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your <code>SourceDBSnapshotIdentifier</code> looks like
    /// the following example: <code>arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115</code>.
    /// </p>
    /// </li>
    /// </ul>
    /// <p>To learn how to generate a Signature Version 4 signed request, see
    /// <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and
    /// <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">Signature Version 4 Signing Process</a>.
    /// </p>
    /// <note>
    /// <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI)
    /// instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid
    /// request for the operation that can be executed in the source AWS Region.</p>
    /// </note>
    pub pre_signed_url: std::option::Option<std::string::String>,
    /// <p>The name of an option group to associate with the copy of the snapshot.</p>
    /// <p>Specify this option if you are copying a snapshot from one AWS Region to another,
    /// and your DB instance uses a nondefault option group.
    /// If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server,
    /// you must specify this option when copying across AWS Regions.
    /// For more information, see
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CopySnapshot.html#USER_CopySnapshot.Options">Option group considerations</a> in the <i>Amazon RDS User Guide.</i>
    /// </p>
    pub option_group_name: std::option::Option<std::string::String>,
    /// <p>The external custom Availability Zone (CAZ) identifier for the target CAZ.</p>
    /// <p>Example: <code>rds-caz-aiqhTgQv</code>.</p>
    pub target_custom_availability_zone: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CopyDBSnapshotInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CopyDBSnapshotInput");
        formatter.field(
            "source_db_snapshot_identifier",
            &self.source_db_snapshot_identifier,
        );
        formatter.field(
            "target_db_snapshot_identifier",
            &self.target_db_snapshot_identifier,
        );
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("tags", &self.tags);
        formatter.field("copy_tags", &self.copy_tags);
        formatter.field("pre_signed_url", &self.pre_signed_url);
        formatter.field("option_group_name", &self.option_group_name);
        formatter.field(
            "target_custom_availability_zone",
            &self.target_custom_availability_zone,
        );
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CopyDBParameterGroupInput {
    /// <p>
    /// The identifier or ARN for the source DB parameter group.
    /// For information about  
    /// creating an ARN,
    /// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
    /// Constructing an ARN for Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must specify a valid DB parameter group.</p>
    /// </li>
    /// </ul>
    pub source_db_parameter_group_identifier: std::option::Option<std::string::String>,
    /// <p>The identifier for the copied DB parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be null, empty, or blank</p>
    /// </li>
    /// <li>
    /// <p>Must contain from 1 to 255 letters, numbers, or hyphens</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-db-parameter-group</code>
    /// </p>
    pub target_db_parameter_group_identifier: std::option::Option<std::string::String>,
    /// <p>A description for the copied DB parameter group.</p>
    pub target_db_parameter_group_description: std::option::Option<std::string::String>,
    /// <p>A list of tags.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>           
    /// </p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CopyDBParameterGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CopyDBParameterGroupInput");
        formatter.field(
            "source_db_parameter_group_identifier",
            &self.source_db_parameter_group_identifier,
        );
        formatter.field(
            "target_db_parameter_group_identifier",
            &self.target_db_parameter_group_identifier,
        );
        formatter.field(
            "target_db_parameter_group_description",
            &self.target_db_parameter_group_description,
        );
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CopyDBClusterSnapshotInput {
    /// <p>The identifier of the DB cluster snapshot to copy. This parameter isn't case-sensitive.</p>
    /// <p>You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must specify a valid system snapshot in the "available" state.</p>
    /// </li>
    /// <li>
    /// <p>If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.</p>
    /// </li>
    /// <li>
    /// <p>If the source snapshot is in a different AWS Region than the copy,
    /// specify a valid DB cluster snapshot ARN. For more information, go to
    /// <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_CopySnapshot.html#USER_CopySnapshot.AcrossRegions">
    /// Copying Snapshots Across AWS Regions</a> in the <i>Amazon Aurora User Guide.</i>
    /// </p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-cluster-snapshot1</code>
    /// </p>
    pub source_db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-cluster-snapshot2</code>
    /// </p>
    pub target_db_cluster_snapshot_identifier: std::option::Option<std::string::String>,
    /// <p>The AWS KMS key identifier for an encrypted DB cluster snapshot.
    /// The AWS KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the AWS KMS customer master key (CMK).</p>             
    /// <p>If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for <code>KmsKeyId</code> to encrypt the copy with a new AWS KMS CMK.
    /// If you don't specify a value for <code>KmsKeyId</code>, then the copy of the DB cluster snapshot is encrypted with the same AWS KMS key as the source DB cluster snapshot.
    /// </p>
    /// <p>If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for <code>KmsKeyId</code>. </p>
    /// <p>To copy an encrypted DB cluster snapshot to another AWS Region, you must set <code>KmsKeyId</code> to the AWS KMS key identifier you want to use to encrypt the copy of the DB cluster snapshot
    /// in the destination AWS Region. AWS KMS CMKs are specific to the AWS Region that they are created in, and you can't use CMKs from one AWS Region
    /// in another AWS Region.</p>
    /// <p>If you copy an unencrypted DB cluster snapshot and specify a value for the <code>KmsKeyId</code> parameter,
    /// an error is returned.</p>
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The URL that contains a Signature Version 4 signed request for the <code>CopyDBClusterSnapshot</code> API action in the AWS Region that contains the
    /// source DB cluster snapshot to copy. The <code>PreSignedUrl</code> parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region.
    /// Don't specify <code>PreSignedUrl</code> when you are copying an encrypted DB cluster snapshot in the same AWS Region.</p>
    /// <p>The pre-signed URL must be a valid request for the <code>CopyDBClusterSnapshot</code> API action that can be
    /// executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied.
    /// The pre-signed URL request must contain the following parameter values:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>KmsKeyId</code> - The AWS KMS key identifier for the customer master key (CMK) to use to encrypt the copy of the DB
    /// cluster snapshot in the destination AWS Region. This is the same identifier for both the <code>CopyDBClusterSnapshot</code>
    /// action that is called in the destination AWS Region, and the action contained in the pre-signed URL.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>DestinationRegion</code> - The name of the AWS Region that the DB cluster snapshot is to be created in.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>SourceDBClusterSnapshotIdentifier</code> - The DB cluster snapshot identifier for the encrypted DB cluster
    /// snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example,
    /// if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your <code>SourceDBClusterSnapshotIdentifier</code>
    /// looks like the following example: <code>arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115</code>.</p>
    /// </li>
    /// </ul>
    /// <p>To learn how to generate a Signature Version 4 signed request, see
    /// <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html">
    /// Authenticating Requests: Using Query Parameters (AWS Signature Version 4)</a> and
    /// <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html">
    /// Signature Version 4 Signing Process</a>.</p>
    /// <note>
    /// <p>If you are using an AWS SDK tool or the AWS CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the AWS CLI)
    /// instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a pre-signed URL that is a valid
    /// request for the operation that can be executed in the source AWS Region.</p>
    /// </note>
    pub pre_signed_url: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot.
    /// By default, tags are not copied.</p>
    pub copy_tags: std::option::Option<bool>,
    /// <p>A list of tags.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>           
    /// </p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CopyDBClusterSnapshotInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CopyDBClusterSnapshotInput");
        formatter.field(
            "source_db_cluster_snapshot_identifier",
            &self.source_db_cluster_snapshot_identifier,
        );
        formatter.field(
            "target_db_cluster_snapshot_identifier",
            &self.target_db_cluster_snapshot_identifier,
        );
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("pre_signed_url", &self.pre_signed_url);
        formatter.field("copy_tags", &self.copy_tags);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CopyDBClusterParameterGroupInput {
    /// <p>The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group.
    /// For information about  
    /// creating an ARN,
    /// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
    /// Constructing an ARN for Amazon RDS</a> in the <i>Amazon Aurora User Guide</i>.
    /// </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must specify a valid DB cluster parameter group.</p>
    /// </li>
    /// </ul>
    pub source_db_cluster_parameter_group_identifier: std::option::Option<std::string::String>,
    /// <p>The identifier for the copied DB cluster parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be null, empty, or blank</p>
    /// </li>
    /// <li>
    /// <p>Must contain from 1 to 255 letters, numbers, or hyphens</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-cluster-param-group1</code>
    /// </p>
    pub target_db_cluster_parameter_group_identifier: std::option::Option<std::string::String>,
    /// <p>A description for the copied DB cluster parameter group.</p>
    pub target_db_cluster_parameter_group_description: std::option::Option<std::string::String>,
    /// <p>A list of tags.
    /// For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i>           
    /// </p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for CopyDBClusterParameterGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CopyDBClusterParameterGroupInput");
        formatter.field(
            "source_db_cluster_parameter_group_identifier",
            &self.source_db_cluster_parameter_group_identifier,
        );
        formatter.field(
            "target_db_cluster_parameter_group_identifier",
            &self.target_db_cluster_parameter_group_identifier,
        );
        formatter.field(
            "target_db_cluster_parameter_group_description",
            &self.target_db_cluster_parameter_group_description,
        );
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CancelExportTaskInput {
    /// <p>The identifier of the snapshot export task to cancel.</p>
    pub export_task_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CancelExportTaskInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CancelExportTaskInput");
        formatter.field("export_task_identifier", &self.export_task_identifier);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BacktrackDBClusterInput {
    /// <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is
    /// stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p>
    /// </li>
    /// <li>
    /// <p>First character must be a letter.</p>
    /// </li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code>
    /// </p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO
    /// 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia
    /// page.</a>
    /// </p>
    /// <note>
    /// <p>If the specified time isn't a consistent time for the DB cluster,
    /// Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain a valid ISO 8601 timestamp.</p>
    /// </li>
    /// <li>
    /// <p>Can't contain a timestamp set in the future.</p>
    /// </li>
    /// </ul>
    /// <p>Example: <code>2017-07-08T18:00Z</code>
    /// </p>
    pub backtrack_to: std::option::Option<smithy_types::Instant>,
    /// <p>A value that indicates whether to force the DB cluster to backtrack when binary logging is
    /// enabled. Otherwise, an error occurs when binary logging is enabled.</p>
    pub force: std::option::Option<bool>,
    /// <p>A value that indicates whether to backtrack the DB cluster to the earliest possible
    /// backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest
    /// backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest
    /// backtrack time, an error occurs.</p>
    pub use_earliest_time_on_point_in_time_unavailable: std::option::Option<bool>,
}
impl std::fmt::Debug for BacktrackDBClusterInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BacktrackDBClusterInput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field("backtrack_to", &self.backtrack_to);
        formatter.field("force", &self.force);
        formatter.field(
            "use_earliest_time_on_point_in_time_unavailable",
            &self.use_earliest_time_on_point_in_time_unavailable,
        );
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AuthorizeDBSecurityGroupIngressInput {
    /// <p>The name of the DB security group to add authorization to.</p>
    pub db_security_group_name: std::option::Option<std::string::String>,
    /// <p>The IP range to authorize.</p>
    pub cidrip: std::option::Option<std::string::String>,
    /// <p>
    /// Name of the EC2 security group to authorize.
    /// For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
    /// Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code>
    /// or <code>EC2SecurityGroupId</code> must be provided.
    /// </p>
    pub ec2_security_group_name: std::option::Option<std::string::String>,
    /// <p>
    /// Id of the EC2 security group to authorize.
    /// For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
    /// Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.
    /// </p>
    pub ec2_security_group_id: std::option::Option<std::string::String>,
    /// <p>
    /// AWS account number of the owner of the EC2 security group
    /// specified in the <code>EC2SecurityGroupName</code> parameter.
    /// The AWS access key ID isn't an acceptable value.
    /// For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided.
    /// Otherwise, <code>EC2SecurityGroupOwnerId</code> and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.
    /// </p>
    pub ec2_security_group_owner_id: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AuthorizeDBSecurityGroupIngressInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AuthorizeDBSecurityGroupIngressInput");
        formatter.field("db_security_group_name", &self.db_security_group_name);
        formatter.field("cidrip", &self.cidrip);
        formatter.field("ec2_security_group_name", &self.ec2_security_group_name);
        formatter.field("ec2_security_group_id", &self.ec2_security_group_id);
        formatter.field(
            "ec2_security_group_owner_id",
            &self.ec2_security_group_owner_id,
        );
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ApplyPendingMaintenanceActionInput {
    /// <p>The RDS Amazon Resource Name (ARN) of the resource that the
    /// pending maintenance action applies to. For information about  
    /// creating an ARN,
    /// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
    /// Constructing an RDS Amazon Resource Name (ARN)</a>.</p>
    pub resource_identifier: std::option::Option<std::string::String>,
    /// <p>The pending maintenance action to apply to this resource.</p>
    /// <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>,
    /// <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code>
    /// </p>
    pub apply_action: std::option::Option<std::string::String>,
    /// <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in
    /// request of type <code>immediate</code> can't be undone.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p>
    /// <code>immediate</code> - Apply the maintenance action immediately.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>next-maintenance</code> - Apply the maintenance action during
    /// the next maintenance window for the resource.</p>
    /// </li>
    /// <li>
    /// <p>
    /// <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code>
    /// opt-in requests.</p>
    /// </li>
    /// </ul>
    pub opt_in_type: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ApplyPendingMaintenanceActionInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ApplyPendingMaintenanceActionInput");
        formatter.field("resource_identifier", &self.resource_identifier);
        formatter.field("apply_action", &self.apply_action);
        formatter.field("opt_in_type", &self.opt_in_type);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddTagsToResourceInput {
    /// <p>The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about  
    /// creating an ARN,
    /// see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing">
    /// Constructing an RDS Amazon Resource Name (ARN)</a>.</p>
    pub resource_name: std::option::Option<std::string::String>,
    /// <p>The tags to be assigned to the Amazon RDS resource.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for AddTagsToResourceInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddTagsToResourceInput");
        formatter.field("resource_name", &self.resource_name);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddSourceIdentifierToSubscriptionInput {
    /// <p>The name of the RDS event notification subscription you want to add a source identifier to.</p>
    pub subscription_name: std::option::Option<std::string::String>,
    /// <p>The identifier of the event source to be added.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If the source type is a DB instance, a <code>DBInstanceIdentifier</code> value must be supplied.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB cluster, a <code>DBClusterIdentifier</code> value must be supplied.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> value must be supplied.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> value must be supplied.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> value must be supplied.</p>
    /// </li>
    /// <li>
    /// <p>If the source type is a DB cluster snapshot, a <code>DBClusterSnapshotIdentifier</code> value must be supplied.</p>
    /// </li>
    /// </ul>
    pub source_identifier: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AddSourceIdentifierToSubscriptionInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddSourceIdentifierToSubscriptionInput");
        formatter.field("subscription_name", &self.subscription_name);
        formatter.field("source_identifier", &self.source_identifier);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddRoleToDBInstanceInput {
    /// <p>The name of the DB instance to associate the IAM role with.</p>
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role to associate with the DB instance, for
    /// example <code>arn:aws:iam::123456789012:role/AccessRole</code>. </p>
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The name of the feature for the DB instance that the IAM role is to be associated with.
    /// For the list of supported feature names, see <a>DBEngineVersion</a>.
    /// </p>
    pub feature_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AddRoleToDBInstanceInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddRoleToDBInstanceInput");
        formatter.field("db_instance_identifier", &self.db_instance_identifier);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("feature_name", &self.feature_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AddRoleToDBClusterInput {
    /// <p>The name of the DB cluster to associate the IAM role with.</p>
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB
    /// cluster, for example, <code>arn:aws:iam::123456789012:role/AuroraAccessRole</code>.</p>
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The name of the feature for the DB cluster that the IAM role is to be associated with.
    /// For the list of supported feature names, see <a>DBEngineVersion</a>.</p>
    pub feature_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AddRoleToDBClusterInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AddRoleToDBClusterInput");
        formatter.field("db_cluster_identifier", &self.db_cluster_identifier);
        formatter.field("role_arn", &self.role_arn);
        formatter.field("feature_name", &self.feature_name);
        formatter.finish()
    }
}
