// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RestoreDBInstanceFromDBSnapshot`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`db_instance_identifier(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::db_instance_identifier) / [`set_db_instance_identifier(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_db_instance_identifier):<br>required: **true**<br><p>Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p>  <p>Constraints:</p>  <ul>   <li> <p>Must contain from 1 to 63 numbers, letters, or hyphens</p> </li>   <li> <p>First character must be a letter</p> </li>   <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li>  </ul>  <p>Example: <code>my-snapshot-id</code> </p><br>
    ///   - [`db_snapshot_identifier(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::db_snapshot_identifier) / [`set_db_snapshot_identifier(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_db_snapshot_identifier):<br>required: **false**<br><p>The identifier for the DB snapshot to restore from.</p>  <p>Constraints:</p>  <ul>   <li> <p>Must match the identifier of an existing DBSnapshot.</p> </li>   <li> <p>Can't be specified when <code>DBClusterSnapshotIdentifier</code> is specified.</p> </li>   <li> <p>Must be specified when <code>DBClusterSnapshotIdentifier</code> isn't specified.</p> </li>   <li> <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p> </li>  </ul><br>
    ///   - [`db_instance_class(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::db_instance_class) / [`set_db_instance_class(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_db_instance_class):<br>required: **false**<br><p>The compute and memory capacity of the Amazon RDS DB instance, for example db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p>  <p>Default: The same DBInstanceClass as the original DB instance.</p><br>
    ///   - [`port(i32)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::port) / [`set_port(Option<i32>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_port):<br>required: **false**<br><p>The port number on which the database accepts connections.</p>  <p>Default: The same port as the original DB instance</p>  <p>Constraints: Value must be <code>1150-65535</code> </p><br>
    ///   - [`availability_zone(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::availability_zone) / [`set_availability_zone(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_availability_zone):<br>required: **false**<br><p>The Availability Zone (AZ) where the DB instance will be created.</p>  <p>Default: A random, system-chosen Availability Zone.</p>  <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>  <p>Example: <code>us-east-1a</code> </p><br>
    ///   - [`db_subnet_group_name(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::db_subnet_group_name) / [`set_db_subnet_group_name(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_db_subnet_group_name):<br>required: **false**<br><p>The DB subnet group name to use for the new instance.</p>  <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>  <p>Example: <code>mydbsubnetgroup</code> </p><br>
    ///   - [`multi_az(bool)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::multi_az) / [`set_multi_az(Option<bool>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_multi_az):<br>required: **false**<br><p>Specifies whether the DB instance is a Multi-AZ deployment.</p>  <p>This setting doesn't apply to RDS Custom.</p>  <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p><br>
    ///   - [`publicly_accessible(bool)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::publicly_accessible) / [`set_publicly_accessible(Option<bool>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_publicly_accessible):<br>required: **false**<br><p>Specifies whether the DB instance is publicly accessible.</p>  <p>When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB instance's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>  <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>  <p>For more information, see <code>CreateDBInstance</code>.</p><br>
    ///   - [`auto_minor_version_upgrade(bool)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::auto_minor_version_upgrade) / [`set_auto_minor_version_upgrade(Option<bool>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_auto_minor_version_upgrade):<br>required: **false**<br><p>Specifies whether to automatically apply minor version upgrades to the DB instance during the maintenance window.</p>  <p>If you restore an RDS Custom DB instance, you must disable this parameter.</p><br>
    ///   - [`license_model(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::license_model) / [`set_license_model(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_license_model):<br>required: **false**<br><p>License model information for the restored DB instance.</p>  <p>This setting doesn't apply to RDS Custom.</p>  <p>Default: Same as source.</p>  <p>Valid Values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code> </p><br>
    ///   - [`db_name(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::db_name) / [`set_db_name(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_db_name):<br>required: **false**<br><p>The database name for the restored DB instance.</p>  <p>This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines. It also doesn't apply to RDS Custom DB instances.</p><br>
    ///   - [`engine(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::engine) / [`set_engine(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_engine):<br>required: **false**<br><p>The database engine to use for the new instance.</p>  <p>This setting doesn't apply to RDS Custom.</p>  <p>Default: The same as source</p>  <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p>  <p>Valid Values:</p>  <ul>   <li> <p> <code>mariadb</code> </p> </li>   <li> <p> <code>mysql</code> </p> </li>   <li> <p> <code>oracle-ee</code> </p> </li>   <li> <p> <code>oracle-ee-cdb</code> </p> </li>   <li> <p> <code>oracle-se2</code> </p> </li>   <li> <p> <code>oracle-se2-cdb</code> </p> </li>   <li> <p> <code>postgres</code> </p> </li>   <li> <p> <code>sqlserver-ee</code> </p> </li>   <li> <p> <code>sqlserver-se</code> </p> </li>   <li> <p> <code>sqlserver-ex</code> </p> </li>   <li> <p> <code>sqlserver-web</code> </p> </li>  </ul><br>
    ///   - [`iops(i32)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::iops) / [`set_iops(Option<i32>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_iops):<br>required: **false**<br><p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts.</p>  <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide.</i> </p>  <p>Constraints: Must be an integer greater than 1000.</p><br>
    ///   - [`option_group_name(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::option_group_name) / [`set_option_group_name(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_option_group_name):<br>required: **false**<br><p>The name of the option group to be used for the restored DB instance.</p>  <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance after it is associated with a DB instance.</p>  <p>This setting doesn't apply to RDS Custom.</p><br>
    ///   - [`tags(Tag)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_tags):<br>required: **false**<br><p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p><br>
    ///   - [`storage_type(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::storage_type) / [`set_storage_type(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_storage_type):<br>required: **false**<br><p>Specifies the storage type to be associated with the DB instance.</p>  <p>Valid Values: <code>gp2 | gp3 | io1 | standard</code> </p>  <p>If you specify <code>io1</code> or <code>gp3</code>, you must also include a value for the <code>Iops</code> parameter.</p>  <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code> </p><br>
    ///   - [`tde_credential_arn(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::tde_credential_arn) / [`set_tde_credential_arn(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_tde_credential_arn):<br>required: **false**<br><p>The ARN from the key store with which to associate the instance for TDE encryption.</p>  <p>This setting doesn't apply to RDS Custom.</p><br>
    ///   - [`tde_credential_password(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::tde_credential_password) / [`set_tde_credential_password(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_tde_credential_password):<br>required: **false**<br><p>The password for the given ARN from the key store in order to access the device.</p>  <p>This setting doesn't apply to RDS Custom.</p><br>
    ///   - [`vpc_security_group_ids(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::vpc_security_group_ids) / [`set_vpc_security_group_ids(Option<Vec::<String>>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_vpc_security_group_ids):<br>required: **false**<br><p>A list of EC2 VPC security groups to associate with this DB instance.</p>  <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p><br>
    ///   - [`domain(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::domain) / [`set_domain(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_domain):<br>required: **false**<br><p>Specify the Active Directory directory ID to restore the DB instance in. The domain/ must be created prior to this operation. Currently, you can create only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>  <p>This setting doesn't apply to RDS Custom.</p><br>
    ///   - [`domain_fqdn(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::domain_fqdn) / [`set_domain_fqdn(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_domain_fqdn):<br>required: **false**<br><p>The fully qualified domain name (FQDN) of an Active Directory domain.</p>  <p>Constraints:</p>  <ul>   <li> <p>Can't be longer than 64 characters.</p> </li>  </ul>  <p>Example: <code>mymanagedADtest.mymanagedAD.mydomain</code> </p><br>
    ///   - [`domain_ou(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::domain_ou) / [`set_domain_ou(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_domain_ou):<br>required: **false**<br><p>The Active Directory organizational unit for your DB instance to join.</p>  <p>Constraints:</p>  <ul>   <li> <p>Must be in the distinguished name format.</p> </li>   <li> <p>Can't be longer than 64 characters.</p> </li>  </ul>  <p>Example: <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code> </p><br>
    ///   - [`domain_auth_secret_arn(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::domain_auth_secret_arn) / [`set_domain_auth_secret_arn(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_domain_auth_secret_arn):<br>required: **false**<br><p>The ARN for the Secrets Manager secret with the credentials for the user joining the domain.</p>  <p>Constraints:</p>  <ul>   <li> <p>Can't be longer than 64 characters.</p> </li>  </ul>  <p>Example: <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code> </p><br>
    ///   - [`domain_dns_ips(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::domain_dns_ips) / [`set_domain_dns_ips(Option<Vec::<String>>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_domain_dns_ips):<br>required: **false**<br><p>The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.</p>  <p>Constraints:</p>  <ul>   <li> <p>Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.</p> </li>  </ul>  <p>Example: <code>123.124.125.126,234.235.236.237</code> </p><br>
    ///   - [`copy_tags_to_snapshot(bool)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::copy_tags_to_snapshot) / [`set_copy_tags_to_snapshot(Option<bool>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_copy_tags_to_snapshot):<br>required: **false**<br><p>Specifies whether to copy all tags from the restored DB instance to snapshots of the DB instance.</p>  <p>In most cases, tags aren't copied by default. However, when you restore a DB instance from a DB snapshot, RDS checks whether you specify new tags. If yes, the new tags are added to the restored DB instance. If there are no new tags, RDS looks for the tags from the source DB instance for the DB snapshot, and then adds those tags to the restored DB instance.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html#USER_Tagging.CopyTags"> Copying tags to DB instance snapshots</a> in the <i>Amazon RDS User Guide</i>.</p><br>
    ///   - [`domain_iam_role_name(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::domain_iam_role_name) / [`set_domain_iam_role_name(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_domain_iam_role_name):<br>required: **false**<br><p>The name of the IAM role to use when making API calls to the Directory Service.</p>  <p>This setting doesn't apply to RDS Custom DB instances.</p><br>
    ///   - [`enable_iam_database_authentication(bool)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::enable_iam_database_authentication) / [`set_enable_iam_database_authentication(Option<bool>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_enable_iam_database_authentication):<br>required: **false**<br><p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>  <p>For more information about IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i> </p>  <p>This setting doesn't apply to RDS Custom.</p><br>
    ///   - [`enable_cloudwatch_logs_exports(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::enable_cloudwatch_logs_exports) / [`set_enable_cloudwatch_logs_exports(Option<Vec::<String>>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_enable_cloudwatch_logs_exports):<br>required: **false**<br><p>The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>  <p>This setting doesn't apply to RDS Custom.</p><br>
    ///   - [`processor_features(ProcessorFeature)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::processor_features) / [`set_processor_features(Option<Vec::<ProcessorFeature>>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_processor_features):<br>required: **false**<br><p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>  <p>This setting doesn't apply to RDS Custom.</p><br>
    ///   - [`use_default_processor_features(bool)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::use_default_processor_features) / [`set_use_default_processor_features(Option<bool>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_use_default_processor_features):<br>required: **false**<br><p>Specifies whether the DB instance class of the DB instance uses its default processor features.</p>  <p>This setting doesn't apply to RDS Custom.</p><br>
    ///   - [`db_parameter_group_name(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::db_parameter_group_name) / [`set_db_parameter_group_name(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_db_parameter_group_name):<br>required: **false**<br><p>The name of the DB parameter group to associate with this DB instance.</p>  <p>If you don't specify a value for <code>DBParameterGroupName</code>, then RDS uses the default <code>DBParameterGroup</code> for the specified DB engine.</p>  <p>This setting doesn't apply to RDS Custom.</p>  <p>Constraints:</p>  <ul>   <li> <p>If supplied, must match the name of an existing DBParameterGroup.</p> </li>   <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li>   <li> <p>First character must be a letter.</p> </li>   <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>  </ul><br>
    ///   - [`deletion_protection(bool)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::deletion_protection) / [`set_deletion_protection(Option<bool>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_deletion_protection):<br>required: **false**<br><p>Specifies whether to enable deletion protection for the DB instance. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p><br>
    ///   - [`enable_customer_owned_ip(bool)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::enable_customer_owned_ip) / [`set_enable_customer_owned_ip(Option<bool>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_enable_customer_owned_ip):<br>required: **false**<br><p>Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>  <p>A <i>CoIP</i> provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>  <p>This setting doesn't apply to RDS Custom.</p>  <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>  <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p><br>
    ///   - [`custom_iam_instance_profile(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::custom_iam_instance_profile) / [`set_custom_iam_instance_profile(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_custom_iam_instance_profile):<br>required: **false**<br><p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:</p>  <ul>   <li> <p>The profile must exist in your account.</p> </li>   <li> <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p> </li>   <li> <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p> </li>  </ul>  <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>  <p>This setting is required for RDS Custom.</p><br>
    ///   - [`backup_target(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::backup_target) / [`set_backup_target(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_backup_target):<br>required: **false**<br><p>Specifies where automated backups and manual snapshots are stored for the restored DB instance.</p>  <p>Possible values are <code>outposts</code> (Amazon Web Services Outposts) and <code>region</code> (Amazon Web Services Region). The default is <code>region</code>.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p><br>
    ///   - [`network_type(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::network_type) / [`set_network_type(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_network_type):<br>required: **false**<br><p>The network type of the DB instance.</p>  <p>Valid Values:</p>  <ul>   <li> <p> <code>IPV4</code> </p> </li>   <li> <p> <code>DUAL</code> </p> </li>  </ul>  <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide.</i> </p><br>
    ///   - [`storage_throughput(i32)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::storage_throughput) / [`set_storage_throughput(Option<i32>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_storage_throughput):<br>required: **false**<br><p>Specifies the storage throughput value for the DB instance.</p>  <p>This setting doesn't apply to RDS Custom or Amazon Aurora.</p><br>
    ///   - [`db_cluster_snapshot_identifier(impl Into<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::db_cluster_snapshot_identifier) / [`set_db_cluster_snapshot_identifier(Option<String>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_db_cluster_snapshot_identifier):<br>required: **false**<br><p>The identifier for the RDS for MySQL Multi-AZ DB cluster snapshot to restore from.</p>  <p>For more information on Multi-AZ DB clusters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html"> Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.</p>  <p>Constraints:</p>  <ul>   <li> <p>Must match the identifier of an existing Multi-AZ DB cluster snapshot.</p> </li>   <li> <p>Can't be specified when <code>DBSnapshotIdentifier</code> is specified.</p> </li>   <li> <p>Must be specified when <code>DBSnapshotIdentifier</code> isn't specified.</p> </li>   <li> <p>If you are restoring from a shared manual Multi-AZ DB cluster snapshot, the <code>DBClusterSnapshotIdentifier</code> must be the ARN of the shared snapshot.</p> </li>   <li> <p>Can't be the identifier of an Aurora DB cluster snapshot.</p> </li>   <li> <p>Can't be the identifier of an RDS for PostgreSQL Multi-AZ DB cluster snapshot.</p> </li>  </ul><br>
    ///   - [`allocated_storage(i32)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::allocated_storage) / [`set_allocated_storage(Option<i32>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_allocated_storage):<br>required: **false**<br><p>The amount of storage (in gibibytes) to allocate initially for the DB instance. Follow the allocation rules specified in CreateDBInstance.</p> <note>   <p>Be sure to allocate enough storage for your new DB instance so that the restore operation can succeed. You can also allocate additional storage for future growth.</p>  </note><br>
    ///   - [`dedicated_log_volume(bool)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::dedicated_log_volume) / [`set_dedicated_log_volume(Option<bool>)`](crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::set_dedicated_log_volume):<br>required: **false**<br><p>Specifies whether to enable a dedicated log volume (DLV) for the DB instance.</p><br>
    /// - On success, responds with [`RestoreDbInstanceFromDbSnapshotOutput`](crate::operation::restore_db_instance_from_db_snapshot::RestoreDbInstanceFromDbSnapshotOutput) with field(s):
    ///   - [`db_instance(Option<DbInstance>)`](crate::operation::restore_db_instance_from_db_snapshot::RestoreDbInstanceFromDbSnapshotOutput::db_instance): <p>Contains the details of an Amazon RDS DB instance.</p>  <p>This data type is used as a response element in the operations <code>CreateDBInstance</code>, <code>CreateDBInstanceReadReplica</code>, <code>DeleteDBInstance</code>, <code>DescribeDBInstances</code>, <code>ModifyDBInstance</code>, <code>PromoteReadReplica</code>, <code>RebootDBInstance</code>, <code>RestoreDBInstanceFromDBSnapshot</code>, <code>RestoreDBInstanceFromS3</code>, <code>RestoreDBInstanceToPointInTime</code>, <code>StartDBInstance</code>, and <code>StopDBInstance</code>.</p>
    /// - On failure, responds with [`SdkError<RestoreDBInstanceFromDBSnapshotError>`](crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError)
    pub fn restore_db_instance_from_db_snapshot(
        &self,
    ) -> crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder {
        crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDBInstanceFromDBSnapshotFluentBuilder::new(self.handle.clone())
    }
}
