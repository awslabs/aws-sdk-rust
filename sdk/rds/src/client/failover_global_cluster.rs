// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`FailoverGlobalCluster`](crate::operation::failover_global_cluster::builders::FailoverGlobalClusterFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`global_cluster_identifier(impl Into<String>)`](crate::operation::failover_global_cluster::builders::FailoverGlobalClusterFluentBuilder::global_cluster_identifier) / [`set_global_cluster_identifier(Option<String>)`](crate::operation::failover_global_cluster::builders::FailoverGlobalClusterFluentBuilder::set_global_cluster_identifier):<br>required: **true**<br><p>The identifier of the global database cluster (Aurora global database) this operation should apply to. The identifier is the unique key assigned by the user when the Aurora global database is created. In other words, it's the name of the Aurora global database.</p>  <p>Constraints:</p>  <ul>   <li> <p>Must match the identifier of an existing global database cluster.</p> </li>  </ul><br>
    ///   - [`target_db_cluster_identifier(impl Into<String>)`](crate::operation::failover_global_cluster::builders::FailoverGlobalClusterFluentBuilder::target_db_cluster_identifier) / [`set_target_db_cluster_identifier(Option<String>)`](crate::operation::failover_global_cluster::builders::FailoverGlobalClusterFluentBuilder::set_target_db_cluster_identifier):<br>required: **true**<br><p>The identifier of the secondary Aurora DB cluster that you want to promote to the primary for the global database cluster. Use the Amazon Resource Name (ARN) for the identifier so that Aurora can locate the cluster in its Amazon Web Services Region.</p><br>
    ///   - [`allow_data_loss(bool)`](crate::operation::failover_global_cluster::builders::FailoverGlobalClusterFluentBuilder::allow_data_loss) / [`set_allow_data_loss(Option<bool>)`](crate::operation::failover_global_cluster::builders::FailoverGlobalClusterFluentBuilder::set_allow_data_loss):<br>required: **false**<br><p>Specifies whether to allow data loss for this global database cluster operation. Allowing data loss triggers a global failover operation.</p>  <p>If you don't specify <code>AllowDataLoss</code>, the global database cluster operation defaults to a switchover.</p>  <p>Constraints:</p>  <ul>   <li> <p>Can't be specified together with the <code>Switchover</code> parameter.</p> </li>  </ul><br>
    ///   - [`switchover(bool)`](crate::operation::failover_global_cluster::builders::FailoverGlobalClusterFluentBuilder::switchover) / [`set_switchover(Option<bool>)`](crate::operation::failover_global_cluster::builders::FailoverGlobalClusterFluentBuilder::set_switchover):<br>required: **false**<br><p>Specifies whether to switch over this global database cluster.</p>  <p>Constraints:</p>  <ul>   <li> <p>Can't be specified together with the <code>AllowDataLoss</code> parameter.</p> </li>  </ul><br>
    /// - On success, responds with [`FailoverGlobalClusterOutput`](crate::operation::failover_global_cluster::FailoverGlobalClusterOutput) with field(s):
    ///   - [`global_cluster(Option<GlobalCluster>)`](crate::operation::failover_global_cluster::FailoverGlobalClusterOutput::global_cluster): <p>A data type representing an Aurora global database.</p>
    /// - On failure, responds with [`SdkError<FailoverGlobalClusterError>`](crate::operation::failover_global_cluster::FailoverGlobalClusterError)
    pub fn failover_global_cluster(&self) -> crate::operation::failover_global_cluster::builders::FailoverGlobalClusterFluentBuilder {
        crate::operation::failover_global_cluster::builders::FailoverGlobalClusterFluentBuilder::new(self.handle.clone())
    }
}
