// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeDBEngineVersions`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`engine(impl Into<String>)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::engine) / [`set_engine(Option<String>)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::set_engine): <p>The database engine to return.</p>  <p>Valid Values:</p>  <ul>   <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li>   <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p> </li>   <li> <p> <code>aurora-postgresql</code> </p> </li>   <li> <p> <code>mariadb</code> </p> </li>   <li> <p> <code>mysql</code> </p> </li>   <li> <p> <code>oracle-ee</code> </p> </li>   <li> <p> <code>oracle-ee-cdb</code> </p> </li>   <li> <p> <code>oracle-se2</code> </p> </li>   <li> <p> <code>oracle-se2-cdb</code> </p> </li>   <li> <p> <code>postgres</code> </p> </li>   <li> <p> <code>sqlserver-ee</code> </p> </li>   <li> <p> <code>sqlserver-se</code> </p> </li>   <li> <p> <code>sqlserver-ex</code> </p> </li>   <li> <p> <code>sqlserver-web</code> </p> </li>  </ul>
    ///   - [`engine_version(impl Into<String>)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::engine_version) / [`set_engine_version(Option<String>)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::set_engine_version): <p>The database engine version to return.</p>  <p>Example: <code>5.1.49</code> </p>
    ///   - [`db_parameter_group_family(impl Into<String>)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::db_parameter_group_family) / [`set_db_parameter_group_family(Option<String>)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::set_db_parameter_group_family): <p>The name of a specific DB parameter group family to return details for.</p>  <p>Constraints:</p>  <ul>   <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li>  </ul>
    ///   - [`filters(Vec<Filter>)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::set_filters): <p>A filter that specifies one or more DB engine versions to describe.</p>  <p>Supported filters:</p>  <ul>   <li> <p> <code>db-parameter-group-family</code> - Accepts parameter groups family names. The results list only includes information about the DB engine versions for these parameter group families.</p> </li>   <li> <p> <code>engine</code> - Accepts engine names. The results list only includes information about the DB engine versions for these engines.</p> </li>   <li> <p> <code>engine-mode</code> - Accepts DB engine modes. The results list only includes information about the DB engine versions for these engine modes. Valid DB engine modes are the following:</p>    <ul>     <li> <p> <code>global</code> </p> </li>     <li> <p> <code>multimaster</code> </p> </li>     <li> <p> <code>parallelquery</code> </p> </li>     <li> <p> <code>provisioned</code> </p> </li>     <li> <p> <code>serverless</code> </p> </li>    </ul> </li>   <li> <p> <code>engine-version</code> - Accepts engine versions. The results list only includes information about the DB engine versions for these engine versions.</p> </li>   <li> <p> <code>status</code> - Accepts engine version statuses. The results list only includes information about the DB engine versions for these statuses. Valid statuses are the following:</p>    <ul>     <li> <p> <code>available</code> </p> </li>     <li> <p> <code>deprecated</code> </p> </li>    </ul> </li>  </ul>
    ///   - [`max_records(i32)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::max_records) / [`set_max_records(Option<i32>)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::set_max_records): <p>The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>  <p>Default: 100</p>  <p>Constraints: Minimum 20, maximum 100.</p>
    ///   - [`marker(impl Into<String>)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::marker) / [`set_marker(Option<String>)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::set_marker): <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    ///   - [`default_only(bool)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::default_only) / [`set_default_only(bool)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::set_default_only): <p>A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.</p>
    ///   - [`list_supported_character_sets(bool)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::list_supported_character_sets) / [`set_list_supported_character_sets(Option<bool>)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::set_list_supported_character_sets): <p>A value that indicates whether to list the supported character sets for each engine version.</p>  <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.</p>  <p>For RDS Custom, the default is not to list supported character sets. If you set <code>ListSupportedCharacterSets</code> to <code>true</code>, RDS Custom returns no results.</p>
    ///   - [`list_supported_timezones(bool)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::list_supported_timezones) / [`set_list_supported_timezones(Option<bool>)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::set_list_supported_timezones): <p>A value that indicates whether to list the supported time zones for each engine version.</p>  <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.</p>  <p>For RDS Custom, the default is not to list supported time zones. If you set <code>ListSupportedTimezones</code> to <code>true</code>, RDS Custom returns no results.</p>
    ///   - [`include_all(bool)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::include_all) / [`set_include_all(Option<bool>)`](crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::set_include_all): <p>A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.</p>
    /// - On success, responds with [`DescribeDbEngineVersionsOutput`](crate::operation::describe_db_engine_versions::DescribeDbEngineVersionsOutput) with field(s):
    ///   - [`marker(Option<String>)`](crate::operation::describe_db_engine_versions::DescribeDbEngineVersionsOutput::marker): <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    ///   - [`db_engine_versions(Option<Vec<DbEngineVersion>>)`](crate::operation::describe_db_engine_versions::DescribeDbEngineVersionsOutput::db_engine_versions): <p>A list of <code>DBEngineVersion</code> elements.</p>
    /// - On failure, responds with [`SdkError<DescribeDBEngineVersionsError>`](crate::operation::describe_db_engine_versions::DescribeDBEngineVersionsError)
    pub fn describe_db_engine_versions(&self) -> crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder{
        crate::operation::describe_db_engine_versions::builders::DescribeDBEngineVersionsFluentBuilder::new(self.handle.clone())
    }
}
