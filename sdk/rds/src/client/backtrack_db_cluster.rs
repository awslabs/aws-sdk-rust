// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`BacktrackDBCluster`](crate::client::fluent_builders::BacktrackDBCluster) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`db_cluster_identifier(impl Into<String>)`](crate::client::fluent_builders::BacktrackDBCluster::db_cluster_identifier) / [`set_db_cluster_identifier(Option<String>)`](crate::client::fluent_builders::BacktrackDBCluster::set_db_cluster_identifier): <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p>  <p>Constraints:</p>  <ul>   <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>   <li> <p>First character must be a letter.</p> </li>   <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>  </ul>  <p>Example: <code>my-cluster1</code> </p>
    ///   - [`backtrack_to(DateTime)`](crate::client::fluent_builders::BacktrackDBCluster::backtrack_to) / [`set_backtrack_to(Option<DateTime>)`](crate::client::fluent_builders::BacktrackDBCluster::set_backtrack_to): <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note>   <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p>  </note>  <p>Constraints:</p>  <ul>   <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li>   <li> <p>Can't contain a timestamp set in the future.</p> </li>  </ul>  <p>Example: <code>2017-07-08T18:00Z</code> </p>
    ///   - [`force(bool)`](crate::client::fluent_builders::BacktrackDBCluster::force) / [`set_force(Option<bool>)`](crate::client::fluent_builders::BacktrackDBCluster::set_force): <p>A value that indicates whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.</p>
    ///   - [`use_earliest_time_on_point_in_time_unavailable(bool)`](crate::client::fluent_builders::BacktrackDBCluster::use_earliest_time_on_point_in_time_unavailable) / [`set_use_earliest_time_on_point_in_time_unavailable(Option<bool>)`](crate::client::fluent_builders::BacktrackDBCluster::set_use_earliest_time_on_point_in_time_unavailable): <p>A value that indicates whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.</p>
    /// - On success, responds with [`BacktrackDbClusterOutput`](crate::output::BacktrackDbClusterOutput) with field(s):
    ///   - [`db_cluster_identifier(Option<String>)`](crate::output::BacktrackDbClusterOutput::db_cluster_identifier): <p>Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.</p>
    ///   - [`backtrack_identifier(Option<String>)`](crate::output::BacktrackDbClusterOutput::backtrack_identifier): <p>Contains the backtrack identifier.</p>
    ///   - [`backtrack_to(Option<DateTime>)`](crate::output::BacktrackDbClusterOutput::backtrack_to): <p>The timestamp of the time to which the DB cluster was backtracked.</p>
    ///   - [`backtracked_from(Option<DateTime>)`](crate::output::BacktrackDbClusterOutput::backtracked_from): <p>The timestamp of the time from which the DB cluster was backtracked.</p>
    ///   - [`backtrack_request_creation_time(Option<DateTime>)`](crate::output::BacktrackDbClusterOutput::backtrack_request_creation_time): <p>The timestamp of the time at which the backtrack was requested.</p>
    ///   - [`status(Option<String>)`](crate::output::BacktrackDbClusterOutput::status): <p>The status of the backtrack. This property returns one of the following values:</p>  <ul>   <li> <p> <code>applying</code> - The backtrack is currently being applied to or rolled back from the DB cluster.</p> </li>   <li> <p> <code>completed</code> - The backtrack has successfully been applied to or rolled back from the DB cluster.</p> </li>   <li> <p> <code>failed</code> - An error occurred while the backtrack was applied to or rolled back from the DB cluster.</p> </li>   <li> <p> <code>pending</code> - The backtrack is currently pending application to or rollback from the DB cluster.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<BacktrackDBClusterError>`](crate::error::BacktrackDBClusterError)
    pub fn backtrack_db_cluster(&self) -> crate::client::fluent_builders::BacktrackDBCluster {
        crate::client::fluent_builders::BacktrackDBCluster::new(self.handle.clone())
    }
}
