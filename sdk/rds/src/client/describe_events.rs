// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeEvents`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`source_identifier(impl Into<String>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::source_identifier) / [`set_source_identifier(Option<String>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::set_source_identifier):<br>required: **false**<br><p>The identifier of the event source for which events are returned. If not specified, then all sources are included in the response.</p>  <p>Constraints:</p>  <ul>   <li> <p>If <code>SourceIdentifier</code> is supplied, <code>SourceType</code> must also be provided.</p> </li>   <li> <p>If the source type is a DB instance, a <code>DBInstanceIdentifier</code> value must be supplied.</p> </li>   <li> <p>If the source type is a DB cluster, a <code>DBClusterIdentifier</code> value must be supplied.</p> </li>   <li> <p>If the source type is a DB parameter group, a <code>DBParameterGroupName</code> value must be supplied.</p> </li>   <li> <p>If the source type is a DB security group, a <code>DBSecurityGroupName</code> value must be supplied.</p> </li>   <li> <p>If the source type is a DB snapshot, a <code>DBSnapshotIdentifier</code> value must be supplied.</p> </li>   <li> <p>If the source type is a DB cluster snapshot, a <code>DBClusterSnapshotIdentifier</code> value must be supplied.</p> </li>   <li> <p>If the source type is an RDS Proxy, a <code>DBProxyName</code> value must be supplied.</p> </li>   <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>  </ul><br>
    ///   - [`source_type(SourceType)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::source_type) / [`set_source_type(Option<SourceType>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::set_source_type):<br>required: **false**<br><p>The event source to retrieve events for. If no value is specified, all events are returned.</p><br>
    ///   - [`start_time(DateTime)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::start_time) / [`set_start_time(Option<DateTime>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::set_start_time):<br>required: **false**<br><p>The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p>  <p>Example: 2009-07-08T18:00Z</p><br>
    ///   - [`end_time(DateTime)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::end_time) / [`set_end_time(Option<DateTime>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::set_end_time):<br>required: **false**<br><p>The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p>  <p>Example: 2009-07-08T18:00Z</p><br>
    ///   - [`duration(i32)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::duration) / [`set_duration(Option<i32>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::set_duration):<br>required: **false**<br><p>The number of minutes to retrieve events for.</p>  <p>Default: 60</p><br>
    ///   - [`event_categories(impl Into<String>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::event_categories) / [`set_event_categories(Option<Vec::<String>>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::set_event_categories):<br>required: **false**<br><p>A list of event categories that trigger notifications for a event notification subscription.</p><br>
    ///   - [`filters(Filter)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::filters) / [`set_filters(Option<Vec::<Filter>>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::set_filters):<br>required: **false**<br><p>This parameter isn't currently supported.</p><br>
    ///   - [`max_records(i32)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::max_records) / [`set_max_records(Option<i32>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::set_max_records):<br>required: **false**<br><p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>  <p>Default: 100</p>  <p>Constraints: Minimum 20, maximum 100.</p><br>
    ///   - [`marker(impl Into<String>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::marker) / [`set_marker(Option<String>)`](crate::operation::describe_events::builders::DescribeEventsFluentBuilder::set_marker):<br>required: **false**<br><p>An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p><br>
    /// - On success, responds with [`DescribeEventsOutput`](crate::operation::describe_events::DescribeEventsOutput) with field(s):
    ///   - [`marker(Option<String>)`](crate::operation::describe_events::DescribeEventsOutput::marker): <p>An optional pagination token provided by a previous Events request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    ///   - [`events(Option<Vec::<Event>>)`](crate::operation::describe_events::DescribeEventsOutput::events): <p>A list of <code>Event</code> instances.</p>
    /// - On failure, responds with [`SdkError<DescribeEventsError>`](crate::operation::describe_events::DescribeEventsError)
    pub fn describe_events(&self) -> crate::operation::describe_events::builders::DescribeEventsFluentBuilder {
        crate::operation::describe_events::builders::DescribeEventsFluentBuilder::new(self.handle.clone())
    }
}
