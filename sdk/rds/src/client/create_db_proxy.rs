// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateDBProxy`](crate::client::fluent_builders::CreateDBProxy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`db_proxy_name(impl Into<String>)`](crate::client::fluent_builders::CreateDBProxy::db_proxy_name) / [`set_db_proxy_name(Option<String>)`](crate::client::fluent_builders::CreateDBProxy::set_db_proxy_name): <p>The identifier for the proxy. This name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
    ///   - [`engine_family(EngineFamily)`](crate::client::fluent_builders::CreateDBProxy::engine_family) / [`set_engine_family(Option<EngineFamily>)`](crate::client::fluent_builders::CreateDBProxy::set_engine_family): <p>The kinds of databases that the proxy can connect to. This value determines which database network protocol the proxy recognizes when it interprets network traffic to and from the database. For Aurora MySQL, RDS for MariaDB, and RDS for MySQL databases, specify <code>MYSQL</code>. For Aurora PostgreSQL and RDS for PostgreSQL databases, specify <code>POSTGRESQL</code>. For RDS for Microsoft SQL Server, specify <code>SQLSERVER</code>.</p>
    ///   - [`auth(Vec<UserAuthConfig>)`](crate::client::fluent_builders::CreateDBProxy::auth) / [`set_auth(Option<Vec<UserAuthConfig>>)`](crate::client::fluent_builders::CreateDBProxy::set_auth): <p>The authorization mechanism that the proxy uses.</p>
    ///   - [`role_arn(impl Into<String>)`](crate::client::fluent_builders::CreateDBProxy::role_arn) / [`set_role_arn(Option<String>)`](crate::client::fluent_builders::CreateDBProxy::set_role_arn): <p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.</p>
    ///   - [`vpc_subnet_ids(Vec<String>)`](crate::client::fluent_builders::CreateDBProxy::vpc_subnet_ids) / [`set_vpc_subnet_ids(Option<Vec<String>>)`](crate::client::fluent_builders::CreateDBProxy::set_vpc_subnet_ids): <p>One or more VPC subnet IDs to associate with the new proxy.</p>
    ///   - [`vpc_security_group_ids(Vec<String>)`](crate::client::fluent_builders::CreateDBProxy::vpc_security_group_ids) / [`set_vpc_security_group_ids(Option<Vec<String>>)`](crate::client::fluent_builders::CreateDBProxy::set_vpc_security_group_ids): <p>One or more VPC security group IDs to associate with the new proxy.</p>
    ///   - [`require_tls(bool)`](crate::client::fluent_builders::CreateDBProxy::require_tls) / [`set_require_tls(bool)`](crate::client::fluent_builders::CreateDBProxy::set_require_tls): <p>A Boolean parameter that specifies whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy.</p>
    ///   - [`idle_client_timeout(i32)`](crate::client::fluent_builders::CreateDBProxy::idle_client_timeout) / [`set_idle_client_timeout(Option<i32>)`](crate::client::fluent_builders::CreateDBProxy::set_idle_client_timeout): <p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.</p>
    ///   - [`debug_logging(bool)`](crate::client::fluent_builders::CreateDBProxy::debug_logging) / [`set_debug_logging(bool)`](crate::client::fluent_builders::CreateDBProxy::set_debug_logging): <p>Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateDBProxy::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateDBProxy::set_tags): <p>An optional set of key-value pairs to associate arbitrary data of your choosing with the proxy.</p>
    /// - On success, responds with [`CreateDbProxyOutput`](crate::output::CreateDbProxyOutput) with field(s):
    ///   - [`db_proxy(Option<DbProxy>)`](crate::output::CreateDbProxyOutput::db_proxy): <p>The <code>DBProxy</code> structure corresponding to the new proxy.</p>
    /// - On failure, responds with [`SdkError<CreateDBProxyError>`](crate::error::CreateDBProxyError)
    pub fn create_db_proxy(&self) -> crate::client::fluent_builders::CreateDBProxy {
        crate::client::fluent_builders::CreateDBProxy::new(self.handle.clone())
    }
}
