// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RebootDBShardGroup`](crate::operation::reboot_db_shard_group::builders::RebootDBShardGroupFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`db_shard_group_identifier(impl Into<String>)`](crate::operation::reboot_db_shard_group::builders::RebootDBShardGroupFluentBuilder::db_shard_group_identifier) / [`set_db_shard_group_identifier(Option<String>)`](crate::operation::reboot_db_shard_group::builders::RebootDBShardGroupFluentBuilder::set_db_shard_group_identifier):<br>required: **true**<br><p>The name of the DB shard group to reboot.</p><br>
    /// - On success, responds with [`RebootDbShardGroupOutput`](crate::operation::reboot_db_shard_group::RebootDbShardGroupOutput) with field(s):
    ///   - [`db_shard_group_resource_id(Option<String>)`](crate::operation::reboot_db_shard_group::RebootDbShardGroupOutput::db_shard_group_resource_id): <p>The Amazon Web Services Region-unique, immutable identifier for the DB shard group.</p>
    ///   - [`db_shard_group_identifier(Option<String>)`](crate::operation::reboot_db_shard_group::RebootDbShardGroupOutput::db_shard_group_identifier): <p>The name of the DB shard group.</p>
    ///   - [`db_cluster_identifier(Option<String>)`](crate::operation::reboot_db_shard_group::RebootDbShardGroupOutput::db_cluster_identifier): <p>The name of the primary DB cluster for the DB shard group.</p>
    ///   - [`max_acu(Option<f64>)`](crate::operation::reboot_db_shard_group::RebootDbShardGroupOutput::max_acu): <p>The maximum capacity of the DB shard group in Aurora capacity units (ACUs).</p>
    ///   - [`min_acu(Option<f64>)`](crate::operation::reboot_db_shard_group::RebootDbShardGroupOutput::min_acu): <p>The minimum capacity of the DB shard group in Aurora capacity units (ACUs).</p>
    ///   - [`compute_redundancy(Option<i32>)`](crate::operation::reboot_db_shard_group::RebootDbShardGroupOutput::compute_redundancy): <p>Specifies whether to create standby DB shard groups for the DB shard group. Valid values are the following:</p> <ul>  <li>   <p>0 - Creates a DB shard group without a standby DB shard group. This is the default value.</p></li>  <li>   <p>1 - Creates a DB shard group with a standby DB shard group in a different Availability Zone (AZ).</p></li>  <li>   <p>2 - Creates a DB shard group with two standby DB shard groups in two different AZs.</p></li> </ul>
    ///   - [`status(Option<String>)`](crate::operation::reboot_db_shard_group::RebootDbShardGroupOutput::status): <p>The status of the DB shard group.</p>
    ///   - [`publicly_accessible(Option<bool>)`](crate::operation::reboot_db_shard_group::RebootDbShardGroupOutput::publicly_accessible): <p>Indicates whether the DB shard group is publicly accessible.</p> <p>When the DB shard group is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB shard group's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB shard group's VPC. Access to the DB shard group is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB shard group doesn't permit it.</p> <p>When the DB shard group isn't publicly accessible, it is an internal DB shard group with a DNS name that resolves to a private IP address.</p> <p>For more information, see <code>CreateDBShardGroup</code>.</p> <p>This setting is only for Aurora Limitless Database.</p>
    ///   - [`endpoint(Option<String>)`](crate::operation::reboot_db_shard_group::RebootDbShardGroupOutput::endpoint): <p>The connection endpoint for the DB shard group.</p>
    ///   - [`db_shard_group_arn(Option<String>)`](crate::operation::reboot_db_shard_group::RebootDbShardGroupOutput::db_shard_group_arn): <p>The Amazon Resource Name (ARN) for the DB shard group.</p>
    /// - On failure, responds with [`SdkError<RebootDBShardGroupError>`](crate::operation::reboot_db_shard_group::RebootDBShardGroupError)
    pub fn reboot_db_shard_group(&self) -> crate::operation::reboot_db_shard_group::builders::RebootDBShardGroupFluentBuilder {
        crate::operation::reboot_db_shard_group::builders::RebootDBShardGroupFluentBuilder::new(self.handle.clone())
    }
}
