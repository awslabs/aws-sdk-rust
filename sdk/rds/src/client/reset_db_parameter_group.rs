// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ResetDBParameterGroup`](crate::operation::reset_db_parameter_group::builders::ResetDBParameterGroupFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`db_parameter_group_name(impl Into<String>)`](crate::operation::reset_db_parameter_group::builders::ResetDBParameterGroupFluentBuilder::db_parameter_group_name) / [`set_db_parameter_group_name(Option<String>)`](crate::operation::reset_db_parameter_group::builders::ResetDBParameterGroupFluentBuilder::set_db_parameter_group_name): <p>The name of the DB parameter group.</p>  <p>Constraints:</p>  <ul>   <li> <p>Must match the name of an existing <code>DBParameterGroup</code>.</p> </li>  </ul>
    ///   - [`reset_all_parameters(bool)`](crate::operation::reset_db_parameter_group::builders::ResetDBParameterGroupFluentBuilder::reset_all_parameters) / [`set_reset_all_parameters(bool)`](crate::operation::reset_db_parameter_group::builders::ResetDBParameterGroupFluentBuilder::set_reset_all_parameters): <p>A value that indicates whether to reset all parameters in the DB parameter group to default values. By default, all parameters in the DB parameter group are reset to default values.</p>
    ///   - [`parameters(Vec<Parameter>)`](crate::operation::reset_db_parameter_group::builders::ResetDBParameterGroupFluentBuilder::parameters) / [`set_parameters(Option<Vec<Parameter>>)`](crate::operation::reset_db_parameter_group::builders::ResetDBParameterGroupFluentBuilder::set_parameters): <p>To reset the entire DB parameter group, specify the <code>DBParameterGroup</code> name and <code>ResetAllParameters</code> parameters. To reset specific parameters, provide a list of the following: <code>ParameterName</code> and <code>ApplyMethod</code>. A maximum of 20 parameters can be modified in a single request.</p>  <p> <b>MySQL</b> </p>  <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p>  <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p>  <p> <b>MariaDB</b> </p>  <p>Valid Values (for Apply method): <code>immediate</code> | <code>pending-reboot</code> </p>  <p>You can use the immediate value with dynamic parameters only. You can use the <code>pending-reboot</code> value for both dynamic and static parameters, and changes are applied when DB instance reboots.</p>  <p> <b>Oracle</b> </p>  <p>Valid Values (for Apply method): <code>pending-reboot</code> </p>
    /// - On success, responds with [`ResetDbParameterGroupOutput`](crate::operation::reset_db_parameter_group::ResetDbParameterGroupOutput) with field(s):
    ///   - [`db_parameter_group_name(Option<String>)`](crate::operation::reset_db_parameter_group::ResetDbParameterGroupOutput::db_parameter_group_name): <p>The name of the DB parameter group.</p>
    /// - On failure, responds with [`SdkError<ResetDBParameterGroupError>`](crate::operation::reset_db_parameter_group::ResetDBParameterGroupError)
    pub fn reset_db_parameter_group(
        &self,
    ) -> crate::operation::reset_db_parameter_group::builders::ResetDBParameterGroupFluentBuilder
    {
        crate::operation::reset_db_parameter_group::builders::ResetDBParameterGroupFluentBuilder::new(self.handle.clone())
    }
}
