// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The specified CIDR IP range or Amazon EC2 security group is already authorized for the specified DB security group.</p>
    AuthorizationAlreadyExistsFault(crate::error::AuthorizationAlreadyExistsFault),
    /// <p>The specified CIDR IP range or Amazon EC2 security group might not be authorized for the specified DB security group.</p>
    /// <p>Or, RDS might not be authorized to perform necessary actions using IAM on your behalf.</p>
    AuthorizationNotFoundFault(crate::error::AuthorizationNotFoundFault),
    /// <p>The DB security group authorization quota has been reached.</p>
    AuthorizationQuotaExceededFault(crate::error::AuthorizationQuotaExceededFault),
    #[allow(missing_docs)] // documentation missing in model
    #[deprecated(note = "Please avoid using this fault")]
    BackupPolicyNotFoundFault(crate::error::BackupPolicyNotFoundFault),
    /// <p>A blue/green deployment with the specified name already exists.</p>
    BlueGreenDeploymentAlreadyExistsFault(crate::error::BlueGreenDeploymentAlreadyExistsFault),
    /// <p> <code>BlueGreenDeploymentIdentifier</code> doesn't refer to an existing blue/green deployment.</p>
    BlueGreenDeploymentNotFoundFault(crate::error::BlueGreenDeploymentNotFoundFault),
    /// <p> <code>CertificateIdentifier</code> doesn't refer to an existing certificate.</p>
    CertificateNotFoundFault(crate::error::CertificateNotFoundFault),
    /// <p> <code>CustomAvailabilityZoneId</code> doesn't refer to an existing custom Availability Zone identifier.</p>
    CustomAvailabilityZoneNotFoundFault(crate::error::CustomAvailabilityZoneNotFoundFault),
    /// <p>A CEV with the specified name already exists.</p>
    CustomDbEngineVersionAlreadyExistsFault(crate::error::CustomDbEngineVersionAlreadyExistsFault),
    /// <p>The specified CEV was not found.</p>
    CustomDbEngineVersionNotFoundFault(crate::error::CustomDbEngineVersionNotFoundFault),
    /// <p>You have exceeded your CEV quota.</p>
    CustomDbEngineVersionQuotaExceededFault(crate::error::CustomDbEngineVersionQuotaExceededFault),
    /// <p>The user already has a DB cluster with the given identifier.</p>
    DbClusterAlreadyExistsFault(crate::error::DbClusterAlreadyExistsFault),
    /// <p> <code>BacktrackIdentifier</code> doesn't refer to an existing backtrack.</p>
    DbClusterBacktrackNotFoundFault(crate::error::DbClusterBacktrackNotFoundFault),
    /// <p>The specified custom endpoint can't be created because it already exists.</p>
    DbClusterEndpointAlreadyExistsFault(crate::error::DbClusterEndpointAlreadyExistsFault),
    /// <p>The specified custom endpoint doesn't exist.</p>
    DbClusterEndpointNotFoundFault(crate::error::DbClusterEndpointNotFoundFault),
    /// <p>The cluster already has the maximum number of custom endpoints.</p>
    DbClusterEndpointQuotaExceededFault(crate::error::DbClusterEndpointQuotaExceededFault),
    /// <p> <code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster.</p>
    DbClusterNotFoundFault(crate::error::DbClusterNotFoundFault),
    /// <p> <code>DBClusterParameterGroupName</code> doesn't refer to an existing DB cluster parameter group.</p>
    DbClusterParameterGroupNotFoundFault(crate::error::DbClusterParameterGroupNotFoundFault),
    /// <p>The user attempted to create a new DB cluster and the user has already reached the maximum allowed DB cluster quota.</p>
    DbClusterQuotaExceededFault(crate::error::DbClusterQuotaExceededFault),
    /// <p>The specified IAM role Amazon Resource Name (ARN) is already associated with the specified DB cluster.</p>
    DbClusterRoleAlreadyExistsFault(crate::error::DbClusterRoleAlreadyExistsFault),
    /// <p>The specified IAM role Amazon Resource Name (ARN) isn't associated with the specified DB cluster.</p>
    DbClusterRoleNotFoundFault(crate::error::DbClusterRoleNotFoundFault),
    /// <p>You have exceeded the maximum number of IAM roles that can be associated with the specified DB cluster.</p>
    DbClusterRoleQuotaExceededFault(crate::error::DbClusterRoleQuotaExceededFault),
    /// <p>The user already has a DB cluster snapshot with the given identifier.</p>
    DbClusterSnapshotAlreadyExistsFault(crate::error::DbClusterSnapshotAlreadyExistsFault),
    /// <p> <code>DBClusterSnapshotIdentifier</code> doesn't refer to an existing DB cluster snapshot.</p>
    DbClusterSnapshotNotFoundFault(crate::error::DbClusterSnapshotNotFoundFault),
    /// <p>The user already has a DB instance with the given identifier.</p>
    DbInstanceAlreadyExistsFault(crate::error::DbInstanceAlreadyExistsFault),
    /// <p>No automated backup for this DB instance was found.</p>
    DbInstanceAutomatedBackupNotFoundFault(crate::error::DbInstanceAutomatedBackupNotFoundFault),
    /// <p>The quota for retained automated backups was exceeded. This prevents you from retaining any additional automated backups. The retained automated backups quota is the same as your DB Instance quota.</p>
    DbInstanceAutomatedBackupQuotaExceededFault(
        crate::error::DbInstanceAutomatedBackupQuotaExceededFault,
    ),
    /// <p> <code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance.</p>
    DbInstanceNotFoundFault(crate::error::DbInstanceNotFoundFault),
    /// <p>The specified <code>RoleArn</code> or <code>FeatureName</code> value is already associated with the DB instance.</p>
    DbInstanceRoleAlreadyExistsFault(crate::error::DbInstanceRoleAlreadyExistsFault),
    /// <p>The specified <code>RoleArn</code> value doesn't match the specified feature for the DB instance.</p>
    DbInstanceRoleNotFoundFault(crate::error::DbInstanceRoleNotFoundFault),
    /// <p>You can't associate any more Amazon Web Services Identity and Access Management (IAM) roles with the DB instance because the quota has been reached.</p>
    DbInstanceRoleQuotaExceededFault(crate::error::DbInstanceRoleQuotaExceededFault),
    /// <p> <code>LogFileName</code> doesn't refer to an existing DB log file.</p>
    DbLogFileNotFoundFault(crate::error::DbLogFileNotFoundFault),
    /// <p>A DB parameter group with the same name exists.</p>
    DbParameterGroupAlreadyExistsFault(crate::error::DbParameterGroupAlreadyExistsFault),
    /// <p> <code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group.</p>
    DbParameterGroupNotFoundFault(crate::error::DbParameterGroupNotFoundFault),
    /// <p>The request would result in the user exceeding the allowed number of DB parameter groups.</p>
    DbParameterGroupQuotaExceededFault(crate::error::DbParameterGroupQuotaExceededFault),
    /// <p>The specified proxy name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DbProxyAlreadyExistsFault(crate::error::DbProxyAlreadyExistsFault),
    /// <p>The specified DB proxy endpoint name must be unique for all DB proxy endpoints owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DbProxyEndpointAlreadyExistsFault(crate::error::DbProxyEndpointAlreadyExistsFault),
    /// <p>The DB proxy endpoint doesn't exist.</p>
    DbProxyEndpointNotFoundFault(crate::error::DbProxyEndpointNotFoundFault),
    /// <p>The DB proxy already has the maximum number of endpoints.</p>
    DbProxyEndpointQuotaExceededFault(crate::error::DbProxyEndpointQuotaExceededFault),
    /// <p>The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DbProxyNotFoundFault(crate::error::DbProxyNotFoundFault),
    /// <p>Your Amazon Web Services account already has the maximum number of proxies in the specified Amazon Web Services Region.</p>
    DbProxyQuotaExceededFault(crate::error::DbProxyQuotaExceededFault),
    /// <p>The proxy is already associated with the specified RDS DB instance or Aurora DB cluster.</p>
    DbProxyTargetAlreadyRegisteredFault(crate::error::DbProxyTargetAlreadyRegisteredFault),
    /// <p>The specified target group isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DbProxyTargetGroupNotFoundFault(crate::error::DbProxyTargetGroupNotFoundFault),
    /// <p>The specified RDS DB instance or Aurora DB cluster isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DbProxyTargetNotFoundFault(crate::error::DbProxyTargetNotFoundFault),
    /// <p>A DB security group with the name specified in <code>DBSecurityGroupName</code> already exists.</p>
    DbSecurityGroupAlreadyExistsFault(crate::error::DbSecurityGroupAlreadyExistsFault),
    /// <p> <code>DBSecurityGroupName</code> doesn't refer to an existing DB security group.</p>
    DbSecurityGroupNotFoundFault(crate::error::DbSecurityGroupNotFoundFault),
    /// <p>A DB security group isn't allowed for this action.</p>
    DbSecurityGroupNotSupportedFault(crate::error::DbSecurityGroupNotSupportedFault),
    /// <p>The request would result in the user exceeding the allowed number of DB security groups.</p>
    DbSecurityGroupQuotaExceededFault(crate::error::DbSecurityGroupQuotaExceededFault),
    /// <p> <code>DBSnapshotIdentifier</code> is already used by an existing snapshot.</p>
    DbSnapshotAlreadyExistsFault(crate::error::DbSnapshotAlreadyExistsFault),
    /// <p> <code>DBSnapshotIdentifier</code> doesn't refer to an existing DB snapshot.</p>
    DbSnapshotNotFoundFault(crate::error::DbSnapshotNotFoundFault),
    /// <p> <code>DBSubnetGroupName</code> is already used by an existing DB subnet group.</p>
    DbSubnetGroupAlreadyExistsFault(crate::error::DbSubnetGroupAlreadyExistsFault),
    /// <p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DbSubnetGroupDoesNotCoverEnoughAZs(crate::error::DbSubnetGroupDoesNotCoverEnoughAZs),
    /// <p>The DBSubnetGroup shouldn't be specified while creating read replicas that lie in the same region as the source instance.</p>
    DbSubnetGroupNotAllowedFault(crate::error::DbSubnetGroupNotAllowedFault),
    /// <p> <code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group.</p>
    DbSubnetGroupNotFoundFault(crate::error::DbSubnetGroupNotFoundFault),
    /// <p>The request would result in the user exceeding the allowed number of DB subnet groups.</p>
    DbSubnetGroupQuotaExceededFault(crate::error::DbSubnetGroupQuotaExceededFault),
    /// <p>The request would result in the user exceeding the allowed number of subnets in a DB subnet groups.</p>
    DbSubnetQuotaExceededFault(crate::error::DbSubnetQuotaExceededFault),
    /// <p>The DB upgrade failed because a resource the DB depends on can't be modified.</p>
    DbUpgradeDependencyFailureFault(crate::error::DbUpgradeDependencyFailureFault),
    /// <p> <code>Domain</code> doesn't refer to an existing Active Directory domain.</p>
    DomainNotFoundFault(crate::error::DomainNotFoundFault),
    /// <p>The AMI configuration prerequisite has not been met.</p>
    Ec2ImagePropertiesNotSupportedFault(crate::error::Ec2ImagePropertiesNotSupportedFault),
    /// <p>You have reached the maximum number of event subscriptions.</p>
    EventSubscriptionQuotaExceededFault(crate::error::EventSubscriptionQuotaExceededFault),
    /// <p>You can't start an export task that's already running.</p>
    ExportTaskAlreadyExistsFault(crate::error::ExportTaskAlreadyExistsFault),
    /// <p>The export task doesn't exist.</p>
    ExportTaskNotFoundFault(crate::error::ExportTaskNotFoundFault),
    /// <p>The <code>GlobalClusterIdentifier</code> already exists. Choose a new global database identifier (unique name) to create a new global database cluster.</p>
    GlobalClusterAlreadyExistsFault(crate::error::GlobalClusterAlreadyExistsFault),
    /// <p>The <code>GlobalClusterIdentifier</code> doesn't refer to an existing global database cluster.</p>
    GlobalClusterNotFoundFault(crate::error::GlobalClusterNotFoundFault),
    /// <p>The number of global database clusters for this account is already at the maximum allowed.</p>
    GlobalClusterQuotaExceededFault(crate::error::GlobalClusterQuotaExceededFault),
    /// <p>The IAM role requires additional permissions to export to an Amazon S3 bucket.</p>
    IamRoleMissingPermissionsFault(crate::error::IamRoleMissingPermissionsFault),
    /// <p>The IAM role is missing for exporting to an Amazon S3 bucket.</p>
    IamRoleNotFoundFault(crate::error::IamRoleNotFoundFault),
    /// <p>The request would result in the user exceeding the allowed number of DB instances.</p>
    InstanceQuotaExceededFault(crate::error::InstanceQuotaExceededFault),
    /// <p>The requested operation can't be performed because there aren't enough available IP addresses in the proxy's subnets. Add more CIDR blocks to the VPC or remove IP address that aren't required from the subnets.</p>
    InsufficientAvailableIPsInSubnetFault(crate::error::InsufficientAvailableIPsInSubnetFault),
    /// <p>The DB cluster doesn't have enough capacity for the current operation.</p>
    InsufficientDbClusterCapacityFault(crate::error::InsufficientDbClusterCapacityFault),
    /// <p>The specified DB instance class isn't available in the specified Availability Zone.</p>
    InsufficientDbInstanceCapacityFault(crate::error::InsufficientDbInstanceCapacityFault),
    /// <p>There is insufficient storage available for the current action. You might be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available.</p>
    InsufficientStorageClusterCapacityFault(crate::error::InsufficientStorageClusterCapacityFault),
    /// <p>The blue/green deployment can't be switched over or deleted because there is an invalid configuration in the green environment.</p>
    InvalidBlueGreenDeploymentStateFault(crate::error::InvalidBlueGreenDeploymentStateFault),
    /// <p>You can't delete the CEV.</p>
    InvalidCustomDbEngineVersionStateFault(crate::error::InvalidCustomDbEngineVersionStateFault),
    /// <p> <code>Capacity</code> isn't a valid Aurora Serverless DB cluster capacity. Valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p>
    InvalidDbClusterCapacityFault(crate::error::InvalidDbClusterCapacityFault),
    /// <p>The requested operation can't be performed on the endpoint while the endpoint is in this state.</p>
    InvalidDbClusterEndpointStateFault(crate::error::InvalidDbClusterEndpointStateFault),
    /// <p>The supplied value isn't a valid DB cluster snapshot state.</p>
    InvalidDbClusterSnapshotStateFault(crate::error::InvalidDbClusterSnapshotStateFault),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDbClusterStateFault(crate::error::InvalidDbClusterStateFault),
    /// <p>The automated backup is in an invalid state. For example, this automated backup is associated with an active instance.</p>
    InvalidDbInstanceAutomatedBackupStateFault(
        crate::error::InvalidDbInstanceAutomatedBackupStateFault,
    ),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDbInstanceStateFault(crate::error::InvalidDbInstanceStateFault),
    /// <p>The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you can't delete it when the parameter group is in this state.</p>
    InvalidDbParameterGroupStateFault(crate::error::InvalidDbParameterGroupStateFault),
    /// <p>You can't perform this operation while the DB proxy endpoint is in a particular state.</p>
    InvalidDbProxyEndpointStateFault(crate::error::InvalidDbProxyEndpointStateFault),
    /// <p>The requested operation can't be performed while the proxy is in this state.</p>
    InvalidDbProxyStateFault(crate::error::InvalidDbProxyStateFault),
    /// <p>The state of the DB security group doesn't allow deletion.</p>
    InvalidDbSecurityGroupStateFault(crate::error::InvalidDbSecurityGroupStateFault),
    /// <p>The state of the DB snapshot doesn't allow deletion.</p>
    InvalidDbSnapshotStateFault(crate::error::InvalidDbSnapshotStateFault),
    /// <p>The DBSubnetGroup doesn't belong to the same VPC as that of an existing cross-region read replica of the same source instance.</p>
    InvalidDbSubnetGroupFault(crate::error::InvalidDbSubnetGroupFault),
    /// <p>The DB subnet group cannot be deleted because it's in use.</p>
    InvalidDbSubnetGroupStateFault(crate::error::InvalidDbSubnetGroupStateFault),
    /// <p>The DB subnet isn't in the <i>available</i> state.</p>
    InvalidDbSubnetStateFault(crate::error::InvalidDbSubnetStateFault),
    /// <p>This error can occur if someone else is modifying a subscription. You should retry the action.</p>
    InvalidEventSubscriptionStateFault(crate::error::InvalidEventSubscriptionStateFault),
    /// <p>The export is invalid for exporting to an Amazon S3 bucket.</p>
    InvalidExportOnlyFault(crate::error::InvalidExportOnlyFault),
    /// <p>The state of the export snapshot is invalid for exporting to an Amazon S3 bucket.</p>
    InvalidExportSourceStateFault(crate::error::InvalidExportSourceStateFault),
    /// <p>You can't cancel an export task that has completed.</p>
    InvalidExportTaskStateFault(crate::error::InvalidExportTaskStateFault),
    /// <p>The global cluster is in an invalid state and can't perform the requested operation.</p>
    InvalidGlobalClusterStateFault(crate::error::InvalidGlobalClusterStateFault),
    /// <p>The option group isn't in the <i>available</i> state.</p>
    InvalidOptionGroupStateFault(crate::error::InvalidOptionGroupStateFault),
    /// <p>Cannot restore from VPC backup to non-VPC DB instance.</p>
    InvalidRestoreFault(crate::error::InvalidRestoreFault),
    /// <p>The specified Amazon S3 bucket name can't be found or Amazon RDS isn't authorized to access the specified Amazon S3 bucket. Verify the <b>SourceS3BucketName</b> and <b>S3IngestionRoleArn</b> values and try again.</p>
    InvalidS3BucketFault(crate::error::InvalidS3BucketFault),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(crate::error::InvalidSubnet),
    /// <p>The DB subnet group doesn't cover all Availability Zones after it's created because of users' change.</p>
    InvalidVpcNetworkStateFault(crate::error::InvalidVpcNetworkStateFault),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KmsKeyNotAccessibleFault(crate::error::KmsKeyNotAccessibleFault),
    /// <p>The network type is invalid for the DB instance. Valid nework type values are <code>IPV4</code> and <code>DUAL</code>.</p>
    NetworkTypeNotSupported(crate::error::NetworkTypeNotSupported),
    /// <p>The option group you are trying to create already exists.</p>
    OptionGroupAlreadyExistsFault(crate::error::OptionGroupAlreadyExistsFault),
    /// <p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(crate::error::OptionGroupNotFoundFault),
    /// <p>The quota of 20 option groups was exceeded for this Amazon Web Services account.</p>
    OptionGroupQuotaExceededFault(crate::error::OptionGroupQuotaExceededFault),
    /// <p> <code>SourceDBInstanceIdentifier</code> refers to a DB instance with <code>BackupRetentionPeriod</code> equal to 0.</p>
    PointInTimeRestoreNotEnabledFault(crate::error::PointInTimeRestoreNotEnabledFault),
    /// <p>Provisioned IOPS not available in the specified Availability Zone.</p>
    ProvisionedIopsNotAvailableInAzFault(crate::error::ProvisionedIopsNotAvailableInAzFault),
    /// <p>User already has a reservation with the given identifier.</p>
    ReservedDbInstanceAlreadyExistsFault(crate::error::ReservedDbInstanceAlreadyExistsFault),
    /// <p>The specified reserved DB Instance not found.</p>
    ReservedDbInstanceNotFoundFault(crate::error::ReservedDbInstanceNotFoundFault),
    /// <p>Request would exceed the user's DB Instance quota.</p>
    ReservedDbInstanceQuotaExceededFault(crate::error::ReservedDbInstanceQuotaExceededFault),
    /// <p>Specified offering does not exist.</p>
    ReservedDbInstancesOfferingNotFoundFault(
        crate::error::ReservedDbInstancesOfferingNotFoundFault,
    ),
    /// <p>The specified resource ID was not found.</p>
    ResourceNotFoundFault(crate::error::ResourceNotFoundFault),
    /// <p>SNS has responded that there is a problem with the SNS topic specified.</p>
    SnsInvalidTopicFault(crate::error::SnsInvalidTopicFault),
    /// <p>You do not have permission to publish to the SNS topic ARN.</p>
    SnsNoAuthorizationFault(crate::error::SnsNoAuthorizationFault),
    /// <p>The SNS topic ARN does not exist.</p>
    SnsTopicArnNotFoundFault(crate::error::SnsTopicArnNotFoundFault),
    /// <p>You have exceeded the maximum number of accounts that you can share a manual DB snapshot with.</p>
    SharedSnapshotQuotaExceededFault(crate::error::SharedSnapshotQuotaExceededFault),
    /// <p>The request would result in the user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(crate::error::SnapshotQuotaExceededFault),
    /// <p>The source DB cluster isn't supported for a blue/green deployment.</p>
    SourceClusterNotSupportedFault(crate::error::SourceClusterNotSupportedFault),
    /// <p>The source DB instance isn't supported for a blue/green deployment.</p>
    SourceDatabaseNotSupportedFault(crate::error::SourceDatabaseNotSupportedFault),
    /// <p>The requested source could not be found.</p>
    SourceNotFoundFault(crate::error::SourceNotFoundFault),
    /// <p>The request would result in the user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(crate::error::StorageQuotaExceededFault),
    /// <p>Storage of the <code>StorageType</code> specified can't be associated with the DB instance.</p>
    StorageTypeNotSupportedFault(crate::error::StorageTypeNotSupportedFault),
    /// <p>The DB subnet is already in use in the Availability Zone.</p>
    SubnetAlreadyInUse(crate::error::SubnetAlreadyInUse),
    /// <p>The supplied subscription name already exists.</p>
    SubscriptionAlreadyExistFault(crate::error::SubscriptionAlreadyExistFault),
    /// <p>The supplied category does not exist.</p>
    SubscriptionCategoryNotFoundFault(crate::error::SubscriptionCategoryNotFoundFault),
    /// <p>The subscription name does not exist.</p>
    SubscriptionNotFoundFault(crate::error::SubscriptionNotFoundFault),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AuthorizationAlreadyExistsFault(inner) => inner.fmt(f),
            Error::AuthorizationNotFoundFault(inner) => inner.fmt(f),
            Error::AuthorizationQuotaExceededFault(inner) => inner.fmt(f),
            Error::BackupPolicyNotFoundFault(inner) => inner.fmt(f),
            Error::BlueGreenDeploymentAlreadyExistsFault(inner) => inner.fmt(f),
            Error::BlueGreenDeploymentNotFoundFault(inner) => inner.fmt(f),
            Error::CertificateNotFoundFault(inner) => inner.fmt(f),
            Error::CustomAvailabilityZoneNotFoundFault(inner) => inner.fmt(f),
            Error::CustomDbEngineVersionAlreadyExistsFault(inner) => inner.fmt(f),
            Error::CustomDbEngineVersionNotFoundFault(inner) => inner.fmt(f),
            Error::CustomDbEngineVersionQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbClusterAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbClusterBacktrackNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterEndpointAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbClusterEndpointNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterEndpointQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbClusterNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterParameterGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbClusterRoleAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbClusterRoleNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterRoleQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbClusterSnapshotAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbClusterSnapshotNotFoundFault(inner) => inner.fmt(f),
            Error::DbInstanceAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbInstanceAutomatedBackupNotFoundFault(inner) => inner.fmt(f),
            Error::DbInstanceAutomatedBackupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbInstanceNotFoundFault(inner) => inner.fmt(f),
            Error::DbInstanceRoleAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbInstanceRoleNotFoundFault(inner) => inner.fmt(f),
            Error::DbInstanceRoleQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbLogFileNotFoundFault(inner) => inner.fmt(f),
            Error::DbParameterGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbParameterGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbParameterGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbProxyAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbProxyEndpointAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbProxyEndpointNotFoundFault(inner) => inner.fmt(f),
            Error::DbProxyEndpointQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbProxyNotFoundFault(inner) => inner.fmt(f),
            Error::DbProxyQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbProxyTargetAlreadyRegisteredFault(inner) => inner.fmt(f),
            Error::DbProxyTargetGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbProxyTargetNotFoundFault(inner) => inner.fmt(f),
            Error::DbSecurityGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbSecurityGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbSecurityGroupNotSupportedFault(inner) => inner.fmt(f),
            Error::DbSecurityGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbSnapshotAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbSnapshotNotFoundFault(inner) => inner.fmt(f),
            Error::DbSubnetGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => inner.fmt(f),
            Error::DbSubnetGroupNotAllowedFault(inner) => inner.fmt(f),
            Error::DbSubnetGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbSubnetGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbSubnetQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbUpgradeDependencyFailureFault(inner) => inner.fmt(f),
            Error::DomainNotFoundFault(inner) => inner.fmt(f),
            Error::Ec2ImagePropertiesNotSupportedFault(inner) => inner.fmt(f),
            Error::EventSubscriptionQuotaExceededFault(inner) => inner.fmt(f),
            Error::ExportTaskAlreadyExistsFault(inner) => inner.fmt(f),
            Error::ExportTaskNotFoundFault(inner) => inner.fmt(f),
            Error::GlobalClusterAlreadyExistsFault(inner) => inner.fmt(f),
            Error::GlobalClusterNotFoundFault(inner) => inner.fmt(f),
            Error::GlobalClusterQuotaExceededFault(inner) => inner.fmt(f),
            Error::IamRoleMissingPermissionsFault(inner) => inner.fmt(f),
            Error::IamRoleNotFoundFault(inner) => inner.fmt(f),
            Error::InstanceQuotaExceededFault(inner) => inner.fmt(f),
            Error::InsufficientAvailableIPsInSubnetFault(inner) => inner.fmt(f),
            Error::InsufficientDbClusterCapacityFault(inner) => inner.fmt(f),
            Error::InsufficientDbInstanceCapacityFault(inner) => inner.fmt(f),
            Error::InsufficientStorageClusterCapacityFault(inner) => inner.fmt(f),
            Error::InvalidBlueGreenDeploymentStateFault(inner) => inner.fmt(f),
            Error::InvalidCustomDbEngineVersionStateFault(inner) => inner.fmt(f),
            Error::InvalidDbClusterCapacityFault(inner) => inner.fmt(f),
            Error::InvalidDbClusterEndpointStateFault(inner) => inner.fmt(f),
            Error::InvalidDbClusterSnapshotStateFault(inner) => inner.fmt(f),
            Error::InvalidDbClusterStateFault(inner) => inner.fmt(f),
            Error::InvalidDbInstanceAutomatedBackupStateFault(inner) => inner.fmt(f),
            Error::InvalidDbInstanceStateFault(inner) => inner.fmt(f),
            Error::InvalidDbParameterGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidDbProxyEndpointStateFault(inner) => inner.fmt(f),
            Error::InvalidDbProxyStateFault(inner) => inner.fmt(f),
            Error::InvalidDbSecurityGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidDbSnapshotStateFault(inner) => inner.fmt(f),
            Error::InvalidDbSubnetGroupFault(inner) => inner.fmt(f),
            Error::InvalidDbSubnetGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidDbSubnetStateFault(inner) => inner.fmt(f),
            Error::InvalidEventSubscriptionStateFault(inner) => inner.fmt(f),
            Error::InvalidExportOnlyFault(inner) => inner.fmt(f),
            Error::InvalidExportSourceStateFault(inner) => inner.fmt(f),
            Error::InvalidExportTaskStateFault(inner) => inner.fmt(f),
            Error::InvalidGlobalClusterStateFault(inner) => inner.fmt(f),
            Error::InvalidOptionGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidRestoreFault(inner) => inner.fmt(f),
            Error::InvalidS3BucketFault(inner) => inner.fmt(f),
            Error::InvalidSubnet(inner) => inner.fmt(f),
            Error::InvalidVpcNetworkStateFault(inner) => inner.fmt(f),
            Error::KmsKeyNotAccessibleFault(inner) => inner.fmt(f),
            Error::NetworkTypeNotSupported(inner) => inner.fmt(f),
            Error::OptionGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::OptionGroupNotFoundFault(inner) => inner.fmt(f),
            Error::OptionGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::PointInTimeRestoreNotEnabledFault(inner) => inner.fmt(f),
            Error::ProvisionedIopsNotAvailableInAzFault(inner) => inner.fmt(f),
            Error::ReservedDbInstanceAlreadyExistsFault(inner) => inner.fmt(f),
            Error::ReservedDbInstanceNotFoundFault(inner) => inner.fmt(f),
            Error::ReservedDbInstanceQuotaExceededFault(inner) => inner.fmt(f),
            Error::ReservedDbInstancesOfferingNotFoundFault(inner) => inner.fmt(f),
            Error::ResourceNotFoundFault(inner) => inner.fmt(f),
            Error::SnsInvalidTopicFault(inner) => inner.fmt(f),
            Error::SnsNoAuthorizationFault(inner) => inner.fmt(f),
            Error::SnsTopicArnNotFoundFault(inner) => inner.fmt(f),
            Error::SharedSnapshotQuotaExceededFault(inner) => inner.fmt(f),
            Error::SnapshotQuotaExceededFault(inner) => inner.fmt(f),
            Error::SourceClusterNotSupportedFault(inner) => inner.fmt(f),
            Error::SourceDatabaseNotSupportedFault(inner) => inner.fmt(f),
            Error::SourceNotFoundFault(inner) => inner.fmt(f),
            Error::StorageQuotaExceededFault(inner) => inner.fmt(f),
            Error::StorageTypeNotSupportedFault(inner) => inner.fmt(f),
            Error::SubnetAlreadyInUse(inner) => inner.fmt(f),
            Error::SubscriptionAlreadyExistFault(inner) => inner.fmt(f),
            Error::SubscriptionCategoryNotFoundFault(inner) => inner.fmt(f),
            Error::SubscriptionNotFoundFault(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddRoleToDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddRoleToDBClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddRoleToDBClusterError> for Error {
    fn from(err: crate::error::AddRoleToDBClusterError) -> Self {
        match err {
            crate::error::AddRoleToDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::AddRoleToDBClusterError::DbClusterRoleAlreadyExistsFault(inner) => {
                Error::DbClusterRoleAlreadyExistsFault(inner)
            }
            crate::error::AddRoleToDBClusterError::DbClusterRoleQuotaExceededFault(inner) => {
                Error::DbClusterRoleQuotaExceededFault(inner)
            }
            crate::error::AddRoleToDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::AddRoleToDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddRoleToDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddRoleToDBInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddRoleToDBInstanceError> for Error {
    fn from(err: crate::error::AddRoleToDBInstanceError) -> Self {
        match err {
            crate::error::AddRoleToDBInstanceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::AddRoleToDBInstanceError::DbInstanceRoleAlreadyExistsFault(inner) => {
                Error::DbInstanceRoleAlreadyExistsFault(inner)
            }
            crate::error::AddRoleToDBInstanceError::DbInstanceRoleQuotaExceededFault(inner) => {
                Error::DbInstanceRoleQuotaExceededFault(inner)
            }
            crate::error::AddRoleToDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::AddRoleToDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::AddSourceIdentifierToSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AddSourceIdentifierToSubscriptionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddSourceIdentifierToSubscriptionError> for Error {
    fn from(err: crate::error::AddSourceIdentifierToSubscriptionError) -> Self {
        match err {
            crate::error::AddSourceIdentifierToSubscriptionError::SourceNotFoundFault(inner) => {
                Error::SourceNotFoundFault(inner)
            }
            crate::error::AddSourceIdentifierToSubscriptionError::SubscriptionNotFoundFault(
                inner,
            ) => Error::SubscriptionNotFoundFault(inner),
            crate::error::AddSourceIdentifierToSubscriptionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsToResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddTagsToResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddTagsToResourceError> for Error {
    fn from(err: crate::error::AddTagsToResourceError) -> Self {
        match err {
            crate::error::AddTagsToResourceError::BlueGreenDeploymentNotFoundFault(inner) => {
                Error::BlueGreenDeploymentNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::DbProxyTargetGroupNotFoundFault(inner) => {
                Error::DbProxyTargetGroupNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::error::AddTagsToResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ApplyPendingMaintenanceActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ApplyPendingMaintenanceActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ApplyPendingMaintenanceActionError> for Error {
    fn from(err: crate::error::ApplyPendingMaintenanceActionError) -> Self {
        match err {
            crate::error::ApplyPendingMaintenanceActionError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::ApplyPendingMaintenanceActionError::InvalidDbInstanceStateFault(
                inner,
            ) => Error::InvalidDbInstanceStateFault(inner),
            crate::error::ApplyPendingMaintenanceActionError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::ApplyPendingMaintenanceActionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::AuthorizeDBSecurityGroupIngressError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AuthorizeDBSecurityGroupIngressError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AuthorizeDBSecurityGroupIngressError> for Error {
    fn from(err: crate::error::AuthorizeDBSecurityGroupIngressError) -> Self {
        match err {
            crate::error::AuthorizeDBSecurityGroupIngressError::AuthorizationAlreadyExistsFault(inner) => Error::AuthorizationAlreadyExistsFault(inner),
            crate::error::AuthorizeDBSecurityGroupIngressError::AuthorizationQuotaExceededFault(inner) => Error::AuthorizationQuotaExceededFault(inner),
            crate::error::AuthorizeDBSecurityGroupIngressError::DbSecurityGroupNotFoundFault(inner) => Error::DbSecurityGroupNotFoundFault(inner),
            crate::error::AuthorizeDBSecurityGroupIngressError::InvalidDbSecurityGroupStateFault(inner) => Error::InvalidDbSecurityGroupStateFault(inner),
            crate::error::AuthorizeDBSecurityGroupIngressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BacktrackDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BacktrackDBClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BacktrackDBClusterError> for Error {
    fn from(err: crate::error::BacktrackDBClusterError) -> Self {
        match err {
            crate::error::BacktrackDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::BacktrackDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::BacktrackDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelExportTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CancelExportTaskError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelExportTaskError> for Error {
    fn from(err: crate::error::CancelExportTaskError) -> Self {
        match err {
            crate::error::CancelExportTaskError::ExportTaskNotFoundFault(inner) => {
                Error::ExportTaskNotFoundFault(inner)
            }
            crate::error::CancelExportTaskError::InvalidExportTaskStateFault(inner) => {
                Error::InvalidExportTaskStateFault(inner)
            }
            crate::error::CancelExportTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CopyDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CopyDBClusterParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CopyDBClusterParameterGroupError> for Error {
    fn from(err: crate::error::CopyDBClusterParameterGroupError) -> Self {
        match err {
            crate::error::CopyDBClusterParameterGroupError::DbParameterGroupAlreadyExistsFault(
                inner,
            ) => Error::DbParameterGroupAlreadyExistsFault(inner),
            crate::error::CopyDBClusterParameterGroupError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::CopyDBClusterParameterGroupError::DbParameterGroupQuotaExceededFault(
                inner,
            ) => Error::DbParameterGroupQuotaExceededFault(inner),
            crate::error::CopyDBClusterParameterGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CopyDBClusterSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CopyDBClusterSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CopyDBClusterSnapshotError> for Error {
    fn from(err: crate::error::CopyDBClusterSnapshotError) -> Self {
        match err {
            crate::error::CopyDBClusterSnapshotError::DbClusterSnapshotAlreadyExistsFault(
                inner,
            ) => Error::DbClusterSnapshotAlreadyExistsFault(inner),
            crate::error::CopyDBClusterSnapshotError::DbClusterSnapshotNotFoundFault(inner) => {
                Error::DbClusterSnapshotNotFoundFault(inner)
            }
            crate::error::CopyDBClusterSnapshotError::InvalidDbClusterSnapshotStateFault(inner) => {
                Error::InvalidDbClusterSnapshotStateFault(inner)
            }
            crate::error::CopyDBClusterSnapshotError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CopyDBClusterSnapshotError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::CopyDBClusterSnapshotError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::CopyDBClusterSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CopyDBParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CopyDBParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CopyDBParameterGroupError> for Error {
    fn from(err: crate::error::CopyDBParameterGroupError) -> Self {
        match err {
            crate::error::CopyDBParameterGroupError::DbParameterGroupAlreadyExistsFault(inner) => {
                Error::DbParameterGroupAlreadyExistsFault(inner)
            }
            crate::error::CopyDBParameterGroupError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::CopyDBParameterGroupError::DbParameterGroupQuotaExceededFault(inner) => {
                Error::DbParameterGroupQuotaExceededFault(inner)
            }
            crate::error::CopyDBParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CopyDBSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CopyDBSnapshotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CopyDBSnapshotError> for Error {
    fn from(err: crate::error::CopyDBSnapshotError) -> Self {
        match err {
            crate::error::CopyDBSnapshotError::CustomAvailabilityZoneNotFoundFault(inner) => {
                Error::CustomAvailabilityZoneNotFoundFault(inner)
            }
            crate::error::CopyDBSnapshotError::DbSnapshotAlreadyExistsFault(inner) => {
                Error::DbSnapshotAlreadyExistsFault(inner)
            }
            crate::error::CopyDBSnapshotError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::error::CopyDBSnapshotError::InvalidDbSnapshotStateFault(inner) => {
                Error::InvalidDbSnapshotStateFault(inner)
            }
            crate::error::CopyDBSnapshotError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::CopyDBSnapshotError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::CopyDBSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CopyOptionGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CopyOptionGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CopyOptionGroupError> for Error {
    fn from(err: crate::error::CopyOptionGroupError) -> Self {
        match err {
            crate::error::CopyOptionGroupError::OptionGroupAlreadyExistsFault(inner) => {
                Error::OptionGroupAlreadyExistsFault(inner)
            }
            crate::error::CopyOptionGroupError::OptionGroupNotFoundFault(inner) => {
                Error::OptionGroupNotFoundFault(inner)
            }
            crate::error::CopyOptionGroupError::OptionGroupQuotaExceededFault(inner) => {
                Error::OptionGroupQuotaExceededFault(inner)
            }
            crate::error::CopyOptionGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBlueGreenDeploymentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateBlueGreenDeploymentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBlueGreenDeploymentError> for Error {
    fn from(err: crate::error::CreateBlueGreenDeploymentError) -> Self {
        match err {
            crate::error::CreateBlueGreenDeploymentError::BlueGreenDeploymentAlreadyExistsFault(
                inner,
            ) => Error::BlueGreenDeploymentAlreadyExistsFault(inner),
            crate::error::CreateBlueGreenDeploymentError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::CreateBlueGreenDeploymentError::DbClusterParameterGroupNotFoundFault(
                inner,
            ) => Error::DbClusterParameterGroupNotFoundFault(inner),
            crate::error::CreateBlueGreenDeploymentError::DbClusterQuotaExceededFault(inner) => {
                Error::DbClusterQuotaExceededFault(inner)
            }
            crate::error::CreateBlueGreenDeploymentError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::CreateBlueGreenDeploymentError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::CreateBlueGreenDeploymentError::InstanceQuotaExceededFault(inner) => {
                Error::InstanceQuotaExceededFault(inner)
            }
            crate::error::CreateBlueGreenDeploymentError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CreateBlueGreenDeploymentError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::CreateBlueGreenDeploymentError::SourceClusterNotSupportedFault(inner) => {
                Error::SourceClusterNotSupportedFault(inner)
            }
            crate::error::CreateBlueGreenDeploymentError::SourceDatabaseNotSupportedFault(
                inner,
            ) => Error::SourceDatabaseNotSupportedFault(inner),
            crate::error::CreateBlueGreenDeploymentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCustomDBEngineVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCustomDBEngineVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCustomDBEngineVersionError> for Error {
    fn from(err: crate::error::CreateCustomDBEngineVersionError) -> Self {
        match err {
            crate::error::CreateCustomDBEngineVersionError::CustomDbEngineVersionAlreadyExistsFault(inner) => Error::CustomDbEngineVersionAlreadyExistsFault(inner),
            crate::error::CreateCustomDBEngineVersionError::CustomDbEngineVersionQuotaExceededFault(inner) => Error::CustomDbEngineVersionQuotaExceededFault(inner),
            crate::error::CreateCustomDBEngineVersionError::Ec2ImagePropertiesNotSupportedFault(inner) => Error::Ec2ImagePropertiesNotSupportedFault(inner),
            crate::error::CreateCustomDBEngineVersionError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::error::CreateCustomDBEngineVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDBClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBClusterError> for Error {
    fn from(err: crate::error::CreateDBClusterError) -> Self {
        match err {
            crate::error::CreateDBClusterError::DbClusterAlreadyExistsFault(inner) => {
                Error::DbClusterAlreadyExistsFault(inner)
            }
            crate::error::CreateDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::CreateDBClusterError::DbClusterParameterGroupNotFoundFault(inner) => {
                Error::DbClusterParameterGroupNotFoundFault(inner)
            }
            crate::error::CreateDBClusterError::DbClusterQuotaExceededFault(inner) => {
                Error::DbClusterQuotaExceededFault(inner)
            }
            crate::error::CreateDBClusterError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::CreateDBClusterError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::error::CreateDBClusterError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::CreateDBClusterError::DomainNotFoundFault(inner) => {
                Error::DomainNotFoundFault(inner)
            }
            crate::error::CreateDBClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::CreateDBClusterError::InsufficientStorageClusterCapacityFault(inner) => {
                Error::InsufficientStorageClusterCapacityFault(inner)
            }
            crate::error::CreateDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CreateDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::CreateDBClusterError::InvalidDbSubnetGroupStateFault(inner) => {
                Error::InvalidDbSubnetGroupStateFault(inner)
            }
            crate::error::CreateDBClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::error::CreateDBClusterError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::CreateDBClusterError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::CreateDBClusterError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::CreateDBClusterError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::error::CreateDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBClusterEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBClusterEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBClusterEndpointError> for Error {
    fn from(err: crate::error::CreateDBClusterEndpointError) -> Self {
        match err {
            crate::error::CreateDBClusterEndpointError::DbClusterEndpointAlreadyExistsFault(
                inner,
            ) => Error::DbClusterEndpointAlreadyExistsFault(inner),
            crate::error::CreateDBClusterEndpointError::DbClusterEndpointQuotaExceededFault(
                inner,
            ) => Error::DbClusterEndpointQuotaExceededFault(inner),
            crate::error::CreateDBClusterEndpointError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::CreateDBClusterEndpointError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::CreateDBClusterEndpointError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CreateDBClusterEndpointError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::CreateDBClusterEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBClusterParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBClusterParameterGroupError> for Error {
    fn from(err: crate::error::CreateDBClusterParameterGroupError) -> Self {
        match err {
            crate::error::CreateDBClusterParameterGroupError::DbParameterGroupAlreadyExistsFault(inner) => Error::DbParameterGroupAlreadyExistsFault(inner),
            crate::error::CreateDBClusterParameterGroupError::DbParameterGroupQuotaExceededFault(inner) => Error::DbParameterGroupQuotaExceededFault(inner),
            crate::error::CreateDBClusterParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBClusterSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBClusterSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBClusterSnapshotError> for Error {
    fn from(err: crate::error::CreateDBClusterSnapshotError) -> Self {
        match err {
            crate::error::CreateDBClusterSnapshotError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::CreateDBClusterSnapshotError::DbClusterSnapshotAlreadyExistsFault(
                inner,
            ) => Error::DbClusterSnapshotAlreadyExistsFault(inner),
            crate::error::CreateDBClusterSnapshotError::InvalidDbClusterSnapshotStateFault(
                inner,
            ) => Error::InvalidDbClusterSnapshotStateFault(inner),
            crate::error::CreateDBClusterSnapshotError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CreateDBClusterSnapshotError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::CreateDBClusterSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBInstanceError> for Error {
    fn from(err: crate::error::CreateDBInstanceError) -> Self {
        match err {
            crate::error::CreateDBInstanceError::AuthorizationNotFoundFault(inner) => {
                Error::AuthorizationNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::BackupPolicyNotFoundFault(inner) => {
                Error::BackupPolicyNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::CertificateNotFoundFault(inner) => {
                Error::CertificateNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::DbInstanceAlreadyExistsFault(inner) => {
                Error::DbInstanceAlreadyExistsFault(inner)
            }
            crate::error::CreateDBInstanceError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::error::CreateDBInstanceError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::DomainNotFoundFault(inner) => {
                Error::DomainNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::InstanceQuotaExceededFault(inner) => {
                Error::InstanceQuotaExceededFault(inner)
            }
            crate::error::CreateDBInstanceError::InsufficientDbInstanceCapacityFault(inner) => {
                Error::InsufficientDbInstanceCapacityFault(inner)
            }
            crate::error::CreateDBInstanceError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CreateDBInstanceError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::error::CreateDBInstanceError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::CreateDBInstanceError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::CreateDBInstanceError::NetworkTypeNotSupported(inner) => {
                Error::NetworkTypeNotSupported(inner)
            }
            crate::error::CreateDBInstanceError::OptionGroupNotFoundFault(inner) => {
                Error::OptionGroupNotFoundFault(inner)
            }
            crate::error::CreateDBInstanceError::ProvisionedIopsNotAvailableInAzFault(inner) => {
                Error::ProvisionedIopsNotAvailableInAzFault(inner)
            }
            crate::error::CreateDBInstanceError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::error::CreateDBInstanceError::StorageTypeNotSupportedFault(inner) => {
                Error::StorageTypeNotSupportedFault(inner)
            }
            crate::error::CreateDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBInstanceReadReplicaError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBInstanceReadReplicaError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBInstanceReadReplicaError> for Error {
    fn from(err: crate::error::CreateDBInstanceReadReplicaError) -> Self {
        match err {
            crate::error::CreateDBInstanceReadReplicaError::DbInstanceAlreadyExistsFault(inner) => Error::DbInstanceAlreadyExistsFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::DbParameterGroupNotFoundFault(inner) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::DbSecurityGroupNotFoundFault(inner) => Error::DbSecurityGroupNotFoundFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner),
            crate::error::CreateDBInstanceReadReplicaError::DbSubnetGroupNotAllowedFault(inner) => Error::DbSubnetGroupNotAllowedFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::DbSubnetGroupNotFoundFault(inner) => Error::DbSubnetGroupNotFoundFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::DomainNotFoundFault(inner) => Error::DomainNotFoundFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::InstanceQuotaExceededFault(inner) => Error::InstanceQuotaExceededFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::InsufficientDbInstanceCapacityFault(inner) => Error::InsufficientDbInstanceCapacityFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::InvalidDbInstanceStateFault(inner) => Error::InvalidDbInstanceStateFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::InvalidDbSubnetGroupFault(inner) => Error::InvalidDbSubnetGroupFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::CreateDBInstanceReadReplicaError::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::NetworkTypeNotSupported(inner) => Error::NetworkTypeNotSupported(inner),
            crate::error::CreateDBInstanceReadReplicaError::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::ProvisionedIopsNotAvailableInAzFault(inner) => Error::ProvisionedIopsNotAvailableInAzFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::StorageTypeNotSupportedFault(inner) => Error::StorageTypeNotSupportedFault(inner),
            crate::error::CreateDBInstanceReadReplicaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBParameterGroupError> for Error {
    fn from(err: crate::error::CreateDBParameterGroupError) -> Self {
        match err {
            crate::error::CreateDBParameterGroupError::DbParameterGroupAlreadyExistsFault(
                inner,
            ) => Error::DbParameterGroupAlreadyExistsFault(inner),
            crate::error::CreateDBParameterGroupError::DbParameterGroupQuotaExceededFault(
                inner,
            ) => Error::DbParameterGroupQuotaExceededFault(inner),
            crate::error::CreateDBParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBProxyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDBProxyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBProxyError> for Error {
    fn from(err: crate::error::CreateDBProxyError) -> Self {
        match err {
            crate::error::CreateDBProxyError::DbProxyAlreadyExistsFault(inner) => {
                Error::DbProxyAlreadyExistsFault(inner)
            }
            crate::error::CreateDBProxyError::DbProxyQuotaExceededFault(inner) => {
                Error::DbProxyQuotaExceededFault(inner)
            }
            crate::error::CreateDBProxyError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::CreateDBProxyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBProxyEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBProxyEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBProxyEndpointError> for Error {
    fn from(err: crate::error::CreateDBProxyEndpointError) -> Self {
        match err {
            crate::error::CreateDBProxyEndpointError::DbProxyEndpointAlreadyExistsFault(inner) => {
                Error::DbProxyEndpointAlreadyExistsFault(inner)
            }
            crate::error::CreateDBProxyEndpointError::DbProxyEndpointQuotaExceededFault(inner) => {
                Error::DbProxyEndpointQuotaExceededFault(inner)
            }
            crate::error::CreateDBProxyEndpointError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::error::CreateDBProxyEndpointError::InvalidDbProxyStateFault(inner) => {
                Error::InvalidDbProxyStateFault(inner)
            }
            crate::error::CreateDBProxyEndpointError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::error::CreateDBProxyEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBSecurityGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBSecurityGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBSecurityGroupError> for Error {
    fn from(err: crate::error::CreateDBSecurityGroupError) -> Self {
        match err {
            crate::error::CreateDBSecurityGroupError::DbSecurityGroupAlreadyExistsFault(inner) => {
                Error::DbSecurityGroupAlreadyExistsFault(inner)
            }
            crate::error::CreateDBSecurityGroupError::DbSecurityGroupNotSupportedFault(inner) => {
                Error::DbSecurityGroupNotSupportedFault(inner)
            }
            crate::error::CreateDBSecurityGroupError::DbSecurityGroupQuotaExceededFault(inner) => {
                Error::DbSecurityGroupQuotaExceededFault(inner)
            }
            crate::error::CreateDBSecurityGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBSnapshotError> for Error {
    fn from(err: crate::error::CreateDBSnapshotError) -> Self {
        match err {
            crate::error::CreateDBSnapshotError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::CreateDBSnapshotError::DbSnapshotAlreadyExistsFault(inner) => {
                Error::DbSnapshotAlreadyExistsFault(inner)
            }
            crate::error::CreateDBSnapshotError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::CreateDBSnapshotError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::CreateDBSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDBSubnetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDBSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDBSubnetGroupError> for Error {
    fn from(err: crate::error::CreateDBSubnetGroupError) -> Self {
        match err {
            crate::error::CreateDBSubnetGroupError::DbSubnetGroupAlreadyExistsFault(inner) => {
                Error::DbSubnetGroupAlreadyExistsFault(inner)
            }
            crate::error::CreateDBSubnetGroupError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::error::CreateDBSubnetGroupError::DbSubnetGroupQuotaExceededFault(inner) => {
                Error::DbSubnetGroupQuotaExceededFault(inner)
            }
            crate::error::CreateDBSubnetGroupError::DbSubnetQuotaExceededFault(inner) => {
                Error::DbSubnetQuotaExceededFault(inner)
            }
            crate::error::CreateDBSubnetGroupError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::error::CreateDBSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateEventSubscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateEventSubscriptionError> for Error {
    fn from(err: crate::error::CreateEventSubscriptionError) -> Self {
        match err {
            crate::error::CreateEventSubscriptionError::EventSubscriptionQuotaExceededFault(
                inner,
            ) => Error::EventSubscriptionQuotaExceededFault(inner),
            crate::error::CreateEventSubscriptionError::SnsInvalidTopicFault(inner) => {
                Error::SnsInvalidTopicFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SnsNoAuthorizationFault(inner) => {
                Error::SnsNoAuthorizationFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SnsTopicArnNotFoundFault(inner) => {
                Error::SnsTopicArnNotFoundFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SourceNotFoundFault(inner) => {
                Error::SourceNotFoundFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SubscriptionAlreadyExistFault(inner) => {
                Error::SubscriptionAlreadyExistFault(inner)
            }
            crate::error::CreateEventSubscriptionError::SubscriptionCategoryNotFoundFault(
                inner,
            ) => Error::SubscriptionCategoryNotFoundFault(inner),
            crate::error::CreateEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGlobalClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateGlobalClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGlobalClusterError> for Error {
    fn from(err: crate::error::CreateGlobalClusterError) -> Self {
        match err {
            crate::error::CreateGlobalClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::CreateGlobalClusterError::GlobalClusterAlreadyExistsFault(inner) => {
                Error::GlobalClusterAlreadyExistsFault(inner)
            }
            crate::error::CreateGlobalClusterError::GlobalClusterQuotaExceededFault(inner) => {
                Error::GlobalClusterQuotaExceededFault(inner)
            }
            crate::error::CreateGlobalClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::CreateGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateOptionGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateOptionGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateOptionGroupError> for Error {
    fn from(err: crate::error::CreateOptionGroupError) -> Self {
        match err {
            crate::error::CreateOptionGroupError::OptionGroupAlreadyExistsFault(inner) => {
                Error::OptionGroupAlreadyExistsFault(inner)
            }
            crate::error::CreateOptionGroupError::OptionGroupQuotaExceededFault(inner) => {
                Error::OptionGroupQuotaExceededFault(inner)
            }
            crate::error::CreateOptionGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBlueGreenDeploymentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBlueGreenDeploymentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBlueGreenDeploymentError> for Error {
    fn from(err: crate::error::DeleteBlueGreenDeploymentError) -> Self {
        match err {
            crate::error::DeleteBlueGreenDeploymentError::BlueGreenDeploymentNotFoundFault(
                inner,
            ) => Error::BlueGreenDeploymentNotFoundFault(inner),
            crate::error::DeleteBlueGreenDeploymentError::InvalidBlueGreenDeploymentStateFault(
                inner,
            ) => Error::InvalidBlueGreenDeploymentStateFault(inner),
            crate::error::DeleteBlueGreenDeploymentError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteCustomDBEngineVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteCustomDBEngineVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteCustomDBEngineVersionError> for Error {
    fn from(err: crate::error::DeleteCustomDBEngineVersionError) -> Self {
        match err {
            crate::error::DeleteCustomDBEngineVersionError::CustomDbEngineVersionNotFoundFault(inner) => Error::CustomDbEngineVersionNotFoundFault(inner),
            crate::error::DeleteCustomDBEngineVersionError::InvalidCustomDbEngineVersionStateFault(inner) => Error::InvalidCustomDbEngineVersionStateFault(inner),
            crate::error::DeleteCustomDBEngineVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBClusterError> for Error {
    fn from(err: crate::error::DeleteDBClusterError) -> Self {
        match err {
            crate::error::DeleteDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::DeleteDBClusterError::DbClusterSnapshotAlreadyExistsFault(inner) => {
                Error::DbClusterSnapshotAlreadyExistsFault(inner)
            }
            crate::error::DeleteDBClusterError::InvalidDbClusterSnapshotStateFault(inner) => {
                Error::InvalidDbClusterSnapshotStateFault(inner)
            }
            crate::error::DeleteDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::DeleteDBClusterError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::DeleteDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBClusterEndpointError> for Error {
    fn from(err: crate::error::DeleteDBClusterEndpointError) -> Self {
        match err {
            crate::error::DeleteDBClusterEndpointError::DbClusterEndpointNotFoundFault(inner) => {
                Error::DbClusterEndpointNotFoundFault(inner)
            }
            crate::error::DeleteDBClusterEndpointError::InvalidDbClusterEndpointStateFault(
                inner,
            ) => Error::InvalidDbClusterEndpointStateFault(inner),
            crate::error::DeleteDBClusterEndpointError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::DeleteDBClusterEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBClusterParameterGroupError> for Error {
    fn from(err: crate::error::DeleteDBClusterParameterGroupError) -> Self {
        match err {
            crate::error::DeleteDBClusterParameterGroupError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::DeleteDBClusterParameterGroupError::InvalidDbParameterGroupStateFault(
                inner,
            ) => Error::InvalidDbParameterGroupStateFault(inner),
            crate::error::DeleteDBClusterParameterGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBClusterSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBClusterSnapshotError> for Error {
    fn from(err: crate::error::DeleteDBClusterSnapshotError) -> Self {
        match err {
            crate::error::DeleteDBClusterSnapshotError::DbClusterSnapshotNotFoundFault(inner) => {
                Error::DbClusterSnapshotNotFoundFault(inner)
            }
            crate::error::DeleteDBClusterSnapshotError::InvalidDbClusterSnapshotStateFault(
                inner,
            ) => Error::InvalidDbClusterSnapshotStateFault(inner),
            crate::error::DeleteDBClusterSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBInstanceError> for Error {
    fn from(err: crate::error::DeleteDBInstanceError) -> Self {
        match err {
            crate::error::DeleteDBInstanceError::DbInstanceAutomatedBackupQuotaExceededFault(
                inner,
            ) => Error::DbInstanceAutomatedBackupQuotaExceededFault(inner),
            crate::error::DeleteDBInstanceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::DeleteDBInstanceError::DbSnapshotAlreadyExistsFault(inner) => {
                Error::DbSnapshotAlreadyExistsFault(inner)
            }
            crate::error::DeleteDBInstanceError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::DeleteDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::DeleteDBInstanceError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::DeleteDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteDBInstanceAutomatedBackupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteDBInstanceAutomatedBackupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBInstanceAutomatedBackupError> for Error {
    fn from(err: crate::error::DeleteDBInstanceAutomatedBackupError) -> Self {
        match err {
            crate::error::DeleteDBInstanceAutomatedBackupError::DbInstanceAutomatedBackupNotFoundFault(inner) => Error::DbInstanceAutomatedBackupNotFoundFault(inner),
            crate::error::DeleteDBInstanceAutomatedBackupError::InvalidDbInstanceAutomatedBackupStateFault(inner) => Error::InvalidDbInstanceAutomatedBackupStateFault(inner),
            crate::error::DeleteDBInstanceAutomatedBackupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBParameterGroupError> for Error {
    fn from(err: crate::error::DeleteDBParameterGroupError) -> Self {
        match err {
            crate::error::DeleteDBParameterGroupError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::DeleteDBParameterGroupError::InvalidDbParameterGroupStateFault(inner) => {
                Error::InvalidDbParameterGroupStateFault(inner)
            }
            crate::error::DeleteDBParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBProxyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDBProxyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBProxyError> for Error {
    fn from(err: crate::error::DeleteDBProxyError) -> Self {
        match err {
            crate::error::DeleteDBProxyError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::error::DeleteDBProxyError::InvalidDbProxyStateFault(inner) => {
                Error::InvalidDbProxyStateFault(inner)
            }
            crate::error::DeleteDBProxyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBProxyEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBProxyEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBProxyEndpointError> for Error {
    fn from(err: crate::error::DeleteDBProxyEndpointError) -> Self {
        match err {
            crate::error::DeleteDBProxyEndpointError::DbProxyEndpointNotFoundFault(inner) => {
                Error::DbProxyEndpointNotFoundFault(inner)
            }
            crate::error::DeleteDBProxyEndpointError::InvalidDbProxyEndpointStateFault(inner) => {
                Error::InvalidDbProxyEndpointStateFault(inner)
            }
            crate::error::DeleteDBProxyEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBSecurityGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBSecurityGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBSecurityGroupError> for Error {
    fn from(err: crate::error::DeleteDBSecurityGroupError) -> Self {
        match err {
            crate::error::DeleteDBSecurityGroupError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::error::DeleteDBSecurityGroupError::InvalidDbSecurityGroupStateFault(inner) => {
                Error::InvalidDbSecurityGroupStateFault(inner)
            }
            crate::error::DeleteDBSecurityGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBSnapshotError> for Error {
    fn from(err: crate::error::DeleteDBSnapshotError) -> Self {
        match err {
            crate::error::DeleteDBSnapshotError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::error::DeleteDBSnapshotError::InvalidDbSnapshotStateFault(inner) => {
                Error::InvalidDbSnapshotStateFault(inner)
            }
            crate::error::DeleteDBSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDBSubnetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDBSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDBSubnetGroupError> for Error {
    fn from(err: crate::error::DeleteDBSubnetGroupError) -> Self {
        match err {
            crate::error::DeleteDBSubnetGroupError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::DeleteDBSubnetGroupError::InvalidDbSubnetGroupStateFault(inner) => {
                Error::InvalidDbSubnetGroupStateFault(inner)
            }
            crate::error::DeleteDBSubnetGroupError::InvalidDbSubnetStateFault(inner) => {
                Error::InvalidDbSubnetStateFault(inner)
            }
            crate::error::DeleteDBSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteEventSubscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteEventSubscriptionError> for Error {
    fn from(err: crate::error::DeleteEventSubscriptionError) -> Self {
        match err {
            crate::error::DeleteEventSubscriptionError::InvalidEventSubscriptionStateFault(
                inner,
            ) => Error::InvalidEventSubscriptionStateFault(inner),
            crate::error::DeleteEventSubscriptionError::SubscriptionNotFoundFault(inner) => {
                Error::SubscriptionNotFoundFault(inner)
            }
            crate::error::DeleteEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGlobalClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteGlobalClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGlobalClusterError> for Error {
    fn from(err: crate::error::DeleteGlobalClusterError) -> Self {
        match err {
            crate::error::DeleteGlobalClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::DeleteGlobalClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::error::DeleteGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteOptionGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteOptionGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteOptionGroupError> for Error {
    fn from(err: crate::error::DeleteOptionGroupError) -> Self {
        match err {
            crate::error::DeleteOptionGroupError::InvalidOptionGroupStateFault(inner) => {
                Error::InvalidOptionGroupStateFault(inner)
            }
            crate::error::DeleteOptionGroupError::OptionGroupNotFoundFault(inner) => {
                Error::OptionGroupNotFoundFault(inner)
            }
            crate::error::DeleteOptionGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterDBProxyTargetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeregisterDBProxyTargetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterDBProxyTargetsError> for Error {
    fn from(err: crate::error::DeregisterDBProxyTargetsError) -> Self {
        match err {
            crate::error::DeregisterDBProxyTargetsError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::error::DeregisterDBProxyTargetsError::DbProxyTargetGroupNotFoundFault(inner) => {
                Error::DbProxyTargetGroupNotFoundFault(inner)
            }
            crate::error::DeregisterDBProxyTargetsError::DbProxyTargetNotFoundFault(inner) => {
                Error::DbProxyTargetNotFoundFault(inner)
            }
            crate::error::DeregisterDBProxyTargetsError::InvalidDbProxyStateFault(inner) => {
                Error::InvalidDbProxyStateFault(inner)
            }
            crate::error::DeregisterDBProxyTargetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeAccountAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeAccountAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAccountAttributesError> for Error {
    fn from(err: crate::error::DescribeAccountAttributesError) -> Self {
        match err {
            crate::error::DescribeAccountAttributesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBlueGreenDeploymentsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeBlueGreenDeploymentsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBlueGreenDeploymentsError> for Error {
    fn from(err: crate::error::DescribeBlueGreenDeploymentsError) -> Self {
        match err {
            crate::error::DescribeBlueGreenDeploymentsError::BlueGreenDeploymentNotFoundFault(
                inner,
            ) => Error::BlueGreenDeploymentNotFoundFault(inner),
            crate::error::DescribeBlueGreenDeploymentsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCertificatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeCertificatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCertificatesError> for Error {
    fn from(err: crate::error::DescribeCertificatesError) -> Self {
        match err {
            crate::error::DescribeCertificatesError::CertificateNotFoundFault(inner) => {
                Error::CertificateNotFoundFault(inner)
            }
            crate::error::DescribeCertificatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterBacktracksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterBacktracksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClusterBacktracksError> for Error {
    fn from(err: crate::error::DescribeDBClusterBacktracksError) -> Self {
        match err {
            crate::error::DescribeDBClusterBacktracksError::DbClusterBacktrackNotFoundFault(
                inner,
            ) => Error::DbClusterBacktrackNotFoundFault(inner),
            crate::error::DescribeDBClusterBacktracksError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::DescribeDBClusterBacktracksError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterEndpointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterEndpointsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClusterEndpointsError> for Error {
    fn from(err: crate::error::DescribeDBClusterEndpointsError) -> Self {
        match err {
            crate::error::DescribeDBClusterEndpointsError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::DescribeDBClusterEndpointsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterParameterGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeDBClusterParameterGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClusterParameterGroupsError> for Error {
    fn from(err: crate::error::DescribeDBClusterParameterGroupsError) -> Self {
        match err {
            crate::error::DescribeDBClusterParameterGroupsError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::DescribeDBClusterParameterGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterParametersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterParametersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClusterParametersError> for Error {
    fn from(err: crate::error::DescribeDBClusterParametersError) -> Self {
        match err {
            crate::error::DescribeDBClusterParametersError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::DescribeDBClusterParametersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBClustersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBClustersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClustersError> for Error {
    fn from(err: crate::error::DescribeDBClustersError) -> Self {
        match err {
            crate::error::DescribeDBClustersError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::DescribeDBClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeDBClusterSnapshotAttributesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeDBClusterSnapshotAttributesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClusterSnapshotAttributesError> for Error {
    fn from(err: crate::error::DescribeDBClusterSnapshotAttributesError) -> Self {
        match err {
            crate::error::DescribeDBClusterSnapshotAttributesError::DbClusterSnapshotNotFoundFault(inner) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::error::DescribeDBClusterSnapshotAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterSnapshotsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBClusterSnapshotsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBClusterSnapshotsError> for Error {
    fn from(err: crate::error::DescribeDBClusterSnapshotsError) -> Self {
        match err {
            crate::error::DescribeDBClusterSnapshotsError::DbClusterSnapshotNotFoundFault(
                inner,
            ) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::error::DescribeDBClusterSnapshotsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBEngineVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBEngineVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBEngineVersionsError> for Error {
    fn from(err: crate::error::DescribeDBEngineVersionsError) -> Self {
        match err {
            crate::error::DescribeDBEngineVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DescribeDBInstanceAutomatedBackupsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeDBInstanceAutomatedBackupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBInstanceAutomatedBackupsError> for Error {
    fn from(err: crate::error::DescribeDBInstanceAutomatedBackupsError) -> Self {
        match err {
            crate::error::DescribeDBInstanceAutomatedBackupsError::DbInstanceAutomatedBackupNotFoundFault(inner) => Error::DbInstanceAutomatedBackupNotFoundFault(inner),
            crate::error::DescribeDBInstanceAutomatedBackupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBInstancesError> for Error {
    fn from(err: crate::error::DescribeDBInstancesError) -> Self {
        match err {
            crate::error::DescribeDBInstancesError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::DescribeDBInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBLogFilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBLogFilesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBLogFilesError> for Error {
    fn from(err: crate::error::DescribeDBLogFilesError) -> Self {
        match err {
            crate::error::DescribeDBLogFilesError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::DescribeDBLogFilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBParameterGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBParameterGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBParameterGroupsError> for Error {
    fn from(err: crate::error::DescribeDBParameterGroupsError) -> Self {
        match err {
            crate::error::DescribeDBParameterGroupsError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::DescribeDBParameterGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBParametersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBParametersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBParametersError> for Error {
    fn from(err: crate::error::DescribeDBParametersError) -> Self {
        match err {
            crate::error::DescribeDBParametersError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::DescribeDBParametersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBProxiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBProxiesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBProxiesError> for Error {
    fn from(err: crate::error::DescribeDBProxiesError) -> Self {
        match err {
            crate::error::DescribeDBProxiesError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::error::DescribeDBProxiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBProxyEndpointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBProxyEndpointsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBProxyEndpointsError> for Error {
    fn from(err: crate::error::DescribeDBProxyEndpointsError) -> Self {
        match err {
            crate::error::DescribeDBProxyEndpointsError::DbProxyEndpointNotFoundFault(inner) => {
                Error::DbProxyEndpointNotFoundFault(inner)
            }
            crate::error::DescribeDBProxyEndpointsError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::error::DescribeDBProxyEndpointsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBProxyTargetGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBProxyTargetGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBProxyTargetGroupsError> for Error {
    fn from(err: crate::error::DescribeDBProxyTargetGroupsError) -> Self {
        match err {
            crate::error::DescribeDBProxyTargetGroupsError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::error::DescribeDBProxyTargetGroupsError::DbProxyTargetGroupNotFoundFault(
                inner,
            ) => Error::DbProxyTargetGroupNotFoundFault(inner),
            crate::error::DescribeDBProxyTargetGroupsError::InvalidDbProxyStateFault(inner) => {
                Error::InvalidDbProxyStateFault(inner)
            }
            crate::error::DescribeDBProxyTargetGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBProxyTargetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBProxyTargetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBProxyTargetsError> for Error {
    fn from(err: crate::error::DescribeDBProxyTargetsError) -> Self {
        match err {
            crate::error::DescribeDBProxyTargetsError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::error::DescribeDBProxyTargetsError::DbProxyTargetGroupNotFoundFault(inner) => {
                Error::DbProxyTargetGroupNotFoundFault(inner)
            }
            crate::error::DescribeDBProxyTargetsError::DbProxyTargetNotFoundFault(inner) => {
                Error::DbProxyTargetNotFoundFault(inner)
            }
            crate::error::DescribeDBProxyTargetsError::InvalidDbProxyStateFault(inner) => {
                Error::InvalidDbProxyStateFault(inner)
            }
            crate::error::DescribeDBProxyTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBSecurityGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBSecurityGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBSecurityGroupsError> for Error {
    fn from(err: crate::error::DescribeDBSecurityGroupsError) -> Self {
        match err {
            crate::error::DescribeDBSecurityGroupsError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::error::DescribeDBSecurityGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBSnapshotAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBSnapshotAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBSnapshotAttributesError> for Error {
    fn from(err: crate::error::DescribeDBSnapshotAttributesError) -> Self {
        match err {
            crate::error::DescribeDBSnapshotAttributesError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::error::DescribeDBSnapshotAttributesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBSnapshotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBSnapshotsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBSnapshotsError> for Error {
    fn from(err: crate::error::DescribeDBSnapshotsError) -> Self {
        match err {
            crate::error::DescribeDBSnapshotsError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::error::DescribeDBSnapshotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDBSubnetGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDBSubnetGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDBSubnetGroupsError> for Error {
    fn from(err: crate::error::DescribeDBSubnetGroupsError) -> Self {
        match err {
            crate::error::DescribeDBSubnetGroupsError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::DescribeDBSubnetGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeEngineDefaultClusterParametersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeEngineDefaultClusterParametersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEngineDefaultClusterParametersError> for Error {
    fn from(err: crate::error::DescribeEngineDefaultClusterParametersError) -> Self {
        match err {
            crate::error::DescribeEngineDefaultClusterParametersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeEngineDefaultParametersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeEngineDefaultParametersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEngineDefaultParametersError> for Error {
    fn from(err: crate::error::DescribeEngineDefaultParametersError) -> Self {
        match err {
            crate::error::DescribeEngineDefaultParametersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEventCategoriesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEventCategoriesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEventCategoriesError> for Error {
    fn from(err: crate::error::DescribeEventCategoriesError) -> Self {
        match err {
            crate::error::DescribeEventCategoriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeEventsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEventsError> for Error {
    fn from(err: crate::error::DescribeEventsError) -> Self {
        match err {
            crate::error::DescribeEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeEventSubscriptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeEventSubscriptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeEventSubscriptionsError> for Error {
    fn from(err: crate::error::DescribeEventSubscriptionsError) -> Self {
        match err {
            crate::error::DescribeEventSubscriptionsError::SubscriptionNotFoundFault(inner) => {
                Error::SubscriptionNotFoundFault(inner)
            }
            crate::error::DescribeEventSubscriptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeExportTasksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeExportTasksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeExportTasksError> for Error {
    fn from(err: crate::error::DescribeExportTasksError) -> Self {
        match err {
            crate::error::DescribeExportTasksError::ExportTaskNotFoundFault(inner) => {
                Error::ExportTaskNotFoundFault(inner)
            }
            crate::error::DescribeExportTasksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGlobalClustersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeGlobalClustersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGlobalClustersError> for Error {
    fn from(err: crate::error::DescribeGlobalClustersError) -> Self {
        match err {
            crate::error::DescribeGlobalClustersError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::DescribeGlobalClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeOptionGroupOptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeOptionGroupOptionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOptionGroupOptionsError> for Error {
    fn from(err: crate::error::DescribeOptionGroupOptionsError) -> Self {
        match err {
            crate::error::DescribeOptionGroupOptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeOptionGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeOptionGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOptionGroupsError> for Error {
    fn from(err: crate::error::DescribeOptionGroupsError) -> Self {
        match err {
            crate::error::DescribeOptionGroupsError::OptionGroupNotFoundFault(inner) => {
                Error::OptionGroupNotFoundFault(inner)
            }
            crate::error::DescribeOptionGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DescribeOrderableDBInstanceOptionsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeOrderableDBInstanceOptionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOrderableDBInstanceOptionsError> for Error {
    fn from(err: crate::error::DescribeOrderableDBInstanceOptionsError) -> Self {
        match err {
            crate::error::DescribeOrderableDBInstanceOptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribePendingMaintenanceActionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribePendingMaintenanceActionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePendingMaintenanceActionsError> for Error {
    fn from(err: crate::error::DescribePendingMaintenanceActionsError) -> Self {
        match err {
            crate::error::DescribePendingMaintenanceActionsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::DescribePendingMaintenanceActionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeReservedDBInstancesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeReservedDBInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReservedDBInstancesError> for Error {
    fn from(err: crate::error::DescribeReservedDBInstancesError) -> Self {
        match err {
            crate::error::DescribeReservedDBInstancesError::ReservedDbInstanceNotFoundFault(
                inner,
            ) => Error::ReservedDbInstanceNotFoundFault(inner),
            crate::error::DescribeReservedDBInstancesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeReservedDBInstancesOfferingsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeReservedDBInstancesOfferingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReservedDBInstancesOfferingsError> for Error {
    fn from(err: crate::error::DescribeReservedDBInstancesOfferingsError) -> Self {
        match err {
            crate::error::DescribeReservedDBInstancesOfferingsError::ReservedDbInstancesOfferingNotFoundFault(inner) => Error::ReservedDbInstancesOfferingNotFoundFault(inner),
            crate::error::DescribeReservedDBInstancesOfferingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSourceRegionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSourceRegionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSourceRegionsError> for Error {
    fn from(err: crate::error::DescribeSourceRegionsError) -> Self {
        match err {
            crate::error::DescribeSourceRegionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeValidDBInstanceModificationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeValidDBInstanceModificationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeValidDBInstanceModificationsError> for Error {
    fn from(err: crate::error::DescribeValidDBInstanceModificationsError) -> Self {
        match err {
            crate::error::DescribeValidDBInstanceModificationsError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::error::DescribeValidDBInstanceModificationsError::InvalidDbInstanceStateFault(inner) => Error::InvalidDbInstanceStateFault(inner),
            crate::error::DescribeValidDBInstanceModificationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DownloadDBLogFilePortionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DownloadDBLogFilePortionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DownloadDBLogFilePortionError> for Error {
    fn from(err: crate::error::DownloadDBLogFilePortionError) -> Self {
        match err {
            crate::error::DownloadDBLogFilePortionError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::DownloadDBLogFilePortionError::DbLogFileNotFoundFault(inner) => {
                Error::DbLogFileNotFoundFault(inner)
            }
            crate::error::DownloadDBLogFilePortionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::FailoverDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::FailoverDBClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::FailoverDBClusterError> for Error {
    fn from(err: crate::error::FailoverDBClusterError) -> Self {
        match err {
            crate::error::FailoverDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::FailoverDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::FailoverDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::FailoverDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::FailoverGlobalClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::FailoverGlobalClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::FailoverGlobalClusterError> for Error {
    fn from(err: crate::error::FailoverGlobalClusterError) -> Self {
        match err {
            crate::error::FailoverGlobalClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::FailoverGlobalClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::FailoverGlobalClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::FailoverGlobalClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::error::FailoverGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::BlueGreenDeploymentNotFoundFault(inner) => {
                Error::BlueGreenDeploymentNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::DbProxyTargetGroupNotFoundFault(inner) => {
                Error::DbProxyTargetGroupNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyActivityStreamError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyActivityStreamError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyActivityStreamError> for Error {
    fn from(err: crate::error::ModifyActivityStreamError) -> Self {
        match err {
            crate::error::ModifyActivityStreamError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::ModifyActivityStreamError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::ModifyActivityStreamError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::ModifyActivityStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyCertificatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyCertificatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyCertificatesError> for Error {
    fn from(err: crate::error::ModifyCertificatesError) -> Self {
        match err {
            crate::error::ModifyCertificatesError::CertificateNotFoundFault(inner) => {
                Error::CertificateNotFoundFault(inner)
            }
            crate::error::ModifyCertificatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ModifyCurrentDBClusterCapacityError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ModifyCurrentDBClusterCapacityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyCurrentDBClusterCapacityError> for Error {
    fn from(err: crate::error::ModifyCurrentDBClusterCapacityError) -> Self {
        match err {
            crate::error::ModifyCurrentDBClusterCapacityError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::ModifyCurrentDBClusterCapacityError::InvalidDbClusterCapacityFault(
                inner,
            ) => Error::InvalidDbClusterCapacityFault(inner),
            crate::error::ModifyCurrentDBClusterCapacityError::InvalidDbClusterStateFault(
                inner,
            ) => Error::InvalidDbClusterStateFault(inner),
            crate::error::ModifyCurrentDBClusterCapacityError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyCustomDBEngineVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyCustomDBEngineVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyCustomDBEngineVersionError> for Error {
    fn from(err: crate::error::ModifyCustomDBEngineVersionError) -> Self {
        match err {
            crate::error::ModifyCustomDBEngineVersionError::CustomDbEngineVersionNotFoundFault(inner) => Error::CustomDbEngineVersionNotFoundFault(inner),
            crate::error::ModifyCustomDBEngineVersionError::InvalidCustomDbEngineVersionStateFault(inner) => Error::InvalidCustomDbEngineVersionStateFault(inner),
            crate::error::ModifyCustomDBEngineVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBClusterError> for Error {
    fn from(err: crate::error::ModifyDBClusterError) -> Self {
        match err {
            crate::error::ModifyDBClusterError::DbClusterAlreadyExistsFault(inner) => {
                Error::DbClusterAlreadyExistsFault(inner)
            }
            crate::error::ModifyDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::ModifyDBClusterError::DbClusterParameterGroupNotFoundFault(inner) => {
                Error::DbClusterParameterGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBClusterError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBClusterError::DomainNotFoundFault(inner) => {
                Error::DomainNotFoundFault(inner)
            }
            crate::error::ModifyDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::ModifyDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::ModifyDBClusterError::InvalidDbSecurityGroupStateFault(inner) => {
                Error::InvalidDbSecurityGroupStateFault(inner)
            }
            crate::error::ModifyDBClusterError::InvalidDbSubnetGroupStateFault(inner) => {
                Error::InvalidDbSubnetGroupStateFault(inner)
            }
            crate::error::ModifyDBClusterError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::ModifyDBClusterError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::ModifyDBClusterError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::error::ModifyDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBClusterEndpointError> for Error {
    fn from(err: crate::error::ModifyDBClusterEndpointError) -> Self {
        match err {
            crate::error::ModifyDBClusterEndpointError::DbClusterEndpointNotFoundFault(inner) => {
                Error::DbClusterEndpointNotFoundFault(inner)
            }
            crate::error::ModifyDBClusterEndpointError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::ModifyDBClusterEndpointError::InvalidDbClusterEndpointStateFault(
                inner,
            ) => Error::InvalidDbClusterEndpointStateFault(inner),
            crate::error::ModifyDBClusterEndpointError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::ModifyDBClusterEndpointError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::ModifyDBClusterEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBClusterParameterGroupError> for Error {
    fn from(err: crate::error::ModifyDBClusterParameterGroupError) -> Self {
        match err {
            crate::error::ModifyDBClusterParameterGroupError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::ModifyDBClusterParameterGroupError::InvalidDbParameterGroupStateFault(
                inner,
            ) => Error::InvalidDbParameterGroupStateFault(inner),
            crate::error::ModifyDBClusterParameterGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ModifyDBClusterSnapshotAttributeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ModifyDBClusterSnapshotAttributeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBClusterSnapshotAttributeError> for Error {
    fn from(err: crate::error::ModifyDBClusterSnapshotAttributeError) -> Self {
        match err {
            crate::error::ModifyDBClusterSnapshotAttributeError::DbClusterSnapshotNotFoundFault(inner) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::error::ModifyDBClusterSnapshotAttributeError::InvalidDbClusterSnapshotStateFault(inner) => Error::InvalidDbClusterSnapshotStateFault(inner),
            crate::error::ModifyDBClusterSnapshotAttributeError::SharedSnapshotQuotaExceededFault(inner) => Error::SharedSnapshotQuotaExceededFault(inner),
            crate::error::ModifyDBClusterSnapshotAttributeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBInstanceError> for Error {
    fn from(err: crate::error::ModifyDBInstanceError) -> Self {
        match err {
            crate::error::ModifyDBInstanceError::AuthorizationNotFoundFault(inner) => {
                Error::AuthorizationNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::BackupPolicyNotFoundFault(inner) => {
                Error::BackupPolicyNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::CertificateNotFoundFault(inner) => {
                Error::CertificateNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::DbInstanceAlreadyExistsFault(inner) => {
                Error::DbInstanceAlreadyExistsFault(inner)
            }
            crate::error::ModifyDBInstanceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::DbUpgradeDependencyFailureFault(inner) => {
                Error::DbUpgradeDependencyFailureFault(inner)
            }
            crate::error::ModifyDBInstanceError::DomainNotFoundFault(inner) => {
                Error::DomainNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::InsufficientDbInstanceCapacityFault(inner) => {
                Error::InsufficientDbInstanceCapacityFault(inner)
            }
            crate::error::ModifyDBInstanceError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::ModifyDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::ModifyDBInstanceError::InvalidDbSecurityGroupStateFault(inner) => {
                Error::InvalidDbSecurityGroupStateFault(inner)
            }
            crate::error::ModifyDBInstanceError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::ModifyDBInstanceError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::ModifyDBInstanceError::NetworkTypeNotSupported(inner) => {
                Error::NetworkTypeNotSupported(inner)
            }
            crate::error::ModifyDBInstanceError::OptionGroupNotFoundFault(inner) => {
                Error::OptionGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBInstanceError::ProvisionedIopsNotAvailableInAzFault(inner) => {
                Error::ProvisionedIopsNotAvailableInAzFault(inner)
            }
            crate::error::ModifyDBInstanceError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::error::ModifyDBInstanceError::StorageTypeNotSupportedFault(inner) => {
                Error::StorageTypeNotSupportedFault(inner)
            }
            crate::error::ModifyDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBParameterGroupError> for Error {
    fn from(err: crate::error::ModifyDBParameterGroupError) -> Self {
        match err {
            crate::error::ModifyDBParameterGroupError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBParameterGroupError::InvalidDbParameterGroupStateFault(inner) => {
                Error::InvalidDbParameterGroupStateFault(inner)
            }
            crate::error::ModifyDBParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBProxyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ModifyDBProxyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBProxyError> for Error {
    fn from(err: crate::error::ModifyDBProxyError) -> Self {
        match err {
            crate::error::ModifyDBProxyError::DbProxyAlreadyExistsFault(inner) => {
                Error::DbProxyAlreadyExistsFault(inner)
            }
            crate::error::ModifyDBProxyError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::error::ModifyDBProxyError::InvalidDbProxyStateFault(inner) => {
                Error::InvalidDbProxyStateFault(inner)
            }
            crate::error::ModifyDBProxyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBProxyEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBProxyEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBProxyEndpointError> for Error {
    fn from(err: crate::error::ModifyDBProxyEndpointError) -> Self {
        match err {
            crate::error::ModifyDBProxyEndpointError::DbProxyEndpointAlreadyExistsFault(inner) => {
                Error::DbProxyEndpointAlreadyExistsFault(inner)
            }
            crate::error::ModifyDBProxyEndpointError::DbProxyEndpointNotFoundFault(inner) => {
                Error::DbProxyEndpointNotFoundFault(inner)
            }
            crate::error::ModifyDBProxyEndpointError::InvalidDbProxyEndpointStateFault(inner) => {
                Error::InvalidDbProxyEndpointStateFault(inner)
            }
            crate::error::ModifyDBProxyEndpointError::InvalidDbProxyStateFault(inner) => {
                Error::InvalidDbProxyStateFault(inner)
            }
            crate::error::ModifyDBProxyEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBProxyTargetGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBProxyTargetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBProxyTargetGroupError> for Error {
    fn from(err: crate::error::ModifyDBProxyTargetGroupError) -> Self {
        match err {
            crate::error::ModifyDBProxyTargetGroupError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::error::ModifyDBProxyTargetGroupError::DbProxyTargetGroupNotFoundFault(inner) => {
                Error::DbProxyTargetGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBProxyTargetGroupError::InvalidDbProxyStateFault(inner) => {
                Error::InvalidDbProxyStateFault(inner)
            }
            crate::error::ModifyDBProxyTargetGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBSnapshotError> for Error {
    fn from(err: crate::error::ModifyDBSnapshotError) -> Self {
        match err {
            crate::error::ModifyDBSnapshotError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::error::ModifyDBSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBSnapshotAttributeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBSnapshotAttributeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBSnapshotAttributeError> for Error {
    fn from(err: crate::error::ModifyDBSnapshotAttributeError) -> Self {
        match err {
            crate::error::ModifyDBSnapshotAttributeError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::error::ModifyDBSnapshotAttributeError::InvalidDbSnapshotStateFault(inner) => {
                Error::InvalidDbSnapshotStateFault(inner)
            }
            crate::error::ModifyDBSnapshotAttributeError::SharedSnapshotQuotaExceededFault(
                inner,
            ) => Error::SharedSnapshotQuotaExceededFault(inner),
            crate::error::ModifyDBSnapshotAttributeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyDBSubnetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyDBSubnetGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyDBSubnetGroupError> for Error {
    fn from(err: crate::error::ModifyDBSubnetGroupError) -> Self {
        match err {
            crate::error::ModifyDBSubnetGroupError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::error::ModifyDBSubnetGroupError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::ModifyDBSubnetGroupError::DbSubnetQuotaExceededFault(inner) => {
                Error::DbSubnetQuotaExceededFault(inner)
            }
            crate::error::ModifyDBSubnetGroupError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::error::ModifyDBSubnetGroupError::SubnetAlreadyInUse(inner) => {
                Error::SubnetAlreadyInUse(inner)
            }
            crate::error::ModifyDBSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyEventSubscriptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyEventSubscriptionError> for Error {
    fn from(err: crate::error::ModifyEventSubscriptionError) -> Self {
        match err {
            crate::error::ModifyEventSubscriptionError::EventSubscriptionQuotaExceededFault(
                inner,
            ) => Error::EventSubscriptionQuotaExceededFault(inner),
            crate::error::ModifyEventSubscriptionError::SnsInvalidTopicFault(inner) => {
                Error::SnsInvalidTopicFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::SnsNoAuthorizationFault(inner) => {
                Error::SnsNoAuthorizationFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::SnsTopicArnNotFoundFault(inner) => {
                Error::SnsTopicArnNotFoundFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::SubscriptionCategoryNotFoundFault(
                inner,
            ) => Error::SubscriptionCategoryNotFoundFault(inner),
            crate::error::ModifyEventSubscriptionError::SubscriptionNotFoundFault(inner) => {
                Error::SubscriptionNotFoundFault(inner)
            }
            crate::error::ModifyEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyGlobalClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyGlobalClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyGlobalClusterError> for Error {
    fn from(err: crate::error::ModifyGlobalClusterError) -> Self {
        match err {
            crate::error::ModifyGlobalClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::ModifyGlobalClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::ModifyGlobalClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::ModifyGlobalClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::error::ModifyGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ModifyOptionGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ModifyOptionGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ModifyOptionGroupError> for Error {
    fn from(err: crate::error::ModifyOptionGroupError) -> Self {
        match err {
            crate::error::ModifyOptionGroupError::InvalidOptionGroupStateFault(inner) => {
                Error::InvalidOptionGroupStateFault(inner)
            }
            crate::error::ModifyOptionGroupError::OptionGroupNotFoundFault(inner) => {
                Error::OptionGroupNotFoundFault(inner)
            }
            crate::error::ModifyOptionGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PromoteReadReplicaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PromoteReadReplicaError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PromoteReadReplicaError> for Error {
    fn from(err: crate::error::PromoteReadReplicaError) -> Self {
        match err {
            crate::error::PromoteReadReplicaError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::PromoteReadReplicaError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::PromoteReadReplicaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PromoteReadReplicaDBClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PromoteReadReplicaDBClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PromoteReadReplicaDBClusterError> for Error {
    fn from(err: crate::error::PromoteReadReplicaDBClusterError) -> Self {
        match err {
            crate::error::PromoteReadReplicaDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::PromoteReadReplicaDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::PromoteReadReplicaDBClusterError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::PurchaseReservedDBInstancesOfferingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PurchaseReservedDBInstancesOfferingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PurchaseReservedDBInstancesOfferingError> for Error {
    fn from(err: crate::error::PurchaseReservedDBInstancesOfferingError) -> Self {
        match err {
            crate::error::PurchaseReservedDBInstancesOfferingError::ReservedDbInstanceAlreadyExistsFault(inner) => Error::ReservedDbInstanceAlreadyExistsFault(inner),
            crate::error::PurchaseReservedDBInstancesOfferingError::ReservedDbInstanceQuotaExceededFault(inner) => Error::ReservedDbInstanceQuotaExceededFault(inner),
            crate::error::PurchaseReservedDBInstancesOfferingError::ReservedDbInstancesOfferingNotFoundFault(inner) => Error::ReservedDbInstancesOfferingNotFoundFault(inner),
            crate::error::PurchaseReservedDBInstancesOfferingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RebootDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RebootDBClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RebootDBClusterError> for Error {
    fn from(err: crate::error::RebootDBClusterError) -> Self {
        match err {
            crate::error::RebootDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::RebootDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::RebootDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::RebootDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RebootDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RebootDBInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RebootDBInstanceError> for Error {
    fn from(err: crate::error::RebootDBInstanceError) -> Self {
        match err {
            crate::error::RebootDBInstanceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::RebootDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::RebootDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterDBProxyTargetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RegisterDBProxyTargetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterDBProxyTargetsError> for Error {
    fn from(err: crate::error::RegisterDBProxyTargetsError) -> Self {
        match err {
            crate::error::RegisterDBProxyTargetsError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::RegisterDBProxyTargetsError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::RegisterDBProxyTargetsError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::error::RegisterDBProxyTargetsError::DbProxyTargetAlreadyRegisteredFault(
                inner,
            ) => Error::DbProxyTargetAlreadyRegisteredFault(inner),
            crate::error::RegisterDBProxyTargetsError::DbProxyTargetGroupNotFoundFault(inner) => {
                Error::DbProxyTargetGroupNotFoundFault(inner)
            }
            crate::error::RegisterDBProxyTargetsError::InsufficientAvailableIPsInSubnetFault(
                inner,
            ) => Error::InsufficientAvailableIPsInSubnetFault(inner),
            crate::error::RegisterDBProxyTargetsError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::RegisterDBProxyTargetsError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::RegisterDBProxyTargetsError::InvalidDbProxyStateFault(inner) => {
                Error::InvalidDbProxyStateFault(inner)
            }
            crate::error::RegisterDBProxyTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveFromGlobalClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveFromGlobalClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveFromGlobalClusterError> for Error {
    fn from(err: crate::error::RemoveFromGlobalClusterError) -> Self {
        match err {
            crate::error::RemoveFromGlobalClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::RemoveFromGlobalClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::error::RemoveFromGlobalClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::error::RemoveFromGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveRoleFromDBClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveRoleFromDBClusterError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveRoleFromDBClusterError> for Error {
    fn from(err: crate::error::RemoveRoleFromDBClusterError) -> Self {
        match err {
            crate::error::RemoveRoleFromDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::RemoveRoleFromDBClusterError::DbClusterRoleNotFoundFault(inner) => {
                Error::DbClusterRoleNotFoundFault(inner)
            }
            crate::error::RemoveRoleFromDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::RemoveRoleFromDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveRoleFromDBInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveRoleFromDBInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveRoleFromDBInstanceError> for Error {
    fn from(err: crate::error::RemoveRoleFromDBInstanceError) -> Self {
        match err {
            crate::error::RemoveRoleFromDBInstanceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::RemoveRoleFromDBInstanceError::DbInstanceRoleNotFoundFault(inner) => {
                Error::DbInstanceRoleNotFoundFault(inner)
            }
            crate::error::RemoveRoleFromDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::RemoveRoleFromDBInstanceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::RemoveSourceIdentifierFromSubscriptionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RemoveSourceIdentifierFromSubscriptionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveSourceIdentifierFromSubscriptionError> for Error {
    fn from(err: crate::error::RemoveSourceIdentifierFromSubscriptionError) -> Self {
        match err {
            crate::error::RemoveSourceIdentifierFromSubscriptionError::SourceNotFoundFault(inner) => Error::SourceNotFoundFault(inner),
            crate::error::RemoveSourceIdentifierFromSubscriptionError::SubscriptionNotFoundFault(inner) => Error::SubscriptionNotFoundFault(inner),
            crate::error::RemoveSourceIdentifierFromSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveTagsFromResourceError> for Error {
    fn from(err: crate::error::RemoveTagsFromResourceError) -> Self {
        match err {
            crate::error::RemoveTagsFromResourceError::BlueGreenDeploymentNotFoundFault(inner) => {
                Error::BlueGreenDeploymentNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::DbProxyTargetGroupNotFoundFault(inner) => {
                Error::DbProxyTargetGroupNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::error::RemoveTagsFromResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResetDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ResetDBClusterParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResetDBClusterParameterGroupError> for Error {
    fn from(err: crate::error::ResetDBClusterParameterGroupError) -> Self {
        match err {
            crate::error::ResetDBClusterParameterGroupError::DbParameterGroupNotFoundFault(
                inner,
            ) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::ResetDBClusterParameterGroupError::InvalidDbParameterGroupStateFault(
                inner,
            ) => Error::InvalidDbParameterGroupStateFault(inner),
            crate::error::ResetDBClusterParameterGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResetDBParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ResetDBParameterGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResetDBParameterGroupError> for Error {
    fn from(err: crate::error::ResetDBParameterGroupError) -> Self {
        match err {
            crate::error::ResetDBParameterGroupError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::ResetDBParameterGroupError::InvalidDbParameterGroupStateFault(inner) => {
                Error::InvalidDbParameterGroupStateFault(inner)
            }
            crate::error::ResetDBParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RestoreDBClusterFromS3Error, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RestoreDBClusterFromS3Error, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestoreDBClusterFromS3Error> for Error {
    fn from(err: crate::error::RestoreDBClusterFromS3Error) -> Self {
        match err {
            crate::error::RestoreDBClusterFromS3Error::DbClusterAlreadyExistsFault(inner) => {
                Error::DbClusterAlreadyExistsFault(inner)
            }
            crate::error::RestoreDBClusterFromS3Error::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::RestoreDBClusterFromS3Error::DbClusterParameterGroupNotFoundFault(
                inner,
            ) => Error::DbClusterParameterGroupNotFoundFault(inner),
            crate::error::RestoreDBClusterFromS3Error::DbClusterQuotaExceededFault(inner) => {
                Error::DbClusterQuotaExceededFault(inner)
            }
            crate::error::RestoreDBClusterFromS3Error::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::RestoreDBClusterFromS3Error::DomainNotFoundFault(inner) => {
                Error::DomainNotFoundFault(inner)
            }
            crate::error::RestoreDBClusterFromS3Error::InsufficientStorageClusterCapacityFault(
                inner,
            ) => Error::InsufficientStorageClusterCapacityFault(inner),
            crate::error::RestoreDBClusterFromS3Error::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::RestoreDBClusterFromS3Error::InvalidDbSubnetGroupStateFault(inner) => {
                Error::InvalidDbSubnetGroupStateFault(inner)
            }
            crate::error::RestoreDBClusterFromS3Error::InvalidS3BucketFault(inner) => {
                Error::InvalidS3BucketFault(inner)
            }
            crate::error::RestoreDBClusterFromS3Error::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::error::RestoreDBClusterFromS3Error::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::RestoreDBClusterFromS3Error::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::RestoreDBClusterFromS3Error::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::error::RestoreDBClusterFromS3Error::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RestoreDBClusterFromSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RestoreDBClusterFromSnapshotError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestoreDBClusterFromSnapshotError> for Error {
    fn from(err: crate::error::RestoreDBClusterFromSnapshotError) -> Self {
        match err {
            crate::error::RestoreDBClusterFromSnapshotError::DbClusterAlreadyExistsFault(inner) => Error::DbClusterAlreadyExistsFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::DbClusterParameterGroupNotFoundFault(inner) => Error::DbClusterParameterGroupNotFoundFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::DbClusterQuotaExceededFault(inner) => Error::DbClusterQuotaExceededFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::DbClusterSnapshotNotFoundFault(inner) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::DbSnapshotNotFoundFault(inner) => Error::DbSnapshotNotFoundFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::DbSubnetGroupNotFoundFault(inner) => Error::DbSubnetGroupNotFoundFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::DomainNotFoundFault(inner) => Error::DomainNotFoundFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InsufficientDbClusterCapacityFault(inner) => Error::InsufficientDbClusterCapacityFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InsufficientStorageClusterCapacityFault(inner) => Error::InsufficientStorageClusterCapacityFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InvalidDbClusterSnapshotStateFault(inner) => Error::InvalidDbClusterSnapshotStateFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InvalidDbInstanceStateFault(inner) => Error::InvalidDbInstanceStateFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InvalidDbSnapshotStateFault(inner) => Error::InvalidDbSnapshotStateFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InvalidRestoreFault(inner) => Error::InvalidRestoreFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::RestoreDBClusterFromSnapshotError::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
            crate::error::RestoreDBClusterFromSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RestoreDBClusterToPointInTimeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RestoreDBClusterToPointInTimeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestoreDBClusterToPointInTimeError> for Error {
    fn from(err: crate::error::RestoreDBClusterToPointInTimeError) -> Self {
        match err {
            crate::error::RestoreDBClusterToPointInTimeError::DbClusterAlreadyExistsFault(inner) => Error::DbClusterAlreadyExistsFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::DbClusterParameterGroupNotFoundFault(inner) => Error::DbClusterParameterGroupNotFoundFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::DbClusterQuotaExceededFault(inner) => Error::DbClusterQuotaExceededFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::DbClusterSnapshotNotFoundFault(inner) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::DbSubnetGroupNotFoundFault(inner) => Error::DbSubnetGroupNotFoundFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::DomainNotFoundFault(inner) => Error::DomainNotFoundFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InsufficientDbClusterCapacityFault(inner) => Error::InsufficientDbClusterCapacityFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InsufficientStorageClusterCapacityFault(inner) => Error::InsufficientStorageClusterCapacityFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidDbClusterSnapshotStateFault(inner) => Error::InvalidDbClusterSnapshotStateFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidDbClusterStateFault(inner) => Error::InvalidDbClusterStateFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidDbSnapshotStateFault(inner) => Error::InvalidDbSnapshotStateFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidRestoreFault(inner) => Error::InvalidRestoreFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::RestoreDBClusterToPointInTimeError::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
            crate::error::RestoreDBClusterToPointInTimeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::RestoreDBInstanceFromDBSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RestoreDBInstanceFromDBSnapshotError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestoreDBInstanceFromDBSnapshotError> for Error {
    fn from(err: crate::error::RestoreDBInstanceFromDBSnapshotError) -> Self {
        match err {
            crate::error::RestoreDBInstanceFromDBSnapshotError::AuthorizationNotFoundFault(inner) => Error::AuthorizationNotFoundFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::BackupPolicyNotFoundFault(inner) => Error::BackupPolicyNotFoundFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::DbClusterSnapshotNotFoundFault(inner) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::DbInstanceAlreadyExistsFault(inner) => Error::DbInstanceAlreadyExistsFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::DbParameterGroupNotFoundFault(inner) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::DbSecurityGroupNotFoundFault(inner) => Error::DbSecurityGroupNotFoundFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::DbSnapshotNotFoundFault(inner) => Error::DbSnapshotNotFoundFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::DbSubnetGroupNotFoundFault(inner) => Error::DbSubnetGroupNotFoundFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::DomainNotFoundFault(inner) => Error::DomainNotFoundFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::InstanceQuotaExceededFault(inner) => Error::InstanceQuotaExceededFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::InsufficientDbInstanceCapacityFault(inner) => Error::InsufficientDbInstanceCapacityFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::InvalidDbSnapshotStateFault(inner) => Error::InvalidDbSnapshotStateFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::InvalidRestoreFault(inner) => Error::InvalidRestoreFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::NetworkTypeNotSupported(inner) => Error::NetworkTypeNotSupported(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::ProvisionedIopsNotAvailableInAzFault(inner) => Error::ProvisionedIopsNotAvailableInAzFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::StorageTypeNotSupportedFault(inner) => Error::StorageTypeNotSupportedFault(inner),
            crate::error::RestoreDBInstanceFromDBSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RestoreDBInstanceFromS3Error, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RestoreDBInstanceFromS3Error, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestoreDBInstanceFromS3Error> for Error {
    fn from(err: crate::error::RestoreDBInstanceFromS3Error) -> Self {
        match err {
            crate::error::RestoreDBInstanceFromS3Error::AuthorizationNotFoundFault(inner) => {
                Error::AuthorizationNotFoundFault(inner)
            }
            crate::error::RestoreDBInstanceFromS3Error::BackupPolicyNotFoundFault(inner) => {
                Error::BackupPolicyNotFoundFault(inner)
            }
            crate::error::RestoreDBInstanceFromS3Error::DbInstanceAlreadyExistsFault(inner) => {
                Error::DbInstanceAlreadyExistsFault(inner)
            }
            crate::error::RestoreDBInstanceFromS3Error::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::error::RestoreDBInstanceFromS3Error::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::error::RestoreDBInstanceFromS3Error::DbSubnetGroupDoesNotCoverEnoughAZs(
                inner,
            ) => Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner),
            crate::error::RestoreDBInstanceFromS3Error::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::RestoreDBInstanceFromS3Error::InstanceQuotaExceededFault(inner) => {
                Error::InstanceQuotaExceededFault(inner)
            }
            crate::error::RestoreDBInstanceFromS3Error::InsufficientDbInstanceCapacityFault(
                inner,
            ) => Error::InsufficientDbInstanceCapacityFault(inner),
            crate::error::RestoreDBInstanceFromS3Error::InvalidS3BucketFault(inner) => {
                Error::InvalidS3BucketFault(inner)
            }
            crate::error::RestoreDBInstanceFromS3Error::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::error::RestoreDBInstanceFromS3Error::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::RestoreDBInstanceFromS3Error::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::RestoreDBInstanceFromS3Error::NetworkTypeNotSupported(inner) => {
                Error::NetworkTypeNotSupported(inner)
            }
            crate::error::RestoreDBInstanceFromS3Error::OptionGroupNotFoundFault(inner) => {
                Error::OptionGroupNotFoundFault(inner)
            }
            crate::error::RestoreDBInstanceFromS3Error::ProvisionedIopsNotAvailableInAzFault(
                inner,
            ) => Error::ProvisionedIopsNotAvailableInAzFault(inner),
            crate::error::RestoreDBInstanceFromS3Error::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::error::RestoreDBInstanceFromS3Error::StorageTypeNotSupportedFault(inner) => {
                Error::StorageTypeNotSupportedFault(inner)
            }
            crate::error::RestoreDBInstanceFromS3Error::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::RestoreDBInstanceToPointInTimeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::RestoreDBInstanceToPointInTimeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestoreDBInstanceToPointInTimeError> for Error {
    fn from(err: crate::error::RestoreDBInstanceToPointInTimeError) -> Self {
        match err {
            crate::error::RestoreDBInstanceToPointInTimeError::AuthorizationNotFoundFault(inner) => Error::AuthorizationNotFoundFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::BackupPolicyNotFoundFault(inner) => Error::BackupPolicyNotFoundFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::DbInstanceAlreadyExistsFault(inner) => Error::DbInstanceAlreadyExistsFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::DbInstanceAutomatedBackupNotFoundFault(inner) => Error::DbInstanceAutomatedBackupNotFoundFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::DbParameterGroupNotFoundFault(inner) => Error::DbParameterGroupNotFoundFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::DbSecurityGroupNotFoundFault(inner) => Error::DbSecurityGroupNotFoundFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::DbSubnetGroupNotFoundFault(inner) => Error::DbSubnetGroupNotFoundFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::DomainNotFoundFault(inner) => Error::DomainNotFoundFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::InstanceQuotaExceededFault(inner) => Error::InstanceQuotaExceededFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::InsufficientDbInstanceCapacityFault(inner) => Error::InsufficientDbInstanceCapacityFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::InvalidDbInstanceStateFault(inner) => Error::InvalidDbInstanceStateFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::InvalidRestoreFault(inner) => Error::InvalidRestoreFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::InvalidVpcNetworkStateFault(inner) => Error::InvalidVpcNetworkStateFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::NetworkTypeNotSupported(inner) => Error::NetworkTypeNotSupported(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::PointInTimeRestoreNotEnabledFault(inner) => Error::PointInTimeRestoreNotEnabledFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::ProvisionedIopsNotAvailableInAzFault(inner) => Error::ProvisionedIopsNotAvailableInAzFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::StorageTypeNotSupportedFault(inner) => Error::StorageTypeNotSupportedFault(inner),
            crate::error::RestoreDBInstanceToPointInTimeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RevokeDBSecurityGroupIngressError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RevokeDBSecurityGroupIngressError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RevokeDBSecurityGroupIngressError> for Error {
    fn from(err: crate::error::RevokeDBSecurityGroupIngressError) -> Self {
        match err {
            crate::error::RevokeDBSecurityGroupIngressError::AuthorizationNotFoundFault(inner) => {
                Error::AuthorizationNotFoundFault(inner)
            }
            crate::error::RevokeDBSecurityGroupIngressError::DbSecurityGroupNotFoundFault(
                inner,
            ) => Error::DbSecurityGroupNotFoundFault(inner),
            crate::error::RevokeDBSecurityGroupIngressError::InvalidDbSecurityGroupStateFault(
                inner,
            ) => Error::InvalidDbSecurityGroupStateFault(inner),
            crate::error::RevokeDBSecurityGroupIngressError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartActivityStreamError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartActivityStreamError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartActivityStreamError> for Error {
    fn from(err: crate::error::StartActivityStreamError) -> Self {
        match err {
            crate::error::StartActivityStreamError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::StartActivityStreamError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::StartActivityStreamError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::StartActivityStreamError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::StartActivityStreamError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::StartActivityStreamError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::StartActivityStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartDBClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartDBClusterError> for Error {
    fn from(err: crate::error::StartDBClusterError) -> Self {
        match err {
            crate::error::StartDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::StartDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::StartDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::StartDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartDBInstanceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartDBInstanceError> for Error {
    fn from(err: crate::error::StartDBInstanceError) -> Self {
        match err {
            crate::error::StartDBInstanceError::AuthorizationNotFoundFault(inner) => {
                Error::AuthorizationNotFoundFault(inner)
            }
            crate::error::StartDBInstanceError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::StartDBInstanceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::StartDBInstanceError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::error::StartDBInstanceError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::error::StartDBInstanceError::InsufficientDbInstanceCapacityFault(inner) => {
                Error::InsufficientDbInstanceCapacityFault(inner)
            }
            crate::error::StartDBInstanceError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::StartDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::StartDBInstanceError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::error::StartDBInstanceError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::error::StartDBInstanceError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::StartDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::StartDBInstanceAutomatedBackupsReplicationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::StartDBInstanceAutomatedBackupsReplicationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartDBInstanceAutomatedBackupsReplicationError> for Error {
    fn from(err: crate::error::StartDBInstanceAutomatedBackupsReplicationError) -> Self {
        match err {
            crate::error::StartDBInstanceAutomatedBackupsReplicationError::DbInstanceAutomatedBackupQuotaExceededFault(inner) => Error::DbInstanceAutomatedBackupQuotaExceededFault(inner),
            crate::error::StartDBInstanceAutomatedBackupsReplicationError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::error::StartDBInstanceAutomatedBackupsReplicationError::InvalidDbInstanceStateFault(inner) => Error::InvalidDbInstanceStateFault(inner),
            crate::error::StartDBInstanceAutomatedBackupsReplicationError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::error::StartDBInstanceAutomatedBackupsReplicationError::StorageTypeNotSupportedFault(inner) => Error::StorageTypeNotSupportedFault(inner),
            crate::error::StartDBInstanceAutomatedBackupsReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartExportTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartExportTaskError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartExportTaskError> for Error {
    fn from(err: crate::error::StartExportTaskError) -> Self {
        match err {
            crate::error::StartExportTaskError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::StartExportTaskError::DbClusterSnapshotNotFoundFault(inner) => {
                Error::DbClusterSnapshotNotFoundFault(inner)
            }
            crate::error::StartExportTaskError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::error::StartExportTaskError::ExportTaskAlreadyExistsFault(inner) => {
                Error::ExportTaskAlreadyExistsFault(inner)
            }
            crate::error::StartExportTaskError::IamRoleMissingPermissionsFault(inner) => {
                Error::IamRoleMissingPermissionsFault(inner)
            }
            crate::error::StartExportTaskError::IamRoleNotFoundFault(inner) => {
                Error::IamRoleNotFoundFault(inner)
            }
            crate::error::StartExportTaskError::InvalidExportOnlyFault(inner) => {
                Error::InvalidExportOnlyFault(inner)
            }
            crate::error::StartExportTaskError::InvalidExportSourceStateFault(inner) => {
                Error::InvalidExportSourceStateFault(inner)
            }
            crate::error::StartExportTaskError::InvalidS3BucketFault(inner) => {
                Error::InvalidS3BucketFault(inner)
            }
            crate::error::StartExportTaskError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::error::StartExportTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopActivityStreamError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopActivityStreamError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopActivityStreamError> for Error {
    fn from(err: crate::error::StopActivityStreamError) -> Self {
        match err {
            crate::error::StopActivityStreamError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::StopActivityStreamError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::StopActivityStreamError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::StopActivityStreamError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::StopActivityStreamError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::error::StopActivityStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopDBClusterError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopDBClusterError> for Error {
    fn from(err: crate::error::StopDBClusterError) -> Self {
        match err {
            crate::error::StopDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::error::StopDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::StopDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::StopDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopDBInstanceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopDBInstanceError> for Error {
    fn from(err: crate::error::StopDBInstanceError) -> Self {
        match err {
            crate::error::StopDBInstanceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::StopDBInstanceError::DbSnapshotAlreadyExistsFault(inner) => {
                Error::DbSnapshotAlreadyExistsFault(inner)
            }
            crate::error::StopDBInstanceError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::error::StopDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::StopDBInstanceError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::error::StopDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::StopDBInstanceAutomatedBackupsReplicationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::StopDBInstanceAutomatedBackupsReplicationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopDBInstanceAutomatedBackupsReplicationError> for Error {
    fn from(err: crate::error::StopDBInstanceAutomatedBackupsReplicationError) -> Self {
        match err {
            crate::error::StopDBInstanceAutomatedBackupsReplicationError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::error::StopDBInstanceAutomatedBackupsReplicationError::InvalidDbInstanceStateFault(inner) => Error::InvalidDbInstanceStateFault(inner),
            crate::error::StopDBInstanceAutomatedBackupsReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SwitchoverBlueGreenDeploymentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SwitchoverBlueGreenDeploymentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SwitchoverBlueGreenDeploymentError> for Error {
    fn from(err: crate::error::SwitchoverBlueGreenDeploymentError) -> Self {
        match err {
            crate::error::SwitchoverBlueGreenDeploymentError::BlueGreenDeploymentNotFoundFault(inner) => Error::BlueGreenDeploymentNotFoundFault(inner),
            crate::error::SwitchoverBlueGreenDeploymentError::InvalidBlueGreenDeploymentStateFault(inner) => Error::InvalidBlueGreenDeploymentStateFault(inner),
            crate::error::SwitchoverBlueGreenDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SwitchoverReadReplicaError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SwitchoverReadReplicaError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SwitchoverReadReplicaError> for Error {
    fn from(err: crate::error::SwitchoverReadReplicaError) -> Self {
        match err {
            crate::error::SwitchoverReadReplicaError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::error::SwitchoverReadReplicaError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::error::SwitchoverReadReplicaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AuthorizationAlreadyExistsFault(e) => e.request_id(),
            Self::AuthorizationNotFoundFault(e) => e.request_id(),
            Self::AuthorizationQuotaExceededFault(e) => e.request_id(),
            Self::BackupPolicyNotFoundFault(e) => e.request_id(),
            Self::BlueGreenDeploymentAlreadyExistsFault(e) => e.request_id(),
            Self::BlueGreenDeploymentNotFoundFault(e) => e.request_id(),
            Self::CertificateNotFoundFault(e) => e.request_id(),
            Self::CustomAvailabilityZoneNotFoundFault(e) => e.request_id(),
            Self::CustomDbEngineVersionAlreadyExistsFault(e) => e.request_id(),
            Self::CustomDbEngineVersionNotFoundFault(e) => e.request_id(),
            Self::CustomDbEngineVersionQuotaExceededFault(e) => e.request_id(),
            Self::DbClusterAlreadyExistsFault(e) => e.request_id(),
            Self::DbClusterBacktrackNotFoundFault(e) => e.request_id(),
            Self::DbClusterEndpointAlreadyExistsFault(e) => e.request_id(),
            Self::DbClusterEndpointNotFoundFault(e) => e.request_id(),
            Self::DbClusterEndpointQuotaExceededFault(e) => e.request_id(),
            Self::DbClusterNotFoundFault(e) => e.request_id(),
            Self::DbClusterParameterGroupNotFoundFault(e) => e.request_id(),
            Self::DbClusterQuotaExceededFault(e) => e.request_id(),
            Self::DbClusterRoleAlreadyExistsFault(e) => e.request_id(),
            Self::DbClusterRoleNotFoundFault(e) => e.request_id(),
            Self::DbClusterRoleQuotaExceededFault(e) => e.request_id(),
            Self::DbClusterSnapshotAlreadyExistsFault(e) => e.request_id(),
            Self::DbClusterSnapshotNotFoundFault(e) => e.request_id(),
            Self::DbInstanceAlreadyExistsFault(e) => e.request_id(),
            Self::DbInstanceAutomatedBackupNotFoundFault(e) => e.request_id(),
            Self::DbInstanceAutomatedBackupQuotaExceededFault(e) => e.request_id(),
            Self::DbInstanceNotFoundFault(e) => e.request_id(),
            Self::DbInstanceRoleAlreadyExistsFault(e) => e.request_id(),
            Self::DbInstanceRoleNotFoundFault(e) => e.request_id(),
            Self::DbInstanceRoleQuotaExceededFault(e) => e.request_id(),
            Self::DbLogFileNotFoundFault(e) => e.request_id(),
            Self::DbParameterGroupAlreadyExistsFault(e) => e.request_id(),
            Self::DbParameterGroupNotFoundFault(e) => e.request_id(),
            Self::DbParameterGroupQuotaExceededFault(e) => e.request_id(),
            Self::DbProxyAlreadyExistsFault(e) => e.request_id(),
            Self::DbProxyEndpointAlreadyExistsFault(e) => e.request_id(),
            Self::DbProxyEndpointNotFoundFault(e) => e.request_id(),
            Self::DbProxyEndpointQuotaExceededFault(e) => e.request_id(),
            Self::DbProxyNotFoundFault(e) => e.request_id(),
            Self::DbProxyQuotaExceededFault(e) => e.request_id(),
            Self::DbProxyTargetAlreadyRegisteredFault(e) => e.request_id(),
            Self::DbProxyTargetGroupNotFoundFault(e) => e.request_id(),
            Self::DbProxyTargetNotFoundFault(e) => e.request_id(),
            Self::DbSecurityGroupAlreadyExistsFault(e) => e.request_id(),
            Self::DbSecurityGroupNotFoundFault(e) => e.request_id(),
            Self::DbSecurityGroupNotSupportedFault(e) => e.request_id(),
            Self::DbSecurityGroupQuotaExceededFault(e) => e.request_id(),
            Self::DbSnapshotAlreadyExistsFault(e) => e.request_id(),
            Self::DbSnapshotNotFoundFault(e) => e.request_id(),
            Self::DbSubnetGroupAlreadyExistsFault(e) => e.request_id(),
            Self::DbSubnetGroupDoesNotCoverEnoughAZs(e) => e.request_id(),
            Self::DbSubnetGroupNotAllowedFault(e) => e.request_id(),
            Self::DbSubnetGroupNotFoundFault(e) => e.request_id(),
            Self::DbSubnetGroupQuotaExceededFault(e) => e.request_id(),
            Self::DbSubnetQuotaExceededFault(e) => e.request_id(),
            Self::DbUpgradeDependencyFailureFault(e) => e.request_id(),
            Self::DomainNotFoundFault(e) => e.request_id(),
            Self::Ec2ImagePropertiesNotSupportedFault(e) => e.request_id(),
            Self::EventSubscriptionQuotaExceededFault(e) => e.request_id(),
            Self::ExportTaskAlreadyExistsFault(e) => e.request_id(),
            Self::ExportTaskNotFoundFault(e) => e.request_id(),
            Self::GlobalClusterAlreadyExistsFault(e) => e.request_id(),
            Self::GlobalClusterNotFoundFault(e) => e.request_id(),
            Self::GlobalClusterQuotaExceededFault(e) => e.request_id(),
            Self::IamRoleMissingPermissionsFault(e) => e.request_id(),
            Self::IamRoleNotFoundFault(e) => e.request_id(),
            Self::InstanceQuotaExceededFault(e) => e.request_id(),
            Self::InsufficientAvailableIPsInSubnetFault(e) => e.request_id(),
            Self::InsufficientDbClusterCapacityFault(e) => e.request_id(),
            Self::InsufficientDbInstanceCapacityFault(e) => e.request_id(),
            Self::InsufficientStorageClusterCapacityFault(e) => e.request_id(),
            Self::InvalidBlueGreenDeploymentStateFault(e) => e.request_id(),
            Self::InvalidCustomDbEngineVersionStateFault(e) => e.request_id(),
            Self::InvalidDbClusterCapacityFault(e) => e.request_id(),
            Self::InvalidDbClusterEndpointStateFault(e) => e.request_id(),
            Self::InvalidDbClusterSnapshotStateFault(e) => e.request_id(),
            Self::InvalidDbClusterStateFault(e) => e.request_id(),
            Self::InvalidDbInstanceAutomatedBackupStateFault(e) => e.request_id(),
            Self::InvalidDbInstanceStateFault(e) => e.request_id(),
            Self::InvalidDbParameterGroupStateFault(e) => e.request_id(),
            Self::InvalidDbProxyEndpointStateFault(e) => e.request_id(),
            Self::InvalidDbProxyStateFault(e) => e.request_id(),
            Self::InvalidDbSecurityGroupStateFault(e) => e.request_id(),
            Self::InvalidDbSnapshotStateFault(e) => e.request_id(),
            Self::InvalidDbSubnetGroupFault(e) => e.request_id(),
            Self::InvalidDbSubnetGroupStateFault(e) => e.request_id(),
            Self::InvalidDbSubnetStateFault(e) => e.request_id(),
            Self::InvalidEventSubscriptionStateFault(e) => e.request_id(),
            Self::InvalidExportOnlyFault(e) => e.request_id(),
            Self::InvalidExportSourceStateFault(e) => e.request_id(),
            Self::InvalidExportTaskStateFault(e) => e.request_id(),
            Self::InvalidGlobalClusterStateFault(e) => e.request_id(),
            Self::InvalidOptionGroupStateFault(e) => e.request_id(),
            Self::InvalidRestoreFault(e) => e.request_id(),
            Self::InvalidS3BucketFault(e) => e.request_id(),
            Self::InvalidSubnet(e) => e.request_id(),
            Self::InvalidVpcNetworkStateFault(e) => e.request_id(),
            Self::KmsKeyNotAccessibleFault(e) => e.request_id(),
            Self::NetworkTypeNotSupported(e) => e.request_id(),
            Self::OptionGroupAlreadyExistsFault(e) => e.request_id(),
            Self::OptionGroupNotFoundFault(e) => e.request_id(),
            Self::OptionGroupQuotaExceededFault(e) => e.request_id(),
            Self::PointInTimeRestoreNotEnabledFault(e) => e.request_id(),
            Self::ProvisionedIopsNotAvailableInAzFault(e) => e.request_id(),
            Self::ReservedDbInstanceAlreadyExistsFault(e) => e.request_id(),
            Self::ReservedDbInstanceNotFoundFault(e) => e.request_id(),
            Self::ReservedDbInstanceQuotaExceededFault(e) => e.request_id(),
            Self::ReservedDbInstancesOfferingNotFoundFault(e) => e.request_id(),
            Self::ResourceNotFoundFault(e) => e.request_id(),
            Self::SnsInvalidTopicFault(e) => e.request_id(),
            Self::SnsNoAuthorizationFault(e) => e.request_id(),
            Self::SnsTopicArnNotFoundFault(e) => e.request_id(),
            Self::SharedSnapshotQuotaExceededFault(e) => e.request_id(),
            Self::SnapshotQuotaExceededFault(e) => e.request_id(),
            Self::SourceClusterNotSupportedFault(e) => e.request_id(),
            Self::SourceDatabaseNotSupportedFault(e) => e.request_id(),
            Self::SourceNotFoundFault(e) => e.request_id(),
            Self::StorageQuotaExceededFault(e) => e.request_id(),
            Self::StorageTypeNotSupportedFault(e) => e.request_id(),
            Self::SubnetAlreadyInUse(e) => e.request_id(),
            Self::SubscriptionAlreadyExistFault(e) => e.request_id(),
            Self::SubscriptionCategoryNotFoundFault(e) => e.request_id(),
            Self::SubscriptionNotFoundFault(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
