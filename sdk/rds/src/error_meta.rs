// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>The specified CIDR IP range or Amazon EC2 security group is already authorized for the specified DB security group.</p>
    AuthorizationAlreadyExistsFault(crate::types::error::AuthorizationAlreadyExistsFault),
    /// <p>The specified CIDR IP range or Amazon EC2 security group might not be authorized for the specified DB security group.</p>
    /// <p>Or, RDS might not be authorized to perform necessary actions using IAM on your behalf.</p>
    AuthorizationNotFoundFault(crate::types::error::AuthorizationNotFoundFault),
    /// <p>The DB security group authorization quota has been reached.</p>
    AuthorizationQuotaExceededFault(crate::types::error::AuthorizationQuotaExceededFault),
    #[allow(missing_docs)] // documentation missing in model
    #[deprecated(note = "Please avoid using this fault")]
    BackupPolicyNotFoundFault(crate::types::error::BackupPolicyNotFoundFault),
    /// <p>A blue/green deployment with the specified name already exists.</p>
    BlueGreenDeploymentAlreadyExistsFault(crate::types::error::BlueGreenDeploymentAlreadyExistsFault),
    /// <p><code>BlueGreenDeploymentIdentifier</code> doesn't refer to an existing blue/green deployment.</p>
    BlueGreenDeploymentNotFoundFault(crate::types::error::BlueGreenDeploymentNotFoundFault),
    /// <p><code>CertificateIdentifier</code> doesn't refer to an existing certificate.</p>
    CertificateNotFoundFault(crate::types::error::CertificateNotFoundFault),
    /// <p>An error occurred while trying to create the CEV.</p>
    CreateCustomDbEngineVersionFault(crate::types::error::CreateCustomDbEngineVersionFault),
    /// <p><code>CustomAvailabilityZoneId</code> doesn't refer to an existing custom Availability Zone identifier.</p>
    CustomAvailabilityZoneNotFoundFault(crate::types::error::CustomAvailabilityZoneNotFoundFault),
    /// <p>A CEV with the specified name already exists.</p>
    CustomDbEngineVersionAlreadyExistsFault(crate::types::error::CustomDbEngineVersionAlreadyExistsFault),
    /// <p>The specified CEV was not found.</p>
    CustomDbEngineVersionNotFoundFault(crate::types::error::CustomDbEngineVersionNotFoundFault),
    /// <p>You have exceeded your CEV quota.</p>
    CustomDbEngineVersionQuotaExceededFault(crate::types::error::CustomDbEngineVersionQuotaExceededFault),
    /// <p>The user already has a DB cluster with the given identifier.</p>
    DbClusterAlreadyExistsFault(crate::types::error::DbClusterAlreadyExistsFault),
    /// <p>No automated backup for this DB cluster was found.</p>
    DbClusterAutomatedBackupNotFoundFault(crate::types::error::DbClusterAutomatedBackupNotFoundFault),
    /// <p>The quota for retained automated backups was exceeded. This prevents you from retaining any additional automated backups. The retained automated backups quota is the same as your DB cluster quota.</p>
    DbClusterAutomatedBackupQuotaExceededFault(crate::types::error::DbClusterAutomatedBackupQuotaExceededFault),
    /// <p><code>BacktrackIdentifier</code> doesn't refer to an existing backtrack.</p>
    DbClusterBacktrackNotFoundFault(crate::types::error::DbClusterBacktrackNotFoundFault),
    /// <p>The specified custom endpoint can't be created because it already exists.</p>
    DbClusterEndpointAlreadyExistsFault(crate::types::error::DbClusterEndpointAlreadyExistsFault),
    /// <p>The specified custom endpoint doesn't exist.</p>
    DbClusterEndpointNotFoundFault(crate::types::error::DbClusterEndpointNotFoundFault),
    /// <p>The cluster already has the maximum number of custom endpoints.</p>
    DbClusterEndpointQuotaExceededFault(crate::types::error::DbClusterEndpointQuotaExceededFault),
    /// <p><code>DBClusterIdentifier</code> doesn't refer to an existing DB cluster.</p>
    DbClusterNotFoundFault(crate::types::error::DbClusterNotFoundFault),
    /// <p><code>DBClusterParameterGroupName</code> doesn't refer to an existing DB cluster parameter group.</p>
    DbClusterParameterGroupNotFoundFault(crate::types::error::DbClusterParameterGroupNotFoundFault),
    /// <p>The user attempted to create a new DB cluster and the user has already reached the maximum allowed DB cluster quota.</p>
    DbClusterQuotaExceededFault(crate::types::error::DbClusterQuotaExceededFault),
    /// <p>The specified IAM role Amazon Resource Name (ARN) is already associated with the specified DB cluster.</p>
    DbClusterRoleAlreadyExistsFault(crate::types::error::DbClusterRoleAlreadyExistsFault),
    /// <p>The specified IAM role Amazon Resource Name (ARN) isn't associated with the specified DB cluster.</p>
    DbClusterRoleNotFoundFault(crate::types::error::DbClusterRoleNotFoundFault),
    /// <p>You have exceeded the maximum number of IAM roles that can be associated with the specified DB cluster.</p>
    DbClusterRoleQuotaExceededFault(crate::types::error::DbClusterRoleQuotaExceededFault),
    /// <p>The user already has a DB cluster snapshot with the given identifier.</p>
    DbClusterSnapshotAlreadyExistsFault(crate::types::error::DbClusterSnapshotAlreadyExistsFault),
    /// <p><code>DBClusterSnapshotIdentifier</code> doesn't refer to an existing DB cluster snapshot.</p>
    DbClusterSnapshotNotFoundFault(crate::types::error::DbClusterSnapshotNotFoundFault),
    /// <p>The user already has a DB instance with the given identifier.</p>
    DbInstanceAlreadyExistsFault(crate::types::error::DbInstanceAlreadyExistsFault),
    /// <p>No automated backup for this DB instance was found.</p>
    DbInstanceAutomatedBackupNotFoundFault(crate::types::error::DbInstanceAutomatedBackupNotFoundFault),
    /// <p>The quota for retained automated backups was exceeded. This prevents you from retaining any additional automated backups. The retained automated backups quota is the same as your DB instance quota.</p>
    DbInstanceAutomatedBackupQuotaExceededFault(crate::types::error::DbInstanceAutomatedBackupQuotaExceededFault),
    /// <p><code>DBInstanceIdentifier</code> doesn't refer to an existing DB instance.</p>
    DbInstanceNotFoundFault(crate::types::error::DbInstanceNotFoundFault),
    /// <p>The specified <code>RoleArn</code> or <code>FeatureName</code> value is already associated with the DB instance.</p>
    DbInstanceRoleAlreadyExistsFault(crate::types::error::DbInstanceRoleAlreadyExistsFault),
    /// <p>The specified <code>RoleArn</code> value doesn't match the specified feature for the DB instance.</p>
    DbInstanceRoleNotFoundFault(crate::types::error::DbInstanceRoleNotFoundFault),
    /// <p>You can't associate any more Amazon Web Services Identity and Access Management (IAM) roles with the DB instance because the quota has been reached.</p>
    DbInstanceRoleQuotaExceededFault(crate::types::error::DbInstanceRoleQuotaExceededFault),
    /// <p><code>LogFileName</code> doesn't refer to an existing DB log file.</p>
    DbLogFileNotFoundFault(crate::types::error::DbLogFileNotFoundFault),
    /// <p>A DB parameter group with the same name exists.</p>
    DbParameterGroupAlreadyExistsFault(crate::types::error::DbParameterGroupAlreadyExistsFault),
    /// <p><code>DBParameterGroupName</code> doesn't refer to an existing DB parameter group.</p>
    DbParameterGroupNotFoundFault(crate::types::error::DbParameterGroupNotFoundFault),
    /// <p>The request would result in the user exceeding the allowed number of DB parameter groups.</p>
    DbParameterGroupQuotaExceededFault(crate::types::error::DbParameterGroupQuotaExceededFault),
    /// <p>The specified proxy name must be unique for all proxies owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DbProxyAlreadyExistsFault(crate::types::error::DbProxyAlreadyExistsFault),
    /// <p>The specified DB proxy endpoint name must be unique for all DB proxy endpoints owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DbProxyEndpointAlreadyExistsFault(crate::types::error::DbProxyEndpointAlreadyExistsFault),
    /// <p>The DB proxy endpoint doesn't exist.</p>
    DbProxyEndpointNotFoundFault(crate::types::error::DbProxyEndpointNotFoundFault),
    /// <p>The DB proxy already has the maximum number of endpoints.</p>
    DbProxyEndpointQuotaExceededFault(crate::types::error::DbProxyEndpointQuotaExceededFault),
    /// <p>The specified proxy name doesn't correspond to a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DbProxyNotFoundFault(crate::types::error::DbProxyNotFoundFault),
    /// <p>Your Amazon Web Services account already has the maximum number of proxies in the specified Amazon Web Services Region.</p>
    DbProxyQuotaExceededFault(crate::types::error::DbProxyQuotaExceededFault),
    /// <p>The proxy is already associated with the specified RDS DB instance or Aurora DB cluster.</p>
    DbProxyTargetAlreadyRegisteredFault(crate::types::error::DbProxyTargetAlreadyRegisteredFault),
    /// <p>The specified target group isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DbProxyTargetGroupNotFoundFault(crate::types::error::DbProxyTargetGroupNotFoundFault),
    /// <p>The specified RDS DB instance or Aurora DB cluster isn't available for a proxy owned by your Amazon Web Services account in the specified Amazon Web Services Region.</p>
    DbProxyTargetNotFoundFault(crate::types::error::DbProxyTargetNotFoundFault),
    /// <p>A DB security group with the name specified in <code>DBSecurityGroupName</code> already exists.</p>
    DbSecurityGroupAlreadyExistsFault(crate::types::error::DbSecurityGroupAlreadyExistsFault),
    /// <p><code>DBSecurityGroupName</code> doesn't refer to an existing DB security group.</p>
    DbSecurityGroupNotFoundFault(crate::types::error::DbSecurityGroupNotFoundFault),
    /// <p>A DB security group isn't allowed for this action.</p>
    DbSecurityGroupNotSupportedFault(crate::types::error::DbSecurityGroupNotSupportedFault),
    /// <p>The request would result in the user exceeding the allowed number of DB security groups.</p>
    DbSecurityGroupQuotaExceededFault(crate::types::error::DbSecurityGroupQuotaExceededFault),
    /// <p><code>DBSnapshotIdentifier</code> is already used by an existing snapshot.</p>
    DbSnapshotAlreadyExistsFault(crate::types::error::DbSnapshotAlreadyExistsFault),
    /// <p><code>DBSnapshotIdentifier</code> doesn't refer to an existing DB snapshot.</p>
    DbSnapshotNotFoundFault(crate::types::error::DbSnapshotNotFoundFault),
    /// <p>The specified snapshot tenant database wasn't found.</p>
    DbSnapshotTenantDatabaseNotFoundFault(crate::types::error::DbSnapshotTenantDatabaseNotFoundFault),
    /// <p><code>DBSubnetGroupName</code> is already used by an existing DB subnet group.</p>
    DbSubnetGroupAlreadyExistsFault(crate::types::error::DbSubnetGroupAlreadyExistsFault),
    /// <p>Subnets in the DB subnet group should cover at least two Availability Zones unless there is only one Availability Zone.</p>
    DbSubnetGroupDoesNotCoverEnoughAZs(crate::types::error::DbSubnetGroupDoesNotCoverEnoughAZs),
    /// <p>The DBSubnetGroup shouldn't be specified while creating read replicas that lie in the same region as the source instance.</p>
    DbSubnetGroupNotAllowedFault(crate::types::error::DbSubnetGroupNotAllowedFault),
    /// <p><code>DBSubnetGroupName</code> doesn't refer to an existing DB subnet group.</p>
    DbSubnetGroupNotFoundFault(crate::types::error::DbSubnetGroupNotFoundFault),
    /// <p>The request would result in the user exceeding the allowed number of DB subnet groups.</p>
    DbSubnetGroupQuotaExceededFault(crate::types::error::DbSubnetGroupQuotaExceededFault),
    /// <p>The request would result in the user exceeding the allowed number of subnets in a DB subnet groups.</p>
    DbSubnetQuotaExceededFault(crate::types::error::DbSubnetQuotaExceededFault),
    /// <p>The DB upgrade failed because a resource the DB depends on can't be modified.</p>
    DbUpgradeDependencyFailureFault(crate::types::error::DbUpgradeDependencyFailureFault),
    /// <p><code>Domain</code> doesn't refer to an existing Active Directory domain.</p>
    DomainNotFoundFault(crate::types::error::DomainNotFoundFault),
    /// <p>The AMI configuration prerequisite has not been met.</p>
    Ec2ImagePropertiesNotSupportedFault(crate::types::error::Ec2ImagePropertiesNotSupportedFault),
    /// <p>You have reached the maximum number of event subscriptions.</p>
    EventSubscriptionQuotaExceededFault(crate::types::error::EventSubscriptionQuotaExceededFault),
    /// <p>You can't start an export task that's already running.</p>
    ExportTaskAlreadyExistsFault(crate::types::error::ExportTaskAlreadyExistsFault),
    /// <p>The export task doesn't exist.</p>
    ExportTaskNotFoundFault(crate::types::error::ExportTaskNotFoundFault),
    /// <p>The <code>GlobalClusterIdentifier</code> already exists. Choose a new global database identifier (unique name) to create a new global database cluster.</p>
    GlobalClusterAlreadyExistsFault(crate::types::error::GlobalClusterAlreadyExistsFault),
    /// <p>The <code>GlobalClusterIdentifier</code> doesn't refer to an existing global database cluster.</p>
    GlobalClusterNotFoundFault(crate::types::error::GlobalClusterNotFoundFault),
    /// <p>The number of global database clusters for this account is already at the maximum allowed.</p>
    GlobalClusterQuotaExceededFault(crate::types::error::GlobalClusterQuotaExceededFault),
    /// <p>The IAM role requires additional permissions to export to an Amazon S3 bucket.</p>
    IamRoleMissingPermissionsFault(crate::types::error::IamRoleMissingPermissionsFault),
    /// <p>The IAM role is missing for exporting to an Amazon S3 bucket.</p>
    IamRoleNotFoundFault(crate::types::error::IamRoleNotFoundFault),
    /// <p>The request would result in the user exceeding the allowed number of DB instances.</p>
    InstanceQuotaExceededFault(crate::types::error::InstanceQuotaExceededFault),
    /// <p>The requested operation can't be performed because there aren't enough available IP addresses in the proxy's subnets. Add more CIDR blocks to the VPC or remove IP address that aren't required from the subnets.</p>
    InsufficientAvailableIPsInSubnetFault(crate::types::error::InsufficientAvailableIPsInSubnetFault),
    /// <p>The DB cluster doesn't have enough capacity for the current operation.</p>
    InsufficientDbClusterCapacityFault(crate::types::error::InsufficientDbClusterCapacityFault),
    /// <p>The specified DB instance class isn't available in the specified Availability Zone.</p>
    InsufficientDbInstanceCapacityFault(crate::types::error::InsufficientDbInstanceCapacityFault),
    /// <p>There is insufficient storage available for the current action. You might be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available.</p>
    InsufficientStorageClusterCapacityFault(crate::types::error::InsufficientStorageClusterCapacityFault),
    /// <p>The integration you are trying to create already exists.</p>
    IntegrationAlreadyExistsFault(crate::types::error::IntegrationAlreadyExistsFault),
    /// <p>A conflicting conditional operation is currently in progress against this resource. Typically occurs when there are multiple requests being made to the same resource at the same time, and these requests conflict with each other.</p>
    IntegrationConflictOperationFault(crate::types::error::IntegrationConflictOperationFault),
    /// <p>The specified integration could not be found.</p>
    IntegrationNotFoundFault(crate::types::error::IntegrationNotFoundFault),
    /// <p>You can't crate any more zero-ETL integrations because the quota has been reached.</p>
    IntegrationQuotaExceededFault(crate::types::error::IntegrationQuotaExceededFault),
    /// <p>The blue/green deployment can't be switched over or deleted because there is an invalid configuration in the green environment.</p>
    InvalidBlueGreenDeploymentStateFault(crate::types::error::InvalidBlueGreenDeploymentStateFault),
    /// <p>You can't delete the CEV.</p>
    InvalidCustomDbEngineVersionStateFault(crate::types::error::InvalidCustomDbEngineVersionStateFault),
    /// <p>The automated backup is in an invalid state. For example, this automated backup is associated with an active cluster.</p>
    InvalidDbClusterAutomatedBackupStateFault(crate::types::error::InvalidDbClusterAutomatedBackupStateFault),
    /// <p><code>Capacity</code> isn't a valid Aurora Serverless DB cluster capacity. Valid capacity values are <code>2</code>, <code>4</code>, <code>8</code>, <code>16</code>, <code>32</code>, <code>64</code>, <code>128</code>, and <code>256</code>.</p>
    InvalidDbClusterCapacityFault(crate::types::error::InvalidDbClusterCapacityFault),
    /// <p>The requested operation can't be performed on the endpoint while the endpoint is in this state.</p>
    InvalidDbClusterEndpointStateFault(crate::types::error::InvalidDbClusterEndpointStateFault),
    /// <p>The supplied value isn't a valid DB cluster snapshot state.</p>
    InvalidDbClusterSnapshotStateFault(crate::types::error::InvalidDbClusterSnapshotStateFault),
    /// <p>The requested operation can't be performed while the cluster is in this state.</p>
    InvalidDbClusterStateFault(crate::types::error::InvalidDbClusterStateFault),
    /// <p>The automated backup is in an invalid state. For example, this automated backup is associated with an active instance.</p>
    InvalidDbInstanceAutomatedBackupStateFault(crate::types::error::InvalidDbInstanceAutomatedBackupStateFault),
    /// <p>The DB instance isn't in a valid state.</p>
    InvalidDbInstanceStateFault(crate::types::error::InvalidDbInstanceStateFault),
    /// <p>The DB parameter group is in use or is in an invalid state. If you are attempting to delete the parameter group, you can't delete it when the parameter group is in this state.</p>
    InvalidDbParameterGroupStateFault(crate::types::error::InvalidDbParameterGroupStateFault),
    /// <p>You can't perform this operation while the DB proxy endpoint is in a particular state.</p>
    InvalidDbProxyEndpointStateFault(crate::types::error::InvalidDbProxyEndpointStateFault),
    /// <p>The requested operation can't be performed while the proxy is in this state.</p>
    InvalidDbProxyStateFault(crate::types::error::InvalidDbProxyStateFault),
    /// <p>The state of the DB security group doesn't allow deletion.</p>
    InvalidDbSecurityGroupStateFault(crate::types::error::InvalidDbSecurityGroupStateFault),
    /// <p>The state of the DB snapshot doesn't allow deletion.</p>
    InvalidDbSnapshotStateFault(crate::types::error::InvalidDbSnapshotStateFault),
    /// <p>The DBSubnetGroup doesn't belong to the same VPC as that of an existing cross-region read replica of the same source instance.</p>
    InvalidDbSubnetGroupFault(crate::types::error::InvalidDbSubnetGroupFault),
    /// <p>The DB subnet group cannot be deleted because it's in use.</p>
    InvalidDbSubnetGroupStateFault(crate::types::error::InvalidDbSubnetGroupStateFault),
    /// <p>The DB subnet isn't in the <i>available</i> state.</p>
    InvalidDbSubnetStateFault(crate::types::error::InvalidDbSubnetStateFault),
    /// <p>This error can occur if someone else is modifying a subscription. You should retry the action.</p>
    InvalidEventSubscriptionStateFault(crate::types::error::InvalidEventSubscriptionStateFault),
    /// <p>The export is invalid for exporting to an Amazon S3 bucket.</p>
    InvalidExportOnlyFault(crate::types::error::InvalidExportOnlyFault),
    /// <p>The state of the export snapshot is invalid for exporting to an Amazon S3 bucket.</p>
    InvalidExportSourceStateFault(crate::types::error::InvalidExportSourceStateFault),
    /// <p>You can't cancel an export task that has completed.</p>
    InvalidExportTaskStateFault(crate::types::error::InvalidExportTaskStateFault),
    /// <p>The global cluster is in an invalid state and can't perform the requested operation.</p>
    InvalidGlobalClusterStateFault(crate::types::error::InvalidGlobalClusterStateFault),
    /// <p>The integration is in an invalid state and can't perform the requested operation.</p>
    InvalidIntegrationStateFault(crate::types::error::InvalidIntegrationStateFault),
    /// <p>The option group isn't in the <i>available</i> state.</p>
    InvalidOptionGroupStateFault(crate::types::error::InvalidOptionGroupStateFault),
    /// <p>Cannot restore from VPC backup to non-VPC DB instance.</p>
    InvalidRestoreFault(crate::types::error::InvalidRestoreFault),
    /// <p>The specified Amazon S3 bucket name can't be found or Amazon RDS isn't authorized to access the specified Amazon S3 bucket. Verify the <b>SourceS3BucketName</b> and <b>S3IngestionRoleArn</b> values and try again.</p>
    InvalidS3BucketFault(crate::types::error::InvalidS3BucketFault),
    /// <p>The requested subnet is invalid, or multiple subnets were requested that are not all in a common VPC.</p>
    InvalidSubnet(crate::types::error::InvalidSubnet),
    /// <p>The DB subnet group doesn't cover all Availability Zones after it's created because of users' change.</p>
    InvalidVpcNetworkStateFault(crate::types::error::InvalidVpcNetworkStateFault),
    /// <p>An error occurred accessing an Amazon Web Services KMS key.</p>
    KmsKeyNotAccessibleFault(crate::types::error::KmsKeyNotAccessibleFault),
    /// <p>The network type is invalid for the DB instance. Valid nework type values are <code>IPV4</code> and <code>DUAL</code>.</p>
    NetworkTypeNotSupported(crate::types::error::NetworkTypeNotSupported),
    /// <p>The option group you are trying to create already exists.</p>
    OptionGroupAlreadyExistsFault(crate::types::error::OptionGroupAlreadyExistsFault),
    /// <p>The specified option group could not be found.</p>
    OptionGroupNotFoundFault(crate::types::error::OptionGroupNotFoundFault),
    /// <p>The quota of 20 option groups was exceeded for this Amazon Web Services account.</p>
    OptionGroupQuotaExceededFault(crate::types::error::OptionGroupQuotaExceededFault),
    /// <p><code>SourceDBInstanceIdentifier</code> refers to a DB instance with <code>BackupRetentionPeriod</code> equal to 0.</p>
    PointInTimeRestoreNotEnabledFault(crate::types::error::PointInTimeRestoreNotEnabledFault),
    /// <p>Provisioned IOPS not available in the specified Availability Zone.</p>
    ProvisionedIopsNotAvailableInAzFault(crate::types::error::ProvisionedIopsNotAvailableInAzFault),
    /// <p>User already has a reservation with the given identifier.</p>
    ReservedDbInstanceAlreadyExistsFault(crate::types::error::ReservedDbInstanceAlreadyExistsFault),
    /// <p>The specified reserved DB Instance not found.</p>
    ReservedDbInstanceNotFoundFault(crate::types::error::ReservedDbInstanceNotFoundFault),
    /// <p>Request would exceed the user's DB Instance quota.</p>
    ReservedDbInstanceQuotaExceededFault(crate::types::error::ReservedDbInstanceQuotaExceededFault),
    /// <p>Specified offering does not exist.</p>
    ReservedDbInstancesOfferingNotFoundFault(crate::types::error::ReservedDbInstancesOfferingNotFoundFault),
    /// <p>The specified resource ID was not found.</p>
    ResourceNotFoundFault(crate::types::error::ResourceNotFoundFault),
    /// <p>SNS has responded that there is a problem with the SNS topic specified.</p>
    SnsInvalidTopicFault(crate::types::error::SnsInvalidTopicFault),
    /// <p>You do not have permission to publish to the SNS topic ARN.</p>
    SnsNoAuthorizationFault(crate::types::error::SnsNoAuthorizationFault),
    /// <p>The SNS topic ARN does not exist.</p>
    SnsTopicArnNotFoundFault(crate::types::error::SnsTopicArnNotFoundFault),
    /// <p>You have exceeded the maximum number of accounts that you can share a manual DB snapshot with.</p>
    SharedSnapshotQuotaExceededFault(crate::types::error::SharedSnapshotQuotaExceededFault),
    /// <p>The request would result in the user exceeding the allowed number of DB snapshots.</p>
    SnapshotQuotaExceededFault(crate::types::error::SnapshotQuotaExceededFault),
    /// <p>The source DB cluster isn't supported for a blue/green deployment.</p>
    SourceClusterNotSupportedFault(crate::types::error::SourceClusterNotSupportedFault),
    /// <p>The source DB instance isn't supported for a blue/green deployment.</p>
    SourceDatabaseNotSupportedFault(crate::types::error::SourceDatabaseNotSupportedFault),
    /// <p>The requested source could not be found.</p>
    SourceNotFoundFault(crate::types::error::SourceNotFoundFault),
    /// <p>The request would result in the user exceeding the allowed amount of storage available across all DB instances.</p>
    StorageQuotaExceededFault(crate::types::error::StorageQuotaExceededFault),
    /// <p>The <code>aurora-iopt1</code> storage type isn't available, because you modified the DB cluster to use this storage type less than one month ago.</p>
    StorageTypeNotAvailableFault(crate::types::error::StorageTypeNotAvailableFault),
    /// <p>The specified <code>StorageType</code> can't be associated with the DB instance.</p>
    StorageTypeNotSupportedFault(crate::types::error::StorageTypeNotSupportedFault),
    /// <p>The DB subnet is already in use in the Availability Zone.</p>
    SubnetAlreadyInUse(crate::types::error::SubnetAlreadyInUse),
    /// <p>The supplied subscription name already exists.</p>
    SubscriptionAlreadyExistFault(crate::types::error::SubscriptionAlreadyExistFault),
    /// <p>The supplied category does not exist.</p>
    SubscriptionCategoryNotFoundFault(crate::types::error::SubscriptionCategoryNotFoundFault),
    /// <p>The subscription name does not exist.</p>
    SubscriptionNotFoundFault(crate::types::error::SubscriptionNotFoundFault),
    /// <p>You attempted to either create a tenant database that already exists or modify a tenant database to use the name of an existing tenant database.</p>
    TenantDatabaseAlreadyExistsFault(crate::types::error::TenantDatabaseAlreadyExistsFault),
    /// <p>The specified tenant database wasn't found in the DB instance.</p>
    TenantDatabaseNotFoundFault(crate::types::error::TenantDatabaseNotFoundFault),
    /// <p>You attempted to create more tenant databases than are permitted in your Amazon Web Services account.</p>
    TenantDatabaseQuotaExceededFault(crate::types::error::TenantDatabaseQuotaExceededFault),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AuthorizationAlreadyExistsFault(inner) => inner.fmt(f),
            Error::AuthorizationNotFoundFault(inner) => inner.fmt(f),
            Error::AuthorizationQuotaExceededFault(inner) => inner.fmt(f),
            Error::BackupPolicyNotFoundFault(inner) => inner.fmt(f),
            Error::BlueGreenDeploymentAlreadyExistsFault(inner) => inner.fmt(f),
            Error::BlueGreenDeploymentNotFoundFault(inner) => inner.fmt(f),
            Error::CertificateNotFoundFault(inner) => inner.fmt(f),
            Error::CreateCustomDbEngineVersionFault(inner) => inner.fmt(f),
            Error::CustomAvailabilityZoneNotFoundFault(inner) => inner.fmt(f),
            Error::CustomDbEngineVersionAlreadyExistsFault(inner) => inner.fmt(f),
            Error::CustomDbEngineVersionNotFoundFault(inner) => inner.fmt(f),
            Error::CustomDbEngineVersionQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbClusterAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbClusterAutomatedBackupNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterAutomatedBackupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbClusterBacktrackNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterEndpointAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbClusterEndpointNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterEndpointQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbClusterNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterParameterGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbClusterRoleAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbClusterRoleNotFoundFault(inner) => inner.fmt(f),
            Error::DbClusterRoleQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbClusterSnapshotAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbClusterSnapshotNotFoundFault(inner) => inner.fmt(f),
            Error::DbInstanceAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbInstanceAutomatedBackupNotFoundFault(inner) => inner.fmt(f),
            Error::DbInstanceAutomatedBackupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbInstanceNotFoundFault(inner) => inner.fmt(f),
            Error::DbInstanceRoleAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbInstanceRoleNotFoundFault(inner) => inner.fmt(f),
            Error::DbInstanceRoleQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbLogFileNotFoundFault(inner) => inner.fmt(f),
            Error::DbParameterGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbParameterGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbParameterGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbProxyAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbProxyEndpointAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbProxyEndpointNotFoundFault(inner) => inner.fmt(f),
            Error::DbProxyEndpointQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbProxyNotFoundFault(inner) => inner.fmt(f),
            Error::DbProxyQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbProxyTargetAlreadyRegisteredFault(inner) => inner.fmt(f),
            Error::DbProxyTargetGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbProxyTargetNotFoundFault(inner) => inner.fmt(f),
            Error::DbSecurityGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbSecurityGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbSecurityGroupNotSupportedFault(inner) => inner.fmt(f),
            Error::DbSecurityGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbSnapshotAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbSnapshotNotFoundFault(inner) => inner.fmt(f),
            Error::DbSnapshotTenantDatabaseNotFoundFault(inner) => inner.fmt(f),
            Error::DbSubnetGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => inner.fmt(f),
            Error::DbSubnetGroupNotAllowedFault(inner) => inner.fmt(f),
            Error::DbSubnetGroupNotFoundFault(inner) => inner.fmt(f),
            Error::DbSubnetGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbSubnetQuotaExceededFault(inner) => inner.fmt(f),
            Error::DbUpgradeDependencyFailureFault(inner) => inner.fmt(f),
            Error::DomainNotFoundFault(inner) => inner.fmt(f),
            Error::Ec2ImagePropertiesNotSupportedFault(inner) => inner.fmt(f),
            Error::EventSubscriptionQuotaExceededFault(inner) => inner.fmt(f),
            Error::ExportTaskAlreadyExistsFault(inner) => inner.fmt(f),
            Error::ExportTaskNotFoundFault(inner) => inner.fmt(f),
            Error::GlobalClusterAlreadyExistsFault(inner) => inner.fmt(f),
            Error::GlobalClusterNotFoundFault(inner) => inner.fmt(f),
            Error::GlobalClusterQuotaExceededFault(inner) => inner.fmt(f),
            Error::IamRoleMissingPermissionsFault(inner) => inner.fmt(f),
            Error::IamRoleNotFoundFault(inner) => inner.fmt(f),
            Error::InstanceQuotaExceededFault(inner) => inner.fmt(f),
            Error::InsufficientAvailableIPsInSubnetFault(inner) => inner.fmt(f),
            Error::InsufficientDbClusterCapacityFault(inner) => inner.fmt(f),
            Error::InsufficientDbInstanceCapacityFault(inner) => inner.fmt(f),
            Error::InsufficientStorageClusterCapacityFault(inner) => inner.fmt(f),
            Error::IntegrationAlreadyExistsFault(inner) => inner.fmt(f),
            Error::IntegrationConflictOperationFault(inner) => inner.fmt(f),
            Error::IntegrationNotFoundFault(inner) => inner.fmt(f),
            Error::IntegrationQuotaExceededFault(inner) => inner.fmt(f),
            Error::InvalidBlueGreenDeploymentStateFault(inner) => inner.fmt(f),
            Error::InvalidCustomDbEngineVersionStateFault(inner) => inner.fmt(f),
            Error::InvalidDbClusterAutomatedBackupStateFault(inner) => inner.fmt(f),
            Error::InvalidDbClusterCapacityFault(inner) => inner.fmt(f),
            Error::InvalidDbClusterEndpointStateFault(inner) => inner.fmt(f),
            Error::InvalidDbClusterSnapshotStateFault(inner) => inner.fmt(f),
            Error::InvalidDbClusterStateFault(inner) => inner.fmt(f),
            Error::InvalidDbInstanceAutomatedBackupStateFault(inner) => inner.fmt(f),
            Error::InvalidDbInstanceStateFault(inner) => inner.fmt(f),
            Error::InvalidDbParameterGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidDbProxyEndpointStateFault(inner) => inner.fmt(f),
            Error::InvalidDbProxyStateFault(inner) => inner.fmt(f),
            Error::InvalidDbSecurityGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidDbSnapshotStateFault(inner) => inner.fmt(f),
            Error::InvalidDbSubnetGroupFault(inner) => inner.fmt(f),
            Error::InvalidDbSubnetGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidDbSubnetStateFault(inner) => inner.fmt(f),
            Error::InvalidEventSubscriptionStateFault(inner) => inner.fmt(f),
            Error::InvalidExportOnlyFault(inner) => inner.fmt(f),
            Error::InvalidExportSourceStateFault(inner) => inner.fmt(f),
            Error::InvalidExportTaskStateFault(inner) => inner.fmt(f),
            Error::InvalidGlobalClusterStateFault(inner) => inner.fmt(f),
            Error::InvalidIntegrationStateFault(inner) => inner.fmt(f),
            Error::InvalidOptionGroupStateFault(inner) => inner.fmt(f),
            Error::InvalidRestoreFault(inner) => inner.fmt(f),
            Error::InvalidS3BucketFault(inner) => inner.fmt(f),
            Error::InvalidSubnet(inner) => inner.fmt(f),
            Error::InvalidVpcNetworkStateFault(inner) => inner.fmt(f),
            Error::KmsKeyNotAccessibleFault(inner) => inner.fmt(f),
            Error::NetworkTypeNotSupported(inner) => inner.fmt(f),
            Error::OptionGroupAlreadyExistsFault(inner) => inner.fmt(f),
            Error::OptionGroupNotFoundFault(inner) => inner.fmt(f),
            Error::OptionGroupQuotaExceededFault(inner) => inner.fmt(f),
            Error::PointInTimeRestoreNotEnabledFault(inner) => inner.fmt(f),
            Error::ProvisionedIopsNotAvailableInAzFault(inner) => inner.fmt(f),
            Error::ReservedDbInstanceAlreadyExistsFault(inner) => inner.fmt(f),
            Error::ReservedDbInstanceNotFoundFault(inner) => inner.fmt(f),
            Error::ReservedDbInstanceQuotaExceededFault(inner) => inner.fmt(f),
            Error::ReservedDbInstancesOfferingNotFoundFault(inner) => inner.fmt(f),
            Error::ResourceNotFoundFault(inner) => inner.fmt(f),
            Error::SnsInvalidTopicFault(inner) => inner.fmt(f),
            Error::SnsNoAuthorizationFault(inner) => inner.fmt(f),
            Error::SnsTopicArnNotFoundFault(inner) => inner.fmt(f),
            Error::SharedSnapshotQuotaExceededFault(inner) => inner.fmt(f),
            Error::SnapshotQuotaExceededFault(inner) => inner.fmt(f),
            Error::SourceClusterNotSupportedFault(inner) => inner.fmt(f),
            Error::SourceDatabaseNotSupportedFault(inner) => inner.fmt(f),
            Error::SourceNotFoundFault(inner) => inner.fmt(f),
            Error::StorageQuotaExceededFault(inner) => inner.fmt(f),
            Error::StorageTypeNotAvailableFault(inner) => inner.fmt(f),
            Error::StorageTypeNotSupportedFault(inner) => inner.fmt(f),
            Error::SubnetAlreadyInUse(inner) => inner.fmt(f),
            Error::SubscriptionAlreadyExistFault(inner) => inner.fmt(f),
            Error::SubscriptionCategoryNotFoundFault(inner) => inner.fmt(f),
            Error::SubscriptionNotFoundFault(inner) => inner.fmt(f),
            Error::TenantDatabaseAlreadyExistsFault(inner) => inner.fmt(f),
            Error::TenantDatabaseNotFoundFault(inner) => inner.fmt(f),
            Error::TenantDatabaseQuotaExceededFault(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AuthorizationAlreadyExistsFault(inner) => inner.meta(),
            Self::AuthorizationNotFoundFault(inner) => inner.meta(),
            Self::AuthorizationQuotaExceededFault(inner) => inner.meta(),
            Self::BackupPolicyNotFoundFault(inner) => inner.meta(),
            Self::BlueGreenDeploymentAlreadyExistsFault(inner) => inner.meta(),
            Self::BlueGreenDeploymentNotFoundFault(inner) => inner.meta(),
            Self::CertificateNotFoundFault(inner) => inner.meta(),
            Self::CreateCustomDbEngineVersionFault(inner) => inner.meta(),
            Self::CustomAvailabilityZoneNotFoundFault(inner) => inner.meta(),
            Self::CustomDbEngineVersionAlreadyExistsFault(inner) => inner.meta(),
            Self::CustomDbEngineVersionNotFoundFault(inner) => inner.meta(),
            Self::CustomDbEngineVersionQuotaExceededFault(inner) => inner.meta(),
            Self::DbClusterAlreadyExistsFault(inner) => inner.meta(),
            Self::DbClusterAutomatedBackupNotFoundFault(inner) => inner.meta(),
            Self::DbClusterAutomatedBackupQuotaExceededFault(inner) => inner.meta(),
            Self::DbClusterBacktrackNotFoundFault(inner) => inner.meta(),
            Self::DbClusterEndpointAlreadyExistsFault(inner) => inner.meta(),
            Self::DbClusterEndpointNotFoundFault(inner) => inner.meta(),
            Self::DbClusterEndpointQuotaExceededFault(inner) => inner.meta(),
            Self::DbClusterNotFoundFault(inner) => inner.meta(),
            Self::DbClusterParameterGroupNotFoundFault(inner) => inner.meta(),
            Self::DbClusterQuotaExceededFault(inner) => inner.meta(),
            Self::DbClusterRoleAlreadyExistsFault(inner) => inner.meta(),
            Self::DbClusterRoleNotFoundFault(inner) => inner.meta(),
            Self::DbClusterRoleQuotaExceededFault(inner) => inner.meta(),
            Self::DbClusterSnapshotAlreadyExistsFault(inner) => inner.meta(),
            Self::DbClusterSnapshotNotFoundFault(inner) => inner.meta(),
            Self::DbInstanceAlreadyExistsFault(inner) => inner.meta(),
            Self::DbInstanceAutomatedBackupNotFoundFault(inner) => inner.meta(),
            Self::DbInstanceAutomatedBackupQuotaExceededFault(inner) => inner.meta(),
            Self::DbInstanceNotFoundFault(inner) => inner.meta(),
            Self::DbInstanceRoleAlreadyExistsFault(inner) => inner.meta(),
            Self::DbInstanceRoleNotFoundFault(inner) => inner.meta(),
            Self::DbInstanceRoleQuotaExceededFault(inner) => inner.meta(),
            Self::DbLogFileNotFoundFault(inner) => inner.meta(),
            Self::DbParameterGroupAlreadyExistsFault(inner) => inner.meta(),
            Self::DbParameterGroupNotFoundFault(inner) => inner.meta(),
            Self::DbParameterGroupQuotaExceededFault(inner) => inner.meta(),
            Self::DbProxyAlreadyExistsFault(inner) => inner.meta(),
            Self::DbProxyEndpointAlreadyExistsFault(inner) => inner.meta(),
            Self::DbProxyEndpointNotFoundFault(inner) => inner.meta(),
            Self::DbProxyEndpointQuotaExceededFault(inner) => inner.meta(),
            Self::DbProxyNotFoundFault(inner) => inner.meta(),
            Self::DbProxyQuotaExceededFault(inner) => inner.meta(),
            Self::DbProxyTargetAlreadyRegisteredFault(inner) => inner.meta(),
            Self::DbProxyTargetGroupNotFoundFault(inner) => inner.meta(),
            Self::DbProxyTargetNotFoundFault(inner) => inner.meta(),
            Self::DbSecurityGroupAlreadyExistsFault(inner) => inner.meta(),
            Self::DbSecurityGroupNotFoundFault(inner) => inner.meta(),
            Self::DbSecurityGroupNotSupportedFault(inner) => inner.meta(),
            Self::DbSecurityGroupQuotaExceededFault(inner) => inner.meta(),
            Self::DbSnapshotAlreadyExistsFault(inner) => inner.meta(),
            Self::DbSnapshotNotFoundFault(inner) => inner.meta(),
            Self::DbSnapshotTenantDatabaseNotFoundFault(inner) => inner.meta(),
            Self::DbSubnetGroupAlreadyExistsFault(inner) => inner.meta(),
            Self::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => inner.meta(),
            Self::DbSubnetGroupNotAllowedFault(inner) => inner.meta(),
            Self::DbSubnetGroupNotFoundFault(inner) => inner.meta(),
            Self::DbSubnetGroupQuotaExceededFault(inner) => inner.meta(),
            Self::DbSubnetQuotaExceededFault(inner) => inner.meta(),
            Self::DbUpgradeDependencyFailureFault(inner) => inner.meta(),
            Self::DomainNotFoundFault(inner) => inner.meta(),
            Self::Ec2ImagePropertiesNotSupportedFault(inner) => inner.meta(),
            Self::EventSubscriptionQuotaExceededFault(inner) => inner.meta(),
            Self::ExportTaskAlreadyExistsFault(inner) => inner.meta(),
            Self::ExportTaskNotFoundFault(inner) => inner.meta(),
            Self::GlobalClusterAlreadyExistsFault(inner) => inner.meta(),
            Self::GlobalClusterNotFoundFault(inner) => inner.meta(),
            Self::GlobalClusterQuotaExceededFault(inner) => inner.meta(),
            Self::IamRoleMissingPermissionsFault(inner) => inner.meta(),
            Self::IamRoleNotFoundFault(inner) => inner.meta(),
            Self::InstanceQuotaExceededFault(inner) => inner.meta(),
            Self::InsufficientAvailableIPsInSubnetFault(inner) => inner.meta(),
            Self::InsufficientDbClusterCapacityFault(inner) => inner.meta(),
            Self::InsufficientDbInstanceCapacityFault(inner) => inner.meta(),
            Self::InsufficientStorageClusterCapacityFault(inner) => inner.meta(),
            Self::IntegrationAlreadyExistsFault(inner) => inner.meta(),
            Self::IntegrationConflictOperationFault(inner) => inner.meta(),
            Self::IntegrationNotFoundFault(inner) => inner.meta(),
            Self::IntegrationQuotaExceededFault(inner) => inner.meta(),
            Self::InvalidBlueGreenDeploymentStateFault(inner) => inner.meta(),
            Self::InvalidCustomDbEngineVersionStateFault(inner) => inner.meta(),
            Self::InvalidDbClusterAutomatedBackupStateFault(inner) => inner.meta(),
            Self::InvalidDbClusterCapacityFault(inner) => inner.meta(),
            Self::InvalidDbClusterEndpointStateFault(inner) => inner.meta(),
            Self::InvalidDbClusterSnapshotStateFault(inner) => inner.meta(),
            Self::InvalidDbClusterStateFault(inner) => inner.meta(),
            Self::InvalidDbInstanceAutomatedBackupStateFault(inner) => inner.meta(),
            Self::InvalidDbInstanceStateFault(inner) => inner.meta(),
            Self::InvalidDbParameterGroupStateFault(inner) => inner.meta(),
            Self::InvalidDbProxyEndpointStateFault(inner) => inner.meta(),
            Self::InvalidDbProxyStateFault(inner) => inner.meta(),
            Self::InvalidDbSecurityGroupStateFault(inner) => inner.meta(),
            Self::InvalidDbSnapshotStateFault(inner) => inner.meta(),
            Self::InvalidDbSubnetGroupFault(inner) => inner.meta(),
            Self::InvalidDbSubnetGroupStateFault(inner) => inner.meta(),
            Self::InvalidDbSubnetStateFault(inner) => inner.meta(),
            Self::InvalidEventSubscriptionStateFault(inner) => inner.meta(),
            Self::InvalidExportOnlyFault(inner) => inner.meta(),
            Self::InvalidExportSourceStateFault(inner) => inner.meta(),
            Self::InvalidExportTaskStateFault(inner) => inner.meta(),
            Self::InvalidGlobalClusterStateFault(inner) => inner.meta(),
            Self::InvalidIntegrationStateFault(inner) => inner.meta(),
            Self::InvalidOptionGroupStateFault(inner) => inner.meta(),
            Self::InvalidRestoreFault(inner) => inner.meta(),
            Self::InvalidS3BucketFault(inner) => inner.meta(),
            Self::InvalidSubnet(inner) => inner.meta(),
            Self::InvalidVpcNetworkStateFault(inner) => inner.meta(),
            Self::KmsKeyNotAccessibleFault(inner) => inner.meta(),
            Self::NetworkTypeNotSupported(inner) => inner.meta(),
            Self::OptionGroupAlreadyExistsFault(inner) => inner.meta(),
            Self::OptionGroupNotFoundFault(inner) => inner.meta(),
            Self::OptionGroupQuotaExceededFault(inner) => inner.meta(),
            Self::PointInTimeRestoreNotEnabledFault(inner) => inner.meta(),
            Self::ProvisionedIopsNotAvailableInAzFault(inner) => inner.meta(),
            Self::ReservedDbInstanceAlreadyExistsFault(inner) => inner.meta(),
            Self::ReservedDbInstanceNotFoundFault(inner) => inner.meta(),
            Self::ReservedDbInstanceQuotaExceededFault(inner) => inner.meta(),
            Self::ReservedDbInstancesOfferingNotFoundFault(inner) => inner.meta(),
            Self::ResourceNotFoundFault(inner) => inner.meta(),
            Self::SnsInvalidTopicFault(inner) => inner.meta(),
            Self::SnsNoAuthorizationFault(inner) => inner.meta(),
            Self::SnsTopicArnNotFoundFault(inner) => inner.meta(),
            Self::SharedSnapshotQuotaExceededFault(inner) => inner.meta(),
            Self::SnapshotQuotaExceededFault(inner) => inner.meta(),
            Self::SourceClusterNotSupportedFault(inner) => inner.meta(),
            Self::SourceDatabaseNotSupportedFault(inner) => inner.meta(),
            Self::SourceNotFoundFault(inner) => inner.meta(),
            Self::StorageQuotaExceededFault(inner) => inner.meta(),
            Self::StorageTypeNotAvailableFault(inner) => inner.meta(),
            Self::StorageTypeNotSupportedFault(inner) => inner.meta(),
            Self::SubnetAlreadyInUse(inner) => inner.meta(),
            Self::SubscriptionAlreadyExistFault(inner) => inner.meta(),
            Self::SubscriptionCategoryNotFoundFault(inner) => inner.meta(),
            Self::SubscriptionNotFoundFault(inner) => inner.meta(),
            Self::TenantDatabaseAlreadyExistsFault(inner) => inner.meta(),
            Self::TenantDatabaseNotFoundFault(inner) => inner.meta(),
            Self::TenantDatabaseQuotaExceededFault(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError> for Error {
    fn from(err: crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError) -> Self {
        match err {
            crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError::DbClusterRoleAlreadyExistsFault(inner) => {
                Error::DbClusterRoleAlreadyExistsFault(inner)
            }
            crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError::DbClusterRoleQuotaExceededFault(inner) => {
                Error::DbClusterRoleQuotaExceededFault(inner)
            }
            crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::add_role_to_db_cluster::AddRoleToDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_role_to_db_instance::AddRoleToDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_role_to_db_instance::AddRoleToDBInstanceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::add_role_to_db_instance::AddRoleToDBInstanceError> for Error {
    fn from(err: crate::operation::add_role_to_db_instance::AddRoleToDBInstanceError) -> Self {
        match err {
            crate::operation::add_role_to_db_instance::AddRoleToDBInstanceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::add_role_to_db_instance::AddRoleToDBInstanceError::DbInstanceRoleAlreadyExistsFault(inner) => {
                Error::DbInstanceRoleAlreadyExistsFault(inner)
            }
            crate::operation::add_role_to_db_instance::AddRoleToDBInstanceError::DbInstanceRoleQuotaExceededFault(inner) => {
                Error::DbInstanceRoleQuotaExceededFault(inner)
            }
            crate::operation::add_role_to_db_instance::AddRoleToDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::add_role_to_db_instance::AddRoleToDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::add_source_identifier_to_subscription::AddSourceIdentifierToSubscriptionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::add_source_identifier_to_subscription::AddSourceIdentifierToSubscriptionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::add_source_identifier_to_subscription::AddSourceIdentifierToSubscriptionError> for Error {
    fn from(err: crate::operation::add_source_identifier_to_subscription::AddSourceIdentifierToSubscriptionError) -> Self {
        match err {
            crate::operation::add_source_identifier_to_subscription::AddSourceIdentifierToSubscriptionError::SourceNotFoundFault(inner) => {
                Error::SourceNotFoundFault(inner)
            }
            crate::operation::add_source_identifier_to_subscription::AddSourceIdentifierToSubscriptionError::SubscriptionNotFoundFault(inner) => {
                Error::SubscriptionNotFoundFault(inner)
            }
            crate::operation::add_source_identifier_to_subscription::AddSourceIdentifierToSubscriptionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_tags_to_resource::AddTagsToResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::add_tags_to_resource::AddTagsToResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::add_tags_to_resource::AddTagsToResourceError> for Error {
    fn from(err: crate::operation::add_tags_to_resource::AddTagsToResourceError) -> Self {
        match err {
            crate::operation::add_tags_to_resource::AddTagsToResourceError::BlueGreenDeploymentNotFoundFault(inner) => {
                Error::BlueGreenDeploymentNotFoundFault(inner)
            }
            crate::operation::add_tags_to_resource::AddTagsToResourceError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::add_tags_to_resource::AddTagsToResourceError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::operation::add_tags_to_resource::AddTagsToResourceError::DbProxyNotFoundFault(inner) => Error::DbProxyNotFoundFault(inner),
            crate::operation::add_tags_to_resource::AddTagsToResourceError::DbProxyTargetGroupNotFoundFault(inner) => {
                Error::DbProxyTargetGroupNotFoundFault(inner)
            }
            crate::operation::add_tags_to_resource::AddTagsToResourceError::DbSnapshotNotFoundFault(inner) => Error::DbSnapshotNotFoundFault(inner),
            crate::operation::add_tags_to_resource::AddTagsToResourceError::DbSnapshotTenantDatabaseNotFoundFault(inner) => {
                Error::DbSnapshotTenantDatabaseNotFoundFault(inner)
            }
            crate::operation::add_tags_to_resource::AddTagsToResourceError::IntegrationNotFoundFault(inner) => Error::IntegrationNotFoundFault(inner),
            crate::operation::add_tags_to_resource::AddTagsToResourceError::TenantDatabaseNotFoundFault(inner) => {
                Error::TenantDatabaseNotFoundFault(inner)
            }
            crate::operation::add_tags_to_resource::AddTagsToResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionError> for Error {
    fn from(err: crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionError) -> Self {
        match err {
            crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::authorize_db_security_group_ingress::AuthorizeDBSecurityGroupIngressError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::authorize_db_security_group_ingress::AuthorizeDBSecurityGroupIngressError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::authorize_db_security_group_ingress::AuthorizeDBSecurityGroupIngressError> for Error {
    fn from(err: crate::operation::authorize_db_security_group_ingress::AuthorizeDBSecurityGroupIngressError) -> Self {
        match err {
            crate::operation::authorize_db_security_group_ingress::AuthorizeDBSecurityGroupIngressError::AuthorizationAlreadyExistsFault(inner) => {
                Error::AuthorizationAlreadyExistsFault(inner)
            }
            crate::operation::authorize_db_security_group_ingress::AuthorizeDBSecurityGroupIngressError::AuthorizationQuotaExceededFault(inner) => {
                Error::AuthorizationQuotaExceededFault(inner)
            }
            crate::operation::authorize_db_security_group_ingress::AuthorizeDBSecurityGroupIngressError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::operation::authorize_db_security_group_ingress::AuthorizeDBSecurityGroupIngressError::InvalidDbSecurityGroupStateFault(inner) => {
                Error::InvalidDbSecurityGroupStateFault(inner)
            }
            crate::operation::authorize_db_security_group_ingress::AuthorizeDBSecurityGroupIngressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::backtrack_db_cluster::BacktrackDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::backtrack_db_cluster::BacktrackDBClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::backtrack_db_cluster::BacktrackDBClusterError> for Error {
    fn from(err: crate::operation::backtrack_db_cluster::BacktrackDBClusterError) -> Self {
        match err {
            crate::operation::backtrack_db_cluster::BacktrackDBClusterError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::backtrack_db_cluster::BacktrackDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::backtrack_db_cluster::BacktrackDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_export_task::CancelExportTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_export_task::CancelExportTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::cancel_export_task::CancelExportTaskError> for Error {
    fn from(err: crate::operation::cancel_export_task::CancelExportTaskError) -> Self {
        match err {
            crate::operation::cancel_export_task::CancelExportTaskError::ExportTaskNotFoundFault(inner) => Error::ExportTaskNotFoundFault(inner),
            crate::operation::cancel_export_task::CancelExportTaskError::InvalidExportTaskStateFault(inner) => {
                Error::InvalidExportTaskStateFault(inner)
            }
            crate::operation::cancel_export_task::CancelExportTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::copy_db_cluster_parameter_group::CopyDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::copy_db_cluster_parameter_group::CopyDBClusterParameterGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::copy_db_cluster_parameter_group::CopyDBClusterParameterGroupError> for Error {
    fn from(err: crate::operation::copy_db_cluster_parameter_group::CopyDBClusterParameterGroupError) -> Self {
        match err {
            crate::operation::copy_db_cluster_parameter_group::CopyDBClusterParameterGroupError::DbParameterGroupAlreadyExistsFault(inner) => {
                Error::DbParameterGroupAlreadyExistsFault(inner)
            }
            crate::operation::copy_db_cluster_parameter_group::CopyDBClusterParameterGroupError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::copy_db_cluster_parameter_group::CopyDBClusterParameterGroupError::DbParameterGroupQuotaExceededFault(inner) => {
                Error::DbParameterGroupQuotaExceededFault(inner)
            }
            crate::operation::copy_db_cluster_parameter_group::CopyDBClusterParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::copy_db_cluster_snapshot::CopyDBClusterSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::copy_db_cluster_snapshot::CopyDBClusterSnapshotError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::copy_db_cluster_snapshot::CopyDBClusterSnapshotError> for Error {
    fn from(err: crate::operation::copy_db_cluster_snapshot::CopyDBClusterSnapshotError) -> Self {
        match err {
            crate::operation::copy_db_cluster_snapshot::CopyDBClusterSnapshotError::DbClusterSnapshotAlreadyExistsFault(inner) => {
                Error::DbClusterSnapshotAlreadyExistsFault(inner)
            }
            crate::operation::copy_db_cluster_snapshot::CopyDBClusterSnapshotError::DbClusterSnapshotNotFoundFault(inner) => {
                Error::DbClusterSnapshotNotFoundFault(inner)
            }
            crate::operation::copy_db_cluster_snapshot::CopyDBClusterSnapshotError::InvalidDbClusterSnapshotStateFault(inner) => {
                Error::InvalidDbClusterSnapshotStateFault(inner)
            }
            crate::operation::copy_db_cluster_snapshot::CopyDBClusterSnapshotError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::copy_db_cluster_snapshot::CopyDBClusterSnapshotError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::copy_db_cluster_snapshot::CopyDBClusterSnapshotError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::operation::copy_db_cluster_snapshot::CopyDBClusterSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::copy_db_parameter_group::CopyDBParameterGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::copy_db_parameter_group::CopyDBParameterGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::copy_db_parameter_group::CopyDBParameterGroupError> for Error {
    fn from(err: crate::operation::copy_db_parameter_group::CopyDBParameterGroupError) -> Self {
        match err {
            crate::operation::copy_db_parameter_group::CopyDBParameterGroupError::DbParameterGroupAlreadyExistsFault(inner) => {
                Error::DbParameterGroupAlreadyExistsFault(inner)
            }
            crate::operation::copy_db_parameter_group::CopyDBParameterGroupError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::copy_db_parameter_group::CopyDBParameterGroupError::DbParameterGroupQuotaExceededFault(inner) => {
                Error::DbParameterGroupQuotaExceededFault(inner)
            }
            crate::operation::copy_db_parameter_group::CopyDBParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::copy_db_snapshot::CopyDBSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::copy_db_snapshot::CopyDBSnapshotError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::copy_db_snapshot::CopyDBSnapshotError> for Error {
    fn from(err: crate::operation::copy_db_snapshot::CopyDBSnapshotError) -> Self {
        match err {
            crate::operation::copy_db_snapshot::CopyDBSnapshotError::CustomAvailabilityZoneNotFoundFault(inner) => {
                Error::CustomAvailabilityZoneNotFoundFault(inner)
            }
            crate::operation::copy_db_snapshot::CopyDBSnapshotError::DbSnapshotAlreadyExistsFault(inner) => {
                Error::DbSnapshotAlreadyExistsFault(inner)
            }
            crate::operation::copy_db_snapshot::CopyDBSnapshotError::DbSnapshotNotFoundFault(inner) => Error::DbSnapshotNotFoundFault(inner),
            crate::operation::copy_db_snapshot::CopyDBSnapshotError::InvalidDbSnapshotStateFault(inner) => Error::InvalidDbSnapshotStateFault(inner),
            crate::operation::copy_db_snapshot::CopyDBSnapshotError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::operation::copy_db_snapshot::CopyDBSnapshotError::SnapshotQuotaExceededFault(inner) => Error::SnapshotQuotaExceededFault(inner),
            crate::operation::copy_db_snapshot::CopyDBSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::copy_option_group::CopyOptionGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::copy_option_group::CopyOptionGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::copy_option_group::CopyOptionGroupError> for Error {
    fn from(err: crate::operation::copy_option_group::CopyOptionGroupError) -> Self {
        match err {
            crate::operation::copy_option_group::CopyOptionGroupError::OptionGroupAlreadyExistsFault(inner) => {
                Error::OptionGroupAlreadyExistsFault(inner)
            }
            crate::operation::copy_option_group::CopyOptionGroupError::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
            crate::operation::copy_option_group::CopyOptionGroupError::OptionGroupQuotaExceededFault(inner) => {
                Error::OptionGroupQuotaExceededFault(inner)
            }
            crate::operation::copy_option_group::CopyOptionGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError> for Error {
    fn from(err: crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError) -> Self {
        match err {
            crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError::BlueGreenDeploymentAlreadyExistsFault(inner) => {
                Error::BlueGreenDeploymentAlreadyExistsFault(inner)
            }
            crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError::DbClusterParameterGroupNotFoundFault(inner) => {
                Error::DbClusterParameterGroupNotFoundFault(inner)
            }
            crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError::DbClusterQuotaExceededFault(inner) => {
                Error::DbClusterQuotaExceededFault(inner)
            }
            crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError::InstanceQuotaExceededFault(inner) => {
                Error::InstanceQuotaExceededFault(inner)
            }
            crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError::SourceClusterNotSupportedFault(inner) => {
                Error::SourceClusterNotSupportedFault(inner)
            }
            crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError::SourceDatabaseNotSupportedFault(inner) => {
                Error::SourceDatabaseNotSupportedFault(inner)
            }
            crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError> for Error {
    fn from(err: crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError) -> Self {
        match err {
            crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::CreateCustomDbEngineVersionFault(inner) => {
                Error::CreateCustomDbEngineVersionFault(inner)
            }
            crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::CustomDbEngineVersionAlreadyExistsFault(inner) => {
                Error::CustomDbEngineVersionAlreadyExistsFault(inner)
            }
            crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::CustomDbEngineVersionQuotaExceededFault(inner) => {
                Error::CustomDbEngineVersionQuotaExceededFault(inner)
            }
            crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::Ec2ImagePropertiesNotSupportedFault(inner) => {
                Error::Ec2ImagePropertiesNotSupportedFault(inner)
            }
            crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::create_custom_db_engine_version::CreateCustomDBEngineVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_cluster::CreateDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_cluster::CreateDBClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_db_cluster::CreateDBClusterError> for Error {
    fn from(err: crate::operation::create_db_cluster::CreateDBClusterError) -> Self {
        match err {
            crate::operation::create_db_cluster::CreateDBClusterError::DbClusterAlreadyExistsFault(inner) => {
                Error::DbClusterAlreadyExistsFault(inner)
            }
            crate::operation::create_db_cluster::CreateDBClusterError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::create_db_cluster::CreateDBClusterError::DbClusterParameterGroupNotFoundFault(inner) => {
                Error::DbClusterParameterGroupNotFoundFault(inner)
            }
            crate::operation::create_db_cluster::CreateDBClusterError::DbClusterQuotaExceededFault(inner) => {
                Error::DbClusterQuotaExceededFault(inner)
            }
            crate::operation::create_db_cluster::CreateDBClusterError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::operation::create_db_cluster::CreateDBClusterError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::operation::create_db_cluster::CreateDBClusterError::DbSubnetGroupNotFoundFault(inner) => Error::DbSubnetGroupNotFoundFault(inner),
            crate::operation::create_db_cluster::CreateDBClusterError::DomainNotFoundFault(inner) => Error::DomainNotFoundFault(inner),
            crate::operation::create_db_cluster::CreateDBClusterError::GlobalClusterNotFoundFault(inner) => Error::GlobalClusterNotFoundFault(inner),
            crate::operation::create_db_cluster::CreateDBClusterError::InsufficientStorageClusterCapacityFault(inner) => {
                Error::InsufficientStorageClusterCapacityFault(inner)
            }
            crate::operation::create_db_cluster::CreateDBClusterError::InvalidDbClusterStateFault(inner) => Error::InvalidDbClusterStateFault(inner),
            crate::operation::create_db_cluster::CreateDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::create_db_cluster::CreateDBClusterError::InvalidDbSubnetGroupFault(inner) => Error::InvalidDbSubnetGroupFault(inner),
            crate::operation::create_db_cluster::CreateDBClusterError::InvalidDbSubnetGroupStateFault(inner) => {
                Error::InvalidDbSubnetGroupStateFault(inner)
            }
            crate::operation::create_db_cluster::CreateDBClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::operation::create_db_cluster::CreateDBClusterError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::operation::create_db_cluster::CreateDBClusterError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::operation::create_db_cluster::CreateDBClusterError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::operation::create_db_cluster::CreateDBClusterError::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
            crate::operation::create_db_cluster::CreateDBClusterError::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
            crate::operation::create_db_cluster::CreateDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_cluster_endpoint::CreateDBClusterEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_cluster_endpoint::CreateDBClusterEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_db_cluster_endpoint::CreateDBClusterEndpointError> for Error {
    fn from(err: crate::operation::create_db_cluster_endpoint::CreateDBClusterEndpointError) -> Self {
        match err {
            crate::operation::create_db_cluster_endpoint::CreateDBClusterEndpointError::DbClusterEndpointAlreadyExistsFault(inner) => {
                Error::DbClusterEndpointAlreadyExistsFault(inner)
            }
            crate::operation::create_db_cluster_endpoint::CreateDBClusterEndpointError::DbClusterEndpointQuotaExceededFault(inner) => {
                Error::DbClusterEndpointQuotaExceededFault(inner)
            }
            crate::operation::create_db_cluster_endpoint::CreateDBClusterEndpointError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::operation::create_db_cluster_endpoint::CreateDBClusterEndpointError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::create_db_cluster_endpoint::CreateDBClusterEndpointError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::create_db_cluster_endpoint::CreateDBClusterEndpointError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::create_db_cluster_endpoint::CreateDBClusterEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_db_cluster_parameter_group::CreateDBClusterParameterGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_db_cluster_parameter_group::CreateDBClusterParameterGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_db_cluster_parameter_group::CreateDBClusterParameterGroupError> for Error {
    fn from(err: crate::operation::create_db_cluster_parameter_group::CreateDBClusterParameterGroupError) -> Self {
        match err {
            crate::operation::create_db_cluster_parameter_group::CreateDBClusterParameterGroupError::DbParameterGroupAlreadyExistsFault(inner) => {
                Error::DbParameterGroupAlreadyExistsFault(inner)
            }
            crate::operation::create_db_cluster_parameter_group::CreateDBClusterParameterGroupError::DbParameterGroupQuotaExceededFault(inner) => {
                Error::DbParameterGroupQuotaExceededFault(inner)
            }
            crate::operation::create_db_cluster_parameter_group::CreateDBClusterParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_cluster_snapshot::CreateDBClusterSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_cluster_snapshot::CreateDBClusterSnapshotError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_db_cluster_snapshot::CreateDBClusterSnapshotError> for Error {
    fn from(err: crate::operation::create_db_cluster_snapshot::CreateDBClusterSnapshotError) -> Self {
        match err {
            crate::operation::create_db_cluster_snapshot::CreateDBClusterSnapshotError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::operation::create_db_cluster_snapshot::CreateDBClusterSnapshotError::DbClusterSnapshotAlreadyExistsFault(inner) => {
                Error::DbClusterSnapshotAlreadyExistsFault(inner)
            }
            crate::operation::create_db_cluster_snapshot::CreateDBClusterSnapshotError::InvalidDbClusterSnapshotStateFault(inner) => {
                Error::InvalidDbClusterSnapshotStateFault(inner)
            }
            crate::operation::create_db_cluster_snapshot::CreateDBClusterSnapshotError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::create_db_cluster_snapshot::CreateDBClusterSnapshotError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::operation::create_db_cluster_snapshot::CreateDBClusterSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_instance::CreateDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_instance::CreateDBInstanceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_db_instance::CreateDBInstanceError> for Error {
    fn from(err: crate::operation::create_db_instance::CreateDBInstanceError) -> Self {
        match err {
            crate::operation::create_db_instance::CreateDBInstanceError::AuthorizationNotFoundFault(inner) => {
                Error::AuthorizationNotFoundFault(inner)
            }
            crate::operation::create_db_instance::CreateDBInstanceError::BackupPolicyNotFoundFault(inner) => Error::BackupPolicyNotFoundFault(inner),
            crate::operation::create_db_instance::CreateDBInstanceError::CertificateNotFoundFault(inner) => Error::CertificateNotFoundFault(inner),
            crate::operation::create_db_instance::CreateDBInstanceError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::create_db_instance::CreateDBInstanceError::DbInstanceAlreadyExistsFault(inner) => {
                Error::DbInstanceAlreadyExistsFault(inner)
            }
            crate::operation::create_db_instance::CreateDBInstanceError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::create_db_instance::CreateDBInstanceError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::operation::create_db_instance::CreateDBInstanceError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::operation::create_db_instance::CreateDBInstanceError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::operation::create_db_instance::CreateDBInstanceError::DomainNotFoundFault(inner) => Error::DomainNotFoundFault(inner),
            crate::operation::create_db_instance::CreateDBInstanceError::InstanceQuotaExceededFault(inner) => {
                Error::InstanceQuotaExceededFault(inner)
            }
            crate::operation::create_db_instance::CreateDBInstanceError::InsufficientDbInstanceCapacityFault(inner) => {
                Error::InsufficientDbInstanceCapacityFault(inner)
            }
            crate::operation::create_db_instance::CreateDBInstanceError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::create_db_instance::CreateDBInstanceError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::operation::create_db_instance::CreateDBInstanceError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::operation::create_db_instance::CreateDBInstanceError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::operation::create_db_instance::CreateDBInstanceError::NetworkTypeNotSupported(inner) => Error::NetworkTypeNotSupported(inner),
            crate::operation::create_db_instance::CreateDBInstanceError::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
            crate::operation::create_db_instance::CreateDBInstanceError::ProvisionedIopsNotAvailableInAzFault(inner) => {
                Error::ProvisionedIopsNotAvailableInAzFault(inner)
            }
            crate::operation::create_db_instance::CreateDBInstanceError::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
            crate::operation::create_db_instance::CreateDBInstanceError::StorageTypeNotSupportedFault(inner) => {
                Error::StorageTypeNotSupportedFault(inner)
            }
            crate::operation::create_db_instance::CreateDBInstanceError::TenantDatabaseQuotaExceededFault(inner) => {
                Error::TenantDatabaseQuotaExceededFault(inner)
            }
            crate::operation::create_db_instance::CreateDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError> for Error {
    fn from(err: crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError) -> Self {
        match err {
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::DbInstanceAlreadyExistsFault(inner) => {
                Error::DbInstanceAlreadyExistsFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::DbSubnetGroupNotAllowedFault(inner) => {
                Error::DbSubnetGroupNotAllowedFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::DomainNotFoundFault(inner) => {
                Error::DomainNotFoundFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::InstanceQuotaExceededFault(inner) => {
                Error::InstanceQuotaExceededFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::InsufficientDbInstanceCapacityFault(inner) => {
                Error::InsufficientDbInstanceCapacityFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::InvalidDbSubnetGroupFault(inner) => {
                Error::InvalidDbSubnetGroupFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::NetworkTypeNotSupported(inner) => {
                Error::NetworkTypeNotSupported(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::OptionGroupNotFoundFault(inner) => {
                Error::OptionGroupNotFoundFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::ProvisionedIopsNotAvailableInAzFault(inner) => {
                Error::ProvisionedIopsNotAvailableInAzFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::StorageTypeNotSupportedFault(inner) => {
                Error::StorageTypeNotSupportedFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::TenantDatabaseQuotaExceededFault(inner) => {
                Error::TenantDatabaseQuotaExceededFault(inner)
            }
            crate::operation::create_db_instance_read_replica::CreateDBInstanceReadReplicaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_parameter_group::CreateDBParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_parameter_group::CreateDBParameterGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_db_parameter_group::CreateDBParameterGroupError> for Error {
    fn from(err: crate::operation::create_db_parameter_group::CreateDBParameterGroupError) -> Self {
        match err {
            crate::operation::create_db_parameter_group::CreateDBParameterGroupError::DbParameterGroupAlreadyExistsFault(inner) => {
                Error::DbParameterGroupAlreadyExistsFault(inner)
            }
            crate::operation::create_db_parameter_group::CreateDBParameterGroupError::DbParameterGroupQuotaExceededFault(inner) => {
                Error::DbParameterGroupQuotaExceededFault(inner)
            }
            crate::operation::create_db_parameter_group::CreateDBParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_proxy::CreateDBProxyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_proxy::CreateDBProxyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_db_proxy::CreateDBProxyError> for Error {
    fn from(err: crate::operation::create_db_proxy::CreateDBProxyError) -> Self {
        match err {
            crate::operation::create_db_proxy::CreateDBProxyError::DbProxyAlreadyExistsFault(inner) => Error::DbProxyAlreadyExistsFault(inner),
            crate::operation::create_db_proxy::CreateDBProxyError::DbProxyQuotaExceededFault(inner) => Error::DbProxyQuotaExceededFault(inner),
            crate::operation::create_db_proxy::CreateDBProxyError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::operation::create_db_proxy::CreateDBProxyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_proxy_endpoint::CreateDBProxyEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_proxy_endpoint::CreateDBProxyEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_db_proxy_endpoint::CreateDBProxyEndpointError> for Error {
    fn from(err: crate::operation::create_db_proxy_endpoint::CreateDBProxyEndpointError) -> Self {
        match err {
            crate::operation::create_db_proxy_endpoint::CreateDBProxyEndpointError::DbProxyEndpointAlreadyExistsFault(inner) => {
                Error::DbProxyEndpointAlreadyExistsFault(inner)
            }
            crate::operation::create_db_proxy_endpoint::CreateDBProxyEndpointError::DbProxyEndpointQuotaExceededFault(inner) => {
                Error::DbProxyEndpointQuotaExceededFault(inner)
            }
            crate::operation::create_db_proxy_endpoint::CreateDBProxyEndpointError::DbProxyNotFoundFault(inner) => Error::DbProxyNotFoundFault(inner),
            crate::operation::create_db_proxy_endpoint::CreateDBProxyEndpointError::InvalidDbProxyStateFault(inner) => {
                Error::InvalidDbProxyStateFault(inner)
            }
            crate::operation::create_db_proxy_endpoint::CreateDBProxyEndpointError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::operation::create_db_proxy_endpoint::CreateDBProxyEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_security_group::CreateDBSecurityGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_security_group::CreateDBSecurityGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_db_security_group::CreateDBSecurityGroupError> for Error {
    fn from(err: crate::operation::create_db_security_group::CreateDBSecurityGroupError) -> Self {
        match err {
            crate::operation::create_db_security_group::CreateDBSecurityGroupError::DbSecurityGroupAlreadyExistsFault(inner) => {
                Error::DbSecurityGroupAlreadyExistsFault(inner)
            }
            crate::operation::create_db_security_group::CreateDBSecurityGroupError::DbSecurityGroupNotSupportedFault(inner) => {
                Error::DbSecurityGroupNotSupportedFault(inner)
            }
            crate::operation::create_db_security_group::CreateDBSecurityGroupError::DbSecurityGroupQuotaExceededFault(inner) => {
                Error::DbSecurityGroupQuotaExceededFault(inner)
            }
            crate::operation::create_db_security_group::CreateDBSecurityGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_snapshot::CreateDBSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_snapshot::CreateDBSnapshotError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_db_snapshot::CreateDBSnapshotError> for Error {
    fn from(err: crate::operation::create_db_snapshot::CreateDBSnapshotError) -> Self {
        match err {
            crate::operation::create_db_snapshot::CreateDBSnapshotError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::operation::create_db_snapshot::CreateDBSnapshotError::DbSnapshotAlreadyExistsFault(inner) => {
                Error::DbSnapshotAlreadyExistsFault(inner)
            }
            crate::operation::create_db_snapshot::CreateDBSnapshotError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::create_db_snapshot::CreateDBSnapshotError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::operation::create_db_snapshot::CreateDBSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_subnet_group::CreateDBSubnetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_db_subnet_group::CreateDBSubnetGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_db_subnet_group::CreateDBSubnetGroupError> for Error {
    fn from(err: crate::operation::create_db_subnet_group::CreateDBSubnetGroupError) -> Self {
        match err {
            crate::operation::create_db_subnet_group::CreateDBSubnetGroupError::DbSubnetGroupAlreadyExistsFault(inner) => {
                Error::DbSubnetGroupAlreadyExistsFault(inner)
            }
            crate::operation::create_db_subnet_group::CreateDBSubnetGroupError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::operation::create_db_subnet_group::CreateDBSubnetGroupError::DbSubnetGroupQuotaExceededFault(inner) => {
                Error::DbSubnetGroupQuotaExceededFault(inner)
            }
            crate::operation::create_db_subnet_group::CreateDBSubnetGroupError::DbSubnetQuotaExceededFault(inner) => {
                Error::DbSubnetQuotaExceededFault(inner)
            }
            crate::operation::create_db_subnet_group::CreateDBSubnetGroupError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::operation::create_db_subnet_group::CreateDBSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_event_subscription::CreateEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_event_subscription::CreateEventSubscriptionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_event_subscription::CreateEventSubscriptionError> for Error {
    fn from(err: crate::operation::create_event_subscription::CreateEventSubscriptionError) -> Self {
        match err {
            crate::operation::create_event_subscription::CreateEventSubscriptionError::EventSubscriptionQuotaExceededFault(inner) => {
                Error::EventSubscriptionQuotaExceededFault(inner)
            }
            crate::operation::create_event_subscription::CreateEventSubscriptionError::SnsInvalidTopicFault(inner) => {
                Error::SnsInvalidTopicFault(inner)
            }
            crate::operation::create_event_subscription::CreateEventSubscriptionError::SnsNoAuthorizationFault(inner) => {
                Error::SnsNoAuthorizationFault(inner)
            }
            crate::operation::create_event_subscription::CreateEventSubscriptionError::SnsTopicArnNotFoundFault(inner) => {
                Error::SnsTopicArnNotFoundFault(inner)
            }
            crate::operation::create_event_subscription::CreateEventSubscriptionError::SourceNotFoundFault(inner) => {
                Error::SourceNotFoundFault(inner)
            }
            crate::operation::create_event_subscription::CreateEventSubscriptionError::SubscriptionAlreadyExistFault(inner) => {
                Error::SubscriptionAlreadyExistFault(inner)
            }
            crate::operation::create_event_subscription::CreateEventSubscriptionError::SubscriptionCategoryNotFoundFault(inner) => {
                Error::SubscriptionCategoryNotFoundFault(inner)
            }
            crate::operation::create_event_subscription::CreateEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_global_cluster::CreateGlobalClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_global_cluster::CreateGlobalClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_global_cluster::CreateGlobalClusterError> for Error {
    fn from(err: crate::operation::create_global_cluster::CreateGlobalClusterError) -> Self {
        match err {
            crate::operation::create_global_cluster::CreateGlobalClusterError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::create_global_cluster::CreateGlobalClusterError::GlobalClusterAlreadyExistsFault(inner) => {
                Error::GlobalClusterAlreadyExistsFault(inner)
            }
            crate::operation::create_global_cluster::CreateGlobalClusterError::GlobalClusterQuotaExceededFault(inner) => {
                Error::GlobalClusterQuotaExceededFault(inner)
            }
            crate::operation::create_global_cluster::CreateGlobalClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::create_global_cluster::CreateGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_integration::CreateIntegrationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_integration::CreateIntegrationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_integration::CreateIntegrationError> for Error {
    fn from(err: crate::operation::create_integration::CreateIntegrationError) -> Self {
        match err {
            crate::operation::create_integration::CreateIntegrationError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::create_integration::CreateIntegrationError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::operation::create_integration::CreateIntegrationError::IntegrationAlreadyExistsFault(inner) => {
                Error::IntegrationAlreadyExistsFault(inner)
            }
            crate::operation::create_integration::CreateIntegrationError::IntegrationConflictOperationFault(inner) => {
                Error::IntegrationConflictOperationFault(inner)
            }
            crate::operation::create_integration::CreateIntegrationError::IntegrationQuotaExceededFault(inner) => {
                Error::IntegrationQuotaExceededFault(inner)
            }
            crate::operation::create_integration::CreateIntegrationError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::operation::create_integration::CreateIntegrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_option_group::CreateOptionGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_option_group::CreateOptionGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_option_group::CreateOptionGroupError> for Error {
    fn from(err: crate::operation::create_option_group::CreateOptionGroupError) -> Self {
        match err {
            crate::operation::create_option_group::CreateOptionGroupError::OptionGroupAlreadyExistsFault(inner) => {
                Error::OptionGroupAlreadyExistsFault(inner)
            }
            crate::operation::create_option_group::CreateOptionGroupError::OptionGroupQuotaExceededFault(inner) => {
                Error::OptionGroupQuotaExceededFault(inner)
            }
            crate::operation::create_option_group::CreateOptionGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_tenant_database::CreateTenantDatabaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_tenant_database::CreateTenantDatabaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_tenant_database::CreateTenantDatabaseError> for Error {
    fn from(err: crate::operation::create_tenant_database::CreateTenantDatabaseError) -> Self {
        match err {
            crate::operation::create_tenant_database::CreateTenantDatabaseError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::create_tenant_database::CreateTenantDatabaseError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::create_tenant_database::CreateTenantDatabaseError::TenantDatabaseAlreadyExistsFault(inner) => {
                Error::TenantDatabaseAlreadyExistsFault(inner)
            }
            crate::operation::create_tenant_database::CreateTenantDatabaseError::TenantDatabaseQuotaExceededFault(inner) => {
                Error::TenantDatabaseQuotaExceededFault(inner)
            }
            crate::operation::create_tenant_database::CreateTenantDatabaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_blue_green_deployment::DeleteBlueGreenDeploymentError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_blue_green_deployment::DeleteBlueGreenDeploymentError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_blue_green_deployment::DeleteBlueGreenDeploymentError> for Error {
    fn from(err: crate::operation::delete_blue_green_deployment::DeleteBlueGreenDeploymentError) -> Self {
        match err {
            crate::operation::delete_blue_green_deployment::DeleteBlueGreenDeploymentError::BlueGreenDeploymentNotFoundFault(inner) => {
                Error::BlueGreenDeploymentNotFoundFault(inner)
            }
            crate::operation::delete_blue_green_deployment::DeleteBlueGreenDeploymentError::InvalidBlueGreenDeploymentStateFault(inner) => {
                Error::InvalidBlueGreenDeploymentStateFault(inner)
            }
            crate::operation::delete_blue_green_deployment::DeleteBlueGreenDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_custom_db_engine_version::DeleteCustomDBEngineVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_custom_db_engine_version::DeleteCustomDBEngineVersionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_custom_db_engine_version::DeleteCustomDBEngineVersionError> for Error {
    fn from(err: crate::operation::delete_custom_db_engine_version::DeleteCustomDBEngineVersionError) -> Self {
        match err {
            crate::operation::delete_custom_db_engine_version::DeleteCustomDBEngineVersionError::CustomDbEngineVersionNotFoundFault(inner) => {
                Error::CustomDbEngineVersionNotFoundFault(inner)
            }
            crate::operation::delete_custom_db_engine_version::DeleteCustomDBEngineVersionError::InvalidCustomDbEngineVersionStateFault(inner) => {
                Error::InvalidCustomDbEngineVersionStateFault(inner)
            }
            crate::operation::delete_custom_db_engine_version::DeleteCustomDBEngineVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_cluster::DeleteDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_cluster::DeleteDBClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_db_cluster::DeleteDBClusterError> for Error {
    fn from(err: crate::operation::delete_db_cluster::DeleteDBClusterError) -> Self {
        match err {
            crate::operation::delete_db_cluster::DeleteDBClusterError::DbClusterAutomatedBackupQuotaExceededFault(inner) => {
                Error::DbClusterAutomatedBackupQuotaExceededFault(inner)
            }
            crate::operation::delete_db_cluster::DeleteDBClusterError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::delete_db_cluster::DeleteDBClusterError::DbClusterSnapshotAlreadyExistsFault(inner) => {
                Error::DbClusterSnapshotAlreadyExistsFault(inner)
            }
            crate::operation::delete_db_cluster::DeleteDBClusterError::InvalidDbClusterSnapshotStateFault(inner) => {
                Error::InvalidDbClusterSnapshotStateFault(inner)
            }
            crate::operation::delete_db_cluster::DeleteDBClusterError::InvalidDbClusterStateFault(inner) => Error::InvalidDbClusterStateFault(inner),
            crate::operation::delete_db_cluster::DeleteDBClusterError::SnapshotQuotaExceededFault(inner) => Error::SnapshotQuotaExceededFault(inner),
            crate::operation::delete_db_cluster::DeleteDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_db_cluster_automated_backup::DeleteDBClusterAutomatedBackupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_db_cluster_automated_backup::DeleteDBClusterAutomatedBackupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_db_cluster_automated_backup::DeleteDBClusterAutomatedBackupError> for Error {
    fn from(err: crate::operation::delete_db_cluster_automated_backup::DeleteDBClusterAutomatedBackupError) -> Self {
        match err {
            crate::operation::delete_db_cluster_automated_backup::DeleteDBClusterAutomatedBackupError::DbClusterAutomatedBackupNotFoundFault(
                inner,
            ) => Error::DbClusterAutomatedBackupNotFoundFault(inner),
            crate::operation::delete_db_cluster_automated_backup::DeleteDBClusterAutomatedBackupError::InvalidDbClusterAutomatedBackupStateFault(
                inner,
            ) => Error::InvalidDbClusterAutomatedBackupStateFault(inner),
            crate::operation::delete_db_cluster_automated_backup::DeleteDBClusterAutomatedBackupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_cluster_endpoint::DeleteDBClusterEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_cluster_endpoint::DeleteDBClusterEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_db_cluster_endpoint::DeleteDBClusterEndpointError> for Error {
    fn from(err: crate::operation::delete_db_cluster_endpoint::DeleteDBClusterEndpointError) -> Self {
        match err {
            crate::operation::delete_db_cluster_endpoint::DeleteDBClusterEndpointError::DbClusterEndpointNotFoundFault(inner) => {
                Error::DbClusterEndpointNotFoundFault(inner)
            }
            crate::operation::delete_db_cluster_endpoint::DeleteDBClusterEndpointError::InvalidDbClusterEndpointStateFault(inner) => {
                Error::InvalidDbClusterEndpointStateFault(inner)
            }
            crate::operation::delete_db_cluster_endpoint::DeleteDBClusterEndpointError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::delete_db_cluster_endpoint::DeleteDBClusterEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_db_cluster_parameter_group::DeleteDBClusterParameterGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_db_cluster_parameter_group::DeleteDBClusterParameterGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_db_cluster_parameter_group::DeleteDBClusterParameterGroupError> for Error {
    fn from(err: crate::operation::delete_db_cluster_parameter_group::DeleteDBClusterParameterGroupError) -> Self {
        match err {
            crate::operation::delete_db_cluster_parameter_group::DeleteDBClusterParameterGroupError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::delete_db_cluster_parameter_group::DeleteDBClusterParameterGroupError::InvalidDbParameterGroupStateFault(inner) => {
                Error::InvalidDbParameterGroupStateFault(inner)
            }
            crate::operation::delete_db_cluster_parameter_group::DeleteDBClusterParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_cluster_snapshot::DeleteDBClusterSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_cluster_snapshot::DeleteDBClusterSnapshotError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_db_cluster_snapshot::DeleteDBClusterSnapshotError> for Error {
    fn from(err: crate::operation::delete_db_cluster_snapshot::DeleteDBClusterSnapshotError) -> Self {
        match err {
            crate::operation::delete_db_cluster_snapshot::DeleteDBClusterSnapshotError::DbClusterSnapshotNotFoundFault(inner) => {
                Error::DbClusterSnapshotNotFoundFault(inner)
            }
            crate::operation::delete_db_cluster_snapshot::DeleteDBClusterSnapshotError::InvalidDbClusterSnapshotStateFault(inner) => {
                Error::InvalidDbClusterSnapshotStateFault(inner)
            }
            crate::operation::delete_db_cluster_snapshot::DeleteDBClusterSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_instance::DeleteDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_instance::DeleteDBInstanceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_db_instance::DeleteDBInstanceError> for Error {
    fn from(err: crate::operation::delete_db_instance::DeleteDBInstanceError) -> Self {
        match err {
            crate::operation::delete_db_instance::DeleteDBInstanceError::DbInstanceAutomatedBackupQuotaExceededFault(inner) => {
                Error::DbInstanceAutomatedBackupQuotaExceededFault(inner)
            }
            crate::operation::delete_db_instance::DeleteDBInstanceError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::operation::delete_db_instance::DeleteDBInstanceError::DbSnapshotAlreadyExistsFault(inner) => {
                Error::DbSnapshotAlreadyExistsFault(inner)
            }
            crate::operation::delete_db_instance::DeleteDBInstanceError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::delete_db_instance::DeleteDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::delete_db_instance::DeleteDBInstanceError::SnapshotQuotaExceededFault(inner) => {
                Error::SnapshotQuotaExceededFault(inner)
            }
            crate::operation::delete_db_instance::DeleteDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_db_instance_automated_backup::DeleteDBInstanceAutomatedBackupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_db_instance_automated_backup::DeleteDBInstanceAutomatedBackupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_db_instance_automated_backup::DeleteDBInstanceAutomatedBackupError> for Error {
    fn from(err: crate::operation::delete_db_instance_automated_backup::DeleteDBInstanceAutomatedBackupError) -> Self {
        match err {
            crate::operation::delete_db_instance_automated_backup::DeleteDBInstanceAutomatedBackupError::DbInstanceAutomatedBackupNotFoundFault(inner) => Error::DbInstanceAutomatedBackupNotFoundFault(inner),
            crate::operation::delete_db_instance_automated_backup::DeleteDBInstanceAutomatedBackupError::InvalidDbInstanceAutomatedBackupStateFault(inner) => Error::InvalidDbInstanceAutomatedBackupStateFault(inner),
            crate::operation::delete_db_instance_automated_backup::DeleteDBInstanceAutomatedBackupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_parameter_group::DeleteDBParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_parameter_group::DeleteDBParameterGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_db_parameter_group::DeleteDBParameterGroupError> for Error {
    fn from(err: crate::operation::delete_db_parameter_group::DeleteDBParameterGroupError) -> Self {
        match err {
            crate::operation::delete_db_parameter_group::DeleteDBParameterGroupError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::delete_db_parameter_group::DeleteDBParameterGroupError::InvalidDbParameterGroupStateFault(inner) => {
                Error::InvalidDbParameterGroupStateFault(inner)
            }
            crate::operation::delete_db_parameter_group::DeleteDBParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_proxy::DeleteDBProxyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_proxy::DeleteDBProxyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_db_proxy::DeleteDBProxyError> for Error {
    fn from(err: crate::operation::delete_db_proxy::DeleteDBProxyError) -> Self {
        match err {
            crate::operation::delete_db_proxy::DeleteDBProxyError::DbProxyNotFoundFault(inner) => Error::DbProxyNotFoundFault(inner),
            crate::operation::delete_db_proxy::DeleteDBProxyError::InvalidDbProxyStateFault(inner) => Error::InvalidDbProxyStateFault(inner),
            crate::operation::delete_db_proxy::DeleteDBProxyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_proxy_endpoint::DeleteDBProxyEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_proxy_endpoint::DeleteDBProxyEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_db_proxy_endpoint::DeleteDBProxyEndpointError> for Error {
    fn from(err: crate::operation::delete_db_proxy_endpoint::DeleteDBProxyEndpointError) -> Self {
        match err {
            crate::operation::delete_db_proxy_endpoint::DeleteDBProxyEndpointError::DbProxyEndpointNotFoundFault(inner) => {
                Error::DbProxyEndpointNotFoundFault(inner)
            }
            crate::operation::delete_db_proxy_endpoint::DeleteDBProxyEndpointError::InvalidDbProxyEndpointStateFault(inner) => {
                Error::InvalidDbProxyEndpointStateFault(inner)
            }
            crate::operation::delete_db_proxy_endpoint::DeleteDBProxyEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_security_group::DeleteDBSecurityGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_security_group::DeleteDBSecurityGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_db_security_group::DeleteDBSecurityGroupError> for Error {
    fn from(err: crate::operation::delete_db_security_group::DeleteDBSecurityGroupError) -> Self {
        match err {
            crate::operation::delete_db_security_group::DeleteDBSecurityGroupError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::operation::delete_db_security_group::DeleteDBSecurityGroupError::InvalidDbSecurityGroupStateFault(inner) => {
                Error::InvalidDbSecurityGroupStateFault(inner)
            }
            crate::operation::delete_db_security_group::DeleteDBSecurityGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_snapshot::DeleteDBSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_snapshot::DeleteDBSnapshotError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_db_snapshot::DeleteDBSnapshotError> for Error {
    fn from(err: crate::operation::delete_db_snapshot::DeleteDBSnapshotError) -> Self {
        match err {
            crate::operation::delete_db_snapshot::DeleteDBSnapshotError::DbSnapshotNotFoundFault(inner) => Error::DbSnapshotNotFoundFault(inner),
            crate::operation::delete_db_snapshot::DeleteDBSnapshotError::InvalidDbSnapshotStateFault(inner) => {
                Error::InvalidDbSnapshotStateFault(inner)
            }
            crate::operation::delete_db_snapshot::DeleteDBSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_subnet_group::DeleteDBSubnetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_db_subnet_group::DeleteDBSubnetGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_db_subnet_group::DeleteDBSubnetGroupError> for Error {
    fn from(err: crate::operation::delete_db_subnet_group::DeleteDBSubnetGroupError) -> Self {
        match err {
            crate::operation::delete_db_subnet_group::DeleteDBSubnetGroupError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::operation::delete_db_subnet_group::DeleteDBSubnetGroupError::InvalidDbSubnetGroupStateFault(inner) => {
                Error::InvalidDbSubnetGroupStateFault(inner)
            }
            crate::operation::delete_db_subnet_group::DeleteDBSubnetGroupError::InvalidDbSubnetStateFault(inner) => {
                Error::InvalidDbSubnetStateFault(inner)
            }
            crate::operation::delete_db_subnet_group::DeleteDBSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_event_subscription::DeleteEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_event_subscription::DeleteEventSubscriptionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_event_subscription::DeleteEventSubscriptionError> for Error {
    fn from(err: crate::operation::delete_event_subscription::DeleteEventSubscriptionError) -> Self {
        match err {
            crate::operation::delete_event_subscription::DeleteEventSubscriptionError::InvalidEventSubscriptionStateFault(inner) => {
                Error::InvalidEventSubscriptionStateFault(inner)
            }
            crate::operation::delete_event_subscription::DeleteEventSubscriptionError::SubscriptionNotFoundFault(inner) => {
                Error::SubscriptionNotFoundFault(inner)
            }
            crate::operation::delete_event_subscription::DeleteEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_global_cluster::DeleteGlobalClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_global_cluster::DeleteGlobalClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_global_cluster::DeleteGlobalClusterError> for Error {
    fn from(err: crate::operation::delete_global_cluster::DeleteGlobalClusterError) -> Self {
        match err {
            crate::operation::delete_global_cluster::DeleteGlobalClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::operation::delete_global_cluster::DeleteGlobalClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::operation::delete_global_cluster::DeleteGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_integration::DeleteIntegrationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_integration::DeleteIntegrationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_integration::DeleteIntegrationError> for Error {
    fn from(err: crate::operation::delete_integration::DeleteIntegrationError) -> Self {
        match err {
            crate::operation::delete_integration::DeleteIntegrationError::IntegrationConflictOperationFault(inner) => {
                Error::IntegrationConflictOperationFault(inner)
            }
            crate::operation::delete_integration::DeleteIntegrationError::IntegrationNotFoundFault(inner) => Error::IntegrationNotFoundFault(inner),
            crate::operation::delete_integration::DeleteIntegrationError::InvalidIntegrationStateFault(inner) => {
                Error::InvalidIntegrationStateFault(inner)
            }
            crate::operation::delete_integration::DeleteIntegrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_option_group::DeleteOptionGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_option_group::DeleteOptionGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_option_group::DeleteOptionGroupError> for Error {
    fn from(err: crate::operation::delete_option_group::DeleteOptionGroupError) -> Self {
        match err {
            crate::operation::delete_option_group::DeleteOptionGroupError::InvalidOptionGroupStateFault(inner) => {
                Error::InvalidOptionGroupStateFault(inner)
            }
            crate::operation::delete_option_group::DeleteOptionGroupError::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
            crate::operation::delete_option_group::DeleteOptionGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_tenant_database::DeleteTenantDatabaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_tenant_database::DeleteTenantDatabaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_tenant_database::DeleteTenantDatabaseError> for Error {
    fn from(err: crate::operation::delete_tenant_database::DeleteTenantDatabaseError) -> Self {
        match err {
            crate::operation::delete_tenant_database::DeleteTenantDatabaseError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::delete_tenant_database::DeleteTenantDatabaseError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::delete_tenant_database::DeleteTenantDatabaseError::TenantDatabaseNotFoundFault(inner) => {
                Error::TenantDatabaseNotFoundFault(inner)
            }
            crate::operation::delete_tenant_database::DeleteTenantDatabaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::deregister_db_proxy_targets::DeregisterDBProxyTargetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::deregister_db_proxy_targets::DeregisterDBProxyTargetsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::deregister_db_proxy_targets::DeregisterDBProxyTargetsError> for Error {
    fn from(err: crate::operation::deregister_db_proxy_targets::DeregisterDBProxyTargetsError) -> Self {
        match err {
            crate::operation::deregister_db_proxy_targets::DeregisterDBProxyTargetsError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::operation::deregister_db_proxy_targets::DeregisterDBProxyTargetsError::DbProxyTargetGroupNotFoundFault(inner) => {
                Error::DbProxyTargetGroupNotFoundFault(inner)
            }
            crate::operation::deregister_db_proxy_targets::DeregisterDBProxyTargetsError::DbProxyTargetNotFoundFault(inner) => {
                Error::DbProxyTargetNotFoundFault(inner)
            }
            crate::operation::deregister_db_proxy_targets::DeregisterDBProxyTargetsError::InvalidDbProxyStateFault(inner) => {
                Error::InvalidDbProxyStateFault(inner)
            }
            crate::operation::deregister_db_proxy_targets::DeregisterDBProxyTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_account_attributes::DescribeAccountAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_account_attributes::DescribeAccountAttributesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_account_attributes::DescribeAccountAttributesError> for Error {
    fn from(err: crate::operation::describe_account_attributes::DescribeAccountAttributesError) -> Self {
        match err {
            crate::operation::describe_account_attributes::DescribeAccountAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_blue_green_deployments::DescribeBlueGreenDeploymentsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_blue_green_deployments::DescribeBlueGreenDeploymentsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_blue_green_deployments::DescribeBlueGreenDeploymentsError> for Error {
    fn from(err: crate::operation::describe_blue_green_deployments::DescribeBlueGreenDeploymentsError) -> Self {
        match err {
            crate::operation::describe_blue_green_deployments::DescribeBlueGreenDeploymentsError::BlueGreenDeploymentNotFoundFault(inner) => {
                Error::BlueGreenDeploymentNotFoundFault(inner)
            }
            crate::operation::describe_blue_green_deployments::DescribeBlueGreenDeploymentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_certificates::DescribeCertificatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_certificates::DescribeCertificatesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_certificates::DescribeCertificatesError> for Error {
    fn from(err: crate::operation::describe_certificates::DescribeCertificatesError) -> Self {
        match err {
            crate::operation::describe_certificates::DescribeCertificatesError::CertificateNotFoundFault(inner) => {
                Error::CertificateNotFoundFault(inner)
            }
            crate::operation::describe_certificates::DescribeCertificatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_db_cluster_automated_backups::DescribeDBClusterAutomatedBackupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_db_cluster_automated_backups::DescribeDBClusterAutomatedBackupsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_cluster_automated_backups::DescribeDBClusterAutomatedBackupsError> for Error {
    fn from(err: crate::operation::describe_db_cluster_automated_backups::DescribeDBClusterAutomatedBackupsError) -> Self {
        match err {
            crate::operation::describe_db_cluster_automated_backups::DescribeDBClusterAutomatedBackupsError::DbClusterAutomatedBackupNotFoundFault(inner) => Error::DbClusterAutomatedBackupNotFoundFault(inner),
            crate::operation::describe_db_cluster_automated_backups::DescribeDBClusterAutomatedBackupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_cluster_backtracks::DescribeDBClusterBacktracksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_db_cluster_backtracks::DescribeDBClusterBacktracksError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_cluster_backtracks::DescribeDBClusterBacktracksError> for Error {
    fn from(err: crate::operation::describe_db_cluster_backtracks::DescribeDBClusterBacktracksError) -> Self {
        match err {
            crate::operation::describe_db_cluster_backtracks::DescribeDBClusterBacktracksError::DbClusterBacktrackNotFoundFault(inner) => {
                Error::DbClusterBacktrackNotFoundFault(inner)
            }
            crate::operation::describe_db_cluster_backtracks::DescribeDBClusterBacktracksError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::operation::describe_db_cluster_backtracks::DescribeDBClusterBacktracksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_cluster_endpoints::DescribeDBClusterEndpointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_cluster_endpoints::DescribeDBClusterEndpointsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_cluster_endpoints::DescribeDBClusterEndpointsError> for Error {
    fn from(err: crate::operation::describe_db_cluster_endpoints::DescribeDBClusterEndpointsError) -> Self {
        match err {
            crate::operation::describe_db_cluster_endpoints::DescribeDBClusterEndpointsError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::operation::describe_db_cluster_endpoints::DescribeDBClusterEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_db_cluster_parameter_groups::DescribeDBClusterParameterGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_db_cluster_parameter_groups::DescribeDBClusterParameterGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_cluster_parameter_groups::DescribeDBClusterParameterGroupsError> for Error {
    fn from(err: crate::operation::describe_db_cluster_parameter_groups::DescribeDBClusterParameterGroupsError) -> Self {
        match err {
            crate::operation::describe_db_cluster_parameter_groups::DescribeDBClusterParameterGroupsError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::describe_db_cluster_parameter_groups::DescribeDBClusterParameterGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_cluster_parameters::DescribeDBClusterParametersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_db_cluster_parameters::DescribeDBClusterParametersError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_cluster_parameters::DescribeDBClusterParametersError> for Error {
    fn from(err: crate::operation::describe_db_cluster_parameters::DescribeDBClusterParametersError) -> Self {
        match err {
            crate::operation::describe_db_cluster_parameters::DescribeDBClusterParametersError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::describe_db_cluster_parameters::DescribeDBClusterParametersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_clusters::DescribeDBClustersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_clusters::DescribeDBClustersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_clusters::DescribeDBClustersError> for Error {
    fn from(err: crate::operation::describe_db_clusters::DescribeDBClustersError) -> Self {
        match err {
            crate::operation::describe_db_clusters::DescribeDBClustersError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::describe_db_clusters::DescribeDBClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_db_cluster_snapshot_attributes::DescribeDBClusterSnapshotAttributesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_db_cluster_snapshot_attributes::DescribeDBClusterSnapshotAttributesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_cluster_snapshot_attributes::DescribeDBClusterSnapshotAttributesError> for Error {
    fn from(err: crate::operation::describe_db_cluster_snapshot_attributes::DescribeDBClusterSnapshotAttributesError) -> Self {
        match err {
            crate::operation::describe_db_cluster_snapshot_attributes::DescribeDBClusterSnapshotAttributesError::DbClusterSnapshotNotFoundFault(
                inner,
            ) => Error::DbClusterSnapshotNotFoundFault(inner),
            crate::operation::describe_db_cluster_snapshot_attributes::DescribeDBClusterSnapshotAttributesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_cluster_snapshots::DescribeDBClusterSnapshotsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_cluster_snapshots::DescribeDBClusterSnapshotsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_cluster_snapshots::DescribeDBClusterSnapshotsError> for Error {
    fn from(err: crate::operation::describe_db_cluster_snapshots::DescribeDBClusterSnapshotsError) -> Self {
        match err {
            crate::operation::describe_db_cluster_snapshots::DescribeDBClusterSnapshotsError::DbClusterSnapshotNotFoundFault(inner) => {
                Error::DbClusterSnapshotNotFoundFault(inner)
            }
            crate::operation::describe_db_cluster_snapshots::DescribeDBClusterSnapshotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_engine_versions::DescribeDBEngineVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_engine_versions::DescribeDBEngineVersionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_engine_versions::DescribeDBEngineVersionsError> for Error {
    fn from(err: crate::operation::describe_db_engine_versions::DescribeDBEngineVersionsError) -> Self {
        match err {
            crate::operation::describe_db_engine_versions::DescribeDBEngineVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_db_instance_automated_backups::DescribeDBInstanceAutomatedBackupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_db_instance_automated_backups::DescribeDBInstanceAutomatedBackupsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_instance_automated_backups::DescribeDBInstanceAutomatedBackupsError> for Error {
    fn from(err: crate::operation::describe_db_instance_automated_backups::DescribeDBInstanceAutomatedBackupsError) -> Self {
        match err {
            crate::operation::describe_db_instance_automated_backups::DescribeDBInstanceAutomatedBackupsError::DbInstanceAutomatedBackupNotFoundFault(inner) => Error::DbInstanceAutomatedBackupNotFoundFault(inner),
            crate::operation::describe_db_instance_automated_backups::DescribeDBInstanceAutomatedBackupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_instances::DescribeDBInstancesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_instances::DescribeDBInstancesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_instances::DescribeDBInstancesError> for Error {
    fn from(err: crate::operation::describe_db_instances::DescribeDBInstancesError) -> Self {
        match err {
            crate::operation::describe_db_instances::DescribeDBInstancesError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::describe_db_instances::DescribeDBInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_log_files::DescribeDBLogFilesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_log_files::DescribeDBLogFilesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_log_files::DescribeDBLogFilesError> for Error {
    fn from(err: crate::operation::describe_db_log_files::DescribeDBLogFilesError) -> Self {
        match err {
            crate::operation::describe_db_log_files::DescribeDBLogFilesError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::operation::describe_db_log_files::DescribeDBLogFilesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_parameter_groups::DescribeDBParameterGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_parameter_groups::DescribeDBParameterGroupsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_parameter_groups::DescribeDBParameterGroupsError> for Error {
    fn from(err: crate::operation::describe_db_parameter_groups::DescribeDBParameterGroupsError) -> Self {
        match err {
            crate::operation::describe_db_parameter_groups::DescribeDBParameterGroupsError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::describe_db_parameter_groups::DescribeDBParameterGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_parameters::DescribeDBParametersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_parameters::DescribeDBParametersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_parameters::DescribeDBParametersError> for Error {
    fn from(err: crate::operation::describe_db_parameters::DescribeDBParametersError) -> Self {
        match err {
            crate::operation::describe_db_parameters::DescribeDBParametersError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::describe_db_parameters::DescribeDBParametersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_proxies::DescribeDBProxiesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_proxies::DescribeDBProxiesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_proxies::DescribeDBProxiesError> for Error {
    fn from(err: crate::operation::describe_db_proxies::DescribeDBProxiesError) -> Self {
        match err {
            crate::operation::describe_db_proxies::DescribeDBProxiesError::DbProxyNotFoundFault(inner) => Error::DbProxyNotFoundFault(inner),
            crate::operation::describe_db_proxies::DescribeDBProxiesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_proxy_endpoints::DescribeDBProxyEndpointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_proxy_endpoints::DescribeDBProxyEndpointsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_proxy_endpoints::DescribeDBProxyEndpointsError> for Error {
    fn from(err: crate::operation::describe_db_proxy_endpoints::DescribeDBProxyEndpointsError) -> Self {
        match err {
            crate::operation::describe_db_proxy_endpoints::DescribeDBProxyEndpointsError::DbProxyEndpointNotFoundFault(inner) => {
                Error::DbProxyEndpointNotFoundFault(inner)
            }
            crate::operation::describe_db_proxy_endpoints::DescribeDBProxyEndpointsError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::operation::describe_db_proxy_endpoints::DescribeDBProxyEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_proxy_target_groups::DescribeDBProxyTargetGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_db_proxy_target_groups::DescribeDBProxyTargetGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_proxy_target_groups::DescribeDBProxyTargetGroupsError> for Error {
    fn from(err: crate::operation::describe_db_proxy_target_groups::DescribeDBProxyTargetGroupsError) -> Self {
        match err {
            crate::operation::describe_db_proxy_target_groups::DescribeDBProxyTargetGroupsError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::operation::describe_db_proxy_target_groups::DescribeDBProxyTargetGroupsError::DbProxyTargetGroupNotFoundFault(inner) => {
                Error::DbProxyTargetGroupNotFoundFault(inner)
            }
            crate::operation::describe_db_proxy_target_groups::DescribeDBProxyTargetGroupsError::InvalidDbProxyStateFault(inner) => {
                Error::InvalidDbProxyStateFault(inner)
            }
            crate::operation::describe_db_proxy_target_groups::DescribeDBProxyTargetGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_proxy_targets::DescribeDBProxyTargetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_proxy_targets::DescribeDBProxyTargetsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_proxy_targets::DescribeDBProxyTargetsError> for Error {
    fn from(err: crate::operation::describe_db_proxy_targets::DescribeDBProxyTargetsError) -> Self {
        match err {
            crate::operation::describe_db_proxy_targets::DescribeDBProxyTargetsError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::operation::describe_db_proxy_targets::DescribeDBProxyTargetsError::DbProxyTargetGroupNotFoundFault(inner) => {
                Error::DbProxyTargetGroupNotFoundFault(inner)
            }
            crate::operation::describe_db_proxy_targets::DescribeDBProxyTargetsError::DbProxyTargetNotFoundFault(inner) => {
                Error::DbProxyTargetNotFoundFault(inner)
            }
            crate::operation::describe_db_proxy_targets::DescribeDBProxyTargetsError::InvalidDbProxyStateFault(inner) => {
                Error::InvalidDbProxyStateFault(inner)
            }
            crate::operation::describe_db_proxy_targets::DescribeDBProxyTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_recommendations::DescribeDBRecommendationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_recommendations::DescribeDBRecommendationsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_recommendations::DescribeDBRecommendationsError> for Error {
    fn from(err: crate::operation::describe_db_recommendations::DescribeDBRecommendationsError) -> Self {
        match err {
            crate::operation::describe_db_recommendations::DescribeDBRecommendationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_security_groups::DescribeDBSecurityGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_security_groups::DescribeDBSecurityGroupsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_security_groups::DescribeDBSecurityGroupsError> for Error {
    fn from(err: crate::operation::describe_db_security_groups::DescribeDBSecurityGroupsError) -> Self {
        match err {
            crate::operation::describe_db_security_groups::DescribeDBSecurityGroupsError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::operation::describe_db_security_groups::DescribeDBSecurityGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_snapshot_attributes::DescribeDBSnapshotAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_db_snapshot_attributes::DescribeDBSnapshotAttributesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_snapshot_attributes::DescribeDBSnapshotAttributesError> for Error {
    fn from(err: crate::operation::describe_db_snapshot_attributes::DescribeDBSnapshotAttributesError) -> Self {
        match err {
            crate::operation::describe_db_snapshot_attributes::DescribeDBSnapshotAttributesError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::operation::describe_db_snapshot_attributes::DescribeDBSnapshotAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_snapshots::DescribeDBSnapshotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_snapshots::DescribeDBSnapshotsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_snapshots::DescribeDBSnapshotsError> for Error {
    fn from(err: crate::operation::describe_db_snapshots::DescribeDBSnapshotsError) -> Self {
        match err {
            crate::operation::describe_db_snapshots::DescribeDBSnapshotsError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::operation::describe_db_snapshots::DescribeDBSnapshotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_db_snapshot_tenant_databases::DescribeDBSnapshotTenantDatabasesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_db_snapshot_tenant_databases::DescribeDBSnapshotTenantDatabasesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_snapshot_tenant_databases::DescribeDBSnapshotTenantDatabasesError> for Error {
    fn from(err: crate::operation::describe_db_snapshot_tenant_databases::DescribeDBSnapshotTenantDatabasesError) -> Self {
        match err {
            crate::operation::describe_db_snapshot_tenant_databases::DescribeDBSnapshotTenantDatabasesError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::operation::describe_db_snapshot_tenant_databases::DescribeDBSnapshotTenantDatabasesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_subnet_groups::DescribeDBSubnetGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_db_subnet_groups::DescribeDBSubnetGroupsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_db_subnet_groups::DescribeDBSubnetGroupsError> for Error {
    fn from(err: crate::operation::describe_db_subnet_groups::DescribeDBSubnetGroupsError) -> Self {
        match err {
            crate::operation::describe_db_subnet_groups::DescribeDBSubnetGroupsError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::operation::describe_db_subnet_groups::DescribeDBSubnetGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_engine_default_cluster_parameters::DescribeEngineDefaultClusterParametersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_engine_default_cluster_parameters::DescribeEngineDefaultClusterParametersError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_engine_default_cluster_parameters::DescribeEngineDefaultClusterParametersError> for Error {
    fn from(err: crate::operation::describe_engine_default_cluster_parameters::DescribeEngineDefaultClusterParametersError) -> Self {
        match err {
            crate::operation::describe_engine_default_cluster_parameters::DescribeEngineDefaultClusterParametersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_engine_default_parameters::DescribeEngineDefaultParametersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_engine_default_parameters::DescribeEngineDefaultParametersError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_engine_default_parameters::DescribeEngineDefaultParametersError> for Error {
    fn from(err: crate::operation::describe_engine_default_parameters::DescribeEngineDefaultParametersError) -> Self {
        match err {
            crate::operation::describe_engine_default_parameters::DescribeEngineDefaultParametersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_event_categories::DescribeEventCategoriesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_event_categories::DescribeEventCategoriesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_event_categories::DescribeEventCategoriesError> for Error {
    fn from(err: crate::operation::describe_event_categories::DescribeEventCategoriesError) -> Self {
        match err {
            crate::operation::describe_event_categories::DescribeEventCategoriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_events::DescribeEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_events::DescribeEventsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_events::DescribeEventsError> for Error {
    fn from(err: crate::operation::describe_events::DescribeEventsError) -> Self {
        match err {
            crate::operation::describe_events::DescribeEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsError> for Error {
    fn from(err: crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsError) -> Self {
        match err {
            crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsError::SubscriptionNotFoundFault(inner) => {
                Error::SubscriptionNotFoundFault(inner)
            }
            crate::operation::describe_event_subscriptions::DescribeEventSubscriptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_export_tasks::DescribeExportTasksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_export_tasks::DescribeExportTasksError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_export_tasks::DescribeExportTasksError> for Error {
    fn from(err: crate::operation::describe_export_tasks::DescribeExportTasksError) -> Self {
        match err {
            crate::operation::describe_export_tasks::DescribeExportTasksError::ExportTaskNotFoundFault(inner) => {
                Error::ExportTaskNotFoundFault(inner)
            }
            crate::operation::describe_export_tasks::DescribeExportTasksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_global_clusters::DescribeGlobalClustersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_global_clusters::DescribeGlobalClustersError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_global_clusters::DescribeGlobalClustersError> for Error {
    fn from(err: crate::operation::describe_global_clusters::DescribeGlobalClustersError) -> Self {
        match err {
            crate::operation::describe_global_clusters::DescribeGlobalClustersError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::operation::describe_global_clusters::DescribeGlobalClustersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_integrations::DescribeIntegrationsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_integrations::DescribeIntegrationsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_integrations::DescribeIntegrationsError> for Error {
    fn from(err: crate::operation::describe_integrations::DescribeIntegrationsError) -> Self {
        match err {
            crate::operation::describe_integrations::DescribeIntegrationsError::IntegrationNotFoundFault(inner) => {
                Error::IntegrationNotFoundFault(inner)
            }
            crate::operation::describe_integrations::DescribeIntegrationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_option_group_options::DescribeOptionGroupOptionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_option_group_options::DescribeOptionGroupOptionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_option_group_options::DescribeOptionGroupOptionsError> for Error {
    fn from(err: crate::operation::describe_option_group_options::DescribeOptionGroupOptionsError) -> Self {
        match err {
            crate::operation::describe_option_group_options::DescribeOptionGroupOptionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_option_groups::DescribeOptionGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_option_groups::DescribeOptionGroupsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_option_groups::DescribeOptionGroupsError> for Error {
    fn from(err: crate::operation::describe_option_groups::DescribeOptionGroupsError) -> Self {
        match err {
            crate::operation::describe_option_groups::DescribeOptionGroupsError::OptionGroupNotFoundFault(inner) => {
                Error::OptionGroupNotFoundFault(inner)
            }
            crate::operation::describe_option_groups::DescribeOptionGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_orderable_db_instance_options::DescribeOrderableDBInstanceOptionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_orderable_db_instance_options::DescribeOrderableDBInstanceOptionsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_orderable_db_instance_options::DescribeOrderableDBInstanceOptionsError> for Error {
    fn from(err: crate::operation::describe_orderable_db_instance_options::DescribeOrderableDBInstanceOptionsError) -> Self {
        match err {
            crate::operation::describe_orderable_db_instance_options::DescribeOrderableDBInstanceOptionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_pending_maintenance_actions::DescribePendingMaintenanceActionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_pending_maintenance_actions::DescribePendingMaintenanceActionsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_pending_maintenance_actions::DescribePendingMaintenanceActionsError> for Error {
    fn from(err: crate::operation::describe_pending_maintenance_actions::DescribePendingMaintenanceActionsError) -> Self {
        match err {
            crate::operation::describe_pending_maintenance_actions::DescribePendingMaintenanceActionsError::ResourceNotFoundFault(inner) => {
                Error::ResourceNotFoundFault(inner)
            }
            crate::operation::describe_pending_maintenance_actions::DescribePendingMaintenanceActionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_reserved_db_instances::DescribeReservedDBInstancesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_reserved_db_instances::DescribeReservedDBInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_reserved_db_instances::DescribeReservedDBInstancesError> for Error {
    fn from(err: crate::operation::describe_reserved_db_instances::DescribeReservedDBInstancesError) -> Self {
        match err {
            crate::operation::describe_reserved_db_instances::DescribeReservedDBInstancesError::ReservedDbInstanceNotFoundFault(inner) => {
                Error::ReservedDbInstanceNotFoundFault(inner)
            }
            crate::operation::describe_reserved_db_instances::DescribeReservedDBInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_reserved_db_instances_offerings::DescribeReservedDBInstancesOfferingsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_reserved_db_instances_offerings::DescribeReservedDBInstancesOfferingsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_reserved_db_instances_offerings::DescribeReservedDBInstancesOfferingsError> for Error {
    fn from(err: crate::operation::describe_reserved_db_instances_offerings::DescribeReservedDBInstancesOfferingsError) -> Self {
        match err {
            crate::operation::describe_reserved_db_instances_offerings::DescribeReservedDBInstancesOfferingsError::ReservedDbInstancesOfferingNotFoundFault(inner) => Error::ReservedDbInstancesOfferingNotFoundFault(inner),
            crate::operation::describe_reserved_db_instances_offerings::DescribeReservedDBInstancesOfferingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_source_regions::DescribeSourceRegionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_source_regions::DescribeSourceRegionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_source_regions::DescribeSourceRegionsError> for Error {
    fn from(err: crate::operation::describe_source_regions::DescribeSourceRegionsError) -> Self {
        match err {
            crate::operation::describe_source_regions::DescribeSourceRegionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_tenant_databases::DescribeTenantDatabasesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_tenant_databases::DescribeTenantDatabasesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_tenant_databases::DescribeTenantDatabasesError> for Error {
    fn from(err: crate::operation::describe_tenant_databases::DescribeTenantDatabasesError) -> Self {
        match err {
            crate::operation::describe_tenant_databases::DescribeTenantDatabasesError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::describe_tenant_databases::DescribeTenantDatabasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_valid_db_instance_modifications::DescribeValidDBInstanceModificationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_valid_db_instance_modifications::DescribeValidDBInstanceModificationsError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_valid_db_instance_modifications::DescribeValidDBInstanceModificationsError> for Error {
    fn from(err: crate::operation::describe_valid_db_instance_modifications::DescribeValidDBInstanceModificationsError) -> Self {
        match err {
            crate::operation::describe_valid_db_instance_modifications::DescribeValidDBInstanceModificationsError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::describe_valid_db_instance_modifications::DescribeValidDBInstanceModificationsError::InvalidDbInstanceStateFault(
                inner,
            ) => Error::InvalidDbInstanceStateFault(inner),
            crate::operation::describe_valid_db_instance_modifications::DescribeValidDBInstanceModificationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::download_db_log_file_portion::DownloadDBLogFilePortionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::download_db_log_file_portion::DownloadDBLogFilePortionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::download_db_log_file_portion::DownloadDBLogFilePortionError> for Error {
    fn from(err: crate::operation::download_db_log_file_portion::DownloadDBLogFilePortionError) -> Self {
        match err {
            crate::operation::download_db_log_file_portion::DownloadDBLogFilePortionError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::download_db_log_file_portion::DownloadDBLogFilePortionError::DbLogFileNotFoundFault(inner) => {
                Error::DbLogFileNotFoundFault(inner)
            }
            crate::operation::download_db_log_file_portion::DownloadDBLogFilePortionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::failover_db_cluster::FailoverDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::failover_db_cluster::FailoverDBClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::failover_db_cluster::FailoverDBClusterError> for Error {
    fn from(err: crate::operation::failover_db_cluster::FailoverDBClusterError) -> Self {
        match err {
            crate::operation::failover_db_cluster::FailoverDBClusterError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::failover_db_cluster::FailoverDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::failover_db_cluster::FailoverDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::failover_db_cluster::FailoverDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::failover_global_cluster::FailoverGlobalClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::failover_global_cluster::FailoverGlobalClusterError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::failover_global_cluster::FailoverGlobalClusterError> for Error {
    fn from(err: crate::operation::failover_global_cluster::FailoverGlobalClusterError) -> Self {
        match err {
            crate::operation::failover_global_cluster::FailoverGlobalClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::operation::failover_global_cluster::FailoverGlobalClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::operation::failover_global_cluster::FailoverGlobalClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::failover_global_cluster::FailoverGlobalClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::operation::failover_global_cluster::FailoverGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::BlueGreenDeploymentNotFoundFault(inner) => {
                Error::BlueGreenDeploymentNotFoundFault(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::DbProxyNotFoundFault(inner) => Error::DbProxyNotFoundFault(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::DbProxyTargetGroupNotFoundFault(inner) => {
                Error::DbProxyTargetGroupNotFoundFault(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::DbSnapshotTenantDatabaseNotFoundFault(inner) => {
                Error::DbSnapshotTenantDatabaseNotFoundFault(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::IntegrationNotFoundFault(inner) => {
                Error::IntegrationNotFoundFault(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::TenantDatabaseNotFoundFault(inner) => {
                Error::TenantDatabaseNotFoundFault(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_activity_stream::ModifyActivityStreamError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_activity_stream::ModifyActivityStreamError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_activity_stream::ModifyActivityStreamError> for Error {
    fn from(err: crate::operation::modify_activity_stream::ModifyActivityStreamError) -> Self {
        match err {
            crate::operation::modify_activity_stream::ModifyActivityStreamError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::modify_activity_stream::ModifyActivityStreamError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::modify_activity_stream::ModifyActivityStreamError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::modify_activity_stream::ModifyActivityStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_certificates::ModifyCertificatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_certificates::ModifyCertificatesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_certificates::ModifyCertificatesError> for Error {
    fn from(err: crate::operation::modify_certificates::ModifyCertificatesError) -> Self {
        match err {
            crate::operation::modify_certificates::ModifyCertificatesError::CertificateNotFoundFault(inner) => Error::CertificateNotFoundFault(inner),
            crate::operation::modify_certificates::ModifyCertificatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_current_db_cluster_capacity::ModifyCurrentDBClusterCapacityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_current_db_cluster_capacity::ModifyCurrentDBClusterCapacityError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_current_db_cluster_capacity::ModifyCurrentDBClusterCapacityError> for Error {
    fn from(err: crate::operation::modify_current_db_cluster_capacity::ModifyCurrentDBClusterCapacityError) -> Self {
        match err {
            crate::operation::modify_current_db_cluster_capacity::ModifyCurrentDBClusterCapacityError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::operation::modify_current_db_cluster_capacity::ModifyCurrentDBClusterCapacityError::InvalidDbClusterCapacityFault(inner) => {
                Error::InvalidDbClusterCapacityFault(inner)
            }
            crate::operation::modify_current_db_cluster_capacity::ModifyCurrentDBClusterCapacityError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::modify_current_db_cluster_capacity::ModifyCurrentDBClusterCapacityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_custom_db_engine_version::ModifyCustomDBEngineVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_custom_db_engine_version::ModifyCustomDBEngineVersionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_custom_db_engine_version::ModifyCustomDBEngineVersionError> for Error {
    fn from(err: crate::operation::modify_custom_db_engine_version::ModifyCustomDBEngineVersionError) -> Self {
        match err {
            crate::operation::modify_custom_db_engine_version::ModifyCustomDBEngineVersionError::CustomDbEngineVersionNotFoundFault(inner) => {
                Error::CustomDbEngineVersionNotFoundFault(inner)
            }
            crate::operation::modify_custom_db_engine_version::ModifyCustomDBEngineVersionError::InvalidCustomDbEngineVersionStateFault(inner) => {
                Error::InvalidCustomDbEngineVersionStateFault(inner)
            }
            crate::operation::modify_custom_db_engine_version::ModifyCustomDBEngineVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_cluster::ModifyDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_cluster::ModifyDBClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_db_cluster::ModifyDBClusterError> for Error {
    fn from(err: crate::operation::modify_db_cluster::ModifyDBClusterError) -> Self {
        match err {
            crate::operation::modify_db_cluster::ModifyDBClusterError::DbClusterAlreadyExistsFault(inner) => {
                Error::DbClusterAlreadyExistsFault(inner)
            }
            crate::operation::modify_db_cluster::ModifyDBClusterError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::modify_db_cluster::ModifyDBClusterError::DbClusterParameterGroupNotFoundFault(inner) => {
                Error::DbClusterParameterGroupNotFoundFault(inner)
            }
            crate::operation::modify_db_cluster::ModifyDBClusterError::DbInstanceAlreadyExistsFault(inner) => {
                Error::DbInstanceAlreadyExistsFault(inner)
            }
            crate::operation::modify_db_cluster::ModifyDBClusterError::DbSubnetGroupNotFoundFault(inner) => Error::DbSubnetGroupNotFoundFault(inner),
            crate::operation::modify_db_cluster::ModifyDBClusterError::DomainNotFoundFault(inner) => Error::DomainNotFoundFault(inner),
            crate::operation::modify_db_cluster::ModifyDBClusterError::InvalidDbClusterStateFault(inner) => Error::InvalidDbClusterStateFault(inner),
            crate::operation::modify_db_cluster::ModifyDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::modify_db_cluster::ModifyDBClusterError::InvalidDbSecurityGroupStateFault(inner) => {
                Error::InvalidDbSecurityGroupStateFault(inner)
            }
            crate::operation::modify_db_cluster::ModifyDBClusterError::InvalidDbSubnetGroupStateFault(inner) => {
                Error::InvalidDbSubnetGroupStateFault(inner)
            }
            crate::operation::modify_db_cluster::ModifyDBClusterError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::operation::modify_db_cluster::ModifyDBClusterError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::operation::modify_db_cluster::ModifyDBClusterError::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
            crate::operation::modify_db_cluster::ModifyDBClusterError::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
            crate::operation::modify_db_cluster::ModifyDBClusterError::StorageTypeNotAvailableFault(inner) => {
                Error::StorageTypeNotAvailableFault(inner)
            }
            crate::operation::modify_db_cluster::ModifyDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpointError> for Error {
    fn from(err: crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpointError) -> Self {
        match err {
            crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpointError::DbClusterEndpointNotFoundFault(inner) => {
                Error::DbClusterEndpointNotFoundFault(inner)
            }
            crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpointError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpointError::InvalidDbClusterEndpointStateFault(inner) => {
                Error::InvalidDbClusterEndpointStateFault(inner)
            }
            crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpointError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpointError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_db_cluster_parameter_group::ModifyDBClusterParameterGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_db_cluster_parameter_group::ModifyDBClusterParameterGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_db_cluster_parameter_group::ModifyDBClusterParameterGroupError> for Error {
    fn from(err: crate::operation::modify_db_cluster_parameter_group::ModifyDBClusterParameterGroupError) -> Self {
        match err {
            crate::operation::modify_db_cluster_parameter_group::ModifyDBClusterParameterGroupError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::modify_db_cluster_parameter_group::ModifyDBClusterParameterGroupError::InvalidDbParameterGroupStateFault(inner) => {
                Error::InvalidDbParameterGroupStateFault(inner)
            }
            crate::operation::modify_db_cluster_parameter_group::ModifyDBClusterParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_db_cluster_snapshot_attribute::ModifyDBClusterSnapshotAttributeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_db_cluster_snapshot_attribute::ModifyDBClusterSnapshotAttributeError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_db_cluster_snapshot_attribute::ModifyDBClusterSnapshotAttributeError> for Error {
    fn from(err: crate::operation::modify_db_cluster_snapshot_attribute::ModifyDBClusterSnapshotAttributeError) -> Self {
        match err {
            crate::operation::modify_db_cluster_snapshot_attribute::ModifyDBClusterSnapshotAttributeError::DbClusterSnapshotNotFoundFault(inner) => {
                Error::DbClusterSnapshotNotFoundFault(inner)
            }
            crate::operation::modify_db_cluster_snapshot_attribute::ModifyDBClusterSnapshotAttributeError::InvalidDbClusterSnapshotStateFault(
                inner,
            ) => Error::InvalidDbClusterSnapshotStateFault(inner),
            crate::operation::modify_db_cluster_snapshot_attribute::ModifyDBClusterSnapshotAttributeError::SharedSnapshotQuotaExceededFault(
                inner,
            ) => Error::SharedSnapshotQuotaExceededFault(inner),
            crate::operation::modify_db_cluster_snapshot_attribute::ModifyDBClusterSnapshotAttributeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_instance::ModifyDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_instance::ModifyDBInstanceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_db_instance::ModifyDBInstanceError> for Error {
    fn from(err: crate::operation::modify_db_instance::ModifyDBInstanceError) -> Self {
        match err {
            crate::operation::modify_db_instance::ModifyDBInstanceError::AuthorizationNotFoundFault(inner) => {
                Error::AuthorizationNotFoundFault(inner)
            }
            crate::operation::modify_db_instance::ModifyDBInstanceError::BackupPolicyNotFoundFault(inner) => Error::BackupPolicyNotFoundFault(inner),
            crate::operation::modify_db_instance::ModifyDBInstanceError::CertificateNotFoundFault(inner) => Error::CertificateNotFoundFault(inner),
            crate::operation::modify_db_instance::ModifyDBInstanceError::DbInstanceAlreadyExistsFault(inner) => {
                Error::DbInstanceAlreadyExistsFault(inner)
            }
            crate::operation::modify_db_instance::ModifyDBInstanceError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::operation::modify_db_instance::ModifyDBInstanceError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::modify_db_instance::ModifyDBInstanceError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::operation::modify_db_instance::ModifyDBInstanceError::DbUpgradeDependencyFailureFault(inner) => {
                Error::DbUpgradeDependencyFailureFault(inner)
            }
            crate::operation::modify_db_instance::ModifyDBInstanceError::DomainNotFoundFault(inner) => Error::DomainNotFoundFault(inner),
            crate::operation::modify_db_instance::ModifyDBInstanceError::InsufficientDbInstanceCapacityFault(inner) => {
                Error::InsufficientDbInstanceCapacityFault(inner)
            }
            crate::operation::modify_db_instance::ModifyDBInstanceError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::modify_db_instance::ModifyDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::modify_db_instance::ModifyDBInstanceError::InvalidDbSecurityGroupStateFault(inner) => {
                Error::InvalidDbSecurityGroupStateFault(inner)
            }
            crate::operation::modify_db_instance::ModifyDBInstanceError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::operation::modify_db_instance::ModifyDBInstanceError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::operation::modify_db_instance::ModifyDBInstanceError::NetworkTypeNotSupported(inner) => Error::NetworkTypeNotSupported(inner),
            crate::operation::modify_db_instance::ModifyDBInstanceError::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
            crate::operation::modify_db_instance::ModifyDBInstanceError::ProvisionedIopsNotAvailableInAzFault(inner) => {
                Error::ProvisionedIopsNotAvailableInAzFault(inner)
            }
            crate::operation::modify_db_instance::ModifyDBInstanceError::StorageQuotaExceededFault(inner) => Error::StorageQuotaExceededFault(inner),
            crate::operation::modify_db_instance::ModifyDBInstanceError::StorageTypeNotSupportedFault(inner) => {
                Error::StorageTypeNotSupportedFault(inner)
            }
            crate::operation::modify_db_instance::ModifyDBInstanceError::TenantDatabaseQuotaExceededFault(inner) => {
                Error::TenantDatabaseQuotaExceededFault(inner)
            }
            crate::operation::modify_db_instance::ModifyDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_parameter_group::ModifyDBParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_parameter_group::ModifyDBParameterGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_db_parameter_group::ModifyDBParameterGroupError> for Error {
    fn from(err: crate::operation::modify_db_parameter_group::ModifyDBParameterGroupError) -> Self {
        match err {
            crate::operation::modify_db_parameter_group::ModifyDBParameterGroupError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::modify_db_parameter_group::ModifyDBParameterGroupError::InvalidDbParameterGroupStateFault(inner) => {
                Error::InvalidDbParameterGroupStateFault(inner)
            }
            crate::operation::modify_db_parameter_group::ModifyDBParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_proxy::ModifyDBProxyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_proxy::ModifyDBProxyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_db_proxy::ModifyDBProxyError> for Error {
    fn from(err: crate::operation::modify_db_proxy::ModifyDBProxyError) -> Self {
        match err {
            crate::operation::modify_db_proxy::ModifyDBProxyError::DbProxyAlreadyExistsFault(inner) => Error::DbProxyAlreadyExistsFault(inner),
            crate::operation::modify_db_proxy::ModifyDBProxyError::DbProxyNotFoundFault(inner) => Error::DbProxyNotFoundFault(inner),
            crate::operation::modify_db_proxy::ModifyDBProxyError::InvalidDbProxyStateFault(inner) => Error::InvalidDbProxyStateFault(inner),
            crate::operation::modify_db_proxy::ModifyDBProxyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_proxy_endpoint::ModifyDBProxyEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_proxy_endpoint::ModifyDBProxyEndpointError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_db_proxy_endpoint::ModifyDBProxyEndpointError> for Error {
    fn from(err: crate::operation::modify_db_proxy_endpoint::ModifyDBProxyEndpointError) -> Self {
        match err {
            crate::operation::modify_db_proxy_endpoint::ModifyDBProxyEndpointError::DbProxyEndpointAlreadyExistsFault(inner) => {
                Error::DbProxyEndpointAlreadyExistsFault(inner)
            }
            crate::operation::modify_db_proxy_endpoint::ModifyDBProxyEndpointError::DbProxyEndpointNotFoundFault(inner) => {
                Error::DbProxyEndpointNotFoundFault(inner)
            }
            crate::operation::modify_db_proxy_endpoint::ModifyDBProxyEndpointError::InvalidDbProxyEndpointStateFault(inner) => {
                Error::InvalidDbProxyEndpointStateFault(inner)
            }
            crate::operation::modify_db_proxy_endpoint::ModifyDBProxyEndpointError::InvalidDbProxyStateFault(inner) => {
                Error::InvalidDbProxyStateFault(inner)
            }
            crate::operation::modify_db_proxy_endpoint::ModifyDBProxyEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_proxy_target_group::ModifyDBProxyTargetGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_proxy_target_group::ModifyDBProxyTargetGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_db_proxy_target_group::ModifyDBProxyTargetGroupError> for Error {
    fn from(err: crate::operation::modify_db_proxy_target_group::ModifyDBProxyTargetGroupError) -> Self {
        match err {
            crate::operation::modify_db_proxy_target_group::ModifyDBProxyTargetGroupError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::operation::modify_db_proxy_target_group::ModifyDBProxyTargetGroupError::DbProxyTargetGroupNotFoundFault(inner) => {
                Error::DbProxyTargetGroupNotFoundFault(inner)
            }
            crate::operation::modify_db_proxy_target_group::ModifyDBProxyTargetGroupError::InvalidDbProxyStateFault(inner) => {
                Error::InvalidDbProxyStateFault(inner)
            }
            crate::operation::modify_db_proxy_target_group::ModifyDBProxyTargetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_recommendation::ModifyDBRecommendationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_recommendation::ModifyDBRecommendationError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_db_recommendation::ModifyDBRecommendationError> for Error {
    fn from(err: crate::operation::modify_db_recommendation::ModifyDBRecommendationError) -> Self {
        match err {
            crate::operation::modify_db_recommendation::ModifyDBRecommendationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_snapshot::ModifyDBSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_snapshot::ModifyDBSnapshotError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_db_snapshot::ModifyDBSnapshotError> for Error {
    fn from(err: crate::operation::modify_db_snapshot::ModifyDBSnapshotError) -> Self {
        match err {
            crate::operation::modify_db_snapshot::ModifyDBSnapshotError::DbSnapshotNotFoundFault(inner) => Error::DbSnapshotNotFoundFault(inner),
            crate::operation::modify_db_snapshot::ModifyDBSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_snapshot_attribute::ModifyDBSnapshotAttributeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_snapshot_attribute::ModifyDBSnapshotAttributeError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_db_snapshot_attribute::ModifyDBSnapshotAttributeError> for Error {
    fn from(err: crate::operation::modify_db_snapshot_attribute::ModifyDBSnapshotAttributeError) -> Self {
        match err {
            crate::operation::modify_db_snapshot_attribute::ModifyDBSnapshotAttributeError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::operation::modify_db_snapshot_attribute::ModifyDBSnapshotAttributeError::InvalidDbSnapshotStateFault(inner) => {
                Error::InvalidDbSnapshotStateFault(inner)
            }
            crate::operation::modify_db_snapshot_attribute::ModifyDBSnapshotAttributeError::SharedSnapshotQuotaExceededFault(inner) => {
                Error::SharedSnapshotQuotaExceededFault(inner)
            }
            crate::operation::modify_db_snapshot_attribute::ModifyDBSnapshotAttributeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_subnet_group::ModifyDBSubnetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_db_subnet_group::ModifyDBSubnetGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_db_subnet_group::ModifyDBSubnetGroupError> for Error {
    fn from(err: crate::operation::modify_db_subnet_group::ModifyDBSubnetGroupError) -> Self {
        match err {
            crate::operation::modify_db_subnet_group::ModifyDBSubnetGroupError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::operation::modify_db_subnet_group::ModifyDBSubnetGroupError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::operation::modify_db_subnet_group::ModifyDBSubnetGroupError::DbSubnetQuotaExceededFault(inner) => {
                Error::DbSubnetQuotaExceededFault(inner)
            }
            crate::operation::modify_db_subnet_group::ModifyDBSubnetGroupError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::operation::modify_db_subnet_group::ModifyDBSubnetGroupError::SubnetAlreadyInUse(inner) => Error::SubnetAlreadyInUse(inner),
            crate::operation::modify_db_subnet_group::ModifyDBSubnetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_event_subscription::ModifyEventSubscriptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_event_subscription::ModifyEventSubscriptionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_event_subscription::ModifyEventSubscriptionError> for Error {
    fn from(err: crate::operation::modify_event_subscription::ModifyEventSubscriptionError) -> Self {
        match err {
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::EventSubscriptionQuotaExceededFault(inner) => {
                Error::EventSubscriptionQuotaExceededFault(inner)
            }
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::SnsInvalidTopicFault(inner) => {
                Error::SnsInvalidTopicFault(inner)
            }
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::SnsNoAuthorizationFault(inner) => {
                Error::SnsNoAuthorizationFault(inner)
            }
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::SnsTopicArnNotFoundFault(inner) => {
                Error::SnsTopicArnNotFoundFault(inner)
            }
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::SubscriptionCategoryNotFoundFault(inner) => {
                Error::SubscriptionCategoryNotFoundFault(inner)
            }
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::SubscriptionNotFoundFault(inner) => {
                Error::SubscriptionNotFoundFault(inner)
            }
            crate::operation::modify_event_subscription::ModifyEventSubscriptionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_global_cluster::ModifyGlobalClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_global_cluster::ModifyGlobalClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_global_cluster::ModifyGlobalClusterError> for Error {
    fn from(err: crate::operation::modify_global_cluster::ModifyGlobalClusterError) -> Self {
        match err {
            crate::operation::modify_global_cluster::ModifyGlobalClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::operation::modify_global_cluster::ModifyGlobalClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::modify_global_cluster::ModifyGlobalClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::modify_global_cluster::ModifyGlobalClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::operation::modify_global_cluster::ModifyGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_option_group::ModifyOptionGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_option_group::ModifyOptionGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_option_group::ModifyOptionGroupError> for Error {
    fn from(err: crate::operation::modify_option_group::ModifyOptionGroupError) -> Self {
        match err {
            crate::operation::modify_option_group::ModifyOptionGroupError::InvalidOptionGroupStateFault(inner) => {
                Error::InvalidOptionGroupStateFault(inner)
            }
            crate::operation::modify_option_group::ModifyOptionGroupError::OptionGroupNotFoundFault(inner) => Error::OptionGroupNotFoundFault(inner),
            crate::operation::modify_option_group::ModifyOptionGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_tenant_database::ModifyTenantDatabaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::modify_tenant_database::ModifyTenantDatabaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::modify_tenant_database::ModifyTenantDatabaseError> for Error {
    fn from(err: crate::operation::modify_tenant_database::ModifyTenantDatabaseError) -> Self {
        match err {
            crate::operation::modify_tenant_database::ModifyTenantDatabaseError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::modify_tenant_database::ModifyTenantDatabaseError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::modify_tenant_database::ModifyTenantDatabaseError::TenantDatabaseAlreadyExistsFault(inner) => {
                Error::TenantDatabaseAlreadyExistsFault(inner)
            }
            crate::operation::modify_tenant_database::ModifyTenantDatabaseError::TenantDatabaseNotFoundFault(inner) => {
                Error::TenantDatabaseNotFoundFault(inner)
            }
            crate::operation::modify_tenant_database::ModifyTenantDatabaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::promote_read_replica::PromoteReadReplicaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::promote_read_replica::PromoteReadReplicaError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::promote_read_replica::PromoteReadReplicaError> for Error {
    fn from(err: crate::operation::promote_read_replica::PromoteReadReplicaError) -> Self {
        match err {
            crate::operation::promote_read_replica::PromoteReadReplicaError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::operation::promote_read_replica::PromoteReadReplicaError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::promote_read_replica::PromoteReadReplicaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::promote_read_replica_db_cluster::PromoteReadReplicaDBClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::promote_read_replica_db_cluster::PromoteReadReplicaDBClusterError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::promote_read_replica_db_cluster::PromoteReadReplicaDBClusterError> for Error {
    fn from(err: crate::operation::promote_read_replica_db_cluster::PromoteReadReplicaDBClusterError) -> Self {
        match err {
            crate::operation::promote_read_replica_db_cluster::PromoteReadReplicaDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::operation::promote_read_replica_db_cluster::PromoteReadReplicaDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::promote_read_replica_db_cluster::PromoteReadReplicaDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::purchase_reserved_db_instances_offering::PurchaseReservedDBInstancesOfferingError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::purchase_reserved_db_instances_offering::PurchaseReservedDBInstancesOfferingError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::purchase_reserved_db_instances_offering::PurchaseReservedDBInstancesOfferingError> for Error {
    fn from(err: crate::operation::purchase_reserved_db_instances_offering::PurchaseReservedDBInstancesOfferingError) -> Self {
        match err {
            crate::operation::purchase_reserved_db_instances_offering::PurchaseReservedDBInstancesOfferingError::ReservedDbInstanceAlreadyExistsFault(inner) => Error::ReservedDbInstanceAlreadyExistsFault(inner),
            crate::operation::purchase_reserved_db_instances_offering::PurchaseReservedDBInstancesOfferingError::ReservedDbInstanceQuotaExceededFault(inner) => Error::ReservedDbInstanceQuotaExceededFault(inner),
            crate::operation::purchase_reserved_db_instances_offering::PurchaseReservedDBInstancesOfferingError::ReservedDbInstancesOfferingNotFoundFault(inner) => Error::ReservedDbInstancesOfferingNotFoundFault(inner),
            crate::operation::purchase_reserved_db_instances_offering::PurchaseReservedDBInstancesOfferingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reboot_db_cluster::RebootDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reboot_db_cluster::RebootDBClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::reboot_db_cluster::RebootDBClusterError> for Error {
    fn from(err: crate::operation::reboot_db_cluster::RebootDBClusterError) -> Self {
        match err {
            crate::operation::reboot_db_cluster::RebootDBClusterError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::reboot_db_cluster::RebootDBClusterError::InvalidDbClusterStateFault(inner) => Error::InvalidDbClusterStateFault(inner),
            crate::operation::reboot_db_cluster::RebootDBClusterError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::reboot_db_cluster::RebootDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reboot_db_instance::RebootDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reboot_db_instance::RebootDBInstanceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::reboot_db_instance::RebootDBInstanceError> for Error {
    fn from(err: crate::operation::reboot_db_instance::RebootDBInstanceError) -> Self {
        match err {
            crate::operation::reboot_db_instance::RebootDBInstanceError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::operation::reboot_db_instance::RebootDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::reboot_db_instance::RebootDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::register_db_proxy_targets::RegisterDBProxyTargetsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::register_db_proxy_targets::RegisterDBProxyTargetsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::register_db_proxy_targets::RegisterDBProxyTargetsError> for Error {
    fn from(err: crate::operation::register_db_proxy_targets::RegisterDBProxyTargetsError) -> Self {
        match err {
            crate::operation::register_db_proxy_targets::RegisterDBProxyTargetsError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::operation::register_db_proxy_targets::RegisterDBProxyTargetsError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::register_db_proxy_targets::RegisterDBProxyTargetsError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::operation::register_db_proxy_targets::RegisterDBProxyTargetsError::DbProxyTargetAlreadyRegisteredFault(inner) => {
                Error::DbProxyTargetAlreadyRegisteredFault(inner)
            }
            crate::operation::register_db_proxy_targets::RegisterDBProxyTargetsError::DbProxyTargetGroupNotFoundFault(inner) => {
                Error::DbProxyTargetGroupNotFoundFault(inner)
            }
            crate::operation::register_db_proxy_targets::RegisterDBProxyTargetsError::InsufficientAvailableIPsInSubnetFault(inner) => {
                Error::InsufficientAvailableIPsInSubnetFault(inner)
            }
            crate::operation::register_db_proxy_targets::RegisterDBProxyTargetsError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::register_db_proxy_targets::RegisterDBProxyTargetsError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::register_db_proxy_targets::RegisterDBProxyTargetsError::InvalidDbProxyStateFault(inner) => {
                Error::InvalidDbProxyStateFault(inner)
            }
            crate::operation::register_db_proxy_targets::RegisterDBProxyTargetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_from_global_cluster::RemoveFromGlobalClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_from_global_cluster::RemoveFromGlobalClusterError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::remove_from_global_cluster::RemoveFromGlobalClusterError> for Error {
    fn from(err: crate::operation::remove_from_global_cluster::RemoveFromGlobalClusterError) -> Self {
        match err {
            crate::operation::remove_from_global_cluster::RemoveFromGlobalClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::operation::remove_from_global_cluster::RemoveFromGlobalClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::operation::remove_from_global_cluster::RemoveFromGlobalClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::operation::remove_from_global_cluster::RemoveFromGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_role_from_db_cluster::RemoveRoleFromDBClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_role_from_db_cluster::RemoveRoleFromDBClusterError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::remove_role_from_db_cluster::RemoveRoleFromDBClusterError> for Error {
    fn from(err: crate::operation::remove_role_from_db_cluster::RemoveRoleFromDBClusterError) -> Self {
        match err {
            crate::operation::remove_role_from_db_cluster::RemoveRoleFromDBClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::operation::remove_role_from_db_cluster::RemoveRoleFromDBClusterError::DbClusterRoleNotFoundFault(inner) => {
                Error::DbClusterRoleNotFoundFault(inner)
            }
            crate::operation::remove_role_from_db_cluster::RemoveRoleFromDBClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::remove_role_from_db_cluster::RemoveRoleFromDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_role_from_db_instance::RemoveRoleFromDBInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_role_from_db_instance::RemoveRoleFromDBInstanceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::remove_role_from_db_instance::RemoveRoleFromDBInstanceError> for Error {
    fn from(err: crate::operation::remove_role_from_db_instance::RemoveRoleFromDBInstanceError) -> Self {
        match err {
            crate::operation::remove_role_from_db_instance::RemoveRoleFromDBInstanceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::remove_role_from_db_instance::RemoveRoleFromDBInstanceError::DbInstanceRoleNotFoundFault(inner) => {
                Error::DbInstanceRoleNotFoundFault(inner)
            }
            crate::operation::remove_role_from_db_instance::RemoveRoleFromDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::remove_role_from_db_instance::RemoveRoleFromDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::remove_source_identifier_from_subscription::RemoveSourceIdentifierFromSubscriptionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::remove_source_identifier_from_subscription::RemoveSourceIdentifierFromSubscriptionError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::remove_source_identifier_from_subscription::RemoveSourceIdentifierFromSubscriptionError> for Error {
    fn from(err: crate::operation::remove_source_identifier_from_subscription::RemoveSourceIdentifierFromSubscriptionError) -> Self {
        match err {
            crate::operation::remove_source_identifier_from_subscription::RemoveSourceIdentifierFromSubscriptionError::SourceNotFoundFault(inner) => {
                Error::SourceNotFoundFault(inner)
            }
            crate::operation::remove_source_identifier_from_subscription::RemoveSourceIdentifierFromSubscriptionError::SubscriptionNotFoundFault(
                inner,
            ) => Error::SubscriptionNotFoundFault(inner),
            crate::operation::remove_source_identifier_from_subscription::RemoveSourceIdentifierFromSubscriptionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError> for Error {
    fn from(err: crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError) -> Self {
        match err {
            crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::BlueGreenDeploymentNotFoundFault(inner) => {
                Error::BlueGreenDeploymentNotFoundFault(inner)
            }
            crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::DbProxyNotFoundFault(inner) => {
                Error::DbProxyNotFoundFault(inner)
            }
            crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::DbProxyTargetGroupNotFoundFault(inner) => {
                Error::DbProxyTargetGroupNotFoundFault(inner)
            }
            crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::DbSnapshotTenantDatabaseNotFoundFault(inner) => {
                Error::DbSnapshotTenantDatabaseNotFoundFault(inner)
            }
            crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::IntegrationNotFoundFault(inner) => {
                Error::IntegrationNotFoundFault(inner)
            }
            crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::TenantDatabaseNotFoundFault(inner) => {
                Error::TenantDatabaseNotFoundFault(inner)
            }
            crate::operation::remove_tags_from_resource::RemoveTagsFromResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_db_cluster_parameter_group::ResetDBClusterParameterGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::reset_db_cluster_parameter_group::ResetDBClusterParameterGroupError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::reset_db_cluster_parameter_group::ResetDBClusterParameterGroupError> for Error {
    fn from(err: crate::operation::reset_db_cluster_parameter_group::ResetDBClusterParameterGroupError) -> Self {
        match err {
            crate::operation::reset_db_cluster_parameter_group::ResetDBClusterParameterGroupError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::reset_db_cluster_parameter_group::ResetDBClusterParameterGroupError::InvalidDbParameterGroupStateFault(inner) => {
                Error::InvalidDbParameterGroupStateFault(inner)
            }
            crate::operation::reset_db_cluster_parameter_group::ResetDBClusterParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_db_parameter_group::ResetDBParameterGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::reset_db_parameter_group::ResetDBParameterGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::reset_db_parameter_group::ResetDBParameterGroupError> for Error {
    fn from(err: crate::operation::reset_db_parameter_group::ResetDBParameterGroupError) -> Self {
        match err {
            crate::operation::reset_db_parameter_group::ResetDBParameterGroupError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::reset_db_parameter_group::ResetDBParameterGroupError::InvalidDbParameterGroupStateFault(inner) => {
                Error::InvalidDbParameterGroupStateFault(inner)
            }
            crate::operation::reset_db_parameter_group::ResetDBParameterGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error> for Error {
    fn from(err: crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error) -> Self {
        match err {
            crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error::DbClusterAlreadyExistsFault(inner) => {
                Error::DbClusterAlreadyExistsFault(inner)
            }
            crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error::DbClusterParameterGroupNotFoundFault(inner) => {
                Error::DbClusterParameterGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error::DbClusterQuotaExceededFault(inner) => {
                Error::DbClusterQuotaExceededFault(inner)
            }
            crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error::DomainNotFoundFault(inner) => {
                Error::DomainNotFoundFault(inner)
            }
            crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error::InsufficientStorageClusterCapacityFault(inner) => {
                Error::InsufficientStorageClusterCapacityFault(inner)
            }
            crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error::InvalidDbSubnetGroupStateFault(inner) => {
                Error::InvalidDbSubnetGroupStateFault(inner)
            }
            crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error::InvalidS3BucketFault(inner) => {
                Error::InvalidS3BucketFault(inner)
            }
            crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error::StorageTypeNotSupportedFault(inner) => {
                Error::StorageTypeNotSupportedFault(inner)
            }
            crate::operation::restore_db_cluster_from_s3::RestoreDBClusterFromS3Error::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError> for Error {
    fn from(err: crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError) -> Self {
        match err {
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::DbClusterAlreadyExistsFault(inner) => {
                Error::DbClusterAlreadyExistsFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::DbClusterParameterGroupNotFoundFault(inner) => {
                Error::DbClusterParameterGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::DbClusterQuotaExceededFault(inner) => {
                Error::DbClusterQuotaExceededFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::DbClusterSnapshotNotFoundFault(inner) => {
                Error::DbClusterSnapshotNotFoundFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::DomainNotFoundFault(inner) => {
                Error::DomainNotFoundFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::InsufficientDbClusterCapacityFault(inner) => {
                Error::InsufficientDbClusterCapacityFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::InsufficientStorageClusterCapacityFault(inner) => {
                Error::InsufficientStorageClusterCapacityFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::InvalidDbClusterSnapshotStateFault(inner) => {
                Error::InvalidDbClusterSnapshotStateFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::InvalidDbSnapshotStateFault(inner) => {
                Error::InvalidDbSnapshotStateFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::InvalidRestoreFault(inner) => {
                Error::InvalidRestoreFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::OptionGroupNotFoundFault(inner) => {
                Error::OptionGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError> for Error {
    fn from(err: crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError) -> Self {
        match err {
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::DbClusterAlreadyExistsFault(inner) => {
                Error::DbClusterAlreadyExistsFault(inner)
            }
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::DbClusterAutomatedBackupNotFoundFault(
                inner,
            ) => Error::DbClusterAutomatedBackupNotFoundFault(inner),
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::DbClusterParameterGroupNotFoundFault(
                inner,
            ) => Error::DbClusterParameterGroupNotFoundFault(inner),
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::DbClusterQuotaExceededFault(inner) => {
                Error::DbClusterQuotaExceededFault(inner)
            }
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::DbClusterSnapshotNotFoundFault(inner) => {
                Error::DbClusterSnapshotNotFoundFault(inner)
            }
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::DomainNotFoundFault(inner) => {
                Error::DomainNotFoundFault(inner)
            }
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::InsufficientDbClusterCapacityFault(inner) => {
                Error::InsufficientDbClusterCapacityFault(inner)
            }
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::InsufficientStorageClusterCapacityFault(
                inner,
            ) => Error::InsufficientStorageClusterCapacityFault(inner),
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::InvalidDbClusterSnapshotStateFault(inner) => {
                Error::InvalidDbClusterSnapshotStateFault(inner)
            }
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::InvalidDbSnapshotStateFault(inner) => {
                Error::InvalidDbSnapshotStateFault(inner)
            }
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::InvalidRestoreFault(inner) => {
                Error::InvalidRestoreFault(inner)
            }
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::OptionGroupNotFoundFault(inner) => {
                Error::OptionGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDBClusterToPointInTimeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError> for Error {
    fn from(err: crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError) -> Self {
        match err {
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::AuthorizationNotFoundFault(inner) => {
                Error::AuthorizationNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::BackupPolicyNotFoundFault(inner) => {
                Error::BackupPolicyNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::DbClusterSnapshotNotFoundFault(inner) => {
                Error::DbClusterSnapshotNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::DbInstanceAlreadyExistsFault(inner) => {
                Error::DbInstanceAlreadyExistsFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::DbSnapshotNotFoundFault(inner) => {
                Error::DbSnapshotNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::DbSubnetGroupDoesNotCoverEnoughAZs(
                inner,
            ) => Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner),
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::DomainNotFoundFault(inner) => {
                Error::DomainNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::InstanceQuotaExceededFault(inner) => {
                Error::InstanceQuotaExceededFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::InsufficientDbInstanceCapacityFault(
                inner,
            ) => Error::InsufficientDbInstanceCapacityFault(inner),
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::InvalidDbSnapshotStateFault(inner) => {
                Error::InvalidDbSnapshotStateFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::InvalidRestoreFault(inner) => {
                Error::InvalidRestoreFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::NetworkTypeNotSupported(inner) => {
                Error::NetworkTypeNotSupported(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::OptionGroupNotFoundFault(inner) => {
                Error::OptionGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::ProvisionedIopsNotAvailableInAzFault(
                inner,
            ) => Error::ProvisionedIopsNotAvailableInAzFault(inner),
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::StorageTypeNotSupportedFault(inner) => {
                Error::StorageTypeNotSupportedFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::TenantDatabaseQuotaExceededFault(inner) => {
                Error::TenantDatabaseQuotaExceededFault(inner)
            }
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error> for Error {
    fn from(err: crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error) -> Self {
        match err {
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::AuthorizationNotFoundFault(inner) => {
                Error::AuthorizationNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::BackupPolicyNotFoundFault(inner) => {
                Error::BackupPolicyNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::DbInstanceAlreadyExistsFault(inner) => {
                Error::DbInstanceAlreadyExistsFault(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::InstanceQuotaExceededFault(inner) => {
                Error::InstanceQuotaExceededFault(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::InsufficientDbInstanceCapacityFault(inner) => {
                Error::InsufficientDbInstanceCapacityFault(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::InvalidS3BucketFault(inner) => {
                Error::InvalidS3BucketFault(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::NetworkTypeNotSupported(inner) => {
                Error::NetworkTypeNotSupported(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::OptionGroupNotFoundFault(inner) => {
                Error::OptionGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::ProvisionedIopsNotAvailableInAzFault(inner) => {
                Error::ProvisionedIopsNotAvailableInAzFault(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::StorageTypeNotSupportedFault(inner) => {
                Error::StorageTypeNotSupportedFault(inner)
            }
            crate::operation::restore_db_instance_from_s3::RestoreDBInstanceFromS3Error::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError> for Error {
    fn from(err: crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError) -> Self {
        match err {
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::AuthorizationNotFoundFault(inner) => {
                Error::AuthorizationNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::BackupPolicyNotFoundFault(inner) => {
                Error::BackupPolicyNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::DbInstanceAlreadyExistsFault(inner) => {
                Error::DbInstanceAlreadyExistsFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::DbInstanceAutomatedBackupNotFoundFault(
                inner,
            ) => Error::DbInstanceAutomatedBackupNotFoundFault(inner),
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::DbParameterGroupNotFoundFault(inner) => {
                Error::DbParameterGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::DbSubnetGroupDoesNotCoverEnoughAZs(
                inner,
            ) => Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner),
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::DbSubnetGroupNotFoundFault(inner) => {
                Error::DbSubnetGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::DomainNotFoundFault(inner) => {
                Error::DomainNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::InstanceQuotaExceededFault(inner) => {
                Error::InstanceQuotaExceededFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::InsufficientDbInstanceCapacityFault(
                inner,
            ) => Error::InsufficientDbInstanceCapacityFault(inner),
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::InvalidRestoreFault(inner) => {
                Error::InvalidRestoreFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::InvalidSubnet(inner) => {
                Error::InvalidSubnet(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::NetworkTypeNotSupported(inner) => {
                Error::NetworkTypeNotSupported(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::OptionGroupNotFoundFault(inner) => {
                Error::OptionGroupNotFoundFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::PointInTimeRestoreNotEnabledFault(inner) => {
                Error::PointInTimeRestoreNotEnabledFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::ProvisionedIopsNotAvailableInAzFault(
                inner,
            ) => Error::ProvisionedIopsNotAvailableInAzFault(inner),
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::StorageQuotaExceededFault(inner) => {
                Error::StorageQuotaExceededFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::StorageTypeNotSupportedFault(inner) => {
                Error::StorageTypeNotSupportedFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::TenantDatabaseQuotaExceededFault(inner) => {
                Error::TenantDatabaseQuotaExceededFault(inner)
            }
            crate::operation::restore_db_instance_to_point_in_time::RestoreDBInstanceToPointInTimeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::revoke_db_security_group_ingress::RevokeDBSecurityGroupIngressError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::revoke_db_security_group_ingress::RevokeDBSecurityGroupIngressError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::revoke_db_security_group_ingress::RevokeDBSecurityGroupIngressError> for Error {
    fn from(err: crate::operation::revoke_db_security_group_ingress::RevokeDBSecurityGroupIngressError) -> Self {
        match err {
            crate::operation::revoke_db_security_group_ingress::RevokeDBSecurityGroupIngressError::AuthorizationNotFoundFault(inner) => {
                Error::AuthorizationNotFoundFault(inner)
            }
            crate::operation::revoke_db_security_group_ingress::RevokeDBSecurityGroupIngressError::DbSecurityGroupNotFoundFault(inner) => {
                Error::DbSecurityGroupNotFoundFault(inner)
            }
            crate::operation::revoke_db_security_group_ingress::RevokeDBSecurityGroupIngressError::InvalidDbSecurityGroupStateFault(inner) => {
                Error::InvalidDbSecurityGroupStateFault(inner)
            }
            crate::operation::revoke_db_security_group_ingress::RevokeDBSecurityGroupIngressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_activity_stream::StartActivityStreamError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_activity_stream::StartActivityStreamError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_activity_stream::StartActivityStreamError> for Error {
    fn from(err: crate::operation::start_activity_stream::StartActivityStreamError) -> Self {
        match err {
            crate::operation::start_activity_stream::StartActivityStreamError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::start_activity_stream::StartActivityStreamError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::start_activity_stream::StartActivityStreamError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::start_activity_stream::StartActivityStreamError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::start_activity_stream::StartActivityStreamError::KmsKeyNotAccessibleFault(inner) => {
                Error::KmsKeyNotAccessibleFault(inner)
            }
            crate::operation::start_activity_stream::StartActivityStreamError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::start_activity_stream::StartActivityStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_db_cluster::StartDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_db_cluster::StartDBClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_db_cluster::StartDBClusterError> for Error {
    fn from(err: crate::operation::start_db_cluster::StartDBClusterError) -> Self {
        match err {
            crate::operation::start_db_cluster::StartDBClusterError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::start_db_cluster::StartDBClusterError::InvalidDbClusterStateFault(inner) => Error::InvalidDbClusterStateFault(inner),
            crate::operation::start_db_cluster::StartDBClusterError::InvalidDbInstanceStateFault(inner) => Error::InvalidDbInstanceStateFault(inner),
            crate::operation::start_db_cluster::StartDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_db_instance::StartDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_db_instance::StartDBInstanceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_db_instance::StartDBInstanceError> for Error {
    fn from(err: crate::operation::start_db_instance::StartDBInstanceError) -> Self {
        match err {
            crate::operation::start_db_instance::StartDBInstanceError::AuthorizationNotFoundFault(inner) => Error::AuthorizationNotFoundFault(inner),
            crate::operation::start_db_instance::StartDBInstanceError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::start_db_instance::StartDBInstanceError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::operation::start_db_instance::StartDBInstanceError::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => {
                Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner)
            }
            crate::operation::start_db_instance::StartDBInstanceError::DbSubnetGroupNotFoundFault(inner) => Error::DbSubnetGroupNotFoundFault(inner),
            crate::operation::start_db_instance::StartDBInstanceError::InsufficientDbInstanceCapacityFault(inner) => {
                Error::InsufficientDbInstanceCapacityFault(inner)
            }
            crate::operation::start_db_instance::StartDBInstanceError::InvalidDbClusterStateFault(inner) => Error::InvalidDbClusterStateFault(inner),
            crate::operation::start_db_instance::StartDBInstanceError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::start_db_instance::StartDBInstanceError::InvalidSubnet(inner) => Error::InvalidSubnet(inner),
            crate::operation::start_db_instance::StartDBInstanceError::InvalidVpcNetworkStateFault(inner) => {
                Error::InvalidVpcNetworkStateFault(inner)
            }
            crate::operation::start_db_instance::StartDBInstanceError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::operation::start_db_instance::StartDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_db_instance_automated_backups_replication::StartDBInstanceAutomatedBackupsReplicationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::start_db_instance_automated_backups_replication::StartDBInstanceAutomatedBackupsReplicationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_db_instance_automated_backups_replication::StartDBInstanceAutomatedBackupsReplicationError> for Error {
    fn from(err: crate::operation::start_db_instance_automated_backups_replication::StartDBInstanceAutomatedBackupsReplicationError) -> Self {
        match err {
            crate::operation::start_db_instance_automated_backups_replication::StartDBInstanceAutomatedBackupsReplicationError::DbInstanceAutomatedBackupQuotaExceededFault(inner) => Error::DbInstanceAutomatedBackupQuotaExceededFault(inner),
            crate::operation::start_db_instance_automated_backups_replication::StartDBInstanceAutomatedBackupsReplicationError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::operation::start_db_instance_automated_backups_replication::StartDBInstanceAutomatedBackupsReplicationError::InvalidDbInstanceStateFault(inner) => Error::InvalidDbInstanceStateFault(inner),
            crate::operation::start_db_instance_automated_backups_replication::StartDBInstanceAutomatedBackupsReplicationError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::operation::start_db_instance_automated_backups_replication::StartDBInstanceAutomatedBackupsReplicationError::StorageTypeNotSupportedFault(inner) => Error::StorageTypeNotSupportedFault(inner),
            crate::operation::start_db_instance_automated_backups_replication::StartDBInstanceAutomatedBackupsReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_export_task::StartExportTaskError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_export_task::StartExportTaskError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_export_task::StartExportTaskError> for Error {
    fn from(err: crate::operation::start_export_task::StartExportTaskError) -> Self {
        match err {
            crate::operation::start_export_task::StartExportTaskError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::start_export_task::StartExportTaskError::DbClusterSnapshotNotFoundFault(inner) => {
                Error::DbClusterSnapshotNotFoundFault(inner)
            }
            crate::operation::start_export_task::StartExportTaskError::DbSnapshotNotFoundFault(inner) => Error::DbSnapshotNotFoundFault(inner),
            crate::operation::start_export_task::StartExportTaskError::ExportTaskAlreadyExistsFault(inner) => {
                Error::ExportTaskAlreadyExistsFault(inner)
            }
            crate::operation::start_export_task::StartExportTaskError::IamRoleMissingPermissionsFault(inner) => {
                Error::IamRoleMissingPermissionsFault(inner)
            }
            crate::operation::start_export_task::StartExportTaskError::IamRoleNotFoundFault(inner) => Error::IamRoleNotFoundFault(inner),
            crate::operation::start_export_task::StartExportTaskError::InvalidExportOnlyFault(inner) => Error::InvalidExportOnlyFault(inner),
            crate::operation::start_export_task::StartExportTaskError::InvalidExportSourceStateFault(inner) => {
                Error::InvalidExportSourceStateFault(inner)
            }
            crate::operation::start_export_task::StartExportTaskError::InvalidS3BucketFault(inner) => Error::InvalidS3BucketFault(inner),
            crate::operation::start_export_task::StartExportTaskError::KmsKeyNotAccessibleFault(inner) => Error::KmsKeyNotAccessibleFault(inner),
            crate::operation::start_export_task::StartExportTaskError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_activity_stream::StopActivityStreamError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_activity_stream::StopActivityStreamError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_activity_stream::StopActivityStreamError> for Error {
    fn from(err: crate::operation::stop_activity_stream::StopActivityStreamError) -> Self {
        match err {
            crate::operation::stop_activity_stream::StopActivityStreamError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::stop_activity_stream::StopActivityStreamError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::operation::stop_activity_stream::StopActivityStreamError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::stop_activity_stream::StopActivityStreamError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::stop_activity_stream::StopActivityStreamError::ResourceNotFoundFault(inner) => Error::ResourceNotFoundFault(inner),
            crate::operation::stop_activity_stream::StopActivityStreamError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_db_cluster::StopDBClusterError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_db_cluster::StopDBClusterError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_db_cluster::StopDBClusterError> for Error {
    fn from(err: crate::operation::stop_db_cluster::StopDBClusterError) -> Self {
        match err {
            crate::operation::stop_db_cluster::StopDBClusterError::DbClusterNotFoundFault(inner) => Error::DbClusterNotFoundFault(inner),
            crate::operation::stop_db_cluster::StopDBClusterError::InvalidDbClusterStateFault(inner) => Error::InvalidDbClusterStateFault(inner),
            crate::operation::stop_db_cluster::StopDBClusterError::InvalidDbInstanceStateFault(inner) => Error::InvalidDbInstanceStateFault(inner),
            crate::operation::stop_db_cluster::StopDBClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_db_instance::StopDBInstanceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_db_instance::StopDBInstanceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_db_instance::StopDBInstanceError> for Error {
    fn from(err: crate::operation::stop_db_instance::StopDBInstanceError) -> Self {
        match err {
            crate::operation::stop_db_instance::StopDBInstanceError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::operation::stop_db_instance::StopDBInstanceError::DbSnapshotAlreadyExistsFault(inner) => {
                Error::DbSnapshotAlreadyExistsFault(inner)
            }
            crate::operation::stop_db_instance::StopDBInstanceError::InvalidDbClusterStateFault(inner) => Error::InvalidDbClusterStateFault(inner),
            crate::operation::stop_db_instance::StopDBInstanceError::InvalidDbInstanceStateFault(inner) => Error::InvalidDbInstanceStateFault(inner),
            crate::operation::stop_db_instance::StopDBInstanceError::SnapshotQuotaExceededFault(inner) => Error::SnapshotQuotaExceededFault(inner),
            crate::operation::stop_db_instance::StopDBInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::stop_db_instance_automated_backups_replication::StopDBInstanceAutomatedBackupsReplicationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::stop_db_instance_automated_backups_replication::StopDBInstanceAutomatedBackupsReplicationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::stop_db_instance_automated_backups_replication::StopDBInstanceAutomatedBackupsReplicationError> for Error {
    fn from(err: crate::operation::stop_db_instance_automated_backups_replication::StopDBInstanceAutomatedBackupsReplicationError) -> Self {
        match err {
            crate::operation::stop_db_instance_automated_backups_replication::StopDBInstanceAutomatedBackupsReplicationError::DbInstanceNotFoundFault(inner) => Error::DbInstanceNotFoundFault(inner),
            crate::operation::stop_db_instance_automated_backups_replication::StopDBInstanceAutomatedBackupsReplicationError::InvalidDbInstanceStateFault(inner) => Error::InvalidDbInstanceStateFault(inner),
            crate::operation::stop_db_instance_automated_backups_replication::StopDBInstanceAutomatedBackupsReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::switchover_blue_green_deployment::SwitchoverBlueGreenDeploymentError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::switchover_blue_green_deployment::SwitchoverBlueGreenDeploymentError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::switchover_blue_green_deployment::SwitchoverBlueGreenDeploymentError> for Error {
    fn from(err: crate::operation::switchover_blue_green_deployment::SwitchoverBlueGreenDeploymentError) -> Self {
        match err {
            crate::operation::switchover_blue_green_deployment::SwitchoverBlueGreenDeploymentError::BlueGreenDeploymentNotFoundFault(inner) => {
                Error::BlueGreenDeploymentNotFoundFault(inner)
            }
            crate::operation::switchover_blue_green_deployment::SwitchoverBlueGreenDeploymentError::InvalidBlueGreenDeploymentStateFault(inner) => {
                Error::InvalidBlueGreenDeploymentStateFault(inner)
            }
            crate::operation::switchover_blue_green_deployment::SwitchoverBlueGreenDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::switchover_global_cluster::SwitchoverGlobalClusterError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::switchover_global_cluster::SwitchoverGlobalClusterError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::switchover_global_cluster::SwitchoverGlobalClusterError> for Error {
    fn from(err: crate::operation::switchover_global_cluster::SwitchoverGlobalClusterError) -> Self {
        match err {
            crate::operation::switchover_global_cluster::SwitchoverGlobalClusterError::DbClusterNotFoundFault(inner) => {
                Error::DbClusterNotFoundFault(inner)
            }
            crate::operation::switchover_global_cluster::SwitchoverGlobalClusterError::GlobalClusterNotFoundFault(inner) => {
                Error::GlobalClusterNotFoundFault(inner)
            }
            crate::operation::switchover_global_cluster::SwitchoverGlobalClusterError::InvalidDbClusterStateFault(inner) => {
                Error::InvalidDbClusterStateFault(inner)
            }
            crate::operation::switchover_global_cluster::SwitchoverGlobalClusterError::InvalidGlobalClusterStateFault(inner) => {
                Error::InvalidGlobalClusterStateFault(inner)
            }
            crate::operation::switchover_global_cluster::SwitchoverGlobalClusterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::switchover_read_replica::SwitchoverReadReplicaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::switchover_read_replica::SwitchoverReadReplicaError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::switchover_read_replica::SwitchoverReadReplicaError> for Error {
    fn from(err: crate::operation::switchover_read_replica::SwitchoverReadReplicaError) -> Self {
        match err {
            crate::operation::switchover_read_replica::SwitchoverReadReplicaError::DbInstanceNotFoundFault(inner) => {
                Error::DbInstanceNotFoundFault(inner)
            }
            crate::operation::switchover_read_replica::SwitchoverReadReplicaError::InvalidDbInstanceStateFault(inner) => {
                Error::InvalidDbInstanceStateFault(inner)
            }
            crate::operation::switchover_read_replica::SwitchoverReadReplicaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AuthorizationAlreadyExistsFault(inner) => inner.source(),
            Error::AuthorizationNotFoundFault(inner) => inner.source(),
            Error::AuthorizationQuotaExceededFault(inner) => inner.source(),
            Error::BackupPolicyNotFoundFault(inner) => inner.source(),
            Error::BlueGreenDeploymentAlreadyExistsFault(inner) => inner.source(),
            Error::BlueGreenDeploymentNotFoundFault(inner) => inner.source(),
            Error::CertificateNotFoundFault(inner) => inner.source(),
            Error::CreateCustomDbEngineVersionFault(inner) => inner.source(),
            Error::CustomAvailabilityZoneNotFoundFault(inner) => inner.source(),
            Error::CustomDbEngineVersionAlreadyExistsFault(inner) => inner.source(),
            Error::CustomDbEngineVersionNotFoundFault(inner) => inner.source(),
            Error::CustomDbEngineVersionQuotaExceededFault(inner) => inner.source(),
            Error::DbClusterAlreadyExistsFault(inner) => inner.source(),
            Error::DbClusterAutomatedBackupNotFoundFault(inner) => inner.source(),
            Error::DbClusterAutomatedBackupQuotaExceededFault(inner) => inner.source(),
            Error::DbClusterBacktrackNotFoundFault(inner) => inner.source(),
            Error::DbClusterEndpointAlreadyExistsFault(inner) => inner.source(),
            Error::DbClusterEndpointNotFoundFault(inner) => inner.source(),
            Error::DbClusterEndpointQuotaExceededFault(inner) => inner.source(),
            Error::DbClusterNotFoundFault(inner) => inner.source(),
            Error::DbClusterParameterGroupNotFoundFault(inner) => inner.source(),
            Error::DbClusterQuotaExceededFault(inner) => inner.source(),
            Error::DbClusterRoleAlreadyExistsFault(inner) => inner.source(),
            Error::DbClusterRoleNotFoundFault(inner) => inner.source(),
            Error::DbClusterRoleQuotaExceededFault(inner) => inner.source(),
            Error::DbClusterSnapshotAlreadyExistsFault(inner) => inner.source(),
            Error::DbClusterSnapshotNotFoundFault(inner) => inner.source(),
            Error::DbInstanceAlreadyExistsFault(inner) => inner.source(),
            Error::DbInstanceAutomatedBackupNotFoundFault(inner) => inner.source(),
            Error::DbInstanceAutomatedBackupQuotaExceededFault(inner) => inner.source(),
            Error::DbInstanceNotFoundFault(inner) => inner.source(),
            Error::DbInstanceRoleAlreadyExistsFault(inner) => inner.source(),
            Error::DbInstanceRoleNotFoundFault(inner) => inner.source(),
            Error::DbInstanceRoleQuotaExceededFault(inner) => inner.source(),
            Error::DbLogFileNotFoundFault(inner) => inner.source(),
            Error::DbParameterGroupAlreadyExistsFault(inner) => inner.source(),
            Error::DbParameterGroupNotFoundFault(inner) => inner.source(),
            Error::DbParameterGroupQuotaExceededFault(inner) => inner.source(),
            Error::DbProxyAlreadyExistsFault(inner) => inner.source(),
            Error::DbProxyEndpointAlreadyExistsFault(inner) => inner.source(),
            Error::DbProxyEndpointNotFoundFault(inner) => inner.source(),
            Error::DbProxyEndpointQuotaExceededFault(inner) => inner.source(),
            Error::DbProxyNotFoundFault(inner) => inner.source(),
            Error::DbProxyQuotaExceededFault(inner) => inner.source(),
            Error::DbProxyTargetAlreadyRegisteredFault(inner) => inner.source(),
            Error::DbProxyTargetGroupNotFoundFault(inner) => inner.source(),
            Error::DbProxyTargetNotFoundFault(inner) => inner.source(),
            Error::DbSecurityGroupAlreadyExistsFault(inner) => inner.source(),
            Error::DbSecurityGroupNotFoundFault(inner) => inner.source(),
            Error::DbSecurityGroupNotSupportedFault(inner) => inner.source(),
            Error::DbSecurityGroupQuotaExceededFault(inner) => inner.source(),
            Error::DbSnapshotAlreadyExistsFault(inner) => inner.source(),
            Error::DbSnapshotNotFoundFault(inner) => inner.source(),
            Error::DbSnapshotTenantDatabaseNotFoundFault(inner) => inner.source(),
            Error::DbSubnetGroupAlreadyExistsFault(inner) => inner.source(),
            Error::DbSubnetGroupDoesNotCoverEnoughAZs(inner) => inner.source(),
            Error::DbSubnetGroupNotAllowedFault(inner) => inner.source(),
            Error::DbSubnetGroupNotFoundFault(inner) => inner.source(),
            Error::DbSubnetGroupQuotaExceededFault(inner) => inner.source(),
            Error::DbSubnetQuotaExceededFault(inner) => inner.source(),
            Error::DbUpgradeDependencyFailureFault(inner) => inner.source(),
            Error::DomainNotFoundFault(inner) => inner.source(),
            Error::Ec2ImagePropertiesNotSupportedFault(inner) => inner.source(),
            Error::EventSubscriptionQuotaExceededFault(inner) => inner.source(),
            Error::ExportTaskAlreadyExistsFault(inner) => inner.source(),
            Error::ExportTaskNotFoundFault(inner) => inner.source(),
            Error::GlobalClusterAlreadyExistsFault(inner) => inner.source(),
            Error::GlobalClusterNotFoundFault(inner) => inner.source(),
            Error::GlobalClusterQuotaExceededFault(inner) => inner.source(),
            Error::IamRoleMissingPermissionsFault(inner) => inner.source(),
            Error::IamRoleNotFoundFault(inner) => inner.source(),
            Error::InstanceQuotaExceededFault(inner) => inner.source(),
            Error::InsufficientAvailableIPsInSubnetFault(inner) => inner.source(),
            Error::InsufficientDbClusterCapacityFault(inner) => inner.source(),
            Error::InsufficientDbInstanceCapacityFault(inner) => inner.source(),
            Error::InsufficientStorageClusterCapacityFault(inner) => inner.source(),
            Error::IntegrationAlreadyExistsFault(inner) => inner.source(),
            Error::IntegrationConflictOperationFault(inner) => inner.source(),
            Error::IntegrationNotFoundFault(inner) => inner.source(),
            Error::IntegrationQuotaExceededFault(inner) => inner.source(),
            Error::InvalidBlueGreenDeploymentStateFault(inner) => inner.source(),
            Error::InvalidCustomDbEngineVersionStateFault(inner) => inner.source(),
            Error::InvalidDbClusterAutomatedBackupStateFault(inner) => inner.source(),
            Error::InvalidDbClusterCapacityFault(inner) => inner.source(),
            Error::InvalidDbClusterEndpointStateFault(inner) => inner.source(),
            Error::InvalidDbClusterSnapshotStateFault(inner) => inner.source(),
            Error::InvalidDbClusterStateFault(inner) => inner.source(),
            Error::InvalidDbInstanceAutomatedBackupStateFault(inner) => inner.source(),
            Error::InvalidDbInstanceStateFault(inner) => inner.source(),
            Error::InvalidDbParameterGroupStateFault(inner) => inner.source(),
            Error::InvalidDbProxyEndpointStateFault(inner) => inner.source(),
            Error::InvalidDbProxyStateFault(inner) => inner.source(),
            Error::InvalidDbSecurityGroupStateFault(inner) => inner.source(),
            Error::InvalidDbSnapshotStateFault(inner) => inner.source(),
            Error::InvalidDbSubnetGroupFault(inner) => inner.source(),
            Error::InvalidDbSubnetGroupStateFault(inner) => inner.source(),
            Error::InvalidDbSubnetStateFault(inner) => inner.source(),
            Error::InvalidEventSubscriptionStateFault(inner) => inner.source(),
            Error::InvalidExportOnlyFault(inner) => inner.source(),
            Error::InvalidExportSourceStateFault(inner) => inner.source(),
            Error::InvalidExportTaskStateFault(inner) => inner.source(),
            Error::InvalidGlobalClusterStateFault(inner) => inner.source(),
            Error::InvalidIntegrationStateFault(inner) => inner.source(),
            Error::InvalidOptionGroupStateFault(inner) => inner.source(),
            Error::InvalidRestoreFault(inner) => inner.source(),
            Error::InvalidS3BucketFault(inner) => inner.source(),
            Error::InvalidSubnet(inner) => inner.source(),
            Error::InvalidVpcNetworkStateFault(inner) => inner.source(),
            Error::KmsKeyNotAccessibleFault(inner) => inner.source(),
            Error::NetworkTypeNotSupported(inner) => inner.source(),
            Error::OptionGroupAlreadyExistsFault(inner) => inner.source(),
            Error::OptionGroupNotFoundFault(inner) => inner.source(),
            Error::OptionGroupQuotaExceededFault(inner) => inner.source(),
            Error::PointInTimeRestoreNotEnabledFault(inner) => inner.source(),
            Error::ProvisionedIopsNotAvailableInAzFault(inner) => inner.source(),
            Error::ReservedDbInstanceAlreadyExistsFault(inner) => inner.source(),
            Error::ReservedDbInstanceNotFoundFault(inner) => inner.source(),
            Error::ReservedDbInstanceQuotaExceededFault(inner) => inner.source(),
            Error::ReservedDbInstancesOfferingNotFoundFault(inner) => inner.source(),
            Error::ResourceNotFoundFault(inner) => inner.source(),
            Error::SnsInvalidTopicFault(inner) => inner.source(),
            Error::SnsNoAuthorizationFault(inner) => inner.source(),
            Error::SnsTopicArnNotFoundFault(inner) => inner.source(),
            Error::SharedSnapshotQuotaExceededFault(inner) => inner.source(),
            Error::SnapshotQuotaExceededFault(inner) => inner.source(),
            Error::SourceClusterNotSupportedFault(inner) => inner.source(),
            Error::SourceDatabaseNotSupportedFault(inner) => inner.source(),
            Error::SourceNotFoundFault(inner) => inner.source(),
            Error::StorageQuotaExceededFault(inner) => inner.source(),
            Error::StorageTypeNotAvailableFault(inner) => inner.source(),
            Error::StorageTypeNotSupportedFault(inner) => inner.source(),
            Error::SubnetAlreadyInUse(inner) => inner.source(),
            Error::SubscriptionAlreadyExistFault(inner) => inner.source(),
            Error::SubscriptionCategoryNotFoundFault(inner) => inner.source(),
            Error::SubscriptionNotFoundFault(inner) => inner.source(),
            Error::TenantDatabaseAlreadyExistsFault(inner) => inner.source(),
            Error::TenantDatabaseNotFoundFault(inner) => inner.source(),
            Error::TenantDatabaseQuotaExceededFault(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AuthorizationAlreadyExistsFault(e) => e.request_id(),
            Self::AuthorizationNotFoundFault(e) => e.request_id(),
            Self::AuthorizationQuotaExceededFault(e) => e.request_id(),
            Self::BackupPolicyNotFoundFault(e) => e.request_id(),
            Self::BlueGreenDeploymentAlreadyExistsFault(e) => e.request_id(),
            Self::BlueGreenDeploymentNotFoundFault(e) => e.request_id(),
            Self::CertificateNotFoundFault(e) => e.request_id(),
            Self::CreateCustomDbEngineVersionFault(e) => e.request_id(),
            Self::CustomAvailabilityZoneNotFoundFault(e) => e.request_id(),
            Self::CustomDbEngineVersionAlreadyExistsFault(e) => e.request_id(),
            Self::CustomDbEngineVersionNotFoundFault(e) => e.request_id(),
            Self::CustomDbEngineVersionQuotaExceededFault(e) => e.request_id(),
            Self::DbClusterAlreadyExistsFault(e) => e.request_id(),
            Self::DbClusterAutomatedBackupNotFoundFault(e) => e.request_id(),
            Self::DbClusterAutomatedBackupQuotaExceededFault(e) => e.request_id(),
            Self::DbClusterBacktrackNotFoundFault(e) => e.request_id(),
            Self::DbClusterEndpointAlreadyExistsFault(e) => e.request_id(),
            Self::DbClusterEndpointNotFoundFault(e) => e.request_id(),
            Self::DbClusterEndpointQuotaExceededFault(e) => e.request_id(),
            Self::DbClusterNotFoundFault(e) => e.request_id(),
            Self::DbClusterParameterGroupNotFoundFault(e) => e.request_id(),
            Self::DbClusterQuotaExceededFault(e) => e.request_id(),
            Self::DbClusterRoleAlreadyExistsFault(e) => e.request_id(),
            Self::DbClusterRoleNotFoundFault(e) => e.request_id(),
            Self::DbClusterRoleQuotaExceededFault(e) => e.request_id(),
            Self::DbClusterSnapshotAlreadyExistsFault(e) => e.request_id(),
            Self::DbClusterSnapshotNotFoundFault(e) => e.request_id(),
            Self::DbInstanceAlreadyExistsFault(e) => e.request_id(),
            Self::DbInstanceAutomatedBackupNotFoundFault(e) => e.request_id(),
            Self::DbInstanceAutomatedBackupQuotaExceededFault(e) => e.request_id(),
            Self::DbInstanceNotFoundFault(e) => e.request_id(),
            Self::DbInstanceRoleAlreadyExistsFault(e) => e.request_id(),
            Self::DbInstanceRoleNotFoundFault(e) => e.request_id(),
            Self::DbInstanceRoleQuotaExceededFault(e) => e.request_id(),
            Self::DbLogFileNotFoundFault(e) => e.request_id(),
            Self::DbParameterGroupAlreadyExistsFault(e) => e.request_id(),
            Self::DbParameterGroupNotFoundFault(e) => e.request_id(),
            Self::DbParameterGroupQuotaExceededFault(e) => e.request_id(),
            Self::DbProxyAlreadyExistsFault(e) => e.request_id(),
            Self::DbProxyEndpointAlreadyExistsFault(e) => e.request_id(),
            Self::DbProxyEndpointNotFoundFault(e) => e.request_id(),
            Self::DbProxyEndpointQuotaExceededFault(e) => e.request_id(),
            Self::DbProxyNotFoundFault(e) => e.request_id(),
            Self::DbProxyQuotaExceededFault(e) => e.request_id(),
            Self::DbProxyTargetAlreadyRegisteredFault(e) => e.request_id(),
            Self::DbProxyTargetGroupNotFoundFault(e) => e.request_id(),
            Self::DbProxyTargetNotFoundFault(e) => e.request_id(),
            Self::DbSecurityGroupAlreadyExistsFault(e) => e.request_id(),
            Self::DbSecurityGroupNotFoundFault(e) => e.request_id(),
            Self::DbSecurityGroupNotSupportedFault(e) => e.request_id(),
            Self::DbSecurityGroupQuotaExceededFault(e) => e.request_id(),
            Self::DbSnapshotAlreadyExistsFault(e) => e.request_id(),
            Self::DbSnapshotNotFoundFault(e) => e.request_id(),
            Self::DbSnapshotTenantDatabaseNotFoundFault(e) => e.request_id(),
            Self::DbSubnetGroupAlreadyExistsFault(e) => e.request_id(),
            Self::DbSubnetGroupDoesNotCoverEnoughAZs(e) => e.request_id(),
            Self::DbSubnetGroupNotAllowedFault(e) => e.request_id(),
            Self::DbSubnetGroupNotFoundFault(e) => e.request_id(),
            Self::DbSubnetGroupQuotaExceededFault(e) => e.request_id(),
            Self::DbSubnetQuotaExceededFault(e) => e.request_id(),
            Self::DbUpgradeDependencyFailureFault(e) => e.request_id(),
            Self::DomainNotFoundFault(e) => e.request_id(),
            Self::Ec2ImagePropertiesNotSupportedFault(e) => e.request_id(),
            Self::EventSubscriptionQuotaExceededFault(e) => e.request_id(),
            Self::ExportTaskAlreadyExistsFault(e) => e.request_id(),
            Self::ExportTaskNotFoundFault(e) => e.request_id(),
            Self::GlobalClusterAlreadyExistsFault(e) => e.request_id(),
            Self::GlobalClusterNotFoundFault(e) => e.request_id(),
            Self::GlobalClusterQuotaExceededFault(e) => e.request_id(),
            Self::IamRoleMissingPermissionsFault(e) => e.request_id(),
            Self::IamRoleNotFoundFault(e) => e.request_id(),
            Self::InstanceQuotaExceededFault(e) => e.request_id(),
            Self::InsufficientAvailableIPsInSubnetFault(e) => e.request_id(),
            Self::InsufficientDbClusterCapacityFault(e) => e.request_id(),
            Self::InsufficientDbInstanceCapacityFault(e) => e.request_id(),
            Self::InsufficientStorageClusterCapacityFault(e) => e.request_id(),
            Self::IntegrationAlreadyExistsFault(e) => e.request_id(),
            Self::IntegrationConflictOperationFault(e) => e.request_id(),
            Self::IntegrationNotFoundFault(e) => e.request_id(),
            Self::IntegrationQuotaExceededFault(e) => e.request_id(),
            Self::InvalidBlueGreenDeploymentStateFault(e) => e.request_id(),
            Self::InvalidCustomDbEngineVersionStateFault(e) => e.request_id(),
            Self::InvalidDbClusterAutomatedBackupStateFault(e) => e.request_id(),
            Self::InvalidDbClusterCapacityFault(e) => e.request_id(),
            Self::InvalidDbClusterEndpointStateFault(e) => e.request_id(),
            Self::InvalidDbClusterSnapshotStateFault(e) => e.request_id(),
            Self::InvalidDbClusterStateFault(e) => e.request_id(),
            Self::InvalidDbInstanceAutomatedBackupStateFault(e) => e.request_id(),
            Self::InvalidDbInstanceStateFault(e) => e.request_id(),
            Self::InvalidDbParameterGroupStateFault(e) => e.request_id(),
            Self::InvalidDbProxyEndpointStateFault(e) => e.request_id(),
            Self::InvalidDbProxyStateFault(e) => e.request_id(),
            Self::InvalidDbSecurityGroupStateFault(e) => e.request_id(),
            Self::InvalidDbSnapshotStateFault(e) => e.request_id(),
            Self::InvalidDbSubnetGroupFault(e) => e.request_id(),
            Self::InvalidDbSubnetGroupStateFault(e) => e.request_id(),
            Self::InvalidDbSubnetStateFault(e) => e.request_id(),
            Self::InvalidEventSubscriptionStateFault(e) => e.request_id(),
            Self::InvalidExportOnlyFault(e) => e.request_id(),
            Self::InvalidExportSourceStateFault(e) => e.request_id(),
            Self::InvalidExportTaskStateFault(e) => e.request_id(),
            Self::InvalidGlobalClusterStateFault(e) => e.request_id(),
            Self::InvalidIntegrationStateFault(e) => e.request_id(),
            Self::InvalidOptionGroupStateFault(e) => e.request_id(),
            Self::InvalidRestoreFault(e) => e.request_id(),
            Self::InvalidS3BucketFault(e) => e.request_id(),
            Self::InvalidSubnet(e) => e.request_id(),
            Self::InvalidVpcNetworkStateFault(e) => e.request_id(),
            Self::KmsKeyNotAccessibleFault(e) => e.request_id(),
            Self::NetworkTypeNotSupported(e) => e.request_id(),
            Self::OptionGroupAlreadyExistsFault(e) => e.request_id(),
            Self::OptionGroupNotFoundFault(e) => e.request_id(),
            Self::OptionGroupQuotaExceededFault(e) => e.request_id(),
            Self::PointInTimeRestoreNotEnabledFault(e) => e.request_id(),
            Self::ProvisionedIopsNotAvailableInAzFault(e) => e.request_id(),
            Self::ReservedDbInstanceAlreadyExistsFault(e) => e.request_id(),
            Self::ReservedDbInstanceNotFoundFault(e) => e.request_id(),
            Self::ReservedDbInstanceQuotaExceededFault(e) => e.request_id(),
            Self::ReservedDbInstancesOfferingNotFoundFault(e) => e.request_id(),
            Self::ResourceNotFoundFault(e) => e.request_id(),
            Self::SnsInvalidTopicFault(e) => e.request_id(),
            Self::SnsNoAuthorizationFault(e) => e.request_id(),
            Self::SnsTopicArnNotFoundFault(e) => e.request_id(),
            Self::SharedSnapshotQuotaExceededFault(e) => e.request_id(),
            Self::SnapshotQuotaExceededFault(e) => e.request_id(),
            Self::SourceClusterNotSupportedFault(e) => e.request_id(),
            Self::SourceDatabaseNotSupportedFault(e) => e.request_id(),
            Self::SourceNotFoundFault(e) => e.request_id(),
            Self::StorageQuotaExceededFault(e) => e.request_id(),
            Self::StorageTypeNotAvailableFault(e) => e.request_id(),
            Self::StorageTypeNotSupportedFault(e) => e.request_id(),
            Self::SubnetAlreadyInUse(e) => e.request_id(),
            Self::SubscriptionAlreadyExistFault(e) => e.request_id(),
            Self::SubscriptionCategoryNotFoundFault(e) => e.request_id(),
            Self::SubscriptionNotFoundFault(e) => e.request_id(),
            Self::TenantDatabaseAlreadyExistsFault(e) => e.request_id(),
            Self::TenantDatabaseNotFoundFault(e) => e.request_id(),
            Self::TenantDatabaseQuotaExceededFault(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
