// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_blue_green_deployment::_create_blue_green_deployment_output::CreateBlueGreenDeploymentOutputBuilder;

pub use crate::operation::create_blue_green_deployment::_create_blue_green_deployment_input::CreateBlueGreenDeploymentInputBuilder;

/// Fluent builder constructing a request to `CreateBlueGreenDeployment`.
///
/// <p>Creates a blue/green deployment.</p>
/// <p>A blue/green deployment creates a staging environment that copies the production environment. In a blue/green deployment, the blue environment is the current production environment. The green environment is the staging environment. The staging environment stays in sync with the current production environment using logical replication.</p>
/// <p>You can make changes to the databases in the green environment without affecting production workloads. For example, you can upgrade the major or minor DB engine version, change database parameters, or make schema changes in the staging environment. You can thoroughly test changes in the green environment. When ready, you can switch over the environments to promote the green environment to be the new production environment. The switchover typically takes under a minute.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html">Using Amazon RDS Blue/Green Deployments for database updates</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/blue-green-deployments.html"> Using Amazon RDS Blue/Green Deployments for database updates</a> in the <i>Amazon Aurora User Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateBlueGreenDeploymentFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_blue_green_deployment::builders::CreateBlueGreenDeploymentInputBuilder
            }
impl CreateBlueGreenDeploymentFluentBuilder {
    /// Creates a new `CreateBlueGreenDeployment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_blue_green_deployment::CreateBlueGreenDeployment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_blue_green_deployment::CreateBlueGreenDeploymentError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the blue/green deployment.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Can't be the same as an existing blue/green deployment name in the same account and Amazon Web Services Region.</p> </li>
    /// </ul>
    pub fn blue_green_deployment_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.blue_green_deployment_name(input.into());
        self
    }
    /// <p>The name of the blue/green deployment.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Can't be the same as an existing blue/green deployment name in the same account and Amazon Web Services Region.</p> </li>
    /// </ul>
    pub fn set_blue_green_deployment_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_blue_green_deployment_name(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source production database.</p>
    /// <p>Specify the database that you want to clone. The blue/green deployment creates this database in the green environment. You can make updates to the database in the green environment, such as an engine version upgrade. When you are ready, you can switch the database in the green environment to be the production database.</p>
    pub fn source(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.source(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source production database.</p>
    /// <p>Specify the database that you want to clone. The blue/green deployment creates this database in the green environment. You can make updates to the database in the green environment, such as an engine version upgrade. When you are ready, you can switch the database in the green environment to be the production database.</p>
    pub fn set_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_source(input);
        self
    }
    /// <p>The engine version of the database in the green environment.</p>
    /// <p>Specify the engine version to upgrade to in the green environment.</p>
    pub fn target_engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_engine_version(input.into());
        self
    }
    /// <p>The engine version of the database in the green environment.</p>
    /// <p>Specify the engine version to upgrade to in the green environment.</p>
    pub fn set_target_engine_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_target_engine_version(input);
        self
    }
    /// <p>The DB parameter group associated with the DB instance in the green environment.</p>
    /// <p>To test parameter changes, specify a DB parameter group that is different from the one associated with the source DB instance.</p>
    pub fn target_db_parameter_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_db_parameter_group_name(input.into());
        self
    }
    /// <p>The DB parameter group associated with the DB instance in the green environment.</p>
    /// <p>To test parameter changes, specify a DB parameter group that is different from the one associated with the source DB instance.</p>
    pub fn set_target_db_parameter_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_target_db_parameter_group_name(input);
        self
    }
    /// <p>The DB cluster parameter group associated with the Aurora DB cluster in the green environment.</p>
    /// <p>To test parameter changes, specify a DB cluster parameter group that is different from the one associated with the source DB cluster.</p>
    pub fn target_db_cluster_parameter_group_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .target_db_cluster_parameter_group_name(input.into());
        self
    }
    /// <p>The DB cluster parameter group associated with the Aurora DB cluster in the green environment.</p>
    /// <p>To test parameter changes, specify a DB cluster parameter group that is different from the one associated with the source DB cluster.</p>
    pub fn set_target_db_cluster_parameter_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_target_db_cluster_parameter_group_name(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to assign to the blue/green deployment.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Tags to assign to the blue/green deployment.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
