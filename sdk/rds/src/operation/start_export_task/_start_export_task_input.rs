// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartExportTaskInput {
    /// <p>A unique identifier for the export task. This ID isn't an identifier for the Amazon S3 bucket where the data is to be exported.</p>
    pub export_task_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the snapshot or cluster to export to Amazon S3.</p>
    pub source_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Amazon S3 bucket to export the snapshot or cluster data to.</p>
    pub s3_bucket_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot or cluster.</p>
    /// <p>In the IAM policy attached to your IAM role, include the following required actions to allow the transfer of files from Amazon RDS or Amazon Aurora to an S3 bucket:</p>
    /// <ul>
    /// <li> <p>s3:PutObject*</p> </li>
    /// <li> <p>s3:GetObject*</p> </li>
    /// <li> <p>s3:ListBucket</p> </li>
    /// <li> <p>s3:DeleteObject*</p> </li>
    /// <li> <p>s3:GetBucketLocation </p> </li>
    /// </ul>
    /// <p>In the policy, include the resources to identify the S3 bucket and objects in the bucket. The following list of resources shows the Amazon Resource Name (ARN) format for accessing S3:</p>
    /// <ul>
    /// <li> <p> <code>arn:aws:s3:::<i>your-s3-bucket</i> </code> </p> </li>
    /// <li> <p> <code>arn:aws:s3:::<i>your-s3-bucket</i>/*</code> </p> </li>
    /// </ul>
    pub iam_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Amazon Web Services KMS key to use to encrypt the data exported to Amazon S3. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. The caller of this operation must be authorized to run the following operations. These can be set in the Amazon Web Services KMS key policy:</p>
    /// <ul>
    /// <li> <p>kms:Encrypt</p> </li>
    /// <li> <p>kms:Decrypt</p> </li>
    /// <li> <p>kms:GenerateDataKey</p> </li>
    /// <li> <p>kms:GenerateDataKeyWithoutPlaintext</p> </li>
    /// <li> <p>kms:ReEncryptFrom</p> </li>
    /// <li> <p>kms:ReEncryptTo</p> </li>
    /// <li> <p>kms:CreateGrant</p> </li>
    /// <li> <p>kms:DescribeKey</p> </li>
    /// <li> <p>kms:RetireGrant</p> </li>
    /// </ul>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon S3 bucket prefix to use as the file name and path of the exported data.</p>
    pub s3_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The data to be exported from the snapshot or cluster. If this parameter isn't provided, all of the data is exported.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>database</code> - Export all the data from a specified database.</p> </li>
    /// <li> <p> <code>database.table</code> <i>table-name</i> - Export a table of the snapshot or cluster. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.</p> </li>
    /// <li> <p> <code>database.schema</code> <i>schema-name</i> - Export a database schema of the snapshot or cluster. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// <li> <p> <code>database.schema.table</code> <i>table-name</i> - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// </ul>
    pub export_only: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl StartExportTaskInput {
    /// <p>A unique identifier for the export task. This ID isn't an identifier for the Amazon S3 bucket where the data is to be exported.</p>
    pub fn export_task_identifier(&self) -> ::std::option::Option<&str> {
        self.export_task_identifier.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the snapshot or cluster to export to Amazon S3.</p>
    pub fn source_arn(&self) -> ::std::option::Option<&str> {
        self.source_arn.as_deref()
    }
    /// <p>The name of the Amazon S3 bucket to export the snapshot or cluster data to.</p>
    pub fn s3_bucket_name(&self) -> ::std::option::Option<&str> {
        self.s3_bucket_name.as_deref()
    }
    /// <p>The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot or cluster.</p>
    /// <p>In the IAM policy attached to your IAM role, include the following required actions to allow the transfer of files from Amazon RDS or Amazon Aurora to an S3 bucket:</p>
    /// <ul>
    /// <li> <p>s3:PutObject*</p> </li>
    /// <li> <p>s3:GetObject*</p> </li>
    /// <li> <p>s3:ListBucket</p> </li>
    /// <li> <p>s3:DeleteObject*</p> </li>
    /// <li> <p>s3:GetBucketLocation </p> </li>
    /// </ul>
    /// <p>In the policy, include the resources to identify the S3 bucket and objects in the bucket. The following list of resources shows the Amazon Resource Name (ARN) format for accessing S3:</p>
    /// <ul>
    /// <li> <p> <code>arn:aws:s3:::<i>your-s3-bucket</i> </code> </p> </li>
    /// <li> <p> <code>arn:aws:s3:::<i>your-s3-bucket</i>/*</code> </p> </li>
    /// </ul>
    pub fn iam_role_arn(&self) -> ::std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
    /// <p>The ID of the Amazon Web Services KMS key to use to encrypt the data exported to Amazon S3. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. The caller of this operation must be authorized to run the following operations. These can be set in the Amazon Web Services KMS key policy:</p>
    /// <ul>
    /// <li> <p>kms:Encrypt</p> </li>
    /// <li> <p>kms:Decrypt</p> </li>
    /// <li> <p>kms:GenerateDataKey</p> </li>
    /// <li> <p>kms:GenerateDataKeyWithoutPlaintext</p> </li>
    /// <li> <p>kms:ReEncryptFrom</p> </li>
    /// <li> <p>kms:ReEncryptTo</p> </li>
    /// <li> <p>kms:CreateGrant</p> </li>
    /// <li> <p>kms:DescribeKey</p> </li>
    /// <li> <p>kms:RetireGrant</p> </li>
    /// </ul>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The Amazon S3 bucket prefix to use as the file name and path of the exported data.</p>
    pub fn s3_prefix(&self) -> ::std::option::Option<&str> {
        self.s3_prefix.as_deref()
    }
    /// <p>The data to be exported from the snapshot or cluster. If this parameter isn't provided, all of the data is exported.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>database</code> - Export all the data from a specified database.</p> </li>
    /// <li> <p> <code>database.table</code> <i>table-name</i> - Export a table of the snapshot or cluster. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.</p> </li>
    /// <li> <p> <code>database.schema</code> <i>schema-name</i> - Export a database schema of the snapshot or cluster. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// <li> <p> <code>database.schema.table</code> <i>table-name</i> - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.export_only.is_none()`.
    pub fn export_only(&self) -> &[::std::string::String] {
        self.export_only.as_deref().unwrap_or_default()
    }
}
impl StartExportTaskInput {
    /// Creates a new builder-style object to manufacture [`StartExportTaskInput`](crate::operation::start_export_task::StartExportTaskInput).
    pub fn builder() -> crate::operation::start_export_task::builders::StartExportTaskInputBuilder {
        crate::operation::start_export_task::builders::StartExportTaskInputBuilder::default()
    }
}

/// A builder for [`StartExportTaskInput`](crate::operation::start_export_task::StartExportTaskInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartExportTaskInputBuilder {
    pub(crate) export_task_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) source_arn: ::std::option::Option<::std::string::String>,
    pub(crate) s3_bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) iam_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) s3_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) export_only: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl StartExportTaskInputBuilder {
    /// <p>A unique identifier for the export task. This ID isn't an identifier for the Amazon S3 bucket where the data is to be exported.</p>
    /// This field is required.
    pub fn export_task_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.export_task_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the export task. This ID isn't an identifier for the Amazon S3 bucket where the data is to be exported.</p>
    pub fn set_export_task_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.export_task_identifier = input;
        self
    }
    /// <p>A unique identifier for the export task. This ID isn't an identifier for the Amazon S3 bucket where the data is to be exported.</p>
    pub fn get_export_task_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.export_task_identifier
    }
    /// <p>The Amazon Resource Name (ARN) of the snapshot or cluster to export to Amazon S3.</p>
    /// This field is required.
    pub fn source_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the snapshot or cluster to export to Amazon S3.</p>
    pub fn set_source_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the snapshot or cluster to export to Amazon S3.</p>
    pub fn get_source_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_arn
    }
    /// <p>The name of the Amazon S3 bucket to export the snapshot or cluster data to.</p>
    /// This field is required.
    pub fn s3_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket to export the snapshot or cluster data to.</p>
    pub fn set_s3_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket_name = input;
        self
    }
    /// <p>The name of the Amazon S3 bucket to export the snapshot or cluster data to.</p>
    pub fn get_s3_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket_name
    }
    /// <p>The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot or cluster.</p>
    /// <p>In the IAM policy attached to your IAM role, include the following required actions to allow the transfer of files from Amazon RDS or Amazon Aurora to an S3 bucket:</p>
    /// <ul>
    /// <li> <p>s3:PutObject*</p> </li>
    /// <li> <p>s3:GetObject*</p> </li>
    /// <li> <p>s3:ListBucket</p> </li>
    /// <li> <p>s3:DeleteObject*</p> </li>
    /// <li> <p>s3:GetBucketLocation </p> </li>
    /// </ul>
    /// <p>In the policy, include the resources to identify the S3 bucket and objects in the bucket. The following list of resources shows the Amazon Resource Name (ARN) format for accessing S3:</p>
    /// <ul>
    /// <li> <p> <code>arn:aws:s3:::<i>your-s3-bucket</i> </code> </p> </li>
    /// <li> <p> <code>arn:aws:s3:::<i>your-s3-bucket</i>/*</code> </p> </li>
    /// </ul>
    /// This field is required.
    pub fn iam_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot or cluster.</p>
    /// <p>In the IAM policy attached to your IAM role, include the following required actions to allow the transfer of files from Amazon RDS or Amazon Aurora to an S3 bucket:</p>
    /// <ul>
    /// <li> <p>s3:PutObject*</p> </li>
    /// <li> <p>s3:GetObject*</p> </li>
    /// <li> <p>s3:ListBucket</p> </li>
    /// <li> <p>s3:DeleteObject*</p> </li>
    /// <li> <p>s3:GetBucketLocation </p> </li>
    /// </ul>
    /// <p>In the policy, include the resources to identify the S3 bucket and objects in the bucket. The following list of resources shows the Amazon Resource Name (ARN) format for accessing S3:</p>
    /// <ul>
    /// <li> <p> <code>arn:aws:s3:::<i>your-s3-bucket</i> </code> </p> </li>
    /// <li> <p> <code>arn:aws:s3:::<i>your-s3-bucket</i>/*</code> </p> </li>
    /// </ul>
    pub fn set_iam_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// <p>The name of the IAM role to use for writing to the Amazon S3 bucket when exporting a snapshot or cluster.</p>
    /// <p>In the IAM policy attached to your IAM role, include the following required actions to allow the transfer of files from Amazon RDS or Amazon Aurora to an S3 bucket:</p>
    /// <ul>
    /// <li> <p>s3:PutObject*</p> </li>
    /// <li> <p>s3:GetObject*</p> </li>
    /// <li> <p>s3:ListBucket</p> </li>
    /// <li> <p>s3:DeleteObject*</p> </li>
    /// <li> <p>s3:GetBucketLocation </p> </li>
    /// </ul>
    /// <p>In the policy, include the resources to identify the S3 bucket and objects in the bucket. The following list of resources shows the Amazon Resource Name (ARN) format for accessing S3:</p>
    /// <ul>
    /// <li> <p> <code>arn:aws:s3:::<i>your-s3-bucket</i> </code> </p> </li>
    /// <li> <p> <code>arn:aws:s3:::<i>your-s3-bucket</i>/*</code> </p> </li>
    /// </ul>
    pub fn get_iam_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role_arn
    }
    /// <p>The ID of the Amazon Web Services KMS key to use to encrypt the data exported to Amazon S3. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. The caller of this operation must be authorized to run the following operations. These can be set in the Amazon Web Services KMS key policy:</p>
    /// <ul>
    /// <li> <p>kms:Encrypt</p> </li>
    /// <li> <p>kms:Decrypt</p> </li>
    /// <li> <p>kms:GenerateDataKey</p> </li>
    /// <li> <p>kms:GenerateDataKeyWithoutPlaintext</p> </li>
    /// <li> <p>kms:ReEncryptFrom</p> </li>
    /// <li> <p>kms:ReEncryptTo</p> </li>
    /// <li> <p>kms:CreateGrant</p> </li>
    /// <li> <p>kms:DescribeKey</p> </li>
    /// <li> <p>kms:RetireGrant</p> </li>
    /// </ul>
    /// This field is required.
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Amazon Web Services KMS key to use to encrypt the data exported to Amazon S3. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. The caller of this operation must be authorized to run the following operations. These can be set in the Amazon Web Services KMS key policy:</p>
    /// <ul>
    /// <li> <p>kms:Encrypt</p> </li>
    /// <li> <p>kms:Decrypt</p> </li>
    /// <li> <p>kms:GenerateDataKey</p> </li>
    /// <li> <p>kms:GenerateDataKeyWithoutPlaintext</p> </li>
    /// <li> <p>kms:ReEncryptFrom</p> </li>
    /// <li> <p>kms:ReEncryptTo</p> </li>
    /// <li> <p>kms:CreateGrant</p> </li>
    /// <li> <p>kms:DescribeKey</p> </li>
    /// <li> <p>kms:RetireGrant</p> </li>
    /// </ul>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The ID of the Amazon Web Services KMS key to use to encrypt the data exported to Amazon S3. The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. The caller of this operation must be authorized to run the following operations. These can be set in the Amazon Web Services KMS key policy:</p>
    /// <ul>
    /// <li> <p>kms:Encrypt</p> </li>
    /// <li> <p>kms:Decrypt</p> </li>
    /// <li> <p>kms:GenerateDataKey</p> </li>
    /// <li> <p>kms:GenerateDataKeyWithoutPlaintext</p> </li>
    /// <li> <p>kms:ReEncryptFrom</p> </li>
    /// <li> <p>kms:ReEncryptTo</p> </li>
    /// <li> <p>kms:CreateGrant</p> </li>
    /// <li> <p>kms:DescribeKey</p> </li>
    /// <li> <p>kms:RetireGrant</p> </li>
    /// </ul>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>The Amazon S3 bucket prefix to use as the file name and path of the exported data.</p>
    pub fn s3_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon S3 bucket prefix to use as the file name and path of the exported data.</p>
    pub fn set_s3_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_prefix = input;
        self
    }
    /// <p>The Amazon S3 bucket prefix to use as the file name and path of the exported data.</p>
    pub fn get_s3_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_prefix
    }
    /// Appends an item to `export_only`.
    ///
    /// To override the contents of this collection use [`set_export_only`](Self::set_export_only).
    ///
    /// <p>The data to be exported from the snapshot or cluster. If this parameter isn't provided, all of the data is exported.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>database</code> - Export all the data from a specified database.</p> </li>
    /// <li> <p> <code>database.table</code> <i>table-name</i> - Export a table of the snapshot or cluster. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.</p> </li>
    /// <li> <p> <code>database.schema</code> <i>schema-name</i> - Export a database schema of the snapshot or cluster. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// <li> <p> <code>database.schema.table</code> <i>table-name</i> - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// </ul>
    pub fn export_only(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.export_only.unwrap_or_default();
        v.push(input.into());
        self.export_only = ::std::option::Option::Some(v);
        self
    }
    /// <p>The data to be exported from the snapshot or cluster. If this parameter isn't provided, all of the data is exported.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>database</code> - Export all the data from a specified database.</p> </li>
    /// <li> <p> <code>database.table</code> <i>table-name</i> - Export a table of the snapshot or cluster. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.</p> </li>
    /// <li> <p> <code>database.schema</code> <i>schema-name</i> - Export a database schema of the snapshot or cluster. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// <li> <p> <code>database.schema.table</code> <i>table-name</i> - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// </ul>
    pub fn set_export_only(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.export_only = input;
        self
    }
    /// <p>The data to be exported from the snapshot or cluster. If this parameter isn't provided, all of the data is exported.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>database</code> - Export all the data from a specified database.</p> </li>
    /// <li> <p> <code>database.table</code> <i>table-name</i> - Export a table of the snapshot or cluster. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.</p> </li>
    /// <li> <p> <code>database.schema</code> <i>schema-name</i> - Export a database schema of the snapshot or cluster. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// <li> <p> <code>database.schema.table</code> <i>table-name</i> - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// </ul>
    pub fn get_export_only(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.export_only
    }
    /// Consumes the builder and constructs a [`StartExportTaskInput`](crate::operation::start_export_task::StartExportTaskInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_export_task::StartExportTaskInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_export_task::StartExportTaskInput {
            export_task_identifier: self.export_task_identifier,
            source_arn: self.source_arn,
            s3_bucket_name: self.s3_bucket_name,
            iam_role_arn: self.iam_role_arn,
            kms_key_id: self.kms_key_id,
            s3_prefix: self.s3_prefix,
            export_only: self.export_only,
        })
    }
}
