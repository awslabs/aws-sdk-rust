// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDbSecurityGroupInput {
    /// <p>The name for the DB security group. This value is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li>
    /// <li> <p>Must not be "Default"</p> </li>
    /// </ul>
    /// <p>Example: <code>mysecuritygroup</code> </p>
    pub db_security_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The description for the DB security group.</p>
    pub db_security_group_description: ::std::option::Option<::std::string::String>,
    /// <p>Tags to assign to the DB security group.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateDbSecurityGroupInput {
    /// <p>The name for the DB security group. This value is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li>
    /// <li> <p>Must not be "Default"</p> </li>
    /// </ul>
    /// <p>Example: <code>mysecuritygroup</code> </p>
    pub fn db_security_group_name(&self) -> ::std::option::Option<&str> {
        self.db_security_group_name.as_deref()
    }
    /// <p>The description for the DB security group.</p>
    pub fn db_security_group_description(&self) -> ::std::option::Option<&str> {
        self.db_security_group_description.as_deref()
    }
    /// <p>Tags to assign to the DB security group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateDbSecurityGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateDbSecurityGroupInput`](crate::operation::create_db_security_group::CreateDbSecurityGroupInput).
    pub fn builder() -> crate::operation::create_db_security_group::builders::CreateDbSecurityGroupInputBuilder {
        crate::operation::create_db_security_group::builders::CreateDbSecurityGroupInputBuilder::default()
    }
}

/// A builder for [`CreateDbSecurityGroupInput`](crate::operation::create_db_security_group::CreateDbSecurityGroupInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDbSecurityGroupInputBuilder {
    pub(crate) db_security_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) db_security_group_description: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateDbSecurityGroupInputBuilder {
    /// <p>The name for the DB security group. This value is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li>
    /// <li> <p>Must not be "Default"</p> </li>
    /// </ul>
    /// <p>Example: <code>mysecuritygroup</code> </p>
    /// This field is required.
    pub fn db_security_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_security_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the DB security group. This value is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li>
    /// <li> <p>Must not be "Default"</p> </li>
    /// </ul>
    /// <p>Example: <code>mysecuritygroup</code> </p>
    pub fn set_db_security_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_security_group_name = input;
        self
    }
    /// <p>The name for the DB security group. This value is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li>
    /// <li> <p>Must not be "Default"</p> </li>
    /// </ul>
    /// <p>Example: <code>mysecuritygroup</code> </p>
    pub fn get_db_security_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_security_group_name
    }
    /// <p>The description for the DB security group.</p>
    /// This field is required.
    pub fn db_security_group_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_security_group_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description for the DB security group.</p>
    pub fn set_db_security_group_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_security_group_description = input;
        self
    }
    /// <p>The description for the DB security group.</p>
    pub fn get_db_security_group_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_security_group_description
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to assign to the DB security group.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Tags to assign to the DB security group.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags to assign to the DB security group.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateDbSecurityGroupInput`](crate::operation::create_db_security_group::CreateDbSecurityGroupInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_db_security_group::CreateDbSecurityGroupInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_db_security_group::CreateDbSecurityGroupInput {
            db_security_group_name: self.db_security_group_name,
            db_security_group_description: self.db_security_group_description,
            tags: self.tags,
        })
    }
}
