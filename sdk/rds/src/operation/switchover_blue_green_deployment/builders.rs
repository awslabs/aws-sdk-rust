// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::switchover_blue_green_deployment::_switchover_blue_green_deployment_output::SwitchoverBlueGreenDeploymentOutputBuilder;

pub use crate::operation::switchover_blue_green_deployment::_switchover_blue_green_deployment_input::SwitchoverBlueGreenDeploymentInputBuilder;

/// Fluent builder constructing a request to `SwitchoverBlueGreenDeployment`.
///
/// <p>Switches over a blue/green deployment.</p>
/// <p>Before you switch over, production traffic is routed to the databases in the blue environment. After you switch over, production traffic is routed to the databases in the green environment.</p>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/blue-green-deployments.html">Using Amazon RDS Blue/Green Deployments for database updates</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/blue-green-deployments.html"> Using Amazon RDS Blue/Green Deployments for database updates</a> in the <i>Amazon Aurora User Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct SwitchoverBlueGreenDeploymentFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::switchover_blue_green_deployment::builders::SwitchoverBlueGreenDeploymentInputBuilder
            }
impl SwitchoverBlueGreenDeploymentFluentBuilder {
    /// Creates a new `SwitchoverBlueGreenDeployment`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::switchover_blue_green_deployment::SwitchoverBlueGreenDeployment,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::switchover_blue_green_deployment::SwitchoverBlueGreenDeploymentError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::switchover_blue_green_deployment::SwitchoverBlueGreenDeploymentOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::switchover_blue_green_deployment::SwitchoverBlueGreenDeploymentError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The blue/green deployment identifier.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match an existing blue/green deployment identifier.</p> </li>
    /// </ul>
    pub fn blue_green_deployment_identifier(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.blue_green_deployment_identifier(input.into());
        self
    }
    /// <p>The blue/green deployment identifier.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match an existing blue/green deployment identifier.</p> </li>
    /// </ul>
    pub fn set_blue_green_deployment_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_blue_green_deployment_identifier(input);
        self
    }
    /// <p>The amount of time, in seconds, for the switchover to complete. The default is 300.</p>
    /// <p>If the switchover takes longer than the specified duration, then any changes are rolled back, and no changes are made to the environments.</p>
    pub fn switchover_timeout(mut self, input: i32) -> Self {
        self.inner = self.inner.switchover_timeout(input);
        self
    }
    /// <p>The amount of time, in seconds, for the switchover to complete. The default is 300.</p>
    /// <p>If the switchover takes longer than the specified duration, then any changes are rolled back, and no changes are made to the environments.</p>
    pub fn set_switchover_timeout(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_switchover_timeout(input);
        self
    }
}
