// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_db_cluster::_create_db_cluster_output::CreateDbClusterOutputBuilder;

pub use crate::operation::create_db_cluster::_create_db_cluster_input::CreateDbClusterInputBuilder;

/// Fluent builder constructing a request to `CreateDBCluster`.
///
/// <p>Creates a new Amazon Aurora DB cluster or Multi-AZ DB cluster.</p>
/// <p>You can use the <code>ReplicationSourceIdentifier</code> parameter to create an Amazon Aurora DB cluster as a read replica of another DB cluster or Amazon RDS MySQL or PostgreSQL DB instance.</p>
/// <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
/// <p>For more information on Multi-AZ DB clusters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html"> Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide</i>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateDBClusterFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_db_cluster::builders::CreateDbClusterInputBuilder,
}
impl CreateDBClusterFluentBuilder {
    /// Creates a new `CreateDBCluster`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_db_cluster::CreateDBCluster,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_db_cluster::CreateDBClusterError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_db_cluster::CreateDbClusterOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_db_cluster::CreateDBClusterError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `AvailabilityZones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>A list of Availability Zones (AZs) where DB instances in the DB cluster can be created.</p>
    /// <p>For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn availability_zones(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.availability_zones(input.into());
        self
    }
    /// <p>A list of Availability Zones (AZs) where DB instances in the DB cluster can be created.</p>
    /// <p>For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html">Choosing the Regions and Availability Zones</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_availability_zones(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_availability_zones(input);
        self
    }
    /// <p>The number of days for which automated backups are retained.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be a value from 1 to 35</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn backup_retention_period(mut self, input: i32) -> Self {
        self.inner = self.inner.backup_retention_period(input);
        self
    }
    /// <p>The number of days for which automated backups are retained.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be a value from 1 to 35</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_backup_retention_period(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_backup_retention_period(input);
        self
    }
    /// <p>A value that indicates that the DB cluster should be associated with the specified CharacterSet.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn character_set_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.character_set_name(input.into());
        self
    }
    /// <p>A value that indicates that the DB cluster should be associated with the specified CharacterSet.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_character_set_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_character_set_name(input);
        self
    }
    /// <p>The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.database_name(input.into());
        self
    }
    /// <p>The name for your database of up to 64 alphanumeric characters. If you do not provide a name, Amazon RDS doesn't create a database in the DB cluster you are creating.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_database_name(input);
        self
    }
    /// <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code> </p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.db_cluster_identifier(input.into());
        self
    }
    /// <p>The DB cluster identifier. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code> </p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_db_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_db_cluster_identifier(input);
        self
    }
    /// <p>The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn db_cluster_parameter_group_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.db_cluster_parameter_group_name(input.into());
        self
    }
    /// <p>The name of the DB cluster parameter group to associate with this DB cluster. If you do not specify a value, then the default DB cluster parameter group for the specified DB engine and version is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match the name of an existing DB cluster parameter group.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_db_cluster_parameter_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_db_cluster_parameter_group_name(input);
        self
    }
    /// Appends an item to `VpcSecurityGroupIds`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_group_ids`](Self::set_vpc_security_group_ids).
    ///
    /// <p>A list of EC2 VPC security groups to associate with this DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.vpc_security_group_ids(input.into());
        self
    }
    /// <p>A list of EC2 VPC security groups to associate with this DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_vpc_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_vpc_security_group_ids(input);
        self
    }
    /// <p>A DB subnet group to associate with this DB cluster.</p>
    /// <p>This setting is required to create a Multi-AZ DB cluster.</p>
    /// <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p>
    /// <p>Example: <code>mydbsubnetgroup</code> </p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.db_subnet_group_name(input.into());
        self
    }
    /// <p>A DB subnet group to associate with this DB cluster.</p>
    /// <p>This setting is required to create a Multi-AZ DB cluster.</p>
    /// <p>Constraints: Must match the name of an existing DBSubnetGroup. Must not be default.</p>
    /// <p>Example: <code>mydbsubnetgroup</code> </p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_db_subnet_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_db_subnet_group_name(input);
        self
    }
    /// <p>The name of the database engine to be used for this DB cluster.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-postgresql</code> </p> </li>
    /// <li> <p> <code>mysql</code> </p> </li>
    /// <li> <p> <code>postgres</code> </p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.engine(input.into());
        self
    }
    /// <p>The name of the database engine to be used for this DB cluster.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-postgresql</code> </p> </li>
    /// <li> <p> <code>mysql</code> </p> </li>
    /// <li> <p> <code>postgres</code> </p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_engine(input);
        self
    }
    /// <p>The version number of the database engine to use.</p>
    /// <p>To list all of the available engine versions for MySQL 5.6-compatible Aurora, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p>To list all of the available engine versions for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p>To list all of the available engine versions for Aurora PostgreSQL, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p>To list all of the available engine versions for RDS for MySQL, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine mysql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p>To list all of the available engine versions for RDS for PostgreSQL, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine postgres --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Updates.html">MySQL on Amazon RDS Versions</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p> <b>Aurora PostgreSQL</b> </p>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.20180305.html">Amazon Aurora PostgreSQL releases and engine versions</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p> <b>MySQL</b> </p>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p> <b>PostgreSQL</b> </p>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts">Amazon RDS for PostgreSQL versions and extensions</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.engine_version(input.into());
        self
    }
    /// <p>The version number of the database engine to use.</p>
    /// <p>To list all of the available engine versions for MySQL 5.6-compatible Aurora, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p>To list all of the available engine versions for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p>To list all of the available engine versions for Aurora PostgreSQL, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p>To list all of the available engine versions for RDS for MySQL, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine mysql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p>To list all of the available engine versions for RDS for PostgreSQL, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine postgres --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Updates.html">MySQL on Amazon RDS Versions</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p> <b>Aurora PostgreSQL</b> </p>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.20180305.html">Amazon Aurora PostgreSQL releases and engine versions</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p> <b>MySQL</b> </p>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p> <b>PostgreSQL</b> </p>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts">Amazon RDS for PostgreSQL versions and extensions</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_engine_version(input);
        self
    }
    /// <p>The port number on which the instances in the DB cluster accept connections.</p>
    /// <p> <b>RDS for MySQL and Aurora MySQL</b> </p>
    /// <p>Default: <code>3306</code> </p>
    /// <p>Valid values: <code>1150-65535</code> </p>
    /// <p> <b>RDS for PostgreSQL and Aurora PostgreSQL</b> </p>
    /// <p>Default: <code>5432</code> </p>
    /// <p>Valid values: <code>1150-65535</code> </p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn port(mut self, input: i32) -> Self {
        self.inner = self.inner.port(input);
        self
    }
    /// <p>The port number on which the instances in the DB cluster accept connections.</p>
    /// <p> <b>RDS for MySQL and Aurora MySQL</b> </p>
    /// <p>Default: <code>3306</code> </p>
    /// <p>Valid values: <code>1150-65535</code> </p>
    /// <p> <b>RDS for PostgreSQL and Aurora PostgreSQL</b> </p>
    /// <p>Default: <code>5432</code> </p>
    /// <p>Valid values: <code>1150-65535</code> </p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_port(input);
        self
    }
    /// <p>The name of the master user for the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 16 letters or numbers.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't be a reserved word for the chosen database engine.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn master_username(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.master_username(input.into());
        self
    }
    /// <p>The name of the master user for the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 16 letters or numbers.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't be a reserved word for the chosen database engine.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_master_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_master_username(input);
        self
    }
    /// <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 8 to 41 characters.</p> </li>
    /// <li> <p>Can't be specified if <code>ManageMasterUserPassword</code> is turned on.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn master_user_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.master_user_password(input.into());
        self
    }
    /// <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 8 to 41 characters.</p> </li>
    /// <li> <p>Can't be specified if <code>ManageMasterUserPassword</code> is turned on.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_master_user_password(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_master_user_password(input);
        self
    }
    /// <p>A value that indicates that the DB cluster should be associated with the specified option group.</p>
    /// <p>DB clusters are associated with a default option group that can't be modified.</p>
    pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.option_group_name(input.into());
        self
    }
    /// <p>A value that indicates that the DB cluster should be associated with the specified option group.</p>
    /// <p>DB clusters are associated with a default option group that can't be modified.</p>
    pub fn set_option_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_option_group_name(input);
        self
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow"> Backup window</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li>
    /// <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li>
    /// <li> <p>Must not conflict with the preferred maintenance window.</p> </li>
    /// <li> <p>Must be at least 30 minutes.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn preferred_backup_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.preferred_backup_window(input.into());
        self
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow"> Backup window</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li>
    /// <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li>
    /// <li> <p>Must not conflict with the preferred maintenance window.</p> </li>
    /// <li> <p>Must be at least 30 minutes.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_preferred_backup_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_preferred_backup_window(input);
        self
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn preferred_maintenance_window(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.preferred_maintenance_window(input.into());
        self
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred DB Cluster Maintenance Window</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_preferred_maintenance_window(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_preferred_maintenance_window(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a read replica.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn replication_source_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.replication_source_identifier(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a read replica.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_replication_source_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_replication_source_identifier(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to assign to the DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Tags to assign to the DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A value that indicates whether the DB cluster is encrypted.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn storage_encrypted(mut self, input: bool) -> Self {
        self.inner = self.inner.storage_encrypted(input);
        self
    }
    /// <p>A value that indicates whether the DB cluster is encrypted.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_storage_encrypted(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_storage_encrypted(input);
        self
    }
    /// <p>The Amazon Web Services KMS key identifier for an encrypted DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>When a KMS key isn't specified in <code>KmsKeyId</code>:</p>
    /// <ul>
    /// <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the KMS key used to encrypt the source. Otherwise, Amazon RDS will use your default KMS key.</p> </li>
    /// <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default KMS key.</p> </li>
    /// </ul>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    /// <p>If you create a read replica of an encrypted DB cluster in another Amazon Web Services Region, you must set <code>KmsKeyId</code> to a KMS key identifier that is valid in the destination Amazon Web Services Region. This KMS key is used to encrypt the read replica in that Amazon Web Services Region.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.kms_key_id(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier for an encrypted DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>When a KMS key isn't specified in <code>KmsKeyId</code>:</p>
    /// <ul>
    /// <li> <p>If <code>ReplicationSourceIdentifier</code> identifies an encrypted source, then Amazon RDS will use the KMS key used to encrypt the source. Otherwise, Amazon RDS will use your default KMS key.</p> </li>
    /// <li> <p>If the <code>StorageEncrypted</code> parameter is enabled and <code>ReplicationSourceIdentifier</code> isn't specified, then Amazon RDS will use your default KMS key.</p> </li>
    /// </ul>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    /// <p>If you create a read replica of an encrypted DB cluster in another Amazon Web Services Region, you must set <code>KmsKeyId</code> to a KMS key identifier that is valid in the destination Amazon Web Services Region. This KMS key is used to encrypt the read replica in that Amazon Web Services Region.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_kms_key_id(input);
        self
    }
    /// <p>When you are replicating a DB cluster from one Amazon Web Services GovCloud (US) Region to another, an URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> operation to be called in the source Amazon Web Services Region where the DB cluster is replicated from. Specify <code>PreSignedUrl</code> only when you are performing cross-Region replication from an encrypted DB cluster.</p>
    /// <p>The presigned URL must be a valid request for the <code>CreateDBCluster</code> API operation that can run in the source Amazon Web Services Region that contains the encrypted DB cluster to copy.</p>
    /// <p>The presigned URL request must contain the following parameter values:</p>
    /// <ul>
    /// <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the KMS key to use to encrypt the copy of the DB cluster in the destination Amazon Web Services Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> operation that is called in the destination Amazon Web Services Region, and the operation contained in the presigned URL.</p> </li>
    /// <li> <p> <code>DestinationRegion</code> - The name of the Amazon Web Services Region that Aurora read replica will be created in.</p> </li>
    /// <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted DB cluster from the us-west-2 Amazon Web Services Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li>
    /// </ul>
    /// <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note>
    /// <p>If you are using an Amazon Web Services SDK tool or the CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a presigned URL that is a valid request for the operation that can run in the source Amazon Web Services Region.</p>
    /// </note>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn pre_signed_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pre_signed_url(input.into());
        self
    }
    /// <p>When you are replicating a DB cluster from one Amazon Web Services GovCloud (US) Region to another, an URL that contains a Signature Version 4 signed request for the <code>CreateDBCluster</code> operation to be called in the source Amazon Web Services Region where the DB cluster is replicated from. Specify <code>PreSignedUrl</code> only when you are performing cross-Region replication from an encrypted DB cluster.</p>
    /// <p>The presigned URL must be a valid request for the <code>CreateDBCluster</code> API operation that can run in the source Amazon Web Services Region that contains the encrypted DB cluster to copy.</p>
    /// <p>The presigned URL request must contain the following parameter values:</p>
    /// <ul>
    /// <li> <p> <code>KmsKeyId</code> - The KMS key identifier for the KMS key to use to encrypt the copy of the DB cluster in the destination Amazon Web Services Region. This should refer to the same KMS key for both the <code>CreateDBCluster</code> operation that is called in the destination Amazon Web Services Region, and the operation contained in the presigned URL.</p> </li>
    /// <li> <p> <code>DestinationRegion</code> - The name of the Amazon Web Services Region that Aurora read replica will be created in.</p> </li>
    /// <li> <p> <code>ReplicationSourceIdentifier</code> - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source Amazon Web Services Region. For example, if you are copying an encrypted DB cluster from the us-west-2 Amazon Web Services Region, then your <code>ReplicationSourceIdentifier</code> would look like Example: <code>arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1</code>.</p> </li>
    /// </ul>
    /// <p>To learn how to generate a Signature Version 4 signed request, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html"> Authenticating Requests: Using Query Parameters (Amazon Web Services Signature Version 4)</a> and <a href="https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html"> Signature Version 4 Signing Process</a>.</p> <note>
    /// <p>If you are using an Amazon Web Services SDK tool or the CLI, you can specify <code>SourceRegion</code> (or <code>--source-region</code> for the CLI) instead of specifying <code>PreSignedUrl</code> manually. Specifying <code>SourceRegion</code> autogenerates a presigned URL that is a valid request for the operation that can run in the source Amazon Web Services Region.</p>
    /// </note>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_pre_signed_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pre_signed_url(input);
        self
    }
    /// <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_iam_database_authentication(input);
        self
    }
    /// <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_enable_iam_database_authentication(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.inner = self.inner.set_enable_iam_database_authentication(input);
        self
    }
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora MySQL DB clusters only</p>
    pub fn backtrack_window(mut self, input: i64) -> Self {
        self.inner = self.inner.backtrack_window(input);
        self
    }
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora MySQL DB clusters only</p>
    pub fn set_backtrack_window(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_backtrack_window(input);
        self
    }
    /// Appends an item to `EnableCloudwatchLogsExports`.
    ///
    /// To override the contents of this collection use [`set_enable_cloudwatch_logs_exports`](Self::set_enable_cloudwatch_logs_exports).
    ///
    /// <p>The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used.</p>
    /// <p> <b>RDS for MySQL</b> </p>
    /// <p>Possible values are <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p> <b>RDS for PostgreSQL</b> </p>
    /// <p>Possible values are <code>postgresql</code> and <code>upgrade</code>.</p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p> <b>Aurora PostgreSQL</b> </p>
    /// <p>Possible value is <code>postgresql</code>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon RDS, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn enable_cloudwatch_logs_exports(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.enable_cloudwatch_logs_exports(input.into());
        self
    }
    /// <p>The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used.</p>
    /// <p> <b>RDS for MySQL</b> </p>
    /// <p>Possible values are <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p> <b>RDS for PostgreSQL</b> </p>
    /// <p>Possible values are <code>postgresql</code> and <code>upgrade</code>.</p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p> <b>Aurora PostgreSQL</b> </p>
    /// <p>Possible value is <code>postgresql</code>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon RDS, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_enable_cloudwatch_logs_exports(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_enable_cloudwatch_logs_exports(input);
        self
    }
    /// <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p>
    /// <p>The <code>parallelquery</code> engine mode isn't required for Aurora MySQL version 1.23 and higher 1.x versions, and version 2.09 and higher 2.x versions.</p>
    /// <p>The <code>global</code> engine mode isn't required for Aurora MySQL version 1.22 and higher 1.x versions, and <code>global</code> engine mode isn't required for any 2.x versions.</p>
    /// <p>The <code>multimaster</code> engine mode only applies for DB clusters created with Aurora MySQL version 5.6.10a.</p>
    /// <p>The <code>serverless</code> engine mode only applies for Aurora Serverless v1 DB clusters.</p>
    /// <p>For Aurora PostgreSQL, the <code>global</code> engine mode isn't required, and both the <code>parallelquery</code> and the <code>multimaster</code> engine modes currently aren't supported.</p>
    /// <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p>
    /// <ul>
    /// <li> <p> <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations">Limitations of Aurora Serverless v1</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.requirements.html">Requirements for Aurora Serverless v2</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations">Limitations of Parallel Query</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations">Limitations of Aurora Global Databases</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations">Limitations of Multi-Master Clusters</a> </p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn engine_mode(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.engine_mode(input.into());
        self
    }
    /// <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p>
    /// <p>The <code>parallelquery</code> engine mode isn't required for Aurora MySQL version 1.23 and higher 1.x versions, and version 2.09 and higher 2.x versions.</p>
    /// <p>The <code>global</code> engine mode isn't required for Aurora MySQL version 1.22 and higher 1.x versions, and <code>global</code> engine mode isn't required for any 2.x versions.</p>
    /// <p>The <code>multimaster</code> engine mode only applies for DB clusters created with Aurora MySQL version 5.6.10a.</p>
    /// <p>The <code>serverless</code> engine mode only applies for Aurora Serverless v1 DB clusters.</p>
    /// <p>For Aurora PostgreSQL, the <code>global</code> engine mode isn't required, and both the <code>parallelquery</code> and the <code>multimaster</code> engine modes currently aren't supported.</p>
    /// <p>Limitations and requirements apply to some DB engine modes. For more information, see the following sections in the <i>Amazon Aurora User Guide</i>:</p>
    /// <ul>
    /// <li> <p> <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations">Limitations of Aurora Serverless v1</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.requirements.html">Requirements for Aurora Serverless v2</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations">Limitations of Parallel Query</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations">Limitations of Aurora Global Databases</a> </p> </li>
    /// <li> <p> <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations">Limitations of Multi-Master Clusters</a> </p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_engine_mode(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_engine_mode(input);
        self
    }
    /// <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn scaling_configuration(mut self, input: crate::types::ScalingConfiguration) -> Self {
        self.inner = self.inner.scaling_configuration(input);
        self
    }
    /// <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_scaling_configuration(
        mut self,
        input: std::option::Option<crate::types::ScalingConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_scaling_configuration(input);
        self
    }
    /// <p>A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn deletion_protection(mut self, input: bool) -> Self {
        self.inner = self.inner.deletion_protection(input);
        self
    }
    /// <p>A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_deletion_protection(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_deletion_protection(input);
        self
    }
    /// <p>The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn global_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.global_cluster_identifier(input.into());
        self
    }
    /// <p>The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_global_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_global_cluster_identifier(input);
        self
    }
    /// <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless v1 DB cluster. By default, the HTTP endpoint is disabled.</p>
    /// <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless v1 DB cluster. You can also query your database from inside the RDS console with the query editor.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn enable_http_endpoint(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_http_endpoint(input);
        self
    }
    /// <p>A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless v1 DB cluster. By default, the HTTP endpoint is disabled.</p>
    /// <p>When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless v1 DB cluster. You can also query your database from inside the RDS console with the query editor.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html">Using the Data API for Aurora Serverless v1</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_enable_http_endpoint(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_http_endpoint(input);
        self
    }
    /// <p>A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
        self.inner = self.inner.copy_tags_to_snapshot(input);
        self
    }
    /// <p>A value that indicates whether to copy all tags from the DB cluster to snapshots of the DB cluster. The default is not to copy them.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_copy_tags_to_snapshot(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_copy_tags_to_snapshot(input);
        self
    }
    /// <p>The Active Directory directory ID to create the DB cluster in.</p>
    /// <p>For Amazon Aurora DB clusters, Amazon RDS can use Kerberos authentication to authenticate users that connect to the DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain(input.into());
        self
    }
    /// <p>The Active Directory directory ID to create the DB cluster in.</p>
    /// <p>For Amazon Aurora DB clusters, Amazon RDS can use Kerberos authentication to authenticate users that connect to the DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain(input);
        self
    }
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn domain_iam_role_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_iam_role_name(input.into());
        self
    }
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_domain_iam_role_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_domain_iam_role_name(input);
        self
    }
    /// <p>A value that indicates whether to enable this DB cluster to forward write operations to the primary cluster of an Aurora global database (<code>GlobalCluster</code>). By default, write operations are not allowed on Aurora DB clusters that are secondary clusters in an Aurora global database.</p>
    /// <p>You can set this value only on Aurora DB clusters that are members of an Aurora global database. With this parameter enabled, a secondary cluster can forward writes to the current primary cluster and the resulting changes are replicated back to this cluster. For the primary DB cluster of an Aurora global database, this value is used immediately if the primary is demoted by the <code>FailoverGlobalCluster</code> API operation, but it does nothing until then.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn enable_global_write_forwarding(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_global_write_forwarding(input);
        self
    }
    /// <p>A value that indicates whether to enable this DB cluster to forward write operations to the primary cluster of an Aurora global database (<code>GlobalCluster</code>). By default, write operations are not allowed on Aurora DB clusters that are secondary clusters in an Aurora global database.</p>
    /// <p>You can set this value only on Aurora DB clusters that are members of an Aurora global database. With this parameter enabled, a secondary cluster can forward writes to the current primary cluster and the resulting changes are replicated back to this cluster. For the primary DB cluster of an Aurora global database, this value is used immediately if the primary is demoted by the <code>FailoverGlobalCluster</code> API operation, but it does nothing until then.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_enable_global_write_forwarding(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_global_write_forwarding(input);
        self
    }
    /// <p>The compute and memory capacity of each DB instance in the Multi-AZ DB cluster, for example db.m6gd.xlarge. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines.</p>
    /// <p>For the full list of DB instance classes and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB instance class</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting is required to create a Multi-AZ DB cluster.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn db_cluster_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.db_cluster_instance_class(input.into());
        self
    }
    /// <p>The compute and memory capacity of each DB instance in the Multi-AZ DB cluster, for example db.m6gd.xlarge. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines.</p>
    /// <p>For the full list of DB instance classes and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB instance class</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting is required to create a Multi-AZ DB cluster.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn set_db_cluster_instance_class(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_db_cluster_instance_class(input);
        self
    }
    /// <p>The amount of storage in gibibytes (GiB) to allocate to each DB instance in the Multi-AZ DB cluster.</p>
    /// <p>This setting is required to create a Multi-AZ DB cluster.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn allocated_storage(mut self, input: i32) -> Self {
        self.inner = self.inner.allocated_storage(input);
        self
    }
    /// <p>The amount of storage in gibibytes (GiB) to allocate to each DB instance in the Multi-AZ DB cluster.</p>
    /// <p>This setting is required to create a Multi-AZ DB cluster.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn set_allocated_storage(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_allocated_storage(input);
        self
    }
    /// <p>Specifies the storage type to be associated with the DB cluster.</p>
    /// <p>This setting is required to create a Multi-AZ DB cluster.</p>
    /// <p>Valid values: <code>io1</code> </p>
    /// <p>When specified, a value for the <code>Iops</code> parameter is required.</p>
    /// <p>Default: <code>io1</code> </p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn storage_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.storage_type(input.into());
        self
    }
    /// <p>Specifies the storage type to be associated with the DB cluster.</p>
    /// <p>This setting is required to create a Multi-AZ DB cluster.</p>
    /// <p>Valid values: <code>io1</code> </p>
    /// <p>When specified, a value for the <code>Iops</code> parameter is required.</p>
    /// <p>Default: <code>io1</code> </p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn set_storage_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_storage_type(input);
        self
    }
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster.</p>
    /// <p>For information about valid IOPS values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting is required to create a Multi-AZ DB cluster.</p>
    /// <p>Constraints: Must be a multiple between .5 and 50 of the storage amount for the DB cluster.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn iops(mut self, input: i32) -> Self {
        self.inner = self.inner.iops(input);
        self
    }
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster.</p>
    /// <p>For information about valid IOPS values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting is required to create a Multi-AZ DB cluster.</p>
    /// <p>Constraints: Must be a multiple between .5 and 50 of the storage amount for the DB cluster.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_iops(input);
        self
    }
    /// <p>A value that indicates whether the DB cluster is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address.</p>
    /// <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
    /// <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li> <p>If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB cluster is private.</p> </li>
    /// <li> <p>If the default VPC in the target Region has an internet gateway attached to it, the DB cluster is public.</p> </li>
    /// </ul>
    /// <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li> <p>If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB cluster is private.</p> </li>
    /// <li> <p>If the subnets are part of a VPC that has an internet gateway attached to it, the DB cluster is public.</p> </li>
    /// </ul>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.inner = self.inner.publicly_accessible(input);
        self
    }
    /// <p>A value that indicates whether the DB cluster is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address.</p>
    /// <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
    /// <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li> <p>If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB cluster is private.</p> </li>
    /// <li> <p>If the default VPC in the target Region has an internet gateway attached to it, the DB cluster is public.</p> </li>
    /// </ul>
    /// <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li> <p>If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB cluster is private.</p> </li>
    /// <li> <p>If the subnets are part of a VPC that has an internet gateway attached to it, the DB cluster is public.</p> </li>
    /// </ul>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_publicly_accessible(input);
        self
    }
    /// <p>A value that indicates whether minor engine upgrades are applied automatically to the DB cluster during the maintenance window. By default, minor engine upgrades are applied automatically.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_minor_version_upgrade(input);
        self
    }
    /// <p>A value that indicates whether minor engine upgrades are applied automatically to the DB cluster during the maintenance window. By default, minor engine upgrades are applied automatically.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn set_auto_minor_version_upgrade(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_minor_version_upgrade(input);
        self
    }
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster. To turn off collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p>
    /// <p>If <code>MonitoringRoleArn</code> is specified, also set <code>MonitoringInterval</code> to a value other than 0.</p>
    /// <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn monitoring_interval(mut self, input: i32) -> Self {
        self.inner = self.inner.monitoring_interval(input);
        self
    }
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB cluster. To turn off collecting Enhanced Monitoring metrics, specify 0. The default is 0.</p>
    /// <p>If <code>MonitoringRoleArn</code> is specified, also set <code>MonitoringInterval</code> to a value other than 0.</p>
    /// <p>Valid Values: <code>0, 1, 5, 10, 15, 30, 60</code> </p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn set_monitoring_interval(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_monitoring_interval(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs. An example is <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting up and enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>If <code>MonitoringInterval</code> is set to a value other than 0, supply a <code>MonitoringRoleArn</code> value.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn monitoring_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.monitoring_role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs. An example is <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting up and enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>If <code>MonitoringInterval</code> is set to a value other than 0, supply a <code>MonitoringRoleArn</code> value.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn set_monitoring_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_monitoring_role_arn(input);
        self
    }
    /// <p>A value that indicates whether to turn on Performance Insights for the DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html"> Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn enable_performance_insights(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_performance_insights(input);
        self
    }
    /// <p>A value that indicates whether to turn on Performance Insights for the DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html"> Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn set_enable_performance_insights(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_performance_insights(input);
        self
    }
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    /// <p>If you don't specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn performance_insights_kms_key_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.performance_insights_kms_key_id(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    /// <p>If you don't specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn set_performance_insights_kms_key_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_performance_insights_kms_key_id(input);
        self
    }
    /// <p>The number of days to retain Performance Insights data. The default is 7 days. The following values are valid:</p>
    /// <ul>
    /// <li> <p>7</p> </li>
    /// <li> <p> <i>month</i> * 31, where <i>month</i> is a number of months from 1-23</p> </li>
    /// <li> <p>731</p> </li>
    /// </ul>
    /// <p>For example, the following values are valid:</p>
    /// <ul>
    /// <li> <p>93 (3 months * 31)</p> </li>
    /// <li> <p>341 (11 months * 31)</p> </li>
    /// <li> <p>589 (19 months * 31)</p> </li>
    /// <li> <p>731</p> </li>
    /// </ul>
    /// <p>If you specify a retention period such as 94, which isn't a valid value, RDS issues an error.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn performance_insights_retention_period(mut self, input: i32) -> Self {
        self.inner = self.inner.performance_insights_retention_period(input);
        self
    }
    /// <p>The number of days to retain Performance Insights data. The default is 7 days. The following values are valid:</p>
    /// <ul>
    /// <li> <p>7</p> </li>
    /// <li> <p> <i>month</i> * 31, where <i>month</i> is a number of months from 1-23</p> </li>
    /// <li> <p>731</p> </li>
    /// </ul>
    /// <p>For example, the following values are valid:</p>
    /// <ul>
    /// <li> <p>93 (3 months * 31)</p> </li>
    /// <li> <p>341 (11 months * 31)</p> </li>
    /// <li> <p>589 (19 months * 31)</p> </li>
    /// <li> <p>731</p> </li>
    /// </ul>
    /// <p>If you specify a retention period such as 94, which isn't a valid value, RDS issues an error.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn set_performance_insights_retention_period(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.inner = self.inner.set_performance_insights_retention_period(input);
        self
    }
    /// <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn serverless_v2_scaling_configuration(
        mut self,
        input: crate::types::ServerlessV2ScalingConfiguration,
    ) -> Self {
        self.inner = self.inner.serverless_v2_scaling_configuration(input);
        self
    }
    /// <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_serverless_v2_scaling_configuration(
        mut self,
        input: std::option::Option<crate::types::ServerlessV2ScalingConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_serverless_v2_scaling_configuration(input);
        self
    }
    /// <p>The network type of the DB cluster.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p> <code>IPV4</code> </p> </li>
    /// <li> <p> <code>DUAL</code> </p> </li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn network_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_type(input.into());
        self
    }
    /// <p>The network type of the DB cluster.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p> <code>IPV4</code> </p> </li>
    /// <li> <p> <code>DUAL</code> </p> </li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_network_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_type(input);
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn db_system_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.db_system_id(input.into());
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_db_system_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_db_system_id(input);
        self
    }
    /// <p>A value that indicates whether to manage the master user password with Amazon Web Services Secrets Manager.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Can't manage the master user password with Amazon Web Services Secrets Manager if <code>MasterUserPassword</code> is specified.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn manage_master_user_password(mut self, input: bool) -> Self {
        self.inner = self.inner.manage_master_user_password(input);
        self
    }
    /// <p>A value that indicates whether to manage the master user password with Amazon Web Services Secrets Manager.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Can't manage the master user password with Amazon Web Services Secrets Manager if <code>MasterUserPassword</code> is specified.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_manage_master_user_password(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_manage_master_user_password(input);
        self
    }
    /// <p>The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager.</p>
    /// <p>This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and you must use a customer managed KMS key.</p>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn master_user_secret_kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.master_user_secret_kms_key_id(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager.</p>
    /// <p>This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and you must use a customer managed KMS key.</p>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_master_user_secret_kms_key_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_master_user_secret_kms_key_id(input);
        self
    }
}
