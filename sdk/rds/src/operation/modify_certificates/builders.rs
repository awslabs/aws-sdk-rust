// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_certificates::_modify_certificates_output::ModifyCertificatesOutputBuilder;

pub use crate::operation::modify_certificates::_modify_certificates_input::ModifyCertificatesInputBuilder;

impl crate::operation::modify_certificates::builders::ModifyCertificatesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::modify_certificates::ModifyCertificatesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_certificates::ModifyCertificatesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.modify_certificates();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ModifyCertificates`.
///
/// <p>Override the system-default Secure Sockets Layer/Transport Layer Security (SSL/TLS) certificate for Amazon RDS for new DB instances, or remove the override.</p>
/// <p>By using this operation, you can specify an RDS-approved SSL/TLS certificate for new DB instances that is different from the default certificate provided by RDS. You can also use this operation to remove the override, so that new DB instances use the default certificate provided by RDS.</p>
/// <p>You might need to override the default certificate in the following situations:</p>
/// <ul>
/// <li>
/// <p>You already migrated your applications to support the latest certificate authority (CA) certificate, but the new CA certificate is not yet the RDS default CA certificate for the specified Amazon Web Services Region.</p></li>
/// <li>
/// <p>RDS has already moved to a new default CA certificate for the specified Amazon Web Services Region, but you are still in the process of supporting the new CA certificate. In this case, you temporarily need additional time to finish your application changes.</p></li>
/// </ul>
/// <p>For more information about rotating your SSL/TLS certificate for RDS DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon RDS User Guide</i>.</p>
/// <p>For more information about rotating your SSL/TLS certificate for Aurora DB engines, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL-certificate-rotation.html"> Rotating Your SSL/TLS Certificate</a> in the <i>Amazon Aurora User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ModifyCertificatesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_certificates::builders::ModifyCertificatesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::modify_certificates::ModifyCertificatesOutput,
        crate::operation::modify_certificates::ModifyCertificatesError,
    > for ModifyCertificatesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::modify_certificates::ModifyCertificatesOutput,
            crate::operation::modify_certificates::ModifyCertificatesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ModifyCertificatesFluentBuilder {
    /// Creates a new `ModifyCertificates`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ModifyCertificates as a reference.
    pub fn as_input(&self) -> &crate::operation::modify_certificates::builders::ModifyCertificatesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_certificates::ModifyCertificatesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_certificates::ModifyCertificatesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::modify_certificates::ModifyCertificates::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::modify_certificates::ModifyCertificates::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::modify_certificates::ModifyCertificatesOutput,
        crate::operation::modify_certificates::ModifyCertificatesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The new default certificate identifier to override the current one with.</p>
    /// <p>To determine the valid values, use the <code>describe-certificates</code> CLI command or the <code>DescribeCertificates</code> API operation.</p>
    pub fn certificate_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.certificate_identifier(input.into());
        self
    }
    /// <p>The new default certificate identifier to override the current one with.</p>
    /// <p>To determine the valid values, use the <code>describe-certificates</code> CLI command or the <code>DescribeCertificates</code> API operation.</p>
    pub fn set_certificate_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_certificate_identifier(input);
        self
    }
    /// <p>The new default certificate identifier to override the current one with.</p>
    /// <p>To determine the valid values, use the <code>describe-certificates</code> CLI command or the <code>DescribeCertificates</code> API operation.</p>
    pub fn get_certificate_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_certificate_identifier()
    }
    /// <p>Specifies whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.</p>
    pub fn remove_customer_override(mut self, input: bool) -> Self {
        self.inner = self.inner.remove_customer_override(input);
        self
    }
    /// <p>Specifies whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.</p>
    pub fn set_remove_customer_override(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_remove_customer_override(input);
        self
    }
    /// <p>Specifies whether to remove the override for the default certificate. If the override is removed, the default certificate is the system default.</p>
    pub fn get_remove_customer_override(&self) -> &::std::option::Option<bool> {
        self.inner.get_remove_customer_override()
    }
}
