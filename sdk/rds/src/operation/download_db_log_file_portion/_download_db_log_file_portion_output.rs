// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This data type is used as a response element to <code>DownloadDBLogFilePortion</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DownloadDbLogFilePortionOutput {
    /// <p>Entries from the specified log file.</p>
    #[doc(hidden)]
    pub log_file_data: std::option::Option<std::string::String>,
    /// <p>A pagination token that can be used in a later <code>DownloadDBLogFilePortion</code> request.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    /// <p>Boolean value that if true, indicates there is more data to be downloaded.</p>
    #[doc(hidden)]
    pub additional_data_pending: bool,
    _request_id: Option<String>,
}
impl DownloadDbLogFilePortionOutput {
    /// <p>Entries from the specified log file.</p>
    pub fn log_file_data(&self) -> std::option::Option<&str> {
        self.log_file_data.as_deref()
    }
    /// <p>A pagination token that can be used in a later <code>DownloadDBLogFilePortion</code> request.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>Boolean value that if true, indicates there is more data to be downloaded.</p>
    pub fn additional_data_pending(&self) -> bool {
        self.additional_data_pending
    }
}
impl aws_http::request_id::RequestId for DownloadDbLogFilePortionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DownloadDbLogFilePortionOutput {
    /// Creates a new builder-style object to manufacture [`DownloadDbLogFilePortionOutput`](crate::operation::download_db_log_file_portion::DownloadDbLogFilePortionOutput).
    pub fn builder() -> crate::operation::download_db_log_file_portion::builders::DownloadDbLogFilePortionOutputBuilder{
        crate::operation::download_db_log_file_portion::builders::DownloadDbLogFilePortionOutputBuilder::default()
    }
}

/// A builder for [`DownloadDbLogFilePortionOutput`](crate::operation::download_db_log_file_portion::DownloadDbLogFilePortionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DownloadDbLogFilePortionOutputBuilder {
    pub(crate) log_file_data: std::option::Option<std::string::String>,
    pub(crate) marker: std::option::Option<std::string::String>,
    pub(crate) additional_data_pending: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl DownloadDbLogFilePortionOutputBuilder {
    /// <p>Entries from the specified log file.</p>
    pub fn log_file_data(mut self, input: impl Into<std::string::String>) -> Self {
        self.log_file_data = Some(input.into());
        self
    }
    /// <p>Entries from the specified log file.</p>
    pub fn set_log_file_data(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log_file_data = input;
        self
    }
    /// <p>A pagination token that can be used in a later <code>DownloadDBLogFilePortion</code> request.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>A pagination token that can be used in a later <code>DownloadDBLogFilePortion</code> request.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>Boolean value that if true, indicates there is more data to be downloaded.</p>
    pub fn additional_data_pending(mut self, input: bool) -> Self {
        self.additional_data_pending = Some(input);
        self
    }
    /// <p>Boolean value that if true, indicates there is more data to be downloaded.</p>
    pub fn set_additional_data_pending(mut self, input: std::option::Option<bool>) -> Self {
        self.additional_data_pending = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DownloadDbLogFilePortionOutput`](crate::operation::download_db_log_file_portion::DownloadDbLogFilePortionOutput).
    pub fn build(
        self,
    ) -> crate::operation::download_db_log_file_portion::DownloadDbLogFilePortionOutput {
        crate::operation::download_db_log_file_portion::DownloadDbLogFilePortionOutput {
            log_file_data: self.log_file_data,
            marker: self.marker,
            additional_data_pending: self.additional_data_pending.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
