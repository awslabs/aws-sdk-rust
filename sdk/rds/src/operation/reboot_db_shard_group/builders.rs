// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::reboot_db_shard_group::_reboot_db_shard_group_output::RebootDbShardGroupOutputBuilder;

pub use crate::operation::reboot_db_shard_group::_reboot_db_shard_group_input::RebootDbShardGroupInputBuilder;

impl crate::operation::reboot_db_shard_group::builders::RebootDbShardGroupInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::reboot_db_shard_group::RebootDbShardGroupOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::reboot_db_shard_group::RebootDBShardGroupError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.reboot_db_shard_group();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RebootDBShardGroup`.
///
/// <p>You might need to reboot your DB shard group, usually for maintenance reasons. For example, if you make certain modifications, reboot the DB shard group for the changes to take effect.</p>
/// <p>This operation applies only to Aurora Limitless Database DBb shard groups.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RebootDBShardGroupFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::reboot_db_shard_group::builders::RebootDbShardGroupInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::reboot_db_shard_group::RebootDbShardGroupOutput,
        crate::operation::reboot_db_shard_group::RebootDBShardGroupError,
    > for RebootDBShardGroupFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::reboot_db_shard_group::RebootDbShardGroupOutput,
            crate::operation::reboot_db_shard_group::RebootDBShardGroupError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RebootDBShardGroupFluentBuilder {
    /// Creates a new `RebootDBShardGroup`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RebootDBShardGroup as a reference.
    pub fn as_input(&self) -> &crate::operation::reboot_db_shard_group::builders::RebootDbShardGroupInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::reboot_db_shard_group::RebootDbShardGroupOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::reboot_db_shard_group::RebootDBShardGroupError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::reboot_db_shard_group::RebootDBShardGroup::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::reboot_db_shard_group::RebootDBShardGroup::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::reboot_db_shard_group::RebootDbShardGroupOutput,
        crate::operation::reboot_db_shard_group::RebootDBShardGroupError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the DB shard group to reboot.</p>
    pub fn db_shard_group_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_shard_group_identifier(input.into());
        self
    }
    /// <p>The name of the DB shard group to reboot.</p>
    pub fn set_db_shard_group_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_shard_group_identifier(input);
        self
    }
    /// <p>The name of the DB shard group to reboot.</p>
    pub fn get_db_shard_group_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_shard_group_identifier()
    }
}
