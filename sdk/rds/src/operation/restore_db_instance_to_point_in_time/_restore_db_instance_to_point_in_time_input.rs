// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RestoreDbInstanceToPointInTimeInput {
    /// <p>The identifier of the source DB instance from which to restore.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DB instance.</p></li>
    /// </ul>
    pub source_db_instance_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of the new DB instance to create.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    pub target_db_instance_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The date and time to restore from.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a time in Universal Coordinated Time (UTC) format.</p></li>
    /// <li>
    /// <p>Must be before the latest restorable time for the DB instance.</p></li>
    /// <li>
    /// <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled.</p></li>
    /// </ul>
    /// <p>Example: <code>2009-09-07T23:45:00Z</code></p>
    pub restore_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Specifies whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be specified if the <code>RestoreTime</code> parameter is provided.</p></li>
    /// </ul>
    pub use_latest_restorable_time: ::std::option::Option<bool>,
    /// <p>The compute and memory capacity of the Amazon RDS DB instance, for example db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Default: The same DB instance class as the original DB instance.</p>
    pub db_instance_class: ::std::option::Option<::std::string::String>,
    /// <p>The port number on which the database accepts connections.</p>
    /// <p>Default: The same port as the original DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>The value must be <code>1150-65535</code>.</p></li>
    /// </ul>
    pub port: ::std::option::Option<i32>,
    /// <p>The Availability Zone (AZ) where the DB instance will be created.</p>
    /// <p>Default: A random, system-chosen Availability Zone.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p></li>
    /// </ul>
    /// <p>Example: <code>us-east-1a</code></p>
    pub availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The DB subnet group name to use for the new instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB subnet group.</p></li>
    /// </ul>
    /// <p>Example: <code>mydbsubnetgroup</code></p>
    pub db_subnet_group_name: ::std::option::Option<::std::string::String>,
    /// <p>Secifies whether the DB instance is a Multi-AZ deployment.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p></li>
    /// </ul>
    pub multi_az: ::std::option::Option<bool>,
    /// <p>Specifies whether the DB instance is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    pub publicly_accessible: ::std::option::Option<bool>,
    /// <p>Specifies whether minor version upgrades are applied automatically to the DB instance during the maintenance window.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub auto_minor_version_upgrade: ::std::option::Option<bool>,
    /// <p>The license model information for the restored DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Valid Values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code></p>
    /// <p>Default: Same as the source.</p>
    pub license_model: ::std::option::Option<::std::string::String>,
    /// <p>The database name for the restored DB instance.</p>
    /// <p>This parameter doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// <li>
    /// <p>RDS for Db2</p></li>
    /// <li>
    /// <p>RDS for MariaDB</p></li>
    /// <li>
    /// <p>RDS for MySQL</p></li>
    /// </ul>
    pub db_name: ::std::option::Option<::std::string::String>,
    /// <p>The database engine to use for the new instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>db2-ae</code></p></li>
    /// <li>
    /// <p><code>db2-se</code></p></li>
    /// <li>
    /// <p><code>mariadb</code></p></li>
    /// <li>
    /// <p><code>mysql</code></p></li>
    /// <li>
    /// <p><code>oracle-ee</code></p></li>
    /// <li>
    /// <p><code>oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>oracle-se2</code></p></li>
    /// <li>
    /// <p><code>oracle-se2-cdb</code></p></li>
    /// <li>
    /// <p><code>postgres</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ex</code></p></li>
    /// <li>
    /// <p><code>sqlserver-web</code></p></li>
    /// </ul>
    /// <p>Default: The same as source</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be compatible with the engine of the source.</p></li>
    /// </ul>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to initially allocate for the DB instance.</p>
    /// <p>This setting doesn't apply to SQL Server.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be an integer greater than 1000.</p></li>
    /// </ul>
    pub iops: ::std::option::Option<i32>,
    /// <p>The name of the option group to use for the restored DB instance.</p>
    /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance after it is associated with a DB instance</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub option_group_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    pub copy_tags_to_snapshot: ::std::option::Option<bool>,
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i></p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The storage type to associate with the DB instance.</p>
    /// <p>Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code></p>
    /// <p>Default: <code>io1</code>, if the <code>Iops</code> parameter is specified. Otherwise, <code>gp2</code>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code>, you must also include a value for the <code>Iops</code> parameter.</p></li>
    /// </ul>
    pub storage_type: ::std::option::Option<::std::string::String>,
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub tde_credential_arn: ::std::option::Option<::std::string::String>,
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub tde_credential_password: ::std::option::Option<::std::string::String>,
    /// <p>A list of EC2 VPC security groups to associate with this DB instance.</p>
    /// <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
    pub vpc_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The Active Directory directory ID to restore the DB instance in. Create the domain before running this command. Currently, you can create only the MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub domain_iam_role_name: ::std::option::Option<::std::string::String>,
    /// <p>The fully qualified domain name (FQDN) of an Active Directory domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>mymanagedADtest.mymanagedAD.mydomain</code></p>
    pub domain_fqdn: ::std::option::Option<::std::string::String>,
    /// <p>The Active Directory organizational unit for your DB instance to join.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the distinguished name format.</p></li>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code></p>
    pub domain_ou: ::std::option::Option<::std::string::String>,
    /// <p>The ARN for the Secrets Manager secret with the credentials for the user joining the domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code></p>
    pub domain_auth_secret_arn: ::std::option::Option<::std::string::String>,
    /// <p>The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.</p></li>
    /// </ul>
    /// <p>Example: <code>123.124.125.126,234.235.236.237</code></p>
    pub domain_dns_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information about IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i></p>
    pub enable_iam_database_authentication: ::std::option::Option<bool>,
    /// <p>The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub enable_cloudwatch_logs_exports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub processor_features: ::std::option::Option<::std::vec::Vec<crate::types::ProcessorFeature>>,
    /// <p>Specifies whether the DB instance class of the DB instance uses its default processor features.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub use_default_processor_features: ::std::option::Option<bool>,
    /// <p>The name of the DB parameter group to associate with this DB instance.</p>
    /// <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB parameter group.</p></li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    pub db_parameter_group_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p>
    pub deletion_protection: ::std::option::Option<bool>,
    /// <p>The resource ID of the source DB instance from which to restore.</p>
    pub source_dbi_resource_id: ::std::option::Option<::std::string::String>,
    /// <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    /// <p>For more information about this setting, including limitations that apply to it, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling"> Managing capacity automatically with Amazon RDS storage autoscaling</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub max_allocated_storage: ::std::option::Option<i32>,
    /// <p>The Amazon Resource Name (ARN) of the replicated automated backups from which to restore, for example, <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub source_db_instance_automated_backups_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP</i> provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub enable_customer_owned_ip: ::std::option::Option<bool>,
    /// <p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>The profile must exist in your account.</p></li>
    /// <li>
    /// <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p></li>
    /// <li>
    /// <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p></li>
    /// </ul>
    /// <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting is required for RDS Custom.</p>
    pub custom_iam_instance_profile: ::std::option::Option<::std::string::String>,
    /// <p>The location for storing automated backups and manual snapshots for the restored DB instance.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>outposts</code> (Amazon Web Services Outposts)</p></li>
    /// <li>
    /// <p><code>region</code> (Amazon Web Services Region)</p></li>
    /// </ul>
    /// <p>Default: <code>region</code></p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub backup_target: ::std::option::Option<::std::string::String>,
    /// <p>The network type of the DB instance.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IPV4</code></p></li>
    /// <li>
    /// <p><code>DUAL</code></p></li>
    /// </ul>
    pub network_type: ::std::option::Option<::std::string::String>,
    /// <p>The storage throughput value for the DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom or Amazon Aurora.</p>
    pub storage_throughput: ::std::option::Option<i32>,
    /// <p>The amount of storage (in gibibytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>.</p><note>
    /// <p>Be sure to allocate enough storage for your new DB instance so that the restore operation can succeed. You can also allocate additional storage for future growth.</p>
    /// </note>
    pub allocated_storage: ::std::option::Option<i32>,
    /// <p>Specifies whether to enable a dedicated log volume (DLV) for the DB instance.</p>
    pub dedicated_log_volume: ::std::option::Option<bool>,
    /// <p>The CA certificate identifier to use for the DB instance's server certificate.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub ca_certificate_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The life cycle type for this DB instance.</p><note>
    /// <p>By default, this value is set to <code>open-source-rds-extended-support</code>, which enrolls your DB instance into Amazon RDS Extended Support. At the end of standard support, you can avoid charges for Extended Support by setting the value to <code>open-source-rds-extended-support-disabled</code>. In this case, RDS automatically upgrades your restored DB instance to a higher engine version, if the major engine version is past its end of standard support date.</p>
    /// </note>
    /// <p>You can use this setting to enroll your DB instance into Amazon RDS Extended Support. With RDS Extended Support, you can run the selected major engine version on your DB instance past the end of standard support for that engine version. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting applies only to RDS for MySQL and RDS for PostgreSQL. For Amazon Aurora DB instances, the life cycle type is managed by the DB cluster.</p>
    /// <p>Valid Values: <code>open-source-rds-extended-support | open-source-rds-extended-support-disabled</code></p>
    /// <p>Default: <code>open-source-rds-extended-support</code></p>
    pub engine_lifecycle_support: ::std::option::Option<::std::string::String>,
}
impl RestoreDbInstanceToPointInTimeInput {
    /// <p>The identifier of the source DB instance from which to restore.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DB instance.</p></li>
    /// </ul>
    pub fn source_db_instance_identifier(&self) -> ::std::option::Option<&str> {
        self.source_db_instance_identifier.as_deref()
    }
    /// <p>The name of the new DB instance to create.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    pub fn target_db_instance_identifier(&self) -> ::std::option::Option<&str> {
        self.target_db_instance_identifier.as_deref()
    }
    /// <p>The date and time to restore from.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a time in Universal Coordinated Time (UTC) format.</p></li>
    /// <li>
    /// <p>Must be before the latest restorable time for the DB instance.</p></li>
    /// <li>
    /// <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled.</p></li>
    /// </ul>
    /// <p>Example: <code>2009-09-07T23:45:00Z</code></p>
    pub fn restore_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.restore_time.as_ref()
    }
    /// <p>Specifies whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be specified if the <code>RestoreTime</code> parameter is provided.</p></li>
    /// </ul>
    pub fn use_latest_restorable_time(&self) -> ::std::option::Option<bool> {
        self.use_latest_restorable_time
    }
    /// <p>The compute and memory capacity of the Amazon RDS DB instance, for example db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Default: The same DB instance class as the original DB instance.</p>
    pub fn db_instance_class(&self) -> ::std::option::Option<&str> {
        self.db_instance_class.as_deref()
    }
    /// <p>The port number on which the database accepts connections.</p>
    /// <p>Default: The same port as the original DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>The value must be <code>1150-65535</code>.</p></li>
    /// </ul>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// <p>The Availability Zone (AZ) where the DB instance will be created.</p>
    /// <p>Default: A random, system-chosen Availability Zone.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p></li>
    /// </ul>
    /// <p>Example: <code>us-east-1a</code></p>
    pub fn availability_zone(&self) -> ::std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The DB subnet group name to use for the new instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB subnet group.</p></li>
    /// </ul>
    /// <p>Example: <code>mydbsubnetgroup</code></p>
    pub fn db_subnet_group_name(&self) -> ::std::option::Option<&str> {
        self.db_subnet_group_name.as_deref()
    }
    /// <p>Secifies whether the DB instance is a Multi-AZ deployment.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p></li>
    /// </ul>
    pub fn multi_az(&self) -> ::std::option::Option<bool> {
        self.multi_az
    }
    /// <p>Specifies whether the DB instance is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    pub fn publicly_accessible(&self) -> ::std::option::Option<bool> {
        self.publicly_accessible
    }
    /// <p>Specifies whether minor version upgrades are applied automatically to the DB instance during the maintenance window.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn auto_minor_version_upgrade(&self) -> ::std::option::Option<bool> {
        self.auto_minor_version_upgrade
    }
    /// <p>The license model information for the restored DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Valid Values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code></p>
    /// <p>Default: Same as the source.</p>
    pub fn license_model(&self) -> ::std::option::Option<&str> {
        self.license_model.as_deref()
    }
    /// <p>The database name for the restored DB instance.</p>
    /// <p>This parameter doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// <li>
    /// <p>RDS for Db2</p></li>
    /// <li>
    /// <p>RDS for MariaDB</p></li>
    /// <li>
    /// <p>RDS for MySQL</p></li>
    /// </ul>
    pub fn db_name(&self) -> ::std::option::Option<&str> {
        self.db_name.as_deref()
    }
    /// <p>The database engine to use for the new instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>db2-ae</code></p></li>
    /// <li>
    /// <p><code>db2-se</code></p></li>
    /// <li>
    /// <p><code>mariadb</code></p></li>
    /// <li>
    /// <p><code>mysql</code></p></li>
    /// <li>
    /// <p><code>oracle-ee</code></p></li>
    /// <li>
    /// <p><code>oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>oracle-se2</code></p></li>
    /// <li>
    /// <p><code>oracle-se2-cdb</code></p></li>
    /// <li>
    /// <p><code>postgres</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ex</code></p></li>
    /// <li>
    /// <p><code>sqlserver-web</code></p></li>
    /// </ul>
    /// <p>Default: The same as source</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be compatible with the engine of the source.</p></li>
    /// </ul>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to initially allocate for the DB instance.</p>
    /// <p>This setting doesn't apply to SQL Server.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be an integer greater than 1000.</p></li>
    /// </ul>
    pub fn iops(&self) -> ::std::option::Option<i32> {
        self.iops
    }
    /// <p>The name of the option group to use for the restored DB instance.</p>
    /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance after it is associated with a DB instance</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn option_group_name(&self) -> ::std::option::Option<&str> {
        self.option_group_name.as_deref()
    }
    /// <p>Specifies whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    pub fn copy_tags_to_snapshot(&self) -> ::std::option::Option<bool> {
        self.copy_tags_to_snapshot
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The storage type to associate with the DB instance.</p>
    /// <p>Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code></p>
    /// <p>Default: <code>io1</code>, if the <code>Iops</code> parameter is specified. Otherwise, <code>gp2</code>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code>, you must also include a value for the <code>Iops</code> parameter.</p></li>
    /// </ul>
    pub fn storage_type(&self) -> ::std::option::Option<&str> {
        self.storage_type.as_deref()
    }
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn tde_credential_arn(&self) -> ::std::option::Option<&str> {
        self.tde_credential_arn.as_deref()
    }
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn tde_credential_password(&self) -> ::std::option::Option<&str> {
        self.tde_credential_password.as_deref()
    }
    /// <p>A list of EC2 VPC security groups to associate with this DB instance.</p>
    /// <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vpc_security_group_ids.is_none()`.
    pub fn vpc_security_group_ids(&self) -> &[::std::string::String] {
        self.vpc_security_group_ids.as_deref().unwrap_or_default()
    }
    /// <p>The Active Directory directory ID to restore the DB instance in. Create the domain before running this command. Currently, you can create only the MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn domain_iam_role_name(&self) -> ::std::option::Option<&str> {
        self.domain_iam_role_name.as_deref()
    }
    /// <p>The fully qualified domain name (FQDN) of an Active Directory domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>mymanagedADtest.mymanagedAD.mydomain</code></p>
    pub fn domain_fqdn(&self) -> ::std::option::Option<&str> {
        self.domain_fqdn.as_deref()
    }
    /// <p>The Active Directory organizational unit for your DB instance to join.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the distinguished name format.</p></li>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code></p>
    pub fn domain_ou(&self) -> ::std::option::Option<&str> {
        self.domain_ou.as_deref()
    }
    /// <p>The ARN for the Secrets Manager secret with the credentials for the user joining the domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code></p>
    pub fn domain_auth_secret_arn(&self) -> ::std::option::Option<&str> {
        self.domain_auth_secret_arn.as_deref()
    }
    /// <p>The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.</p></li>
    /// </ul>
    /// <p>Example: <code>123.124.125.126,234.235.236.237</code></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.domain_dns_ips.is_none()`.
    pub fn domain_dns_ips(&self) -> &[::std::string::String] {
        self.domain_dns_ips.as_deref().unwrap_or_default()
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information about IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i></p>
    pub fn enable_iam_database_authentication(&self) -> ::std::option::Option<bool> {
        self.enable_iam_database_authentication
    }
    /// <p>The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.enable_cloudwatch_logs_exports.is_none()`.
    pub fn enable_cloudwatch_logs_exports(&self) -> &[::std::string::String] {
        self.enable_cloudwatch_logs_exports.as_deref().unwrap_or_default()
    }
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.processor_features.is_none()`.
    pub fn processor_features(&self) -> &[crate::types::ProcessorFeature] {
        self.processor_features.as_deref().unwrap_or_default()
    }
    /// <p>Specifies whether the DB instance class of the DB instance uses its default processor features.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn use_default_processor_features(&self) -> ::std::option::Option<bool> {
        self.use_default_processor_features
    }
    /// <p>The name of the DB parameter group to associate with this DB instance.</p>
    /// <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB parameter group.</p></li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    pub fn db_parameter_group_name(&self) -> ::std::option::Option<&str> {
        self.db_parameter_group_name.as_deref()
    }
    /// <p>Specifies whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p>
    pub fn deletion_protection(&self) -> ::std::option::Option<bool> {
        self.deletion_protection
    }
    /// <p>The resource ID of the source DB instance from which to restore.</p>
    pub fn source_dbi_resource_id(&self) -> ::std::option::Option<&str> {
        self.source_dbi_resource_id.as_deref()
    }
    /// <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    /// <p>For more information about this setting, including limitations that apply to it, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling"> Managing capacity automatically with Amazon RDS storage autoscaling</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn max_allocated_storage(&self) -> ::std::option::Option<i32> {
        self.max_allocated_storage
    }
    /// <p>The Amazon Resource Name (ARN) of the replicated automated backups from which to restore, for example, <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn source_db_instance_automated_backups_arn(&self) -> ::std::option::Option<&str> {
        self.source_db_instance_automated_backups_arn.as_deref()
    }
    /// <p>Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP</i> provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub fn enable_customer_owned_ip(&self) -> ::std::option::Option<bool> {
        self.enable_customer_owned_ip
    }
    /// <p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>The profile must exist in your account.</p></li>
    /// <li>
    /// <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p></li>
    /// <li>
    /// <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p></li>
    /// </ul>
    /// <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting is required for RDS Custom.</p>
    pub fn custom_iam_instance_profile(&self) -> ::std::option::Option<&str> {
        self.custom_iam_instance_profile.as_deref()
    }
    /// <p>The location for storing automated backups and manual snapshots for the restored DB instance.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>outposts</code> (Amazon Web Services Outposts)</p></li>
    /// <li>
    /// <p><code>region</code> (Amazon Web Services Region)</p></li>
    /// </ul>
    /// <p>Default: <code>region</code></p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn backup_target(&self) -> ::std::option::Option<&str> {
        self.backup_target.as_deref()
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IPV4</code></p></li>
    /// <li>
    /// <p><code>DUAL</code></p></li>
    /// </ul>
    pub fn network_type(&self) -> ::std::option::Option<&str> {
        self.network_type.as_deref()
    }
    /// <p>The storage throughput value for the DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom or Amazon Aurora.</p>
    pub fn storage_throughput(&self) -> ::std::option::Option<i32> {
        self.storage_throughput
    }
    /// <p>The amount of storage (in gibibytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>.</p><note>
    /// <p>Be sure to allocate enough storage for your new DB instance so that the restore operation can succeed. You can also allocate additional storage for future growth.</p>
    /// </note>
    pub fn allocated_storage(&self) -> ::std::option::Option<i32> {
        self.allocated_storage
    }
    /// <p>Specifies whether to enable a dedicated log volume (DLV) for the DB instance.</p>
    pub fn dedicated_log_volume(&self) -> ::std::option::Option<bool> {
        self.dedicated_log_volume
    }
    /// <p>The CA certificate identifier to use for the DB instance's server certificate.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn ca_certificate_identifier(&self) -> ::std::option::Option<&str> {
        self.ca_certificate_identifier.as_deref()
    }
    /// <p>The life cycle type for this DB instance.</p><note>
    /// <p>By default, this value is set to <code>open-source-rds-extended-support</code>, which enrolls your DB instance into Amazon RDS Extended Support. At the end of standard support, you can avoid charges for Extended Support by setting the value to <code>open-source-rds-extended-support-disabled</code>. In this case, RDS automatically upgrades your restored DB instance to a higher engine version, if the major engine version is past its end of standard support date.</p>
    /// </note>
    /// <p>You can use this setting to enroll your DB instance into Amazon RDS Extended Support. With RDS Extended Support, you can run the selected major engine version on your DB instance past the end of standard support for that engine version. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting applies only to RDS for MySQL and RDS for PostgreSQL. For Amazon Aurora DB instances, the life cycle type is managed by the DB cluster.</p>
    /// <p>Valid Values: <code>open-source-rds-extended-support | open-source-rds-extended-support-disabled</code></p>
    /// <p>Default: <code>open-source-rds-extended-support</code></p>
    pub fn engine_lifecycle_support(&self) -> ::std::option::Option<&str> {
        self.engine_lifecycle_support.as_deref()
    }
}
impl RestoreDbInstanceToPointInTimeInput {
    /// Creates a new builder-style object to manufacture [`RestoreDbInstanceToPointInTimeInput`](crate::operation::restore_db_instance_to_point_in_time::RestoreDbInstanceToPointInTimeInput).
    pub fn builder() -> crate::operation::restore_db_instance_to_point_in_time::builders::RestoreDbInstanceToPointInTimeInputBuilder {
        crate::operation::restore_db_instance_to_point_in_time::builders::RestoreDbInstanceToPointInTimeInputBuilder::default()
    }
}

/// A builder for [`RestoreDbInstanceToPointInTimeInput`](crate::operation::restore_db_instance_to_point_in_time::RestoreDbInstanceToPointInTimeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RestoreDbInstanceToPointInTimeInputBuilder {
    pub(crate) source_db_instance_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) target_db_instance_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) restore_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) use_latest_restorable_time: ::std::option::Option<bool>,
    pub(crate) db_instance_class: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) db_subnet_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) multi_az: ::std::option::Option<bool>,
    pub(crate) publicly_accessible: ::std::option::Option<bool>,
    pub(crate) auto_minor_version_upgrade: ::std::option::Option<bool>,
    pub(crate) license_model: ::std::option::Option<::std::string::String>,
    pub(crate) db_name: ::std::option::Option<::std::string::String>,
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) iops: ::std::option::Option<i32>,
    pub(crate) option_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) copy_tags_to_snapshot: ::std::option::Option<bool>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) storage_type: ::std::option::Option<::std::string::String>,
    pub(crate) tde_credential_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tde_credential_password: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) domain_iam_role_name: ::std::option::Option<::std::string::String>,
    pub(crate) domain_fqdn: ::std::option::Option<::std::string::String>,
    pub(crate) domain_ou: ::std::option::Option<::std::string::String>,
    pub(crate) domain_auth_secret_arn: ::std::option::Option<::std::string::String>,
    pub(crate) domain_dns_ips: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) enable_iam_database_authentication: ::std::option::Option<bool>,
    pub(crate) enable_cloudwatch_logs_exports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) processor_features: ::std::option::Option<::std::vec::Vec<crate::types::ProcessorFeature>>,
    pub(crate) use_default_processor_features: ::std::option::Option<bool>,
    pub(crate) db_parameter_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) deletion_protection: ::std::option::Option<bool>,
    pub(crate) source_dbi_resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) max_allocated_storage: ::std::option::Option<i32>,
    pub(crate) source_db_instance_automated_backups_arn: ::std::option::Option<::std::string::String>,
    pub(crate) enable_customer_owned_ip: ::std::option::Option<bool>,
    pub(crate) custom_iam_instance_profile: ::std::option::Option<::std::string::String>,
    pub(crate) backup_target: ::std::option::Option<::std::string::String>,
    pub(crate) network_type: ::std::option::Option<::std::string::String>,
    pub(crate) storage_throughput: ::std::option::Option<i32>,
    pub(crate) allocated_storage: ::std::option::Option<i32>,
    pub(crate) dedicated_log_volume: ::std::option::Option<bool>,
    pub(crate) ca_certificate_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) engine_lifecycle_support: ::std::option::Option<::std::string::String>,
}
impl RestoreDbInstanceToPointInTimeInputBuilder {
    /// <p>The identifier of the source DB instance from which to restore.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DB instance.</p></li>
    /// </ul>
    pub fn source_db_instance_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_db_instance_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the source DB instance from which to restore.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DB instance.</p></li>
    /// </ul>
    pub fn set_source_db_instance_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_db_instance_identifier = input;
        self
    }
    /// <p>The identifier of the source DB instance from which to restore.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DB instance.</p></li>
    /// </ul>
    pub fn get_source_db_instance_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_db_instance_identifier
    }
    /// <p>The name of the new DB instance to create.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// This field is required.
    pub fn target_db_instance_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_db_instance_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the new DB instance to create.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    pub fn set_target_db_instance_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_db_instance_identifier = input;
        self
    }
    /// <p>The name of the new DB instance to create.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    pub fn get_target_db_instance_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_db_instance_identifier
    }
    /// <p>The date and time to restore from.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a time in Universal Coordinated Time (UTC) format.</p></li>
    /// <li>
    /// <p>Must be before the latest restorable time for the DB instance.</p></li>
    /// <li>
    /// <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled.</p></li>
    /// </ul>
    /// <p>Example: <code>2009-09-07T23:45:00Z</code></p>
    pub fn restore_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.restore_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time to restore from.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a time in Universal Coordinated Time (UTC) format.</p></li>
    /// <li>
    /// <p>Must be before the latest restorable time for the DB instance.</p></li>
    /// <li>
    /// <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled.</p></li>
    /// </ul>
    /// <p>Example: <code>2009-09-07T23:45:00Z</code></p>
    pub fn set_restore_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.restore_time = input;
        self
    }
    /// <p>The date and time to restore from.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a time in Universal Coordinated Time (UTC) format.</p></li>
    /// <li>
    /// <p>Must be before the latest restorable time for the DB instance.</p></li>
    /// <li>
    /// <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled.</p></li>
    /// </ul>
    /// <p>Example: <code>2009-09-07T23:45:00Z</code></p>
    pub fn get_restore_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.restore_time
    }
    /// <p>Specifies whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be specified if the <code>RestoreTime</code> parameter is provided.</p></li>
    /// </ul>
    pub fn use_latest_restorable_time(mut self, input: bool) -> Self {
        self.use_latest_restorable_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be specified if the <code>RestoreTime</code> parameter is provided.</p></li>
    /// </ul>
    pub fn set_use_latest_restorable_time(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_latest_restorable_time = input;
        self
    }
    /// <p>Specifies whether the DB instance is restored from the latest backup time. By default, the DB instance isn't restored from the latest backup time.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be specified if the <code>RestoreTime</code> parameter is provided.</p></li>
    /// </ul>
    pub fn get_use_latest_restorable_time(&self) -> &::std::option::Option<bool> {
        &self.use_latest_restorable_time
    }
    /// <p>The compute and memory capacity of the Amazon RDS DB instance, for example db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Default: The same DB instance class as the original DB instance.</p>
    pub fn db_instance_class(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_instance_class = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The compute and memory capacity of the Amazon RDS DB instance, for example db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Default: The same DB instance class as the original DB instance.</p>
    pub fn set_db_instance_class(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_instance_class = input;
        self
    }
    /// <p>The compute and memory capacity of the Amazon RDS DB instance, for example db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Default: The same DB instance class as the original DB instance.</p>
    pub fn get_db_instance_class(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_instance_class
    }
    /// <p>The port number on which the database accepts connections.</p>
    /// <p>Default: The same port as the original DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>The value must be <code>1150-65535</code>.</p></li>
    /// </ul>
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port number on which the database accepts connections.</p>
    /// <p>Default: The same port as the original DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>The value must be <code>1150-65535</code>.</p></li>
    /// </ul>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port number on which the database accepts connections.</p>
    /// <p>Default: The same port as the original DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>The value must be <code>1150-65535</code>.</p></li>
    /// </ul>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The Availability Zone (AZ) where the DB instance will be created.</p>
    /// <p>Default: A random, system-chosen Availability Zone.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p></li>
    /// </ul>
    /// <p>Example: <code>us-east-1a</code></p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone (AZ) where the DB instance will be created.</p>
    /// <p>Default: A random, system-chosen Availability Zone.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p></li>
    /// </ul>
    /// <p>Example: <code>us-east-1a</code></p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The Availability Zone (AZ) where the DB instance will be created.</p>
    /// <p>Default: A random, system-chosen Availability Zone.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p></li>
    /// </ul>
    /// <p>Example: <code>us-east-1a</code></p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.availability_zone
    }
    /// <p>The DB subnet group name to use for the new instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB subnet group.</p></li>
    /// </ul>
    /// <p>Example: <code>mydbsubnetgroup</code></p>
    pub fn db_subnet_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_subnet_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DB subnet group name to use for the new instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB subnet group.</p></li>
    /// </ul>
    /// <p>Example: <code>mydbsubnetgroup</code></p>
    pub fn set_db_subnet_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_subnet_group_name = input;
        self
    }
    /// <p>The DB subnet group name to use for the new instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB subnet group.</p></li>
    /// </ul>
    /// <p>Example: <code>mydbsubnetgroup</code></p>
    pub fn get_db_subnet_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_subnet_group_name
    }
    /// <p>Secifies whether the DB instance is a Multi-AZ deployment.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p></li>
    /// </ul>
    pub fn multi_az(mut self, input: bool) -> Self {
        self.multi_az = ::std::option::Option::Some(input);
        self
    }
    /// <p>Secifies whether the DB instance is a Multi-AZ deployment.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p></li>
    /// </ul>
    pub fn set_multi_az(mut self, input: ::std::option::Option<bool>) -> Self {
        self.multi_az = input;
        self
    }
    /// <p>Secifies whether the DB instance is a Multi-AZ deployment.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p></li>
    /// </ul>
    pub fn get_multi_az(&self) -> &::std::option::Option<bool> {
        &self.multi_az
    }
    /// <p>Specifies whether the DB instance is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.publicly_accessible = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the DB instance is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    pub fn set_publicly_accessible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.publicly_accessible = input;
        self
    }
    /// <p>Specifies whether the DB instance is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access isn't permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    pub fn get_publicly_accessible(&self) -> &::std::option::Option<bool> {
        &self.publicly_accessible
    }
    /// <p>Specifies whether minor version upgrades are applied automatically to the DB instance during the maintenance window.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
        self.auto_minor_version_upgrade = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether minor version upgrades are applied automatically to the DB instance during the maintenance window.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_auto_minor_version_upgrade(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_minor_version_upgrade = input;
        self
    }
    /// <p>Specifies whether minor version upgrades are applied automatically to the DB instance during the maintenance window.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_auto_minor_version_upgrade(&self) -> &::std::option::Option<bool> {
        &self.auto_minor_version_upgrade
    }
    /// <p>The license model information for the restored DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Valid Values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code></p>
    /// <p>Default: Same as the source.</p>
    pub fn license_model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.license_model = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The license model information for the restored DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Valid Values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code></p>
    /// <p>Default: Same as the source.</p>
    pub fn set_license_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.license_model = input;
        self
    }
    /// <p>The license model information for the restored DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Valid Values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code></p>
    /// <p>Default: Same as the source.</p>
    pub fn get_license_model(&self) -> &::std::option::Option<::std::string::String> {
        &self.license_model
    }
    /// <p>The database name for the restored DB instance.</p>
    /// <p>This parameter doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// <li>
    /// <p>RDS for Db2</p></li>
    /// <li>
    /// <p>RDS for MariaDB</p></li>
    /// <li>
    /// <p>RDS for MySQL</p></li>
    /// </ul>
    pub fn db_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database name for the restored DB instance.</p>
    /// <p>This parameter doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// <li>
    /// <p>RDS for Db2</p></li>
    /// <li>
    /// <p>RDS for MariaDB</p></li>
    /// <li>
    /// <p>RDS for MySQL</p></li>
    /// </ul>
    pub fn set_db_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_name = input;
        self
    }
    /// <p>The database name for the restored DB instance.</p>
    /// <p>This parameter doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// <li>
    /// <p>RDS for Db2</p></li>
    /// <li>
    /// <p>RDS for MariaDB</p></li>
    /// <li>
    /// <p>RDS for MySQL</p></li>
    /// </ul>
    pub fn get_db_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_name
    }
    /// <p>The database engine to use for the new instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>db2-ae</code></p></li>
    /// <li>
    /// <p><code>db2-se</code></p></li>
    /// <li>
    /// <p><code>mariadb</code></p></li>
    /// <li>
    /// <p><code>mysql</code></p></li>
    /// <li>
    /// <p><code>oracle-ee</code></p></li>
    /// <li>
    /// <p><code>oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>oracle-se2</code></p></li>
    /// <li>
    /// <p><code>oracle-se2-cdb</code></p></li>
    /// <li>
    /// <p><code>postgres</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ex</code></p></li>
    /// <li>
    /// <p><code>sqlserver-web</code></p></li>
    /// </ul>
    /// <p>Default: The same as source</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be compatible with the engine of the source.</p></li>
    /// </ul>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database engine to use for the new instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>db2-ae</code></p></li>
    /// <li>
    /// <p><code>db2-se</code></p></li>
    /// <li>
    /// <p><code>mariadb</code></p></li>
    /// <li>
    /// <p><code>mysql</code></p></li>
    /// <li>
    /// <p><code>oracle-ee</code></p></li>
    /// <li>
    /// <p><code>oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>oracle-se2</code></p></li>
    /// <li>
    /// <p><code>oracle-se2-cdb</code></p></li>
    /// <li>
    /// <p><code>postgres</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ex</code></p></li>
    /// <li>
    /// <p><code>sqlserver-web</code></p></li>
    /// </ul>
    /// <p>Default: The same as source</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be compatible with the engine of the source.</p></li>
    /// </ul>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The database engine to use for the new instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>db2-ae</code></p></li>
    /// <li>
    /// <p><code>db2-se</code></p></li>
    /// <li>
    /// <p><code>mariadb</code></p></li>
    /// <li>
    /// <p><code>mysql</code></p></li>
    /// <li>
    /// <p><code>oracle-ee</code></p></li>
    /// <li>
    /// <p><code>oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>oracle-se2</code></p></li>
    /// <li>
    /// <p><code>oracle-se2-cdb</code></p></li>
    /// <li>
    /// <p><code>postgres</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ex</code></p></li>
    /// <li>
    /// <p><code>sqlserver-web</code></p></li>
    /// </ul>
    /// <p>Default: The same as source</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be compatible with the engine of the source.</p></li>
    /// </ul>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to initially allocate for the DB instance.</p>
    /// <p>This setting doesn't apply to SQL Server.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be an integer greater than 1000.</p></li>
    /// </ul>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to initially allocate for the DB instance.</p>
    /// <p>This setting doesn't apply to SQL Server.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be an integer greater than 1000.</p></li>
    /// </ul>
    pub fn set_iops(mut self, input: ::std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to initially allocate for the DB instance.</p>
    /// <p>This setting doesn't apply to SQL Server.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be an integer greater than 1000.</p></li>
    /// </ul>
    pub fn get_iops(&self) -> &::std::option::Option<i32> {
        &self.iops
    }
    /// <p>The name of the option group to use for the restored DB instance.</p>
    /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance after it is associated with a DB instance</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn option_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.option_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the option group to use for the restored DB instance.</p>
    /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance after it is associated with a DB instance</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_option_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.option_group_name = input;
        self
    }
    /// <p>The name of the option group to use for the restored DB instance.</p>
    /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance after it is associated with a DB instance</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_option_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.option_group_name
    }
    /// <p>Specifies whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
        self.copy_tags_to_snapshot = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    pub fn set_copy_tags_to_snapshot(mut self, input: ::std::option::Option<bool>) -> Self {
        self.copy_tags_to_snapshot = input;
        self
    }
    /// <p>Specifies whether to copy all tags from the restored DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    pub fn get_copy_tags_to_snapshot(&self) -> &::std::option::Option<bool> {
        &self.copy_tags_to_snapshot
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i></p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i></p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i></p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The storage type to associate with the DB instance.</p>
    /// <p>Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code></p>
    /// <p>Default: <code>io1</code>, if the <code>Iops</code> parameter is specified. Otherwise, <code>gp2</code>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code>, you must also include a value for the <code>Iops</code> parameter.</p></li>
    /// </ul>
    pub fn storage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The storage type to associate with the DB instance.</p>
    /// <p>Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code></p>
    /// <p>Default: <code>io1</code>, if the <code>Iops</code> parameter is specified. Otherwise, <code>gp2</code>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code>, you must also include a value for the <code>Iops</code> parameter.</p></li>
    /// </ul>
    pub fn set_storage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_type = input;
        self
    }
    /// <p>The storage type to associate with the DB instance.</p>
    /// <p>Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code></p>
    /// <p>Default: <code>io1</code>, if the <code>Iops</code> parameter is specified. Otherwise, <code>gp2</code>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code>, you must also include a value for the <code>Iops</code> parameter.</p></li>
    /// </ul>
    pub fn get_storage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_type
    }
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn tde_credential_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tde_credential_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_tde_credential_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tde_credential_arn = input;
        self
    }
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_tde_credential_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.tde_credential_arn
    }
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn tde_credential_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tde_credential_password = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_tde_credential_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tde_credential_password = input;
        self
    }
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_tde_credential_password(&self) -> &::std::option::Option<::std::string::String> {
        &self.tde_credential_password
    }
    /// Appends an item to `vpc_security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_group_ids`](Self::set_vpc_security_group_ids).
    ///
    /// <p>A list of EC2 VPC security groups to associate with this DB instance.</p>
    /// <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
    pub fn vpc_security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.vpc_security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.vpc_security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of EC2 VPC security groups to associate with this DB instance.</p>
    /// <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
    pub fn set_vpc_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.vpc_security_group_ids = input;
        self
    }
    /// <p>A list of EC2 VPC security groups to associate with this DB instance.</p>
    /// <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
    pub fn get_vpc_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.vpc_security_group_ids
    }
    /// <p>The Active Directory directory ID to restore the DB instance in. Create the domain before running this command. Currently, you can create only the MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Active Directory directory ID to restore the DB instance in. Create the domain before running this command. Currently, you can create only the MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The Active Directory directory ID to restore the DB instance in. Create the domain before running this command. Currently, you can create only the MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn domain_iam_role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_iam_role_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn set_domain_iam_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_iam_role_name = input;
        self
    }
    /// <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn get_domain_iam_role_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_iam_role_name
    }
    /// <p>The fully qualified domain name (FQDN) of an Active Directory domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>mymanagedADtest.mymanagedAD.mydomain</code></p>
    pub fn domain_fqdn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_fqdn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fully qualified domain name (FQDN) of an Active Directory domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>mymanagedADtest.mymanagedAD.mydomain</code></p>
    pub fn set_domain_fqdn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_fqdn = input;
        self
    }
    /// <p>The fully qualified domain name (FQDN) of an Active Directory domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>mymanagedADtest.mymanagedAD.mydomain</code></p>
    pub fn get_domain_fqdn(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_fqdn
    }
    /// <p>The Active Directory organizational unit for your DB instance to join.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the distinguished name format.</p></li>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code></p>
    pub fn domain_ou(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_ou = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Active Directory organizational unit for your DB instance to join.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the distinguished name format.</p></li>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code></p>
    pub fn set_domain_ou(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_ou = input;
        self
    }
    /// <p>The Active Directory organizational unit for your DB instance to join.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the distinguished name format.</p></li>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code></p>
    pub fn get_domain_ou(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_ou
    }
    /// <p>The ARN for the Secrets Manager secret with the credentials for the user joining the domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code></p>
    pub fn domain_auth_secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_auth_secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN for the Secrets Manager secret with the credentials for the user joining the domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code></p>
    pub fn set_domain_auth_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_auth_secret_arn = input;
        self
    }
    /// <p>The ARN for the Secrets Manager secret with the credentials for the user joining the domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code></p>
    pub fn get_domain_auth_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_auth_secret_arn
    }
    /// Appends an item to `domain_dns_ips`.
    ///
    /// To override the contents of this collection use [`set_domain_dns_ips`](Self::set_domain_dns_ips).
    ///
    /// <p>The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.</p></li>
    /// </ul>
    /// <p>Example: <code>123.124.125.126,234.235.236.237</code></p>
    pub fn domain_dns_ips(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.domain_dns_ips.unwrap_or_default();
        v.push(input.into());
        self.domain_dns_ips = ::std::option::Option::Some(v);
        self
    }
    /// <p>The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.</p></li>
    /// </ul>
    /// <p>Example: <code>123.124.125.126,234.235.236.237</code></p>
    pub fn set_domain_dns_ips(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.domain_dns_ips = input;
        self
    }
    /// <p>The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.</p></li>
    /// </ul>
    /// <p>Example: <code>123.124.125.126,234.235.236.237</code></p>
    pub fn get_domain_dns_ips(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.domain_dns_ips
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information about IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i></p>
    pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
        self.enable_iam_database_authentication = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information about IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i></p>
    pub fn set_enable_iam_database_authentication(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_iam_database_authentication = input;
        self
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information about IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i></p>
    pub fn get_enable_iam_database_authentication(&self) -> &::std::option::Option<bool> {
        &self.enable_iam_database_authentication
    }
    /// Appends an item to `enable_cloudwatch_logs_exports`.
    ///
    /// To override the contents of this collection use [`set_enable_cloudwatch_logs_exports`](Self::set_enable_cloudwatch_logs_exports).
    ///
    /// <p>The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn enable_cloudwatch_logs_exports(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.enable_cloudwatch_logs_exports.unwrap_or_default();
        v.push(input.into());
        self.enable_cloudwatch_logs_exports = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_enable_cloudwatch_logs_exports(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.enable_cloudwatch_logs_exports = input;
        self
    }
    /// <p>The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_enable_cloudwatch_logs_exports(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.enable_cloudwatch_logs_exports
    }
    /// Appends an item to `processor_features`.
    ///
    /// To override the contents of this collection use [`set_processor_features`](Self::set_processor_features).
    ///
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn processor_features(mut self, input: crate::types::ProcessorFeature) -> Self {
        let mut v = self.processor_features.unwrap_or_default();
        v.push(input);
        self.processor_features = ::std::option::Option::Some(v);
        self
    }
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_processor_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProcessorFeature>>) -> Self {
        self.processor_features = input;
        self
    }
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_processor_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProcessorFeature>> {
        &self.processor_features
    }
    /// <p>Specifies whether the DB instance class of the DB instance uses its default processor features.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn use_default_processor_features(mut self, input: bool) -> Self {
        self.use_default_processor_features = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the DB instance class of the DB instance uses its default processor features.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_use_default_processor_features(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_default_processor_features = input;
        self
    }
    /// <p>Specifies whether the DB instance class of the DB instance uses its default processor features.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_use_default_processor_features(&self) -> &::std::option::Option<bool> {
        &self.use_default_processor_features
    }
    /// <p>The name of the DB parameter group to associate with this DB instance.</p>
    /// <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB parameter group.</p></li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    pub fn db_parameter_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_parameter_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the DB parameter group to associate with this DB instance.</p>
    /// <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB parameter group.</p></li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    pub fn set_db_parameter_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_parameter_group_name = input;
        self
    }
    /// <p>The name of the DB parameter group to associate with this DB instance.</p>
    /// <p>If you do not specify a value for <code>DBParameterGroupName</code>, then the default <code>DBParameterGroup</code> for the specified DB engine is used.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB parameter group.</p></li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    pub fn get_db_parameter_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_parameter_group_name
    }
    /// <p>Specifies whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p>
    pub fn deletion_protection(mut self, input: bool) -> Self {
        self.deletion_protection = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p>
    pub fn set_deletion_protection(mut self, input: ::std::option::Option<bool>) -> Self {
        self.deletion_protection = input;
        self
    }
    /// <p>Specifies whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p>
    pub fn get_deletion_protection(&self) -> &::std::option::Option<bool> {
        &self.deletion_protection
    }
    /// <p>The resource ID of the source DB instance from which to restore.</p>
    pub fn source_dbi_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_dbi_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource ID of the source DB instance from which to restore.</p>
    pub fn set_source_dbi_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_dbi_resource_id = input;
        self
    }
    /// <p>The resource ID of the source DB instance from which to restore.</p>
    pub fn get_source_dbi_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_dbi_resource_id
    }
    /// <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    /// <p>For more information about this setting, including limitations that apply to it, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling"> Managing capacity automatically with Amazon RDS storage autoscaling</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn max_allocated_storage(mut self, input: i32) -> Self {
        self.max_allocated_storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    /// <p>For more information about this setting, including limitations that apply to it, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling"> Managing capacity automatically with Amazon RDS storage autoscaling</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_max_allocated_storage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_allocated_storage = input;
        self
    }
    /// <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    /// <p>For more information about this setting, including limitations that apply to it, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling"> Managing capacity automatically with Amazon RDS storage autoscaling</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_max_allocated_storage(&self) -> &::std::option::Option<i32> {
        &self.max_allocated_storage
    }
    /// <p>The Amazon Resource Name (ARN) of the replicated automated backups from which to restore, for example, <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn source_db_instance_automated_backups_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_db_instance_automated_backups_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replicated automated backups from which to restore, for example, <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_source_db_instance_automated_backups_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_db_instance_automated_backups_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replicated automated backups from which to restore, for example, <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_source_db_instance_automated_backups_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_db_instance_automated_backups_arn
    }
    /// <p>Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP</i> provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub fn enable_customer_owned_ip(mut self, input: bool) -> Self {
        self.enable_customer_owned_ip = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP</i> provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub fn set_enable_customer_owned_ip(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_customer_owned_ip = input;
        self
    }
    /// <p>Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP</i> provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub fn get_enable_customer_owned_ip(&self) -> &::std::option::Option<bool> {
        &self.enable_customer_owned_ip
    }
    /// <p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>The profile must exist in your account.</p></li>
    /// <li>
    /// <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p></li>
    /// <li>
    /// <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p></li>
    /// </ul>
    /// <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting is required for RDS Custom.</p>
    pub fn custom_iam_instance_profile(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.custom_iam_instance_profile = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>The profile must exist in your account.</p></li>
    /// <li>
    /// <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p></li>
    /// <li>
    /// <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p></li>
    /// </ul>
    /// <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting is required for RDS Custom.</p>
    pub fn set_custom_iam_instance_profile(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.custom_iam_instance_profile = input;
        self
    }
    /// <p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>The profile must exist in your account.</p></li>
    /// <li>
    /// <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p></li>
    /// <li>
    /// <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p></li>
    /// </ul>
    /// <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting is required for RDS Custom.</p>
    pub fn get_custom_iam_instance_profile(&self) -> &::std::option::Option<::std::string::String> {
        &self.custom_iam_instance_profile
    }
    /// <p>The location for storing automated backups and manual snapshots for the restored DB instance.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>outposts</code> (Amazon Web Services Outposts)</p></li>
    /// <li>
    /// <p><code>region</code> (Amazon Web Services Region)</p></li>
    /// </ul>
    /// <p>Default: <code>region</code></p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn backup_target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.backup_target = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location for storing automated backups and manual snapshots for the restored DB instance.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>outposts</code> (Amazon Web Services Outposts)</p></li>
    /// <li>
    /// <p><code>region</code> (Amazon Web Services Region)</p></li>
    /// </ul>
    /// <p>Default: <code>region</code></p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn set_backup_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.backup_target = input;
        self
    }
    /// <p>The location for storing automated backups and manual snapshots for the restored DB instance.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>outposts</code> (Amazon Web Services Outposts)</p></li>
    /// <li>
    /// <p><code>region</code> (Amazon Web Services Region)</p></li>
    /// </ul>
    /// <p>Default: <code>region</code></p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn get_backup_target(&self) -> &::std::option::Option<::std::string::String> {
        &self.backup_target
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IPV4</code></p></li>
    /// <li>
    /// <p><code>DUAL</code></p></li>
    /// </ul>
    pub fn network_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IPV4</code></p></li>
    /// <li>
    /// <p><code>DUAL</code></p></li>
    /// </ul>
    pub fn set_network_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_type = input;
        self
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IPV4</code></p></li>
    /// <li>
    /// <p><code>DUAL</code></p></li>
    /// </ul>
    pub fn get_network_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_type
    }
    /// <p>The storage throughput value for the DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom or Amazon Aurora.</p>
    pub fn storage_throughput(mut self, input: i32) -> Self {
        self.storage_throughput = ::std::option::Option::Some(input);
        self
    }
    /// <p>The storage throughput value for the DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom or Amazon Aurora.</p>
    pub fn set_storage_throughput(mut self, input: ::std::option::Option<i32>) -> Self {
        self.storage_throughput = input;
        self
    }
    /// <p>The storage throughput value for the DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom or Amazon Aurora.</p>
    pub fn get_storage_throughput(&self) -> &::std::option::Option<i32> {
        &self.storage_throughput
    }
    /// <p>The amount of storage (in gibibytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>.</p><note>
    /// <p>Be sure to allocate enough storage for your new DB instance so that the restore operation can succeed. You can also allocate additional storage for future growth.</p>
    /// </note>
    pub fn allocated_storage(mut self, input: i32) -> Self {
        self.allocated_storage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of storage (in gibibytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>.</p><note>
    /// <p>Be sure to allocate enough storage for your new DB instance so that the restore operation can succeed. You can also allocate additional storage for future growth.</p>
    /// </note>
    pub fn set_allocated_storage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.allocated_storage = input;
        self
    }
    /// <p>The amount of storage (in gibibytes) to allocate initially for the DB instance. Follow the allocation rules specified in <code>CreateDBInstance</code>.</p><note>
    /// <p>Be sure to allocate enough storage for your new DB instance so that the restore operation can succeed. You can also allocate additional storage for future growth.</p>
    /// </note>
    pub fn get_allocated_storage(&self) -> &::std::option::Option<i32> {
        &self.allocated_storage
    }
    /// <p>Specifies whether to enable a dedicated log volume (DLV) for the DB instance.</p>
    pub fn dedicated_log_volume(mut self, input: bool) -> Self {
        self.dedicated_log_volume = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable a dedicated log volume (DLV) for the DB instance.</p>
    pub fn set_dedicated_log_volume(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dedicated_log_volume = input;
        self
    }
    /// <p>Specifies whether to enable a dedicated log volume (DLV) for the DB instance.</p>
    pub fn get_dedicated_log_volume(&self) -> &::std::option::Option<bool> {
        &self.dedicated_log_volume
    }
    /// <p>The CA certificate identifier to use for the DB instance's server certificate.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn ca_certificate_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ca_certificate_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CA certificate identifier to use for the DB instance's server certificate.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_ca_certificate_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ca_certificate_identifier = input;
        self
    }
    /// <p>The CA certificate identifier to use for the DB instance's server certificate.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn get_ca_certificate_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.ca_certificate_identifier
    }
    /// <p>The life cycle type for this DB instance.</p><note>
    /// <p>By default, this value is set to <code>open-source-rds-extended-support</code>, which enrolls your DB instance into Amazon RDS Extended Support. At the end of standard support, you can avoid charges for Extended Support by setting the value to <code>open-source-rds-extended-support-disabled</code>. In this case, RDS automatically upgrades your restored DB instance to a higher engine version, if the major engine version is past its end of standard support date.</p>
    /// </note>
    /// <p>You can use this setting to enroll your DB instance into Amazon RDS Extended Support. With RDS Extended Support, you can run the selected major engine version on your DB instance past the end of standard support for that engine version. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting applies only to RDS for MySQL and RDS for PostgreSQL. For Amazon Aurora DB instances, the life cycle type is managed by the DB cluster.</p>
    /// <p>Valid Values: <code>open-source-rds-extended-support | open-source-rds-extended-support-disabled</code></p>
    /// <p>Default: <code>open-source-rds-extended-support</code></p>
    pub fn engine_lifecycle_support(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_lifecycle_support = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The life cycle type for this DB instance.</p><note>
    /// <p>By default, this value is set to <code>open-source-rds-extended-support</code>, which enrolls your DB instance into Amazon RDS Extended Support. At the end of standard support, you can avoid charges for Extended Support by setting the value to <code>open-source-rds-extended-support-disabled</code>. In this case, RDS automatically upgrades your restored DB instance to a higher engine version, if the major engine version is past its end of standard support date.</p>
    /// </note>
    /// <p>You can use this setting to enroll your DB instance into Amazon RDS Extended Support. With RDS Extended Support, you can run the selected major engine version on your DB instance past the end of standard support for that engine version. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting applies only to RDS for MySQL and RDS for PostgreSQL. For Amazon Aurora DB instances, the life cycle type is managed by the DB cluster.</p>
    /// <p>Valid Values: <code>open-source-rds-extended-support | open-source-rds-extended-support-disabled</code></p>
    /// <p>Default: <code>open-source-rds-extended-support</code></p>
    pub fn set_engine_lifecycle_support(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_lifecycle_support = input;
        self
    }
    /// <p>The life cycle type for this DB instance.</p><note>
    /// <p>By default, this value is set to <code>open-source-rds-extended-support</code>, which enrolls your DB instance into Amazon RDS Extended Support. At the end of standard support, you can avoid charges for Extended Support by setting the value to <code>open-source-rds-extended-support-disabled</code>. In this case, RDS automatically upgrades your restored DB instance to a higher engine version, if the major engine version is past its end of standard support date.</p>
    /// </note>
    /// <p>You can use this setting to enroll your DB instance into Amazon RDS Extended Support. With RDS Extended Support, you can run the selected major engine version on your DB instance past the end of standard support for that engine version. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting applies only to RDS for MySQL and RDS for PostgreSQL. For Amazon Aurora DB instances, the life cycle type is managed by the DB cluster.</p>
    /// <p>Valid Values: <code>open-source-rds-extended-support | open-source-rds-extended-support-disabled</code></p>
    /// <p>Default: <code>open-source-rds-extended-support</code></p>
    pub fn get_engine_lifecycle_support(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_lifecycle_support
    }
    /// Consumes the builder and constructs a [`RestoreDbInstanceToPointInTimeInput`](crate::operation::restore_db_instance_to_point_in_time::RestoreDbInstanceToPointInTimeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::restore_db_instance_to_point_in_time::RestoreDbInstanceToPointInTimeInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::restore_db_instance_to_point_in_time::RestoreDbInstanceToPointInTimeInput {
                source_db_instance_identifier: self.source_db_instance_identifier,
                target_db_instance_identifier: self.target_db_instance_identifier,
                restore_time: self.restore_time,
                use_latest_restorable_time: self.use_latest_restorable_time,
                db_instance_class: self.db_instance_class,
                port: self.port,
                availability_zone: self.availability_zone,
                db_subnet_group_name: self.db_subnet_group_name,
                multi_az: self.multi_az,
                publicly_accessible: self.publicly_accessible,
                auto_minor_version_upgrade: self.auto_minor_version_upgrade,
                license_model: self.license_model,
                db_name: self.db_name,
                engine: self.engine,
                iops: self.iops,
                option_group_name: self.option_group_name,
                copy_tags_to_snapshot: self.copy_tags_to_snapshot,
                tags: self.tags,
                storage_type: self.storage_type,
                tde_credential_arn: self.tde_credential_arn,
                tde_credential_password: self.tde_credential_password,
                vpc_security_group_ids: self.vpc_security_group_ids,
                domain: self.domain,
                domain_iam_role_name: self.domain_iam_role_name,
                domain_fqdn: self.domain_fqdn,
                domain_ou: self.domain_ou,
                domain_auth_secret_arn: self.domain_auth_secret_arn,
                domain_dns_ips: self.domain_dns_ips,
                enable_iam_database_authentication: self.enable_iam_database_authentication,
                enable_cloudwatch_logs_exports: self.enable_cloudwatch_logs_exports,
                processor_features: self.processor_features,
                use_default_processor_features: self.use_default_processor_features,
                db_parameter_group_name: self.db_parameter_group_name,
                deletion_protection: self.deletion_protection,
                source_dbi_resource_id: self.source_dbi_resource_id,
                max_allocated_storage: self.max_allocated_storage,
                source_db_instance_automated_backups_arn: self.source_db_instance_automated_backups_arn,
                enable_customer_owned_ip: self.enable_customer_owned_ip,
                custom_iam_instance_profile: self.custom_iam_instance_profile,
                backup_target: self.backup_target,
                network_type: self.network_type,
                storage_throughput: self.storage_throughput,
                allocated_storage: self.allocated_storage,
                dedicated_log_volume: self.dedicated_log_volume,
                ca_certificate_identifier: self.ca_certificate_identifier,
                engine_lifecycle_support: self.engine_lifecycle_support,
            },
        )
    }
}
