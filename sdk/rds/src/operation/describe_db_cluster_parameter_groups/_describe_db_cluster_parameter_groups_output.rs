// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDbClusterParameterGroupsOutput {
    /// <p>An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    /// <p>A list of DB cluster parameter groups.</p>
    #[doc(hidden)]
    pub db_cluster_parameter_groups:
        std::option::Option<std::vec::Vec<crate::types::DbClusterParameterGroup>>,
    _request_id: Option<String>,
}
impl DescribeDbClusterParameterGroupsOutput {
    /// <p>An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>A list of DB cluster parameter groups.</p>
    pub fn db_cluster_parameter_groups(
        &self,
    ) -> std::option::Option<&[crate::types::DbClusterParameterGroup]> {
        self.db_cluster_parameter_groups.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeDbClusterParameterGroupsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDbClusterParameterGroupsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDbClusterParameterGroupsOutput`](crate::operation::describe_db_cluster_parameter_groups::DescribeDbClusterParameterGroupsOutput).
    pub fn builder() -> crate::operation::describe_db_cluster_parameter_groups::builders::DescribeDbClusterParameterGroupsOutputBuilder{
        crate::operation::describe_db_cluster_parameter_groups::builders::DescribeDbClusterParameterGroupsOutputBuilder::default()
    }
}

/// A builder for [`DescribeDbClusterParameterGroupsOutput`](crate::operation::describe_db_cluster_parameter_groups::DescribeDbClusterParameterGroupsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDbClusterParameterGroupsOutputBuilder {
    pub(crate) marker: std::option::Option<std::string::String>,
    pub(crate) db_cluster_parameter_groups:
        std::option::Option<std::vec::Vec<crate::types::DbClusterParameterGroup>>,
    _request_id: Option<String>,
}
impl DescribeDbClusterParameterGroupsOutputBuilder {
    /// <p>An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBClusterParameterGroups</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// Appends an item to `db_cluster_parameter_groups`.
    ///
    /// To override the contents of this collection use [`set_db_cluster_parameter_groups`](Self::set_db_cluster_parameter_groups).
    ///
    /// <p>A list of DB cluster parameter groups.</p>
    pub fn db_cluster_parameter_groups(
        mut self,
        input: crate::types::DbClusterParameterGroup,
    ) -> Self {
        let mut v = self.db_cluster_parameter_groups.unwrap_or_default();
        v.push(input);
        self.db_cluster_parameter_groups = Some(v);
        self
    }
    /// <p>A list of DB cluster parameter groups.</p>
    pub fn set_db_cluster_parameter_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DbClusterParameterGroup>>,
    ) -> Self {
        self.db_cluster_parameter_groups = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDbClusterParameterGroupsOutput`](crate::operation::describe_db_cluster_parameter_groups::DescribeDbClusterParameterGroupsOutput).
    pub fn build(self) -> crate::operation::describe_db_cluster_parameter_groups::DescribeDbClusterParameterGroupsOutput{
        crate::operation::describe_db_cluster_parameter_groups::DescribeDbClusterParameterGroupsOutput {
            marker: self.marker
            ,
            db_cluster_parameter_groups: self.db_cluster_parameter_groups
            ,
            _request_id: self._request_id,
        }
    }
}
