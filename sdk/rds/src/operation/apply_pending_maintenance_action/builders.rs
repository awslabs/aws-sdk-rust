// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::apply_pending_maintenance_action::_apply_pending_maintenance_action_output::ApplyPendingMaintenanceActionOutputBuilder;

pub use crate::operation::apply_pending_maintenance_action::_apply_pending_maintenance_action_input::ApplyPendingMaintenanceActionInputBuilder;

/// Fluent builder constructing a request to `ApplyPendingMaintenanceAction`.
///
/// <p>Applies a pending maintenance action to a resource (for example, to a DB instance).</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ApplyPendingMaintenanceActionFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::apply_pending_maintenance_action::builders::ApplyPendingMaintenanceActionInputBuilder
            }
impl ApplyPendingMaintenanceActionFluentBuilder {
    /// Creates a new `ApplyPendingMaintenanceAction`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceAction,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::apply_pending_maintenance_action::ApplyPendingMaintenanceActionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.</p>
    pub fn resource_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_identifier(input.into());
        self
    }
    /// <p>The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.ARN.html#USER_Tagging.ARN.Constructing"> Constructing an RDS Amazon Resource Name (ARN)</a>.</p>
    pub fn set_resource_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_resource_identifier(input);
        self
    }
    /// <p>The pending maintenance action to apply to this resource.</p>
    /// <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
    pub fn apply_action(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.apply_action(input.into());
        self
    }
    /// <p>The pending maintenance action to apply to this resource.</p>
    /// <p>Valid values: <code>system-update</code>, <code>db-upgrade</code>, <code>hardware-maintenance</code>, <code>ca-certificate-rotation</code> </p>
    pub fn set_apply_action(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_apply_action(input);
        self
    }
    /// <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li>
    /// <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li>
    /// <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li>
    /// </ul>
    pub fn opt_in_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.opt_in_type(input.into());
        self
    }
    /// <p>A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type <code>immediate</code> can't be undone.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p> <code>immediate</code> - Apply the maintenance action immediately.</p> </li>
    /// <li> <p> <code>next-maintenance</code> - Apply the maintenance action during the next maintenance window for the resource.</p> </li>
    /// <li> <p> <code>undo-opt-in</code> - Cancel any existing <code>next-maintenance</code> opt-in requests.</p> </li>
    /// </ul>
    pub fn set_opt_in_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_opt_in_type(input);
        self
    }
}
