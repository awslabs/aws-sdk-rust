// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::restore_db_instance_from_db_snapshot::_restore_db_instance_from_db_snapshot_output::RestoreDbInstanceFromDbSnapshotOutputBuilder;

pub use crate::operation::restore_db_instance_from_db_snapshot::_restore_db_instance_from_db_snapshot_input::RestoreDbInstanceFromDbSnapshotInputBuilder;

impl crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDbInstanceFromDbSnapshotInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::restore_db_instance_from_db_snapshot::RestoreDbInstanceFromDbSnapshotOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.restore_db_instance_from_db_snapshot();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RestoreDBInstanceFromDBSnapshot`.
///
/// <p>Creates a new DB instance from a DB snapshot. The target database is created from the source database restore point with most of the source's original configuration, including the default security group and DB parameter group. By default, the new DB instance is created as a Single-AZ deployment, except when the instance is a SQL Server instance that has an option group associated with mirroring. In this case, the instance becomes a Multi-AZ deployment, not a Single-AZ deployment.</p>
/// <p>If you want to replace your original DB instance with the new, restored DB instance, then rename your original DB instance before you call the <code>RestoreDBInstanceFromDBSnapshot</code> operation. RDS doesn't allow two DB instances with the same name. After you have renamed your original DB instance with a different identifier, then you can pass the original name of the DB instance as the <code>DBInstanceIdentifier</code> in the call to the <code>RestoreDBInstanceFromDBSnapshot</code> operation. The result is that you replace the original DB instance with the DB instance created from the snapshot.</p>
/// <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p><note>
/// <p>This command doesn't apply to Aurora MySQL and Aurora PostgreSQL. For Aurora, use <code>RestoreDBClusterFromSnapshot</code>.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RestoreDBInstanceFromDBSnapshotFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDbInstanceFromDbSnapshotInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::restore_db_instance_from_db_snapshot::RestoreDbInstanceFromDbSnapshotOutput,
        crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError,
    > for RestoreDBInstanceFromDBSnapshotFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDbInstanceFromDbSnapshotOutput,
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RestoreDBInstanceFromDBSnapshotFluentBuilder {
    /// Creates a new `RestoreDBInstanceFromDBSnapshotFluentBuilder`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RestoreDBInstanceFromDBSnapshot as a reference.
    pub fn as_input(&self) -> &crate::operation::restore_db_instance_from_db_snapshot::builders::RestoreDbInstanceFromDbSnapshotInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::restore_db_instance_from_db_snapshot::RestoreDbInstanceFromDbSnapshotOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshot::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshot::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::restore_db_instance_from_db_snapshot::RestoreDbInstanceFromDbSnapshotOutput,
        crate::operation::restore_db_instance_from_db_snapshot::RestoreDBInstanceFromDBSnapshotError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 numbers, letters, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Example: <code>my-snapshot-id</code></p>
    pub fn db_instance_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_instance_identifier(input.into());
        self
    }
    /// <p>The name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 numbers, letters, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Example: <code>my-snapshot-id</code></p>
    pub fn set_db_instance_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_instance_identifier(input);
        self
    }
    /// <p>The name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 numbers, letters, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Example: <code>my-snapshot-id</code></p>
    pub fn get_db_instance_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_instance_identifier()
    }
    /// <p>The identifier for the DB snapshot to restore from.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DB snapshot.</p></li>
    /// <li>
    /// <p>Can't be specified when <code>DBClusterSnapshotIdentifier</code> is specified.</p></li>
    /// <li>
    /// <p>Must be specified when <code>DBClusterSnapshotIdentifier</code> isn't specified.</p></li>
    /// <li>
    /// <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p></li>
    /// </ul>
    pub fn db_snapshot_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_snapshot_identifier(input.into());
        self
    }
    /// <p>The identifier for the DB snapshot to restore from.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DB snapshot.</p></li>
    /// <li>
    /// <p>Can't be specified when <code>DBClusterSnapshotIdentifier</code> is specified.</p></li>
    /// <li>
    /// <p>Must be specified when <code>DBClusterSnapshotIdentifier</code> isn't specified.</p></li>
    /// <li>
    /// <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p></li>
    /// </ul>
    pub fn set_db_snapshot_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_snapshot_identifier(input);
        self
    }
    /// <p>The identifier for the DB snapshot to restore from.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DB snapshot.</p></li>
    /// <li>
    /// <p>Can't be specified when <code>DBClusterSnapshotIdentifier</code> is specified.</p></li>
    /// <li>
    /// <p>Must be specified when <code>DBClusterSnapshotIdentifier</code> isn't specified.</p></li>
    /// <li>
    /// <p>If you are restoring from a shared manual DB snapshot, the <code>DBSnapshotIdentifier</code> must be the ARN of the shared DB snapshot.</p></li>
    /// </ul>
    pub fn get_db_snapshot_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_snapshot_identifier()
    }
    /// <p>The compute and memory capacity of the Amazon RDS DB instance, for example db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Default: The same DBInstanceClass as the original DB instance.</p>
    pub fn db_instance_class(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_instance_class(input.into());
        self
    }
    /// <p>The compute and memory capacity of the Amazon RDS DB instance, for example db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Default: The same DBInstanceClass as the original DB instance.</p>
    pub fn set_db_instance_class(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_instance_class(input);
        self
    }
    /// <p>The compute and memory capacity of the Amazon RDS DB instance, for example db.m4.large. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Default: The same DBInstanceClass as the original DB instance.</p>
    pub fn get_db_instance_class(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_instance_class()
    }
    /// <p>The port number on which the database accepts connections.</p>
    /// <p>Default: The same port as the original DB instance</p>
    /// <p>Constraints: Value must be <code>1150-65535</code></p>
    pub fn port(mut self, input: i32) -> Self {
        self.inner = self.inner.port(input);
        self
    }
    /// <p>The port number on which the database accepts connections.</p>
    /// <p>Default: The same port as the original DB instance</p>
    /// <p>Constraints: Value must be <code>1150-65535</code></p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_port(input);
        self
    }
    /// <p>The port number on which the database accepts connections.</p>
    /// <p>Default: The same port as the original DB instance</p>
    /// <p>Constraints: Value must be <code>1150-65535</code></p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        self.inner.get_port()
    }
    /// <p>The Availability Zone (AZ) where the DB instance will be created.</p>
    /// <p>Default: A random, system-chosen Availability Zone.</p>
    /// <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    /// <p>Example: <code>us-east-1a</code></p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.availability_zone(input.into());
        self
    }
    /// <p>The Availability Zone (AZ) where the DB instance will be created.</p>
    /// <p>Default: A random, system-chosen Availability Zone.</p>
    /// <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    /// <p>Example: <code>us-east-1a</code></p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_availability_zone(input);
        self
    }
    /// <p>The Availability Zone (AZ) where the DB instance will be created.</p>
    /// <p>Default: A random, system-chosen Availability Zone.</p>
    /// <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    /// <p>Example: <code>us-east-1a</code></p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_availability_zone()
    }
    /// <p>The name of the DB subnet group to use for the new instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB subnet group.</p></li>
    /// </ul>
    /// <p>Example: <code>mydbsubnetgroup</code></p>
    pub fn db_subnet_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_subnet_group_name(input.into());
        self
    }
    /// <p>The name of the DB subnet group to use for the new instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB subnet group.</p></li>
    /// </ul>
    /// <p>Example: <code>mydbsubnetgroup</code></p>
    pub fn set_db_subnet_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_subnet_group_name(input);
        self
    }
    /// <p>The name of the DB subnet group to use for the new instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB subnet group.</p></li>
    /// </ul>
    /// <p>Example: <code>mydbsubnetgroup</code></p>
    pub fn get_db_subnet_group_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_subnet_group_name()
    }
    /// <p>Specifies whether the DB instance is a Multi-AZ deployment.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    pub fn multi_az(mut self, input: bool) -> Self {
        self.inner = self.inner.multi_az(input);
        self
    }
    /// <p>Specifies whether the DB instance is a Multi-AZ deployment.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    pub fn set_multi_az(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_multi_az(input);
        self
    }
    /// <p>Specifies whether the DB instance is a Multi-AZ deployment.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Constraint: You can't specify the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    pub fn get_multi_az(&self) -> &::std::option::Option<bool> {
        self.inner.get_multi_az()
    }
    /// <p>Specifies whether the DB instance is publicly accessible.</p>
    /// <p>When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB instance's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.inner = self.inner.publicly_accessible(input);
        self
    }
    /// <p>Specifies whether the DB instance is publicly accessible.</p>
    /// <p>When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB instance's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    pub fn set_publicly_accessible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_publicly_accessible(input);
        self
    }
    /// <p>Specifies whether the DB instance is publicly accessible.</p>
    /// <p>When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB instance's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>For more information, see <code>CreateDBInstance</code>.</p>
    pub fn get_publicly_accessible(&self) -> &::std::option::Option<bool> {
        self.inner.get_publicly_accessible()
    }
    /// <p>Specifies whether to automatically apply minor version upgrades to the DB instance during the maintenance window.</p>
    /// <p>If you restore an RDS Custom DB instance, you must disable this parameter.</p>
    pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_minor_version_upgrade(input);
        self
    }
    /// <p>Specifies whether to automatically apply minor version upgrades to the DB instance during the maintenance window.</p>
    /// <p>If you restore an RDS Custom DB instance, you must disable this parameter.</p>
    pub fn set_auto_minor_version_upgrade(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_minor_version_upgrade(input);
        self
    }
    /// <p>Specifies whether to automatically apply minor version upgrades to the DB instance during the maintenance window.</p>
    /// <p>If you restore an RDS Custom DB instance, you must disable this parameter.</p>
    pub fn get_auto_minor_version_upgrade(&self) -> &::std::option::Option<bool> {
        self.inner.get_auto_minor_version_upgrade()
    }
    /// <p>License model information for the restored DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Default: Same as source.</p>
    /// <p>Valid Values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code></p>
    pub fn license_model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.license_model(input.into());
        self
    }
    /// <p>License model information for the restored DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Default: Same as source.</p>
    /// <p>Valid Values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code></p>
    pub fn set_license_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_license_model(input);
        self
    }
    /// <p>License model information for the restored DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Default: Same as source.</p>
    /// <p>Valid Values: <code>license-included</code> | <code>bring-your-own-license</code> | <code>general-public-license</code></p>
    pub fn get_license_model(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_license_model()
    }
    /// <p>The name of the database for the restored DB instance.</p>
    /// <p>This parameter only applies to RDS for Oracle and RDS for SQL Server DB instances. It doesn't apply to the other engines or to RDS Custom DB instances.</p>
    pub fn db_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_name(input.into());
        self
    }
    /// <p>The name of the database for the restored DB instance.</p>
    /// <p>This parameter only applies to RDS for Oracle and RDS for SQL Server DB instances. It doesn't apply to the other engines or to RDS Custom DB instances.</p>
    pub fn set_db_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_name(input);
        self
    }
    /// <p>The name of the database for the restored DB instance.</p>
    /// <p>This parameter only applies to RDS for Oracle and RDS for SQL Server DB instances. It doesn't apply to the other engines or to RDS Custom DB instances.</p>
    pub fn get_db_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_name()
    }
    /// <p>The database engine to use for the new instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Default: The same as source</p>
    /// <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>db2-ae</code></p></li>
    /// <li>
    /// <p><code>db2-se</code></p></li>
    /// <li>
    /// <p><code>mariadb</code></p></li>
    /// <li>
    /// <p><code>mysql</code></p></li>
    /// <li>
    /// <p><code>oracle-ee</code></p></li>
    /// <li>
    /// <p><code>oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>oracle-se2</code></p></li>
    /// <li>
    /// <p><code>oracle-se2-cdb</code></p></li>
    /// <li>
    /// <p><code>postgres</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ex</code></p></li>
    /// <li>
    /// <p><code>sqlserver-web</code></p></li>
    /// </ul>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.engine(input.into());
        self
    }
    /// <p>The database engine to use for the new instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Default: The same as source</p>
    /// <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>db2-ae</code></p></li>
    /// <li>
    /// <p><code>db2-se</code></p></li>
    /// <li>
    /// <p><code>mariadb</code></p></li>
    /// <li>
    /// <p><code>mysql</code></p></li>
    /// <li>
    /// <p><code>oracle-ee</code></p></li>
    /// <li>
    /// <p><code>oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>oracle-se2</code></p></li>
    /// <li>
    /// <p><code>oracle-se2-cdb</code></p></li>
    /// <li>
    /// <p><code>postgres</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ex</code></p></li>
    /// <li>
    /// <p><code>sqlserver-web</code></p></li>
    /// </ul>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_engine(input);
        self
    }
    /// <p>The database engine to use for the new instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Default: The same as source</p>
    /// <p>Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>db2-ae</code></p></li>
    /// <li>
    /// <p><code>db2-se</code></p></li>
    /// <li>
    /// <p><code>mariadb</code></p></li>
    /// <li>
    /// <p><code>mysql</code></p></li>
    /// <li>
    /// <p><code>oracle-ee</code></p></li>
    /// <li>
    /// <p><code>oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>oracle-se2</code></p></li>
    /// <li>
    /// <p><code>oracle-se2-cdb</code></p></li>
    /// <li>
    /// <p><code>postgres</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ex</code></p></li>
    /// <li>
    /// <p><code>sqlserver-web</code></p></li>
    /// </ul>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_engine()
    }
    /// <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts.</p>
    /// <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Constraints: Must be an integer greater than 1000.</p>
    pub fn iops(mut self, input: i32) -> Self {
        self.inner = self.inner.iops(input);
        self
    }
    /// <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts.</p>
    /// <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Constraints: Must be an integer greater than 1000.</p>
    pub fn set_iops(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_iops(input);
        self
    }
    /// <p>Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter isn't specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts.</p>
    /// <p>The provisioned IOPS value must follow the requirements for your database engine. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Constraints: Must be an integer greater than 1000.</p>
    pub fn get_iops(&self) -> &::std::option::Option<i32> {
        self.inner.get_iops()
    }
    /// <p>The name of the option group to be used for the restored DB instance.</p>
    /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance after it is associated with a DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn option_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.option_group_name(input.into());
        self
    }
    /// <p>The name of the option group to be used for the restored DB instance.</p>
    /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance after it is associated with a DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_option_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_option_group_name(input);
        self
    }
    /// <p>The name of the option group to be used for the restored DB instance.</p>
    /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance after it is associated with a DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_option_group_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_option_group_name()
    }
    ///
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i></p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i></p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i></p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
    /// <p>Specifies the storage type to be associated with the DB instance.</p>
    /// <p>Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code></p>
    /// <p>If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code>, you must also include a value for the <code>Iops</code> parameter.</p>
    /// <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code></p>
    pub fn storage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.storage_type(input.into());
        self
    }
    /// <p>Specifies the storage type to be associated with the DB instance.</p>
    /// <p>Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code></p>
    /// <p>If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code>, you must also include a value for the <code>Iops</code> parameter.</p>
    /// <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code></p>
    pub fn set_storage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_storage_type(input);
        self
    }
    /// <p>Specifies the storage type to be associated with the DB instance.</p>
    /// <p>Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code></p>
    /// <p>If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code>, you must also include a value for the <code>Iops</code> parameter.</p>
    /// <p>Default: <code>io1</code> if the <code>Iops</code> parameter is specified, otherwise <code>gp2</code></p>
    pub fn get_storage_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_storage_type()
    }
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn tde_credential_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tde_credential_arn(input.into());
        self
    }
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_tde_credential_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_tde_credential_arn(input);
        self
    }
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_tde_credential_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_tde_credential_arn()
    }
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn tde_credential_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tde_credential_password(input.into());
        self
    }
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_tde_credential_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_tde_credential_password(input);
        self
    }
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_tde_credential_password(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_tde_credential_password()
    }
    ///
    /// Appends an item to `VpcSecurityGroupIds`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_group_ids`](Self::set_vpc_security_group_ids).
    ///
    /// <p>A list of EC2 VPC security groups to associate with this DB instance.</p>
    /// <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
    pub fn vpc_security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.vpc_security_group_ids(input.into());
        self
    }
    /// <p>A list of EC2 VPC security groups to associate with this DB instance.</p>
    /// <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
    pub fn set_vpc_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_vpc_security_group_ids(input);
        self
    }
    /// <p>A list of EC2 VPC security groups to associate with this DB instance.</p>
    /// <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
    pub fn get_vpc_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_vpc_security_group_ids()
    }
    /// <p>The Active Directory directory ID to restore the DB instance in. The domain/ must be created prior to this operation. Currently, you can create only Db2, MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain(input.into());
        self
    }
    /// <p>The Active Directory directory ID to restore the DB instance in. The domain/ must be created prior to this operation. Currently, you can create only Db2, MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain(input);
        self
    }
    /// <p>The Active Directory directory ID to restore the DB instance in. The domain/ must be created prior to this operation. Currently, you can create only Db2, MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain()
    }
    /// <p>The fully qualified domain name (FQDN) of an Active Directory domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>mymanagedADtest.mymanagedAD.mydomain</code></p>
    pub fn domain_fqdn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_fqdn(input.into());
        self
    }
    /// <p>The fully qualified domain name (FQDN) of an Active Directory domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>mymanagedADtest.mymanagedAD.mydomain</code></p>
    pub fn set_domain_fqdn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_fqdn(input);
        self
    }
    /// <p>The fully qualified domain name (FQDN) of an Active Directory domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>mymanagedADtest.mymanagedAD.mydomain</code></p>
    pub fn get_domain_fqdn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_fqdn()
    }
    /// <p>The Active Directory organizational unit for your DB instance to join.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the distinguished name format.</p></li>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code></p>
    pub fn domain_ou(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_ou(input.into());
        self
    }
    /// <p>The Active Directory organizational unit for your DB instance to join.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the distinguished name format.</p></li>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code></p>
    pub fn set_domain_ou(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_ou(input);
        self
    }
    /// <p>The Active Directory organizational unit for your DB instance to join.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the distinguished name format.</p></li>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code></p>
    pub fn get_domain_ou(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_ou()
    }
    /// <p>The ARN for the Secrets Manager secret with the credentials for the user joining the domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code></p>
    pub fn domain_auth_secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_auth_secret_arn(input.into());
        self
    }
    /// <p>The ARN for the Secrets Manager secret with the credentials for the user joining the domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code></p>
    pub fn set_domain_auth_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_auth_secret_arn(input);
        self
    }
    /// <p>The ARN for the Secrets Manager secret with the credentials for the user joining the domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code></p>
    pub fn get_domain_auth_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_auth_secret_arn()
    }
    ///
    /// Appends an item to `DomainDnsIps`.
    ///
    /// To override the contents of this collection use [`set_domain_dns_ips`](Self::set_domain_dns_ips).
    ///
    /// <p>The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.</p></li>
    /// </ul>
    /// <p>Example: <code>123.124.125.126,234.235.236.237</code></p>
    pub fn domain_dns_ips(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_dns_ips(input.into());
        self
    }
    /// <p>The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.</p></li>
    /// </ul>
    /// <p>Example: <code>123.124.125.126,234.235.236.237</code></p>
    pub fn set_domain_dns_ips(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_domain_dns_ips(input);
        self
    }
    /// <p>The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.</p></li>
    /// </ul>
    /// <p>Example: <code>123.124.125.126,234.235.236.237</code></p>
    pub fn get_domain_dns_ips(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_domain_dns_ips()
    }
    /// <p>Specifies whether to copy all tags from the restored DB instance to snapshots of the DB instance.</p>
    /// <p>In most cases, tags aren't copied by default. However, when you restore a DB instance from a DB snapshot, RDS checks whether you specify new tags. If yes, the new tags are added to the restored DB instance. If there are no new tags, RDS looks for the tags from the source DB instance for the DB snapshot, and then adds those tags to the restored DB instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html#USER_Tagging.CopyTags"> Copying tags to DB instance snapshots</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
        self.inner = self.inner.copy_tags_to_snapshot(input);
        self
    }
    /// <p>Specifies whether to copy all tags from the restored DB instance to snapshots of the DB instance.</p>
    /// <p>In most cases, tags aren't copied by default. However, when you restore a DB instance from a DB snapshot, RDS checks whether you specify new tags. If yes, the new tags are added to the restored DB instance. If there are no new tags, RDS looks for the tags from the source DB instance for the DB snapshot, and then adds those tags to the restored DB instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html#USER_Tagging.CopyTags"> Copying tags to DB instance snapshots</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn set_copy_tags_to_snapshot(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_copy_tags_to_snapshot(input);
        self
    }
    /// <p>Specifies whether to copy all tags from the restored DB instance to snapshots of the DB instance.</p>
    /// <p>In most cases, tags aren't copied by default. However, when you restore a DB instance from a DB snapshot, RDS checks whether you specify new tags. If yes, the new tags are added to the restored DB instance. If there are no new tags, RDS looks for the tags from the source DB instance for the DB snapshot, and then adds those tags to the restored DB instance.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html#USER_Tagging.CopyTags"> Copying tags to DB instance snapshots</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn get_copy_tags_to_snapshot(&self) -> &::std::option::Option<bool> {
        self.inner.get_copy_tags_to_snapshot()
    }
    /// <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn domain_iam_role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_iam_role_name(input.into());
        self
    }
    /// <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn set_domain_iam_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_iam_role_name(input);
        self
    }
    /// <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn get_domain_iam_role_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_iam_role_name()
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
    /// <p>For more information about IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_iam_database_authentication(input);
        self
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
    /// <p>For more information about IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_enable_iam_database_authentication(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_iam_database_authentication(input);
        self
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping is disabled.</p>
    /// <p>For more information about IAM database authentication, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_enable_iam_database_authentication(&self) -> &::std::option::Option<bool> {
        self.inner.get_enable_iam_database_authentication()
    }
    ///
    /// Appends an item to `EnableCloudwatchLogsExports`.
    ///
    /// To override the contents of this collection use [`set_enable_cloudwatch_logs_exports`](Self::set_enable_cloudwatch_logs_exports).
    ///
    /// <p>The list of logs for the restored DB instance to export to CloudWatch Logs. The values in the list depend on the DB engine. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn enable_cloudwatch_logs_exports(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.enable_cloudwatch_logs_exports(input.into());
        self
    }
    /// <p>The list of logs for the restored DB instance to export to CloudWatch Logs. The values in the list depend on the DB engine. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_enable_cloudwatch_logs_exports(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_enable_cloudwatch_logs_exports(input);
        self
    }
    /// <p>The list of logs for the restored DB instance to export to CloudWatch Logs. The values in the list depend on the DB engine. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_enable_cloudwatch_logs_exports(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_enable_cloudwatch_logs_exports()
    }
    ///
    /// Appends an item to `ProcessorFeatures`.
    ///
    /// To override the contents of this collection use [`set_processor_features`](Self::set_processor_features).
    ///
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn processor_features(mut self, input: crate::types::ProcessorFeature) -> Self {
        self.inner = self.inner.processor_features(input);
        self
    }
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_processor_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProcessorFeature>>) -> Self {
        self.inner = self.inner.set_processor_features(input);
        self
    }
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_processor_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProcessorFeature>> {
        self.inner.get_processor_features()
    }
    /// <p>Specifies whether the DB instance class of the DB instance uses its default processor features.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn use_default_processor_features(mut self, input: bool) -> Self {
        self.inner = self.inner.use_default_processor_features(input);
        self
    }
    /// <p>Specifies whether the DB instance class of the DB instance uses its default processor features.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_use_default_processor_features(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_use_default_processor_features(input);
        self
    }
    /// <p>Specifies whether the DB instance class of the DB instance uses its default processor features.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn get_use_default_processor_features(&self) -> &::std::option::Option<bool> {
        self.inner.get_use_default_processor_features()
    }
    /// <p>The name of the DB parameter group to associate with this DB instance.</p>
    /// <p>If you don't specify a value for <code>DBParameterGroupName</code>, then RDS uses the default <code>DBParameterGroup</code> for the specified DB engine.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB parameter group.</p></li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    pub fn db_parameter_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_parameter_group_name(input.into());
        self
    }
    /// <p>The name of the DB parameter group to associate with this DB instance.</p>
    /// <p>If you don't specify a value for <code>DBParameterGroupName</code>, then RDS uses the default <code>DBParameterGroup</code> for the specified DB engine.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB parameter group.</p></li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    pub fn set_db_parameter_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_parameter_group_name(input);
        self
    }
    /// <p>The name of the DB parameter group to associate with this DB instance.</p>
    /// <p>If you don't specify a value for <code>DBParameterGroupName</code>, then RDS uses the default <code>DBParameterGroup</code> for the specified DB engine.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB parameter group.</p></li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    pub fn get_db_parameter_group_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_parameter_group_name()
    }
    /// <p>Specifies whether to enable deletion protection for the DB instance. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p>
    pub fn deletion_protection(mut self, input: bool) -> Self {
        self.inner = self.inner.deletion_protection(input);
        self
    }
    /// <p>Specifies whether to enable deletion protection for the DB instance. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p>
    pub fn set_deletion_protection(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_deletion_protection(input);
        self
    }
    /// <p>Specifies whether to enable deletion protection for the DB instance. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p>
    pub fn get_deletion_protection(&self) -> &::std::option::Option<bool> {
        self.inner.get_deletion_protection()
    }
    /// <p>Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP</i> provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub fn enable_customer_owned_ip(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_customer_owned_ip(input);
        self
    }
    /// <p>Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP</i> provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub fn set_enable_customer_owned_ip(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_customer_owned_ip(input);
        self
    }
    /// <p>Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP</i> provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub fn get_enable_customer_owned_ip(&self) -> &::std::option::Option<bool> {
        self.inner.get_enable_customer_owned_ip()
    }
    /// <p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>The profile must exist in your account.</p></li>
    /// <li>
    /// <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p></li>
    /// <li>
    /// <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p></li>
    /// </ul>
    /// <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting is required for RDS Custom.</p>
    pub fn custom_iam_instance_profile(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.custom_iam_instance_profile(input.into());
        self
    }
    /// <p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>The profile must exist in your account.</p></li>
    /// <li>
    /// <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p></li>
    /// <li>
    /// <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p></li>
    /// </ul>
    /// <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting is required for RDS Custom.</p>
    pub fn set_custom_iam_instance_profile(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_custom_iam_instance_profile(input);
        self
    }
    /// <p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance. The instance profile must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>The profile must exist in your account.</p></li>
    /// <li>
    /// <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p></li>
    /// <li>
    /// <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p></li>
    /// </ul>
    /// <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting is required for RDS Custom.</p>
    pub fn get_custom_iam_instance_profile(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_custom_iam_instance_profile()
    }
    /// <p>Specifies where automated backups and manual snapshots are stored for the restored DB instance.</p>
    /// <p>Possible values are <code>outposts</code> (Amazon Web Services Outposts) and <code>region</code> (Amazon Web Services Region). The default is <code>region</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn backup_target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.backup_target(input.into());
        self
    }
    /// <p>Specifies where automated backups and manual snapshots are stored for the restored DB instance.</p>
    /// <p>Possible values are <code>outposts</code> (Amazon Web Services Outposts) and <code>region</code> (Amazon Web Services Region). The default is <code>region</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn set_backup_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_backup_target(input);
        self
    }
    /// <p>Specifies where automated backups and manual snapshots are stored for the restored DB instance.</p>
    /// <p>Possible values are <code>outposts</code> (Amazon Web Services Outposts) and <code>region</code> (Amazon Web Services Region). The default is <code>region</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn get_backup_target(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_backup_target()
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IPV4</code></p></li>
    /// <li>
    /// <p><code>DUAL</code></p></li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide.</i></p>
    pub fn network_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.network_type(input.into());
        self
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IPV4</code></p></li>
    /// <li>
    /// <p><code>DUAL</code></p></li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide.</i></p>
    pub fn set_network_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_network_type(input);
        self
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IPV4</code></p></li>
    /// <li>
    /// <p><code>DUAL</code></p></li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide.</i></p>
    pub fn get_network_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_network_type()
    }
    /// <p>Specifies the storage throughput value for the DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom or Amazon Aurora.</p>
    pub fn storage_throughput(mut self, input: i32) -> Self {
        self.inner = self.inner.storage_throughput(input);
        self
    }
    /// <p>Specifies the storage throughput value for the DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom or Amazon Aurora.</p>
    pub fn set_storage_throughput(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_storage_throughput(input);
        self
    }
    /// <p>Specifies the storage throughput value for the DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom or Amazon Aurora.</p>
    pub fn get_storage_throughput(&self) -> &::std::option::Option<i32> {
        self.inner.get_storage_throughput()
    }
    /// <p>The identifier for the Multi-AZ DB cluster snapshot to restore from.</p>
    /// <p>For more information on Multi-AZ DB clusters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html"> Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing Multi-AZ DB cluster snapshot.</p></li>
    /// <li>
    /// <p>Can't be specified when <code>DBSnapshotIdentifier</code> is specified.</p></li>
    /// <li>
    /// <p>Must be specified when <code>DBSnapshotIdentifier</code> isn't specified.</p></li>
    /// <li>
    /// <p>If you are restoring from a shared manual Multi-AZ DB cluster snapshot, the <code>DBClusterSnapshotIdentifier</code> must be the ARN of the shared snapshot.</p></li>
    /// <li>
    /// <p>Can't be the identifier of an Aurora DB cluster snapshot.</p></li>
    /// </ul>
    pub fn db_cluster_snapshot_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_cluster_snapshot_identifier(input.into());
        self
    }
    /// <p>The identifier for the Multi-AZ DB cluster snapshot to restore from.</p>
    /// <p>For more information on Multi-AZ DB clusters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html"> Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing Multi-AZ DB cluster snapshot.</p></li>
    /// <li>
    /// <p>Can't be specified when <code>DBSnapshotIdentifier</code> is specified.</p></li>
    /// <li>
    /// <p>Must be specified when <code>DBSnapshotIdentifier</code> isn't specified.</p></li>
    /// <li>
    /// <p>If you are restoring from a shared manual Multi-AZ DB cluster snapshot, the <code>DBClusterSnapshotIdentifier</code> must be the ARN of the shared snapshot.</p></li>
    /// <li>
    /// <p>Can't be the identifier of an Aurora DB cluster snapshot.</p></li>
    /// </ul>
    pub fn set_db_cluster_snapshot_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_cluster_snapshot_identifier(input);
        self
    }
    /// <p>The identifier for the Multi-AZ DB cluster snapshot to restore from.</p>
    /// <p>For more information on Multi-AZ DB clusters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html"> Multi-AZ DB cluster deployments</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing Multi-AZ DB cluster snapshot.</p></li>
    /// <li>
    /// <p>Can't be specified when <code>DBSnapshotIdentifier</code> is specified.</p></li>
    /// <li>
    /// <p>Must be specified when <code>DBSnapshotIdentifier</code> isn't specified.</p></li>
    /// <li>
    /// <p>If you are restoring from a shared manual Multi-AZ DB cluster snapshot, the <code>DBClusterSnapshotIdentifier</code> must be the ARN of the shared snapshot.</p></li>
    /// <li>
    /// <p>Can't be the identifier of an Aurora DB cluster snapshot.</p></li>
    /// </ul>
    pub fn get_db_cluster_snapshot_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_cluster_snapshot_identifier()
    }
    /// <p>The amount of storage (in gibibytes) to allocate initially for the DB instance. Follow the allocation rules specified in CreateDBInstance.</p><note>
    /// <p>Be sure to allocate enough storage for your new DB instance so that the restore operation can succeed. You can also allocate additional storage for future growth.</p>
    /// </note>
    pub fn allocated_storage(mut self, input: i32) -> Self {
        self.inner = self.inner.allocated_storage(input);
        self
    }
    /// <p>The amount of storage (in gibibytes) to allocate initially for the DB instance. Follow the allocation rules specified in CreateDBInstance.</p><note>
    /// <p>Be sure to allocate enough storage for your new DB instance so that the restore operation can succeed. You can also allocate additional storage for future growth.</p>
    /// </note>
    pub fn set_allocated_storage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_allocated_storage(input);
        self
    }
    /// <p>The amount of storage (in gibibytes) to allocate initially for the DB instance. Follow the allocation rules specified in CreateDBInstance.</p><note>
    /// <p>Be sure to allocate enough storage for your new DB instance so that the restore operation can succeed. You can also allocate additional storage for future growth.</p>
    /// </note>
    pub fn get_allocated_storage(&self) -> &::std::option::Option<i32> {
        self.inner.get_allocated_storage()
    }
    /// <p>Specifies whether to enable a dedicated log volume (DLV) for the DB instance.</p>
    pub fn dedicated_log_volume(mut self, input: bool) -> Self {
        self.inner = self.inner.dedicated_log_volume(input);
        self
    }
    /// <p>Specifies whether to enable a dedicated log volume (DLV) for the DB instance.</p>
    pub fn set_dedicated_log_volume(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dedicated_log_volume(input);
        self
    }
    /// <p>Specifies whether to enable a dedicated log volume (DLV) for the DB instance.</p>
    pub fn get_dedicated_log_volume(&self) -> &::std::option::Option<bool> {
        self.inner.get_dedicated_log_volume()
    }
    /// <p>The CA certificate identifier to use for the DB instance's server certificate.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn ca_certificate_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ca_certificate_identifier(input.into());
        self
    }
    /// <p>The CA certificate identifier to use for the DB instance's server certificate.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_ca_certificate_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ca_certificate_identifier(input);
        self
    }
    /// <p>The CA certificate identifier to use for the DB instance's server certificate.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn get_ca_certificate_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ca_certificate_identifier()
    }
    /// <p>The life cycle type for this DB instance.</p><note>
    /// <p>By default, this value is set to <code>open-source-rds-extended-support</code>, which enrolls your DB instance into Amazon RDS Extended Support. At the end of standard support, you can avoid charges for Extended Support by setting the value to <code>open-source-rds-extended-support-disabled</code>. In this case, RDS automatically upgrades your restored DB instance to a higher engine version, if the major engine version is past its end of standard support date.</p>
    /// </note>
    /// <p>You can use this setting to enroll your DB instance into Amazon RDS Extended Support. With RDS Extended Support, you can run the selected major engine version on your DB instance past the end of standard support for that engine version. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting applies only to RDS for MySQL and RDS for PostgreSQL. For Amazon Aurora DB instances, the life cycle type is managed by the DB cluster.</p>
    /// <p>Valid Values: <code>open-source-rds-extended-support | open-source-rds-extended-support-disabled</code></p>
    /// <p>Default: <code>open-source-rds-extended-support</code></p>
    pub fn engine_lifecycle_support(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.engine_lifecycle_support(input.into());
        self
    }
    /// <p>The life cycle type for this DB instance.</p><note>
    /// <p>By default, this value is set to <code>open-source-rds-extended-support</code>, which enrolls your DB instance into Amazon RDS Extended Support. At the end of standard support, you can avoid charges for Extended Support by setting the value to <code>open-source-rds-extended-support-disabled</code>. In this case, RDS automatically upgrades your restored DB instance to a higher engine version, if the major engine version is past its end of standard support date.</p>
    /// </note>
    /// <p>You can use this setting to enroll your DB instance into Amazon RDS Extended Support. With RDS Extended Support, you can run the selected major engine version on your DB instance past the end of standard support for that engine version. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting applies only to RDS for MySQL and RDS for PostgreSQL. For Amazon Aurora DB instances, the life cycle type is managed by the DB cluster.</p>
    /// <p>Valid Values: <code>open-source-rds-extended-support | open-source-rds-extended-support-disabled</code></p>
    /// <p>Default: <code>open-source-rds-extended-support</code></p>
    pub fn set_engine_lifecycle_support(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_engine_lifecycle_support(input);
        self
    }
    /// <p>The life cycle type for this DB instance.</p><note>
    /// <p>By default, this value is set to <code>open-source-rds-extended-support</code>, which enrolls your DB instance into Amazon RDS Extended Support. At the end of standard support, you can avoid charges for Extended Support by setting the value to <code>open-source-rds-extended-support-disabled</code>. In this case, RDS automatically upgrades your restored DB instance to a higher engine version, if the major engine version is past its end of standard support date.</p>
    /// </note>
    /// <p>You can use this setting to enroll your DB instance into Amazon RDS Extended Support. With RDS Extended Support, you can run the selected major engine version on your DB instance past the end of standard support for that engine version. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting applies only to RDS for MySQL and RDS for PostgreSQL. For Amazon Aurora DB instances, the life cycle type is managed by the DB cluster.</p>
    /// <p>Valid Values: <code>open-source-rds-extended-support | open-source-rds-extended-support-disabled</code></p>
    /// <p>Default: <code>open-source-rds-extended-support</code></p>
    pub fn get_engine_lifecycle_support(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_engine_lifecycle_support()
    }
}
