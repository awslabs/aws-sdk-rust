// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the details of a snapshot export to Amazon S3.</p>
/// <p>This data type is used as a response element in the <code>DescribeExportTasks</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CancelExportTaskOutput {
    /// <p>A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is exported to.</p>
    #[doc(hidden)]
    pub export_task_identifier: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.</p>
    #[doc(hidden)]
    pub source_arn: std::option::Option<std::string::String>,
    /// <p>The data exported from the snapshot. Valid values are the following:</p>
    /// <ul>
    /// <li> <p> <code>database</code> - Export all the data from a specified database.</p> </li>
    /// <li> <p> <code>database.table</code> <i>table-name</i> - Export a table of the snapshot. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.</p> </li>
    /// <li> <p> <code>database.schema</code> <i>schema-name</i> - Export a database schema of the snapshot. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// <li> <p> <code>database.schema.table</code> <i>table-name</i> - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub export_only: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The time that the snapshot was created.</p>
    #[doc(hidden)]
    pub snapshot_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time that the snapshot export task started.</p>
    #[doc(hidden)]
    pub task_start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time that the snapshot export task completed.</p>
    #[doc(hidden)]
    pub task_end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The Amazon S3 bucket that the snapshot is exported to.</p>
    #[doc(hidden)]
    pub s3_bucket: std::option::Option<std::string::String>,
    /// <p>The Amazon S3 bucket prefix that is the file name and path of the exported snapshot.</p>
    #[doc(hidden)]
    pub s3_prefix: std::option::Option<std::string::String>,
    /// <p>The name of the IAM role that is used to write to Amazon S3 when exporting a snapshot.</p>
    #[doc(hidden)]
    pub iam_role_arn: std::option::Option<std::string::String>,
    /// <p>The key identifier of the Amazon Web Services KMS key that is used to encrypt the snapshot when it's exported to Amazon S3. The KMS key identifier is its key ARN, key ID, alias ARN, or alias name. The IAM role used for the snapshot export must have encryption and decryption permissions to use this KMS key.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>The progress status of the export task.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The progress of the snapshot export task as a percentage.</p>
    #[doc(hidden)]
    pub percent_progress: i32,
    /// <p>The total amount of data exported, in gigabytes.</p>
    #[doc(hidden)]
    pub total_extracted_data_in_gb: i32,
    /// <p>The reason the export failed, if it failed.</p>
    #[doc(hidden)]
    pub failure_cause: std::option::Option<std::string::String>,
    /// <p>A warning about the snapshot export task.</p>
    #[doc(hidden)]
    pub warning_message: std::option::Option<std::string::String>,
    /// <p>The type of source for the export.</p>
    #[doc(hidden)]
    pub source_type: std::option::Option<crate::types::ExportSourceType>,
    _request_id: Option<String>,
}
impl CancelExportTaskOutput {
    /// <p>A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is exported to.</p>
    pub fn export_task_identifier(&self) -> std::option::Option<&str> {
        self.export_task_identifier.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.</p>
    pub fn source_arn(&self) -> std::option::Option<&str> {
        self.source_arn.as_deref()
    }
    /// <p>The data exported from the snapshot. Valid values are the following:</p>
    /// <ul>
    /// <li> <p> <code>database</code> - Export all the data from a specified database.</p> </li>
    /// <li> <p> <code>database.table</code> <i>table-name</i> - Export a table of the snapshot. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.</p> </li>
    /// <li> <p> <code>database.schema</code> <i>schema-name</i> - Export a database schema of the snapshot. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// <li> <p> <code>database.schema.table</code> <i>table-name</i> - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// </ul>
    pub fn export_only(&self) -> std::option::Option<&[std::string::String]> {
        self.export_only.as_deref()
    }
    /// <p>The time that the snapshot was created.</p>
    pub fn snapshot_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.snapshot_time.as_ref()
    }
    /// <p>The time that the snapshot export task started.</p>
    pub fn task_start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.task_start_time.as_ref()
    }
    /// <p>The time that the snapshot export task completed.</p>
    pub fn task_end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.task_end_time.as_ref()
    }
    /// <p>The Amazon S3 bucket that the snapshot is exported to.</p>
    pub fn s3_bucket(&self) -> std::option::Option<&str> {
        self.s3_bucket.as_deref()
    }
    /// <p>The Amazon S3 bucket prefix that is the file name and path of the exported snapshot.</p>
    pub fn s3_prefix(&self) -> std::option::Option<&str> {
        self.s3_prefix.as_deref()
    }
    /// <p>The name of the IAM role that is used to write to Amazon S3 when exporting a snapshot.</p>
    pub fn iam_role_arn(&self) -> std::option::Option<&str> {
        self.iam_role_arn.as_deref()
    }
    /// <p>The key identifier of the Amazon Web Services KMS key that is used to encrypt the snapshot when it's exported to Amazon S3. The KMS key identifier is its key ARN, key ID, alias ARN, or alias name. The IAM role used for the snapshot export must have encryption and decryption permissions to use this KMS key.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The progress status of the export task.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The progress of the snapshot export task as a percentage.</p>
    pub fn percent_progress(&self) -> i32 {
        self.percent_progress
    }
    /// <p>The total amount of data exported, in gigabytes.</p>
    pub fn total_extracted_data_in_gb(&self) -> i32 {
        self.total_extracted_data_in_gb
    }
    /// <p>The reason the export failed, if it failed.</p>
    pub fn failure_cause(&self) -> std::option::Option<&str> {
        self.failure_cause.as_deref()
    }
    /// <p>A warning about the snapshot export task.</p>
    pub fn warning_message(&self) -> std::option::Option<&str> {
        self.warning_message.as_deref()
    }
    /// <p>The type of source for the export.</p>
    pub fn source_type(&self) -> std::option::Option<&crate::types::ExportSourceType> {
        self.source_type.as_ref()
    }
}
impl aws_http::request_id::RequestId for CancelExportTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CancelExportTaskOutput {
    /// Creates a new builder-style object to manufacture [`CancelExportTaskOutput`](crate::operation::cancel_export_task::CancelExportTaskOutput).
    pub fn builder() -> crate::operation::cancel_export_task::builders::CancelExportTaskOutputBuilder
    {
        crate::operation::cancel_export_task::builders::CancelExportTaskOutputBuilder::default()
    }
}

/// A builder for [`CancelExportTaskOutput`](crate::operation::cancel_export_task::CancelExportTaskOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CancelExportTaskOutputBuilder {
    pub(crate) export_task_identifier: std::option::Option<std::string::String>,
    pub(crate) source_arn: std::option::Option<std::string::String>,
    pub(crate) export_only: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) snapshot_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) task_start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) task_end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) s3_bucket: std::option::Option<std::string::String>,
    pub(crate) s3_prefix: std::option::Option<std::string::String>,
    pub(crate) iam_role_arn: std::option::Option<std::string::String>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) percent_progress: std::option::Option<i32>,
    pub(crate) total_extracted_data_in_gb: std::option::Option<i32>,
    pub(crate) failure_cause: std::option::Option<std::string::String>,
    pub(crate) warning_message: std::option::Option<std::string::String>,
    pub(crate) source_type: std::option::Option<crate::types::ExportSourceType>,
    _request_id: Option<String>,
}
impl CancelExportTaskOutputBuilder {
    /// <p>A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is exported to.</p>
    pub fn export_task_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.export_task_identifier = Some(input.into());
        self
    }
    /// <p>A unique identifier for the snapshot export task. This ID isn't an identifier for the Amazon S3 bucket where the snapshot is exported to.</p>
    pub fn set_export_task_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.export_task_identifier = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.</p>
    pub fn source_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the snapshot exported to Amazon S3.</p>
    pub fn set_source_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_arn = input;
        self
    }
    /// Appends an item to `export_only`.
    ///
    /// To override the contents of this collection use [`set_export_only`](Self::set_export_only).
    ///
    /// <p>The data exported from the snapshot. Valid values are the following:</p>
    /// <ul>
    /// <li> <p> <code>database</code> - Export all the data from a specified database.</p> </li>
    /// <li> <p> <code>database.table</code> <i>table-name</i> - Export a table of the snapshot. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.</p> </li>
    /// <li> <p> <code>database.schema</code> <i>schema-name</i> - Export a database schema of the snapshot. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// <li> <p> <code>database.schema.table</code> <i>table-name</i> - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// </ul>
    pub fn export_only(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.export_only.unwrap_or_default();
        v.push(input.into());
        self.export_only = Some(v);
        self
    }
    /// <p>The data exported from the snapshot. Valid values are the following:</p>
    /// <ul>
    /// <li> <p> <code>database</code> - Export all the data from a specified database.</p> </li>
    /// <li> <p> <code>database.table</code> <i>table-name</i> - Export a table of the snapshot. This format is valid only for RDS for MySQL, RDS for MariaDB, and Aurora MySQL.</p> </li>
    /// <li> <p> <code>database.schema</code> <i>schema-name</i> - Export a database schema of the snapshot. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// <li> <p> <code>database.schema.table</code> <i>table-name</i> - Export a table of the database schema. This format is valid only for RDS for PostgreSQL and Aurora PostgreSQL.</p> </li>
    /// </ul>
    pub fn set_export_only(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.export_only = input;
        self
    }
    /// <p>The time that the snapshot was created.</p>
    pub fn snapshot_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.snapshot_time = Some(input);
        self
    }
    /// <p>The time that the snapshot was created.</p>
    pub fn set_snapshot_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.snapshot_time = input;
        self
    }
    /// <p>The time that the snapshot export task started.</p>
    pub fn task_start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.task_start_time = Some(input);
        self
    }
    /// <p>The time that the snapshot export task started.</p>
    pub fn set_task_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.task_start_time = input;
        self
    }
    /// <p>The time that the snapshot export task completed.</p>
    pub fn task_end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.task_end_time = Some(input);
        self
    }
    /// <p>The time that the snapshot export task completed.</p>
    pub fn set_task_end_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.task_end_time = input;
        self
    }
    /// <p>The Amazon S3 bucket that the snapshot is exported to.</p>
    pub fn s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_bucket = Some(input.into());
        self
    }
    /// <p>The Amazon S3 bucket that the snapshot is exported to.</p>
    pub fn set_s3_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_bucket = input;
        self
    }
    /// <p>The Amazon S3 bucket prefix that is the file name and path of the exported snapshot.</p>
    pub fn s3_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_prefix = Some(input.into());
        self
    }
    /// <p>The Amazon S3 bucket prefix that is the file name and path of the exported snapshot.</p>
    pub fn set_s3_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_prefix = input;
        self
    }
    /// <p>The name of the IAM role that is used to write to Amazon S3 when exporting a snapshot.</p>
    pub fn iam_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.iam_role_arn = Some(input.into());
        self
    }
    /// <p>The name of the IAM role that is used to write to Amazon S3 when exporting a snapshot.</p>
    pub fn set_iam_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.iam_role_arn = input;
        self
    }
    /// <p>The key identifier of the Amazon Web Services KMS key that is used to encrypt the snapshot when it's exported to Amazon S3. The KMS key identifier is its key ARN, key ID, alias ARN, or alias name. The IAM role used for the snapshot export must have encryption and decryption permissions to use this KMS key.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The key identifier of the Amazon Web Services KMS key that is used to encrypt the snapshot when it's exported to Amazon S3. The KMS key identifier is its key ARN, key ID, alias ARN, or alias name. The IAM role used for the snapshot export must have encryption and decryption permissions to use this KMS key.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The progress status of the export task.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>The progress status of the export task.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The progress of the snapshot export task as a percentage.</p>
    pub fn percent_progress(mut self, input: i32) -> Self {
        self.percent_progress = Some(input);
        self
    }
    /// <p>The progress of the snapshot export task as a percentage.</p>
    pub fn set_percent_progress(mut self, input: std::option::Option<i32>) -> Self {
        self.percent_progress = input;
        self
    }
    /// <p>The total amount of data exported, in gigabytes.</p>
    pub fn total_extracted_data_in_gb(mut self, input: i32) -> Self {
        self.total_extracted_data_in_gb = Some(input);
        self
    }
    /// <p>The total amount of data exported, in gigabytes.</p>
    pub fn set_total_extracted_data_in_gb(mut self, input: std::option::Option<i32>) -> Self {
        self.total_extracted_data_in_gb = input;
        self
    }
    /// <p>The reason the export failed, if it failed.</p>
    pub fn failure_cause(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_cause = Some(input.into());
        self
    }
    /// <p>The reason the export failed, if it failed.</p>
    pub fn set_failure_cause(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_cause = input;
        self
    }
    /// <p>A warning about the snapshot export task.</p>
    pub fn warning_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.warning_message = Some(input.into());
        self
    }
    /// <p>A warning about the snapshot export task.</p>
    pub fn set_warning_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.warning_message = input;
        self
    }
    /// <p>The type of source for the export.</p>
    pub fn source_type(mut self, input: crate::types::ExportSourceType) -> Self {
        self.source_type = Some(input);
        self
    }
    /// <p>The type of source for the export.</p>
    pub fn set_source_type(
        mut self,
        input: std::option::Option<crate::types::ExportSourceType>,
    ) -> Self {
        self.source_type = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CancelExportTaskOutput`](crate::operation::cancel_export_task::CancelExportTaskOutput).
    pub fn build(self) -> crate::operation::cancel_export_task::CancelExportTaskOutput {
        crate::operation::cancel_export_task::CancelExportTaskOutput {
            export_task_identifier: self.export_task_identifier,
            source_arn: self.source_arn,
            export_only: self.export_only,
            snapshot_time: self.snapshot_time,
            task_start_time: self.task_start_time,
            task_end_time: self.task_end_time,
            s3_bucket: self.s3_bucket,
            s3_prefix: self.s3_prefix,
            iam_role_arn: self.iam_role_arn,
            kms_key_id: self.kms_key_id,
            status: self.status,
            percent_progress: self.percent_progress.unwrap_or_default(),
            total_extracted_data_in_gb: self.total_extracted_data_in_gb.unwrap_or_default(),
            failure_cause: self.failure_cause,
            warning_message: self.warning_message,
            source_type: self.source_type,
            _request_id: self._request_id,
        }
    }
}
