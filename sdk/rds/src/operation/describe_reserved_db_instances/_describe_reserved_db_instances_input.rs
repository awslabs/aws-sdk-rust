// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeReservedDbInstancesInput {
    /// <p>The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.</p>
    #[doc(hidden)]
    pub reserved_db_instance_id: std::option::Option<std::string::String>,
    /// <p>The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.</p>
    #[doc(hidden)]
    pub reserved_db_instances_offering_id: std::option::Option<std::string::String>,
    /// <p>The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.</p>
    #[doc(hidden)]
    pub db_instance_class: std::option::Option<std::string::String>,
    /// <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p>
    /// <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
    #[doc(hidden)]
    pub duration: std::option::Option<std::string::String>,
    /// <p>The product description filter value. Specify this parameter to show only those reservations matching the specified product description.</p>
    #[doc(hidden)]
    pub product_description: std::option::Option<std::string::String>,
    /// <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p>
    /// <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
    #[doc(hidden)]
    pub offering_type: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether to show only those reservations that support Multi-AZ.</p>
    #[doc(hidden)]
    pub multi_az: std::option::Option<bool>,
    /// <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note>
    /// <p>Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.</p>
    /// </note>
    #[doc(hidden)]
    pub lease_id: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    /// <p>The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    #[doc(hidden)]
    pub max_records: std::option::Option<i32>,
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
}
impl DescribeReservedDbInstancesInput {
    /// <p>The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.</p>
    pub fn reserved_db_instance_id(&self) -> std::option::Option<&str> {
        self.reserved_db_instance_id.as_deref()
    }
    /// <p>The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.</p>
    pub fn reserved_db_instances_offering_id(&self) -> std::option::Option<&str> {
        self.reserved_db_instances_offering_id.as_deref()
    }
    /// <p>The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.</p>
    pub fn db_instance_class(&self) -> std::option::Option<&str> {
        self.db_instance_class.as_deref()
    }
    /// <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p>
    /// <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
    pub fn duration(&self) -> std::option::Option<&str> {
        self.duration.as_deref()
    }
    /// <p>The product description filter value. Specify this parameter to show only those reservations matching the specified product description.</p>
    pub fn product_description(&self) -> std::option::Option<&str> {
        self.product_description.as_deref()
    }
    /// <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p>
    /// <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
    pub fn offering_type(&self) -> std::option::Option<&str> {
        self.offering_type.as_deref()
    }
    /// <p>A value that indicates whether to show only those reservations that support Multi-AZ.</p>
    pub fn multi_az(&self) -> std::option::Option<bool> {
        self.multi_az
    }
    /// <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note>
    /// <p>Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.</p>
    /// </note>
    pub fn lease_id(&self) -> std::option::Option<&str> {
        self.lease_id.as_deref()
    }
    /// <p>This parameter isn't currently supported.</p>
    pub fn filters(&self) -> std::option::Option<&[crate::types::Filter]> {
        self.filters.as_deref()
    }
    /// <p>The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(&self) -> std::option::Option<i32> {
        self.max_records
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl DescribeReservedDbInstancesInput {
    /// Creates a new builder-style object to manufacture [`DescribeReservedDbInstancesInput`](crate::operation::describe_reserved_db_instances::DescribeReservedDbInstancesInput).
    pub fn builder() -> crate::operation::describe_reserved_db_instances::builders::DescribeReservedDbInstancesInputBuilder{
        crate::operation::describe_reserved_db_instances::builders::DescribeReservedDbInstancesInputBuilder::default()
    }
}

/// A builder for [`DescribeReservedDbInstancesInput`](crate::operation::describe_reserved_db_instances::DescribeReservedDbInstancesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeReservedDbInstancesInputBuilder {
    pub(crate) reserved_db_instance_id: std::option::Option<std::string::String>,
    pub(crate) reserved_db_instances_offering_id: std::option::Option<std::string::String>,
    pub(crate) db_instance_class: std::option::Option<std::string::String>,
    pub(crate) duration: std::option::Option<std::string::String>,
    pub(crate) product_description: std::option::Option<std::string::String>,
    pub(crate) offering_type: std::option::Option<std::string::String>,
    pub(crate) multi_az: std::option::Option<bool>,
    pub(crate) lease_id: std::option::Option<std::string::String>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    pub(crate) max_records: std::option::Option<i32>,
    pub(crate) marker: std::option::Option<std::string::String>,
}
impl DescribeReservedDbInstancesInputBuilder {
    /// <p>The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.</p>
    pub fn reserved_db_instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.reserved_db_instance_id = Some(input.into());
        self
    }
    /// <p>The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.</p>
    pub fn set_reserved_db_instance_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reserved_db_instance_id = input;
        self
    }
    /// <p>The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.</p>
    pub fn reserved_db_instances_offering_id(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.reserved_db_instances_offering_id = Some(input.into());
        self
    }
    /// <p>The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.</p>
    pub fn set_reserved_db_instances_offering_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reserved_db_instances_offering_id = input;
        self
    }
    /// <p>The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.</p>
    pub fn db_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_instance_class = Some(input.into());
        self
    }
    /// <p>The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.</p>
    pub fn set_db_instance_class(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_instance_class = input;
        self
    }
    /// <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p>
    /// <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
    pub fn duration(mut self, input: impl Into<std::string::String>) -> Self {
        self.duration = Some(input.into());
        self
    }
    /// <p>The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration.</p>
    /// <p>Valid Values: <code>1 | 3 | 31536000 | 94608000</code> </p>
    pub fn set_duration(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.duration = input;
        self
    }
    /// <p>The product description filter value. Specify this parameter to show only those reservations matching the specified product description.</p>
    pub fn product_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.product_description = Some(input.into());
        self
    }
    /// <p>The product description filter value. Specify this parameter to show only those reservations matching the specified product description.</p>
    pub fn set_product_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.product_description = input;
        self
    }
    /// <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p>
    /// <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
    pub fn offering_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.offering_type = Some(input.into());
        self
    }
    /// <p>The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type.</p>
    /// <p>Valid Values: <code>"Partial Upfront" | "All Upfront" | "No Upfront" </code> </p>
    pub fn set_offering_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.offering_type = input;
        self
    }
    /// <p>A value that indicates whether to show only those reservations that support Multi-AZ.</p>
    pub fn multi_az(mut self, input: bool) -> Self {
        self.multi_az = Some(input);
        self
    }
    /// <p>A value that indicates whether to show only those reservations that support Multi-AZ.</p>
    pub fn set_multi_az(mut self, input: std::option::Option<bool>) -> Self {
        self.multi_az = input;
        self
    }
    /// <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note>
    /// <p>Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.</p>
    /// </note>
    pub fn lease_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.lease_id = Some(input.into());
        self
    }
    /// <p>The lease identifier filter value. Specify this parameter to show only the reservation that matches the specified lease ID.</p> <note>
    /// <p>Amazon Web Services Support might request the lease ID for an issue related to a reserved DB instance.</p>
    /// </note>
    pub fn set_lease_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.lease_id = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>This parameter isn't currently supported.</p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>This parameter isn't currently supported.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = Some(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeReservedDbInstancesInput`](crate::operation::describe_reserved_db_instances::DescribeReservedDbInstancesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_reserved_db_instances::DescribeReservedDbInstancesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_reserved_db_instances::DescribeReservedDbInstancesInput {
                reserved_db_instance_id: self.reserved_db_instance_id,
                reserved_db_instances_offering_id: self.reserved_db_instances_offering_id,
                db_instance_class: self.db_instance_class,
                duration: self.duration,
                product_description: self.product_description,
                offering_type: self.offering_type,
                multi_az: self.multi_az,
                lease_id: self.lease_id,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            },
        )
    }
}
