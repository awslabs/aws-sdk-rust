// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeDbRecommendationsInput {
    /// <p>A filter to include only the recommendations that were updated after this specified time.</p>
    pub last_updated_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A filter to include only the recommendations that were updated before this specified time.</p>
    pub last_updated_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The language that you choose to return the list of recommendations.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>en</code></p></li>
    /// <li>
    /// <p><code>en_UK</code></p></li>
    /// <li>
    /// <p><code>de</code></p></li>
    /// <li>
    /// <p><code>es</code></p></li>
    /// <li>
    /// <p><code>fr</code></p></li>
    /// <li>
    /// <p><code>id</code></p></li>
    /// <li>
    /// <p><code>it</code></p></li>
    /// <li>
    /// <p><code>ja</code></p></li>
    /// <li>
    /// <p><code>ko</code></p></li>
    /// <li>
    /// <p><code>pt_BR</code></p></li>
    /// <li>
    /// <p><code>zh_TW</code></p></li>
    /// <li>
    /// <p><code>zh_CN</code></p></li>
    /// </ul>
    pub locale: ::std::option::Option<::std::string::String>,
    /// <p>A filter that specifies one or more recommendations to describe.</p>
    /// <p>Supported Filters:</p>
    /// <ul>
    /// <li>
    /// <p><code>recommendation-id</code> - Accepts a list of recommendation identifiers. The results list only includes the recommendations whose identifier is one of the specified filter values.</p></li>
    /// <li>
    /// <p><code>status</code> - Accepts a list of recommendation statuses.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>active</code> - The recommendations which are ready for you to apply.</p></li>
    /// <li>
    /// <p><code>pending</code> - The applied or scheduled recommendations which are in progress.</p></li>
    /// <li>
    /// <p><code>resolved</code> - The recommendations which are completed.</p></li>
    /// <li>
    /// <p><code>dismissed</code> - The recommendations that you dismissed.</p></li>
    /// </ul>
    /// <p>The results list only includes the recommendations whose status is one of the specified filter values.</p></li>
    /// <li>
    /// <p><code>severity</code> - Accepts a list of recommendation severities. The results list only includes the recommendations whose severity is one of the specified filter values.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>high</code></p></li>
    /// <li>
    /// <p><code>medium</code></p></li>
    /// <li>
    /// <p><code>low</code></p></li>
    /// <li>
    /// <p><code>informational</code></p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>type-id</code> - Accepts a list of recommendation type identifiers. The results list only includes the recommendations whose type is one of the specified filter values.</p></li>
    /// <li>
    /// <p><code>dbi-resource-id</code> - Accepts a list of database resource identifiers. The results list only includes the recommendations that generated for the specified databases.</p></li>
    /// <li>
    /// <p><code>cluster-resource-id</code> - Accepts a list of cluster resource identifiers. The results list only includes the recommendations that generated for the specified clusters.</p></li>
    /// <li>
    /// <p><code>pg-arn</code> - Accepts a list of parameter group ARNs. The results list only includes the recommendations that generated for the specified parameter groups.</p></li>
    /// <li>
    /// <p><code>cluster-pg-arn</code> - Accepts a list of cluster parameter group ARNs. The results list only includes the recommendations that generated for the specified cluster parameter groups.</p></li>
    /// </ul>
    pub filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    /// <p>The maximum number of recommendations to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub max_records: ::std::option::Option<i32>,
    /// <p>An optional pagination token provided by a previous <code>DescribeDBRecommendations</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub marker: ::std::option::Option<::std::string::String>,
}
impl DescribeDbRecommendationsInput {
    /// <p>A filter to include only the recommendations that were updated after this specified time.</p>
    pub fn last_updated_after(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_after.as_ref()
    }
    /// <p>A filter to include only the recommendations that were updated before this specified time.</p>
    pub fn last_updated_before(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_before.as_ref()
    }
    /// <p>The language that you choose to return the list of recommendations.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>en</code></p></li>
    /// <li>
    /// <p><code>en_UK</code></p></li>
    /// <li>
    /// <p><code>de</code></p></li>
    /// <li>
    /// <p><code>es</code></p></li>
    /// <li>
    /// <p><code>fr</code></p></li>
    /// <li>
    /// <p><code>id</code></p></li>
    /// <li>
    /// <p><code>it</code></p></li>
    /// <li>
    /// <p><code>ja</code></p></li>
    /// <li>
    /// <p><code>ko</code></p></li>
    /// <li>
    /// <p><code>pt_BR</code></p></li>
    /// <li>
    /// <p><code>zh_TW</code></p></li>
    /// <li>
    /// <p><code>zh_CN</code></p></li>
    /// </ul>
    pub fn locale(&self) -> ::std::option::Option<&str> {
        self.locale.as_deref()
    }
    /// <p>A filter that specifies one or more recommendations to describe.</p>
    /// <p>Supported Filters:</p>
    /// <ul>
    /// <li>
    /// <p><code>recommendation-id</code> - Accepts a list of recommendation identifiers. The results list only includes the recommendations whose identifier is one of the specified filter values.</p></li>
    /// <li>
    /// <p><code>status</code> - Accepts a list of recommendation statuses.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>active</code> - The recommendations which are ready for you to apply.</p></li>
    /// <li>
    /// <p><code>pending</code> - The applied or scheduled recommendations which are in progress.</p></li>
    /// <li>
    /// <p><code>resolved</code> - The recommendations which are completed.</p></li>
    /// <li>
    /// <p><code>dismissed</code> - The recommendations that you dismissed.</p></li>
    /// </ul>
    /// <p>The results list only includes the recommendations whose status is one of the specified filter values.</p></li>
    /// <li>
    /// <p><code>severity</code> - Accepts a list of recommendation severities. The results list only includes the recommendations whose severity is one of the specified filter values.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>high</code></p></li>
    /// <li>
    /// <p><code>medium</code></p></li>
    /// <li>
    /// <p><code>low</code></p></li>
    /// <li>
    /// <p><code>informational</code></p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>type-id</code> - Accepts a list of recommendation type identifiers. The results list only includes the recommendations whose type is one of the specified filter values.</p></li>
    /// <li>
    /// <p><code>dbi-resource-id</code> - Accepts a list of database resource identifiers. The results list only includes the recommendations that generated for the specified databases.</p></li>
    /// <li>
    /// <p><code>cluster-resource-id</code> - Accepts a list of cluster resource identifiers. The results list only includes the recommendations that generated for the specified clusters.</p></li>
    /// <li>
    /// <p><code>pg-arn</code> - Accepts a list of parameter group ARNs. The results list only includes the recommendations that generated for the specified parameter groups.</p></li>
    /// <li>
    /// <p><code>cluster-pg-arn</code> - Accepts a list of cluster parameter group ARNs. The results list only includes the recommendations that generated for the specified cluster parameter groups.</p></li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filters.is_none()`.
    pub fn filters(&self) -> &[crate::types::Filter] {
        self.filters.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of recommendations to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub fn max_records(&self) -> ::std::option::Option<i32> {
        self.max_records
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBRecommendations</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl DescribeDbRecommendationsInput {
    /// Creates a new builder-style object to manufacture [`DescribeDbRecommendationsInput`](crate::operation::describe_db_recommendations::DescribeDbRecommendationsInput).
    pub fn builder() -> crate::operation::describe_db_recommendations::builders::DescribeDbRecommendationsInputBuilder {
        crate::operation::describe_db_recommendations::builders::DescribeDbRecommendationsInputBuilder::default()
    }
}

/// A builder for [`DescribeDbRecommendationsInput`](crate::operation::describe_db_recommendations::DescribeDbRecommendationsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeDbRecommendationsInputBuilder {
    pub(crate) last_updated_after: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_before: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) locale: ::std::option::Option<::std::string::String>,
    pub(crate) filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    pub(crate) max_records: ::std::option::Option<i32>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
}
impl DescribeDbRecommendationsInputBuilder {
    /// <p>A filter to include only the recommendations that were updated after this specified time.</p>
    pub fn last_updated_after(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_after = ::std::option::Option::Some(input);
        self
    }
    /// <p>A filter to include only the recommendations that were updated after this specified time.</p>
    pub fn set_last_updated_after(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_after = input;
        self
    }
    /// <p>A filter to include only the recommendations that were updated after this specified time.</p>
    pub fn get_last_updated_after(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_after
    }
    /// <p>A filter to include only the recommendations that were updated before this specified time.</p>
    pub fn last_updated_before(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_before = ::std::option::Option::Some(input);
        self
    }
    /// <p>A filter to include only the recommendations that were updated before this specified time.</p>
    pub fn set_last_updated_before(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_before = input;
        self
    }
    /// <p>A filter to include only the recommendations that were updated before this specified time.</p>
    pub fn get_last_updated_before(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_before
    }
    /// <p>The language that you choose to return the list of recommendations.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>en</code></p></li>
    /// <li>
    /// <p><code>en_UK</code></p></li>
    /// <li>
    /// <p><code>de</code></p></li>
    /// <li>
    /// <p><code>es</code></p></li>
    /// <li>
    /// <p><code>fr</code></p></li>
    /// <li>
    /// <p><code>id</code></p></li>
    /// <li>
    /// <p><code>it</code></p></li>
    /// <li>
    /// <p><code>ja</code></p></li>
    /// <li>
    /// <p><code>ko</code></p></li>
    /// <li>
    /// <p><code>pt_BR</code></p></li>
    /// <li>
    /// <p><code>zh_TW</code></p></li>
    /// <li>
    /// <p><code>zh_CN</code></p></li>
    /// </ul>
    pub fn locale(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locale = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The language that you choose to return the list of recommendations.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>en</code></p></li>
    /// <li>
    /// <p><code>en_UK</code></p></li>
    /// <li>
    /// <p><code>de</code></p></li>
    /// <li>
    /// <p><code>es</code></p></li>
    /// <li>
    /// <p><code>fr</code></p></li>
    /// <li>
    /// <p><code>id</code></p></li>
    /// <li>
    /// <p><code>it</code></p></li>
    /// <li>
    /// <p><code>ja</code></p></li>
    /// <li>
    /// <p><code>ko</code></p></li>
    /// <li>
    /// <p><code>pt_BR</code></p></li>
    /// <li>
    /// <p><code>zh_TW</code></p></li>
    /// <li>
    /// <p><code>zh_CN</code></p></li>
    /// </ul>
    pub fn set_locale(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locale = input;
        self
    }
    /// <p>The language that you choose to return the list of recommendations.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>en</code></p></li>
    /// <li>
    /// <p><code>en_UK</code></p></li>
    /// <li>
    /// <p><code>de</code></p></li>
    /// <li>
    /// <p><code>es</code></p></li>
    /// <li>
    /// <p><code>fr</code></p></li>
    /// <li>
    /// <p><code>id</code></p></li>
    /// <li>
    /// <p><code>it</code></p></li>
    /// <li>
    /// <p><code>ja</code></p></li>
    /// <li>
    /// <p><code>ko</code></p></li>
    /// <li>
    /// <p><code>pt_BR</code></p></li>
    /// <li>
    /// <p><code>zh_TW</code></p></li>
    /// <li>
    /// <p><code>zh_CN</code></p></li>
    /// </ul>
    pub fn get_locale(&self) -> &::std::option::Option<::std::string::String> {
        &self.locale
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>A filter that specifies one or more recommendations to describe.</p>
    /// <p>Supported Filters:</p>
    /// <ul>
    /// <li>
    /// <p><code>recommendation-id</code> - Accepts a list of recommendation identifiers. The results list only includes the recommendations whose identifier is one of the specified filter values.</p></li>
    /// <li>
    /// <p><code>status</code> - Accepts a list of recommendation statuses.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>active</code> - The recommendations which are ready for you to apply.</p></li>
    /// <li>
    /// <p><code>pending</code> - The applied or scheduled recommendations which are in progress.</p></li>
    /// <li>
    /// <p><code>resolved</code> - The recommendations which are completed.</p></li>
    /// <li>
    /// <p><code>dismissed</code> - The recommendations that you dismissed.</p></li>
    /// </ul>
    /// <p>The results list only includes the recommendations whose status is one of the specified filter values.</p></li>
    /// <li>
    /// <p><code>severity</code> - Accepts a list of recommendation severities. The results list only includes the recommendations whose severity is one of the specified filter values.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>high</code></p></li>
    /// <li>
    /// <p><code>medium</code></p></li>
    /// <li>
    /// <p><code>low</code></p></li>
    /// <li>
    /// <p><code>informational</code></p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>type-id</code> - Accepts a list of recommendation type identifiers. The results list only includes the recommendations whose type is one of the specified filter values.</p></li>
    /// <li>
    /// <p><code>dbi-resource-id</code> - Accepts a list of database resource identifiers. The results list only includes the recommendations that generated for the specified databases.</p></li>
    /// <li>
    /// <p><code>cluster-resource-id</code> - Accepts a list of cluster resource identifiers. The results list only includes the recommendations that generated for the specified clusters.</p></li>
    /// <li>
    /// <p><code>pg-arn</code> - Accepts a list of parameter group ARNs. The results list only includes the recommendations that generated for the specified parameter groups.</p></li>
    /// <li>
    /// <p><code>cluster-pg-arn</code> - Accepts a list of cluster parameter group ARNs. The results list only includes the recommendations that generated for the specified cluster parameter groups.</p></li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>A filter that specifies one or more recommendations to describe.</p>
    /// <p>Supported Filters:</p>
    /// <ul>
    /// <li>
    /// <p><code>recommendation-id</code> - Accepts a list of recommendation identifiers. The results list only includes the recommendations whose identifier is one of the specified filter values.</p></li>
    /// <li>
    /// <p><code>status</code> - Accepts a list of recommendation statuses.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>active</code> - The recommendations which are ready for you to apply.</p></li>
    /// <li>
    /// <p><code>pending</code> - The applied or scheduled recommendations which are in progress.</p></li>
    /// <li>
    /// <p><code>resolved</code> - The recommendations which are completed.</p></li>
    /// <li>
    /// <p><code>dismissed</code> - The recommendations that you dismissed.</p></li>
    /// </ul>
    /// <p>The results list only includes the recommendations whose status is one of the specified filter values.</p></li>
    /// <li>
    /// <p><code>severity</code> - Accepts a list of recommendation severities. The results list only includes the recommendations whose severity is one of the specified filter values.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>high</code></p></li>
    /// <li>
    /// <p><code>medium</code></p></li>
    /// <li>
    /// <p><code>low</code></p></li>
    /// <li>
    /// <p><code>informational</code></p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>type-id</code> - Accepts a list of recommendation type identifiers. The results list only includes the recommendations whose type is one of the specified filter values.</p></li>
    /// <li>
    /// <p><code>dbi-resource-id</code> - Accepts a list of database resource identifiers. The results list only includes the recommendations that generated for the specified databases.</p></li>
    /// <li>
    /// <p><code>cluster-resource-id</code> - Accepts a list of cluster resource identifiers. The results list only includes the recommendations that generated for the specified clusters.</p></li>
    /// <li>
    /// <p><code>pg-arn</code> - Accepts a list of parameter group ARNs. The results list only includes the recommendations that generated for the specified parameter groups.</p></li>
    /// <li>
    /// <p><code>cluster-pg-arn</code> - Accepts a list of cluster parameter group ARNs. The results list only includes the recommendations that generated for the specified cluster parameter groups.</p></li>
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.filters = input;
        self
    }
    /// <p>A filter that specifies one or more recommendations to describe.</p>
    /// <p>Supported Filters:</p>
    /// <ul>
    /// <li>
    /// <p><code>recommendation-id</code> - Accepts a list of recommendation identifiers. The results list only includes the recommendations whose identifier is one of the specified filter values.</p></li>
    /// <li>
    /// <p><code>status</code> - Accepts a list of recommendation statuses.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>active</code> - The recommendations which are ready for you to apply.</p></li>
    /// <li>
    /// <p><code>pending</code> - The applied or scheduled recommendations which are in progress.</p></li>
    /// <li>
    /// <p><code>resolved</code> - The recommendations which are completed.</p></li>
    /// <li>
    /// <p><code>dismissed</code> - The recommendations that you dismissed.</p></li>
    /// </ul>
    /// <p>The results list only includes the recommendations whose status is one of the specified filter values.</p></li>
    /// <li>
    /// <p><code>severity</code> - Accepts a list of recommendation severities. The results list only includes the recommendations whose severity is one of the specified filter values.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li>
    /// <p><code>high</code></p></li>
    /// <li>
    /// <p><code>medium</code></p></li>
    /// <li>
    /// <p><code>low</code></p></li>
    /// <li>
    /// <p><code>informational</code></p></li>
    /// </ul></li>
    /// <li>
    /// <p><code>type-id</code> - Accepts a list of recommendation type identifiers. The results list only includes the recommendations whose type is one of the specified filter values.</p></li>
    /// <li>
    /// <p><code>dbi-resource-id</code> - Accepts a list of database resource identifiers. The results list only includes the recommendations that generated for the specified databases.</p></li>
    /// <li>
    /// <p><code>cluster-resource-id</code> - Accepts a list of cluster resource identifiers. The results list only includes the recommendations that generated for the specified clusters.</p></li>
    /// <li>
    /// <p><code>pg-arn</code> - Accepts a list of parameter group ARNs. The results list only includes the recommendations that generated for the specified parameter groups.</p></li>
    /// <li>
    /// <p><code>cluster-pg-arn</code> - Accepts a list of cluster parameter group ARNs. The results list only includes the recommendations that generated for the specified cluster parameter groups.</p></li>
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.filters
    }
    /// <p>The maximum number of recommendations to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of recommendations to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub fn set_max_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>The maximum number of recommendations to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub fn get_max_records(&self) -> &::std::option::Option<i32> {
        &self.max_records
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBRecommendations</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBRecommendations</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBRecommendations</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// Consumes the builder and constructs a [`DescribeDbRecommendationsInput`](crate::operation::describe_db_recommendations::DescribeDbRecommendationsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_db_recommendations::DescribeDbRecommendationsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_db_recommendations::DescribeDbRecommendationsInput {
            last_updated_after: self.last_updated_after,
            last_updated_before: self.last_updated_before,
            locale: self.locale,
            filters: self.filters,
            max_records: self.max_records,
            marker: self.marker,
        })
    }
}
