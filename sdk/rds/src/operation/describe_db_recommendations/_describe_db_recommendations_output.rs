// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeDbRecommendationsOutput {
    /// <p>A list of recommendations which is returned from <code>DescribeDBRecommendations</code> API request.</p>
    pub db_recommendations: ::std::option::Option<::std::vec::Vec<crate::types::DbRecommendation>>,
    /// <p>An optional pagination token provided by a previous <code>DBRecommendationsMessage</code> request. This token can be used later in a <code>DescribeDBRecomendations</code> request.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeDbRecommendationsOutput {
    /// <p>A list of recommendations which is returned from <code>DescribeDBRecommendations</code> API request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.db_recommendations.is_none()`.
    pub fn db_recommendations(&self) -> &[crate::types::DbRecommendation] {
        self.db_recommendations.as_deref().unwrap_or_default()
    }
    /// <p>An optional pagination token provided by a previous <code>DBRecommendationsMessage</code> request. This token can be used later in a <code>DescribeDBRecomendations</code> request.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl ::aws_types::request_id::RequestId for DescribeDbRecommendationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDbRecommendationsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDbRecommendationsOutput`](crate::operation::describe_db_recommendations::DescribeDbRecommendationsOutput).
    pub fn builder() -> crate::operation::describe_db_recommendations::builders::DescribeDbRecommendationsOutputBuilder {
        crate::operation::describe_db_recommendations::builders::DescribeDbRecommendationsOutputBuilder::default()
    }
}

/// A builder for [`DescribeDbRecommendationsOutput`](crate::operation::describe_db_recommendations::DescribeDbRecommendationsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeDbRecommendationsOutputBuilder {
    pub(crate) db_recommendations: ::std::option::Option<::std::vec::Vec<crate::types::DbRecommendation>>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeDbRecommendationsOutputBuilder {
    /// Appends an item to `db_recommendations`.
    ///
    /// To override the contents of this collection use [`set_db_recommendations`](Self::set_db_recommendations).
    ///
    /// <p>A list of recommendations which is returned from <code>DescribeDBRecommendations</code> API request.</p>
    pub fn db_recommendations(mut self, input: crate::types::DbRecommendation) -> Self {
        let mut v = self.db_recommendations.unwrap_or_default();
        v.push(input);
        self.db_recommendations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of recommendations which is returned from <code>DescribeDBRecommendations</code> API request.</p>
    pub fn set_db_recommendations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DbRecommendation>>) -> Self {
        self.db_recommendations = input;
        self
    }
    /// <p>A list of recommendations which is returned from <code>DescribeDBRecommendations</code> API request.</p>
    pub fn get_db_recommendations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DbRecommendation>> {
        &self.db_recommendations
    }
    /// <p>An optional pagination token provided by a previous <code>DBRecommendationsMessage</code> request. This token can be used later in a <code>DescribeDBRecomendations</code> request.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DBRecommendationsMessage</code> request. This token can be used later in a <code>DescribeDBRecomendations</code> request.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DBRecommendationsMessage</code> request. This token can be used later in a <code>DescribeDBRecomendations</code> request.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDbRecommendationsOutput`](crate::operation::describe_db_recommendations::DescribeDbRecommendationsOutput).
    pub fn build(self) -> crate::operation::describe_db_recommendations::DescribeDbRecommendationsOutput {
        crate::operation::describe_db_recommendations::DescribeDbRecommendationsOutput {
            db_recommendations: self.db_recommendations,
            marker: self.marker,
            _request_id: self._request_id,
        }
    }
}
