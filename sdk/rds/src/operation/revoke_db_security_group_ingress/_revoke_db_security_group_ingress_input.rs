// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RevokeDbSecurityGroupIngressInput {
    /// <p>The name of the DB security group to revoke ingress from.</p>
    pub db_security_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided.</p>
    pub cidrip: ::std::option::Option<::std::string::String>,
    /// <p>The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
    pub ec2_security_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
    pub ec2_security_group_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Web Services account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The Amazon Web Services access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
    pub ec2_security_group_owner_id: ::std::option::Option<::std::string::String>,
}
impl RevokeDbSecurityGroupIngressInput {
    /// <p>The name of the DB security group to revoke ingress from.</p>
    pub fn db_security_group_name(&self) -> ::std::option::Option<&str> {
        self.db_security_group_name.as_deref()
    }
    /// <p>The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided.</p>
    pub fn cidrip(&self) -> ::std::option::Option<&str> {
        self.cidrip.as_deref()
    }
    /// <p>The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
    pub fn ec2_security_group_name(&self) -> ::std::option::Option<&str> {
        self.ec2_security_group_name.as_deref()
    }
    /// <p>The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
    pub fn ec2_security_group_id(&self) -> ::std::option::Option<&str> {
        self.ec2_security_group_id.as_deref()
    }
    /// <p>The Amazon Web Services account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The Amazon Web Services access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
    pub fn ec2_security_group_owner_id(&self) -> ::std::option::Option<&str> {
        self.ec2_security_group_owner_id.as_deref()
    }
}
impl RevokeDbSecurityGroupIngressInput {
    /// Creates a new builder-style object to manufacture [`RevokeDbSecurityGroupIngressInput`](crate::operation::revoke_db_security_group_ingress::RevokeDbSecurityGroupIngressInput).
    pub fn builder() -> crate::operation::revoke_db_security_group_ingress::builders::RevokeDbSecurityGroupIngressInputBuilder {
        crate::operation::revoke_db_security_group_ingress::builders::RevokeDbSecurityGroupIngressInputBuilder::default()
    }
}

/// A builder for [`RevokeDbSecurityGroupIngressInput`](crate::operation::revoke_db_security_group_ingress::RevokeDbSecurityGroupIngressInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RevokeDbSecurityGroupIngressInputBuilder {
    pub(crate) db_security_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) cidrip: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_security_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_security_group_id: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_security_group_owner_id: ::std::option::Option<::std::string::String>,
}
impl RevokeDbSecurityGroupIngressInputBuilder {
    /// <p>The name of the DB security group to revoke ingress from.</p>
    /// This field is required.
    pub fn db_security_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_security_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the DB security group to revoke ingress from.</p>
    pub fn set_db_security_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_security_group_name = input;
        self
    }
    /// <p>The name of the DB security group to revoke ingress from.</p>
    pub fn get_db_security_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_security_group_name
    }
    /// <p>The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided.</p>
    pub fn cidrip(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cidrip = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided.</p>
    pub fn set_cidrip(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cidrip = input;
        self
    }
    /// <p>The IP range to revoke access from. Must be a valid CIDR range. If <code>CIDRIP</code> is specified, <code>EC2SecurityGroupName</code>, <code>EC2SecurityGroupId</code> and <code>EC2SecurityGroupOwnerId</code> can't be provided.</p>
    pub fn get_cidrip(&self) -> &::std::option::Option<::std::string::String> {
        &self.cidrip
    }
    /// <p>The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
    pub fn ec2_security_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_security_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
    pub fn set_ec2_security_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_security_group_name = input;
        self
    }
    /// <p>The name of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
    pub fn get_ec2_security_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_security_group_name
    }
    /// <p>The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
    pub fn ec2_security_group_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_security_group_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
    pub fn set_ec2_security_group_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_security_group_id = input;
        self
    }
    /// <p>The id of the EC2 security group to revoke access from. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
    pub fn get_ec2_security_group_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_security_group_id
    }
    /// <p>The Amazon Web Services account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The Amazon Web Services access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
    pub fn ec2_security_group_owner_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_security_group_owner_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The Amazon Web Services access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
    pub fn set_ec2_security_group_owner_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_security_group_owner_id = input;
        self
    }
    /// <p>The Amazon Web Services account number of the owner of the EC2 security group specified in the <code>EC2SecurityGroupName</code> parameter. The Amazon Web Services access key ID isn't an acceptable value. For VPC DB security groups, <code>EC2SecurityGroupId</code> must be provided. Otherwise, EC2SecurityGroupOwnerId and either <code>EC2SecurityGroupName</code> or <code>EC2SecurityGroupId</code> must be provided.</p>
    pub fn get_ec2_security_group_owner_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_security_group_owner_id
    }
    /// Consumes the builder and constructs a [`RevokeDbSecurityGroupIngressInput`](crate::operation::revoke_db_security_group_ingress::RevokeDbSecurityGroupIngressInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::revoke_db_security_group_ingress::RevokeDbSecurityGroupIngressInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::revoke_db_security_group_ingress::RevokeDbSecurityGroupIngressInput {
            db_security_group_name: self.db_security_group_name,
            cidrip: self.cidrip,
            ec2_security_group_name: self.ec2_security_group_name,
            ec2_security_group_id: self.ec2_security_group_id,
            ec2_security_group_owner_id: self.ec2_security_group_owner_id,
        })
    }
}
