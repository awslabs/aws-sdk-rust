// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDbProxyTargetGroupsInput {
    /// <p>The identifier of the <code>DBProxy</code> associated with the target group.</p>
    #[doc(hidden)]
    pub db_proxy_name: std::option::Option<std::string::String>,
    /// <p>The identifier of the <code>DBProxyTargetGroup</code> to describe.</p>
    #[doc(hidden)]
    pub target_group_name: std::option::Option<std::string::String>,
    /// <p>This parameter is not currently supported.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    #[doc(hidden)]
    pub max_records: std::option::Option<i32>,
}
impl DescribeDbProxyTargetGroupsInput {
    /// <p>The identifier of the <code>DBProxy</code> associated with the target group.</p>
    pub fn db_proxy_name(&self) -> std::option::Option<&str> {
        self.db_proxy_name.as_deref()
    }
    /// <p>The identifier of the <code>DBProxyTargetGroup</code> to describe.</p>
    pub fn target_group_name(&self) -> std::option::Option<&str> {
        self.target_group_name.as_deref()
    }
    /// <p>This parameter is not currently supported.</p>
    pub fn filters(&self) -> std::option::Option<&[crate::types::Filter]> {
        self.filters.as_deref()
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(&self) -> std::option::Option<i32> {
        self.max_records
    }
}
impl DescribeDbProxyTargetGroupsInput {
    /// Creates a new builder-style object to manufacture [`DescribeDbProxyTargetGroupsInput`](crate::operation::describe_db_proxy_target_groups::DescribeDbProxyTargetGroupsInput).
    pub fn builder() -> crate::operation::describe_db_proxy_target_groups::builders::DescribeDbProxyTargetGroupsInputBuilder{
        crate::operation::describe_db_proxy_target_groups::builders::DescribeDbProxyTargetGroupsInputBuilder::default()
    }
}

/// A builder for [`DescribeDbProxyTargetGroupsInput`](crate::operation::describe_db_proxy_target_groups::DescribeDbProxyTargetGroupsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDbProxyTargetGroupsInputBuilder {
    pub(crate) db_proxy_name: std::option::Option<std::string::String>,
    pub(crate) target_group_name: std::option::Option<std::string::String>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    pub(crate) marker: std::option::Option<std::string::String>,
    pub(crate) max_records: std::option::Option<i32>,
}
impl DescribeDbProxyTargetGroupsInputBuilder {
    /// <p>The identifier of the <code>DBProxy</code> associated with the target group.</p>
    pub fn db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_proxy_name = Some(input.into());
        self
    }
    /// <p>The identifier of the <code>DBProxy</code> associated with the target group.</p>
    pub fn set_db_proxy_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.db_proxy_name = input;
        self
    }
    /// <p>The identifier of the <code>DBProxyTargetGroup</code> to describe.</p>
    pub fn target_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_group_name = Some(input.into());
        self
    }
    /// <p>The identifier of the <code>DBProxyTargetGroup</code> to describe.</p>
    pub fn set_target_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_group_name = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>This parameter is not currently supported.</p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>This parameter is not currently supported.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = Some(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDbProxyTargetGroupsInput`](crate::operation::describe_db_proxy_target_groups::DescribeDbProxyTargetGroupsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_db_proxy_target_groups::DescribeDbProxyTargetGroupsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_db_proxy_target_groups::DescribeDbProxyTargetGroupsInput {
                db_proxy_name: self.db_proxy_name,
                target_group_name: self.target_group_name,
                filters: self.filters,
                marker: self.marker,
                max_records: self.max_records,
            },
        )
    }
}
