// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateCustomDbEngineVersionInput {
    /// <p>The database engine to use for your custom engine version (CEV). The only supported value is <code>custom-oracle-ee</code>.</p>
    #[doc(hidden)]
    pub engine: std::option::Option<std::string::String>,
    /// <p>The name of your CEV. The name format is 19.<i>customized_string</i>. For example, a valid CEV name is <code>19.my_cev1</code>. This setting is required for RDS Custom for Oracle, but optional for Amazon RDS. The combination of <code>Engine</code> and <code>EngineVersion</code> is unique per customer per Region.</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The name of an Amazon S3 bucket that contains database installation files for your CEV. For example, a valid bucket name is <code>my-custom-installation-files</code>.</p>
    #[doc(hidden)]
    pub database_installation_files_s3_bucket_name: std::option::Option<std::string::String>,
    /// <p>The Amazon S3 directory that contains the database installation files for your CEV. For example, a valid bucket name is <code>123456789012/cev1</code>. If this setting isn't specified, no prefix is assumed.</p>
    #[doc(hidden)]
    pub database_installation_files_s3_prefix: std::option::Option<std::string::String>,
    /// <p>The ID of the AMI. An AMI ID is required to create a CEV for RDS Custom for SQL Server.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Web Services KMS key identifier for an encrypted CEV. A symmetric encryption KMS key is required for RDS Custom, but optional for Amazon RDS.</p>
    /// <p>If you have an existing symmetric encryption KMS key in your account, you can use it with RDS Custom. No further action is necessary. If you don't already have a symmetric encryption KMS key in your account, follow the instructions in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html#create-symmetric-cmk"> Creating a symmetric encryption KMS key</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>.</p>
    /// <p>You can choose the same symmetric encryption key when you create a CEV and a DB instance, or choose different keys.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>An optional description of your CEV.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The CEV manifest, which is a JSON document that describes the installation .zip files stored in Amazon S3. Specify the name/value pairs in a file or a quoted string. RDS Custom applies the patches in the order in which they are listed.</p>
    /// <p>The following JSON fields are valid:</p>
    /// <dl>
    /// <dt>
    /// MediaImportTemplateVersion
    /// </dt>
    /// <dd>
    /// <p>Version of the CEV manifest. The date is in the format <code>YYYY-MM-DD</code>.</p>
    /// </dd>
    /// <dt>
    /// databaseInstallationFileNames
    /// </dt>
    /// <dd>
    /// <p>Ordered list of installation files for the CEV.</p>
    /// </dd>
    /// <dt>
    /// opatchFileNames
    /// </dt>
    /// <dd>
    /// <p>Ordered list of OPatch installers used for the Oracle DB engine.</p>
    /// </dd>
    /// <dt>
    /// psuRuPatchFileNames
    /// </dt>
    /// <dd>
    /// <p>The PSU and RU patches for this CEV.</p>
    /// </dd>
    /// <dt>
    /// OtherPatchFileNames
    /// </dt>
    /// <dd>
    /// <p>The patches that are not in the list of PSU and RU patches. Amazon RDS applies these patches after applying the PSU and RU patches.</p>
    /// </dd>
    /// </dl>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html#custom-cev.preparing.manifest"> Creating the CEV manifest</a> in the <i>Amazon RDS User Guide</i>.</p>
    #[doc(hidden)]
    pub manifest: std::option::Option<std::string::String>,
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateCustomDbEngineVersionInput {
    /// <p>The database engine to use for your custom engine version (CEV). The only supported value is <code>custom-oracle-ee</code>.</p>
    pub fn engine(&self) -> std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The name of your CEV. The name format is 19.<i>customized_string</i>. For example, a valid CEV name is <code>19.my_cev1</code>. This setting is required for RDS Custom for Oracle, but optional for Amazon RDS. The combination of <code>Engine</code> and <code>EngineVersion</code> is unique per customer per Region.</p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The name of an Amazon S3 bucket that contains database installation files for your CEV. For example, a valid bucket name is <code>my-custom-installation-files</code>.</p>
    pub fn database_installation_files_s3_bucket_name(&self) -> std::option::Option<&str> {
        self.database_installation_files_s3_bucket_name.as_deref()
    }
    /// <p>The Amazon S3 directory that contains the database installation files for your CEV. For example, a valid bucket name is <code>123456789012/cev1</code>. If this setting isn't specified, no prefix is assumed.</p>
    pub fn database_installation_files_s3_prefix(&self) -> std::option::Option<&str> {
        self.database_installation_files_s3_prefix.as_deref()
    }
    /// <p>The ID of the AMI. An AMI ID is required to create a CEV for RDS Custom for SQL Server.</p>
    pub fn image_id(&self) -> std::option::Option<&str> {
        self.image_id.as_deref()
    }
    /// <p>The Amazon Web Services KMS key identifier for an encrypted CEV. A symmetric encryption KMS key is required for RDS Custom, but optional for Amazon RDS.</p>
    /// <p>If you have an existing symmetric encryption KMS key in your account, you can use it with RDS Custom. No further action is necessary. If you don't already have a symmetric encryption KMS key in your account, follow the instructions in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html#create-symmetric-cmk"> Creating a symmetric encryption KMS key</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>.</p>
    /// <p>You can choose the same symmetric encryption key when you create a CEV and a DB instance, or choose different keys.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>An optional description of your CEV.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The CEV manifest, which is a JSON document that describes the installation .zip files stored in Amazon S3. Specify the name/value pairs in a file or a quoted string. RDS Custom applies the patches in the order in which they are listed.</p>
    /// <p>The following JSON fields are valid:</p>
    /// <dl>
    /// <dt>
    /// MediaImportTemplateVersion
    /// </dt>
    /// <dd>
    /// <p>Version of the CEV manifest. The date is in the format <code>YYYY-MM-DD</code>.</p>
    /// </dd>
    /// <dt>
    /// databaseInstallationFileNames
    /// </dt>
    /// <dd>
    /// <p>Ordered list of installation files for the CEV.</p>
    /// </dd>
    /// <dt>
    /// opatchFileNames
    /// </dt>
    /// <dd>
    /// <p>Ordered list of OPatch installers used for the Oracle DB engine.</p>
    /// </dd>
    /// <dt>
    /// psuRuPatchFileNames
    /// </dt>
    /// <dd>
    /// <p>The PSU and RU patches for this CEV.</p>
    /// </dd>
    /// <dt>
    /// OtherPatchFileNames
    /// </dt>
    /// <dd>
    /// <p>The patches that are not in the list of PSU and RU patches. Amazon RDS applies these patches after applying the PSU and RU patches.</p>
    /// </dd>
    /// </dl>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html#custom-cev.preparing.manifest"> Creating the CEV manifest</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn manifest(&self) -> std::option::Option<&str> {
        self.manifest.as_deref()
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateCustomDbEngineVersionInput {
    /// Creates a new builder-style object to manufacture [`CreateCustomDbEngineVersionInput`](crate::operation::create_custom_db_engine_version::CreateCustomDbEngineVersionInput).
    pub fn builder() -> crate::operation::create_custom_db_engine_version::builders::CreateCustomDbEngineVersionInputBuilder{
        crate::operation::create_custom_db_engine_version::builders::CreateCustomDbEngineVersionInputBuilder::default()
    }
}

/// A builder for [`CreateCustomDbEngineVersionInput`](crate::operation::create_custom_db_engine_version::CreateCustomDbEngineVersionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateCustomDbEngineVersionInputBuilder {
    pub(crate) engine: std::option::Option<std::string::String>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) database_installation_files_s3_bucket_name: std::option::Option<std::string::String>,
    pub(crate) database_installation_files_s3_prefix: std::option::Option<std::string::String>,
    pub(crate) image_id: std::option::Option<std::string::String>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) manifest: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateCustomDbEngineVersionInputBuilder {
    /// <p>The database engine to use for your custom engine version (CEV). The only supported value is <code>custom-oracle-ee</code>.</p>
    pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine = Some(input.into());
        self
    }
    /// <p>The database engine to use for your custom engine version (CEV). The only supported value is <code>custom-oracle-ee</code>.</p>
    pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The name of your CEV. The name format is 19.<i>customized_string</i>. For example, a valid CEV name is <code>19.my_cev1</code>. This setting is required for RDS Custom for Oracle, but optional for Amazon RDS. The combination of <code>Engine</code> and <code>EngineVersion</code> is unique per customer per Region.</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>The name of your CEV. The name format is 19.<i>customized_string</i>. For example, a valid CEV name is <code>19.my_cev1</code>. This setting is required for RDS Custom for Oracle, but optional for Amazon RDS. The combination of <code>Engine</code> and <code>EngineVersion</code> is unique per customer per Region.</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The name of an Amazon S3 bucket that contains database installation files for your CEV. For example, a valid bucket name is <code>my-custom-installation-files</code>.</p>
    pub fn database_installation_files_s3_bucket_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.database_installation_files_s3_bucket_name = Some(input.into());
        self
    }
    /// <p>The name of an Amazon S3 bucket that contains database installation files for your CEV. For example, a valid bucket name is <code>my-custom-installation-files</code>.</p>
    pub fn set_database_installation_files_s3_bucket_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.database_installation_files_s3_bucket_name = input;
        self
    }
    /// <p>The Amazon S3 directory that contains the database installation files for your CEV. For example, a valid bucket name is <code>123456789012/cev1</code>. If this setting isn't specified, no prefix is assumed.</p>
    pub fn database_installation_files_s3_prefix(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.database_installation_files_s3_prefix = Some(input.into());
        self
    }
    /// <p>The Amazon S3 directory that contains the database installation files for your CEV. For example, a valid bucket name is <code>123456789012/cev1</code>. If this setting isn't specified, no prefix is assumed.</p>
    pub fn set_database_installation_files_s3_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.database_installation_files_s3_prefix = input;
        self
    }
    /// <p>The ID of the AMI. An AMI ID is required to create a CEV for RDS Custom for SQL Server.</p>
    pub fn image_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_id = Some(input.into());
        self
    }
    /// <p>The ID of the AMI. An AMI ID is required to create a CEV for RDS Custom for SQL Server.</p>
    pub fn set_image_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_id = input;
        self
    }
    /// <p>The Amazon Web Services KMS key identifier for an encrypted CEV. A symmetric encryption KMS key is required for RDS Custom, but optional for Amazon RDS.</p>
    /// <p>If you have an existing symmetric encryption KMS key in your account, you can use it with RDS Custom. No further action is necessary. If you don't already have a symmetric encryption KMS key in your account, follow the instructions in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html#create-symmetric-cmk"> Creating a symmetric encryption KMS key</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>.</p>
    /// <p>You can choose the same symmetric encryption key when you create a CEV and a DB instance, or choose different keys.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier for an encrypted CEV. A symmetric encryption KMS key is required for RDS Custom, but optional for Amazon RDS.</p>
    /// <p>If you have an existing symmetric encryption KMS key in your account, you can use it with RDS Custom. No further action is necessary. If you don't already have a symmetric encryption KMS key in your account, follow the instructions in <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html#create-symmetric-cmk"> Creating a symmetric encryption KMS key</a> in the <i>Amazon Web Services Key Management Service Developer Guide</i>.</p>
    /// <p>You can choose the same symmetric encryption key when you create a CEV and a DB instance, or choose different keys.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>An optional description of your CEV.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>An optional description of your CEV.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The CEV manifest, which is a JSON document that describes the installation .zip files stored in Amazon S3. Specify the name/value pairs in a file or a quoted string. RDS Custom applies the patches in the order in which they are listed.</p>
    /// <p>The following JSON fields are valid:</p>
    /// <dl>
    /// <dt>
    /// MediaImportTemplateVersion
    /// </dt>
    /// <dd>
    /// <p>Version of the CEV manifest. The date is in the format <code>YYYY-MM-DD</code>.</p>
    /// </dd>
    /// <dt>
    /// databaseInstallationFileNames
    /// </dt>
    /// <dd>
    /// <p>Ordered list of installation files for the CEV.</p>
    /// </dd>
    /// <dt>
    /// opatchFileNames
    /// </dt>
    /// <dd>
    /// <p>Ordered list of OPatch installers used for the Oracle DB engine.</p>
    /// </dd>
    /// <dt>
    /// psuRuPatchFileNames
    /// </dt>
    /// <dd>
    /// <p>The PSU and RU patches for this CEV.</p>
    /// </dd>
    /// <dt>
    /// OtherPatchFileNames
    /// </dt>
    /// <dd>
    /// <p>The patches that are not in the list of PSU and RU patches. Amazon RDS applies these patches after applying the PSU and RU patches.</p>
    /// </dd>
    /// </dl>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html#custom-cev.preparing.manifest"> Creating the CEV manifest</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn manifest(mut self, input: impl Into<std::string::String>) -> Self {
        self.manifest = Some(input.into());
        self
    }
    /// <p>The CEV manifest, which is a JSON document that describes the installation .zip files stored in Amazon S3. Specify the name/value pairs in a file or a quoted string. RDS Custom applies the patches in the order in which they are listed.</p>
    /// <p>The following JSON fields are valid:</p>
    /// <dl>
    /// <dt>
    /// MediaImportTemplateVersion
    /// </dt>
    /// <dd>
    /// <p>Version of the CEV manifest. The date is in the format <code>YYYY-MM-DD</code>.</p>
    /// </dd>
    /// <dt>
    /// databaseInstallationFileNames
    /// </dt>
    /// <dd>
    /// <p>Ordered list of installation files for the CEV.</p>
    /// </dd>
    /// <dt>
    /// opatchFileNames
    /// </dt>
    /// <dd>
    /// <p>Ordered list of OPatch installers used for the Oracle DB engine.</p>
    /// </dd>
    /// <dt>
    /// psuRuPatchFileNames
    /// </dt>
    /// <dd>
    /// <p>The PSU and RU patches for this CEV.</p>
    /// </dd>
    /// <dt>
    /// OtherPatchFileNames
    /// </dt>
    /// <dd>
    /// <p>The patches that are not in the list of PSU and RU patches. Amazon RDS applies these patches after applying the PSU and RU patches.</p>
    /// </dd>
    /// </dl>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html#custom-cev.preparing.manifest"> Creating the CEV manifest</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn set_manifest(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.manifest = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateCustomDbEngineVersionInput`](crate::operation::create_custom_db_engine_version::CreateCustomDbEngineVersionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_custom_db_engine_version::CreateCustomDbEngineVersionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_custom_db_engine_version::CreateCustomDbEngineVersionInput {
                engine: self.engine,
                engine_version: self.engine_version,
                database_installation_files_s3_bucket_name: self
                    .database_installation_files_s3_bucket_name,
                database_installation_files_s3_prefix: self.database_installation_files_s3_prefix,
                image_id: self.image_id,
                kms_key_id: self.kms_key_id,
                description: self.description,
                manifest: self.manifest,
                tags: self.tags,
            },
        )
    }
}
