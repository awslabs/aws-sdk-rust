// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeOptionGroupOptionsInput {
    /// <p>A required parameter. Options available for the given engine name are described.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>mariadb</code> </p> </li>
    /// <li> <p> <code>mysql</code> </p> </li>
    /// <li> <p> <code>oracle-ee</code> </p> </li>
    /// <li> <p> <code>oracle-ee-cdb</code> </p> </li>
    /// <li> <p> <code>oracle-se2</code> </p> </li>
    /// <li> <p> <code>oracle-se2-cdb</code> </p> </li>
    /// <li> <p> <code>postgres</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee</code> </p> </li>
    /// <li> <p> <code>sqlserver-se</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex</code> </p> </li>
    /// <li> <p> <code>sqlserver-web</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub engine_name: std::option::Option<std::string::String>,
    /// <p>If specified, filters the results to include only options for the specified major engine version.</p>
    #[doc(hidden)]
    pub major_engine_version: std::option::Option<std::string::String>,
    /// <p>This parameter isn't currently supported.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    #[doc(hidden)]
    pub max_records: std::option::Option<i32>,
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
}
impl DescribeOptionGroupOptionsInput {
    /// <p>A required parameter. Options available for the given engine name are described.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>mariadb</code> </p> </li>
    /// <li> <p> <code>mysql</code> </p> </li>
    /// <li> <p> <code>oracle-ee</code> </p> </li>
    /// <li> <p> <code>oracle-ee-cdb</code> </p> </li>
    /// <li> <p> <code>oracle-se2</code> </p> </li>
    /// <li> <p> <code>oracle-se2-cdb</code> </p> </li>
    /// <li> <p> <code>postgres</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee</code> </p> </li>
    /// <li> <p> <code>sqlserver-se</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex</code> </p> </li>
    /// <li> <p> <code>sqlserver-web</code> </p> </li>
    /// </ul>
    pub fn engine_name(&self) -> std::option::Option<&str> {
        self.engine_name.as_deref()
    }
    /// <p>If specified, filters the results to include only options for the specified major engine version.</p>
    pub fn major_engine_version(&self) -> std::option::Option<&str> {
        self.major_engine_version.as_deref()
    }
    /// <p>This parameter isn't currently supported.</p>
    pub fn filters(&self) -> std::option::Option<&[crate::types::Filter]> {
        self.filters.as_deref()
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(&self) -> std::option::Option<i32> {
        self.max_records
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl DescribeOptionGroupOptionsInput {
    /// Creates a new builder-style object to manufacture [`DescribeOptionGroupOptionsInput`](crate::operation::describe_option_group_options::DescribeOptionGroupOptionsInput).
    pub fn builder() -> crate::operation::describe_option_group_options::builders::DescribeOptionGroupOptionsInputBuilder{
        crate::operation::describe_option_group_options::builders::DescribeOptionGroupOptionsInputBuilder::default()
    }
}

/// A builder for [`DescribeOptionGroupOptionsInput`](crate::operation::describe_option_group_options::DescribeOptionGroupOptionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeOptionGroupOptionsInputBuilder {
    pub(crate) engine_name: std::option::Option<std::string::String>,
    pub(crate) major_engine_version: std::option::Option<std::string::String>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    pub(crate) max_records: std::option::Option<i32>,
    pub(crate) marker: std::option::Option<std::string::String>,
}
impl DescribeOptionGroupOptionsInputBuilder {
    /// <p>A required parameter. Options available for the given engine name are described.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>mariadb</code> </p> </li>
    /// <li> <p> <code>mysql</code> </p> </li>
    /// <li> <p> <code>oracle-ee</code> </p> </li>
    /// <li> <p> <code>oracle-ee-cdb</code> </p> </li>
    /// <li> <p> <code>oracle-se2</code> </p> </li>
    /// <li> <p> <code>oracle-se2-cdb</code> </p> </li>
    /// <li> <p> <code>postgres</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee</code> </p> </li>
    /// <li> <p> <code>sqlserver-se</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex</code> </p> </li>
    /// <li> <p> <code>sqlserver-web</code> </p> </li>
    /// </ul>
    pub fn engine_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_name = Some(input.into());
        self
    }
    /// <p>A required parameter. Options available for the given engine name are described.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>mariadb</code> </p> </li>
    /// <li> <p> <code>mysql</code> </p> </li>
    /// <li> <p> <code>oracle-ee</code> </p> </li>
    /// <li> <p> <code>oracle-ee-cdb</code> </p> </li>
    /// <li> <p> <code>oracle-se2</code> </p> </li>
    /// <li> <p> <code>oracle-se2-cdb</code> </p> </li>
    /// <li> <p> <code>postgres</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee</code> </p> </li>
    /// <li> <p> <code>sqlserver-se</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex</code> </p> </li>
    /// <li> <p> <code>sqlserver-web</code> </p> </li>
    /// </ul>
    pub fn set_engine_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_name = input;
        self
    }
    /// <p>If specified, filters the results to include only options for the specified major engine version.</p>
    pub fn major_engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.major_engine_version = Some(input.into());
        self
    }
    /// <p>If specified, filters the results to include only options for the specified major engine version.</p>
    pub fn set_major_engine_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.major_engine_version = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>This parameter isn't currently supported.</p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>This parameter isn't currently supported.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = Some(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeOptionGroupOptionsInput`](crate::operation::describe_option_group_options::DescribeOptionGroupOptionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_option_group_options::DescribeOptionGroupOptionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_option_group_options::DescribeOptionGroupOptionsInput {
                engine_name: self.engine_name,
                major_engine_version: self.major_engine_version,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            },
        )
    }
}
