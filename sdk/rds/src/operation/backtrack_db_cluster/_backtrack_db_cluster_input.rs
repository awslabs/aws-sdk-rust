// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BacktrackDbClusterInput {
    /// <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code> </p>
    pub db_cluster_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note>
    /// <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li>
    /// <li> <p>Can't contain a timestamp set in the future.</p> </li>
    /// </ul>
    /// <p>Example: <code>2017-07-08T18:00Z</code> </p>
    pub backtrack_to: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Specifies whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.</p>
    pub force: ::std::option::Option<bool>,
    /// <p>Specifies whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.</p>
    pub use_earliest_time_on_point_in_time_unavailable: ::std::option::Option<bool>,
}
impl BacktrackDbClusterInput {
    /// <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code> </p>
    pub fn db_cluster_identifier(&self) -> ::std::option::Option<&str> {
        self.db_cluster_identifier.as_deref()
    }
    /// <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note>
    /// <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li>
    /// <li> <p>Can't contain a timestamp set in the future.</p> </li>
    /// </ul>
    /// <p>Example: <code>2017-07-08T18:00Z</code> </p>
    pub fn backtrack_to(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.backtrack_to.as_ref()
    }
    /// <p>Specifies whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.</p>
    pub fn force(&self) -> ::std::option::Option<bool> {
        self.force
    }
    /// <p>Specifies whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.</p>
    pub fn use_earliest_time_on_point_in_time_unavailable(&self) -> ::std::option::Option<bool> {
        self.use_earliest_time_on_point_in_time_unavailable
    }
}
impl BacktrackDbClusterInput {
    /// Creates a new builder-style object to manufacture [`BacktrackDbClusterInput`](crate::operation::backtrack_db_cluster::BacktrackDbClusterInput).
    pub fn builder() -> crate::operation::backtrack_db_cluster::builders::BacktrackDbClusterInputBuilder {
        crate::operation::backtrack_db_cluster::builders::BacktrackDbClusterInputBuilder::default()
    }
}

/// A builder for [`BacktrackDbClusterInput`](crate::operation::backtrack_db_cluster::BacktrackDbClusterInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BacktrackDbClusterInputBuilder {
    pub(crate) db_cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) backtrack_to: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) force: ::std::option::Option<bool>,
    pub(crate) use_earliest_time_on_point_in_time_unavailable: ::std::option::Option<bool>,
}
impl BacktrackDbClusterInputBuilder {
    /// <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code> </p>
    /// This field is required.
    pub fn db_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code> </p>
    pub fn set_db_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_identifier = input;
        self
    }
    /// <p>The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code> </p>
    pub fn get_db_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_identifier
    }
    /// <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note>
    /// <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li>
    /// <li> <p>Can't contain a timestamp set in the future.</p> </li>
    /// </ul>
    /// <p>Example: <code>2017-07-08T18:00Z</code> </p>
    /// This field is required.
    pub fn backtrack_to(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.backtrack_to = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note>
    /// <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li>
    /// <li> <p>Can't contain a timestamp set in the future.</p> </li>
    /// </ul>
    /// <p>Example: <code>2017-07-08T18:00Z</code> </p>
    pub fn set_backtrack_to(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.backtrack_to = input;
        self
    }
    /// <p>The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO8601 Wikipedia page.</a> </p> <note>
    /// <p>If the specified time isn't a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.</p>
    /// </note>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain a valid ISO 8601 timestamp.</p> </li>
    /// <li> <p>Can't contain a timestamp set in the future.</p> </li>
    /// </ul>
    /// <p>Example: <code>2017-07-08T18:00Z</code> </p>
    pub fn get_backtrack_to(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.backtrack_to
    }
    /// <p>Specifies whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.</p>
    pub fn force(mut self, input: bool) -> Self {
        self.force = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.</p>
    pub fn set_force(mut self, input: ::std::option::Option<bool>) -> Self {
        self.force = input;
        self
    }
    /// <p>Specifies whether to force the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.</p>
    pub fn get_force(&self) -> &::std::option::Option<bool> {
        &self.force
    }
    /// <p>Specifies whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.</p>
    pub fn use_earliest_time_on_point_in_time_unavailable(mut self, input: bool) -> Self {
        self.use_earliest_time_on_point_in_time_unavailable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.</p>
    pub fn set_use_earliest_time_on_point_in_time_unavailable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_earliest_time_on_point_in_time_unavailable = input;
        self
    }
    /// <p>Specifies whether to backtrack the DB cluster to the earliest possible backtrack time when <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time. When this parameter is disabled and <i>BacktrackTo</i> is set to a timestamp earlier than the earliest backtrack time, an error occurs.</p>
    pub fn get_use_earliest_time_on_point_in_time_unavailable(&self) -> &::std::option::Option<bool> {
        &self.use_earliest_time_on_point_in_time_unavailable
    }
    /// Consumes the builder and constructs a [`BacktrackDbClusterInput`](crate::operation::backtrack_db_cluster::BacktrackDbClusterInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::backtrack_db_cluster::BacktrackDbClusterInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::backtrack_db_cluster::BacktrackDbClusterInput {
            db_cluster_identifier: self.db_cluster_identifier,
            backtrack_to: self.backtrack_to,
            force: self.force,
            use_earliest_time_on_point_in_time_unavailable: self.use_earliest_time_on_point_in_time_unavailable,
        })
    }
}
