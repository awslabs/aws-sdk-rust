// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyDbProxyInput {
    /// <p>The identifier for the <code>DBProxy</code> to modify.</p>
    #[doc(hidden)]
    pub db_proxy_name: std::option::Option<std::string::String>,
    /// <p>The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
    #[doc(hidden)]
    pub new_db_proxy_name: std::option::Option<std::string::String>,
    /// <p>The new authentication settings for the <code>DBProxy</code>.</p>
    #[doc(hidden)]
    pub auth: std::option::Option<std::vec::Vec<crate::types::UserAuthConfig>>,
    /// <p>Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.</p>
    #[doc(hidden)]
    pub require_tls: std::option::Option<bool>,
    /// <p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.</p>
    #[doc(hidden)]
    pub idle_client_timeout: std::option::Option<i32>,
    /// <p>Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.</p>
    #[doc(hidden)]
    pub debug_logging: std::option::Option<bool>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The new list of security groups for the <code>DBProxy</code>.</p>
    #[doc(hidden)]
    pub security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ModifyDbProxyInput {
    /// <p>The identifier for the <code>DBProxy</code> to modify.</p>
    pub fn db_proxy_name(&self) -> std::option::Option<&str> {
        self.db_proxy_name.as_deref()
    }
    /// <p>The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
    pub fn new_db_proxy_name(&self) -> std::option::Option<&str> {
        self.new_db_proxy_name.as_deref()
    }
    /// <p>The new authentication settings for the <code>DBProxy</code>.</p>
    pub fn auth(&self) -> std::option::Option<&[crate::types::UserAuthConfig]> {
        self.auth.as_deref()
    }
    /// <p>Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.</p>
    pub fn require_tls(&self) -> std::option::Option<bool> {
        self.require_tls
    }
    /// <p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.</p>
    pub fn idle_client_timeout(&self) -> std::option::Option<i32> {
        self.idle_client_timeout
    }
    /// <p>Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.</p>
    pub fn debug_logging(&self) -> std::option::Option<bool> {
        self.debug_logging
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The new list of security groups for the <code>DBProxy</code>.</p>
    pub fn security_groups(&self) -> std::option::Option<&[std::string::String]> {
        self.security_groups.as_deref()
    }
}
impl ModifyDbProxyInput {
    /// Creates a new builder-style object to manufacture [`ModifyDbProxyInput`](crate::operation::modify_db_proxy::ModifyDbProxyInput).
    pub fn builder() -> crate::operation::modify_db_proxy::builders::ModifyDbProxyInputBuilder {
        crate::operation::modify_db_proxy::builders::ModifyDbProxyInputBuilder::default()
    }
}

/// A builder for [`ModifyDbProxyInput`](crate::operation::modify_db_proxy::ModifyDbProxyInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ModifyDbProxyInputBuilder {
    pub(crate) db_proxy_name: std::option::Option<std::string::String>,
    pub(crate) new_db_proxy_name: std::option::Option<std::string::String>,
    pub(crate) auth: std::option::Option<std::vec::Vec<crate::types::UserAuthConfig>>,
    pub(crate) require_tls: std::option::Option<bool>,
    pub(crate) idle_client_timeout: std::option::Option<i32>,
    pub(crate) debug_logging: std::option::Option<bool>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) security_groups: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ModifyDbProxyInputBuilder {
    /// <p>The identifier for the <code>DBProxy</code> to modify.</p>
    pub fn db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_proxy_name = Some(input.into());
        self
    }
    /// <p>The identifier for the <code>DBProxy</code> to modify.</p>
    pub fn set_db_proxy_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.db_proxy_name = input;
        self
    }
    /// <p>The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
    pub fn new_db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.new_db_proxy_name = Some(input.into());
        self
    }
    /// <p>The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
    pub fn set_new_db_proxy_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.new_db_proxy_name = input;
        self
    }
    /// Appends an item to `auth`.
    ///
    /// To override the contents of this collection use [`set_auth`](Self::set_auth).
    ///
    /// <p>The new authentication settings for the <code>DBProxy</code>.</p>
    pub fn auth(mut self, input: crate::types::UserAuthConfig) -> Self {
        let mut v = self.auth.unwrap_or_default();
        v.push(input);
        self.auth = Some(v);
        self
    }
    /// <p>The new authentication settings for the <code>DBProxy</code>.</p>
    pub fn set_auth(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UserAuthConfig>>,
    ) -> Self {
        self.auth = input;
        self
    }
    /// <p>Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.</p>
    pub fn require_tls(mut self, input: bool) -> Self {
        self.require_tls = Some(input);
        self
    }
    /// <p>Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.</p>
    pub fn set_require_tls(mut self, input: std::option::Option<bool>) -> Self {
        self.require_tls = input;
        self
    }
    /// <p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.</p>
    pub fn idle_client_timeout(mut self, input: i32) -> Self {
        self.idle_client_timeout = Some(input);
        self
    }
    /// <p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.</p>
    pub fn set_idle_client_timeout(mut self, input: std::option::Option<i32>) -> Self {
        self.idle_client_timeout = input;
        self
    }
    /// <p>Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.</p>
    pub fn debug_logging(mut self, input: bool) -> Self {
        self.debug_logging = Some(input);
        self
    }
    /// <p>Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.</p>
    pub fn set_debug_logging(mut self, input: std::option::Option<bool>) -> Self {
        self.debug_logging = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// Appends an item to `security_groups`.
    ///
    /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
    ///
    /// <p>The new list of security groups for the <code>DBProxy</code>.</p>
    pub fn security_groups(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.security_groups.unwrap_or_default();
        v.push(input.into());
        self.security_groups = Some(v);
        self
    }
    /// <p>The new list of security groups for the <code>DBProxy</code>.</p>
    pub fn set_security_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.security_groups = input;
        self
    }
    /// Consumes the builder and constructs a [`ModifyDbProxyInput`](crate::operation::modify_db_proxy::ModifyDbProxyInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::modify_db_proxy::ModifyDbProxyInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::modify_db_proxy::ModifyDbProxyInput {
            db_proxy_name: self.db_proxy_name,
            new_db_proxy_name: self.new_db_proxy_name,
            auth: self.auth,
            require_tls: self.require_tls,
            idle_client_timeout: self.idle_client_timeout,
            debug_logging: self.debug_logging,
            role_arn: self.role_arn,
            security_groups: self.security_groups,
        })
    }
}
