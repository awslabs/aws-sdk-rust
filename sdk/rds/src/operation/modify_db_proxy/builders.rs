// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_db_proxy::_modify_db_proxy_output::ModifyDbProxyOutputBuilder;

pub use crate::operation::modify_db_proxy::_modify_db_proxy_input::ModifyDbProxyInputBuilder;

/// Fluent builder constructing a request to `ModifyDBProxy`.
///
/// <p>Changes the settings for an existing DB proxy.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ModifyDBProxyFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_db_proxy::builders::ModifyDbProxyInputBuilder,
}
impl ModifyDBProxyFluentBuilder {
    /// Creates a new `ModifyDBProxy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::modify_db_proxy::ModifyDBProxy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::modify_db_proxy::ModifyDBProxyError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::modify_db_proxy::ModifyDbProxyOutput,
        aws_smithy_http::result::SdkError<crate::operation::modify_db_proxy::ModifyDBProxyError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The identifier for the <code>DBProxy</code> to modify.</p>
    pub fn db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.db_proxy_name(input.into());
        self
    }
    /// <p>The identifier for the <code>DBProxy</code> to modify.</p>
    pub fn set_db_proxy_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_db_proxy_name(input);
        self
    }
    /// <p>The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
    pub fn new_db_proxy_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.new_db_proxy_name(input.into());
        self
    }
    /// <p>The new identifier for the <code>DBProxy</code>. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens.</p>
    pub fn set_new_db_proxy_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_new_db_proxy_name(input);
        self
    }
    /// Appends an item to `Auth`.
    ///
    /// To override the contents of this collection use [`set_auth`](Self::set_auth).
    ///
    /// <p>The new authentication settings for the <code>DBProxy</code>.</p>
    pub fn auth(mut self, input: crate::types::UserAuthConfig) -> Self {
        self.inner = self.inner.auth(input);
        self
    }
    /// <p>The new authentication settings for the <code>DBProxy</code>.</p>
    pub fn set_auth(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UserAuthConfig>>,
    ) -> Self {
        self.inner = self.inner.set_auth(input);
        self
    }
    /// <p>Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.</p>
    pub fn require_tls(mut self, input: bool) -> Self {
        self.inner = self.inner.require_tls(input);
        self
    }
    /// <p>Whether Transport Layer Security (TLS) encryption is required for connections to the proxy. By enabling this setting, you can enforce encrypted TLS connections to the proxy, even if the associated database doesn't use TLS.</p>
    pub fn set_require_tls(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_require_tls(input);
        self
    }
    /// <p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.</p>
    pub fn idle_client_timeout(mut self, input: i32) -> Self {
        self.inner = self.inner.idle_client_timeout(input);
        self
    }
    /// <p>The number of seconds that a connection to the proxy can be inactive before the proxy disconnects it. You can set this value higher or lower than the connection timeout limit for the associated database.</p>
    pub fn set_idle_client_timeout(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_idle_client_timeout(input);
        self
    }
    /// <p>Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.</p>
    pub fn debug_logging(mut self, input: bool) -> Self {
        self.inner = self.inner.debug_logging(input);
        self
    }
    /// <p>Whether the proxy includes detailed information about SQL statements in its logs. This information helps you to debug issues involving SQL behavior or the performance and scalability of the proxy connections. The debug information includes the text of SQL statements that you submit through the proxy. Thus, only enable this setting when needed for debugging, and only when you have security measures in place to safeguard any sensitive information that appears in the logs.</p>
    pub fn set_debug_logging(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_debug_logging(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that the proxy uses to access secrets in Amazon Web Services Secrets Manager.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// Appends an item to `SecurityGroups`.
    ///
    /// To override the contents of this collection use [`set_security_groups`](Self::set_security_groups).
    ///
    /// <p>The new list of security groups for the <code>DBProxy</code>.</p>
    pub fn security_groups(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.security_groups(input.into());
        self
    }
    /// <p>The new list of security groups for the <code>DBProxy</code>.</p>
    pub fn set_security_groups(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_security_groups(input);
        self
    }
}
