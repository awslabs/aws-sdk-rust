// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_custom_db_engine_version::_delete_custom_db_engine_version_output::DeleteCustomDbEngineVersionOutputBuilder;

pub use crate::operation::delete_custom_db_engine_version::_delete_custom_db_engine_version_input::DeleteCustomDbEngineVersionInputBuilder;

impl crate::operation::delete_custom_db_engine_version::builders::DeleteCustomDbEngineVersionInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_custom_db_engine_version::DeleteCustomDbEngineVersionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_custom_db_engine_version::DeleteCustomDBEngineVersionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_custom_db_engine_version();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteCustomDBEngineVersion`.
///
/// <p>Deletes a custom engine version. To run this command, make sure you meet the following prerequisites:</p>
/// <ul>
/// <li>
/// <p>The CEV must not be the default for RDS Custom. If it is, change the default before running this command.</p></li>
/// <li>
/// <p>The CEV must not be associated with an RDS Custom DB instance, RDS Custom instance snapshot, or automated backup of your RDS Custom instance.</p></li>
/// </ul>
/// <p>Typically, deletion takes a few minutes.</p><note>
/// <p>The MediaImport service that imports files from Amazon S3 to create CEVs isn't integrated with Amazon Web Services CloudTrail. If you turn on data logging for Amazon RDS in CloudTrail, calls to the <code>DeleteCustomDbEngineVersion</code> event aren't logged. However, you might see calls from the API gateway that accesses your Amazon S3 bucket. These calls originate from the MediaImport service for the <code>DeleteCustomDbEngineVersion</code> event.</p>
/// </note>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-cev.html#custom-cev.delete">Deleting a CEV</a> in the <i>Amazon RDS User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteCustomDBEngineVersionFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_custom_db_engine_version::builders::DeleteCustomDbEngineVersionInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_custom_db_engine_version::DeleteCustomDbEngineVersionOutput,
        crate::operation::delete_custom_db_engine_version::DeleteCustomDBEngineVersionError,
    > for DeleteCustomDBEngineVersionFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_custom_db_engine_version::DeleteCustomDbEngineVersionOutput,
            crate::operation::delete_custom_db_engine_version::DeleteCustomDBEngineVersionError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteCustomDBEngineVersionFluentBuilder {
    /// Creates a new `DeleteCustomDBEngineVersion`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteCustomDBEngineVersion as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_custom_db_engine_version::builders::DeleteCustomDbEngineVersionInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_custom_db_engine_version::DeleteCustomDbEngineVersionOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_custom_db_engine_version::DeleteCustomDBEngineVersionError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_custom_db_engine_version::DeleteCustomDBEngineVersion::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_custom_db_engine_version::DeleteCustomDBEngineVersion::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_custom_db_engine_version::DeleteCustomDbEngineVersionOutput,
        crate::operation::delete_custom_db_engine_version::DeleteCustomDBEngineVersionError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The database engine. RDS Custom for Oracle supports the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>custom-oracle-ee</code></p></li>
    /// <li>
    /// <p><code>custom-oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>custom-oracle-se2</code></p></li>
    /// <li>
    /// <p><code>custom-oracle-se2-cdb</code></p></li>
    /// </ul>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.engine(input.into());
        self
    }
    /// <p>The database engine. RDS Custom for Oracle supports the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>custom-oracle-ee</code></p></li>
    /// <li>
    /// <p><code>custom-oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>custom-oracle-se2</code></p></li>
    /// <li>
    /// <p><code>custom-oracle-se2-cdb</code></p></li>
    /// </ul>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_engine(input);
        self
    }
    /// <p>The database engine. RDS Custom for Oracle supports the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>custom-oracle-ee</code></p></li>
    /// <li>
    /// <p><code>custom-oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>custom-oracle-se2</code></p></li>
    /// <li>
    /// <p><code>custom-oracle-se2-cdb</code></p></li>
    /// </ul>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_engine()
    }
    /// <p>The custom engine version (CEV) for your DB instance. This option is required for RDS Custom, but optional for Amazon RDS. The combination of <code>Engine</code> and <code>EngineVersion</code> is unique per customer per Amazon Web Services Region.</p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.engine_version(input.into());
        self
    }
    /// <p>The custom engine version (CEV) for your DB instance. This option is required for RDS Custom, but optional for Amazon RDS. The combination of <code>Engine</code> and <code>EngineVersion</code> is unique per customer per Amazon Web Services Region.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_engine_version(input);
        self
    }
    /// <p>The custom engine version (CEV) for your DB instance. This option is required for RDS Custom, but optional for Amazon RDS. The combination of <code>Engine</code> and <code>EngineVersion</code> is unique per customer per Amazon Web Services Region.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_engine_version()
    }
}
