// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDbLogFilesInput {
    /// <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the identifier of an existing DBInstance.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub db_instance_identifier: std::option::Option<std::string::String>,
    /// <p>Filters the available log files for log file names that contain the specified string.</p>
    #[doc(hidden)]
    pub filename_contains: std::option::Option<std::string::String>,
    /// <p>Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.</p>
    #[doc(hidden)]
    pub file_last_written: i64,
    /// <p>Filters the available log files for files larger than the specified size.</p>
    #[doc(hidden)]
    pub file_size: i64,
    /// <p>This parameter isn't currently supported.</p>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    #[doc(hidden)]
    pub max_records: std::option::Option<i32>,
    /// <p>The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
}
impl DescribeDbLogFilesInput {
    /// <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the identifier of an existing DBInstance.</p> </li>
    /// </ul>
    pub fn db_instance_identifier(&self) -> std::option::Option<&str> {
        self.db_instance_identifier.as_deref()
    }
    /// <p>Filters the available log files for log file names that contain the specified string.</p>
    pub fn filename_contains(&self) -> std::option::Option<&str> {
        self.filename_contains.as_deref()
    }
    /// <p>Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.</p>
    pub fn file_last_written(&self) -> i64 {
        self.file_last_written
    }
    /// <p>Filters the available log files for files larger than the specified size.</p>
    pub fn file_size(&self) -> i64 {
        self.file_size
    }
    /// <p>This parameter isn't currently supported.</p>
    pub fn filters(&self) -> std::option::Option<&[crate::types::Filter]> {
        self.filters.as_deref()
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    pub fn max_records(&self) -> std::option::Option<i32> {
        self.max_records
    }
    /// <p>The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl DescribeDbLogFilesInput {
    /// Creates a new builder-style object to manufacture [`DescribeDbLogFilesInput`](crate::operation::describe_db_log_files::DescribeDbLogFilesInput).
    pub fn builder(
    ) -> crate::operation::describe_db_log_files::builders::DescribeDbLogFilesInputBuilder {
        crate::operation::describe_db_log_files::builders::DescribeDbLogFilesInputBuilder::default()
    }
}

/// A builder for [`DescribeDbLogFilesInput`](crate::operation::describe_db_log_files::DescribeDbLogFilesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDbLogFilesInputBuilder {
    pub(crate) db_instance_identifier: std::option::Option<std::string::String>,
    pub(crate) filename_contains: std::option::Option<std::string::String>,
    pub(crate) file_last_written: std::option::Option<i64>,
    pub(crate) file_size: std::option::Option<i64>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    pub(crate) max_records: std::option::Option<i32>,
    pub(crate) marker: std::option::Option<std::string::String>,
}
impl DescribeDbLogFilesInputBuilder {
    /// <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the identifier of an existing DBInstance.</p> </li>
    /// </ul>
    pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_instance_identifier = Some(input.into());
        self
    }
    /// <p>The customer-assigned name of the DB instance that contains the log files you want to list.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the identifier of an existing DBInstance.</p> </li>
    /// </ul>
    pub fn set_db_instance_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_instance_identifier = input;
        self
    }
    /// <p>Filters the available log files for log file names that contain the specified string.</p>
    pub fn filename_contains(mut self, input: impl Into<std::string::String>) -> Self {
        self.filename_contains = Some(input.into());
        self
    }
    /// <p>Filters the available log files for log file names that contain the specified string.</p>
    pub fn set_filename_contains(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.filename_contains = input;
        self
    }
    /// <p>Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.</p>
    pub fn file_last_written(mut self, input: i64) -> Self {
        self.file_last_written = Some(input);
        self
    }
    /// <p>Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.</p>
    pub fn set_file_last_written(mut self, input: std::option::Option<i64>) -> Self {
        self.file_last_written = input;
        self
    }
    /// <p>Filters the available log files for files larger than the specified size.</p>
    pub fn file_size(mut self, input: i64) -> Self {
        self.file_size = Some(input);
        self
    }
    /// <p>Filters the available log files for files larger than the specified size.</p>
    pub fn set_file_size(mut self, input: std::option::Option<i64>) -> Self {
        self.file_size = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>This parameter isn't currently supported.</p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>This parameter isn't currently supported.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = Some(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDbLogFilesInput`](crate::operation::describe_db_log_files::DescribeDbLogFilesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_db_log_files::DescribeDbLogFilesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_db_log_files::DescribeDbLogFilesInput {
                db_instance_identifier: self.db_instance_identifier,
                filename_contains: self.filename_contains,
                file_last_written: self.file_last_written.unwrap_or_default(),
                file_size: self.file_size.unwrap_or_default(),
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            },
        )
    }
}
