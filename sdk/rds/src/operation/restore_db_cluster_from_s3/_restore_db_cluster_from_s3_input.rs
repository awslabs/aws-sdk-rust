// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RestoreDbClusterFromS3Input {
    /// <p>A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.</p>
    pub availability_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be a value from 1 to 35</p> </li>
    /// </ul>
    pub backup_retention_period: ::std::option::Option<i32>,
    /// <p>A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.</p>
    pub character_set_name: ::std::option::Option<::std::string::String>,
    /// <p>The database name for the restored DB cluster.</p>
    pub database_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code> </p>
    pub db_cluster_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, the default parameter group for the engine version is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li>
    /// </ul>
    pub db_cluster_parameter_group_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of EC2 VPC security groups to associate with the restored DB cluster.</p>
    pub vpc_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A DB subnet group to associate with the restored DB cluster.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
    /// <p>Example: <code>mydbsubnetgroup</code> </p>
    pub db_subnet_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the database engine to be used for this DB cluster.</p>
    /// <p>Valid Values: <code>aurora-mysql</code> (for Aurora MySQL)</p>
    pub engine: ::std::option::Option<::std::string::String>,
    /// <p>The version number of the database engine to use.</p>
    /// <p>To list all of the available engine versions for <code>aurora-mysql</code> (Aurora MySQL), use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Examples: <code>5.7.mysql_aurora.2.12.0</code>, <code>8.0.mysql_aurora.3.04.0</code> </p>
    pub engine_version: ::std::option::Option<::std::string::String>,
    /// <p>The port number on which the instances in the restored DB cluster accept connections.</p>
    /// <p>Default: <code>3306</code> </p>
    pub port: ::std::option::Option<i32>,
    /// <p>The name of the master user for the restored DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 16 letters or numbers.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't be a reserved word for the chosen database engine.</p> </li>
    /// </ul>
    pub master_username: ::std::option::Option<::std::string::String>,
    /// <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 8 to 41 characters.</p> </li>
    /// <li> <p>Can't be specified if <code>ManageMasterUserPassword</code> is turned on.</p> </li>
    /// </ul>
    pub master_user_password: ::std::option::Option<::std::string::String>,
    /// <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p>
    /// <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
    pub option_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow"> Backup window</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li>
    /// <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li>
    /// <li> <p>Must not conflict with the preferred maintenance window.</p> </li>
    /// <li> <p>Must be at least 30 minutes.</p> </li>
    /// </ul>
    pub preferred_backup_window: ::std::option::Option<::std::string::String>,
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    pub preferred_maintenance_window: ::std::option::Option<::std::string::String>,
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>Specifies whether the restored DB cluster is encrypted.</p>
    pub storage_encrypted: ::std::option::Option<bool>,
    /// <p>The Amazon Web Services KMS key identifier for an encrypted DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub enable_iam_database_authentication: ::std::option::Option<bool>,
    /// <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket.</p>
    /// <p>Valid Values: <code>mysql</code> </p>
    pub source_engine: ::std::option::Option<::std::string::String>,
    /// <p>The version of the database that the backup files were created from.</p>
    /// <p>MySQL versions 5.7 and 8.0 are supported.</p>
    /// <p>Example: <code>5.7.40</code>, <code>8.0.28</code> </p>
    pub source_engine_version: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.</p>
    pub s3_bucket_name: ::std::option::Option<::std::string::String>,
    /// <p>The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.</p>
    pub s3_prefix: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.</p>
    pub s3_ingestion_role_arn: ::std::option::Option<::std::string::String>,
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <note>
    /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
    /// </note>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li>
    /// </ul>
    pub backtrack_window: ::std::option::Option<i64>,
    /// <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used.</p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub enable_cloudwatch_logs_exports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies whether to enable deletion protection for the DB cluster. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled.</p>
    pub deletion_protection: ::std::option::Option<bool>,
    /// <p>Specifies whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    pub copy_tags_to_snapshot: ::std::option::Option<bool>,
    /// <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation.</p>
    /// <p>For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub domain_iam_role_name: ::std::option::Option<::std::string::String>,
    /// <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub serverless_v2_scaling_configuration: ::std::option::Option<crate::types::ServerlessV2ScalingConfiguration>,
    /// <p>The network type of the DB cluster.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>IPV4</code> </p> </li>
    /// <li> <p> <code>DUAL</code> </p> </li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub network_type: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to manage the master user password with Amazon Web Services Secrets Manager.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Can't manage the master user password with Amazon Web Services Secrets Manager if <code>MasterUserPassword</code> is specified.</p> </li>
    /// </ul>
    pub manage_master_user_password: ::std::option::Option<bool>,
    /// <p>The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager.</p>
    /// <p>This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and you must use a customer managed KMS key.</p>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub master_user_secret_kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the storage type to be associated with the DB cluster.</p>
    /// <p>Valid Values: <code>aurora</code>, <code>aurora-iopt1</code> </p>
    /// <p>Default: <code>aurora</code> </p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub storage_type: ::std::option::Option<::std::string::String>,
}
impl RestoreDbClusterFromS3Input {
    /// <p>A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.availability_zones.is_none()`.
    pub fn availability_zones(&self) -> &[::std::string::String] {
        self.availability_zones.as_deref().unwrap_or_default()
    }
    /// <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be a value from 1 to 35</p> </li>
    /// </ul>
    pub fn backup_retention_period(&self) -> ::std::option::Option<i32> {
        self.backup_retention_period
    }
    /// <p>A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.</p>
    pub fn character_set_name(&self) -> ::std::option::Option<&str> {
        self.character_set_name.as_deref()
    }
    /// <p>The database name for the restored DB cluster.</p>
    pub fn database_name(&self) -> ::std::option::Option<&str> {
        self.database_name.as_deref()
    }
    /// <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code> </p>
    pub fn db_cluster_identifier(&self) -> ::std::option::Option<&str> {
        self.db_cluster_identifier.as_deref()
    }
    /// <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, the default parameter group for the engine version is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li>
    /// </ul>
    pub fn db_cluster_parameter_group_name(&self) -> ::std::option::Option<&str> {
        self.db_cluster_parameter_group_name.as_deref()
    }
    /// <p>A list of EC2 VPC security groups to associate with the restored DB cluster.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vpc_security_group_ids.is_none()`.
    pub fn vpc_security_group_ids(&self) -> &[::std::string::String] {
        self.vpc_security_group_ids.as_deref().unwrap_or_default()
    }
    /// <p>A DB subnet group to associate with the restored DB cluster.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
    /// <p>Example: <code>mydbsubnetgroup</code> </p>
    pub fn db_subnet_group_name(&self) -> ::std::option::Option<&str> {
        self.db_subnet_group_name.as_deref()
    }
    /// <p>The name of the database engine to be used for this DB cluster.</p>
    /// <p>Valid Values: <code>aurora-mysql</code> (for Aurora MySQL)</p>
    pub fn engine(&self) -> ::std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The version number of the database engine to use.</p>
    /// <p>To list all of the available engine versions for <code>aurora-mysql</code> (Aurora MySQL), use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Examples: <code>5.7.mysql_aurora.2.12.0</code>, <code>8.0.mysql_aurora.3.04.0</code> </p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The port number on which the instances in the restored DB cluster accept connections.</p>
    /// <p>Default: <code>3306</code> </p>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// <p>The name of the master user for the restored DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 16 letters or numbers.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't be a reserved word for the chosen database engine.</p> </li>
    /// </ul>
    pub fn master_username(&self) -> ::std::option::Option<&str> {
        self.master_username.as_deref()
    }
    /// <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 8 to 41 characters.</p> </li>
    /// <li> <p>Can't be specified if <code>ManageMasterUserPassword</code> is turned on.</p> </li>
    /// </ul>
    pub fn master_user_password(&self) -> ::std::option::Option<&str> {
        self.master_user_password.as_deref()
    }
    /// <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p>
    /// <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
    pub fn option_group_name(&self) -> ::std::option::Option<&str> {
        self.option_group_name.as_deref()
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow"> Backup window</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li>
    /// <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li>
    /// <li> <p>Must not conflict with the preferred maintenance window.</p> </li>
    /// <li> <p>Must be at least 30 minutes.</p> </li>
    /// </ul>
    pub fn preferred_backup_window(&self) -> ::std::option::Option<&str> {
        self.preferred_backup_window.as_deref()
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    pub fn preferred_maintenance_window(&self) -> ::std::option::Option<&str> {
        self.preferred_maintenance_window.as_deref()
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Specifies whether the restored DB cluster is encrypted.</p>
    pub fn storage_encrypted(&self) -> ::std::option::Option<bool> {
        self.storage_encrypted
    }
    /// <p>The Amazon Web Services KMS key identifier for an encrypted DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn enable_iam_database_authentication(&self) -> ::std::option::Option<bool> {
        self.enable_iam_database_authentication
    }
    /// <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket.</p>
    /// <p>Valid Values: <code>mysql</code> </p>
    pub fn source_engine(&self) -> ::std::option::Option<&str> {
        self.source_engine.as_deref()
    }
    /// <p>The version of the database that the backup files were created from.</p>
    /// <p>MySQL versions 5.7 and 8.0 are supported.</p>
    /// <p>Example: <code>5.7.40</code>, <code>8.0.28</code> </p>
    pub fn source_engine_version(&self) -> ::std::option::Option<&str> {
        self.source_engine_version.as_deref()
    }
    /// <p>The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.</p>
    pub fn s3_bucket_name(&self) -> ::std::option::Option<&str> {
        self.s3_bucket_name.as_deref()
    }
    /// <p>The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.</p>
    pub fn s3_prefix(&self) -> ::std::option::Option<&str> {
        self.s3_prefix.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.</p>
    pub fn s3_ingestion_role_arn(&self) -> ::std::option::Option<&str> {
        self.s3_ingestion_role_arn.as_deref()
    }
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <note>
    /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
    /// </note>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li>
    /// </ul>
    pub fn backtrack_window(&self) -> ::std::option::Option<i64> {
        self.backtrack_window
    }
    /// <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used.</p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.enable_cloudwatch_logs_exports.is_none()`.
    pub fn enable_cloudwatch_logs_exports(&self) -> &[::std::string::String] {
        self.enable_cloudwatch_logs_exports.as_deref().unwrap_or_default()
    }
    /// <p>Specifies whether to enable deletion protection for the DB cluster. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled.</p>
    pub fn deletion_protection(&self) -> ::std::option::Option<bool> {
        self.deletion_protection
    }
    /// <p>Specifies whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    pub fn copy_tags_to_snapshot(&self) -> ::std::option::Option<bool> {
        self.copy_tags_to_snapshot
    }
    /// <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation.</p>
    /// <p>For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub fn domain_iam_role_name(&self) -> ::std::option::Option<&str> {
        self.domain_iam_role_name.as_deref()
    }
    /// <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn serverless_v2_scaling_configuration(&self) -> ::std::option::Option<&crate::types::ServerlessV2ScalingConfiguration> {
        self.serverless_v2_scaling_configuration.as_ref()
    }
    /// <p>The network type of the DB cluster.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>IPV4</code> </p> </li>
    /// <li> <p> <code>DUAL</code> </p> </li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub fn network_type(&self) -> ::std::option::Option<&str> {
        self.network_type.as_deref()
    }
    /// <p>Specifies whether to manage the master user password with Amazon Web Services Secrets Manager.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Can't manage the master user password with Amazon Web Services Secrets Manager if <code>MasterUserPassword</code> is specified.</p> </li>
    /// </ul>
    pub fn manage_master_user_password(&self) -> ::std::option::Option<bool> {
        self.manage_master_user_password
    }
    /// <p>The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager.</p>
    /// <p>This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and you must use a customer managed KMS key.</p>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub fn master_user_secret_kms_key_id(&self) -> ::std::option::Option<&str> {
        self.master_user_secret_kms_key_id.as_deref()
    }
    /// <p>Specifies the storage type to be associated with the DB cluster.</p>
    /// <p>Valid Values: <code>aurora</code>, <code>aurora-iopt1</code> </p>
    /// <p>Default: <code>aurora</code> </p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn storage_type(&self) -> ::std::option::Option<&str> {
        self.storage_type.as_deref()
    }
}
impl RestoreDbClusterFromS3Input {
    /// Creates a new builder-style object to manufacture [`RestoreDbClusterFromS3Input`](crate::operation::restore_db_cluster_from_s3::RestoreDbClusterFromS3Input).
    pub fn builder() -> crate::operation::restore_db_cluster_from_s3::builders::RestoreDbClusterFromS3InputBuilder {
        crate::operation::restore_db_cluster_from_s3::builders::RestoreDbClusterFromS3InputBuilder::default()
    }
}

/// A builder for [`RestoreDbClusterFromS3Input`](crate::operation::restore_db_cluster_from_s3::RestoreDbClusterFromS3Input).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RestoreDbClusterFromS3InputBuilder {
    pub(crate) availability_zones: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) backup_retention_period: ::std::option::Option<i32>,
    pub(crate) character_set_name: ::std::option::Option<::std::string::String>,
    pub(crate) database_name: ::std::option::Option<::std::string::String>,
    pub(crate) db_cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) db_cluster_parameter_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) db_subnet_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) engine: ::std::option::Option<::std::string::String>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) master_username: ::std::option::Option<::std::string::String>,
    pub(crate) master_user_password: ::std::option::Option<::std::string::String>,
    pub(crate) option_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) preferred_backup_window: ::std::option::Option<::std::string::String>,
    pub(crate) preferred_maintenance_window: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) storage_encrypted: ::std::option::Option<bool>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) enable_iam_database_authentication: ::std::option::Option<bool>,
    pub(crate) source_engine: ::std::option::Option<::std::string::String>,
    pub(crate) source_engine_version: ::std::option::Option<::std::string::String>,
    pub(crate) s3_bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) s3_prefix: ::std::option::Option<::std::string::String>,
    pub(crate) s3_ingestion_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) backtrack_window: ::std::option::Option<i64>,
    pub(crate) enable_cloudwatch_logs_exports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) deletion_protection: ::std::option::Option<bool>,
    pub(crate) copy_tags_to_snapshot: ::std::option::Option<bool>,
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) domain_iam_role_name: ::std::option::Option<::std::string::String>,
    pub(crate) serverless_v2_scaling_configuration: ::std::option::Option<crate::types::ServerlessV2ScalingConfiguration>,
    pub(crate) network_type: ::std::option::Option<::std::string::String>,
    pub(crate) manage_master_user_password: ::std::option::Option<bool>,
    pub(crate) master_user_secret_kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) storage_type: ::std::option::Option<::std::string::String>,
}
impl RestoreDbClusterFromS3InputBuilder {
    /// Appends an item to `availability_zones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.</p>
    pub fn availability_zones(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.availability_zones.unwrap_or_default();
        v.push(input.into());
        self.availability_zones = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.</p>
    pub fn set_availability_zones(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.availability_zones = input;
        self
    }
    /// <p>A list of Availability Zones (AZs) where instances in the restored DB cluster can be created.</p>
    pub fn get_availability_zones(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.availability_zones
    }
    /// <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be a value from 1 to 35</p> </li>
    /// </ul>
    pub fn backup_retention_period(mut self, input: i32) -> Self {
        self.backup_retention_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be a value from 1 to 35</p> </li>
    /// </ul>
    pub fn set_backup_retention_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.backup_retention_period = input;
        self
    }
    /// <p>The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1.</p>
    /// <p>Default: 1</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be a value from 1 to 35</p> </li>
    /// </ul>
    pub fn get_backup_retention_period(&self) -> &::std::option::Option<i32> {
        &self.backup_retention_period
    }
    /// <p>A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.</p>
    pub fn character_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.character_set_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.</p>
    pub fn set_character_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.character_set_name = input;
        self
    }
    /// <p>A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.</p>
    pub fn get_character_set_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.character_set_name
    }
    /// <p>The database name for the restored DB cluster.</p>
    pub fn database_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.database_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The database name for the restored DB cluster.</p>
    pub fn set_database_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.database_name = input;
        self
    }
    /// <p>The database name for the restored DB cluster.</p>
    pub fn get_database_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.database_name
    }
    /// <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code> </p>
    /// This field is required.
    pub fn db_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code> </p>
    pub fn set_db_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_identifier = input;
        self
    }
    /// <p>The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code> </p>
    pub fn get_db_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_identifier
    }
    /// <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, the default parameter group for the engine version is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li>
    /// </ul>
    pub fn db_cluster_parameter_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_parameter_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, the default parameter group for the engine version is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li>
    /// </ul>
    pub fn set_db_cluster_parameter_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_parameter_group_name = input;
        self
    }
    /// <p>The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, the default parameter group for the engine version is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match the name of an existing DBClusterParameterGroup.</p> </li>
    /// </ul>
    pub fn get_db_cluster_parameter_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_parameter_group_name
    }
    /// Appends an item to `vpc_security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_group_ids`](Self::set_vpc_security_group_ids).
    ///
    /// <p>A list of EC2 VPC security groups to associate with the restored DB cluster.</p>
    pub fn vpc_security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.vpc_security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.vpc_security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of EC2 VPC security groups to associate with the restored DB cluster.</p>
    pub fn set_vpc_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.vpc_security_group_ids = input;
        self
    }
    /// <p>A list of EC2 VPC security groups to associate with the restored DB cluster.</p>
    pub fn get_vpc_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.vpc_security_group_ids
    }
    /// <p>A DB subnet group to associate with the restored DB cluster.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
    /// <p>Example: <code>mydbsubnetgroup</code> </p>
    pub fn db_subnet_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_subnet_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A DB subnet group to associate with the restored DB cluster.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
    /// <p>Example: <code>mydbsubnetgroup</code> </p>
    pub fn set_db_subnet_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_subnet_group_name = input;
        self
    }
    /// <p>A DB subnet group to associate with the restored DB cluster.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
    /// <p>Example: <code>mydbsubnetgroup</code> </p>
    pub fn get_db_subnet_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_subnet_group_name
    }
    /// <p>The name of the database engine to be used for this DB cluster.</p>
    /// <p>Valid Values: <code>aurora-mysql</code> (for Aurora MySQL)</p>
    /// This field is required.
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the database engine to be used for this DB cluster.</p>
    /// <p>Valid Values: <code>aurora-mysql</code> (for Aurora MySQL)</p>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The name of the database engine to be used for this DB cluster.</p>
    /// <p>Valid Values: <code>aurora-mysql</code> (for Aurora MySQL)</p>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine
    }
    /// <p>The version number of the database engine to use.</p>
    /// <p>To list all of the available engine versions for <code>aurora-mysql</code> (Aurora MySQL), use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Examples: <code>5.7.mysql_aurora.2.12.0</code>, <code>8.0.mysql_aurora.3.04.0</code> </p>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version number of the database engine to use.</p>
    /// <p>To list all of the available engine versions for <code>aurora-mysql</code> (Aurora MySQL), use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Examples: <code>5.7.mysql_aurora.2.12.0</code>, <code>8.0.mysql_aurora.3.04.0</code> </p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The version number of the database engine to use.</p>
    /// <p>To list all of the available engine versions for <code>aurora-mysql</code> (Aurora MySQL), use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Examples: <code>5.7.mysql_aurora.2.12.0</code>, <code>8.0.mysql_aurora.3.04.0</code> </p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// <p>The port number on which the instances in the restored DB cluster accept connections.</p>
    /// <p>Default: <code>3306</code> </p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port number on which the instances in the restored DB cluster accept connections.</p>
    /// <p>Default: <code>3306</code> </p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port number on which the instances in the restored DB cluster accept connections.</p>
    /// <p>Default: <code>3306</code> </p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The name of the master user for the restored DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 16 letters or numbers.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't be a reserved word for the chosen database engine.</p> </li>
    /// </ul>
    /// This field is required.
    pub fn master_username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.master_username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the master user for the restored DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 16 letters or numbers.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't be a reserved word for the chosen database engine.</p> </li>
    /// </ul>
    pub fn set_master_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.master_username = input;
        self
    }
    /// <p>The name of the master user for the restored DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be 1 to 16 letters or numbers.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't be a reserved word for the chosen database engine.</p> </li>
    /// </ul>
    pub fn get_master_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.master_username
    }
    /// <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 8 to 41 characters.</p> </li>
    /// <li> <p>Can't be specified if <code>ManageMasterUserPassword</code> is turned on.</p> </li>
    /// </ul>
    pub fn master_user_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.master_user_password = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 8 to 41 characters.</p> </li>
    /// <li> <p>Can't be specified if <code>ManageMasterUserPassword</code> is turned on.</p> </li>
    /// </ul>
    pub fn set_master_user_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.master_user_password = input;
        self
    }
    /// <p>The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@".</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 8 to 41 characters.</p> </li>
    /// <li> <p>Can't be specified if <code>ManageMasterUserPassword</code> is turned on.</p> </li>
    /// </ul>
    pub fn get_master_user_password(&self) -> &::std::option::Option<::std::string::String> {
        &self.master_user_password
    }
    /// <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p>
    /// <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
    pub fn option_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.option_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p>
    /// <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
    pub fn set_option_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.option_group_name = input;
        self
    }
    /// <p>A value that indicates that the restored DB cluster should be associated with the specified option group.</p>
    /// <p>Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.</p>
    pub fn get_option_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.option_group_name
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow"> Backup window</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li>
    /// <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li>
    /// <li> <p>Must not conflict with the preferred maintenance window.</p> </li>
    /// <li> <p>Must be at least 30 minutes.</p> </li>
    /// </ul>
    pub fn preferred_backup_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.preferred_backup_window = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow"> Backup window</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li>
    /// <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li>
    /// <li> <p>Must not conflict with the preferred maintenance window.</p> </li>
    /// <li> <p>Must be at least 30 minutes.</p> </li>
    /// </ul>
    pub fn set_preferred_backup_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.preferred_backup_window = input;
        self
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled using the <code>BackupRetentionPeriod</code> parameter.</p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. To view the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow"> Backup window</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p> </li>
    /// <li> <p>Must be in Universal Coordinated Time (UTC).</p> </li>
    /// <li> <p>Must not conflict with the preferred maintenance window.</p> </li>
    /// <li> <p>Must be at least 30 minutes.</p> </li>
    /// </ul>
    pub fn get_preferred_backup_window(&self) -> &::std::option::Option<::std::string::String> {
        &self.preferred_backup_window
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    pub fn preferred_maintenance_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.preferred_maintenance_window = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    pub fn set_preferred_maintenance_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.preferred_maintenance_window = input;
        self
    }
    /// <p>The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).</p>
    /// <p>Format: <code>ddd:hh24:mi-ddd:hh24:mi</code> </p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week. To see the time blocks available, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora"> Adjusting the Preferred Maintenance Window</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.</p>
    /// <p>Constraints: Minimum 30-minute window.</p>
    pub fn get_preferred_maintenance_window(&self) -> &::std::option::Option<::std::string::String> {
        &self.preferred_maintenance_window
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i> </p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>Specifies whether the restored DB cluster is encrypted.</p>
    pub fn storage_encrypted(mut self, input: bool) -> Self {
        self.storage_encrypted = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the restored DB cluster is encrypted.</p>
    pub fn set_storage_encrypted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.storage_encrypted = input;
        self
    }
    /// <p>Specifies whether the restored DB cluster is encrypted.</p>
    pub fn get_storage_encrypted(&self) -> &::std::option::Option<bool> {
        &self.storage_encrypted
    }
    /// <p>The Amazon Web Services KMS key identifier for an encrypted DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier for an encrypted DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The Amazon Web Services KMS key identifier for an encrypted DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If the StorageEncrypted parameter is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS will use your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
        self.enable_iam_database_authentication = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_enable_iam_database_authentication(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_iam_database_authentication = input;
        self
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn get_enable_iam_database_authentication(&self) -> &::std::option::Option<bool> {
        &self.enable_iam_database_authentication
    }
    /// <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket.</p>
    /// <p>Valid Values: <code>mysql</code> </p>
    /// This field is required.
    pub fn source_engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_engine = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket.</p>
    /// <p>Valid Values: <code>mysql</code> </p>
    pub fn set_source_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_engine = input;
        self
    }
    /// <p>The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket.</p>
    /// <p>Valid Values: <code>mysql</code> </p>
    pub fn get_source_engine(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_engine
    }
    /// <p>The version of the database that the backup files were created from.</p>
    /// <p>MySQL versions 5.7 and 8.0 are supported.</p>
    /// <p>Example: <code>5.7.40</code>, <code>8.0.28</code> </p>
    /// This field is required.
    pub fn source_engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the database that the backup files were created from.</p>
    /// <p>MySQL versions 5.7 and 8.0 are supported.</p>
    /// <p>Example: <code>5.7.40</code>, <code>8.0.28</code> </p>
    pub fn set_source_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_engine_version = input;
        self
    }
    /// <p>The version of the database that the backup files were created from.</p>
    /// <p>MySQL versions 5.7 and 8.0 are supported.</p>
    /// <p>Example: <code>5.7.40</code>, <code>8.0.28</code> </p>
    pub fn get_source_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_engine_version
    }
    /// <p>The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.</p>
    /// This field is required.
    pub fn s3_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.</p>
    pub fn set_s3_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_bucket_name = input;
        self
    }
    /// <p>The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.</p>
    pub fn get_s3_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_bucket_name
    }
    /// <p>The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.</p>
    pub fn s3_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_prefix = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.</p>
    pub fn set_s3_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_prefix = input;
        self
    }
    /// <p>The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a <b>SourceS3Prefix</b> value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.</p>
    pub fn get_s3_prefix(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_prefix
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.</p>
    /// This field is required.
    pub fn s3_ingestion_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.s3_ingestion_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.</p>
    pub fn set_s3_ingestion_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.s3_ingestion_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.</p>
    pub fn get_s3_ingestion_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.s3_ingestion_role_arn
    }
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <note>
    /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
    /// </note>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li>
    /// </ul>
    pub fn backtrack_window(mut self, input: i64) -> Self {
        self.backtrack_window = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <note>
    /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
    /// </note>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li>
    /// </ul>
    pub fn set_backtrack_window(mut self, input: ::std::option::Option<i64>) -> Self {
        self.backtrack_window = input;
        self
    }
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <note>
    /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
    /// </note>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li>
    /// </ul>
    pub fn get_backtrack_window(&self) -> &::std::option::Option<i64> {
        &self.backtrack_window
    }
    /// Appends an item to `enable_cloudwatch_logs_exports`.
    ///
    /// To override the contents of this collection use [`set_enable_cloudwatch_logs_exports`](Self::set_enable_cloudwatch_logs_exports).
    ///
    /// <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used.</p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn enable_cloudwatch_logs_exports(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.enable_cloudwatch_logs_exports.unwrap_or_default();
        v.push(input.into());
        self.enable_cloudwatch_logs_exports = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used.</p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_enable_cloudwatch_logs_exports(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.enable_cloudwatch_logs_exports = input;
        self
    }
    /// <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used.</p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn get_enable_cloudwatch_logs_exports(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.enable_cloudwatch_logs_exports
    }
    /// <p>Specifies whether to enable deletion protection for the DB cluster. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled.</p>
    pub fn deletion_protection(mut self, input: bool) -> Self {
        self.deletion_protection = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable deletion protection for the DB cluster. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled.</p>
    pub fn set_deletion_protection(mut self, input: ::std::option::Option<bool>) -> Self {
        self.deletion_protection = input;
        self
    }
    /// <p>Specifies whether to enable deletion protection for the DB cluster. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled.</p>
    pub fn get_deletion_protection(&self) -> &::std::option::Option<bool> {
        &self.deletion_protection
    }
    /// <p>Specifies whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
        self.copy_tags_to_snapshot = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    pub fn set_copy_tags_to_snapshot(mut self, input: ::std::option::Option<bool>) -> Self {
        self.copy_tags_to_snapshot = input;
        self
    }
    /// <p>Specifies whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    pub fn get_copy_tags_to_snapshot(&self) -> &::std::option::Option<bool> {
        &self.copy_tags_to_snapshot
    }
    /// <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation.</p>
    /// <p>For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation.</p>
    /// <p>For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation.</p>
    /// <p>For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub fn domain_iam_role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_iam_role_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub fn set_domain_iam_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_iam_role_name = input;
        self
    }
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    pub fn get_domain_iam_role_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_iam_role_name
    }
    /// <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn serverless_v2_scaling_configuration(mut self, input: crate::types::ServerlessV2ScalingConfiguration) -> Self {
        self.serverless_v2_scaling_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_serverless_v2_scaling_configuration(mut self, input: ::std::option::Option<crate::types::ServerlessV2ScalingConfiguration>) -> Self {
        self.serverless_v2_scaling_configuration = input;
        self
    }
    /// <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn get_serverless_v2_scaling_configuration(&self) -> &::std::option::Option<crate::types::ServerlessV2ScalingConfiguration> {
        &self.serverless_v2_scaling_configuration
    }
    /// <p>The network type of the DB cluster.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>IPV4</code> </p> </li>
    /// <li> <p> <code>DUAL</code> </p> </li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub fn network_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The network type of the DB cluster.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>IPV4</code> </p> </li>
    /// <li> <p> <code>DUAL</code> </p> </li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub fn set_network_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_type = input;
        self
    }
    /// <p>The network type of the DB cluster.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>IPV4</code> </p> </li>
    /// <li> <p> <code>DUAL</code> </p> </li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    pub fn get_network_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_type
    }
    /// <p>Specifies whether to manage the master user password with Amazon Web Services Secrets Manager.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Can't manage the master user password with Amazon Web Services Secrets Manager if <code>MasterUserPassword</code> is specified.</p> </li>
    /// </ul>
    pub fn manage_master_user_password(mut self, input: bool) -> Self {
        self.manage_master_user_password = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to manage the master user password with Amazon Web Services Secrets Manager.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Can't manage the master user password with Amazon Web Services Secrets Manager if <code>MasterUserPassword</code> is specified.</p> </li>
    /// </ul>
    pub fn set_manage_master_user_password(mut self, input: ::std::option::Option<bool>) -> Self {
        self.manage_master_user_password = input;
        self
    }
    /// <p>Specifies whether to manage the master user password with Amazon Web Services Secrets Manager.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Can't manage the master user password with Amazon Web Services Secrets Manager if <code>MasterUserPassword</code> is specified.</p> </li>
    /// </ul>
    pub fn get_manage_master_user_password(&self) -> &::std::option::Option<bool> {
        &self.manage_master_user_password
    }
    /// <p>The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager.</p>
    /// <p>This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and you must use a customer managed KMS key.</p>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub fn master_user_secret_kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.master_user_secret_kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager.</p>
    /// <p>This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and you must use a customer managed KMS key.</p>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub fn set_master_user_secret_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.master_user_secret_kms_key_id = input;
        self
    }
    /// <p>The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager.</p>
    /// <p>This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and you must use a customer managed KMS key.</p>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub fn get_master_user_secret_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.master_user_secret_kms_key_id
    }
    /// <p>Specifies the storage type to be associated with the DB cluster.</p>
    /// <p>Valid Values: <code>aurora</code>, <code>aurora-iopt1</code> </p>
    /// <p>Default: <code>aurora</code> </p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn storage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the storage type to be associated with the DB cluster.</p>
    /// <p>Valid Values: <code>aurora</code>, <code>aurora-iopt1</code> </p>
    /// <p>Default: <code>aurora</code> </p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_storage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_type = input;
        self
    }
    /// <p>Specifies the storage type to be associated with the DB cluster.</p>
    /// <p>Valid Values: <code>aurora</code>, <code>aurora-iopt1</code> </p>
    /// <p>Default: <code>aurora</code> </p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn get_storage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_type
    }
    /// Consumes the builder and constructs a [`RestoreDbClusterFromS3Input`](crate::operation::restore_db_cluster_from_s3::RestoreDbClusterFromS3Input).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::restore_db_cluster_from_s3::RestoreDbClusterFromS3Input,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::restore_db_cluster_from_s3::RestoreDbClusterFromS3Input {
            availability_zones: self.availability_zones,
            backup_retention_period: self.backup_retention_period,
            character_set_name: self.character_set_name,
            database_name: self.database_name,
            db_cluster_identifier: self.db_cluster_identifier,
            db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
            vpc_security_group_ids: self.vpc_security_group_ids,
            db_subnet_group_name: self.db_subnet_group_name,
            engine: self.engine,
            engine_version: self.engine_version,
            port: self.port,
            master_username: self.master_username,
            master_user_password: self.master_user_password,
            option_group_name: self.option_group_name,
            preferred_backup_window: self.preferred_backup_window,
            preferred_maintenance_window: self.preferred_maintenance_window,
            tags: self.tags,
            storage_encrypted: self.storage_encrypted,
            kms_key_id: self.kms_key_id,
            enable_iam_database_authentication: self.enable_iam_database_authentication,
            source_engine: self.source_engine,
            source_engine_version: self.source_engine_version,
            s3_bucket_name: self.s3_bucket_name,
            s3_prefix: self.s3_prefix,
            s3_ingestion_role_arn: self.s3_ingestion_role_arn,
            backtrack_window: self.backtrack_window,
            enable_cloudwatch_logs_exports: self.enable_cloudwatch_logs_exports,
            deletion_protection: self.deletion_protection,
            copy_tags_to_snapshot: self.copy_tags_to_snapshot,
            domain: self.domain,
            domain_iam_role_name: self.domain_iam_role_name,
            serverless_v2_scaling_configuration: self.serverless_v2_scaling_configuration,
            network_type: self.network_type,
            manage_master_user_password: self.manage_master_user_password,
            master_user_secret_kms_key_id: self.master_user_secret_kms_key_id,
            storage_type: self.storage_type,
        })
    }
}
