// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::modify_db_cluster_endpoint::_modify_db_cluster_endpoint_output::ModifyDbClusterEndpointOutputBuilder;

pub use crate::operation::modify_db_cluster_endpoint::_modify_db_cluster_endpoint_input::ModifyDbClusterEndpointInputBuilder;

impl crate::operation::modify_db_cluster_endpoint::builders::ModifyDbClusterEndpointInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::modify_db_cluster_endpoint::ModifyDbClusterEndpointOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpointError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.modify_db_cluster_endpoint();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ModifyDBClusterEndpoint`.
///
/// <p>Modifies the properties of an endpoint in an Amazon Aurora DB cluster.</p><note>
/// <p>This operation only applies to Aurora DB clusters.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ModifyDBClusterEndpointFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::modify_db_cluster_endpoint::builders::ModifyDbClusterEndpointInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::modify_db_cluster_endpoint::ModifyDbClusterEndpointOutput,
        crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpointError,
    > for ModifyDBClusterEndpointFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::modify_db_cluster_endpoint::ModifyDbClusterEndpointOutput,
            crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpointError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ModifyDBClusterEndpointFluentBuilder {
    /// Creates a new `ModifyDBClusterEndpoint`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ModifyDBClusterEndpoint as a reference.
    pub fn as_input(&self) -> &crate::operation::modify_db_cluster_endpoint::builders::ModifyDbClusterEndpointInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::modify_db_cluster_endpoint::ModifyDbClusterEndpointOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpointError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpoint::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpoint::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::modify_db_cluster_endpoint::ModifyDbClusterEndpointOutput,
        crate::operation::modify_db_cluster_endpoint::ModifyDBClusterEndpointError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The identifier of the endpoint to modify. This parameter is stored as a lowercase string.</p>
    pub fn db_cluster_endpoint_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_cluster_endpoint_identifier(input.into());
        self
    }
    /// <p>The identifier of the endpoint to modify. This parameter is stored as a lowercase string.</p>
    pub fn set_db_cluster_endpoint_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_cluster_endpoint_identifier(input);
        self
    }
    /// <p>The identifier of the endpoint to modify. This parameter is stored as a lowercase string.</p>
    pub fn get_db_cluster_endpoint_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_cluster_endpoint_identifier()
    }
    /// <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.</p>
    pub fn endpoint_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.endpoint_type(input.into());
        self
    }
    /// <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.</p>
    pub fn set_endpoint_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_endpoint_type(input);
        self
    }
    /// <p>The type of the endpoint. One of: <code>READER</code>, <code>WRITER</code>, <code>ANY</code>.</p>
    pub fn get_endpoint_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_endpoint_type()
    }
    ///
    /// Appends an item to `StaticMembers`.
    ///
    /// To override the contents of this collection use [`set_static_members`](Self::set_static_members).
    ///
    /// <p>List of DB instance identifiers that are part of the custom endpoint group.</p>
    pub fn static_members(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.static_members(input.into());
        self
    }
    /// <p>List of DB instance identifiers that are part of the custom endpoint group.</p>
    pub fn set_static_members(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_static_members(input);
        self
    }
    /// <p>List of DB instance identifiers that are part of the custom endpoint group.</p>
    pub fn get_static_members(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_static_members()
    }
    ///
    /// Appends an item to `ExcludedMembers`.
    ///
    /// To override the contents of this collection use [`set_excluded_members`](Self::set_excluded_members).
    ///
    /// <p>List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.</p>
    pub fn excluded_members(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.excluded_members(input.into());
        self
    }
    /// <p>List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.</p>
    pub fn set_excluded_members(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_excluded_members(input);
        self
    }
    /// <p>List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.</p>
    pub fn get_excluded_members(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_excluded_members()
    }
}
