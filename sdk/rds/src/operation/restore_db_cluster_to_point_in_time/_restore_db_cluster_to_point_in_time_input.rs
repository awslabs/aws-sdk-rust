// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RestoreDbClusterToPointInTimeInput {
    /// <p>The name of the new DB cluster to be created.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens</p></li>
    /// <li>
    /// <p>First character must be a letter</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p></li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub db_cluster_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The type of restore to be performed. You can specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p></li>
    /// <li>
    /// <p><code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p></li>
    /// </ul>
    /// <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub restore_type: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the source DB cluster from which to restore.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DBCluster.</p></li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub source_db_cluster_identifier: ::std::option::Option<::std::string::String>,
    /// <p>The date and time to restore the DB cluster to.</p>
    /// <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be before the latest restorable time for the DB instance</p></li>
    /// <li>
    /// <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p></li>
    /// <li>
    /// <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p></li>
    /// <li>
    /// <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code></p></li>
    /// </ul>
    /// <p>Example: <code>2015-03-07T23:45:00Z</code></p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub restore_to_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Specifies whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time.</p>
    /// <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub use_latest_restorable_time: ::std::option::Option<bool>,
    /// <p>The port number on which the new DB cluster accepts connections.</p>
    /// <p>Constraints: A value from <code>1150-65535</code>.</p>
    /// <p>Default: The default port for the engine.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub port: ::std::option::Option<i32>,
    /// <p>The DB subnet group name to use for the new DB cluster.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
    /// <p>Example: <code>mydbsubnetgroup</code></p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub db_subnet_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the option group for the new DB cluster.</p>
    /// <p>DB clusters are associated with a default option group that can't be modified.</p>
    pub option_group_name: ::std::option::Option<::std::string::String>,
    /// <p>A list of VPC security groups that the new DB cluster belongs to.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub vpc_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i></p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>The Amazon Web Services KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different from the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p>
    /// <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p>
    /// <ul>
    /// <li>
    /// <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p></li>
    /// <li>
    /// <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p></li>
    /// </ul>
    /// <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub enable_iam_database_authentication: ::std::option::Option<bool>,
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p></li>
    /// </ul>
    /// <p>Valid for: Aurora MySQL DB clusters only</p>
    pub backtrack_window: ::std::option::Option<i64>,
    /// <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used.</p>
    /// <p><b>RDS for MySQL</b></p>
    /// <p>Possible values are <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p><b>RDS for PostgreSQL</b></p>
    /// <p>Possible values are <code>postgresql</code> and <code>upgrade</code>.</p>
    /// <p><b>Aurora MySQL</b></p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p><b>Aurora PostgreSQL</b></p>
    /// <p>Possible value is <code>postgresql</code>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon RDS, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub enable_cloudwatch_logs_exports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The name of the custom DB cluster parameter group to associate with this DB cluster.</p>
    /// <p>If the <code>DBClusterParameterGroupName</code> parameter is omitted, the default DB cluster parameter group for the specified engine is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB cluster parameter group.</p></li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub db_cluster_parameter_group_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether to enable deletion protection for the DB cluster. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub deletion_protection: ::std::option::Option<bool>,
    /// <p>Specifies whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub copy_tags_to_snapshot: ::std::option::Option<bool>,
    /// <p>The Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation.</p>
    /// <p>For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p>The name of the IAM role to be used when making API calls to the Directory Service.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub domain_iam_role_name: ::std::option::Option<::std::string::String>,
    /// <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub scaling_configuration: ::std::option::Option<crate::types::ScalingConfiguration>,
    /// <p>The engine mode of the new cluster. Specify <code>provisioned</code> or <code>serverless</code>, depending on the type of the cluster you are creating. You can create an Aurora Serverless v1 clone from a provisioned cluster, or a provisioned clone from an Aurora Serverless v1 cluster. To create a clone that is an Aurora Serverless v1 cluster, the original cluster must be an Aurora Serverless v1 cluster or an encrypted provisioned cluster.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub engine_mode: ::std::option::Option<::std::string::String>,
    /// <p>The compute and memory capacity of the each DB instance in the Multi-AZ DB cluster, for example db.m6gd.xlarge. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines.</p>
    /// <p>For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB instance class</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub db_cluster_instance_class: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the storage type to be associated with the DB cluster.</p>
    /// <p>When specified for a Multi-AZ DB cluster, a value for the <code>Iops</code> parameter is required.</p>
    /// <p>Valid Values: <code>aurora</code>, <code>aurora-iopt1</code> (Aurora DB clusters); <code>io1</code> (Multi-AZ DB clusters)</p>
    /// <p>Default: <code>aurora</code> (Aurora DB clusters); <code>io1</code> (Multi-AZ DB clusters)</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub storage_type: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the DB cluster is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address.</p>
    /// <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
    /// <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB cluster is private.</p></li>
    /// <li>
    /// <p>If the default VPC in the target Region has an internet gateway attached to it, the DB cluster is public.</p></li>
    /// </ul>
    /// <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB cluster is private.</p></li>
    /// <li>
    /// <p>If the subnets are part of a VPC that has an internet gateway attached to it, the DB cluster is public.</p></li>
    /// </ul>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub publicly_accessible: ::std::option::Option<bool>,
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster.</p>
    /// <p>For information about valid IOPS values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Constraints: Must be a multiple between .5 and 50 of the storage amount for the DB instance.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub iops: ::std::option::Option<i32>,
    /// <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub serverless_v2_scaling_configuration: ::std::option::Option<crate::types::ServerlessV2ScalingConfiguration>,
    /// <p>The network type of the DB cluster.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IPV4</code></p></li>
    /// <li>
    /// <p><code>DUAL</code></p></li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i></p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub network_type: ::std::option::Option<::std::string::String>,
    /// <p>The resource ID of the source DB cluster from which to restore.</p>
    pub source_db_cluster_resource_id: ::std::option::Option<::std::string::String>,
    /// <p>Reserved for future use.</p>
    pub rds_custom_cluster_configuration: ::std::option::Option<crate::types::RdsCustomClusterConfiguration>,
    /// <p>The life cycle type for this DB cluster.</p><note>
    /// <p>By default, this value is set to <code>open-source-rds-extended-support</code>, which enrolls your DB cluster into Amazon RDS Extended Support. At the end of standard support, you can avoid charges for Extended Support by setting the value to <code>open-source-rds-extended-support-disabled</code>. In this case, RDS automatically upgrades your restored DB cluster to a higher engine version, if the major engine version is past its end of standard support date.</p>
    /// </note>
    /// <p>You can use this setting to enroll your DB cluster into Amazon RDS Extended Support. With RDS Extended Support, you can run the selected major engine version on your DB cluster past the end of standard support for that engine version. For more information, see the following sections:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (PostgreSQL only) - <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon Aurora User Guide</i></p></li>
    /// <li>
    /// <p>Amazon RDS - <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i></p></li>
    /// </ul>
    /// <p>Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters</p>
    /// <p>Valid Values: <code>open-source-rds-extended-support | open-source-rds-extended-support-disabled</code></p>
    /// <p>Default: <code>open-source-rds-extended-support</code></p>
    pub engine_lifecycle_support: ::std::option::Option<::std::string::String>,
}
impl RestoreDbClusterToPointInTimeInput {
    /// <p>The name of the new DB cluster to be created.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens</p></li>
    /// <li>
    /// <p>First character must be a letter</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p></li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn db_cluster_identifier(&self) -> ::std::option::Option<&str> {
        self.db_cluster_identifier.as_deref()
    }
    /// <p>The type of restore to be performed. You can specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p></li>
    /// <li>
    /// <p><code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p></li>
    /// </ul>
    /// <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn restore_type(&self) -> ::std::option::Option<&str> {
        self.restore_type.as_deref()
    }
    /// <p>The identifier of the source DB cluster from which to restore.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DBCluster.</p></li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn source_db_cluster_identifier(&self) -> ::std::option::Option<&str> {
        self.source_db_cluster_identifier.as_deref()
    }
    /// <p>The date and time to restore the DB cluster to.</p>
    /// <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be before the latest restorable time for the DB instance</p></li>
    /// <li>
    /// <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p></li>
    /// <li>
    /// <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p></li>
    /// <li>
    /// <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code></p></li>
    /// </ul>
    /// <p>Example: <code>2015-03-07T23:45:00Z</code></p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn restore_to_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.restore_to_time.as_ref()
    }
    /// <p>Specifies whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time.</p>
    /// <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn use_latest_restorable_time(&self) -> ::std::option::Option<bool> {
        self.use_latest_restorable_time
    }
    /// <p>The port number on which the new DB cluster accepts connections.</p>
    /// <p>Constraints: A value from <code>1150-65535</code>.</p>
    /// <p>Default: The default port for the engine.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn port(&self) -> ::std::option::Option<i32> {
        self.port
    }
    /// <p>The DB subnet group name to use for the new DB cluster.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
    /// <p>Example: <code>mydbsubnetgroup</code></p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn db_subnet_group_name(&self) -> ::std::option::Option<&str> {
        self.db_subnet_group_name.as_deref()
    }
    /// <p>The name of the option group for the new DB cluster.</p>
    /// <p>DB clusters are associated with a default option group that can't be modified.</p>
    pub fn option_group_name(&self) -> ::std::option::Option<&str> {
        self.option_group_name.as_deref()
    }
    /// <p>A list of VPC security groups that the new DB cluster belongs to.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.vpc_security_group_ids.is_none()`.
    pub fn vpc_security_group_ids(&self) -> &[::std::string::String] {
        self.vpc_security_group_ids.as_deref().unwrap_or_default()
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i></p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>The Amazon Web Services KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different from the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p>
    /// <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p>
    /// <ul>
    /// <li>
    /// <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p></li>
    /// <li>
    /// <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p></li>
    /// </ul>
    /// <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn enable_iam_database_authentication(&self) -> ::std::option::Option<bool> {
        self.enable_iam_database_authentication
    }
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p></li>
    /// </ul>
    /// <p>Valid for: Aurora MySQL DB clusters only</p>
    pub fn backtrack_window(&self) -> ::std::option::Option<i64> {
        self.backtrack_window
    }
    /// <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used.</p>
    /// <p><b>RDS for MySQL</b></p>
    /// <p>Possible values are <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p><b>RDS for PostgreSQL</b></p>
    /// <p>Possible values are <code>postgresql</code> and <code>upgrade</code>.</p>
    /// <p><b>Aurora MySQL</b></p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p><b>Aurora PostgreSQL</b></p>
    /// <p>Possible value is <code>postgresql</code>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon RDS, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.enable_cloudwatch_logs_exports.is_none()`.
    pub fn enable_cloudwatch_logs_exports(&self) -> &[::std::string::String] {
        self.enable_cloudwatch_logs_exports.as_deref().unwrap_or_default()
    }
    /// <p>The name of the custom DB cluster parameter group to associate with this DB cluster.</p>
    /// <p>If the <code>DBClusterParameterGroupName</code> parameter is omitted, the default DB cluster parameter group for the specified engine is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB cluster parameter group.</p></li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn db_cluster_parameter_group_name(&self) -> ::std::option::Option<&str> {
        self.db_cluster_parameter_group_name.as_deref()
    }
    /// <p>Specifies whether to enable deletion protection for the DB cluster. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn deletion_protection(&self) -> ::std::option::Option<bool> {
        self.deletion_protection
    }
    /// <p>Specifies whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn copy_tags_to_snapshot(&self) -> ::std::option::Option<bool> {
        self.copy_tags_to_snapshot
    }
    /// <p>The Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation.</p>
    /// <p>For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The name of the IAM role to be used when making API calls to the Directory Service.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn domain_iam_role_name(&self) -> ::std::option::Option<&str> {
        self.domain_iam_role_name.as_deref()
    }
    /// <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn scaling_configuration(&self) -> ::std::option::Option<&crate::types::ScalingConfiguration> {
        self.scaling_configuration.as_ref()
    }
    /// <p>The engine mode of the new cluster. Specify <code>provisioned</code> or <code>serverless</code>, depending on the type of the cluster you are creating. You can create an Aurora Serverless v1 clone from a provisioned cluster, or a provisioned clone from an Aurora Serverless v1 cluster. To create a clone that is an Aurora Serverless v1 cluster, the original cluster must be an Aurora Serverless v1 cluster or an encrypted provisioned cluster.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn engine_mode(&self) -> ::std::option::Option<&str> {
        self.engine_mode.as_deref()
    }
    /// <p>The compute and memory capacity of the each DB instance in the Multi-AZ DB cluster, for example db.m6gd.xlarge. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines.</p>
    /// <p>For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB instance class</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn db_cluster_instance_class(&self) -> ::std::option::Option<&str> {
        self.db_cluster_instance_class.as_deref()
    }
    /// <p>Specifies the storage type to be associated with the DB cluster.</p>
    /// <p>When specified for a Multi-AZ DB cluster, a value for the <code>Iops</code> parameter is required.</p>
    /// <p>Valid Values: <code>aurora</code>, <code>aurora-iopt1</code> (Aurora DB clusters); <code>io1</code> (Multi-AZ DB clusters)</p>
    /// <p>Default: <code>aurora</code> (Aurora DB clusters); <code>io1</code> (Multi-AZ DB clusters)</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn storage_type(&self) -> ::std::option::Option<&str> {
        self.storage_type.as_deref()
    }
    /// <p>Specifies whether the DB cluster is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address.</p>
    /// <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
    /// <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB cluster is private.</p></li>
    /// <li>
    /// <p>If the default VPC in the target Region has an internet gateway attached to it, the DB cluster is public.</p></li>
    /// </ul>
    /// <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB cluster is private.</p></li>
    /// <li>
    /// <p>If the subnets are part of a VPC that has an internet gateway attached to it, the DB cluster is public.</p></li>
    /// </ul>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn publicly_accessible(&self) -> ::std::option::Option<bool> {
        self.publicly_accessible
    }
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster.</p>
    /// <p>For information about valid IOPS values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Constraints: Must be a multiple between .5 and 50 of the storage amount for the DB instance.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn iops(&self) -> ::std::option::Option<i32> {
        self.iops
    }
    /// <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn serverless_v2_scaling_configuration(&self) -> ::std::option::Option<&crate::types::ServerlessV2ScalingConfiguration> {
        self.serverless_v2_scaling_configuration.as_ref()
    }
    /// <p>The network type of the DB cluster.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IPV4</code></p></li>
    /// <li>
    /// <p><code>DUAL</code></p></li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i></p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn network_type(&self) -> ::std::option::Option<&str> {
        self.network_type.as_deref()
    }
    /// <p>The resource ID of the source DB cluster from which to restore.</p>
    pub fn source_db_cluster_resource_id(&self) -> ::std::option::Option<&str> {
        self.source_db_cluster_resource_id.as_deref()
    }
    /// <p>Reserved for future use.</p>
    pub fn rds_custom_cluster_configuration(&self) -> ::std::option::Option<&crate::types::RdsCustomClusterConfiguration> {
        self.rds_custom_cluster_configuration.as_ref()
    }
    /// <p>The life cycle type for this DB cluster.</p><note>
    /// <p>By default, this value is set to <code>open-source-rds-extended-support</code>, which enrolls your DB cluster into Amazon RDS Extended Support. At the end of standard support, you can avoid charges for Extended Support by setting the value to <code>open-source-rds-extended-support-disabled</code>. In this case, RDS automatically upgrades your restored DB cluster to a higher engine version, if the major engine version is past its end of standard support date.</p>
    /// </note>
    /// <p>You can use this setting to enroll your DB cluster into Amazon RDS Extended Support. With RDS Extended Support, you can run the selected major engine version on your DB cluster past the end of standard support for that engine version. For more information, see the following sections:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (PostgreSQL only) - <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon Aurora User Guide</i></p></li>
    /// <li>
    /// <p>Amazon RDS - <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i></p></li>
    /// </ul>
    /// <p>Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters</p>
    /// <p>Valid Values: <code>open-source-rds-extended-support | open-source-rds-extended-support-disabled</code></p>
    /// <p>Default: <code>open-source-rds-extended-support</code></p>
    pub fn engine_lifecycle_support(&self) -> ::std::option::Option<&str> {
        self.engine_lifecycle_support.as_deref()
    }
}
impl RestoreDbClusterToPointInTimeInput {
    /// Creates a new builder-style object to manufacture [`RestoreDbClusterToPointInTimeInput`](crate::operation::restore_db_cluster_to_point_in_time::RestoreDbClusterToPointInTimeInput).
    pub fn builder() -> crate::operation::restore_db_cluster_to_point_in_time::builders::RestoreDbClusterToPointInTimeInputBuilder {
        crate::operation::restore_db_cluster_to_point_in_time::builders::RestoreDbClusterToPointInTimeInputBuilder::default()
    }
}

/// A builder for [`RestoreDbClusterToPointInTimeInput`](crate::operation::restore_db_cluster_to_point_in_time::RestoreDbClusterToPointInTimeInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RestoreDbClusterToPointInTimeInputBuilder {
    pub(crate) db_cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) restore_type: ::std::option::Option<::std::string::String>,
    pub(crate) source_db_cluster_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) restore_to_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) use_latest_restorable_time: ::std::option::Option<bool>,
    pub(crate) port: ::std::option::Option<i32>,
    pub(crate) db_subnet_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) option_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) vpc_security_group_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) enable_iam_database_authentication: ::std::option::Option<bool>,
    pub(crate) backtrack_window: ::std::option::Option<i64>,
    pub(crate) enable_cloudwatch_logs_exports: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) db_cluster_parameter_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) deletion_protection: ::std::option::Option<bool>,
    pub(crate) copy_tags_to_snapshot: ::std::option::Option<bool>,
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) domain_iam_role_name: ::std::option::Option<::std::string::String>,
    pub(crate) scaling_configuration: ::std::option::Option<crate::types::ScalingConfiguration>,
    pub(crate) engine_mode: ::std::option::Option<::std::string::String>,
    pub(crate) db_cluster_instance_class: ::std::option::Option<::std::string::String>,
    pub(crate) storage_type: ::std::option::Option<::std::string::String>,
    pub(crate) publicly_accessible: ::std::option::Option<bool>,
    pub(crate) iops: ::std::option::Option<i32>,
    pub(crate) serverless_v2_scaling_configuration: ::std::option::Option<crate::types::ServerlessV2ScalingConfiguration>,
    pub(crate) network_type: ::std::option::Option<::std::string::String>,
    pub(crate) source_db_cluster_resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) rds_custom_cluster_configuration: ::std::option::Option<crate::types::RdsCustomClusterConfiguration>,
    pub(crate) engine_lifecycle_support: ::std::option::Option<::std::string::String>,
}
impl RestoreDbClusterToPointInTimeInputBuilder {
    /// <p>The name of the new DB cluster to be created.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens</p></li>
    /// <li>
    /// <p>First character must be a letter</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p></li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    /// This field is required.
    pub fn db_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the new DB cluster to be created.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens</p></li>
    /// <li>
    /// <p>First character must be a letter</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p></li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_db_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_identifier = input;
        self
    }
    /// <p>The name of the new DB cluster to be created.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens</p></li>
    /// <li>
    /// <p>First character must be a letter</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens</p></li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn get_db_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_identifier
    }
    /// <p>The type of restore to be performed. You can specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p></li>
    /// <li>
    /// <p><code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p></li>
    /// </ul>
    /// <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn restore_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.restore_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of restore to be performed. You can specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p></li>
    /// <li>
    /// <p><code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p></li>
    /// </ul>
    /// <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_restore_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.restore_type = input;
        self
    }
    /// <p>The type of restore to be performed. You can specify one of the following values:</p>
    /// <ul>
    /// <li>
    /// <p><code>full-copy</code> - The new DB cluster is restored as a full copy of the source DB cluster.</p></li>
    /// <li>
    /// <p><code>copy-on-write</code> - The new DB cluster is restored as a clone of the source DB cluster.</p></li>
    /// </ul>
    /// <p>If you don't specify a <code>RestoreType</code> value, then the new DB cluster is restored as a full copy of the source DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn get_restore_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.restore_type
    }
    /// <p>The identifier of the source DB cluster from which to restore.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DBCluster.</p></li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn source_db_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_db_cluster_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the source DB cluster from which to restore.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DBCluster.</p></li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_source_db_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_db_cluster_identifier = input;
        self
    }
    /// <p>The identifier of the source DB cluster from which to restore.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the identifier of an existing DBCluster.</p></li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn get_source_db_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_db_cluster_identifier
    }
    /// <p>The date and time to restore the DB cluster to.</p>
    /// <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be before the latest restorable time for the DB instance</p></li>
    /// <li>
    /// <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p></li>
    /// <li>
    /// <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p></li>
    /// <li>
    /// <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code></p></li>
    /// </ul>
    /// <p>Example: <code>2015-03-07T23:45:00Z</code></p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn restore_to_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.restore_to_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time to restore the DB cluster to.</p>
    /// <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be before the latest restorable time for the DB instance</p></li>
    /// <li>
    /// <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p></li>
    /// <li>
    /// <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p></li>
    /// <li>
    /// <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code></p></li>
    /// </ul>
    /// <p>Example: <code>2015-03-07T23:45:00Z</code></p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_restore_to_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.restore_to_time = input;
        self
    }
    /// <p>The date and time to restore the DB cluster to.</p>
    /// <p>Valid Values: Value must be a time in Universal Coordinated Time (UTC) format</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be before the latest restorable time for the DB instance</p></li>
    /// <li>
    /// <p>Must be specified if <code>UseLatestRestorableTime</code> parameter isn't provided</p></li>
    /// <li>
    /// <p>Can't be specified if the <code>UseLatestRestorableTime</code> parameter is enabled</p></li>
    /// <li>
    /// <p>Can't be specified if the <code>RestoreType</code> parameter is <code>copy-on-write</code></p></li>
    /// </ul>
    /// <p>Example: <code>2015-03-07T23:45:00Z</code></p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn get_restore_to_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.restore_to_time
    }
    /// <p>Specifies whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time.</p>
    /// <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn use_latest_restorable_time(mut self, input: bool) -> Self {
        self.use_latest_restorable_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time.</p>
    /// <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_use_latest_restorable_time(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_latest_restorable_time = input;
        self
    }
    /// <p>Specifies whether to restore the DB cluster to the latest restorable backup time. By default, the DB cluster isn't restored to the latest restorable backup time.</p>
    /// <p>Constraints: Can't be specified if <code>RestoreToTime</code> parameter is provided.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn get_use_latest_restorable_time(&self) -> &::std::option::Option<bool> {
        &self.use_latest_restorable_time
    }
    /// <p>The port number on which the new DB cluster accepts connections.</p>
    /// <p>Constraints: A value from <code>1150-65535</code>.</p>
    /// <p>Default: The default port for the engine.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn port(mut self, input: i32) -> Self {
        self.port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port number on which the new DB cluster accepts connections.</p>
    /// <p>Constraints: A value from <code>1150-65535</code>.</p>
    /// <p>Default: The default port for the engine.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.port = input;
        self
    }
    /// <p>The port number on which the new DB cluster accepts connections.</p>
    /// <p>Constraints: A value from <code>1150-65535</code>.</p>
    /// <p>Default: The default port for the engine.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        &self.port
    }
    /// <p>The DB subnet group name to use for the new DB cluster.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
    /// <p>Example: <code>mydbsubnetgroup</code></p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn db_subnet_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_subnet_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The DB subnet group name to use for the new DB cluster.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
    /// <p>Example: <code>mydbsubnetgroup</code></p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_db_subnet_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_subnet_group_name = input;
        self
    }
    /// <p>The DB subnet group name to use for the new DB cluster.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DBSubnetGroup.</p>
    /// <p>Example: <code>mydbsubnetgroup</code></p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn get_db_subnet_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_subnet_group_name
    }
    /// <p>The name of the option group for the new DB cluster.</p>
    /// <p>DB clusters are associated with a default option group that can't be modified.</p>
    pub fn option_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.option_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the option group for the new DB cluster.</p>
    /// <p>DB clusters are associated with a default option group that can't be modified.</p>
    pub fn set_option_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.option_group_name = input;
        self
    }
    /// <p>The name of the option group for the new DB cluster.</p>
    /// <p>DB clusters are associated with a default option group that can't be modified.</p>
    pub fn get_option_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.option_group_name
    }
    /// Appends an item to `vpc_security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_group_ids`](Self::set_vpc_security_group_ids).
    ///
    /// <p>A list of VPC security groups that the new DB cluster belongs to.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn vpc_security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.vpc_security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.vpc_security_group_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of VPC security groups that the new DB cluster belongs to.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_vpc_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.vpc_security_group_ids = input;
        self
    }
    /// <p>A list of VPC security groups that the new DB cluster belongs to.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn get_vpc_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.vpc_security_group_ids
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i></p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i></p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of tags. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Tagging.html">Tagging Amazon RDS Resources</a> in the <i>Amazon RDS User Guide.</i></p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>The Amazon Web Services KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different from the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p>
    /// <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p>
    /// <ul>
    /// <li>
    /// <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p></li>
    /// <li>
    /// <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p></li>
    /// </ul>
    /// <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different from the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p>
    /// <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p>
    /// <ul>
    /// <li>
    /// <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p></li>
    /// <li>
    /// <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p></li>
    /// </ul>
    /// <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The Amazon Web Services KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different from the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the <code>KmsKeyId</code> parameter.</p>
    /// <p>If you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p>
    /// <ul>
    /// <li>
    /// <p>If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.</p></li>
    /// <li>
    /// <p>If the DB cluster isn't encrypted, then the restored DB cluster isn't encrypted.</p></li>
    /// </ul>
    /// <p>If <code>DBClusterIdentifier</code> refers to a DB cluster that isn't encrypted, then the restore request is rejected.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
        self.enable_iam_database_authentication = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_enable_iam_database_authentication(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_iam_database_authentication = input;
        self
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn get_enable_iam_database_authentication(&self) -> &::std::option::Option<bool> {
        &self.enable_iam_database_authentication
    }
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p></li>
    /// </ul>
    /// <p>Valid for: Aurora MySQL DB clusters only</p>
    pub fn backtrack_window(mut self, input: i64) -> Self {
        self.backtrack_window = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p></li>
    /// </ul>
    /// <p>Valid for: Aurora MySQL DB clusters only</p>
    pub fn set_backtrack_window(mut self, input: ::std::option::Option<i64>) -> Self {
        self.backtrack_window = input;
        self
    }
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p></li>
    /// </ul>
    /// <p>Valid for: Aurora MySQL DB clusters only</p>
    pub fn get_backtrack_window(&self) -> &::std::option::Option<i64> {
        &self.backtrack_window
    }
    /// Appends an item to `enable_cloudwatch_logs_exports`.
    ///
    /// To override the contents of this collection use [`set_enable_cloudwatch_logs_exports`](Self::set_enable_cloudwatch_logs_exports).
    ///
    /// <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used.</p>
    /// <p><b>RDS for MySQL</b></p>
    /// <p>Possible values are <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p><b>RDS for PostgreSQL</b></p>
    /// <p>Possible values are <code>postgresql</code> and <code>upgrade</code>.</p>
    /// <p><b>Aurora MySQL</b></p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p><b>Aurora PostgreSQL</b></p>
    /// <p>Possible value is <code>postgresql</code>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon RDS, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn enable_cloudwatch_logs_exports(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.enable_cloudwatch_logs_exports.unwrap_or_default();
        v.push(input.into());
        self.enable_cloudwatch_logs_exports = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used.</p>
    /// <p><b>RDS for MySQL</b></p>
    /// <p>Possible values are <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p><b>RDS for PostgreSQL</b></p>
    /// <p>Possible values are <code>postgresql</code> and <code>upgrade</code>.</p>
    /// <p><b>Aurora MySQL</b></p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p><b>Aurora PostgreSQL</b></p>
    /// <p>Possible value is <code>postgresql</code>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon RDS, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_enable_cloudwatch_logs_exports(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.enable_cloudwatch_logs_exports = input;
        self
    }
    /// <p>The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used.</p>
    /// <p><b>RDS for MySQL</b></p>
    /// <p>Possible values are <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p><b>RDS for PostgreSQL</b></p>
    /// <p>Possible values are <code>postgresql</code> and <code>upgrade</code>.</p>
    /// <p><b>Aurora MySQL</b></p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p><b>Aurora PostgreSQL</b></p>
    /// <p>Possible value is <code>postgresql</code>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon RDS, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn get_enable_cloudwatch_logs_exports(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.enable_cloudwatch_logs_exports
    }
    /// <p>The name of the custom DB cluster parameter group to associate with this DB cluster.</p>
    /// <p>If the <code>DBClusterParameterGroupName</code> parameter is omitted, the default DB cluster parameter group for the specified engine is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB cluster parameter group.</p></li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn db_cluster_parameter_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_parameter_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the custom DB cluster parameter group to associate with this DB cluster.</p>
    /// <p>If the <code>DBClusterParameterGroupName</code> parameter is omitted, the default DB cluster parameter group for the specified engine is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB cluster parameter group.</p></li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_db_cluster_parameter_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_parameter_group_name = input;
        self
    }
    /// <p>The name of the custom DB cluster parameter group to associate with this DB cluster.</p>
    /// <p>If the <code>DBClusterParameterGroupName</code> parameter is omitted, the default DB cluster parameter group for the specified engine is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>If supplied, must match the name of an existing DB cluster parameter group.</p></li>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn get_db_cluster_parameter_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_parameter_group_name
    }
    /// <p>Specifies whether to enable deletion protection for the DB cluster. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn deletion_protection(mut self, input: bool) -> Self {
        self.deletion_protection = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to enable deletion protection for the DB cluster. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_deletion_protection(mut self, input: ::std::option::Option<bool>) -> Self {
        self.deletion_protection = input;
        self
    }
    /// <p>Specifies whether to enable deletion protection for the DB cluster. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn get_deletion_protection(&self) -> &::std::option::Option<bool> {
        &self.deletion_protection
    }
    /// <p>Specifies whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
        self.copy_tags_to_snapshot = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_copy_tags_to_snapshot(mut self, input: ::std::option::Option<bool>) -> Self {
        self.copy_tags_to_snapshot = input;
        self
    }
    /// <p>Specifies whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn get_copy_tags_to_snapshot(&self) -> &::std::option::Option<bool> {
        &self.copy_tags_to_snapshot
    }
    /// <p>The Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation.</p>
    /// <p>For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation.</p>
    /// <p>For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation.</p>
    /// <p>For Amazon Aurora DB clusters, Amazon RDS can use Kerberos Authentication to authenticate users that connect to the DB cluster. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html">Kerberos Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p>The name of the IAM role to be used when making API calls to the Directory Service.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn domain_iam_role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_iam_role_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the IAM role to be used when making API calls to the Directory Service.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_domain_iam_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_iam_role_name = input;
        self
    }
    /// <p>The name of the IAM role to be used when making API calls to the Directory Service.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn get_domain_iam_role_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_iam_role_name
    }
    /// <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn scaling_configuration(mut self, input: crate::types::ScalingConfiguration) -> Self {
        self.scaling_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_scaling_configuration(mut self, input: ::std::option::Option<crate::types::ScalingConfiguration>) -> Self {
        self.scaling_configuration = input;
        self
    }
    /// <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn get_scaling_configuration(&self) -> &::std::option::Option<crate::types::ScalingConfiguration> {
        &self.scaling_configuration
    }
    /// <p>The engine mode of the new cluster. Specify <code>provisioned</code> or <code>serverless</code>, depending on the type of the cluster you are creating. You can create an Aurora Serverless v1 clone from a provisioned cluster, or a provisioned clone from an Aurora Serverless v1 cluster. To create a clone that is an Aurora Serverless v1 cluster, the original cluster must be an Aurora Serverless v1 cluster or an encrypted provisioned cluster.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn engine_mode(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_mode = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The engine mode of the new cluster. Specify <code>provisioned</code> or <code>serverless</code>, depending on the type of the cluster you are creating. You can create an Aurora Serverless v1 clone from a provisioned cluster, or a provisioned clone from an Aurora Serverless v1 cluster. To create a clone that is an Aurora Serverless v1 cluster, the original cluster must be an Aurora Serverless v1 cluster or an encrypted provisioned cluster.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_engine_mode(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_mode = input;
        self
    }
    /// <p>The engine mode of the new cluster. Specify <code>provisioned</code> or <code>serverless</code>, depending on the type of the cluster you are creating. You can create an Aurora Serverless v1 clone from a provisioned cluster, or a provisioned clone from an Aurora Serverless v1 cluster. To create a clone that is an Aurora Serverless v1 cluster, the original cluster must be an Aurora Serverless v1 cluster or an encrypted provisioned cluster.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn get_engine_mode(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_mode
    }
    /// <p>The compute and memory capacity of the each DB instance in the Multi-AZ DB cluster, for example db.m6gd.xlarge. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines.</p>
    /// <p>For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB instance class</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn db_cluster_instance_class(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.db_cluster_instance_class = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The compute and memory capacity of the each DB instance in the Multi-AZ DB cluster, for example db.m6gd.xlarge. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines.</p>
    /// <p>For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB instance class</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn set_db_cluster_instance_class(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.db_cluster_instance_class = input;
        self
    }
    /// <p>The compute and memory capacity of the each DB instance in the Multi-AZ DB cluster, for example db.m6gd.xlarge. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines.</p>
    /// <p>For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB instance class</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn get_db_cluster_instance_class(&self) -> &::std::option::Option<::std::string::String> {
        &self.db_cluster_instance_class
    }
    /// <p>Specifies the storage type to be associated with the DB cluster.</p>
    /// <p>When specified for a Multi-AZ DB cluster, a value for the <code>Iops</code> parameter is required.</p>
    /// <p>Valid Values: <code>aurora</code>, <code>aurora-iopt1</code> (Aurora DB clusters); <code>io1</code> (Multi-AZ DB clusters)</p>
    /// <p>Default: <code>aurora</code> (Aurora DB clusters); <code>io1</code> (Multi-AZ DB clusters)</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn storage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the storage type to be associated with the DB cluster.</p>
    /// <p>When specified for a Multi-AZ DB cluster, a value for the <code>Iops</code> parameter is required.</p>
    /// <p>Valid Values: <code>aurora</code>, <code>aurora-iopt1</code> (Aurora DB clusters); <code>io1</code> (Multi-AZ DB clusters)</p>
    /// <p>Default: <code>aurora</code> (Aurora DB clusters); <code>io1</code> (Multi-AZ DB clusters)</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_storage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_type = input;
        self
    }
    /// <p>Specifies the storage type to be associated with the DB cluster.</p>
    /// <p>When specified for a Multi-AZ DB cluster, a value for the <code>Iops</code> parameter is required.</p>
    /// <p>Valid Values: <code>aurora</code>, <code>aurora-iopt1</code> (Aurora DB clusters); <code>io1</code> (Multi-AZ DB clusters)</p>
    /// <p>Default: <code>aurora</code> (Aurora DB clusters); <code>io1</code> (Multi-AZ DB clusters)</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn get_storage_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_type
    }
    /// <p>Specifies whether the DB cluster is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address.</p>
    /// <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
    /// <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB cluster is private.</p></li>
    /// <li>
    /// <p>If the default VPC in the target Region has an internet gateway attached to it, the DB cluster is public.</p></li>
    /// </ul>
    /// <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB cluster is private.</p></li>
    /// <li>
    /// <p>If the subnets are part of a VPC that has an internet gateway attached to it, the DB cluster is public.</p></li>
    /// </ul>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.publicly_accessible = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the DB cluster is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address.</p>
    /// <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
    /// <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB cluster is private.</p></li>
    /// <li>
    /// <p>If the default VPC in the target Region has an internet gateway attached to it, the DB cluster is public.</p></li>
    /// </ul>
    /// <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB cluster is private.</p></li>
    /// <li>
    /// <p>If the subnets are part of a VPC that has an internet gateway attached to it, the DB cluster is public.</p></li>
    /// </ul>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn set_publicly_accessible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.publicly_accessible = input;
        self
    }
    /// <p>Specifies whether the DB cluster is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address.</p>
    /// <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
    /// <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB cluster is private.</p></li>
    /// <li>
    /// <p>If the default VPC in the target Region has an internet gateway attached to it, the DB cluster is public.</p></li>
    /// </ul>
    /// <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB cluster is private.</p></li>
    /// <li>
    /// <p>If the subnets are part of a VPC that has an internet gateway attached to it, the DB cluster is public.</p></li>
    /// </ul>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn get_publicly_accessible(&self) -> &::std::option::Option<bool> {
        &self.publicly_accessible
    }
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster.</p>
    /// <p>For information about valid IOPS values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Constraints: Must be a multiple between .5 and 50 of the storage amount for the DB instance.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn iops(mut self, input: i32) -> Self {
        self.iops = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster.</p>
    /// <p>For information about valid IOPS values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Constraints: Must be a multiple between .5 and 50 of the storage amount for the DB instance.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn set_iops(mut self, input: ::std::option::Option<i32>) -> Self {
        self.iops = input;
        self
    }
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster.</p>
    /// <p>For information about valid IOPS values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Constraints: Must be a multiple between .5 and 50 of the storage amount for the DB instance.</p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn get_iops(&self) -> &::std::option::Option<i32> {
        &self.iops
    }
    /// <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn serverless_v2_scaling_configuration(mut self, input: crate::types::ServerlessV2ScalingConfiguration) -> Self {
        self.serverless_v2_scaling_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_serverless_v2_scaling_configuration(mut self, input: ::std::option::Option<crate::types::ServerlessV2ScalingConfiguration>) -> Self {
        self.serverless_v2_scaling_configuration = input;
        self
    }
    /// <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn get_serverless_v2_scaling_configuration(&self) -> &::std::option::Option<crate::types::ServerlessV2ScalingConfiguration> {
        &self.serverless_v2_scaling_configuration
    }
    /// <p>The network type of the DB cluster.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IPV4</code></p></li>
    /// <li>
    /// <p><code>DUAL</code></p></li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i></p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn network_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The network type of the DB cluster.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IPV4</code></p></li>
    /// <li>
    /// <p><code>DUAL</code></p></li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i></p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_network_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_type = input;
        self
    }
    /// <p>The network type of the DB cluster.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>IPV4</code></p></li>
    /// <li>
    /// <p><code>DUAL</code></p></li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i></p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn get_network_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_type
    }
    /// <p>The resource ID of the source DB cluster from which to restore.</p>
    pub fn source_db_cluster_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_db_cluster_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The resource ID of the source DB cluster from which to restore.</p>
    pub fn set_source_db_cluster_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_db_cluster_resource_id = input;
        self
    }
    /// <p>The resource ID of the source DB cluster from which to restore.</p>
    pub fn get_source_db_cluster_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_db_cluster_resource_id
    }
    /// <p>Reserved for future use.</p>
    pub fn rds_custom_cluster_configuration(mut self, input: crate::types::RdsCustomClusterConfiguration) -> Self {
        self.rds_custom_cluster_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn set_rds_custom_cluster_configuration(mut self, input: ::std::option::Option<crate::types::RdsCustomClusterConfiguration>) -> Self {
        self.rds_custom_cluster_configuration = input;
        self
    }
    /// <p>Reserved for future use.</p>
    pub fn get_rds_custom_cluster_configuration(&self) -> &::std::option::Option<crate::types::RdsCustomClusterConfiguration> {
        &self.rds_custom_cluster_configuration
    }
    /// <p>The life cycle type for this DB cluster.</p><note>
    /// <p>By default, this value is set to <code>open-source-rds-extended-support</code>, which enrolls your DB cluster into Amazon RDS Extended Support. At the end of standard support, you can avoid charges for Extended Support by setting the value to <code>open-source-rds-extended-support-disabled</code>. In this case, RDS automatically upgrades your restored DB cluster to a higher engine version, if the major engine version is past its end of standard support date.</p>
    /// </note>
    /// <p>You can use this setting to enroll your DB cluster into Amazon RDS Extended Support. With RDS Extended Support, you can run the selected major engine version on your DB cluster past the end of standard support for that engine version. For more information, see the following sections:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (PostgreSQL only) - <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon Aurora User Guide</i></p></li>
    /// <li>
    /// <p>Amazon RDS - <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i></p></li>
    /// </ul>
    /// <p>Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters</p>
    /// <p>Valid Values: <code>open-source-rds-extended-support | open-source-rds-extended-support-disabled</code></p>
    /// <p>Default: <code>open-source-rds-extended-support</code></p>
    pub fn engine_lifecycle_support(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_lifecycle_support = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The life cycle type for this DB cluster.</p><note>
    /// <p>By default, this value is set to <code>open-source-rds-extended-support</code>, which enrolls your DB cluster into Amazon RDS Extended Support. At the end of standard support, you can avoid charges for Extended Support by setting the value to <code>open-source-rds-extended-support-disabled</code>. In this case, RDS automatically upgrades your restored DB cluster to a higher engine version, if the major engine version is past its end of standard support date.</p>
    /// </note>
    /// <p>You can use this setting to enroll your DB cluster into Amazon RDS Extended Support. With RDS Extended Support, you can run the selected major engine version on your DB cluster past the end of standard support for that engine version. For more information, see the following sections:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (PostgreSQL only) - <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon Aurora User Guide</i></p></li>
    /// <li>
    /// <p>Amazon RDS - <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i></p></li>
    /// </ul>
    /// <p>Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters</p>
    /// <p>Valid Values: <code>open-source-rds-extended-support | open-source-rds-extended-support-disabled</code></p>
    /// <p>Default: <code>open-source-rds-extended-support</code></p>
    pub fn set_engine_lifecycle_support(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_lifecycle_support = input;
        self
    }
    /// <p>The life cycle type for this DB cluster.</p><note>
    /// <p>By default, this value is set to <code>open-source-rds-extended-support</code>, which enrolls your DB cluster into Amazon RDS Extended Support. At the end of standard support, you can avoid charges for Extended Support by setting the value to <code>open-source-rds-extended-support-disabled</code>. In this case, RDS automatically upgrades your restored DB cluster to a higher engine version, if the major engine version is past its end of standard support date.</p>
    /// </note>
    /// <p>You can use this setting to enroll your DB cluster into Amazon RDS Extended Support. With RDS Extended Support, you can run the selected major engine version on your DB cluster past the end of standard support for that engine version. For more information, see the following sections:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (PostgreSQL only) - <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon Aurora User Guide</i></p></li>
    /// <li>
    /// <p>Amazon RDS - <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/extended-support.html">Using Amazon RDS Extended Support</a> in the <i>Amazon RDS User Guide</i></p></li>
    /// </ul>
    /// <p>Valid for Cluster Type: Aurora DB clusters and Multi-AZ DB clusters</p>
    /// <p>Valid Values: <code>open-source-rds-extended-support | open-source-rds-extended-support-disabled</code></p>
    /// <p>Default: <code>open-source-rds-extended-support</code></p>
    pub fn get_engine_lifecycle_support(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_lifecycle_support
    }
    /// Consumes the builder and constructs a [`RestoreDbClusterToPointInTimeInput`](crate::operation::restore_db_cluster_to_point_in_time::RestoreDbClusterToPointInTimeInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::restore_db_cluster_to_point_in_time::RestoreDbClusterToPointInTimeInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::restore_db_cluster_to_point_in_time::RestoreDbClusterToPointInTimeInput {
                db_cluster_identifier: self.db_cluster_identifier,
                restore_type: self.restore_type,
                source_db_cluster_identifier: self.source_db_cluster_identifier,
                restore_to_time: self.restore_to_time,
                use_latest_restorable_time: self.use_latest_restorable_time,
                port: self.port,
                db_subnet_group_name: self.db_subnet_group_name,
                option_group_name: self.option_group_name,
                vpc_security_group_ids: self.vpc_security_group_ids,
                tags: self.tags,
                kms_key_id: self.kms_key_id,
                enable_iam_database_authentication: self.enable_iam_database_authentication,
                backtrack_window: self.backtrack_window,
                enable_cloudwatch_logs_exports: self.enable_cloudwatch_logs_exports,
                db_cluster_parameter_group_name: self.db_cluster_parameter_group_name,
                deletion_protection: self.deletion_protection,
                copy_tags_to_snapshot: self.copy_tags_to_snapshot,
                domain: self.domain,
                domain_iam_role_name: self.domain_iam_role_name,
                scaling_configuration: self.scaling_configuration,
                engine_mode: self.engine_mode,
                db_cluster_instance_class: self.db_cluster_instance_class,
                storage_type: self.storage_type,
                publicly_accessible: self.publicly_accessible,
                iops: self.iops,
                serverless_v2_scaling_configuration: self.serverless_v2_scaling_configuration,
                network_type: self.network_type,
                source_db_cluster_resource_id: self.source_db_cluster_resource_id,
                rds_custom_cluster_configuration: self.rds_custom_cluster_configuration,
                engine_lifecycle_support: self.engine_lifecycle_support,
            },
        )
    }
}
