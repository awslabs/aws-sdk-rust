// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDbClusterParameterGroupInput {
    /// <p>The name of the DB cluster parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must not match the name of an existing DB cluster parameter group.</p> </li>
    /// </ul> <note>
    /// <p>This value is stored as a lowercase string.</p>
    /// </note>
    #[doc(hidden)]
    pub db_cluster_parameter_group_name: std::option::Option<std::string::String>,
    /// <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code>, <code>aurora-mysql8.0</code> </p>
    /// <p> <b>Aurora PostgreSQL</b> </p>
    /// <p>Example: <code>aurora-postgresql9.6</code> </p>
    /// <p> <b>RDS for MySQL</b> </p>
    /// <p>Example: <code>mysql8.0</code> </p>
    /// <p> <b>RDS for PostgreSQL</b> </p>
    /// <p>Example: <code>postgres12</code> </p>
    /// <p>To list all of the available parameter group families for a DB engine, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine
    /// <engine></engine></code> </p>
    /// <p>For example, to list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine aurora-postgresql</code> </p> <note>
    /// <p>The output contains duplicates.</p>
    /// </note>
    /// <p>The following are the valid DB engine values:</p>
    /// <ul>
    /// <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-postgresql</code> </p> </li>
    /// <li> <p> <code>mysql</code> </p> </li>
    /// <li> <p> <code>postgres</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub db_parameter_group_family: std::option::Option<std::string::String>,
    /// <p>The description for the DB cluster parameter group.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Tags to assign to the DB cluster parameter group.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateDbClusterParameterGroupInput {
    /// <p>The name of the DB cluster parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must not match the name of an existing DB cluster parameter group.</p> </li>
    /// </ul> <note>
    /// <p>This value is stored as a lowercase string.</p>
    /// </note>
    pub fn db_cluster_parameter_group_name(&self) -> std::option::Option<&str> {
        self.db_cluster_parameter_group_name.as_deref()
    }
    /// <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code>, <code>aurora-mysql8.0</code> </p>
    /// <p> <b>Aurora PostgreSQL</b> </p>
    /// <p>Example: <code>aurora-postgresql9.6</code> </p>
    /// <p> <b>RDS for MySQL</b> </p>
    /// <p>Example: <code>mysql8.0</code> </p>
    /// <p> <b>RDS for PostgreSQL</b> </p>
    /// <p>Example: <code>postgres12</code> </p>
    /// <p>To list all of the available parameter group families for a DB engine, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine
    /// <engine></engine></code> </p>
    /// <p>For example, to list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine aurora-postgresql</code> </p> <note>
    /// <p>The output contains duplicates.</p>
    /// </note>
    /// <p>The following are the valid DB engine values:</p>
    /// <ul>
    /// <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-postgresql</code> </p> </li>
    /// <li> <p> <code>mysql</code> </p> </li>
    /// <li> <p> <code>postgres</code> </p> </li>
    /// </ul>
    pub fn db_parameter_group_family(&self) -> std::option::Option<&str> {
        self.db_parameter_group_family.as_deref()
    }
    /// <p>The description for the DB cluster parameter group.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Tags to assign to the DB cluster parameter group.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateDbClusterParameterGroupInput {
    /// Creates a new builder-style object to manufacture [`CreateDbClusterParameterGroupInput`](crate::operation::create_db_cluster_parameter_group::CreateDbClusterParameterGroupInput).
    pub fn builder() -> crate::operation::create_db_cluster_parameter_group::builders::CreateDbClusterParameterGroupInputBuilder{
        crate::operation::create_db_cluster_parameter_group::builders::CreateDbClusterParameterGroupInputBuilder::default()
    }
}

/// A builder for [`CreateDbClusterParameterGroupInput`](crate::operation::create_db_cluster_parameter_group::CreateDbClusterParameterGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateDbClusterParameterGroupInputBuilder {
    pub(crate) db_cluster_parameter_group_name: std::option::Option<std::string::String>,
    pub(crate) db_parameter_group_family: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateDbClusterParameterGroupInputBuilder {
    /// <p>The name of the DB cluster parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must not match the name of an existing DB cluster parameter group.</p> </li>
    /// </ul> <note>
    /// <p>This value is stored as a lowercase string.</p>
    /// </note>
    pub fn db_cluster_parameter_group_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.db_cluster_parameter_group_name = Some(input.into());
        self
    }
    /// <p>The name of the DB cluster parameter group.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must not match the name of an existing DB cluster parameter group.</p> </li>
    /// </ul> <note>
    /// <p>This value is stored as a lowercase string.</p>
    /// </note>
    pub fn set_db_cluster_parameter_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_cluster_parameter_group_name = input;
        self
    }
    /// <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code>, <code>aurora-mysql8.0</code> </p>
    /// <p> <b>Aurora PostgreSQL</b> </p>
    /// <p>Example: <code>aurora-postgresql9.6</code> </p>
    /// <p> <b>RDS for MySQL</b> </p>
    /// <p>Example: <code>mysql8.0</code> </p>
    /// <p> <b>RDS for PostgreSQL</b> </p>
    /// <p>Example: <code>postgres12</code> </p>
    /// <p>To list all of the available parameter group families for a DB engine, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine
    /// <engine></engine></code> </p>
    /// <p>For example, to list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine aurora-postgresql</code> </p> <note>
    /// <p>The output contains duplicates.</p>
    /// </note>
    /// <p>The following are the valid DB engine values:</p>
    /// <ul>
    /// <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-postgresql</code> </p> </li>
    /// <li> <p> <code>mysql</code> </p> </li>
    /// <li> <p> <code>postgres</code> </p> </li>
    /// </ul>
    pub fn db_parameter_group_family(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_parameter_group_family = Some(input.into());
        self
    }
    /// <p>The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.</p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Example: <code>aurora5.6</code>, <code>aurora-mysql5.7</code>, <code>aurora-mysql8.0</code> </p>
    /// <p> <b>Aurora PostgreSQL</b> </p>
    /// <p>Example: <code>aurora-postgresql9.6</code> </p>
    /// <p> <b>RDS for MySQL</b> </p>
    /// <p>Example: <code>mysql8.0</code> </p>
    /// <p> <b>RDS for PostgreSQL</b> </p>
    /// <p>Example: <code>postgres12</code> </p>
    /// <p>To list all of the available parameter group families for a DB engine, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine
    /// <engine></engine></code> </p>
    /// <p>For example, to list all of the available parameter group families for the Aurora PostgreSQL DB engine, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily" --engine aurora-postgresql</code> </p> <note>
    /// <p>The output contains duplicates.</p>
    /// </note>
    /// <p>The following are the valid DB engine values:</p>
    /// <ul>
    /// <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-postgresql</code> </p> </li>
    /// <li> <p> <code>mysql</code> </p> </li>
    /// <li> <p> <code>postgres</code> </p> </li>
    /// </ul>
    pub fn set_db_parameter_group_family(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_parameter_group_family = input;
        self
    }
    /// <p>The description for the DB cluster parameter group.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description for the DB cluster parameter group.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to assign to the DB cluster parameter group.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>Tags to assign to the DB cluster parameter group.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateDbClusterParameterGroupInput`](crate::operation::create_db_cluster_parameter_group::CreateDbClusterParameterGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_db_cluster_parameter_group::CreateDbClusterParameterGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_db_cluster_parameter_group::CreateDbClusterParameterGroupInput {
                db_cluster_parameter_group_name: self.db_cluster_parameter_group_name
                ,
                db_parameter_group_family: self.db_parameter_group_family
                ,
                description: self.description
                ,
                tags: self.tags
                ,
            }
        )
    }
}
