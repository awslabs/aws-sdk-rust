// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_tenant_database::_delete_tenant_database_output::DeleteTenantDatabaseOutputBuilder;

pub use crate::operation::delete_tenant_database::_delete_tenant_database_input::DeleteTenantDatabaseInputBuilder;

impl crate::operation::delete_tenant_database::builders::DeleteTenantDatabaseInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::delete_tenant_database::DeleteTenantDatabaseOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_tenant_database::DeleteTenantDatabaseError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.delete_tenant_database();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DeleteTenantDatabase`.
///
/// <p>Deletes a tenant database from your DB instance. This command only applies to RDS for Oracle container database (CDB) instances.</p>
/// <p>You can't delete a tenant database when it is the only tenant in the DB instance.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DeleteTenantDatabaseFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_tenant_database::builders::DeleteTenantDatabaseInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::delete_tenant_database::DeleteTenantDatabaseOutput,
        crate::operation::delete_tenant_database::DeleteTenantDatabaseError,
    > for DeleteTenantDatabaseFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::delete_tenant_database::DeleteTenantDatabaseOutput,
            crate::operation::delete_tenant_database::DeleteTenantDatabaseError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DeleteTenantDatabaseFluentBuilder {
    /// Creates a new `DeleteTenantDatabase`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DeleteTenantDatabase as a reference.
    pub fn as_input(&self) -> &crate::operation::delete_tenant_database::builders::DeleteTenantDatabaseInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_tenant_database::DeleteTenantDatabaseOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::delete_tenant_database::DeleteTenantDatabaseError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::delete_tenant_database::DeleteTenantDatabase::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::delete_tenant_database::DeleteTenantDatabase::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::delete_tenant_database::DeleteTenantDatabaseOutput,
        crate::operation::delete_tenant_database::DeleteTenantDatabaseError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The user-supplied identifier for the DB instance that contains the tenant database that you want to delete.</p>
    pub fn db_instance_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_instance_identifier(input.into());
        self
    }
    /// <p>The user-supplied identifier for the DB instance that contains the tenant database that you want to delete.</p>
    pub fn set_db_instance_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_instance_identifier(input);
        self
    }
    /// <p>The user-supplied identifier for the DB instance that contains the tenant database that you want to delete.</p>
    pub fn get_db_instance_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_instance_identifier()
    }
    /// <p>The user-supplied name of the tenant database that you want to remove from your DB instance. Amazon RDS deletes the tenant database with this name. This parameter isn’t case-sensitive.</p>
    pub fn tenant_db_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tenant_db_name(input.into());
        self
    }
    /// <p>The user-supplied name of the tenant database that you want to remove from your DB instance. Amazon RDS deletes the tenant database with this name. This parameter isn’t case-sensitive.</p>
    pub fn set_tenant_db_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_tenant_db_name(input);
        self
    }
    /// <p>The user-supplied name of the tenant database that you want to remove from your DB instance. Amazon RDS deletes the tenant database with this name. This parameter isn’t case-sensitive.</p>
    pub fn get_tenant_db_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_tenant_db_name()
    }
    /// <p>Specifies whether to skip the creation of a final DB snapshot before removing the tenant database from your DB instance. If you enable this parameter, RDS doesn't create a DB snapshot. If you don't enable this parameter, RDS creates a DB snapshot before it deletes the tenant database. By default, RDS doesn't skip the final snapshot. If you don't enable this parameter, you must specify the <code>FinalDBSnapshotIdentifier</code> parameter.</p>
    pub fn skip_final_snapshot(mut self, input: bool) -> Self {
        self.inner = self.inner.skip_final_snapshot(input);
        self
    }
    /// <p>Specifies whether to skip the creation of a final DB snapshot before removing the tenant database from your DB instance. If you enable this parameter, RDS doesn't create a DB snapshot. If you don't enable this parameter, RDS creates a DB snapshot before it deletes the tenant database. By default, RDS doesn't skip the final snapshot. If you don't enable this parameter, you must specify the <code>FinalDBSnapshotIdentifier</code> parameter.</p>
    pub fn set_skip_final_snapshot(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_skip_final_snapshot(input);
        self
    }
    /// <p>Specifies whether to skip the creation of a final DB snapshot before removing the tenant database from your DB instance. If you enable this parameter, RDS doesn't create a DB snapshot. If you don't enable this parameter, RDS creates a DB snapshot before it deletes the tenant database. By default, RDS doesn't skip the final snapshot. If you don't enable this parameter, you must specify the <code>FinalDBSnapshotIdentifier</code> parameter.</p>
    pub fn get_skip_final_snapshot(&self) -> &::std::option::Option<bool> {
        self.inner.get_skip_final_snapshot()
    }
    /// <p>The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled.</p><note>
    /// <p>If you enable this parameter and also enable <code>SkipFinalShapshot</code>, the command results in an error.</p>
    /// </note>
    pub fn final_db_snapshot_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.final_db_snapshot_identifier(input.into());
        self
    }
    /// <p>The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled.</p><note>
    /// <p>If you enable this parameter and also enable <code>SkipFinalShapshot</code>, the command results in an error.</p>
    /// </note>
    pub fn set_final_db_snapshot_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_final_db_snapshot_identifier(input);
        self
    }
    /// <p>The <code>DBSnapshotIdentifier</code> of the new <code>DBSnapshot</code> created when the <code>SkipFinalSnapshot</code> parameter is disabled.</p><note>
    /// <p>If you enable this parameter and also enable <code>SkipFinalShapshot</code>, the command results in an error.</p>
    /// </note>
    pub fn get_final_db_snapshot_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_final_db_snapshot_identifier()
    }
}
