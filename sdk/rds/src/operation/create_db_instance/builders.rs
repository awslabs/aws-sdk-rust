// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_db_instance::_create_db_instance_output::CreateDbInstanceOutputBuilder;

pub use crate::operation::create_db_instance::_create_db_instance_input::CreateDbInstanceInputBuilder;

impl CreateDbInstanceInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_db_instance::CreateDbInstanceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_db_instance::CreateDBInstanceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_db_instance();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateDBInstance`.
///
/// <p>Creates a new DB instance.</p>
/// <p>The new DB instance can be an RDS DB instance, or it can be a DB instance in an Aurora DB cluster. For an Aurora DB cluster, you can call this operation multiple times to add more than one DB instance to the cluster.</p>
/// <p>For more information about creating an RDS DB instance, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_CreateDBInstance.html"> Creating an Amazon RDS DB instance</a> in the <i>Amazon RDS User Guide</i>.</p>
/// <p>For more information about creating a DB instance in an Aurora DB cluster, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.CreateInstance.html"> Creating an Amazon Aurora DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateDBInstanceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_db_instance::builders::CreateDbInstanceInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_db_instance::CreateDbInstanceOutput,
        crate::operation::create_db_instance::CreateDBInstanceError,
    > for CreateDBInstanceFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_db_instance::CreateDbInstanceOutput,
            crate::operation::create_db_instance::CreateDBInstanceError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateDBInstanceFluentBuilder {
    /// Creates a new `CreateDBInstance`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateDBInstance as a reference.
    pub fn as_input(&self) -> &crate::operation::create_db_instance::builders::CreateDbInstanceInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_db_instance::CreateDbInstanceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_db_instance::CreateDBInstanceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_db_instance::CreateDBInstance::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_db_instance::CreateDBInstance::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_db_instance::CreateDbInstanceOutput,
        crate::operation::create_db_instance::CreateDBInstanceError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The meaning of this parameter differs according to the database engine you use.</p>
    /// <dl>
    /// <dt>
    /// Amazon Aurora MySQL
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the primary DB instance of the Aurora MySQL DB cluster is created. If this parameter isn't specified for an Aurora MySQL DB cluster, no database is created in the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 64 alphanumeric characters.</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// Amazon Aurora PostgreSQL
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the primary DB instance of the Aurora PostgreSQL DB cluster is created. If this parameter isn't specified for an Aurora PostgreSQL DB cluster, a database named <code>postgres</code> is created in the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>It must contain 1 to 63 alphanumeric characters.</p></li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0 to 9).</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// Amazon RDS Custom for Oracle
    /// </dt>
    /// <dd>
    /// <p>The Oracle System ID (SID) of the created RDS Custom DB instance. If you don't specify a value, the default value is <code>ORCL</code> for non-CDBs and <code>RDSCDB</code> for CDBs.</p>
    /// <p>Default: <code>ORCL</code></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 8 alphanumeric characters.</p></li>
    /// <li>
    /// <p>Must contain a letter.</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// Amazon RDS Custom for SQL Server
    /// </dt>
    /// <dd>
    /// <p>Not applicable. Must be null.</p>
    /// </dd>
    /// <dt>
    /// RDS for Db2
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance. In some cases, we recommend that you don't add a database name. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/db2-db-instance-prereqs.html#db2-prereqs-additional-considerations">Additional considerations</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 64 letters or numbers.</p></li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the specified database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for MariaDB
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 64 letters or numbers.</p></li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the specified database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for MySQL
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 64 letters or numbers.</p></li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the specified database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for Oracle
    /// </dt>
    /// <dd>
    /// <p>The Oracle System ID (SID) of the created DB instance. If you don't specify a value, the default value is <code>ORCL</code>. You can't specify the string <code>null</code>, or any other reserved word, for <code>DBName</code>.</p>
    /// <p>Default: <code>ORCL</code></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 8 characters.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for PostgreSQL
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, a database named <code>postgres</code> is created in the DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 63 letters, numbers, or underscores.</p></li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the specified database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for SQL Server
    /// </dt>
    /// <dd>
    /// <p>Not applicable. Must be null.</p>
    /// </dd>
    /// </dl>
    pub fn db_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_name(input.into());
        self
    }
    /// <p>The meaning of this parameter differs according to the database engine you use.</p>
    /// <dl>
    /// <dt>
    /// Amazon Aurora MySQL
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the primary DB instance of the Aurora MySQL DB cluster is created. If this parameter isn't specified for an Aurora MySQL DB cluster, no database is created in the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 64 alphanumeric characters.</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// Amazon Aurora PostgreSQL
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the primary DB instance of the Aurora PostgreSQL DB cluster is created. If this parameter isn't specified for an Aurora PostgreSQL DB cluster, a database named <code>postgres</code> is created in the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>It must contain 1 to 63 alphanumeric characters.</p></li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0 to 9).</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// Amazon RDS Custom for Oracle
    /// </dt>
    /// <dd>
    /// <p>The Oracle System ID (SID) of the created RDS Custom DB instance. If you don't specify a value, the default value is <code>ORCL</code> for non-CDBs and <code>RDSCDB</code> for CDBs.</p>
    /// <p>Default: <code>ORCL</code></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 8 alphanumeric characters.</p></li>
    /// <li>
    /// <p>Must contain a letter.</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// Amazon RDS Custom for SQL Server
    /// </dt>
    /// <dd>
    /// <p>Not applicable. Must be null.</p>
    /// </dd>
    /// <dt>
    /// RDS for Db2
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance. In some cases, we recommend that you don't add a database name. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/db2-db-instance-prereqs.html#db2-prereqs-additional-considerations">Additional considerations</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 64 letters or numbers.</p></li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the specified database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for MariaDB
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 64 letters or numbers.</p></li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the specified database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for MySQL
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 64 letters or numbers.</p></li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the specified database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for Oracle
    /// </dt>
    /// <dd>
    /// <p>The Oracle System ID (SID) of the created DB instance. If you don't specify a value, the default value is <code>ORCL</code>. You can't specify the string <code>null</code>, or any other reserved word, for <code>DBName</code>.</p>
    /// <p>Default: <code>ORCL</code></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 8 characters.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for PostgreSQL
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, a database named <code>postgres</code> is created in the DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 63 letters, numbers, or underscores.</p></li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the specified database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for SQL Server
    /// </dt>
    /// <dd>
    /// <p>Not applicable. Must be null.</p>
    /// </dd>
    /// </dl>
    pub fn set_db_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_name(input);
        self
    }
    /// <p>The meaning of this parameter differs according to the database engine you use.</p>
    /// <dl>
    /// <dt>
    /// Amazon Aurora MySQL
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the primary DB instance of the Aurora MySQL DB cluster is created. If this parameter isn't specified for an Aurora MySQL DB cluster, no database is created in the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 64 alphanumeric characters.</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// Amazon Aurora PostgreSQL
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the primary DB instance of the Aurora PostgreSQL DB cluster is created. If this parameter isn't specified for an Aurora PostgreSQL DB cluster, a database named <code>postgres</code> is created in the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>It must contain 1 to 63 alphanumeric characters.</p></li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0 to 9).</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// Amazon RDS Custom for Oracle
    /// </dt>
    /// <dd>
    /// <p>The Oracle System ID (SID) of the created RDS Custom DB instance. If you don't specify a value, the default value is <code>ORCL</code> for non-CDBs and <code>RDSCDB</code> for CDBs.</p>
    /// <p>Default: <code>ORCL</code></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 8 alphanumeric characters.</p></li>
    /// <li>
    /// <p>Must contain a letter.</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// Amazon RDS Custom for SQL Server
    /// </dt>
    /// <dd>
    /// <p>Not applicable. Must be null.</p>
    /// </dd>
    /// <dt>
    /// RDS for Db2
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance. In some cases, we recommend that you don't add a database name. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/db2-db-instance-prereqs.html#db2-prereqs-additional-considerations">Additional considerations</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 64 letters or numbers.</p></li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the specified database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for MariaDB
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 64 letters or numbers.</p></li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the specified database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for MySQL
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, no database is created in the DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 64 letters or numbers.</p></li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the specified database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for Oracle
    /// </dt>
    /// <dd>
    /// <p>The Oracle System ID (SID) of the created DB instance. If you don't specify a value, the default value is <code>ORCL</code>. You can't specify the string <code>null</code>, or any other reserved word, for <code>DBName</code>.</p>
    /// <p>Default: <code>ORCL</code></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 8 characters.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for PostgreSQL
    /// </dt>
    /// <dd>
    /// <p>The name of the database to create when the DB instance is created. If this parameter isn't specified, a database named <code>postgres</code> is created in the DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain 1 to 63 letters, numbers, or underscores.</p></li>
    /// <li>
    /// <p>Must begin with a letter. Subsequent characters can be letters, underscores, or digits (0-9).</p></li>
    /// <li>
    /// <p>Can't be a word reserved by the specified database engine.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for SQL Server
    /// </dt>
    /// <dd>
    /// <p>Not applicable. Must be null.</p>
    /// </dd>
    /// </dl>
    pub fn get_db_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_name()
    }
    /// <p>The identifier for this DB instance. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Example: <code>mydbinstance</code></p>
    pub fn db_instance_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_instance_identifier(input.into());
        self
    }
    /// <p>The identifier for this DB instance. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Example: <code>mydbinstance</code></p>
    pub fn set_db_instance_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_instance_identifier(input);
        self
    }
    /// <p>The identifier for this DB instance. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Example: <code>mydbinstance</code></p>
    pub fn get_db_instance_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_instance_identifier()
    }
    /// <p>The amount of storage in gibibytes (GiB) to allocate for the DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p>
    /// <dl>
    /// <dt>
    /// Amazon RDS Custom
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3): Must be an integer from 40 to 65536 for RDS Custom for Oracle, 16384 for RDS Custom for SQL Server.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 40 to 65536 for RDS Custom for Oracle, 16384 for RDS Custom for SQL Server.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for Db2
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp3): Must be an integer from 20 to 65536.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for MariaDB
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to 65536.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.</p></li>
    /// <li>
    /// <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for MySQL
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to 65536.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.</p></li>
    /// <li>
    /// <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for Oracle
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to 65536.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.</p></li>
    /// <li>
    /// <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for PostgreSQL
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to 65536.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.</p></li>
    /// <li>
    /// <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for SQL Server
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3):</p>
    /// <ul>
    /// <li>
    /// <p>Enterprise and Standard editions: Must be an integer from 20 to 16384.</p></li>
    /// <li>
    /// <p>Web and Express editions: Must be an integer from 20 to 16384.</p></li>
    /// </ul></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2):</p>
    /// <ul>
    /// <li>
    /// <p>Enterprise and Standard editions: Must be an integer from 100 to 16384.</p></li>
    /// <li>
    /// <p>Web and Express editions: Must be an integer from 100 to 16384.</p></li>
    /// </ul></li>
    /// <li>
    /// <p>Magnetic storage (standard):</p>
    /// <ul>
    /// <li>
    /// <p>Enterprise and Standard editions: Must be an integer from 20 to 1024.</p></li>
    /// <li>
    /// <p>Web and Express editions: Must be an integer from 20 to 1024.</p></li>
    /// </ul></li>
    /// </ul>
    /// </dd>
    /// </dl>
    pub fn allocated_storage(mut self, input: i32) -> Self {
        self.inner = self.inner.allocated_storage(input);
        self
    }
    /// <p>The amount of storage in gibibytes (GiB) to allocate for the DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p>
    /// <dl>
    /// <dt>
    /// Amazon RDS Custom
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3): Must be an integer from 40 to 65536 for RDS Custom for Oracle, 16384 for RDS Custom for SQL Server.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 40 to 65536 for RDS Custom for Oracle, 16384 for RDS Custom for SQL Server.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for Db2
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp3): Must be an integer from 20 to 65536.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for MariaDB
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to 65536.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.</p></li>
    /// <li>
    /// <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for MySQL
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to 65536.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.</p></li>
    /// <li>
    /// <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for Oracle
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to 65536.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.</p></li>
    /// <li>
    /// <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for PostgreSQL
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to 65536.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.</p></li>
    /// <li>
    /// <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for SQL Server
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3):</p>
    /// <ul>
    /// <li>
    /// <p>Enterprise and Standard editions: Must be an integer from 20 to 16384.</p></li>
    /// <li>
    /// <p>Web and Express editions: Must be an integer from 20 to 16384.</p></li>
    /// </ul></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2):</p>
    /// <ul>
    /// <li>
    /// <p>Enterprise and Standard editions: Must be an integer from 100 to 16384.</p></li>
    /// <li>
    /// <p>Web and Express editions: Must be an integer from 100 to 16384.</p></li>
    /// </ul></li>
    /// <li>
    /// <p>Magnetic storage (standard):</p>
    /// <ul>
    /// <li>
    /// <p>Enterprise and Standard editions: Must be an integer from 20 to 1024.</p></li>
    /// <li>
    /// <p>Web and Express editions: Must be an integer from 20 to 1024.</p></li>
    /// </ul></li>
    /// </ul>
    /// </dd>
    /// </dl>
    pub fn set_allocated_storage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_allocated_storage(input);
        self
    }
    /// <p>The amount of storage in gibibytes (GiB) to allocate for the DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.</p>
    /// <dl>
    /// <dt>
    /// Amazon RDS Custom
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3): Must be an integer from 40 to 65536 for RDS Custom for Oracle, 16384 for RDS Custom for SQL Server.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 40 to 65536 for RDS Custom for Oracle, 16384 for RDS Custom for SQL Server.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for Db2
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp3): Must be an integer from 20 to 65536.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for MariaDB
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to 65536.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.</p></li>
    /// <li>
    /// <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for MySQL
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to 65536.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.</p></li>
    /// <li>
    /// <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for Oracle
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to 65536.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.</p></li>
    /// <li>
    /// <p>Magnetic storage (standard): Must be an integer from 10 to 3072.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for PostgreSQL
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3): Must be an integer from 20 to 65536.</p></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2): Must be an integer from 100 to 65536.</p></li>
    /// <li>
    /// <p>Magnetic storage (standard): Must be an integer from 5 to 3072.</p></li>
    /// </ul>
    /// </dd>
    /// <dt>
    /// RDS for SQL Server
    /// </dt>
    /// <dd>
    /// <p>Constraints to the amount of storage for each storage type are the following:</p>
    /// <ul>
    /// <li>
    /// <p>General Purpose (SSD) storage (gp2, gp3):</p>
    /// <ul>
    /// <li>
    /// <p>Enterprise and Standard editions: Must be an integer from 20 to 16384.</p></li>
    /// <li>
    /// <p>Web and Express editions: Must be an integer from 20 to 16384.</p></li>
    /// </ul></li>
    /// <li>
    /// <p>Provisioned IOPS storage (io1, io2):</p>
    /// <ul>
    /// <li>
    /// <p>Enterprise and Standard editions: Must be an integer from 100 to 16384.</p></li>
    /// <li>
    /// <p>Web and Express editions: Must be an integer from 100 to 16384.</p></li>
    /// </ul></li>
    /// <li>
    /// <p>Magnetic storage (standard):</p>
    /// <ul>
    /// <li>
    /// <p>Enterprise and Standard editions: Must be an integer from 20 to 1024.</p></li>
    /// <li>
    /// <p>Web and Express editions: Must be an integer from 20 to 1024.</p></li>
    /// </ul></li>
    /// </ul>
    /// </dd>
    /// </dl>
    pub fn get_allocated_storage(&self) -> &::std::option::Option<i32> {
        self.inner.get_allocated_storage()
    }
    /// <p>The compute and memory capacity of the DB instance, for example <code>db.m5.large</code>. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB instance classes</a> in the <i>Amazon RDS User Guide</i> or <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.DBInstanceClass.html">Aurora DB instance classes</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn db_instance_class(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_instance_class(input.into());
        self
    }
    /// <p>The compute and memory capacity of the DB instance, for example <code>db.m5.large</code>. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB instance classes</a> in the <i>Amazon RDS User Guide</i> or <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.DBInstanceClass.html">Aurora DB instance classes</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_db_instance_class(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_instance_class(input);
        self
    }
    /// <p>The compute and memory capacity of the DB instance, for example <code>db.m5.large</code>. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB instance classes</a> in the <i>Amazon RDS User Guide</i> or <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.DBInstanceClass.html">Aurora DB instance classes</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn get_db_instance_class(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_instance_class()
    }
    /// <p>The database engine to use for this DB instance.</p>
    /// <p>Not every database engine is available in every Amazon Web Services Region.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>aurora-mysql</code> (for Aurora MySQL DB instances)</p></li>
    /// <li>
    /// <p><code>aurora-postgresql</code> (for Aurora PostgreSQL DB instances)</p></li>
    /// <li>
    /// <p><code>custom-oracle-ee</code> (for RDS Custom for Oracle DB instances)</p></li>
    /// <li>
    /// <p><code>custom-oracle-ee-cdb</code> (for RDS Custom for Oracle DB instances)</p></li>
    /// <li>
    /// <p><code>custom-sqlserver-ee</code> (for RDS Custom for SQL Server DB instances)</p></li>
    /// <li>
    /// <p><code>custom-sqlserver-se</code> (for RDS Custom for SQL Server DB instances)</p></li>
    /// <li>
    /// <p><code>custom-sqlserver-web</code> (for RDS Custom for SQL Server DB instances)</p></li>
    /// <li>
    /// <p><code>db2-ae</code></p></li>
    /// <li>
    /// <p><code>db2-se</code></p></li>
    /// <li>
    /// <p><code>mariadb</code></p></li>
    /// <li>
    /// <p><code>mysql</code></p></li>
    /// <li>
    /// <p><code>oracle-ee</code></p></li>
    /// <li>
    /// <p><code>oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>oracle-se2</code></p></li>
    /// <li>
    /// <p><code>oracle-se2-cdb</code></p></li>
    /// <li>
    /// <p><code>postgres</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ex</code></p></li>
    /// <li>
    /// <p><code>sqlserver-web</code></p></li>
    /// </ul>
    pub fn engine(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.engine(input.into());
        self
    }
    /// <p>The database engine to use for this DB instance.</p>
    /// <p>Not every database engine is available in every Amazon Web Services Region.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>aurora-mysql</code> (for Aurora MySQL DB instances)</p></li>
    /// <li>
    /// <p><code>aurora-postgresql</code> (for Aurora PostgreSQL DB instances)</p></li>
    /// <li>
    /// <p><code>custom-oracle-ee</code> (for RDS Custom for Oracle DB instances)</p></li>
    /// <li>
    /// <p><code>custom-oracle-ee-cdb</code> (for RDS Custom for Oracle DB instances)</p></li>
    /// <li>
    /// <p><code>custom-sqlserver-ee</code> (for RDS Custom for SQL Server DB instances)</p></li>
    /// <li>
    /// <p><code>custom-sqlserver-se</code> (for RDS Custom for SQL Server DB instances)</p></li>
    /// <li>
    /// <p><code>custom-sqlserver-web</code> (for RDS Custom for SQL Server DB instances)</p></li>
    /// <li>
    /// <p><code>db2-ae</code></p></li>
    /// <li>
    /// <p><code>db2-se</code></p></li>
    /// <li>
    /// <p><code>mariadb</code></p></li>
    /// <li>
    /// <p><code>mysql</code></p></li>
    /// <li>
    /// <p><code>oracle-ee</code></p></li>
    /// <li>
    /// <p><code>oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>oracle-se2</code></p></li>
    /// <li>
    /// <p><code>oracle-se2-cdb</code></p></li>
    /// <li>
    /// <p><code>postgres</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ex</code></p></li>
    /// <li>
    /// <p><code>sqlserver-web</code></p></li>
    /// </ul>
    pub fn set_engine(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_engine(input);
        self
    }
    /// <p>The database engine to use for this DB instance.</p>
    /// <p>Not every database engine is available in every Amazon Web Services Region.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>aurora-mysql</code> (for Aurora MySQL DB instances)</p></li>
    /// <li>
    /// <p><code>aurora-postgresql</code> (for Aurora PostgreSQL DB instances)</p></li>
    /// <li>
    /// <p><code>custom-oracle-ee</code> (for RDS Custom for Oracle DB instances)</p></li>
    /// <li>
    /// <p><code>custom-oracle-ee-cdb</code> (for RDS Custom for Oracle DB instances)</p></li>
    /// <li>
    /// <p><code>custom-sqlserver-ee</code> (for RDS Custom for SQL Server DB instances)</p></li>
    /// <li>
    /// <p><code>custom-sqlserver-se</code> (for RDS Custom for SQL Server DB instances)</p></li>
    /// <li>
    /// <p><code>custom-sqlserver-web</code> (for RDS Custom for SQL Server DB instances)</p></li>
    /// <li>
    /// <p><code>db2-ae</code></p></li>
    /// <li>
    /// <p><code>db2-se</code></p></li>
    /// <li>
    /// <p><code>mariadb</code></p></li>
    /// <li>
    /// <p><code>mysql</code></p></li>
    /// <li>
    /// <p><code>oracle-ee</code></p></li>
    /// <li>
    /// <p><code>oracle-ee-cdb</code></p></li>
    /// <li>
    /// <p><code>oracle-se2</code></p></li>
    /// <li>
    /// <p><code>oracle-se2-cdb</code></p></li>
    /// <li>
    /// <p><code>postgres</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ee</code></p></li>
    /// <li>
    /// <p><code>sqlserver-se</code></p></li>
    /// <li>
    /// <p><code>sqlserver-ex</code></p></li>
    /// <li>
    /// <p><code>sqlserver-web</code></p></li>
    /// </ul>
    pub fn get_engine(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_engine()
    }
    /// <p>The name for the master user.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The name for the master user is managed by the DB cluster.</p>
    /// <p>This setting is required for RDS DB instances.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 16 letters, numbers, or underscores.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't be a reserved word for the chosen database engine.</p></li>
    /// </ul>
    pub fn master_username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.master_username(input.into());
        self
    }
    /// <p>The name for the master user.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The name for the master user is managed by the DB cluster.</p>
    /// <p>This setting is required for RDS DB instances.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 16 letters, numbers, or underscores.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't be a reserved word for the chosen database engine.</p></li>
    /// </ul>
    pub fn set_master_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_master_username(input);
        self
    }
    /// <p>The name for the master user.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The name for the master user is managed by the DB cluster.</p>
    /// <p>This setting is required for RDS DB instances.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 16 letters, numbers, or underscores.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't be a reserved word for the chosen database engine.</p></li>
    /// </ul>
    pub fn get_master_username(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_master_username()
    }
    /// <p>The password for the master user.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The password for the master user is managed by the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be specified if <code>ManageMasterUserPassword</code> is turned on.</p></li>
    /// <li>
    /// <p>Can include any printable ASCII character except "/", """, or "@". For RDS for Oracle, can't include the "&amp;" (ampersand) or the "'" (single quotes) character.</p></li>
    /// </ul>
    /// <p>Length Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>RDS for Db2 - Must contain from 8 to 255 characters.</p></li>
    /// <li>
    /// <p>RDS for MariaDB - Must contain from 8 to 41 characters.</p></li>
    /// <li>
    /// <p>RDS for Microsoft SQL Server - Must contain from 8 to 128 characters.</p></li>
    /// <li>
    /// <p>RDS for MySQL - Must contain from 8 to 41 characters.</p></li>
    /// <li>
    /// <p>RDS for Oracle - Must contain from 8 to 30 characters.</p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - Must contain from 8 to 128 characters.</p></li>
    /// </ul>
    pub fn master_user_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.master_user_password(input.into());
        self
    }
    /// <p>The password for the master user.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The password for the master user is managed by the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be specified if <code>ManageMasterUserPassword</code> is turned on.</p></li>
    /// <li>
    /// <p>Can include any printable ASCII character except "/", """, or "@". For RDS for Oracle, can't include the "&amp;" (ampersand) or the "'" (single quotes) character.</p></li>
    /// </ul>
    /// <p>Length Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>RDS for Db2 - Must contain from 8 to 255 characters.</p></li>
    /// <li>
    /// <p>RDS for MariaDB - Must contain from 8 to 41 characters.</p></li>
    /// <li>
    /// <p>RDS for Microsoft SQL Server - Must contain from 8 to 128 characters.</p></li>
    /// <li>
    /// <p>RDS for MySQL - Must contain from 8 to 41 characters.</p></li>
    /// <li>
    /// <p>RDS for Oracle - Must contain from 8 to 30 characters.</p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - Must contain from 8 to 128 characters.</p></li>
    /// </ul>
    pub fn set_master_user_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_master_user_password(input);
        self
    }
    /// <p>The password for the master user.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The password for the master user is managed by the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be specified if <code>ManageMasterUserPassword</code> is turned on.</p></li>
    /// <li>
    /// <p>Can include any printable ASCII character except "/", """, or "@". For RDS for Oracle, can't include the "&amp;" (ampersand) or the "'" (single quotes) character.</p></li>
    /// </ul>
    /// <p>Length Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>RDS for Db2 - Must contain from 8 to 255 characters.</p></li>
    /// <li>
    /// <p>RDS for MariaDB - Must contain from 8 to 41 characters.</p></li>
    /// <li>
    /// <p>RDS for Microsoft SQL Server - Must contain from 8 to 128 characters.</p></li>
    /// <li>
    /// <p>RDS for MySQL - Must contain from 8 to 41 characters.</p></li>
    /// <li>
    /// <p>RDS for Oracle - Must contain from 8 to 30 characters.</p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - Must contain from 8 to 128 characters.</p></li>
    /// </ul>
    pub fn get_master_user_password(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_master_user_password()
    }
    /// Appends an item to `DBSecurityGroups`.
    ///
    /// To override the contents of this collection use [`set_db_security_groups`](Self::set_db_security_groups).
    ///
    /// <p>A list of DB security groups to associate with this DB instance.</p>
    /// <p>This setting applies to the legacy EC2-Classic platform, which is no longer used to create new DB instances. Use the <code>VpcSecurityGroupIds</code> setting instead.</p>
    pub fn db_security_groups(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_security_groups(input.into());
        self
    }
    /// <p>A list of DB security groups to associate with this DB instance.</p>
    /// <p>This setting applies to the legacy EC2-Classic platform, which is no longer used to create new DB instances. Use the <code>VpcSecurityGroupIds</code> setting instead.</p>
    pub fn set_db_security_groups(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_db_security_groups(input);
        self
    }
    /// <p>A list of DB security groups to associate with this DB instance.</p>
    /// <p>This setting applies to the legacy EC2-Classic platform, which is no longer used to create new DB instances. Use the <code>VpcSecurityGroupIds</code> setting instead.</p>
    pub fn get_db_security_groups(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_db_security_groups()
    }
    /// Appends an item to `VpcSecurityGroupIds`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_group_ids`](Self::set_vpc_security_group_ids).
    ///
    /// <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The associated list of EC2 VPC security groups is managed by the DB cluster.</p>
    /// <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
    pub fn vpc_security_group_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.vpc_security_group_ids(input.into());
        self
    }
    /// <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The associated list of EC2 VPC security groups is managed by the DB cluster.</p>
    /// <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
    pub fn set_vpc_security_group_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_vpc_security_group_ids(input);
        self
    }
    /// <p>A list of Amazon EC2 VPC security groups to associate with this DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The associated list of EC2 VPC security groups is managed by the DB cluster.</p>
    /// <p>Default: The default EC2 VPC security group for the DB subnet group's VPC.</p>
    pub fn get_vpc_security_group_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_vpc_security_group_ids()
    }
    /// <p>The Availability Zone (AZ) where the database will be created. For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>.</p>
    /// <p>For Amazon Aurora, each Aurora DB cluster hosts copies of its storage in three separate Availability Zones. Specify one of these Availability Zones. Aurora automatically chooses an appropriate Availability Zone if you don't specify one.</p>
    /// <p>Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment.</p></li>
    /// <li>
    /// <p>The specified Availability Zone must be in the same Amazon Web Services Region as the current endpoint.</p></li>
    /// </ul>
    /// <p>Example: <code>us-east-1d</code></p>
    pub fn availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.availability_zone(input.into());
        self
    }
    /// <p>The Availability Zone (AZ) where the database will be created. For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>.</p>
    /// <p>For Amazon Aurora, each Aurora DB cluster hosts copies of its storage in three separate Availability Zones. Specify one of these Availability Zones. Aurora automatically chooses an appropriate Availability Zone if you don't specify one.</p>
    /// <p>Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment.</p></li>
    /// <li>
    /// <p>The specified Availability Zone must be in the same Amazon Web Services Region as the current endpoint.</p></li>
    /// </ul>
    /// <p>Example: <code>us-east-1d</code></p>
    pub fn set_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_availability_zone(input);
        self
    }
    /// <p>The Availability Zone (AZ) where the database will be created. For information on Amazon Web Services Regions and Availability Zones, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.RegionsAndAvailabilityZones.html">Regions and Availability Zones</a>.</p>
    /// <p>For Amazon Aurora, each Aurora DB cluster hosts copies of its storage in three separate Availability Zones. Specify one of these Availability Zones. Aurora automatically chooses an appropriate Availability Zone if you don't specify one.</p>
    /// <p>Default: A random, system-chosen Availability Zone in the endpoint's Amazon Web Services Region.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>The <code>AvailabilityZone</code> parameter can't be specified if the DB instance is a Multi-AZ deployment.</p></li>
    /// <li>
    /// <p>The specified Availability Zone must be in the same Amazon Web Services Region as the current endpoint.</p></li>
    /// </ul>
    /// <p>Example: <code>us-east-1d</code></p>
    pub fn get_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_availability_zone()
    }
    /// <p>A DB subnet group to associate with this DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the name of an existing DB subnet group.</p></li>
    /// <li>
    /// <p>Must not be <code>default</code>.</p></li>
    /// </ul>
    /// <p>Example: <code>mydbsubnetgroup</code></p>
    pub fn db_subnet_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_subnet_group_name(input.into());
        self
    }
    /// <p>A DB subnet group to associate with this DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the name of an existing DB subnet group.</p></li>
    /// <li>
    /// <p>Must not be <code>default</code>.</p></li>
    /// </ul>
    /// <p>Example: <code>mydbsubnetgroup</code></p>
    pub fn set_db_subnet_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_subnet_group_name(input);
        self
    }
    /// <p>A DB subnet group to associate with this DB instance.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must match the name of an existing DB subnet group.</p></li>
    /// <li>
    /// <p>Must not be <code>default</code>.</p></li>
    /// </ul>
    /// <p>Example: <code>mydbsubnetgroup</code></p>
    pub fn get_db_subnet_group_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_subnet_group_name()
    }
    /// <p>The time range each week during which system maintenance can occur. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p></li>
    /// <li>
    /// <p>The day values must be <code>mon | tue | wed | thu | fri | sat | sun</code>.</p></li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p></li>
    /// <li>
    /// <p>Must not conflict with the preferred backup window.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// </ul>
    pub fn preferred_maintenance_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.preferred_maintenance_window(input.into());
        self
    }
    /// <p>The time range each week during which system maintenance can occur. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p></li>
    /// <li>
    /// <p>The day values must be <code>mon | tue | wed | thu | fri | sat | sun</code>.</p></li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p></li>
    /// <li>
    /// <p>Must not conflict with the preferred backup window.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// </ul>
    pub fn set_preferred_maintenance_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_preferred_maintenance_window(input);
        self
    }
    /// <p>The time range each week during which system maintenance can occur. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_UpgradeDBInstance.Maintenance.html#Concepts.DBMaintenance">Amazon RDS Maintenance Window</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region, occurring on a random day of the week.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>ddd:hh24:mi-ddd:hh24:mi</code>.</p></li>
    /// <li>
    /// <p>The day values must be <code>mon | tue | wed | thu | fri | sat | sun</code>.</p></li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p></li>
    /// <li>
    /// <p>Must not conflict with the preferred backup window.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// </ul>
    pub fn get_preferred_maintenance_window(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_preferred_maintenance_window()
    }
    /// <p>The name of the DB parameter group to associate with this DB instance. If you don't specify a value, then Amazon RDS uses the default DB parameter group for the specified DB engine and version.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>The first character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    pub fn db_parameter_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_parameter_group_name(input.into());
        self
    }
    /// <p>The name of the DB parameter group to associate with this DB instance. If you don't specify a value, then Amazon RDS uses the default DB parameter group for the specified DB engine and version.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>The first character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    pub fn set_db_parameter_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_parameter_group_name(input);
        self
    }
    /// <p>The name of the DB parameter group to associate with this DB instance. If you don't specify a value, then Amazon RDS uses the default DB parameter group for the specified DB engine and version.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be 1 to 255 letters, numbers, or hyphens.</p></li>
    /// <li>
    /// <p>The first character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    pub fn get_db_parameter_group_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_parameter_group_name()
    }
    /// <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to <code>0</code> disables automated backups.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The retention period for automated backups is managed by the DB cluster.</p>
    /// <p>Default: <code>1</code></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a value from 0 to 35.</p></li>
    /// <li>
    /// <p>Can't be set to 0 if the DB instance is a source to read replicas.</p></li>
    /// <li>
    /// <p>Can't be set to 0 for an RDS Custom for Oracle DB instance.</p></li>
    /// </ul>
    pub fn backup_retention_period(mut self, input: i32) -> Self {
        self.inner = self.inner.backup_retention_period(input);
        self
    }
    /// <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to <code>0</code> disables automated backups.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The retention period for automated backups is managed by the DB cluster.</p>
    /// <p>Default: <code>1</code></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a value from 0 to 35.</p></li>
    /// <li>
    /// <p>Can't be set to 0 if the DB instance is a source to read replicas.</p></li>
    /// <li>
    /// <p>Can't be set to 0 for an RDS Custom for Oracle DB instance.</p></li>
    /// </ul>
    pub fn set_backup_retention_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_backup_retention_period(input);
        self
    }
    /// <p>The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to <code>0</code> disables automated backups.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The retention period for automated backups is managed by the DB cluster.</p>
    /// <p>Default: <code>1</code></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be a value from 0 to 35.</p></li>
    /// <li>
    /// <p>Can't be set to 0 if the DB instance is a source to read replicas.</p></li>
    /// <li>
    /// <p>Can't be set to 0 for an RDS Custom for Oracle DB instance.</p></li>
    /// </ul>
    pub fn get_backup_retention_period(&self) -> &::std::option::Option<i32> {
        self.inner.get_backup_retention_period()
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup window</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The daily time range for creating automated backups is managed by the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p></li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p></li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// </ul>
    pub fn preferred_backup_window(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.preferred_backup_window(input.into());
        self
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup window</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The daily time range for creating automated backups is managed by the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p></li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p></li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// </ul>
    pub fn set_preferred_backup_window(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_preferred_backup_window(input);
        self
    }
    /// <p>The daily time range during which automated backups are created if automated backups are enabled, using the <code>BackupRetentionPeriod</code> parameter. The default is a 30-minute window selected at random from an 8-hour block of time for each Amazon Web Services Region. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_WorkingWithAutomatedBackups.html#USER_WorkingWithAutomatedBackups.BackupWindow">Backup window</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The daily time range for creating automated backups is managed by the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the format <code>hh24:mi-hh24:mi</code>.</p></li>
    /// <li>
    /// <p>Must be in Universal Coordinated Time (UTC).</p></li>
    /// <li>
    /// <p>Must not conflict with the preferred maintenance window.</p></li>
    /// <li>
    /// <p>Must be at least 30 minutes.</p></li>
    /// </ul>
    pub fn get_preferred_backup_window(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_preferred_backup_window()
    }
    /// <p>The port number on which the database accepts connections.</p>
    /// <p>This setting doesn't apply to Aurora DB instances. The port number is managed by the cluster.</p>
    /// <p>Valid Values: <code>1150-65535</code></p>
    /// <p>Default:</p>
    /// <ul>
    /// <li>
    /// <p>RDS for Db2 - <code>50000</code></p></li>
    /// <li>
    /// <p>RDS for MariaDB - <code>3306</code></p></li>
    /// <li>
    /// <p>RDS for Microsoft SQL Server - <code>1433</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>3306</code></p></li>
    /// <li>
    /// <p>RDS for Oracle - <code>1521</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>5432</code></p></li>
    /// </ul>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>For RDS for Microsoft SQL Server, the value can't be <code>1234</code>, <code>1434</code>, <code>3260</code>, <code>3343</code>, <code>3389</code>, <code>47001</code>, or <code>49152-49156</code>.</p></li>
    /// </ul>
    pub fn port(mut self, input: i32) -> Self {
        self.inner = self.inner.port(input);
        self
    }
    /// <p>The port number on which the database accepts connections.</p>
    /// <p>This setting doesn't apply to Aurora DB instances. The port number is managed by the cluster.</p>
    /// <p>Valid Values: <code>1150-65535</code></p>
    /// <p>Default:</p>
    /// <ul>
    /// <li>
    /// <p>RDS for Db2 - <code>50000</code></p></li>
    /// <li>
    /// <p>RDS for MariaDB - <code>3306</code></p></li>
    /// <li>
    /// <p>RDS for Microsoft SQL Server - <code>1433</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>3306</code></p></li>
    /// <li>
    /// <p>RDS for Oracle - <code>1521</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>5432</code></p></li>
    /// </ul>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>For RDS for Microsoft SQL Server, the value can't be <code>1234</code>, <code>1434</code>, <code>3260</code>, <code>3343</code>, <code>3389</code>, <code>47001</code>, or <code>49152-49156</code>.</p></li>
    /// </ul>
    pub fn set_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_port(input);
        self
    }
    /// <p>The port number on which the database accepts connections.</p>
    /// <p>This setting doesn't apply to Aurora DB instances. The port number is managed by the cluster.</p>
    /// <p>Valid Values: <code>1150-65535</code></p>
    /// <p>Default:</p>
    /// <ul>
    /// <li>
    /// <p>RDS for Db2 - <code>50000</code></p></li>
    /// <li>
    /// <p>RDS for MariaDB - <code>3306</code></p></li>
    /// <li>
    /// <p>RDS for Microsoft SQL Server - <code>1433</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>3306</code></p></li>
    /// <li>
    /// <p>RDS for Oracle - <code>1521</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>5432</code></p></li>
    /// </ul>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>For RDS for Microsoft SQL Server, the value can't be <code>1234</code>, <code>1434</code>, <code>3260</code>, <code>3343</code>, <code>3389</code>, <code>47001</code>, or <code>49152-49156</code>.</p></li>
    /// </ul>
    pub fn get_port(&self) -> &::std::option::Option<i32> {
        self.inner.get_port()
    }
    /// <p>Specifies whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (DB instance Availability Zones (AZs) are managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    pub fn multi_az(mut self, input: bool) -> Self {
        self.inner = self.inner.multi_az(input);
        self
    }
    /// <p>Specifies whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (DB instance Availability Zones (AZs) are managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    pub fn set_multi_az(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_multi_az(input);
        self
    }
    /// <p>Specifies whether the DB instance is a Multi-AZ deployment. You can't set the <code>AvailabilityZone</code> parameter if the DB instance is a Multi-AZ deployment.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (DB instance Availability Zones (AZs) are managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    pub fn get_multi_az(&self) -> &::std::option::Option<bool> {
        self.inner.get_multi_az()
    }
    /// <p>The version number of the database engine to use.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The version number of the database engine the DB instance uses is managed by the DB cluster.</p>
    /// <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> operation.</p>
    /// <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every Amazon Web Services Region.</p>
    /// <dl>
    /// <dt>
    /// Amazon RDS Custom for Oracle
    /// </dt>
    /// <dd>
    /// <p>A custom engine version (CEV) that you have previously created. This setting is required for RDS Custom for Oracle. The CEV name has the following format: 19.<i>customized_string</i>. A valid CEV name is <code>19.my_cev1</code>. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-creating.html#custom-creating.create"> Creating an RDS Custom for Oracle DB instance</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// Amazon RDS Custom for SQL Server
    /// </dt>
    /// <dd>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-reqs-limits-MS.html">RDS Custom for SQL Server general requirements</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for Db2
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Db2.html#Db2.Concepts.VersionMgmt">Db2 on Amazon RDS versions</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for MariaDB
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS versions</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for Microsoft SQL Server
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.VersionSupport">Microsoft SQL Server versions on Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for MySQL
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS versions</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for Oracle
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine release notes</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for PostgreSQL
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts">Amazon RDS for PostgreSQL versions and extensions</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// </dl>
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.engine_version(input.into());
        self
    }
    /// <p>The version number of the database engine to use.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The version number of the database engine the DB instance uses is managed by the DB cluster.</p>
    /// <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> operation.</p>
    /// <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every Amazon Web Services Region.</p>
    /// <dl>
    /// <dt>
    /// Amazon RDS Custom for Oracle
    /// </dt>
    /// <dd>
    /// <p>A custom engine version (CEV) that you have previously created. This setting is required for RDS Custom for Oracle. The CEV name has the following format: 19.<i>customized_string</i>. A valid CEV name is <code>19.my_cev1</code>. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-creating.html#custom-creating.create"> Creating an RDS Custom for Oracle DB instance</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// Amazon RDS Custom for SQL Server
    /// </dt>
    /// <dd>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-reqs-limits-MS.html">RDS Custom for SQL Server general requirements</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for Db2
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Db2.html#Db2.Concepts.VersionMgmt">Db2 on Amazon RDS versions</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for MariaDB
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS versions</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for Microsoft SQL Server
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.VersionSupport">Microsoft SQL Server versions on Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for MySQL
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS versions</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for Oracle
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine release notes</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for PostgreSQL
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts">Amazon RDS for PostgreSQL versions and extensions</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// </dl>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_engine_version(input);
        self
    }
    /// <p>The version number of the database engine to use.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The version number of the database engine the DB instance uses is managed by the DB cluster.</p>
    /// <p>For a list of valid engine versions, use the <code>DescribeDBEngineVersions</code> operation.</p>
    /// <p>The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every Amazon Web Services Region.</p>
    /// <dl>
    /// <dt>
    /// Amazon RDS Custom for Oracle
    /// </dt>
    /// <dd>
    /// <p>A custom engine version (CEV) that you have previously created. This setting is required for RDS Custom for Oracle. The CEV name has the following format: 19.<i>customized_string</i>. A valid CEV name is <code>19.my_cev1</code>. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-creating.html#custom-creating.create"> Creating an RDS Custom for Oracle DB instance</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// Amazon RDS Custom for SQL Server
    /// </dt>
    /// <dd>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-reqs-limits-MS.html">RDS Custom for SQL Server general requirements</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for Db2
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Db2.html#Db2.Concepts.VersionMgmt">Db2 on Amazon RDS versions</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for MariaDB
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MariaDB.html#MariaDB.Concepts.VersionMgmt">MariaDB on Amazon RDS versions</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for Microsoft SQL Server
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.VersionSupport">Microsoft SQL Server versions on Amazon RDS</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for MySQL
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS versions</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for Oracle
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Appendix.Oracle.PatchComposition.html">Oracle Database Engine release notes</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// <dt>
    /// RDS for PostgreSQL
    /// </dt>
    /// <dd>
    /// <p>For information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts">Amazon RDS for PostgreSQL versions and extensions</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// </dd>
    /// </dl>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_engine_version()
    }
    /// <p>Specifies whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.</p>
    /// <p>If you create an RDS Custom DB instance, you must set <code>AutoMinorVersionUpgrade</code> to <code>false</code>.</p>
    pub fn auto_minor_version_upgrade(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_minor_version_upgrade(input);
        self
    }
    /// <p>Specifies whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.</p>
    /// <p>If you create an RDS Custom DB instance, you must set <code>AutoMinorVersionUpgrade</code> to <code>false</code>.</p>
    pub fn set_auto_minor_version_upgrade(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_minor_version_upgrade(input);
        self
    }
    /// <p>Specifies whether minor engine upgrades are applied automatically to the DB instance during the maintenance window. By default, minor engine upgrades are applied automatically.</p>
    /// <p>If you create an RDS Custom DB instance, you must set <code>AutoMinorVersionUpgrade</code> to <code>false</code>.</p>
    pub fn get_auto_minor_version_upgrade(&self) -> &::std::option::Option<bool> {
        self.inner.get_auto_minor_version_upgrade()
    }
    /// <p>The license model information for this DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p>RDS for Db2 - <code>bring-your-own-license</code></p></li>
    /// <li>
    /// <p>RDS for MariaDB - <code>general-public-license</code></p></li>
    /// <li>
    /// <p>RDS for Microsoft SQL Server - <code>license-included</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>general-public-license</code></p></li>
    /// <li>
    /// <p>RDS for Oracle - <code>bring-your-own-license | license-included</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>postgresql-license</code></p></li>
    /// </ul>
    pub fn license_model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.license_model(input.into());
        self
    }
    /// <p>The license model information for this DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p>RDS for Db2 - <code>bring-your-own-license</code></p></li>
    /// <li>
    /// <p>RDS for MariaDB - <code>general-public-license</code></p></li>
    /// <li>
    /// <p>RDS for Microsoft SQL Server - <code>license-included</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>general-public-license</code></p></li>
    /// <li>
    /// <p>RDS for Oracle - <code>bring-your-own-license | license-included</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>postgresql-license</code></p></li>
    /// </ul>
    pub fn set_license_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_license_model(input);
        self
    }
    /// <p>The license model information for this DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p>RDS for Db2 - <code>bring-your-own-license</code></p></li>
    /// <li>
    /// <p>RDS for MariaDB - <code>general-public-license</code></p></li>
    /// <li>
    /// <p>RDS for Microsoft SQL Server - <code>license-included</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>general-public-license</code></p></li>
    /// <li>
    /// <p>RDS for Oracle - <code>bring-your-own-license | license-included</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>postgresql-license</code></p></li>
    /// </ul>
    pub fn get_license_model(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_license_model()
    }
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to initially allocate for the DB instance. For information about valid IOPS values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html">Amazon RDS DB instance storage</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Storage is managed by the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>For RDS for Db2, MariaDB, MySQL, Oracle, and PostgreSQL - Must be a multiple between .5 and 50 of the storage amount for the DB instance.</p></li>
    /// <li>
    /// <p>For RDS for SQL Server - Must be a multiple between 1 and 50 of the storage amount for the DB instance.</p></li>
    /// </ul>
    pub fn iops(mut self, input: i32) -> Self {
        self.inner = self.inner.iops(input);
        self
    }
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to initially allocate for the DB instance. For information about valid IOPS values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html">Amazon RDS DB instance storage</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Storage is managed by the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>For RDS for Db2, MariaDB, MySQL, Oracle, and PostgreSQL - Must be a multiple between .5 and 50 of the storage amount for the DB instance.</p></li>
    /// <li>
    /// <p>For RDS for SQL Server - Must be a multiple between 1 and 50 of the storage amount for the DB instance.</p></li>
    /// </ul>
    pub fn set_iops(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_iops(input);
        self
    }
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to initially allocate for the DB instance. For information about valid IOPS values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html">Amazon RDS DB instance storage</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Storage is managed by the DB cluster.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>For RDS for Db2, MariaDB, MySQL, Oracle, and PostgreSQL - Must be a multiple between .5 and 50 of the storage amount for the DB instance.</p></li>
    /// <li>
    /// <p>For RDS for SQL Server - Must be a multiple between 1 and 50 of the storage amount for the DB instance.</p></li>
    /// </ul>
    pub fn get_iops(&self) -> &::std::option::Option<i32> {
        self.inner.get_iops()
    }
    /// <p>The option group to associate the DB instance with.</p>
    /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance after it is associated with a DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.</p>
    pub fn option_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.option_group_name(input.into());
        self
    }
    /// <p>The option group to associate the DB instance with.</p>
    /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance after it is associated with a DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.</p>
    pub fn set_option_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_option_group_name(input);
        self
    }
    /// <p>The option group to associate the DB instance with.</p>
    /// <p>Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group. Also, that option group can't be removed from a DB instance after it is associated with a DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.</p>
    pub fn get_option_group_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_option_group_name()
    }
    /// <p>For supported engines, the character set (<code>CharacterSet</code>) to associate the DB instance with.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora - The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p></li>
    /// <li>
    /// <p>RDS Custom - However, if you need to change the character set, you can change it on the database itself.</p></li>
    /// </ul>
    pub fn character_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.character_set_name(input.into());
        self
    }
    /// <p>For supported engines, the character set (<code>CharacterSet</code>) to associate the DB instance with.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora - The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p></li>
    /// <li>
    /// <p>RDS Custom - However, if you need to change the character set, you can change it on the database itself.</p></li>
    /// </ul>
    pub fn set_character_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_character_set_name(input);
        self
    }
    /// <p>For supported engines, the character set (<code>CharacterSet</code>) to associate the DB instance with.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora - The character set is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p></li>
    /// <li>
    /// <p>RDS Custom - However, if you need to change the character set, you can change it on the database itself.</p></li>
    /// </ul>
    pub fn get_character_set_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_character_set_name()
    }
    /// <p>The name of the NCHAR character set for the Oracle DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn nchar_character_set_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.nchar_character_set_name(input.into());
        self
    }
    /// <p>The name of the NCHAR character set for the Oracle DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn set_nchar_character_set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_nchar_character_set_name(input);
        self
    }
    /// <p>The name of the NCHAR character set for the Oracle DB instance.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn get_nchar_character_set_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_nchar_character_set_name()
    }
    /// <p>Specifies whether the DB instance is publicly accessible.</p>
    /// <p>When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB instance's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
    /// <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB instance is private.</p></li>
    /// <li>
    /// <p>If the default VPC in the target Region has an internet gateway attached to it, the DB instance is public.</p></li>
    /// </ul>
    /// <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB instance is private.</p></li>
    /// <li>
    /// <p>If the subnets are part of a VPC that has an internet gateway attached to it, the DB instance is public.</p></li>
    /// </ul>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.inner = self.inner.publicly_accessible(input);
        self
    }
    /// <p>Specifies whether the DB instance is publicly accessible.</p>
    /// <p>When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB instance's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
    /// <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB instance is private.</p></li>
    /// <li>
    /// <p>If the default VPC in the target Region has an internet gateway attached to it, the DB instance is public.</p></li>
    /// </ul>
    /// <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB instance is private.</p></li>
    /// <li>
    /// <p>If the subnets are part of a VPC that has an internet gateway attached to it, the DB instance is public.</p></li>
    /// </ul>
    pub fn set_publicly_accessible(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_publicly_accessible(input);
        self
    }
    /// <p>Specifies whether the DB instance is publicly accessible.</p>
    /// <p>When the DB instance is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB instance's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB instance's VPC. Access to the DB instance is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB instance doesn't permit it.</p>
    /// <p>When the DB instance isn't publicly accessible, it is an internal DB instance with a DNS name that resolves to a private IP address.</p>
    /// <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
    /// <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB instance is private.</p></li>
    /// <li>
    /// <p>If the default VPC in the target Region has an internet gateway attached to it, the DB instance is public.</p></li>
    /// </ul>
    /// <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li>
    /// <p>If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB instance is private.</p></li>
    /// <li>
    /// <p>If the subnets are part of a VPC that has an internet gateway attached to it, the DB instance is public.</p></li>
    /// </ul>
    pub fn get_publicly_accessible(&self) -> &::std::option::Option<bool> {
        self.inner.get_publicly_accessible()
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to assign to the DB instance.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Tags to assign to the DB instance.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Tags to assign to the DB instance.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
    /// <p>The identifier of the DB cluster that this DB instance will belong to.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn db_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_cluster_identifier(input.into());
        self
    }
    /// <p>The identifier of the DB cluster that this DB instance will belong to.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn set_db_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_cluster_identifier(input);
        self
    }
    /// <p>The identifier of the DB cluster that this DB instance will belong to.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn get_db_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_cluster_identifier()
    }
    /// <p>The storage type to associate with the DB instance.</p>
    /// <p>If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code>, you must also include a value for the <code>Iops</code> parameter.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Storage is managed by the DB cluster.</p>
    /// <p>Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code></p>
    /// <p>Default: <code>io1</code>, if the <code>Iops</code> parameter is specified. Otherwise, <code>gp2</code>.</p>
    pub fn storage_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.storage_type(input.into());
        self
    }
    /// <p>The storage type to associate with the DB instance.</p>
    /// <p>If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code>, you must also include a value for the <code>Iops</code> parameter.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Storage is managed by the DB cluster.</p>
    /// <p>Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code></p>
    /// <p>Default: <code>io1</code>, if the <code>Iops</code> parameter is specified. Otherwise, <code>gp2</code>.</p>
    pub fn set_storage_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_storage_type(input);
        self
    }
    /// <p>The storage type to associate with the DB instance.</p>
    /// <p>If you specify <code>io1</code>, <code>io2</code>, or <code>gp3</code>, you must also include a value for the <code>Iops</code> parameter.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Storage is managed by the DB cluster.</p>
    /// <p>Valid Values: <code>gp2 | gp3 | io1 | io2 | standard</code></p>
    /// <p>Default: <code>io1</code>, if the <code>Iops</code> parameter is specified. Otherwise, <code>gp2</code>.</p>
    pub fn get_storage_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_storage_type()
    }
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    /// <p>This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.</p>
    pub fn tde_credential_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tde_credential_arn(input.into());
        self
    }
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    /// <p>This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.</p>
    pub fn set_tde_credential_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_tde_credential_arn(input);
        self
    }
    /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
    /// <p>This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.</p>
    pub fn get_tde_credential_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_tde_credential_arn()
    }
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn tde_credential_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.tde_credential_password(input.into());
        self
    }
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn set_tde_credential_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_tde_credential_password(input);
        self
    }
    /// <p>The password for the given ARN from the key store in order to access the device.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn get_tde_credential_password(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_tde_credential_password()
    }
    /// <p>Specifes whether the DB instance is encrypted. By default, it isn't encrypted.</p>
    /// <p>For RDS Custom DB instances, either enable this setting or leave it unset. Otherwise, Amazon RDS reports an error.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The encryption for DB instances is managed by the DB cluster.</p>
    pub fn storage_encrypted(mut self, input: bool) -> Self {
        self.inner = self.inner.storage_encrypted(input);
        self
    }
    /// <p>Specifes whether the DB instance is encrypted. By default, it isn't encrypted.</p>
    /// <p>For RDS Custom DB instances, either enable this setting or leave it unset. Otherwise, Amazon RDS reports an error.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The encryption for DB instances is managed by the DB cluster.</p>
    pub fn set_storage_encrypted(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_storage_encrypted(input);
        self
    }
    /// <p>Specifes whether the DB instance is encrypted. By default, it isn't encrypted.</p>
    /// <p>For RDS Custom DB instances, either enable this setting or leave it unset. Otherwise, Amazon RDS reports an error.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The encryption for DB instances is managed by the DB cluster.</p>
    pub fn get_storage_encrypted(&self) -> &::std::option::Option<bool> {
        self.inner.get_storage_encrypted()
    }
    /// <p>The Amazon Web Services KMS key identifier for an encrypted DB instance.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The Amazon Web Services KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
    /// <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    /// <p>For Amazon RDS Custom, a KMS key is required for DB instances. For most RDS engines, if you leave this parameter empty while enabling <code>StorageEncrypted</code>, the engine uses the default KMS key. However, RDS Custom doesn't use the default key when this parameter is empty. You must explicitly specify a key.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.kms_key_id(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier for an encrypted DB instance.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The Amazon Web Services KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
    /// <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    /// <p>For Amazon RDS Custom, a KMS key is required for DB instances. For most RDS engines, if you leave this parameter empty while enabling <code>StorageEncrypted</code>, the engine uses the default KMS key. However, RDS Custom doesn't use the default key when this parameter is empty. You must explicitly specify a key.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_kms_key_id(input);
        self
    }
    /// <p>The Amazon Web Services KMS key identifier for an encrypted DB instance.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. The Amazon Web Services KMS key identifier is managed by the DB cluster. For more information, see <code>CreateDBCluster</code>.</p>
    /// <p>If <code>StorageEncrypted</code> is enabled, and you do not specify a value for the <code>KmsKeyId</code> parameter, then Amazon RDS uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    /// <p>For Amazon RDS Custom, a KMS key is required for DB instances. For most RDS engines, if you leave this parameter empty while enabling <code>StorageEncrypted</code>, the engine uses the default KMS key. However, RDS Custom doesn't use the default key when this parameter is empty. You must explicitly specify a key.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_kms_key_id()
    }
    /// <p>The Active Directory directory ID to create the DB instance in. Currently, you can create only Db2, MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (The domain is managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain(input.into());
        self
    }
    /// <p>The Active Directory directory ID to create the DB instance in. Currently, you can create only Db2, MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (The domain is managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain(input);
        self
    }
    /// <p>The Active Directory directory ID to create the DB instance in. Currently, you can create only Db2, MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances in an Active Directory Domain.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (The domain is managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain()
    }
    /// <p>The fully qualified domain name (FQDN) of an Active Directory domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>mymanagedADtest.mymanagedAD.mydomain</code></p>
    pub fn domain_fqdn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_fqdn(input.into());
        self
    }
    /// <p>The fully qualified domain name (FQDN) of an Active Directory domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>mymanagedADtest.mymanagedAD.mydomain</code></p>
    pub fn set_domain_fqdn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_fqdn(input);
        self
    }
    /// <p>The fully qualified domain name (FQDN) of an Active Directory domain.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>mymanagedADtest.mymanagedAD.mydomain</code></p>
    pub fn get_domain_fqdn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_fqdn()
    }
    /// <p>The Active Directory organizational unit for your DB instance to join.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the distinguished name format.</p></li>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code></p>
    pub fn domain_ou(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_ou(input.into());
        self
    }
    /// <p>The Active Directory organizational unit for your DB instance to join.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the distinguished name format.</p></li>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code></p>
    pub fn set_domain_ou(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_ou(input);
        self
    }
    /// <p>The Active Directory organizational unit for your DB instance to join.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must be in the distinguished name format.</p></li>
    /// <li>
    /// <p>Can't be longer than 64 characters.</p></li>
    /// </ul>
    /// <p>Example: <code>OU=mymanagedADtestOU,DC=mymanagedADtest,DC=mymanagedAD,DC=mydomain</code></p>
    pub fn get_domain_ou(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_ou()
    }
    /// <p>The ARN for the Secrets Manager secret with the credentials for the user joining the domain.</p>
    /// <p>Example: <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code></p>
    pub fn domain_auth_secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_auth_secret_arn(input.into());
        self
    }
    /// <p>The ARN for the Secrets Manager secret with the credentials for the user joining the domain.</p>
    /// <p>Example: <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code></p>
    pub fn set_domain_auth_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_auth_secret_arn(input);
        self
    }
    /// <p>The ARN for the Secrets Manager secret with the credentials for the user joining the domain.</p>
    /// <p>Example: <code>arn:aws:secretsmanager:region:account-number:secret:myselfmanagedADtestsecret-123456</code></p>
    pub fn get_domain_auth_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_auth_secret_arn()
    }
    /// Appends an item to `DomainDnsIps`.
    ///
    /// To override the contents of this collection use [`set_domain_dns_ips`](Self::set_domain_dns_ips).
    ///
    /// <p>The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.</p></li>
    /// </ul>
    /// <p>Example: <code>123.124.125.126,234.235.236.237</code></p>
    pub fn domain_dns_ips(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_dns_ips(input.into());
        self
    }
    /// <p>The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.</p></li>
    /// </ul>
    /// <p>Example: <code>123.124.125.126,234.235.236.237</code></p>
    pub fn set_domain_dns_ips(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_domain_dns_ips(input);
        self
    }
    /// <p>The IPv4 DNS IP addresses of your primary and secondary Active Directory domain controllers.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Two IP addresses must be provided. If there isn't a secondary domain controller, use the IP address of the primary domain controller for both entries in the list.</p></li>
    /// </ul>
    /// <p>Example: <code>123.124.125.126,234.235.236.237</code></p>
    pub fn get_domain_dns_ips(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_domain_dns_ips()
    }
    /// <p>Specifies whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
    pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
        self.inner = self.inner.copy_tags_to_snapshot(input);
        self
    }
    /// <p>Specifies whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
    pub fn set_copy_tags_to_snapshot(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_copy_tags_to_snapshot(input);
        self
    }
    /// <p>Specifies whether to copy tags from the DB instance to snapshots of the DB instance. By default, tags are not copied.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. Copying tags to snapshots is managed by the DB cluster. Setting this value for an Aurora DB instance has no effect on the DB cluster setting.</p>
    pub fn get_copy_tags_to_snapshot(&self) -> &::std::option::Option<bool> {
        self.inner.get_copy_tags_to_snapshot()
    }
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collection of Enhanced Monitoring metrics, specify <code>0</code>.</p>
    /// <p>If <code>MonitoringRoleArn</code> is specified, then you must set <code>MonitoringInterval</code> to a value other than <code>0</code>.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>Valid Values: <code>0 | 1 | 5 | 10 | 15 | 30 | 60</code></p>
    /// <p>Default: <code>0</code></p>
    pub fn monitoring_interval(mut self, input: i32) -> Self {
        self.inner = self.inner.monitoring_interval(input);
        self
    }
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collection of Enhanced Monitoring metrics, specify <code>0</code>.</p>
    /// <p>If <code>MonitoringRoleArn</code> is specified, then you must set <code>MonitoringInterval</code> to a value other than <code>0</code>.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>Valid Values: <code>0 | 1 | 5 | 10 | 15 | 30 | 60</code></p>
    /// <p>Default: <code>0</code></p>
    pub fn set_monitoring_interval(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_monitoring_interval(input);
        self
    }
    /// <p>The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collection of Enhanced Monitoring metrics, specify <code>0</code>.</p>
    /// <p>If <code>MonitoringRoleArn</code> is specified, then you must set <code>MonitoringInterval</code> to a value other than <code>0</code>.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>Valid Values: <code>0 | 1 | 5 | 10 | 15 | 30 | 60</code></p>
    /// <p>Default: <code>0</code></p>
    pub fn get_monitoring_interval(&self) -> &::std::option::Option<i32> {
        self.inner.get_monitoring_interval()
    }
    /// <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>If <code>MonitoringInterval</code> is set to a value other than <code>0</code>, then you must supply a <code>MonitoringRoleArn</code> value.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn monitoring_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.monitoring_role_arn(input.into());
        self
    }
    /// <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>If <code>MonitoringInterval</code> is set to a value other than <code>0</code>, then you must supply a <code>MonitoringRoleArn</code> value.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn set_monitoring_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_monitoring_role_arn(input);
        self
    }
    /// <p>The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, <code>arn:aws:iam:123456789012:role/emaccess</code>. For information on creating a monitoring role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling">Setting Up and Enabling Enhanced Monitoring</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>If <code>MonitoringInterval</code> is set to a value other than <code>0</code>, then you must supply a <code>MonitoringRoleArn</code> value.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn get_monitoring_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_monitoring_role_arn()
    }
    /// <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (The domain is managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    pub fn domain_iam_role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_iam_role_name(input.into());
        self
    }
    /// <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (The domain is managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    pub fn set_domain_iam_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_iam_role_name(input);
        self
    }
    /// <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (The domain is managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    pub fn get_domain_iam_role_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_iam_role_name()
    }
    /// <p>The order of priority in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.AuroraHighAvailability.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>Default: <code>1</code></p>
    /// <p>Valid Values: <code>0 - 15</code></p>
    pub fn promotion_tier(mut self, input: i32) -> Self {
        self.inner = self.inner.promotion_tier(input);
        self
    }
    /// <p>The order of priority in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.AuroraHighAvailability.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>Default: <code>1</code></p>
    /// <p>Valid Values: <code>0 - 15</code></p>
    pub fn set_promotion_tier(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_promotion_tier(input);
        self
    }
    /// <p>The order of priority in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.AuroraHighAvailability.html#Aurora.Managing.FaultTolerance"> Fault Tolerance for an Aurora DB Cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>Default: <code>1</code></p>
    /// <p>Valid Values: <code>0 - 15</code></p>
    pub fn get_promotion_tier(&self) -> &::std::option::Option<i32> {
        self.inner.get_promotion_tier()
    }
    /// <p>The time zone of the DB instance. The time zone parameter is currently supported only by <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>.</p>
    pub fn timezone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.timezone(input.into());
        self
    }
    /// <p>The time zone of the DB instance. The time zone parameter is currently supported only by <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>.</p>
    pub fn set_timezone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_timezone(input);
        self
    }
    /// <p>The time zone of the DB instance. The time zone parameter is currently supported only by <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_SQLServer.html#SQLServer.Concepts.General.TimeZone">Microsoft SQL Server</a>.</p>
    pub fn get_timezone(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_timezone()
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (Mapping Amazon Web Services IAM accounts to database accounts is managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_iam_database_authentication(input);
        self
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (Mapping Amazon Web Services IAM accounts to database accounts is managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    pub fn set_enable_iam_database_authentication(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_iam_database_authentication(input);
        self
    }
    /// <p>Specifies whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication for MySQL and PostgreSQL</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (Mapping Amazon Web Services IAM accounts to database accounts is managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    pub fn get_enable_iam_database_authentication(&self) -> &::std::option::Option<bool> {
        self.inner.get_enable_iam_database_authentication()
    }
    /// <p>Specifies whether to enable Performance Insights for the DB instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn enable_performance_insights(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_performance_insights(input);
        self
    }
    /// <p>Specifies whether to enable Performance Insights for the DB instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn set_enable_performance_insights(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_performance_insights(input);
        self
    }
    /// <p>Specifies whether to enable Performance Insights for the DB instance. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html">Using Amazon Performance Insights</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn get_enable_performance_insights(&self) -> &::std::option::Option<bool> {
        self.inner.get_enable_performance_insights()
    }
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    /// <p>If you don't specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn performance_insights_kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.performance_insights_kms_key_id(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    /// <p>If you don't specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn set_performance_insights_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_performance_insights_kms_key_id(input);
        self
    }
    /// <p>The Amazon Web Services KMS key identifier for encryption of Performance Insights data.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key.</p>
    /// <p>If you don't specify a value for <code>PerformanceInsightsKMSKeyId</code>, then Amazon RDS uses your default KMS key. There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    pub fn get_performance_insights_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_performance_insights_kms_key_id()
    }
    /// <p>The number of days to retain Performance Insights data.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>7</code></p></li>
    /// <li>
    /// <p><i>month</i> * 31, where <i>month</i> is a number of months from 1-23. Examples: <code>93</code> (3 months * 31), <code>341</code> (11 months * 31), <code>589</code> (19 months * 31)</p></li>
    /// <li>
    /// <p><code>731</code></p></li>
    /// </ul>
    /// <p>Default: <code>7</code> days</p>
    /// <p>If you specify a retention period that isn't valid, such as <code>94</code>, Amazon RDS returns an error.</p>
    pub fn performance_insights_retention_period(mut self, input: i32) -> Self {
        self.inner = self.inner.performance_insights_retention_period(input);
        self
    }
    /// <p>The number of days to retain Performance Insights data.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>7</code></p></li>
    /// <li>
    /// <p><i>month</i> * 31, where <i>month</i> is a number of months from 1-23. Examples: <code>93</code> (3 months * 31), <code>341</code> (11 months * 31), <code>589</code> (19 months * 31)</p></li>
    /// <li>
    /// <p><code>731</code></p></li>
    /// </ul>
    /// <p>Default: <code>7</code> days</p>
    /// <p>If you specify a retention period that isn't valid, such as <code>94</code>, Amazon RDS returns an error.</p>
    pub fn set_performance_insights_retention_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_performance_insights_retention_period(input);
        self
    }
    /// <p>The number of days to retain Performance Insights data.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>7</code></p></li>
    /// <li>
    /// <p><i>month</i> * 31, where <i>month</i> is a number of months from 1-23. Examples: <code>93</code> (3 months * 31), <code>341</code> (11 months * 31), <code>589</code> (19 months * 31)</p></li>
    /// <li>
    /// <p><code>731</code></p></li>
    /// </ul>
    /// <p>Default: <code>7</code> days</p>
    /// <p>If you specify a retention period that isn't valid, such as <code>94</code>, Amazon RDS returns an error.</p>
    pub fn get_performance_insights_retention_period(&self) -> &::std::option::Option<i32> {
        self.inner.get_performance_insights_retention_period()
    }
    /// Appends an item to `EnableCloudwatchLogsExports`.
    ///
    /// To override the contents of this collection use [`set_enable_cloudwatch_logs_exports`](Self::set_enable_cloudwatch_logs_exports).
    ///
    /// <p>The list of log types to enable for exporting to CloudWatch Logs. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch"> Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (CloudWatch Logs exports are managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    /// <p>The following values are valid for each DB engine:</p>
    /// <ul>
    /// <li>
    /// <p>RDS for Db2 - <code>diag.log | notify.log</code></p></li>
    /// <li>
    /// <p>RDS for MariaDB - <code>audit | error | general | slowquery</code></p></li>
    /// <li>
    /// <p>RDS for Microsoft SQL Server - <code>agent | error</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>audit | error | general | slowquery</code></p></li>
    /// <li>
    /// <p>RDS for Oracle - <code>alert | audit | listener | trace | oemagent</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>postgresql | upgrade</code></p></li>
    /// </ul>
    pub fn enable_cloudwatch_logs_exports(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.enable_cloudwatch_logs_exports(input.into());
        self
    }
    /// <p>The list of log types to enable for exporting to CloudWatch Logs. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch"> Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (CloudWatch Logs exports are managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    /// <p>The following values are valid for each DB engine:</p>
    /// <ul>
    /// <li>
    /// <p>RDS for Db2 - <code>diag.log | notify.log</code></p></li>
    /// <li>
    /// <p>RDS for MariaDB - <code>audit | error | general | slowquery</code></p></li>
    /// <li>
    /// <p>RDS for Microsoft SQL Server - <code>agent | error</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>audit | error | general | slowquery</code></p></li>
    /// <li>
    /// <p>RDS for Oracle - <code>alert | audit | listener | trace | oemagent</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>postgresql | upgrade</code></p></li>
    /// </ul>
    pub fn set_enable_cloudwatch_logs_exports(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_enable_cloudwatch_logs_exports(input);
        self
    }
    /// <p>The list of log types to enable for exporting to CloudWatch Logs. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch"> Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (CloudWatch Logs exports are managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    /// <p>The following values are valid for each DB engine:</p>
    /// <ul>
    /// <li>
    /// <p>RDS for Db2 - <code>diag.log | notify.log</code></p></li>
    /// <li>
    /// <p>RDS for MariaDB - <code>audit | error | general | slowquery</code></p></li>
    /// <li>
    /// <p>RDS for Microsoft SQL Server - <code>agent | error</code></p></li>
    /// <li>
    /// <p>RDS for MySQL - <code>audit | error | general | slowquery</code></p></li>
    /// <li>
    /// <p>RDS for Oracle - <code>alert | audit | listener | trace | oemagent</code></p></li>
    /// <li>
    /// <p>RDS for PostgreSQL - <code>postgresql | upgrade</code></p></li>
    /// </ul>
    pub fn get_enable_cloudwatch_logs_exports(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_enable_cloudwatch_logs_exports()
    }
    /// Appends an item to `ProcessorFeatures`.
    ///
    /// To override the contents of this collection use [`set_processor_features`](Self::set_processor_features).
    ///
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.</p>
    pub fn processor_features(mut self, input: crate::types::ProcessorFeature) -> Self {
        self.inner = self.inner.processor_features(input);
        self
    }
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.</p>
    pub fn set_processor_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ProcessorFeature>>) -> Self {
        self.inner = self.inner.set_processor_features(input);
        self
    }
    /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
    /// <p>This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.</p>
    pub fn get_processor_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ProcessorFeature>> {
        self.inner.get_processor_features()
    }
    /// <p>Specifies whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster.</p>
    pub fn deletion_protection(mut self, input: bool) -> Self {
        self.inner = self.inner.deletion_protection(input);
        self
    }
    /// <p>Specifies whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster.</p>
    pub fn set_deletion_protection(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_deletion_protection(input);
        self
    }
    /// <p>Specifies whether the DB instance has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled. For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_DeleteInstance.html"> Deleting a DB Instance</a>.</p>
    /// <p>This setting doesn't apply to Amazon Aurora DB instances. You can enable or disable deletion protection for the DB cluster. For more information, see <code>CreateDBCluster</code>. DB instances in a DB cluster can be deleted even when deletion protection is enabled for the DB cluster.</p>
    pub fn get_deletion_protection(&self) -> &::std::option::Option<bool> {
        self.inner.get_deletion_protection()
    }
    /// <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    /// <p>For more information about this setting, including limitations that apply to it, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling"> Managing capacity automatically with Amazon RDS storage autoscaling</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (Storage is managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    pub fn max_allocated_storage(mut self, input: i32) -> Self {
        self.inner = self.inner.max_allocated_storage(input);
        self
    }
    /// <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    /// <p>For more information about this setting, including limitations that apply to it, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling"> Managing capacity automatically with Amazon RDS storage autoscaling</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (Storage is managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    pub fn set_max_allocated_storage(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_allocated_storage(input);
        self
    }
    /// <p>The upper limit in gibibytes (GiB) to which Amazon RDS can automatically scale the storage of the DB instance.</p>
    /// <p>For more information about this setting, including limitations that apply to it, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PIOPS.StorageTypes.html#USER_PIOPS.Autoscaling"> Managing capacity automatically with Amazon RDS storage autoscaling</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>This setting doesn't apply to the following DB instances:</p>
    /// <ul>
    /// <li>
    /// <p>Amazon Aurora (Storage is managed by the DB cluster.)</p></li>
    /// <li>
    /// <p>RDS Custom</p></li>
    /// </ul>
    pub fn get_max_allocated_storage(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_allocated_storage()
    }
    /// <p>Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP</i> provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub fn enable_customer_owned_ip(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_customer_owned_ip(input);
        self
    }
    /// <p>Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP</i> provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub fn set_enable_customer_owned_ip(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_customer_owned_ip(input);
        self
    }
    /// <p>Specifies whether to enable a customer-owned IP address (CoIP) for an RDS on Outposts DB instance.</p>
    /// <p>A <i>CoIP</i> provides local or external connectivity to resources in your Outpost subnets through your on-premises network. For some use cases, a CoIP can provide lower latency for connections to the DB instance from outside of its virtual private cloud (VPC) on your local network.</p>
    /// <p>For more information about RDS on Outposts, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about CoIPs, see <a href="https://docs.aws.amazon.com/outposts/latest/userguide/routing.html#ip-addressing">Customer-owned IP addresses</a> in the <i>Amazon Web Services Outposts User Guide</i>.</p>
    pub fn get_enable_customer_owned_ip(&self) -> &::std::option::Option<bool> {
        self.inner.get_enable_customer_owned_ip()
    }
    /// <p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance.</p>
    /// <p>This setting is required for RDS Custom.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>The profile must exist in your account.</p></li>
    /// <li>
    /// <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p></li>
    /// <li>
    /// <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p></li>
    /// </ul>
    /// <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn custom_iam_instance_profile(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.custom_iam_instance_profile(input.into());
        self
    }
    /// <p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance.</p>
    /// <p>This setting is required for RDS Custom.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>The profile must exist in your account.</p></li>
    /// <li>
    /// <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p></li>
    /// <li>
    /// <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p></li>
    /// </ul>
    /// <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn set_custom_iam_instance_profile(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_custom_iam_instance_profile(input);
        self
    }
    /// <p>The instance profile associated with the underlying Amazon EC2 instance of an RDS Custom DB instance.</p>
    /// <p>This setting is required for RDS Custom.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>The profile must exist in your account.</p></li>
    /// <li>
    /// <p>The profile must have an IAM role that Amazon EC2 has permissions to assume.</p></li>
    /// <li>
    /// <p>The instance profile name and the associated IAM role name must start with the prefix <code>AWSRDSCustom</code>.</p></li>
    /// </ul>
    /// <p>For the list of permissions required for the IAM role, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/custom-setup-orcl.html#custom-setup-orcl.iam-vpc"> Configure IAM and your VPC</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn get_custom_iam_instance_profile(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_custom_iam_instance_profile()
    }
    /// <p>The location for storing automated backups and manual snapshots.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>outposts</code> (Amazon Web Services Outposts)</p></li>
    /// <li>
    /// <p><code>region</code> (Amazon Web Services Region)</p></li>
    /// </ul>
    /// <p>Default: <code>region</code></p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn backup_target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.backup_target(input.into());
        self
    }
    /// <p>The location for storing automated backups and manual snapshots.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>outposts</code> (Amazon Web Services Outposts)</p></li>
    /// <li>
    /// <p><code>region</code> (Amazon Web Services Region)</p></li>
    /// </ul>
    /// <p>Default: <code>region</code></p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn set_backup_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_backup_target(input);
        self
    }
    /// <p>The location for storing automated backups and manual snapshots.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li>
    /// <p><code>outposts</code> (Amazon Web Services Outposts)</p></li>
    /// <li>
    /// <p><code>region</code> (Amazon Web Services Region)</p></li>
    /// </ul>
    /// <p>Default: <code>region</code></p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-on-outposts.html">Working with Amazon RDS on Amazon Web Services Outposts</a> in the <i>Amazon RDS User Guide</i>.</p>
    pub fn get_backup_target(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_backup_target()
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Valid Values: <code>IPV4 | DUAL</code></p>
    pub fn network_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.network_type(input.into());
        self
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Valid Values: <code>IPV4 | DUAL</code></p>
    pub fn set_network_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_network_type(input);
        self
    }
    /// <p>The network type of the DB instance.</p>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB instance. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Valid Values: <code>IPV4 | DUAL</code></p>
    pub fn get_network_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_network_type()
    }
    /// <p>The storage throughput value for the DB instance.</p>
    /// <p>This setting applies only to the <code>gp3</code> storage type.</p>
    /// <p>This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.</p>
    pub fn storage_throughput(mut self, input: i32) -> Self {
        self.inner = self.inner.storage_throughput(input);
        self
    }
    /// <p>The storage throughput value for the DB instance.</p>
    /// <p>This setting applies only to the <code>gp3</code> storage type.</p>
    /// <p>This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.</p>
    pub fn set_storage_throughput(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_storage_throughput(input);
        self
    }
    /// <p>The storage throughput value for the DB instance.</p>
    /// <p>This setting applies only to the <code>gp3</code> storage type.</p>
    /// <p>This setting doesn't apply to Amazon Aurora or RDS Custom DB instances.</p>
    pub fn get_storage_throughput(&self) -> &::std::option::Option<i32> {
        self.inner.get_storage_throughput()
    }
    /// <p>Specifies whether to manage the master user password with Amazon Web Services Secrets Manager.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't manage the master user password with Amazon Web Services Secrets Manager if <code>MasterUserPassword</code> is specified.</p></li>
    /// </ul>
    pub fn manage_master_user_password(mut self, input: bool) -> Self {
        self.inner = self.inner.manage_master_user_password(input);
        self
    }
    /// <p>Specifies whether to manage the master user password with Amazon Web Services Secrets Manager.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't manage the master user password with Amazon Web Services Secrets Manager if <code>MasterUserPassword</code> is specified.</p></li>
    /// </ul>
    pub fn set_manage_master_user_password(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_manage_master_user_password(input);
        self
    }
    /// <p>Specifies whether to manage the master user password with Amazon Web Services Secrets Manager.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-secrets-manager.html">Password management with Amazon Web Services Secrets Manager</a> in the <i>Amazon RDS User Guide.</i></p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Can't manage the master user password with Amazon Web Services Secrets Manager if <code>MasterUserPassword</code> is specified.</p></li>
    /// </ul>
    pub fn get_manage_master_user_password(&self) -> &::std::option::Option<bool> {
        self.inner.get_manage_master_user_password()
    }
    /// <p>The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager.</p>
    /// <p>This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB instance.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and you must use a customer managed KMS key.</p>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub fn master_user_secret_kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.master_user_secret_kms_key_id(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager.</p>
    /// <p>This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB instance.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and you must use a customer managed KMS key.</p>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub fn set_master_user_secret_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_master_user_secret_kms_key_id(input);
        self
    }
    /// <p>The Amazon Web Services KMS key identifier to encrypt a secret that is automatically generated and managed in Amazon Web Services Secrets Manager.</p>
    /// <p>This setting is valid only if the master user password is managed by RDS in Amazon Web Services Secrets Manager for the DB instance.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>If you don't specify <code>MasterUserSecretKmsKeyId</code>, then the <code>aws/secretsmanager</code> KMS key is used to encrypt the secret. If the secret is in a different Amazon Web Services account, then you can't use the <code>aws/secretsmanager</code> KMS key to encrypt the secret, and you must use a customer managed KMS key.</p>
    /// <p>There is a default KMS key for your Amazon Web Services account. Your Amazon Web Services account has a different default KMS key for each Amazon Web Services Region.</p>
    pub fn get_master_user_secret_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_master_user_secret_kms_key_id()
    }
    /// <p>The CA certificate identifier to use for the DB instance's server certificate.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn ca_certificate_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ca_certificate_identifier(input.into());
        self
    }
    /// <p>The CA certificate identifier to use for the DB instance's server certificate.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_ca_certificate_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ca_certificate_identifier(input);
        self
    }
    /// <p>The CA certificate identifier to use for the DB instance's server certificate.</p>
    /// <p>This setting doesn't apply to RDS Custom DB instances.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html">Using SSL/TLS to encrypt a connection to a DB instance</a> in the <i>Amazon RDS User Guide</i> and <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.SSL.html"> Using SSL/TLS to encrypt a connection to a DB cluster</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn get_ca_certificate_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ca_certificate_identifier()
    }
    /// <p>The Oracle system identifier (SID), which is the name of the Oracle database instance that manages your database files. In this context, the term "Oracle database instance" refers exclusively to the system global area (SGA) and Oracle background processes. If you don't specify a SID, the value defaults to <code>RDSCDB</code>. The Oracle SID is also the name of your CDB.</p>
    pub fn db_system_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_system_id(input.into());
        self
    }
    /// <p>The Oracle system identifier (SID), which is the name of the Oracle database instance that manages your database files. In this context, the term "Oracle database instance" refers exclusively to the system global area (SGA) and Oracle background processes. If you don't specify a SID, the value defaults to <code>RDSCDB</code>. The Oracle SID is also the name of your CDB.</p>
    pub fn set_db_system_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_system_id(input);
        self
    }
    /// <p>The Oracle system identifier (SID), which is the name of the Oracle database instance that manages your database files. In this context, the term "Oracle database instance" refers exclusively to the system global area (SGA) and Oracle background processes. If you don't specify a SID, the value defaults to <code>RDSCDB</code>. The Oracle SID is also the name of your CDB.</p>
    pub fn get_db_system_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_system_id()
    }
    /// <p>Indicates whether the DB instance has a dedicated log volume (DLV) enabled.</p>
    pub fn dedicated_log_volume(mut self, input: bool) -> Self {
        self.inner = self.inner.dedicated_log_volume(input);
        self
    }
    /// <p>Indicates whether the DB instance has a dedicated log volume (DLV) enabled.</p>
    pub fn set_dedicated_log_volume(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dedicated_log_volume(input);
        self
    }
    /// <p>Indicates whether the DB instance has a dedicated log volume (DLV) enabled.</p>
    pub fn get_dedicated_log_volume(&self) -> &::std::option::Option<bool> {
        self.inner.get_dedicated_log_volume()
    }
    /// <p>Specifies whether to use the multi-tenant configuration or the single-tenant configuration (default). This parameter only applies to RDS for Oracle container database (CDB) engines.</p>
    /// <p>Note the following restrictions:</p>
    /// <ul>
    /// <li>
    /// <p>The DB engine that you specify in the request must support the multi-tenant configuration. If you attempt to enable the multi-tenant configuration on a DB engine that doesn't support it, the request fails.</p></li>
    /// <li>
    /// <p>If you specify the multi-tenant configuration when you create your DB instance, you can't later modify this DB instance to use the single-tenant configuration.</p></li>
    /// </ul>
    pub fn multi_tenant(mut self, input: bool) -> Self {
        self.inner = self.inner.multi_tenant(input);
        self
    }
    /// <p>Specifies whether to use the multi-tenant configuration or the single-tenant configuration (default). This parameter only applies to RDS for Oracle container database (CDB) engines.</p>
    /// <p>Note the following restrictions:</p>
    /// <ul>
    /// <li>
    /// <p>The DB engine that you specify in the request must support the multi-tenant configuration. If you attempt to enable the multi-tenant configuration on a DB engine that doesn't support it, the request fails.</p></li>
    /// <li>
    /// <p>If you specify the multi-tenant configuration when you create your DB instance, you can't later modify this DB instance to use the single-tenant configuration.</p></li>
    /// </ul>
    pub fn set_multi_tenant(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_multi_tenant(input);
        self
    }
    /// <p>Specifies whether to use the multi-tenant configuration or the single-tenant configuration (default). This parameter only applies to RDS for Oracle container database (CDB) engines.</p>
    /// <p>Note the following restrictions:</p>
    /// <ul>
    /// <li>
    /// <p>The DB engine that you specify in the request must support the multi-tenant configuration. If you attempt to enable the multi-tenant configuration on a DB engine that doesn't support it, the request fails.</p></li>
    /// <li>
    /// <p>If you specify the multi-tenant configuration when you create your DB instance, you can't later modify this DB instance to use the single-tenant configuration.</p></li>
    /// </ul>
    pub fn get_multi_tenant(&self) -> &::std::option::Option<bool> {
        self.inner.get_multi_tenant()
    }
}
