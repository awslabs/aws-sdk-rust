// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_db_cluster_backtracks::_describe_db_cluster_backtracks_output::DescribeDbClusterBacktracksOutputBuilder;

pub use crate::operation::describe_db_cluster_backtracks::_describe_db_cluster_backtracks_input::DescribeDbClusterBacktracksInputBuilder;

impl crate::operation::describe_db_cluster_backtracks::builders::DescribeDbClusterBacktracksInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::describe_db_cluster_backtracks::DescribeDbClusterBacktracksOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_db_cluster_backtracks::DescribeDBClusterBacktracksError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.describe_db_cluster_backtracks();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DescribeDBClusterBacktracks`.
///
/// <p>Returns information about backtracks for a DB cluster.</p>
/// <p>For more information on Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p><note>
/// <p>This action only applies to Aurora MySQL DB clusters.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DescribeDBClusterBacktracksFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::describe_db_cluster_backtracks::builders::DescribeDbClusterBacktracksInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::describe_db_cluster_backtracks::DescribeDbClusterBacktracksOutput,
        crate::operation::describe_db_cluster_backtracks::DescribeDBClusterBacktracksError,
    > for DescribeDBClusterBacktracksFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::describe_db_cluster_backtracks::DescribeDbClusterBacktracksOutput,
            crate::operation::describe_db_cluster_backtracks::DescribeDBClusterBacktracksError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DescribeDBClusterBacktracksFluentBuilder {
    /// Creates a new `DescribeDBClusterBacktracks`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DescribeDBClusterBacktracks as a reference.
    pub fn as_input(&self) -> &crate::operation::describe_db_cluster_backtracks::builders::DescribeDbClusterBacktracksInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_db_cluster_backtracks::DescribeDbClusterBacktracksOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::describe_db_cluster_backtracks::DescribeDBClusterBacktracksError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::describe_db_cluster_backtracks::DescribeDBClusterBacktracks::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::describe_db_cluster_backtracks::DescribeDBClusterBacktracks::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::describe_db_cluster_backtracks::DescribeDbClusterBacktracksOutput,
        crate::operation::describe_db_cluster_backtracks::DescribeDBClusterBacktracksError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_db_cluster_backtracks::paginator::DescribeDbClusterBacktracksPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::describe_db_cluster_backtracks::paginator::DescribeDbClusterBacktracksPaginator {
        crate::operation::describe_db_cluster_backtracks::paginator::DescribeDbClusterBacktracksPaginator::new(self.handle, self.inner)
    }
    /// <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code></p>
    pub fn db_cluster_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.db_cluster_identifier(input.into());
        self
    }
    /// <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code></p>
    pub fn set_db_cluster_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_db_cluster_identifier(input);
        self
    }
    /// <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p></li>
    /// <li>
    /// <p>First character must be a letter.</p></li>
    /// <li>
    /// <p>Can't end with a hyphen or contain two consecutive hyphens.</p></li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code></p>
    pub fn get_db_cluster_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_db_cluster_identifier()
    }
    /// <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">Universally unique identifier</a>.</p></li>
    /// </ul>
    /// <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code></p>
    pub fn backtrack_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.backtrack_identifier(input.into());
        self
    }
    /// <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">Universally unique identifier</a>.</p></li>
    /// </ul>
    /// <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code></p>
    pub fn set_backtrack_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_backtrack_identifier(input);
        self
    }
    /// <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li>
    /// <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier">Universally unique identifier</a>.</p></li>
    /// </ul>
    /// <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code></p>
    pub fn get_backtrack_identifier(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_backtrack_identifier()
    }
    ///
    /// Appends an item to `Filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p></li>
    /// <li>
    /// <p><code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p>
    /// <ul>
    /// <li>
    /// <p><code>applying</code></p></li>
    /// <li>
    /// <p><code>completed</code></p></li>
    /// <li>
    /// <p><code>failed</code></p></li>
    /// <li>
    /// <p><code>pending</code></p></li>
    /// </ul>
    /// <p>The results list includes information about only the backtracks identified by these values.</p></li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p></li>
    /// <li>
    /// <p><code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p>
    /// <ul>
    /// <li>
    /// <p><code>applying</code></p></li>
    /// <li>
    /// <p><code>completed</code></p></li>
    /// <li>
    /// <p><code>failed</code></p></li>
    /// <li>
    /// <p><code>pending</code></p></li>
    /// </ul>
    /// <p>The results list includes information about only the backtracks identified by these values.</p></li>
    /// </ul>
    pub fn set_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p>
    /// <ul>
    /// <li>
    /// <p><code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p></li>
    /// <li>
    /// <p><code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p>
    /// <ul>
    /// <li>
    /// <p><code>applying</code></p></li>
    /// <li>
    /// <p><code>completed</code></p></li>
    /// <li>
    /// <p><code>failed</code></p></li>
    /// <li>
    /// <p><code>pending</code></p></li>
    /// </ul>
    /// <p>The results list includes information about only the backtracks identified by these values.</p></li>
    /// </ul>
    pub fn get_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        self.inner.get_filters()
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.inner = self.inner.max_records(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn set_max_records(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_records(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn get_max_records(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_records()
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.marker(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_marker(input);
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_marker()
    }
}
