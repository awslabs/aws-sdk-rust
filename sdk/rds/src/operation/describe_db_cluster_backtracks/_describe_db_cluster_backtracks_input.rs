// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDbClusterBacktracksInput {
    /// <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code> </p>
    #[doc(hidden)]
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li>
    /// </ul>
    /// <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
    #[doc(hidden)]
    pub backtrack_identifier: std::option::Option<std::string::String>,
    /// <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p>
    /// <ul>
    /// <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li>
    /// <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p>
    /// <ul>
    /// <li> <p> <code>applying</code> </p> </li>
    /// <li> <p> <code>completed</code> </p> </li>
    /// <li> <p> <code>failed</code> </p> </li>
    /// <li> <p> <code>pending</code> </p> </li>
    /// </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    #[doc(hidden)]
    pub max_records: std::option::Option<i32>,
    /// <p>An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
}
impl DescribeDbClusterBacktracksInput {
    /// <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code> </p>
    pub fn db_cluster_identifier(&self) -> std::option::Option<&str> {
        self.db_cluster_identifier.as_deref()
    }
    /// <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li>
    /// </ul>
    /// <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
    pub fn backtrack_identifier(&self) -> std::option::Option<&str> {
        self.backtrack_identifier.as_deref()
    }
    /// <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p>
    /// <ul>
    /// <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li>
    /// <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p>
    /// <ul>
    /// <li> <p> <code>applying</code> </p> </li>
    /// <li> <p> <code>completed</code> </p> </li>
    /// <li> <p> <code>failed</code> </p> </li>
    /// <li> <p> <code>pending</code> </p> </li>
    /// </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li>
    /// </ul>
    pub fn filters(&self) -> std::option::Option<&[crate::types::Filter]> {
        self.filters.as_deref()
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(&self) -> std::option::Option<i32> {
        self.max_records
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl DescribeDbClusterBacktracksInput {
    /// Creates a new builder-style object to manufacture [`DescribeDbClusterBacktracksInput`](crate::operation::describe_db_cluster_backtracks::DescribeDbClusterBacktracksInput).
    pub fn builder() -> crate::operation::describe_db_cluster_backtracks::builders::DescribeDbClusterBacktracksInputBuilder{
        crate::operation::describe_db_cluster_backtracks::builders::DescribeDbClusterBacktracksInputBuilder::default()
    }
}

/// A builder for [`DescribeDbClusterBacktracksInput`](crate::operation::describe_db_cluster_backtracks::DescribeDbClusterBacktracksInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDbClusterBacktracksInputBuilder {
    pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
    pub(crate) backtrack_identifier: std::option::Option<std::string::String>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    pub(crate) max_records: std::option::Option<i32>,
    pub(crate) marker: std::option::Option<std::string::String>,
}
impl DescribeDbClusterBacktracksInputBuilder {
    /// <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code> </p>
    pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_cluster_identifier = Some(input.into());
        self
    }
    /// <p>The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 alphanumeric characters or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Example: <code>my-cluster1</code> </p>
    pub fn set_db_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_cluster_identifier = input;
        self
    }
    /// <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li>
    /// </ul>
    /// <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
    pub fn backtrack_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.backtrack_identifier = Some(input.into());
        self
    }
    /// <p>If specified, this value is the backtrack identifier of the backtrack to be described.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see <a href="http://www.ietf.org/rfc/rfc4122.txt">A Universally Unique Identifier (UUID) URN Namespace</a>.</p> </li>
    /// </ul>
    /// <p>Example: <code>123e4567-e89b-12d3-a456-426655440000</code> </p>
    pub fn set_backtrack_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.backtrack_identifier = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p>
    /// <ul>
    /// <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li>
    /// <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p>
    /// <ul>
    /// <li> <p> <code>applying</code> </p> </li>
    /// <li> <p> <code>completed</code> </p> </li>
    /// <li> <p> <code>failed</code> </p> </li>
    /// <li> <p> <code>pending</code> </p> </li>
    /// </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>A filter that specifies one or more DB clusters to describe. Supported filters include the following:</p>
    /// <ul>
    /// <li> <p> <code>db-cluster-backtrack-id</code> - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.</p> </li>
    /// <li> <p> <code>db-cluster-backtrack-status</code> - Accepts any of the following backtrack status values:</p>
    /// <ul>
    /// <li> <p> <code>applying</code> </p> </li>
    /// <li> <p> <code>completed</code> </p> </li>
    /// <li> <p> <code>failed</code> </p> </li>
    /// <li> <p> <code>pending</code> </p> </li>
    /// </ul> <p>The results list includes information about only the backtracks identified by these values.</p> </li>
    /// </ul>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = Some(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeDBClusterBacktracks</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDbClusterBacktracksInput`](crate::operation::describe_db_cluster_backtracks::DescribeDbClusterBacktracksInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_db_cluster_backtracks::DescribeDbClusterBacktracksInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_db_cluster_backtracks::DescribeDbClusterBacktracksInput {
                db_cluster_identifier: self.db_cluster_identifier,
                backtrack_identifier: self.backtrack_identifier,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
            },
        )
    }
}
