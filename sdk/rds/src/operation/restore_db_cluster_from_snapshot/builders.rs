// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::restore_db_cluster_from_snapshot::_restore_db_cluster_from_snapshot_output::RestoreDbClusterFromSnapshotOutputBuilder;

pub use crate::operation::restore_db_cluster_from_snapshot::_restore_db_cluster_from_snapshot_input::RestoreDbClusterFromSnapshotInputBuilder;

/// Fluent builder constructing a request to `RestoreDBClusterFromSnapshot`.
///
/// <p>Creates a new DB cluster from a DB snapshot or DB cluster snapshot.</p>
/// <p>The target DB cluster is created from the source snapshot with a default configuration. If you don't specify a security group, the new DB cluster is associated with the default security group.</p> <note>
/// <p>This action only restores the DB cluster, not the DB instances for that DB cluster. You must invoke the <code>CreateDBInstance</code> action to create DB instances for the restored DB cluster, specifying the identifier of the restored DB cluster in <code>DBClusterIdentifier</code>. You can create DB instances only after the <code>RestoreDBClusterFromSnapshot</code> action has completed and the DB cluster is available.</p>
/// </note>
/// <p>For more information on Amazon Aurora DB clusters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/CHAP_AuroraOverview.html"> What is Amazon Aurora?</a> in the <i>Amazon Aurora User Guide</i>.</p>
/// <p>For more information on Multi-AZ DB clusters, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/multi-az-db-clusters-concepts.html"> Multi-AZ deployments with two readable standby DB instances</a> in the <i>Amazon RDS User Guide.</i> </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RestoreDBClusterFromSnapshotFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::restore_db_cluster_from_snapshot::builders::RestoreDbClusterFromSnapshotInputBuilder
            }
impl RestoreDBClusterFromSnapshotFluentBuilder {
    /// Creates a new `RestoreDBClusterFromSnapshot`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshot,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::restore_db_cluster_from_snapshot::RestoreDbClusterFromSnapshotOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::restore_db_cluster_from_snapshot::RestoreDBClusterFromSnapshotError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `AvailabilityZones`.
    ///
    /// To override the contents of this collection use [`set_availability_zones`](Self::set_availability_zones).
    ///
    /// <p>Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn availability_zones(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.availability_zones(input.into());
        self
    }
    /// <p>Provides the list of Availability Zones (AZs) where instances in the restored DB cluster can be created.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_availability_zones(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_availability_zones(input);
        self
    }
    /// <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li>
    /// <li> <p>First character must be a letter</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li>
    /// </ul>
    /// <p>Example: <code>my-snapshot-id</code> </p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.db_cluster_identifier(input.into());
        self
    }
    /// <p>The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must contain from 1 to 63 letters, numbers, or hyphens</p> </li>
    /// <li> <p>First character must be a letter</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens</p> </li>
    /// </ul>
    /// <p>Example: <code>my-snapshot-id</code> </p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_db_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_db_cluster_identifier(input);
        self
    }
    /// <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p>
    /// <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the identifier of an existing Snapshot.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn snapshot_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.snapshot_identifier(input.into());
        self
    }
    /// <p>The identifier for the DB snapshot or DB cluster snapshot to restore from.</p>
    /// <p>You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>Must match the identifier of an existing Snapshot.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_snapshot_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_snapshot_identifier(input);
        self
    }
    /// <p>The database engine to use for the new DB cluster.</p>
    /// <p>Default: The same as source</p>
    /// <p>Constraint: Must be compatible with the engine of the source</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.engine(input.into());
        self
    }
    /// <p>The database engine to use for the new DB cluster.</p>
    /// <p>Default: The same as source</p>
    /// <p>Constraint: Must be compatible with the engine of the source</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_engine(input);
        self
    }
    /// <p>The version of the database engine to use for the new DB cluster.</p>
    /// <p>To list all of the available engine versions for MySQL 5.6-compatible Aurora, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p>To list all of the available engine versions for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p>To list all of the available engine versions for Aurora PostgreSQL, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p>To list all of the available engine versions for RDS for MySQL, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine mysql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p>To list all of the available engine versions for RDS for PostgreSQL, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine postgres --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Updates.html">MySQL on Amazon RDS Versions</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p> <b>Aurora PostgreSQL</b> </p>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.20180305.html">Amazon Aurora PostgreSQL releases and engine versions</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p> <b>MySQL</b> </p>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
    /// <p> <b>PostgreSQL</b> </p>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts">Amazon RDS for PostgreSQL versions and extensions</a> in the <i>Amazon RDS User Guide.</i> </p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.engine_version(input.into());
        self
    }
    /// <p>The version of the database engine to use for the new DB cluster.</p>
    /// <p>To list all of the available engine versions for MySQL 5.6-compatible Aurora, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p>To list all of the available engine versions for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p>To list all of the available engine versions for Aurora PostgreSQL, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p>To list all of the available engine versions for RDS for MySQL, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine mysql --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p>To list all of the available engine versions for RDS for PostgreSQL, use the following command:</p>
    /// <p> <code>aws rds describe-db-engine-versions --engine postgres --query "DBEngineVersions[].EngineVersion"</code> </p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Updates.html">MySQL on Amazon RDS Versions</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p> <b>Aurora PostgreSQL</b> </p>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.20180305.html">Amazon Aurora PostgreSQL releases and engine versions</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p> <b>MySQL</b> </p>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt">MySQL on Amazon RDS Versions</a> in the <i>Amazon RDS User Guide.</i> </p>
    /// <p> <b>PostgreSQL</b> </p>
    /// <p>See <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts">Amazon RDS for PostgreSQL versions and extensions</a> in the <i>Amazon RDS User Guide.</i> </p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_engine_version(input);
        self
    }
    /// <p>The port number on which the new DB cluster accepts connections.</p>
    /// <p>Constraints: This value must be <code>1150-65535</code> </p>
    /// <p>Default: The same port as the original DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn port(mut self, input: i32) -> Self {
        self.inner = self.inner.port(input);
        self
    }
    /// <p>The port number on which the new DB cluster accepts connections.</p>
    /// <p>Constraints: This value must be <code>1150-65535</code> </p>
    /// <p>Default: The same port as the original DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_port(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_port(input);
        self
    }
    /// <p>The name of the DB subnet group to use for the new DB cluster.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p>
    /// <p>Example: <code>mydbsubnetgroup</code> </p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn db_subnet_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.db_subnet_group_name(input.into());
        self
    }
    /// <p>The name of the DB subnet group to use for the new DB cluster.</p>
    /// <p>Constraints: If supplied, must match the name of an existing DB subnet group.</p>
    /// <p>Example: <code>mydbsubnetgroup</code> </p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_db_subnet_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_db_subnet_group_name(input);
        self
    }
    /// <p>The database name for the restored DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn database_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.database_name(input.into());
        self
    }
    /// <p>The database name for the restored DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_database_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_database_name(input);
        self
    }
    /// <p>The name of the option group to use for the restored DB cluster.</p>
    /// <p>DB clusters are associated with a default option group that can't be modified.</p>
    pub fn option_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.option_group_name(input.into());
        self
    }
    /// <p>The name of the option group to use for the restored DB cluster.</p>
    /// <p>DB clusters are associated with a default option group that can't be modified.</p>
    pub fn set_option_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_option_group_name(input);
        self
    }
    /// Appends an item to `VpcSecurityGroupIds`.
    ///
    /// To override the contents of this collection use [`set_vpc_security_group_ids`](Self::set_vpc_security_group_ids).
    ///
    /// <p>A list of VPC security groups that the new DB cluster will belong to.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn vpc_security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.vpc_security_group_ids(input.into());
        self
    }
    /// <p>A list of VPC security groups that the new DB cluster will belong to.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_vpc_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_vpc_security_group_ids(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be assigned to the restored DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The tags to be assigned to the restored DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The Amazon Web Services KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>When you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p>
    /// <ul>
    /// <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li>
    /// <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.kms_key_id(input.into());
        self
    }
    /// <p>The Amazon Web Services KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot.</p>
    /// <p>The Amazon Web Services KMS key identifier is the key ARN, key ID, alias ARN, or alias name for the KMS key. To use a KMS key in a different Amazon Web Services account, specify the key ARN or alias ARN.</p>
    /// <p>When you don't specify a value for the <code>KmsKeyId</code> parameter, then the following occurs:</p>
    /// <ul>
    /// <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.</p> </li>
    /// <li> <p>If the DB snapshot or DB cluster snapshot in <code>SnapshotIdentifier</code> isn't encrypted, then the restored DB cluster isn't encrypted.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_kms_key_id(input);
        self
    }
    /// <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn enable_iam_database_authentication(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_iam_database_authentication(input);
        self
    }
    /// <p>A value that indicates whether to enable mapping of Amazon Web Services Identity and Access Management (IAM) accounts to database accounts. By default, mapping isn't enabled.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html"> IAM Database Authentication</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_enable_iam_database_authentication(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.inner = self.inner.set_enable_iam_database_authentication(input);
        self
    }
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <note>
    /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
    /// </note>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn backtrack_window(mut self, input: i64) -> Self {
        self.inner = self.inner.backtrack_window(input);
        self
    }
    /// <p>The target backtrack window, in seconds. To disable backtracking, set this value to 0.</p> <note>
    /// <p>Currently, Backtrack is only supported for Aurora MySQL DB clusters.</p>
    /// </note>
    /// <p>Default: 0</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If specified, this value must be set to a number from 0 to 259,200 (72 hours).</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_backtrack_window(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_backtrack_window(input);
        self
    }
    /// Appends an item to `EnableCloudwatchLogsExports`.
    ///
    /// To override the contents of this collection use [`set_enable_cloudwatch_logs_exports`](Self::set_enable_cloudwatch_logs_exports).
    ///
    /// <p>The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used.</p>
    /// <p> <b>RDS for MySQL</b> </p>
    /// <p>Possible values are <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p> <b>RDS for PostgreSQL</b> </p>
    /// <p>Possible values are <code>postgresql</code> and <code>upgrade</code>.</p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p> <b>Aurora PostgreSQL</b> </p>
    /// <p>Possible value is <code>postgresql</code>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon RDS, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn enable_cloudwatch_logs_exports(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.enable_cloudwatch_logs_exports(input.into());
        self
    }
    /// <p>The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used.</p>
    /// <p> <b>RDS for MySQL</b> </p>
    /// <p>Possible values are <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p> <b>RDS for PostgreSQL</b> </p>
    /// <p>Possible values are <code>postgresql</code> and <code>upgrade</code>.</p>
    /// <p> <b>Aurora MySQL</b> </p>
    /// <p>Possible values are <code>audit</code>, <code>error</code>, <code>general</code>, and <code>slowquery</code>.</p>
    /// <p> <b>Aurora PostgreSQL</b> </p>
    /// <p>Possible value is <code>postgresql</code>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon RDS, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>For more information about exporting CloudWatch Logs for Amazon Aurora, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch">Publishing Database Logs to Amazon CloudWatch Logs</a> in the <i>Amazon Aurora User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_enable_cloudwatch_logs_exports(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_enable_cloudwatch_logs_exports(input);
        self
    }
    /// <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html"> CreateDBCluster</a>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn engine_mode(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.engine_mode(input.into());
        self
    }
    /// <p>The DB engine mode of the DB cluster, either <code>provisioned</code>, <code>serverless</code>, <code>parallelquery</code>, <code>global</code>, or <code>multimaster</code>.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBCluster.html"> CreateDBCluster</a>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_engine_mode(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_engine_mode(input);
        self
    }
    /// <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn scaling_configuration(mut self, input: crate::types::ScalingConfiguration) -> Self {
        self.inner = self.inner.scaling_configuration(input);
        self
    }
    /// <p>For DB clusters in <code>serverless</code> DB engine mode, the scaling properties of the DB cluster.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_scaling_configuration(
        mut self,
        input: std::option::Option<crate::types::ScalingConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_scaling_configuration(input);
        self
    }
    /// <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li>
    /// <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn db_cluster_parameter_group_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.db_cluster_parameter_group_name(input.into());
        self
    }
    /// <p>The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match the name of an existing default DB cluster parameter group.</p> </li>
    /// <li> <p>Must be 1 to 255 letters, numbers, or hyphens.</p> </li>
    /// <li> <p>First character must be a letter.</p> </li>
    /// <li> <p>Can't end with a hyphen or contain two consecutive hyphens.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_db_cluster_parameter_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_db_cluster_parameter_group_name(input);
        self
    }
    /// <p>A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn deletion_protection(mut self, input: bool) -> Self {
        self.inner = self.inner.deletion_protection(input);
        self
    }
    /// <p>A value that indicates whether the DB cluster has deletion protection enabled. The database can't be deleted when deletion protection is enabled. By default, deletion protection isn't enabled.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_deletion_protection(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_deletion_protection(input);
        self
    }
    /// <p>A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn copy_tags_to_snapshot(mut self, input: bool) -> Self {
        self.inner = self.inner.copy_tags_to_snapshot(input);
        self
    }
    /// <p>A value that indicates whether to copy all tags from the restored DB cluster to snapshots of the restored DB cluster. The default is not to copy them.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_copy_tags_to_snapshot(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_copy_tags_to_snapshot(input);
        self
    }
    /// <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain(input.into());
        self
    }
    /// <p>Specify the Active Directory directory ID to restore the DB cluster in. The domain must be created prior to this operation. Currently, only MySQL, Microsoft SQL Server, Oracle, and PostgreSQL DB instances can be created in an Active Directory Domain.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/kerberos-authentication.html"> Kerberos Authentication</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain(input);
        self
    }
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn domain_iam_role_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_iam_role_name(input.into());
        self
    }
    /// <p>Specify the name of the IAM role to be used when making API calls to the Directory Service.</p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_domain_iam_role_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_domain_iam_role_name(input);
        self
    }
    /// <p>The compute and memory capacity of the each DB instance in the Multi-AZ DB cluster, for example db.m6gd.xlarge. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines.</p>
    /// <p>For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn db_cluster_instance_class(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.db_cluster_instance_class(input.into());
        self
    }
    /// <p>The compute and memory capacity of the each DB instance in the Multi-AZ DB cluster, for example db.m6gd.xlarge. Not all DB instance classes are available in all Amazon Web Services Regions, or for all database engines.</p>
    /// <p>For the full list of DB instance classes, and availability for your engine, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html">DB Instance Class</a> in the <i>Amazon RDS User Guide.</i> </p>
    /// <p>Valid for: Multi-AZ DB clusters only</p>
    pub fn set_db_cluster_instance_class(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_db_cluster_instance_class(input);
        self
    }
    /// <p>Specifies the storage type to be associated with the each DB instance in the Multi-AZ DB cluster.</p>
    /// <p>Valid values: <code>io1</code> </p>
    /// <p>When specified, a value for the <code>Iops</code> parameter is required.</p>
    /// <p>Default: <code>io1</code> </p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn storage_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.storage_type(input.into());
        self
    }
    /// <p>Specifies the storage type to be associated with the each DB instance in the Multi-AZ DB cluster.</p>
    /// <p>Valid values: <code>io1</code> </p>
    /// <p>When specified, a value for the <code>Iops</code> parameter is required.</p>
    /// <p>Default: <code>io1</code> </p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_storage_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_storage_type(input);
        self
    }
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster.</p>
    /// <p>For information about valid IOPS values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Constraints: Must be a multiple between .5 and 50 of the storage amount for the DB instance.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn iops(mut self, input: i32) -> Self {
        self.inner = self.inner.iops(input);
        self
    }
    /// <p>The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for each DB instance in the Multi-AZ DB cluster.</p>
    /// <p>For information about valid IOPS values, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS">Amazon RDS Provisioned IOPS storage</a> in the <i>Amazon RDS User Guide</i>.</p>
    /// <p>Constraints: Must be a multiple between .5 and 50 of the storage amount for the DB instance.</p>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_iops(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_iops(input);
        self
    }
    /// <p>A value that indicates whether the DB cluster is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address.</p>
    /// <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
    /// <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li> <p>If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB cluster is private.</p> </li>
    /// <li> <p>If the default VPC in the target Region has an internet gateway attached to it, the DB cluster is public.</p> </li>
    /// </ul>
    /// <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li> <p>If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB cluster is private.</p> </li>
    /// <li> <p>If the subnets are part of a VPC that has an internet gateway attached to it, the DB cluster is public.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn publicly_accessible(mut self, input: bool) -> Self {
        self.inner = self.inner.publicly_accessible(input);
        self
    }
    /// <p>A value that indicates whether the DB cluster is publicly accessible.</p>
    /// <p>When the DB cluster is publicly accessible, its Domain Name System (DNS) endpoint resolves to the private IP address from within the DB cluster's virtual private cloud (VPC). It resolves to the public IP address from outside of the DB cluster's VPC. Access to the DB cluster is ultimately controlled by the security group it uses. That public access is not permitted if the security group assigned to the DB cluster doesn't permit it.</p>
    /// <p>When the DB cluster isn't publicly accessible, it is an internal DB cluster with a DNS name that resolves to a private IP address.</p>
    /// <p>Default: The default behavior varies depending on whether <code>DBSubnetGroupName</code> is specified.</p>
    /// <p>If <code>DBSubnetGroupName</code> isn't specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li> <p>If the default VPC in the target Region doesn’t have an internet gateway attached to it, the DB cluster is private.</p> </li>
    /// <li> <p>If the default VPC in the target Region has an internet gateway attached to it, the DB cluster is public.</p> </li>
    /// </ul>
    /// <p>If <code>DBSubnetGroupName</code> is specified, and <code>PubliclyAccessible</code> isn't specified, the following applies:</p>
    /// <ul>
    /// <li> <p>If the subnets are part of a VPC that doesn’t have an internet gateway attached to it, the DB cluster is private.</p> </li>
    /// <li> <p>If the subnets are part of a VPC that has an internet gateway attached to it, the DB cluster is public.</p> </li>
    /// </ul>
    /// <p>Valid for: Aurora DB clusters and Multi-AZ DB clusters</p>
    pub fn set_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_publicly_accessible(input);
        self
    }
    /// <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn serverless_v2_scaling_configuration(
        mut self,
        input: crate::types::ServerlessV2ScalingConfiguration,
    ) -> Self {
        self.inner = self.inner.serverless_v2_scaling_configuration(input);
        self
    }
    /// <p>Contains the scaling configuration of an Aurora Serverless v2 DB cluster.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html">Using Amazon Aurora Serverless v2</a> in the <i>Amazon Aurora User Guide</i>.</p>
    pub fn set_serverless_v2_scaling_configuration(
        mut self,
        input: std::option::Option<crate::types::ServerlessV2ScalingConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_serverless_v2_scaling_configuration(input);
        self
    }
    /// <p>The network type of the DB cluster.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p> <code>IPV4</code> </p> </li>
    /// <li> <p> <code>DUAL</code> </p> </li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn network_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_type(input.into());
        self
    }
    /// <p>The network type of the DB cluster.</p>
    /// <p>Valid values:</p>
    /// <ul>
    /// <li> <p> <code>IPV4</code> </p> </li>
    /// <li> <p> <code>DUAL</code> </p> </li>
    /// </ul>
    /// <p>The network type is determined by the <code>DBSubnetGroup</code> specified for the DB cluster. A <code>DBSubnetGroup</code> can support only the IPv4 protocol or the IPv4 and the IPv6 protocols (<code>DUAL</code>).</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_VPC.WorkingWithRDSInstanceinaVPC.html"> Working with a DB instance in a VPC</a> in the <i>Amazon Aurora User Guide.</i> </p>
    /// <p>Valid for: Aurora DB clusters only</p>
    pub fn set_network_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_network_type(input);
        self
    }
}
