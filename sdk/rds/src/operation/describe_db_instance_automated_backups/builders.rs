// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_db_instance_automated_backups::_describe_db_instance_automated_backups_output::DescribeDbInstanceAutomatedBackupsOutputBuilder;

pub use crate::operation::describe_db_instance_automated_backups::_describe_db_instance_automated_backups_input::DescribeDbInstanceAutomatedBackupsInputBuilder;

/// Fluent builder constructing a request to `DescribeDBInstanceAutomatedBackups`.
///
/// <p>Displays backups for both current and deleted instances. For example, use this operation to find details about automated backups for previously deleted instances. Current instances with retention periods greater than zero (0) are returned for both the <code>DescribeDBInstanceAutomatedBackups</code> and <code>DescribeDBInstances</code> operations.</p>
/// <p>All parameters are optional.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDBInstanceAutomatedBackupsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::describe_db_instance_automated_backups::builders::DescribeDbInstanceAutomatedBackupsInputBuilder
            }
impl DescribeDBInstanceAutomatedBackupsFluentBuilder {
    /// Creates a new `DescribeDBInstanceAutomatedBackups`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::describe_db_instance_automated_backups::DescribeDBInstanceAutomatedBackups, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::describe_db_instance_automated_backups::DescribeDBInstanceAutomatedBackupsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::describe_db_instance_automated_backups::DescribeDbInstanceAutomatedBackupsOutput, aws_smithy_http::result::SdkError<crate::operation::describe_db_instance_automated_backups::DescribeDBInstanceAutomatedBackupsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_db_instance_automated_backups::paginator::DescribeDbInstanceAutomatedBackupsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::describe_db_instance_automated_backups::paginator::DescribeDbInstanceAutomatedBackupsPaginator{
        crate::operation::describe_db_instance_automated_backups::paginator::DescribeDbInstanceAutomatedBackupsPaginator::new(self.handle, self.inner)
    }
    /// <p>The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive.</p>
    pub fn dbi_resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.dbi_resource_id(input.into());
        self
    }
    /// <p>The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive.</p>
    pub fn set_dbi_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_dbi_resource_id(input);
        self
    }
    /// <p>(Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive.</p>
    pub fn db_instance_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.db_instance_identifier(input.into());
        self
    }
    /// <p>(Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive.</p>
    pub fn set_db_instance_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_db_instance_identifier(input);
        self
    }
    /// Appends an item to `Filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>A filter that specifies which resources to return based on status.</p>
    /// <p>Supported filters are the following:</p>
    /// <ul>
    /// <li> <p> <code>status</code> </p>
    /// <ul>
    /// <li> <p> <code>active</code> - automated backups for current instances</p> </li>
    /// <li> <p> <code>retained</code> - automated backups for deleted instances and after backup replication is stopped</p> </li>
    /// <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs). The results list includes only information about the DB instance automated backups identified by these ARNs.</p> </li>
    /// <li> <p> <code>dbi-resource-id</code> - Accepts DB resource identifiers and Amazon Resource Names (ARNs). The results list includes only information about the DB instance resources identified by these ARNs.</p> </li>
    /// </ul>
    /// <p>Returns all resources by default. The status for each resource is specified in the response.</p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>A filter that specifies which resources to return based on status.</p>
    /// <p>Supported filters are the following:</p>
    /// <ul>
    /// <li> <p> <code>status</code> </p>
    /// <ul>
    /// <li> <p> <code>active</code> - automated backups for current instances</p> </li>
    /// <li> <p> <code>retained</code> - automated backups for deleted instances and after backup replication is stopped</p> </li>
    /// <li> <p> <code>creating</code> - automated backups that are waiting for the first automated snapshot to be available</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db-instance-id</code> - Accepts DB instance identifiers and Amazon Resource Names (ARNs). The results list includes only information about the DB instance automated backups identified by these ARNs.</p> </li>
    /// <li> <p> <code>dbi-resource-id</code> - Accepts DB resource identifiers and Amazon Resource Names (ARNs). The results list includes only information about the DB instance resources identified by these ARNs.</p> </li>
    /// </ul>
    /// <p>Returns all resources by default. The status for each resource is specified in the response.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.inner = self.inner.max_records(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so that you can retrieve the remaining results.</p>
    pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_records(input);
        self
    }
    /// <p>The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.marker(input.into());
        self
    }
    /// <p>The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_marker(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replicated automated backups, for example, <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn db_instance_automated_backups_arn(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.db_instance_automated_backups_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the replicated automated backups, for example, <code>arn:aws:rds:us-east-1:123456789012:auto-backup:ab-L2IJCEXJP7XQ7HOJ4SIEXAMPLE</code>.</p>
    /// <p>This setting doesn't apply to RDS Custom.</p>
    pub fn set_db_instance_automated_backups_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_db_instance_automated_backups_arn(input);
        self
    }
}
