// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_engine_default_parameters::_describe_engine_default_parameters_output::DescribeEngineDefaultParametersOutputBuilder;

pub use crate::operation::describe_engine_default_parameters::_describe_engine_default_parameters_input::DescribeEngineDefaultParametersInputBuilder;

/// Fluent builder constructing a request to `DescribeEngineDefaultParameters`.
///
/// <p>Returns the default engine and system parameter information for the specified database engine.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeEngineDefaultParametersFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::describe_engine_default_parameters::builders::DescribeEngineDefaultParametersInputBuilder
            }
impl DescribeEngineDefaultParametersFluentBuilder {
    /// Creates a new `DescribeEngineDefaultParameters`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::describe_engine_default_parameters::DescribeEngineDefaultParameters, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::describe_engine_default_parameters::DescribeEngineDefaultParametersError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::describe_engine_default_parameters::DescribeEngineDefaultParametersOutput, aws_smithy_http::result::SdkError<crate::operation::describe_engine_default_parameters::DescribeEngineDefaultParametersError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::describe_engine_default_parameters::paginator::DescribeEngineDefaultParametersPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::describe_engine_default_parameters::paginator::DescribeEngineDefaultParametersPaginator{
        crate::operation::describe_engine_default_parameters::paginator::DescribeEngineDefaultParametersPaginator::new(self.handle, self.inner)
    }
    /// <p>The name of the DB parameter group family.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>aurora5.6</code> </p> </li>
    /// <li> <p> <code>aurora-mysql5.7</code> </p> </li>
    /// <li> <p> <code>aurora-mysql8.0</code> </p> </li>
    /// <li> <p> <code>aurora-postgresql10</code> </p> </li>
    /// <li> <p> <code>aurora-postgresql11</code> </p> </li>
    /// <li> <p> <code>aurora-postgresql12</code> </p> </li>
    /// <li> <p> <code>aurora-postgresql13</code> </p> </li>
    /// <li> <p> <code>aurora-postgresql14</code> </p> </li>
    /// <li> <p> <code>custom-oracle-ee-19</code> </p> </li>
    /// <li> <p> <code>mariadb10.2</code> </p> </li>
    /// <li> <p> <code>mariadb10.3</code> </p> </li>
    /// <li> <p> <code>mariadb10.4</code> </p> </li>
    /// <li> <p> <code>mariadb10.5</code> </p> </li>
    /// <li> <p> <code>mariadb10.6</code> </p> </li>
    /// <li> <p> <code>mysql5.7</code> </p> </li>
    /// <li> <p> <code>mysql8.0</code> </p> </li>
    /// <li> <p> <code>oracle-ee-19</code> </p> </li>
    /// <li> <p> <code>oracle-ee-cdb-19</code> </p> </li>
    /// <li> <p> <code>oracle-ee-cdb-21</code> </p> </li>
    /// <li> <p> <code>oracle-se2-19</code> </p> </li>
    /// <li> <p> <code>oracle-se2-cdb-19</code> </p> </li>
    /// <li> <p> <code>oracle-se2-cdb-21</code> </p> </li>
    /// <li> <p> <code>postgres10</code> </p> </li>
    /// <li> <p> <code>postgres11</code> </p> </li>
    /// <li> <p> <code>postgres12</code> </p> </li>
    /// <li> <p> <code>postgres13</code> </p> </li>
    /// <li> <p> <code>postgres14</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee-11.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee-12.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee-13.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee-14.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee-15.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex-11.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex-12.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex-13.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex-14.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex-15.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-se-11.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-se-12.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-se-13.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-se-14.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-se-15.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-web-11.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-web-12.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-web-13.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-web-14.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-web-15.0</code> </p> </li>
    /// </ul>
    pub fn db_parameter_group_family(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.db_parameter_group_family(input.into());
        self
    }
    /// <p>The name of the DB parameter group family.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>aurora5.6</code> </p> </li>
    /// <li> <p> <code>aurora-mysql5.7</code> </p> </li>
    /// <li> <p> <code>aurora-mysql8.0</code> </p> </li>
    /// <li> <p> <code>aurora-postgresql10</code> </p> </li>
    /// <li> <p> <code>aurora-postgresql11</code> </p> </li>
    /// <li> <p> <code>aurora-postgresql12</code> </p> </li>
    /// <li> <p> <code>aurora-postgresql13</code> </p> </li>
    /// <li> <p> <code>aurora-postgresql14</code> </p> </li>
    /// <li> <p> <code>custom-oracle-ee-19</code> </p> </li>
    /// <li> <p> <code>mariadb10.2</code> </p> </li>
    /// <li> <p> <code>mariadb10.3</code> </p> </li>
    /// <li> <p> <code>mariadb10.4</code> </p> </li>
    /// <li> <p> <code>mariadb10.5</code> </p> </li>
    /// <li> <p> <code>mariadb10.6</code> </p> </li>
    /// <li> <p> <code>mysql5.7</code> </p> </li>
    /// <li> <p> <code>mysql8.0</code> </p> </li>
    /// <li> <p> <code>oracle-ee-19</code> </p> </li>
    /// <li> <p> <code>oracle-ee-cdb-19</code> </p> </li>
    /// <li> <p> <code>oracle-ee-cdb-21</code> </p> </li>
    /// <li> <p> <code>oracle-se2-19</code> </p> </li>
    /// <li> <p> <code>oracle-se2-cdb-19</code> </p> </li>
    /// <li> <p> <code>oracle-se2-cdb-21</code> </p> </li>
    /// <li> <p> <code>postgres10</code> </p> </li>
    /// <li> <p> <code>postgres11</code> </p> </li>
    /// <li> <p> <code>postgres12</code> </p> </li>
    /// <li> <p> <code>postgres13</code> </p> </li>
    /// <li> <p> <code>postgres14</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee-11.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee-12.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee-13.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee-14.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee-15.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex-11.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex-12.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex-13.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex-14.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex-15.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-se-11.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-se-12.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-se-13.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-se-14.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-se-15.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-web-11.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-web-12.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-web-13.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-web-14.0</code> </p> </li>
    /// <li> <p> <code>sqlserver-web-15.0</code> </p> </li>
    /// </ul>
    pub fn set_db_parameter_group_family(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_db_parameter_group_family(input);
        self
    }
    /// Appends an item to `Filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>This parameter isn't currently supported.</p>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        self.inner = self.inner.filters(input);
        self
    }
    /// <p>This parameter isn't currently supported.</p>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.inner = self.inner.set_filters(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.inner = self.inner.max_records(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more records exist than the specified <code>MaxRecords</code> value, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_records(input);
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.marker(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous <code>DescribeEngineDefaultParameters</code> request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_marker(input);
        self
    }
}
