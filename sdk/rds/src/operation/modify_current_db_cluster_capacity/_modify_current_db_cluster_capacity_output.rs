// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ModifyCurrentDbClusterCapacityOutput {
    /// <p>A user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.</p>
    #[doc(hidden)]
    pub db_cluster_identifier: std::option::Option<std::string::String>,
    /// <p>A value that specifies the capacity that the DB cluster scales to next.</p>
    #[doc(hidden)]
    pub pending_capacity: std::option::Option<i32>,
    /// <p>The current capacity of the DB cluster.</p>
    #[doc(hidden)]
    pub current_capacity: std::option::Option<i32>,
    /// <p>The number of seconds before a call to <code>ModifyCurrentDBClusterCapacity</code> times out.</p>
    #[doc(hidden)]
    pub seconds_before_timeout: std::option::Option<i32>,
    /// <p>The timeout action of a call to <code>ModifyCurrentDBClusterCapacity</code>, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p>
    #[doc(hidden)]
    pub timeout_action: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ModifyCurrentDbClusterCapacityOutput {
    /// <p>A user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.</p>
    pub fn db_cluster_identifier(&self) -> std::option::Option<&str> {
        self.db_cluster_identifier.as_deref()
    }
    /// <p>A value that specifies the capacity that the DB cluster scales to next.</p>
    pub fn pending_capacity(&self) -> std::option::Option<i32> {
        self.pending_capacity
    }
    /// <p>The current capacity of the DB cluster.</p>
    pub fn current_capacity(&self) -> std::option::Option<i32> {
        self.current_capacity
    }
    /// <p>The number of seconds before a call to <code>ModifyCurrentDBClusterCapacity</code> times out.</p>
    pub fn seconds_before_timeout(&self) -> std::option::Option<i32> {
        self.seconds_before_timeout
    }
    /// <p>The timeout action of a call to <code>ModifyCurrentDBClusterCapacity</code>, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p>
    pub fn timeout_action(&self) -> std::option::Option<&str> {
        self.timeout_action.as_deref()
    }
}
impl aws_http::request_id::RequestId for ModifyCurrentDbClusterCapacityOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ModifyCurrentDbClusterCapacityOutput {
    /// Creates a new builder-style object to manufacture [`ModifyCurrentDbClusterCapacityOutput`](crate::operation::modify_current_db_cluster_capacity::ModifyCurrentDbClusterCapacityOutput).
    pub fn builder() -> crate::operation::modify_current_db_cluster_capacity::builders::ModifyCurrentDbClusterCapacityOutputBuilder{
        crate::operation::modify_current_db_cluster_capacity::builders::ModifyCurrentDbClusterCapacityOutputBuilder::default()
    }
}

/// A builder for [`ModifyCurrentDbClusterCapacityOutput`](crate::operation::modify_current_db_cluster_capacity::ModifyCurrentDbClusterCapacityOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ModifyCurrentDbClusterCapacityOutputBuilder {
    pub(crate) db_cluster_identifier: std::option::Option<std::string::String>,
    pub(crate) pending_capacity: std::option::Option<i32>,
    pub(crate) current_capacity: std::option::Option<i32>,
    pub(crate) seconds_before_timeout: std::option::Option<i32>,
    pub(crate) timeout_action: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ModifyCurrentDbClusterCapacityOutputBuilder {
    /// <p>A user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.</p>
    pub fn db_cluster_identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_cluster_identifier = Some(input.into());
        self
    }
    /// <p>A user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.</p>
    pub fn set_db_cluster_identifier(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_cluster_identifier = input;
        self
    }
    /// <p>A value that specifies the capacity that the DB cluster scales to next.</p>
    pub fn pending_capacity(mut self, input: i32) -> Self {
        self.pending_capacity = Some(input);
        self
    }
    /// <p>A value that specifies the capacity that the DB cluster scales to next.</p>
    pub fn set_pending_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.pending_capacity = input;
        self
    }
    /// <p>The current capacity of the DB cluster.</p>
    pub fn current_capacity(mut self, input: i32) -> Self {
        self.current_capacity = Some(input);
        self
    }
    /// <p>The current capacity of the DB cluster.</p>
    pub fn set_current_capacity(mut self, input: std::option::Option<i32>) -> Self {
        self.current_capacity = input;
        self
    }
    /// <p>The number of seconds before a call to <code>ModifyCurrentDBClusterCapacity</code> times out.</p>
    pub fn seconds_before_timeout(mut self, input: i32) -> Self {
        self.seconds_before_timeout = Some(input);
        self
    }
    /// <p>The number of seconds before a call to <code>ModifyCurrentDBClusterCapacity</code> times out.</p>
    pub fn set_seconds_before_timeout(mut self, input: std::option::Option<i32>) -> Self {
        self.seconds_before_timeout = input;
        self
    }
    /// <p>The timeout action of a call to <code>ModifyCurrentDBClusterCapacity</code>, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p>
    pub fn timeout_action(mut self, input: impl Into<std::string::String>) -> Self {
        self.timeout_action = Some(input.into());
        self
    }
    /// <p>The timeout action of a call to <code>ModifyCurrentDBClusterCapacity</code>, either <code>ForceApplyCapacityChange</code> or <code>RollbackCapacityChange</code>.</p>
    pub fn set_timeout_action(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.timeout_action = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ModifyCurrentDbClusterCapacityOutput`](crate::operation::modify_current_db_cluster_capacity::ModifyCurrentDbClusterCapacityOutput).
    pub fn build(
        self,
    ) -> crate::operation::modify_current_db_cluster_capacity::ModifyCurrentDbClusterCapacityOutput
    {
        crate::operation::modify_current_db_cluster_capacity::ModifyCurrentDbClusterCapacityOutput {
            db_cluster_identifier: self.db_cluster_identifier,
            pending_capacity: self.pending_capacity,
            current_capacity: self.current_capacity,
            seconds_before_timeout: self.seconds_before_timeout,
            timeout_action: self.timeout_action,
            _request_id: self._request_id,
        }
    }
}
