// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDbEngineVersionsInput {
    /// <p>The database engine to return.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-postgresql</code> </p> </li>
    /// <li> <p> <code>mariadb</code> </p> </li>
    /// <li> <p> <code>mysql</code> </p> </li>
    /// <li> <p> <code>oracle-ee</code> </p> </li>
    /// <li> <p> <code>oracle-ee-cdb</code> </p> </li>
    /// <li> <p> <code>oracle-se2</code> </p> </li>
    /// <li> <p> <code>oracle-se2-cdb</code> </p> </li>
    /// <li> <p> <code>postgres</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee</code> </p> </li>
    /// <li> <p> <code>sqlserver-se</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex</code> </p> </li>
    /// <li> <p> <code>sqlserver-web</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub engine: std::option::Option<std::string::String>,
    /// <p>The database engine version to return.</p>
    /// <p>Example: <code>5.1.49</code> </p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<std::string::String>,
    /// <p>The name of a specific DB parameter group family to return details for.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub db_parameter_group_family: std::option::Option<std::string::String>,
    /// <p>A filter that specifies one or more DB engine versions to describe.</p>
    /// <p>Supported filters:</p>
    /// <ul>
    /// <li> <p> <code>db-parameter-group-family</code> - Accepts parameter groups family names. The results list only includes information about the DB engine versions for these parameter group families.</p> </li>
    /// <li> <p> <code>engine</code> - Accepts engine names. The results list only includes information about the DB engine versions for these engines.</p> </li>
    /// <li> <p> <code>engine-mode</code> - Accepts DB engine modes. The results list only includes information about the DB engine versions for these engine modes. Valid DB engine modes are the following:</p>
    /// <ul>
    /// <li> <p> <code>global</code> </p> </li>
    /// <li> <p> <code>multimaster</code> </p> </li>
    /// <li> <p> <code>parallelquery</code> </p> </li>
    /// <li> <p> <code>provisioned</code> </p> </li>
    /// <li> <p> <code>serverless</code> </p> </li>
    /// </ul> </li>
    /// <li> <p> <code>engine-version</code> - Accepts engine versions. The results list only includes information about the DB engine versions for these engine versions.</p> </li>
    /// <li> <p> <code>status</code> - Accepts engine version statuses. The results list only includes information about the DB engine versions for these statuses. Valid statuses are the following:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>deprecated</code> </p> </li>
    /// </ul> </li>
    /// </ul>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    /// <p>The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    #[doc(hidden)]
    pub max_records: std::option::Option<i32>,
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.</p>
    #[doc(hidden)]
    pub default_only: bool,
    /// <p>A value that indicates whether to list the supported character sets for each engine version.</p>
    /// <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.</p>
    /// <p>For RDS Custom, the default is not to list supported character sets. If you set <code>ListSupportedCharacterSets</code> to <code>true</code>, RDS Custom returns no results.</p>
    #[doc(hidden)]
    pub list_supported_character_sets: std::option::Option<bool>,
    /// <p>A value that indicates whether to list the supported time zones for each engine version.</p>
    /// <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.</p>
    /// <p>For RDS Custom, the default is not to list supported time zones. If you set <code>ListSupportedTimezones</code> to <code>true</code>, RDS Custom returns no results.</p>
    #[doc(hidden)]
    pub list_supported_timezones: std::option::Option<bool>,
    /// <p>A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.</p>
    #[doc(hidden)]
    pub include_all: std::option::Option<bool>,
}
impl DescribeDbEngineVersionsInput {
    /// <p>The database engine to return.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-postgresql</code> </p> </li>
    /// <li> <p> <code>mariadb</code> </p> </li>
    /// <li> <p> <code>mysql</code> </p> </li>
    /// <li> <p> <code>oracle-ee</code> </p> </li>
    /// <li> <p> <code>oracle-ee-cdb</code> </p> </li>
    /// <li> <p> <code>oracle-se2</code> </p> </li>
    /// <li> <p> <code>oracle-se2-cdb</code> </p> </li>
    /// <li> <p> <code>postgres</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee</code> </p> </li>
    /// <li> <p> <code>sqlserver-se</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex</code> </p> </li>
    /// <li> <p> <code>sqlserver-web</code> </p> </li>
    /// </ul>
    pub fn engine(&self) -> std::option::Option<&str> {
        self.engine.as_deref()
    }
    /// <p>The database engine version to return.</p>
    /// <p>Example: <code>5.1.49</code> </p>
    pub fn engine_version(&self) -> std::option::Option<&str> {
        self.engine_version.as_deref()
    }
    /// <p>The name of a specific DB parameter group family to return details for.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li>
    /// </ul>
    pub fn db_parameter_group_family(&self) -> std::option::Option<&str> {
        self.db_parameter_group_family.as_deref()
    }
    /// <p>A filter that specifies one or more DB engine versions to describe.</p>
    /// <p>Supported filters:</p>
    /// <ul>
    /// <li> <p> <code>db-parameter-group-family</code> - Accepts parameter groups family names. The results list only includes information about the DB engine versions for these parameter group families.</p> </li>
    /// <li> <p> <code>engine</code> - Accepts engine names. The results list only includes information about the DB engine versions for these engines.</p> </li>
    /// <li> <p> <code>engine-mode</code> - Accepts DB engine modes. The results list only includes information about the DB engine versions for these engine modes. Valid DB engine modes are the following:</p>
    /// <ul>
    /// <li> <p> <code>global</code> </p> </li>
    /// <li> <p> <code>multimaster</code> </p> </li>
    /// <li> <p> <code>parallelquery</code> </p> </li>
    /// <li> <p> <code>provisioned</code> </p> </li>
    /// <li> <p> <code>serverless</code> </p> </li>
    /// </ul> </li>
    /// <li> <p> <code>engine-version</code> - Accepts engine versions. The results list only includes information about the DB engine versions for these engine versions.</p> </li>
    /// <li> <p> <code>status</code> - Accepts engine version statuses. The results list only includes information about the DB engine versions for these statuses. Valid statuses are the following:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>deprecated</code> </p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn filters(&self) -> std::option::Option<&[crate::types::Filter]> {
        self.filters.as_deref()
    }
    /// <p>The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(&self) -> std::option::Option<i32> {
        self.max_records
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.</p>
    pub fn default_only(&self) -> bool {
        self.default_only
    }
    /// <p>A value that indicates whether to list the supported character sets for each engine version.</p>
    /// <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.</p>
    /// <p>For RDS Custom, the default is not to list supported character sets. If you set <code>ListSupportedCharacterSets</code> to <code>true</code>, RDS Custom returns no results.</p>
    pub fn list_supported_character_sets(&self) -> std::option::Option<bool> {
        self.list_supported_character_sets
    }
    /// <p>A value that indicates whether to list the supported time zones for each engine version.</p>
    /// <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.</p>
    /// <p>For RDS Custom, the default is not to list supported time zones. If you set <code>ListSupportedTimezones</code> to <code>true</code>, RDS Custom returns no results.</p>
    pub fn list_supported_timezones(&self) -> std::option::Option<bool> {
        self.list_supported_timezones
    }
    /// <p>A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.</p>
    pub fn include_all(&self) -> std::option::Option<bool> {
        self.include_all
    }
}
impl DescribeDbEngineVersionsInput {
    /// Creates a new builder-style object to manufacture [`DescribeDbEngineVersionsInput`](crate::operation::describe_db_engine_versions::DescribeDbEngineVersionsInput).
    pub fn builder(
    ) -> crate::operation::describe_db_engine_versions::builders::DescribeDbEngineVersionsInputBuilder
    {
        crate::operation::describe_db_engine_versions::builders::DescribeDbEngineVersionsInputBuilder::default()
    }
}

/// A builder for [`DescribeDbEngineVersionsInput`](crate::operation::describe_db_engine_versions::DescribeDbEngineVersionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDbEngineVersionsInputBuilder {
    pub(crate) engine: std::option::Option<std::string::String>,
    pub(crate) engine_version: std::option::Option<std::string::String>,
    pub(crate) db_parameter_group_family: std::option::Option<std::string::String>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    pub(crate) max_records: std::option::Option<i32>,
    pub(crate) marker: std::option::Option<std::string::String>,
    pub(crate) default_only: std::option::Option<bool>,
    pub(crate) list_supported_character_sets: std::option::Option<bool>,
    pub(crate) list_supported_timezones: std::option::Option<bool>,
    pub(crate) include_all: std::option::Option<bool>,
}
impl DescribeDbEngineVersionsInputBuilder {
    /// <p>The database engine to return.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-postgresql</code> </p> </li>
    /// <li> <p> <code>mariadb</code> </p> </li>
    /// <li> <p> <code>mysql</code> </p> </li>
    /// <li> <p> <code>oracle-ee</code> </p> </li>
    /// <li> <p> <code>oracle-ee-cdb</code> </p> </li>
    /// <li> <p> <code>oracle-se2</code> </p> </li>
    /// <li> <p> <code>oracle-se2-cdb</code> </p> </li>
    /// <li> <p> <code>postgres</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee</code> </p> </li>
    /// <li> <p> <code>sqlserver-se</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex</code> </p> </li>
    /// <li> <p> <code>sqlserver-web</code> </p> </li>
    /// </ul>
    pub fn engine(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine = Some(input.into());
        self
    }
    /// <p>The database engine to return.</p>
    /// <p>Valid Values:</p>
    /// <ul>
    /// <li> <p> <code>aurora</code> (for MySQL 5.6-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-mysql</code> (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)</p> </li>
    /// <li> <p> <code>aurora-postgresql</code> </p> </li>
    /// <li> <p> <code>mariadb</code> </p> </li>
    /// <li> <p> <code>mysql</code> </p> </li>
    /// <li> <p> <code>oracle-ee</code> </p> </li>
    /// <li> <p> <code>oracle-ee-cdb</code> </p> </li>
    /// <li> <p> <code>oracle-se2</code> </p> </li>
    /// <li> <p> <code>oracle-se2-cdb</code> </p> </li>
    /// <li> <p> <code>postgres</code> </p> </li>
    /// <li> <p> <code>sqlserver-ee</code> </p> </li>
    /// <li> <p> <code>sqlserver-se</code> </p> </li>
    /// <li> <p> <code>sqlserver-ex</code> </p> </li>
    /// <li> <p> <code>sqlserver-web</code> </p> </li>
    /// </ul>
    pub fn set_engine(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine = input;
        self
    }
    /// <p>The database engine version to return.</p>
    /// <p>Example: <code>5.1.49</code> </p>
    pub fn engine_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.engine_version = Some(input.into());
        self
    }
    /// <p>The database engine version to return.</p>
    /// <p>Example: <code>5.1.49</code> </p>
    pub fn set_engine_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>The name of a specific DB parameter group family to return details for.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li>
    /// </ul>
    pub fn db_parameter_group_family(mut self, input: impl Into<std::string::String>) -> Self {
        self.db_parameter_group_family = Some(input.into());
        self
    }
    /// <p>The name of a specific DB parameter group family to return details for.</p>
    /// <p>Constraints:</p>
    /// <ul>
    /// <li> <p>If supplied, must match an existing DBParameterGroupFamily.</p> </li>
    /// </ul>
    pub fn set_db_parameter_group_family(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.db_parameter_group_family = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>A filter that specifies one or more DB engine versions to describe.</p>
    /// <p>Supported filters:</p>
    /// <ul>
    /// <li> <p> <code>db-parameter-group-family</code> - Accepts parameter groups family names. The results list only includes information about the DB engine versions for these parameter group families.</p> </li>
    /// <li> <p> <code>engine</code> - Accepts engine names. The results list only includes information about the DB engine versions for these engines.</p> </li>
    /// <li> <p> <code>engine-mode</code> - Accepts DB engine modes. The results list only includes information about the DB engine versions for these engine modes. Valid DB engine modes are the following:</p>
    /// <ul>
    /// <li> <p> <code>global</code> </p> </li>
    /// <li> <p> <code>multimaster</code> </p> </li>
    /// <li> <p> <code>parallelquery</code> </p> </li>
    /// <li> <p> <code>provisioned</code> </p> </li>
    /// <li> <p> <code>serverless</code> </p> </li>
    /// </ul> </li>
    /// <li> <p> <code>engine-version</code> - Accepts engine versions. The results list only includes information about the DB engine versions for these engine versions.</p> </li>
    /// <li> <p> <code>status</code> - Accepts engine version statuses. The results list only includes information about the DB engine versions for these statuses. Valid statuses are the following:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>deprecated</code> </p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>A filter that specifies one or more DB engine versions to describe.</p>
    /// <p>Supported filters:</p>
    /// <ul>
    /// <li> <p> <code>db-parameter-group-family</code> - Accepts parameter groups family names. The results list only includes information about the DB engine versions for these parameter group families.</p> </li>
    /// <li> <p> <code>engine</code> - Accepts engine names. The results list only includes information about the DB engine versions for these engines.</p> </li>
    /// <li> <p> <code>engine-mode</code> - Accepts DB engine modes. The results list only includes information about the DB engine versions for these engine modes. Valid DB engine modes are the following:</p>
    /// <ul>
    /// <li> <p> <code>global</code> </p> </li>
    /// <li> <p> <code>multimaster</code> </p> </li>
    /// <li> <p> <code>parallelquery</code> </p> </li>
    /// <li> <p> <code>provisioned</code> </p> </li>
    /// <li> <p> <code>serverless</code> </p> </li>
    /// </ul> </li>
    /// <li> <p> <code>engine-version</code> - Accepts engine versions. The results list only includes information about the DB engine versions for these engine versions.</p> </li>
    /// <li> <p> <code>status</code> - Accepts engine version statuses. The results list only includes information about the DB engine versions for these statuses. Valid statuses are the following:</p>
    /// <ul>
    /// <li> <p> <code>available</code> </p> </li>
    /// <li> <p> <code>deprecated</code> </p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn max_records(mut self, input: i32) -> Self {
        self.max_records = Some(input);
        self
    }
    /// <p>The maximum number of records to include in the response. If more than the <code>MaxRecords</code> value is available, a pagination token called a marker is included in the response so you can retrieve the remaining results.</p>
    /// <p>Default: 100</p>
    /// <p>Constraints: Minimum 20, maximum 100.</p>
    pub fn set_max_records(mut self, input: std::option::Option<i32>) -> Self {
        self.max_records = input;
        self
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by <code>MaxRecords</code>.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.</p>
    pub fn default_only(mut self, input: bool) -> Self {
        self.default_only = Some(input);
        self
    }
    /// <p>A value that indicates whether only the default version of the specified engine or engine and major version combination is returned.</p>
    pub fn set_default_only(mut self, input: std::option::Option<bool>) -> Self {
        self.default_only = input;
        self
    }
    /// <p>A value that indicates whether to list the supported character sets for each engine version.</p>
    /// <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.</p>
    /// <p>For RDS Custom, the default is not to list supported character sets. If you set <code>ListSupportedCharacterSets</code> to <code>true</code>, RDS Custom returns no results.</p>
    pub fn list_supported_character_sets(mut self, input: bool) -> Self {
        self.list_supported_character_sets = Some(input);
        self
    }
    /// <p>A value that indicates whether to list the supported character sets for each engine version.</p>
    /// <p>If this parameter is enabled and the requested engine supports the <code>CharacterSetName</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported character sets for each engine version.</p>
    /// <p>For RDS Custom, the default is not to list supported character sets. If you set <code>ListSupportedCharacterSets</code> to <code>true</code>, RDS Custom returns no results.</p>
    pub fn set_list_supported_character_sets(mut self, input: std::option::Option<bool>) -> Self {
        self.list_supported_character_sets = input;
        self
    }
    /// <p>A value that indicates whether to list the supported time zones for each engine version.</p>
    /// <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.</p>
    /// <p>For RDS Custom, the default is not to list supported time zones. If you set <code>ListSupportedTimezones</code> to <code>true</code>, RDS Custom returns no results.</p>
    pub fn list_supported_timezones(mut self, input: bool) -> Self {
        self.list_supported_timezones = Some(input);
        self
    }
    /// <p>A value that indicates whether to list the supported time zones for each engine version.</p>
    /// <p>If this parameter is enabled and the requested engine supports the <code>TimeZone</code> parameter for <code>CreateDBInstance</code>, the response includes a list of supported time zones for each engine version.</p>
    /// <p>For RDS Custom, the default is not to list supported time zones. If you set <code>ListSupportedTimezones</code> to <code>true</code>, RDS Custom returns no results.</p>
    pub fn set_list_supported_timezones(mut self, input: std::option::Option<bool>) -> Self {
        self.list_supported_timezones = input;
        self
    }
    /// <p>A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.</p>
    pub fn include_all(mut self, input: bool) -> Self {
        self.include_all = Some(input);
        self
    }
    /// <p>A value that indicates whether to include engine versions that aren't available in the list. The default is to list only available engine versions.</p>
    pub fn set_include_all(mut self, input: std::option::Option<bool>) -> Self {
        self.include_all = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDbEngineVersionsInput`](crate::operation::describe_db_engine_versions::DescribeDbEngineVersionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_db_engine_versions::DescribeDbEngineVersionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_db_engine_versions::DescribeDbEngineVersionsInput {
                engine: self.engine,
                engine_version: self.engine_version,
                db_parameter_group_family: self.db_parameter_group_family,
                filters: self.filters,
                max_records: self.max_records,
                marker: self.marker,
                default_only: self.default_only.unwrap_or_default(),
                list_supported_character_sets: self.list_supported_character_sets,
                list_supported_timezones: self.list_supported_timezones,
                include_all: self.include_all,
            },
        )
    }
}
